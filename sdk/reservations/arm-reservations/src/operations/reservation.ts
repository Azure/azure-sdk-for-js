/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Reservation } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureReservationAPI } from "../azureReservationAPI";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  ReservationResponse,
  ReservationListNextOptionalParams,
  ReservationListOptionalParams,
  ReservationListRevisionsNextOptionalParams,
  ReservationListRevisionsOptionalParams,
  ReservationListAllNextOptionalParams,
  ReservationListAllOptionalParams,
  AvailableScopeRequest,
  ReservationAvailableScopesOptionalParams,
  ReservationAvailableScopesResponse,
  SplitRequest,
  ReservationSplitOptionalParams,
  ReservationSplitResponse,
  MergeRequest,
  ReservationMergeOptionalParams,
  ReservationMergeResponse,
  ReservationListResponse,
  ReservationGetOptionalParams,
  ReservationGetResponse,
  Patch,
  ReservationUpdateOptionalParams,
  ReservationUpdateResponse,
  ReservationArchiveOptionalParams,
  ReservationUnarchiveOptionalParams,
  ReservationListRevisionsResponse,
  ReservationListAllResponse,
  ReservationListNextResponse,
  ReservationListRevisionsNextResponse,
  ReservationListAllNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Reservation operations. */
export class ReservationImpl implements Reservation {
  private readonly client: AzureReservationAPI;

  /**
   * Initialize a new instance of the class Reservation class.
   * @param client Reference to the service client
   */
  constructor(client: AzureReservationAPI) {
    this.client = client;
  }

  /**
   * List `Reservation`s within a single `ReservationOrder`.
   * @param reservationOrderId Order Id of the reservation
   * @param options The options parameters.
   */
  public list(
    reservationOrderId: string,
    options?: ReservationListOptionalParams
  ): PagedAsyncIterableIterator<ReservationResponse> {
    const iter = this.listPagingAll(reservationOrderId, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(reservationOrderId, options);
      }
    };
  }

  private async *listPagingPage(
    reservationOrderId: string,
    options?: ReservationListOptionalParams
  ): AsyncIterableIterator<ReservationResponse[]> {
    let result = await this._list(reservationOrderId, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(
        reservationOrderId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    reservationOrderId: string,
    options?: ReservationListOptionalParams
  ): AsyncIterableIterator<ReservationResponse> {
    for await (const page of this.listPagingPage(reservationOrderId, options)) {
      yield* page;
    }
  }

  /**
   * List of all the revisions for the `Reservation`.
   * @param reservationId Id of the Reservation Item
   * @param reservationOrderId Order Id of the reservation
   * @param options The options parameters.
   */
  public listRevisions(
    reservationId: string,
    reservationOrderId: string,
    options?: ReservationListRevisionsOptionalParams
  ): PagedAsyncIterableIterator<ReservationResponse> {
    const iter = this.listRevisionsPagingAll(
      reservationId,
      reservationOrderId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listRevisionsPagingPage(
          reservationId,
          reservationOrderId,
          options
        );
      }
    };
  }

  private async *listRevisionsPagingPage(
    reservationId: string,
    reservationOrderId: string,
    options?: ReservationListRevisionsOptionalParams
  ): AsyncIterableIterator<ReservationResponse[]> {
    let result = await this._listRevisions(
      reservationId,
      reservationOrderId,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listRevisionsNext(
        reservationId,
        reservationOrderId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listRevisionsPagingAll(
    reservationId: string,
    reservationOrderId: string,
    options?: ReservationListRevisionsOptionalParams
  ): AsyncIterableIterator<ReservationResponse> {
    for await (const page of this.listRevisionsPagingPage(
      reservationId,
      reservationOrderId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List the reservations and the roll up counts of reservations group by provisioning states that the
   * user has access to in the current tenant.
   * @param options The options parameters.
   */
  public listAll(
    options?: ReservationListAllOptionalParams
  ): PagedAsyncIterableIterator<ReservationResponse> {
    const iter = this.listAllPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAllPagingPage(options);
      }
    };
  }

  private async *listAllPagingPage(
    options?: ReservationListAllOptionalParams
  ): AsyncIterableIterator<ReservationResponse[]> {
    let result = await this._listAll(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAllNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAllPagingAll(
    options?: ReservationListAllOptionalParams
  ): AsyncIterableIterator<ReservationResponse> {
    for await (const page of this.listAllPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Get Available Scopes for `Reservation`.
   *
   * @param reservationOrderId Order Id of the reservation
   * @param reservationId Id of the Reservation Item
   * @param body Available scope
   * @param options The options parameters.
   */
  async beginAvailableScopes(
    reservationOrderId: string,
    reservationId: string,
    body: AvailableScopeRequest,
    options?: ReservationAvailableScopesOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReservationAvailableScopesResponse>,
      ReservationAvailableScopesResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReservationAvailableScopesResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { reservationOrderId, reservationId, body, options },
      availableScopesOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Get Available Scopes for `Reservation`.
   *
   * @param reservationOrderId Order Id of the reservation
   * @param reservationId Id of the Reservation Item
   * @param body Available scope
   * @param options The options parameters.
   */
  async beginAvailableScopesAndWait(
    reservationOrderId: string,
    reservationId: string,
    body: AvailableScopeRequest,
    options?: ReservationAvailableScopesOptionalParams
  ): Promise<ReservationAvailableScopesResponse> {
    const poller = await this.beginAvailableScopes(
      reservationOrderId,
      reservationId,
      body,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Split a `Reservation` into two `Reservation`s with specified quantity distribution.
   * @param reservationOrderId Order Id of the reservation
   * @param body Information needed to Split a reservation item
   * @param options The options parameters.
   */
  async beginSplit(
    reservationOrderId: string,
    body: SplitRequest,
    options?: ReservationSplitOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReservationSplitResponse>,
      ReservationSplitResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReservationSplitResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { reservationOrderId, body, options },
      splitOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Split a `Reservation` into two `Reservation`s with specified quantity distribution.
   * @param reservationOrderId Order Id of the reservation
   * @param body Information needed to Split a reservation item
   * @param options The options parameters.
   */
  async beginSplitAndWait(
    reservationOrderId: string,
    body: SplitRequest,
    options?: ReservationSplitOptionalParams
  ): Promise<ReservationSplitResponse> {
    const poller = await this.beginSplit(reservationOrderId, body, options);
    return poller.pollUntilDone();
  }

  /**
   * Merge the specified `Reservation`s into a new `Reservation`. The two `Reservation`s being merged
   * must have same properties.
   * @param reservationOrderId Order Id of the reservation
   * @param body Information needed for commercial request for a reservation
   * @param options The options parameters.
   */
  async beginMerge(
    reservationOrderId: string,
    body: MergeRequest,
    options?: ReservationMergeOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReservationMergeResponse>,
      ReservationMergeResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReservationMergeResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { reservationOrderId, body, options },
      mergeOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Merge the specified `Reservation`s into a new `Reservation`. The two `Reservation`s being merged
   * must have same properties.
   * @param reservationOrderId Order Id of the reservation
   * @param body Information needed for commercial request for a reservation
   * @param options The options parameters.
   */
  async beginMergeAndWait(
    reservationOrderId: string,
    body: MergeRequest,
    options?: ReservationMergeOptionalParams
  ): Promise<ReservationMergeResponse> {
    const poller = await this.beginMerge(reservationOrderId, body, options);
    return poller.pollUntilDone();
  }

  /**
   * List `Reservation`s within a single `ReservationOrder`.
   * @param reservationOrderId Order Id of the reservation
   * @param options The options parameters.
   */
  private _list(
    reservationOrderId: string,
    options?: ReservationListOptionalParams
  ): Promise<ReservationListResponse> {
    return this.client.sendOperationRequest(
      { reservationOrderId, options },
      listOperationSpec
    );
  }

  /**
   * Get specific `Reservation` details.
   * @param reservationId Id of the Reservation Item
   * @param reservationOrderId Order Id of the reservation
   * @param options The options parameters.
   */
  get(
    reservationId: string,
    reservationOrderId: string,
    options?: ReservationGetOptionalParams
  ): Promise<ReservationGetResponse> {
    return this.client.sendOperationRequest(
      { reservationId, reservationOrderId, options },
      getOperationSpec
    );
  }

  /**
   * Updates the applied scopes of the `Reservation`.
   * @param reservationOrderId Order Id of the reservation
   * @param reservationId Id of the Reservation Item
   * @param parameters Information needed to patch a reservation item
   * @param options The options parameters.
   */
  async beginUpdate(
    reservationOrderId: string,
    reservationId: string,
    parameters: Patch,
    options?: ReservationUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ReservationUpdateResponse>,
      ReservationUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ReservationUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { reservationOrderId, reservationId, parameters, options },
      updateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates the applied scopes of the `Reservation`.
   * @param reservationOrderId Order Id of the reservation
   * @param reservationId Id of the Reservation Item
   * @param parameters Information needed to patch a reservation item
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    reservationOrderId: string,
    reservationId: string,
    parameters: Patch,
    options?: ReservationUpdateOptionalParams
  ): Promise<ReservationUpdateResponse> {
    const poller = await this.beginUpdate(
      reservationOrderId,
      reservationId,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Archiving a `Reservation` moves it to `Archived` state.
   * @param reservationOrderId Order Id of the reservation
   * @param reservationId Id of the Reservation Item
   * @param options The options parameters.
   */
  archive(
    reservationOrderId: string,
    reservationId: string,
    options?: ReservationArchiveOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { reservationOrderId, reservationId, options },
      archiveOperationSpec
    );
  }

  /**
   * Unarchiving a `Reservation` moves it to the state it was before archiving.
   *
   * @param reservationOrderId Order Id of the reservation
   * @param reservationId Id of the Reservation Item
   * @param options The options parameters.
   */
  unarchive(
    reservationOrderId: string,
    reservationId: string,
    options?: ReservationUnarchiveOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { reservationOrderId, reservationId, options },
      unarchiveOperationSpec
    );
  }

  /**
   * List of all the revisions for the `Reservation`.
   * @param reservationId Id of the Reservation Item
   * @param reservationOrderId Order Id of the reservation
   * @param options The options parameters.
   */
  private _listRevisions(
    reservationId: string,
    reservationOrderId: string,
    options?: ReservationListRevisionsOptionalParams
  ): Promise<ReservationListRevisionsResponse> {
    return this.client.sendOperationRequest(
      { reservationId, reservationOrderId, options },
      listRevisionsOperationSpec
    );
  }

  /**
   * List the reservations and the roll up counts of reservations group by provisioning states that the
   * user has access to in the current tenant.
   * @param options The options parameters.
   */
  private _listAll(
    options?: ReservationListAllOptionalParams
  ): Promise<ReservationListAllResponse> {
    return this.client.sendOperationRequest({ options }, listAllOperationSpec);
  }

  /**
   * ListNext
   * @param reservationOrderId Order Id of the reservation
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    reservationOrderId: string,
    nextLink: string,
    options?: ReservationListNextOptionalParams
  ): Promise<ReservationListNextResponse> {
    return this.client.sendOperationRequest(
      { reservationOrderId, nextLink, options },
      listNextOperationSpec
    );
  }

  /**
   * ListRevisionsNext
   * @param reservationId Id of the Reservation Item
   * @param reservationOrderId Order Id of the reservation
   * @param nextLink The nextLink from the previous successful call to the ListRevisions method.
   * @param options The options parameters.
   */
  private _listRevisionsNext(
    reservationId: string,
    reservationOrderId: string,
    nextLink: string,
    options?: ReservationListRevisionsNextOptionalParams
  ): Promise<ReservationListRevisionsNextResponse> {
    return this.client.sendOperationRequest(
      { reservationId, reservationOrderId, nextLink, options },
      listRevisionsNextOperationSpec
    );
  }

  /**
   * ListAllNext
   * @param nextLink The nextLink from the previous successful call to the ListAll method.
   * @param options The options parameters.
   */
  private _listAllNext(
    nextLink: string,
    options?: ReservationListAllNextOptionalParams
  ): Promise<ReservationListAllNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAllNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const availableScopesOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}/availableScopes",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AvailableScopeProperties
    },
    201: {
      bodyMapper: Mappers.AvailableScopeProperties
    },
    202: {
      bodyMapper: Mappers.AvailableScopeProperties
    },
    204: {
      bodyMapper: Mappers.AvailableScopeProperties
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.reservationOrderId,
    Parameters.reservationId
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const splitOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/split",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ReservationResponse" }
          }
        }
      }
    },
    201: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ReservationResponse" }
          }
        }
      }
    },
    202: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ReservationResponse" }
          }
        }
      }
    },
    204: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ReservationResponse" }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.reservationOrderId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const mergeOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/merge",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ReservationResponse" }
          }
        }
      }
    },
    201: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ReservationResponse" }
          }
        }
      }
    },
    202: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ReservationResponse" }
          }
        }
      }
    },
    204: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ReservationResponse" }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.reservationOrderId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReservationList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.reservationOrderId],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReservationResponse
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand],
  urlParameters: [
    Parameters.$host,
    Parameters.reservationOrderId,
    Parameters.reservationId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ReservationResponse
    },
    201: {
      bodyMapper: Mappers.ReservationResponse
    },
    202: {
      bodyMapper: Mappers.ReservationResponse
    },
    204: {
      bodyMapper: Mappers.ReservationResponse
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.reservationOrderId,
    Parameters.reservationId
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const archiveOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}/archive",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.reservationOrderId,
    Parameters.reservationId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const unarchiveOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}/unarchive",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.reservationOrderId,
    Parameters.reservationId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listRevisionsOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}/revisions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReservationList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.reservationOrderId,
    Parameters.reservationId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAllOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Capacity/reservations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReservationsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.orderby,
    Parameters.refreshSummary,
    Parameters.skiptoken,
    Parameters.selectedState,
    Parameters.take
  ],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReservationList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.reservationOrderId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listRevisionsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReservationList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.reservationOrderId,
    Parameters.reservationId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAllNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReservationsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.orderby,
    Parameters.refreshSummary,
    Parameters.skiptoken,
    Parameters.selectedState,
    Parameters.take
  ],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
