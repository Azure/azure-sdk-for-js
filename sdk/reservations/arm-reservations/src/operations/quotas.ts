/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/quotasMappers";
import * as Parameters from "../models/parameters";
import { AzureReservationAPIContext } from "../azureReservationAPIContext";

/** Class representing a Quotas. */
export class Quotas {
  private readonly client: AzureReservationAPIContext;

  /**
   * Create a Quotas.
   * @param {AzureReservationAPIContext} client Reference to the service client.
   */
  constructor(client: AzureReservationAPIContext) {
    this.client = client;
  }

  /**
   * This API gets the current quota limits and usages for the resource provider for the specified
   * location. This response can be used to submit quotaRequests.
   * @summary Gets the current quota limit and usages for all the resources by the resource provider
   * at the specified location.
   * @param subscriptionId Azure subscription id.
   * @param providerId Azure resource Provider id.
   * @param location Azure region.
   * @param [options] The optional parameters
   * @returns Promise<Models.QuotasListStatusResponse>
   */
  listStatus(subscriptionId: string, providerId: string, location: string, options?: msRest.RequestOptionsBase): Promise<Models.QuotasListStatusResponse>;
  /**
   * @param subscriptionId Azure subscription id.
   * @param providerId Azure resource Provider id.
   * @param location Azure region.
   * @param callback The callback
   */
  listStatus(subscriptionId: string, providerId: string, location: string, callback: msRest.ServiceCallback<Models.QuotaLimits>): void;
  /**
   * @param subscriptionId Azure subscription id.
   * @param providerId Azure resource Provider id.
   * @param location Azure region.
   * @param options The optional parameters
   * @param callback The callback
   */
  listStatus(subscriptionId: string, providerId: string, location: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.QuotaLimits>): void;
  listStatus(subscriptionId: string, providerId: string, location: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.QuotaLimits>, callback?: msRest.ServiceCallback<Models.QuotaLimits>): Promise<Models.QuotasListStatusResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        providerId,
        location,
        options
      },
      listStatusOperationSpec,
      callback) as Promise<Models.QuotasListStatusResponse>;
  }

  /**
   * This API gets the current quota limits and usages for the resource provider for the specified
   * location. This response can be used to submit quotaRequests.
   * @summary Gets the current quota limit and usages for all the resources by the resource provider
   * at the specified location.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.QuotasListStatusResponse>
   */
  listStatusNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.QuotasListStatusResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listStatusNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.QuotaLimits>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listStatusNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.QuotaLimits>): void;
  listStatusNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.QuotaLimits>, callback?: msRest.ServiceCallback<Models.QuotaLimits>): Promise<Models.QuotasListStatusResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listStatusNextOperationSpec,
      callback) as Promise<Models.QuotasListStatusResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimits",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.providerId,
    Parameters.location0
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.QuotaLimits,
      headersMapper: Mappers.QuotasListStatusHeaders
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  serializer
};

const listStatusNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.QuotaLimits,
      headersMapper: Mappers.QuotasListStatusHeaders
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  serializer
};
