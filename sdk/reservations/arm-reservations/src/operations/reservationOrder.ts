/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as coreArm from "@azure/core-arm";
import * as Models from "../models";
import * as Mappers from "../models/reservationOrderMappers";
import * as Parameters from "../models/parameters";
import { AzureReservationAPIContext } from "../azureReservationAPIContext";

/** Class representing a ReservationOrder. */
export class ReservationOrder {
  private readonly client: AzureReservationAPIContext;

  /**
   * Create a ReservationOrder.
   * @param {AzureReservationAPIContext} client Reference to the service client.
   */
  constructor(client: AzureReservationAPIContext) {
    this.client = client;
  }

  /**
   * Calculate price for placing a `ReservationOrder`.
   * @summary Calculate price for a `ReservationOrder`.
   * @param body Information needed for calculate or purchase reservation
   * @param [options] The optional parameters
   * @returns Promise<Models.ReservationOrderCalculateResponse>
   */
  calculate(body: Models.PurchaseRequest, options?: coreHttp.RequestOptionsBase): Promise<Models.ReservationOrderCalculateResponse>;
  /**
   * @param body Information needed for calculate or purchase reservation
   * @param callback The callback
   */
  calculate(body: Models.PurchaseRequest, callback: coreHttp.ServiceCallback<Models.CalculatePriceResponse>): void;
  /**
   * @param body Information needed for calculate or purchase reservation
   * @param options The optional parameters
   * @param callback The callback
   */
  calculate(body: Models.PurchaseRequest, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.CalculatePriceResponse>): void;
  calculate(body: Models.PurchaseRequest, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CalculatePriceResponse>, callback?: coreHttp.ServiceCallback<Models.CalculatePriceResponse>): Promise<Models.ReservationOrderCalculateResponse> {
    return this.client.sendOperationRequest(
      {
        body,
        options
      },
      calculateOperationSpec,
      callback) as Promise<Models.ReservationOrderCalculateResponse>;
  }

  /**
   * List of all the `ReservationOrder`s that the user has access to in the current tenant.
   * @summary Get all `ReservationOrder`s.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReservationOrderListResponse>
   */
  list(options?: coreHttp.RequestOptionsBase): Promise<Models.ReservationOrderListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: coreHttp.ServiceCallback<Models.ReservationOrderList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.ReservationOrderList>): void;
  list(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.ReservationOrderList>, callback?: coreHttp.ServiceCallback<Models.ReservationOrderList>): Promise<Models.ReservationOrderListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.ReservationOrderListResponse>;
  }

  /**
   * Purchase `ReservationOrder` and create resource under the specified URI.
   * @summary Purchase `ReservationOrder`
   * @param reservationOrderId Order Id of the reservation
   * @param body Information needed for calculate or purchase reservation
   * @param [options] The optional parameters
   * @returns Promise<Models.ReservationOrderPurchaseResponse>
   */
  purchase(reservationOrderId: string, body: Models.PurchaseRequest, options?: coreHttp.RequestOptionsBase): Promise<Models.ReservationOrderPurchaseResponse> {
    return this.beginPurchase(reservationOrderId,body,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ReservationOrderPurchaseResponse>;
  }

  /**
   * Get the details of the `ReservationOrder`.
   * @summary Get a specific `ReservationOrder`.
   * @param reservationOrderId Order Id of the reservation
   * @param [options] The optional parameters
   * @returns Promise<Models.ReservationOrderGetResponse>
   */
  get(reservationOrderId: string, options?: coreHttp.RequestOptionsBase): Promise<Models.ReservationOrderGetResponse>;
  /**
   * @param reservationOrderId Order Id of the reservation
   * @param callback The callback
   */
  get(reservationOrderId: string, callback: coreHttp.ServiceCallback<Models.ReservationOrderResponse>): void;
  /**
   * @param reservationOrderId Order Id of the reservation
   * @param options The optional parameters
   * @param callback The callback
   */
  get(reservationOrderId: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.ReservationOrderResponse>): void;
  get(reservationOrderId: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.ReservationOrderResponse>, callback?: coreHttp.ServiceCallback<Models.ReservationOrderResponse>): Promise<Models.ReservationOrderGetResponse> {
    return this.client.sendOperationRequest(
      {
        reservationOrderId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ReservationOrderGetResponse>;
  }

  /**
   * Purchase `ReservationOrder` and create resource under the specified URI.
   * @summary Purchase `ReservationOrder`
   * @param reservationOrderId Order Id of the reservation
   * @param body Information needed for calculate or purchase reservation
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginPurchase(reservationOrderId: string, body: Models.PurchaseRequest, options?: coreHttp.RequestOptionsBase): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        reservationOrderId,
        body,
        options
      },
      beginPurchaseOperationSpec,
      options);
  }

  /**
   * List of all the `ReservationOrder`s that the user has access to in the current tenant.
   * @summary Get all `ReservationOrder`s.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReservationOrderListNextResponse>
   */
  listNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase): Promise<Models.ReservationOrderListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: coreHttp.ServiceCallback<Models.ReservationOrderList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.ReservationOrderList>): void;
  listNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.ReservationOrderList>, callback?: coreHttp.ServiceCallback<Models.ReservationOrderList>): Promise<Models.ReservationOrderListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.ReservationOrderListNextResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const calculateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Capacity/calculatePrice",
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.PurchaseRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CalculatePriceResponse
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Capacity/reservationOrders",
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ReservationOrderList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}",
  urlParameters: [
    Parameters.reservationOrderId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ReservationOrderResponse
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const beginPurchaseOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}",
  urlParameters: [
    Parameters.reservationOrderId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.PurchaseRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ReservationOrderResponse
    },
    202: {
      bodyMapper: Mappers.ReservationOrderResponse
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listNextOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ReservationOrderList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
