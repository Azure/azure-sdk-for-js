/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/quotaRequestsMappers";
import * as Parameters from "../models/parameters";
import { AzureReservationAPIContext } from "../azureReservationAPIContext";

/** Class representing a QuotaRequests. */
export class QuotaRequests {
  private readonly client: AzureReservationAPIContext;

  /**
   * Create a QuotaRequests.
   * @param {AzureReservationAPIContext} client Reference to the service client.
   */
  constructor(client: AzureReservationAPIContext) {
    this.client = client;
  }

  /**
   * Gets the QuotaRequest details and status by the quota requestId for the resources for the
   * resource provider at a specific location. The requestId is returned as response to the Put
   * requests for serviceLimits.
   * @summary Gets the Quota request status by requestId, for the specified resource provider at
   * specified location.
   * @param subscriptionId Azure subscription id.
   * @param providerId Azure resource Provider id.
   * @param location Azure region.
   * @param id Quota Request id.
   * @param [options] The optional parameters
   * @returns Promise<Models.QuotaRequestsGetStatusResponse>
   */
  getStatus(subscriptionId: string, providerId: string, location: string, id: string, options?: msRest.RequestOptionsBase): Promise<Models.QuotaRequestsGetStatusResponse>;
  /**
   * @param subscriptionId Azure subscription id.
   * @param providerId Azure resource Provider id.
   * @param location Azure region.
   * @param id Quota Request id.
   * @param callback The callback
   */
  getStatus(subscriptionId: string, providerId: string, location: string, id: string, callback: msRest.ServiceCallback<Models.QuotaRequestDetails>): void;
  /**
   * @param subscriptionId Azure subscription id.
   * @param providerId Azure resource Provider id.
   * @param location Azure region.
   * @param id Quota Request id.
   * @param options The optional parameters
   * @param callback The callback
   */
  getStatus(subscriptionId: string, providerId: string, location: string, id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.QuotaRequestDetails>): void;
  getStatus(subscriptionId: string, providerId: string, location: string, id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.QuotaRequestDetails>, callback?: msRest.ServiceCallback<Models.QuotaRequestDetails>): Promise<Models.QuotaRequestsGetStatusResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        providerId,
        location,
        id,
        options
      },
      getStatusOperationSpec,
      callback) as Promise<Models.QuotaRequestsGetStatusResponse>;
  }

  /**
   * For the specified location and Resource provider gets the current quota requests under the
   * subscription over the time period of one year ago from now to one year back. oData filter can be
   * used to select quota requests.
   * @summary For the specified location and resource Provider, gets the quota requests under the
   * subscription over the time
   * period of one year ago from now to one year back, based on the filter specified.
   * @param subscriptionId Azure subscription id.
   * @param providerId Azure resource Provider id.
   * @param location Azure region.
   * @param [options] The optional parameters
   * @returns Promise<Models.QuotaRequestsListStatusResponse>
   */
  listStatus(subscriptionId: string, providerId: string, location: string, options?: Models.QuotaRequestsListStatusOptionalParams): Promise<Models.QuotaRequestsListStatusResponse>;
  /**
   * @param subscriptionId Azure subscription id.
   * @param providerId Azure resource Provider id.
   * @param location Azure region.
   * @param callback The callback
   */
  listStatus(subscriptionId: string, providerId: string, location: string, callback: msRest.ServiceCallback<Models.QuotaRequestDetailsList>): void;
  /**
   * @param subscriptionId Azure subscription id.
   * @param providerId Azure resource Provider id.
   * @param location Azure region.
   * @param options The optional parameters
   * @param callback The callback
   */
  listStatus(subscriptionId: string, providerId: string, location: string, options: Models.QuotaRequestsListStatusOptionalParams, callback: msRest.ServiceCallback<Models.QuotaRequestDetailsList>): void;
  listStatus(subscriptionId: string, providerId: string, location: string, options?: Models.QuotaRequestsListStatusOptionalParams | msRest.ServiceCallback<Models.QuotaRequestDetailsList>, callback?: msRest.ServiceCallback<Models.QuotaRequestDetailsList>): Promise<Models.QuotaRequestsListStatusResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        providerId,
        location,
        options
      },
      listStatusOperationSpec,
      callback) as Promise<Models.QuotaRequestsListStatusResponse>;
  }

  /**
   * For the specified location and Resource provider gets the current quota requests under the
   * subscription over the time period of one year ago from now to one year back. oData filter can be
   * used to select quota requests.
   * @summary For the specified location and resource Provider, gets the quota requests under the
   * subscription over the time
   * period of one year ago from now to one year back, based on the filter specified.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.QuotaRequestsListStatusNextResponse>
   */
  listStatusNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.QuotaRequestsListStatusNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listStatusNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.QuotaRequestDetailsList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listStatusNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.QuotaRequestDetailsList>): void;
  listStatusNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.QuotaRequestDetailsList>, callback?: msRest.ServiceCallback<Models.QuotaRequestDetailsList>): Promise<Models.QuotaRequestsListStatusNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listStatusNextOperationSpec,
      callback) as Promise<Models.QuotaRequestsListStatusNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimitsRequests/{id}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.providerId,
    Parameters.location0,
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.QuotaRequestDetails
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  serializer
};

const listStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimitsRequests",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.providerId,
    Parameters.location0
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.filter,
    Parameters.top,
    Parameters.skiptoken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.QuotaRequestDetailsList
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  serializer
};

const listStatusNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.QuotaRequestDetailsList
    },
    default: {
      bodyMapper: Mappers.ExceptionResponse
    }
  },
  serializer
};
