/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * Available scope request properties
 */
export interface AvailableScopeRequestProperties {
  scopes?: string[];
}

/**
 * Available scope
 */
export interface AvailableScopeRequest {
  properties?: AvailableScopeRequestProperties;
}

/**
 * An interface representing SkuName.
 */
export interface SkuName {
  name?: string;
}

/**
 * Properties specific to each reserved resource type. Not required if not applicable.
 */
export interface PurchaseRequestPropertiesReservedResourceProperties {
  /**
   * Possible values include: 'On', 'Off'
   */
  instanceFlexibility?: InstanceFlexibility;
}

/**
 * An interface representing PurchaseRequest.
 */
export interface PurchaseRequest {
  sku?: SkuName;
  /**
   * The Azure Region where the reserved resource lives.
   */
  location?: string;
  /**
   * Possible values include: 'VirtualMachines', 'SqlDatabases', 'SuseLinux', 'CosmosDb', 'RedHat',
   * 'SqlDataWarehouse', 'VMwareCloudSimple', 'RedHatOsa', 'Databricks', 'AppService',
   * 'ManagedDisk', 'BlockBlob', 'RedisCache', 'AzureDataExplorer', 'MySql', 'MariaDb',
   * 'PostgreSql', 'DedicatedHost', 'SapHana', 'SqlAzureHybridBenefit'
   */
  reservedResourceType?: ReservedResourceType;
  billingScopeId?: string;
  /**
   * Possible values include: 'P1Y', 'P3Y'
   */
  term?: ReservationTerm;
  /**
   * Possible values include: 'Upfront', 'Monthly'
   */
  billingPlan?: ReservationBillingPlan;
  quantity?: number;
  /**
   * Friendly name of the Reservation
   */
  displayName?: string;
  /**
   * Possible values include: 'Single', 'Shared'
   */
  appliedScopeType?: AppliedScopeType;
  appliedScopes?: string[];
  renew?: boolean;
  /**
   * Properties specific to each reserved resource type. Not required if not applicable.
   */
  reservedResourceProperties?: PurchaseRequestPropertiesReservedResourceProperties;
}

/**
 * Reservation to return
 */
export interface ReservationToReturn {
  /**
   * Fully qualified identifier of the Reservation being returned
   */
  reservationId?: string;
  /**
   * Quantity to be returned. Must be greater than zero.
   */
  quantity?: number;
}

/**
 * Calculate exchange request properties
 */
export interface CalculateExchangeRequestProperties {
  /**
   * List of reservations that are being purchased in this exchange.
   */
  reservationsToPurchase?: PurchaseRequest[];
  /**
   * List of reservations that are being returned in this exchange.
   */
  reservationsToExchange?: ReservationToReturn[];
}

/**
 * Calculate exchange request
 */
export interface CalculateExchangeRequest {
  properties?: CalculateExchangeRequestProperties;
}

/**
 * Exchange request properties
 */
export interface ExchangeRequestProperties {
  /**
   * SessionId that was returned by CalculateExchange API.
   */
  sessionId?: string;
}

/**
 * Exchange request
 */
export interface ExchangeRequest {
  properties?: ExchangeRequestProperties;
}

/**
 * An interface representing Price.
 */
export interface Price {
  /**
   * The ISO 4217 3-letter currency code for the currency used by this purchase record.
   */
  currencyCode?: string;
  amount?: number;
}

/**
 * Reservation purchase details
 */
export interface ReservationToPurchaseCalculateExchange {
  properties?: PurchaseRequest;
  billingCurrencyTotal?: Price;
}

/**
 * billing information
 */
export interface BillingInformation {
  billingCurrencyTotalPaidAmount?: Price;
  billingCurrencyProratedAmount?: Price;
  billingCurrencyRemainingCommitmentAmount?: Price;
}

/**
 * Reservation refund details
 */
export interface ReservationToExchange {
  /**
   * Fully qualified id of the Reservation being returned.
   */
  reservationId?: string;
  /**
   * Quantity to be returned
   */
  quantity?: number;
  billingRefundAmount?: Price;
  billingInformation?: BillingInformation;
}

/**
 * error details
 */
export interface ExchangePolicyError {
  code?: string;
  message?: string;
}

/**
 * Exchange policy errors
 */
export interface ExchangePolicyErrors {
  /**
   * Exchange Policy errors
   */
  policyErrors?: ExchangePolicyError[];
}

/**
 * CalculateExchange response properties
 */
export interface CalculateExchangeResponseProperties {
  /**
   * Exchange session identifier
   */
  sessionId?: string;
  netPayable?: Price;
  refundsTotal?: Price;
  purchasesTotal?: Price;
  /**
   * Details of the reservations being purchased
   */
  reservationsToPurchase?: ReservationToPurchaseCalculateExchange[];
  /**
   * Details of the reservations being returned
   */
  reservationsToExchange?: ReservationToExchange[];
  policyResult?: ExchangePolicyErrors;
}

/**
 * Required if status == failed or status == canceled.
 */
export interface OperationResultError {
  /**
   * Required if status == failed or status == cancelled. If status == failed, provide an invariant
   * error code used for error troubleshooting, aggregation, and analysis.
   */
  code?: string;
  /**
   * Required if status == failed. Localized. If status == failed, provide an actionable error
   * message indicating what error occurred, and what the user can do to address the issue.
   */
  message?: string;
}

/**
 * CalculateExchange operation result
 */
export interface CalculateExchangeOperationResultResponse {
  /**
   * It should match what is used to GET the operation result.
   */
  id?: string;
  /**
   * It must match the last segment of the id field, and will typically be a GUID / system
   * generated value.
   */
  name?: string;
  /**
   * Status of the operation. Possible values include: 'Succeeded', 'Failed', 'Cancelled',
   * 'Pending'
   */
  status?: CalculateExchangeOperationResultStatus;
  properties?: CalculateExchangeResponseProperties;
  error?: OperationResultError;
}

/**
 * Reservation purchase details
 */
export interface ReservationToPurchaseExchange {
  /**
   * Fully qualified id of the ReservationOrder being purchased
   */
  reservationOrderId?: string;
  /**
   * Fully qualified id of the Reservation being purchased. This value is only guaranteed to be
   * non-null if the purchase is successful.
   */
  reservationId?: string;
  properties?: PurchaseRequest;
  billingCurrencyTotal?: Price;
  /**
   * Possible values include: 'Succeeded', 'Failed', 'Cancelled', 'Pending'
   */
  status?: OperationStatus;
}

/**
 * Reservation refund details
 */
export interface ReservationToReturnForExchange {
  /**
   * Fully qualified id of the Reservation being returned.
   */
  reservationId?: string;
  /**
   * Quantity to be returned
   */
  quantity?: number;
  billingRefundAmount?: Price;
  billingInformation?: BillingInformation;
  /**
   * Possible values include: 'Succeeded', 'Failed', 'Cancelled', 'Pending'
   */
  status?: OperationStatus;
}

/**
 * Exchange response properties
 */
export interface ExchangeResponseProperties {
  /**
   * Exchange session identifier
   */
  sessionId?: string;
  netPayable?: Price;
  refundsTotal?: Price;
  purchasesTotal?: Price;
  /**
   * Details of the reservations being purchased
   */
  reservationsToPurchase?: ReservationToPurchaseExchange[];
  /**
   * Details of the reservations being returned
   */
  reservationsToExchange?: ReservationToReturnForExchange[];
  policyResult?: ExchangePolicyErrors;
}

/**
 * Exchange operation result
 */
export interface ExchangeOperationResultResponse {
  /**
   * It should match what is used to GET the operation result.
   */
  id?: string;
  /**
   * It must match the last segment of the id field, and will typically be a GUID / system
   * generated value.
   */
  name?: string;
  /**
   * Status of the operation. Possible values include: 'Succeeded', 'Failed', 'Cancelled',
   * 'PendingRefunds', 'PendingPurchases'
   */
  status?: ExchangeOperationResultStatus;
  properties?: ExchangeResponseProperties;
  error?: OperationResultError;
}

/**
 * An interface representing SkuProperty.
 */
export interface SkuProperty {
  /**
   * An invariant to describe the feature.
   */
  name?: string;
  /**
   * An invariant if the feature is measured by quantity.
   */
  value?: string;
}

/**
 * An interface representing SkuRestriction.
 */
export interface SkuRestriction {
  /**
   * The type of restrictions.
   */
  type?: string;
  /**
   * The value of restrictions. If the restriction type is set to location. This would be different
   * locations where the SKU is restricted.
   */
  values?: string[];
  /**
   * The reason for restriction.
   */
  reasonCode?: string;
}

/**
 * An interface representing Catalog.
 */
export interface Catalog {
  /**
   * The type of resource the SKU applies to.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resourceType?: string;
  /**
   * The name of SKU
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The billing plan options available for this SKU.
   */
  billingPlans?: { [propertyName: string]: ReservationBillingPlan[] };
  /**
   * Available reservation terms for this resource
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly terms?: ReservationTerm[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly locations?: string[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly skuProperties?: SkuProperty[];
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly restrictions?: SkuRestriction[];
}

/**
 * An interface representing ExtendedStatusInfo.
 */
export interface ExtendedStatusInfo {
  /**
   * Possible values include: 'None', 'Pending', 'Active', 'PurchaseError',
   * 'PaymentInstrumentError', 'Split', 'Merged', 'Expired', 'Succeeded'
   */
  statusCode?: ReservationStatusCode;
  /**
   * The message giving detailed information about the status code.
   */
  message?: string;
}

/**
 * Information about payment related to a reservation order.
 */
export interface PaymentDetail {
  /**
   * Date when the payment needs to be done.
   */
  dueDate?: Date;
  /**
   * Date when the transaction is completed. Is null when it is scheduled.
   */
  paymentDate?: Date;
  /**
   * Amount in pricing currency. Tax not included.
   */
  pricingCurrencyTotal?: Price;
  /**
   * Amount charged in Billing currency. Tax not included. Is null for future payments
   */
  billingCurrencyTotal?: Price;
  /**
   * Shows the Account that is charged for this payment.
   */
  billingAccount?: string;
  /**
   * Possible values include: 'Succeeded', 'Failed', 'Scheduled', 'Cancelled'
   */
  status?: PaymentStatus;
  extendedStatusInfo?: ExtendedStatusInfo;
}

/**
 * Information describing the type of billing plan for this reservation.
 */
export interface ReservationOrderBillingPlanInformation {
  /**
   * Amount of money to be paid for the Order. Tax is not included.
   */
  pricingCurrencyTotal?: Price;
  /**
   * Date when the billing plan has started.
   */
  startDate?: Date;
  /**
   * For recurring billing plans, indicates the date when next payment will be processed. Null when
   * total is paid off.
   */
  nextPaymentDueDate?: Date;
  transactions?: PaymentDetail[];
}

/**
 * An interface representing ReservationSplitProperties.
 */
export interface ReservationSplitProperties {
  /**
   * List of destination Resource Id that are created due to split. Format of the resource Id is
   * /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
   */
  splitDestinations?: string[];
  /**
   * Resource Id of the Reservation from which this is split. Format of the resource Id is
   * /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
   */
  splitSource?: string;
}

/**
 * An interface representing ReservationMergeProperties.
 */
export interface ReservationMergeProperties {
  /**
   * Reservation Resource Id Created due to the merge. Format of the resource Id is
   * /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
   */
  mergeDestination?: string;
  /**
   * Resource Ids of the Source Reservation's merged to form this Reservation. Format of the
   * resource Id is
   * /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
   */
  mergeSources?: string[];
}

/**
 * Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is
 * not included. This is locked price 30 days before expiry.
 */
export interface RenewPropertiesResponsePricingCurrencyTotal {
  currencyCode?: string;
  amount?: number;
}

/**
 * Currency and amount that customer will be charged in customer's local currency for renewal
 * purchase. Tax is not included.
 */
export interface RenewPropertiesResponseBillingCurrencyTotal {
  currencyCode?: string;
  amount?: number;
}

/**
 * An interface representing RenewPropertiesResponse.
 */
export interface RenewPropertiesResponse {
  purchaseProperties?: PurchaseRequest;
  /**
   * Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is
   * not included. This is locked price 30 days before expiry.
   */
  pricingCurrencyTotal?: RenewPropertiesResponsePricingCurrencyTotal;
  /**
   * Currency and amount that customer will be charged in customer's local currency for renewal
   * purchase. Tax is not included.
   */
  billingCurrencyTotal?: RenewPropertiesResponseBillingCurrencyTotal;
}

/**
 * An interface representing ReservationProperties.
 */
export interface ReservationProperties {
  /**
   * Possible values include: 'VirtualMachines', 'SqlDatabases', 'SuseLinux', 'CosmosDb', 'RedHat',
   * 'SqlDataWarehouse', 'VMwareCloudSimple', 'RedHatOsa', 'Databricks', 'AppService',
   * 'ManagedDisk', 'BlockBlob', 'RedisCache', 'AzureDataExplorer', 'MySql', 'MariaDb',
   * 'PostgreSql', 'DedicatedHost', 'SapHana', 'SqlAzureHybridBenefit'
   */
  reservedResourceType?: ReservedResourceType;
  /**
   * Possible values include: 'On', 'Off'
   */
  instanceFlexibility?: InstanceFlexibility;
  /**
   * Friendly name for user to easily identify the reservation
   */
  displayName?: string;
  appliedScopes?: string[];
  /**
   * Possible values include: 'Single', 'Shared'
   */
  appliedScopeType?: AppliedScopeType;
  quantity?: number;
  /**
   * Current state of the reservation.
   */
  provisioningState?: string;
  /**
   * DateTime of the Reservation starting when this version is effective from.
   */
  effectiveDateTime?: Date;
  /**
   * DateTime of the last time the Reservation was updated.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastUpdatedDateTime?: Date;
  /**
   * This is the date when the Reservation will expire.
   */
  expiryDate?: Date;
  /**
   * Description of the SKU in english.
   */
  skuDescription?: string;
  extendedStatusInfo?: ExtendedStatusInfo;
  /**
   * Possible values include: 'Upfront', 'Monthly'
   */
  billingPlan?: ReservationBillingPlan;
  splitProperties?: ReservationSplitProperties;
  mergeProperties?: ReservationMergeProperties;
  billingScopeId?: string;
  renew?: boolean;
  /**
   * Reservation Id of the reservation from which this reservation is renewed. Format of the
   * resource Id is
   * /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.
   */
  renewSource?: string;
  /**
   * Reservation Id of the reservation which is purchased because of renew. Format of the resource
   * Id is
   * /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.
   */
  renewDestination?: string;
  renewProperties?: RenewPropertiesResponse;
  /**
   * Possible values include: 'P1Y', 'P3Y'
   */
  term?: ReservationTerm;
}

/**
 * An interface representing ReservationResponse.
 */
export interface ReservationResponse extends BaseResource {
  /**
   * The Azure Region where the reserved resource lives.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly location?: string;
  etag?: number;
  /**
   * Identifier of the reservation
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Name of the reservation
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  sku?: SkuName;
  properties?: ReservationProperties;
  /**
   * Type of resource. "Microsoft.Capacity/reservationOrders/reservations"
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * An interface representing ReservationOrderResponse.
 */
export interface ReservationOrderResponse extends BaseResource {
  etag?: number;
  /**
   * Identifier of the reservation
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Name of the reservation
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Friendly name for user to easily identified the reservation.
   */
  displayName?: string;
  /**
   * This is the DateTime when the reservation was initially requested for purchase.
   */
  requestDateTime?: Date;
  /**
   * This is the DateTime when the reservation was created.
   */
  createdDateTime?: Date;
  /**
   * This is the date when the Reservation will expire.
   */
  expiryDate?: Date;
  originalQuantity?: number;
  /**
   * Possible values include: 'P1Y', 'P3Y'
   */
  term?: ReservationTerm;
  /**
   * Current state of the reservation.
   */
  provisioningState?: string;
  /**
   * Possible values include: 'Upfront', 'Monthly'
   */
  billingPlan?: ReservationBillingPlan;
  planInformation?: ReservationOrderBillingPlanInformation;
  reservations?: ReservationResponse[];
  /**
   * Type of resource. "Microsoft.Capacity/reservations"
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * Currency and amount that customer will be charged in customer's local currency. Tax is not
 * included.
 */
export interface CalculatePriceResponsePropertiesBillingCurrencyTotal {
  currencyCode?: string;
  amount?: number;
}

/**
 * Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is
 * not included.
 */
export interface CalculatePriceResponsePropertiesPricingCurrencyTotal {
  currencyCode?: string;
  amount?: number;
}

/**
 * An interface representing CalculatePriceResponseProperties.
 */
export interface CalculatePriceResponseProperties {
  /**
   * Currency and amount that customer will be charged in customer's local currency. Tax is not
   * included.
   */
  billingCurrencyTotal?: CalculatePriceResponsePropertiesBillingCurrencyTotal;
  /**
   * True if billing is managed by Microsoft Partner. Used only for CSP accounts.
   */
  isBillingPartnerManaged?: boolean;
  /**
   * GUID that represents reservation order that can be placed after calculating price.
   */
  reservationOrderId?: string;
  /**
   * Title of SKU that is being purchased.
   */
  skuTitle?: string;
  /**
   * Description of SKU that is being purchased.
   */
  skuDescription?: string;
  /**
   * Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is
   * not included.
   */
  pricingCurrencyTotal?: CalculatePriceResponsePropertiesPricingCurrencyTotal;
  paymentSchedule?: PaymentDetail[];
}

/**
 * An interface representing CalculatePriceResponse.
 */
export interface CalculatePriceResponse {
  properties?: CalculatePriceResponseProperties;
}

/**
 * An interface representing PatchPropertiesRenewProperties.
 */
export interface PatchPropertiesRenewProperties {
  purchaseProperties?: PurchaseRequest;
}

/**
 * An interface representing MergeRequest.
 */
export interface MergeRequest {
  /**
   * Format of the resource id should be
   * /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
   */
  sources?: string[];
}

/**
 * An interface representing Patch.
 */
export interface Patch {
  /**
   * Possible values include: 'Single', 'Shared'
   */
  appliedScopeType?: AppliedScopeType;
  appliedScopes?: string[];
  /**
   * Possible values include: 'On', 'Off'
   */
  instanceFlexibility?: InstanceFlexibility;
  /**
   * Name of the Reservation
   */
  name?: string;
  renew?: boolean;
  renewProperties?: PatchPropertiesRenewProperties;
}

/**
 * An interface representing SplitRequest.
 */
export interface SplitRequest {
  /**
   * List of the quantities in the new reservations to create.
   */
  quantities?: number[];
  /**
   * Resource id of the reservation to be split. Format of the resource id should be
   * /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
   */
  reservationId?: string;
}

/**
 * An interface representing ExtendedErrorInfo.
 */
export interface ExtendedErrorInfo {
  /**
   * Possible values include: 'NotSpecified', 'InternalServerError', 'ServerTimeout',
   * 'AuthorizationFailed', 'BadRequest', 'ClientCertificateThumbprintNotSet',
   * 'InvalidRequestContent', 'OperationFailed', 'HttpMethodNotSupported', 'InvalidRequestUri',
   * 'MissingTenantId', 'InvalidTenantId', 'InvalidReservationOrderId', 'InvalidReservationId',
   * 'ReservationIdNotInReservationOrder', 'ReservationOrderNotFound', 'InvalidSubscriptionId',
   * 'InvalidAccessToken', 'InvalidLocationId', 'UnauthenticatedRequestsThrottled',
   * 'InvalidHealthCheckType', 'Forbidden', 'BillingScopeIdCannotBeChanged',
   * 'AppliedScopesNotAssociatedWithCommerceAccount', 'PatchValuesSameAsExisting',
   * 'RoleAssignmentCreationFailed', 'ReservationOrderCreationFailed',
   * 'ReservationOrderNotEnabled', 'CapacityUpdateScopesFailed', 'UnsupportedReservationTerm',
   * 'ReservationOrderIdAlreadyExists', 'RiskCheckFailed', 'CreateQuoteFailed',
   * 'ActivateQuoteFailed', 'NonsupportedAccountId', 'PaymentInstrumentNotFound',
   * 'MissingAppliedScopesForSingle', 'NoValidReservationsToReRate', 'ReRateOnlyAllowedForEA',
   * 'OperationCannotBePerformedInCurrentState', 'InvalidSingleAppliedScopesCount',
   * 'InvalidFulfillmentRequestParameters', 'NotSupportedCountry', 'InvalidRefundQuantity',
   * 'PurchaseError', 'BillingCustomerInputError', 'BillingPaymentInstrumentSoftError',
   * 'BillingPaymentInstrumentHardError', 'BillingTransientError', 'BillingError',
   * 'FulfillmentConfigurationError', 'FulfillmentOutOfStockError', 'FulfillmentTransientError',
   * 'FulfillmentError', 'CalculatePriceFailed'
   */
  code?: ErrorResponseCode;
  message?: string;
}

/**
 * An interface representing ErrorModel.
 */
export interface ErrorModel {
  error?: ExtendedErrorInfo;
}

/**
 * An interface representing AppliedReservationList.
 */
export interface AppliedReservationList {
  value?: string[];
  /**
   * Url to get the next page of reservations
   */
  nextLink?: string;
}

/**
 * An interface representing AppliedReservations.
 */
export interface AppliedReservations {
  /**
   * Identifier of the applied reservations
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Name of resource
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Type of resource. "Microsoft.Capacity/AppliedReservations"
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  reservationOrderIds?: AppliedReservationList;
}

/**
 * An interface representing OperationDisplay.
 */
export interface OperationDisplay {
  provider?: string;
  resource?: string;
  operation?: string;
  description?: string;
}

/**
 * An interface representing OperationResponse.
 */
export interface OperationResponse {
  name?: string;
  display?: OperationDisplay;
  origin?: string;
}

/**
 * An interface representing ScopeProperties.
 */
export interface ScopeProperties {
  scope?: string;
  valid?: boolean;
}

/**
 * An interface representing SubscriptionScopeProperties.
 */
export interface SubscriptionScopeProperties {
  scopes?: ScopeProperties[];
}

/**
 * An interface representing AvailableScopeProperties.
 */
export interface AvailableScopeProperties {
  properties?: SubscriptionScopeProperties;
}

/**
 * Resource name provided by the resource provider. Use this property for quotaRequest parameter.
 */
export interface ResourceName {
  /**
   * Resource name.
   */
  value?: string;
  /**
   * Resource display localized name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly localizedValue?: string;
}

/**
 * Quota properties for the resource.
 */
export interface QuotaProperties {
  /**
   * Quota properties.
   */
  limit?: number;
  /**
   * Current usage value for the resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly currentValue?: number;
  /**
   * The limit units, such as **count** and **bytes**. Use the unit field provided in the response
   * of the GET quota operation.
   */
  unit?: string;
  /**
   * Name of the resource provide by the resource provider. Use this property for quotaRequests
   * resource operations.
   */
  name?: ResourceName;
  /**
   * The name of the resource type.
   */
  resourceType?: any;
  /**
   * The time period over which the quota usage values are summarized. For example, P1D (per one
   * day), PT1M (per one minute), and PT1S (per one second). This parameter is optional because,
   * for some resources such as compute, the time period is irrelevant.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly quotaPeriod?: string;
  /**
   * Additional properties for the specified resource provider.
   */
  properties?: any;
}

/**
 * Quota properties.
 */
export interface CurrentQuotaLimitBase extends BaseResource {
  /**
   * Quota properties for the resource.
   */
  properties?: QuotaProperties;
}

/**
 * Current quota limits.
 */
export interface CurrentQuotaLimit extends BaseResource {
  /**
   * Quota properties for the resource.
   */
  properties?: QuotaProperties;
  /**
   * The details of the quota request status.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: any;
  /**
   * A user friendly message.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
}

/**
 * Quotas (service limits) in the request response.
 */
export interface QuotaLimitsResponse {
  /**
   * List of quotas with the quota request status.
   */
  value?: CurrentQuotaLimit[];
  /**
   * The URI for fetching the next page of quota limits. When no more pages exist, the value is
   * null.
   */
  nextLink?: string;
}

/**
 * Quota change requests information.
 */
export interface CreateGenericQuotaRequestParameters {
  /**
   * Quota change requests.
   */
  value?: CurrentQuotaLimitBase[];
}

/**
 * The sub-request submitted with the quota request.
 */
export interface SubRequest {
  /**
   * Quota (resource limit).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly limit?: number;
  /**
   * The resource name.
   */
  name?: ResourceName;
  /**
   * Resource type for which the quota check was made.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resourceType?: string;
  /**
   * The limit units, such as **count** and **bytes**. Use the unit field provided in the response
   * of the GET quota operation.
   */
  unit?: string;
  /**
   * The quota request status.
   */
  provisioningState?: any;
  /**
   * User-friendly status message.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * Sub request ID for individual request.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly subRequestId?: string;
}

/**
 * Response for the quota submission request.
 */
export interface QuotaRequestOneResourceSubmitResponse extends BaseResource {
  /**
   * The quota request ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the quota request.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Type of resource. "Microsoft.Capacity/ServiceLimits"
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * The quota request status.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: any;
  /**
   * User friendly status message.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * The time when the quota request was submitted using format: yyyy-MM-ddTHH:mm:ssZ as specified
   * by the ISO 8601 standard.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly requestSubmitTime?: Date;
  /**
   * Quota properties for the resource.
   */
  properties?: QuotaProperties;
}

/**
 * The details of quota request.
 */
export interface QuotaRequestProperties {
  /**
   * The quota request status.
   */
  provisioningState?: any;
  /**
   * User friendly status message.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * The time when the quota request was submitted using format: yyyy-MM-ddTHH:mm:ssZ as specified
   * by the ISO 8601 standard.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly requestSubmitTime?: Date;
  /**
   * The quotaRequests.
   */
  value?: SubRequest[];
}

/**
 * Response for the quota submission request.
 */
export interface QuotaRequestSubmitResponse extends BaseResource {
  /**
   * The quota request ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the quota request.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The quota request details.
   */
  properties?: QuotaRequestProperties;
  /**
   * Type of resource. "Microsoft.Capacity/serviceLimits"
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * Response with request ID that the quota request was accepted.
 */
export interface QuotaRequestSubmitResponse201 {
  /**
   * The quota request ID. Use the requestId parameter to check the request status.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Operation ID
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * The details of the quota request status.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: any;
  /**
   * A user friendly message.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
}

/**
 * Quota request details.
 */
export interface QuotaRequestDetails extends BaseResource {
  /**
   * Quota request ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Quota request name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The quota request status.
   */
  provisioningState?: any;
  /**
   * User friendly status message.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * The time when the quota request was submitted using format: yyyy-MM-ddTHH:mm:ssZ as specified
   * by the ISO 8601 standard.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly requestSubmitTime?: Date;
  /**
   * The quotaRequests.
   */
  value?: SubRequest[];
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * The error details.
 */
export interface ServiceErrorDetail {
  /**
   * The error code.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly code?: string;
  /**
   * The error message.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
}

/**
 * The API error details.
 */
export interface ServiceError {
  /**
   * The error code.
   */
  code?: string;
  /**
   * The error message text.
   */
  message?: string;
  /**
   * The list of error details.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly details?: ServiceErrorDetail[];
}

/**
 * The API error.
 */
export interface ExceptionResponse {
  /**
   * The API error details.
   */
  error?: ServiceError;
}

/**
 * Optional Parameters.
 */
export interface ReservationGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Supported value of this query is renewProperties
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface AzureReservationAPIGetCatalogOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Filters the skus based on the location specified in this parameter. This can be an azure
   * region or global
   */
  location?: string;
}

/**
 * Optional Parameters.
 */
export interface ReservationOrderGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * May be used to expand the planInformation.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface QuotaRequestStatusListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * | Field                    | Supported operators
   * |---------------------|------------------------
   *
   * |requestSubmitTime | ge, le, eq, gt, lt
   */
  filter?: string;
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Skiptoken is only used if a previous operation returned a partial result. If a previous
   * response contains a nextLink element, the value of the nextLink element includes a skiptoken
   * parameter that specifies a starting point to use for subsequent calls.
   */
  skiptoken?: string;
}

/**
 * Optional Parameters.
 */
export interface QuotaRequestStatusListNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * | Field                    | Supported operators
   * |---------------------|------------------------
   *
   * |requestSubmitTime | ge, le, eq, gt, lt
   */
  filter?: string;
  /**
   * Number of records to return.
   */
  top?: number;
  /**
   * Skiptoken is only used if a previous operation returned a partial result. If a previous
   * response contains a nextLink element, the value of the nextLink element includes a skiptoken
   * parameter that specifies a starting point to use for subsequent calls.
   */
  skiptoken?: string;
}

/**
 * An interface representing AzureReservationAPIOptions.
 */
export interface AzureReservationAPIOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * Defines headers for Post operation.
 */
export interface CalculateExchangePostHeaders {
  /**
   * URL for checking the ongoing status of the operation.
   */
  azureAsyncOperation: string;
  /**
   * URL for determining when an operation has completed. Only use this value only when
   * Azure-AsyncOperation isn't returned.
   */
  location: string;
  /**
   * Clients should wait for the Retry-After interval before polling again
   */
  retryAfter: number;
}

/**
 * Defines headers for Post operation.
 */
export interface ExchangePostHeaders {
  /**
   * URL for checking the ongoing status of the operation.
   */
  azureAsyncOperation: string;
  /**
   * URL for determining when an operation has completed. Only use this value only when
   * Azure-AsyncOperation isn't returned.
   */
  location: string;
  /**
   * Clients should wait for the Retry-After interval before polling again
   */
  retryAfter: number;
}

/**
 * Defines headers for Get operation.
 */
export interface QuotaGetHeaders {
  /**
   * Current entity state version. It should be treated as opaque and used to make conditional HTTP
   * requests.
   */
  eTag: string;
}

/**
 * Defines headers for List operation.
 */
export interface QuotaListHeaders {
  /**
   * Current entity state version. Should be treated as opaque and used to make conditional HTTP
   * requests.
   */
  eTag: string;
}

/**
 * @interface
 * An interface representing the ReservationList.
 * @extends Array<ReservationResponse>
 */
export interface ReservationList extends Array<ReservationResponse> {
  /**
   * Url to get the next page of reservations.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ReservationOrderList.
 * @extends Array<ReservationOrderResponse>
 */
export interface ReservationOrderList extends Array<ReservationOrderResponse> {
  /**
   * Url to get the next page of reservationOrders.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the OperationList.
 * @extends Array<OperationResponse>
 */
export interface OperationList extends Array<OperationResponse> {
  /**
   * Url to get the next page of items.
   */
  nextLink?: string;
}

/**
 * @interface
 * Quota limits.
 * @extends Array<CurrentQuotaLimitBase>
 */
export interface QuotaLimits extends Array<CurrentQuotaLimitBase> {
  /**
   * The URI for fetching the next page of quotas (service limits). When no more pages exist, the
   * value is null.
   */
  nextLink?: string;
}

/**
 * @interface
 * Quota request details.
 * @extends Array<QuotaRequestDetails>
 */
export interface QuotaRequestDetailsList extends Array<QuotaRequestDetails> {
  /**
   * The URI to fetch the next page of quota limits. When there are no more pages, this is null.
   */
  nextLink?: string;
}

/**
 * Defines values for ReservedResourceType.
 * Possible values include: 'VirtualMachines', 'SqlDatabases', 'SuseLinux', 'CosmosDb', 'RedHat',
 * 'SqlDataWarehouse', 'VMwareCloudSimple', 'RedHatOsa', 'Databricks', 'AppService', 'ManagedDisk',
 * 'BlockBlob', 'RedisCache', 'AzureDataExplorer', 'MySql', 'MariaDb', 'PostgreSql',
 * 'DedicatedHost', 'SapHana', 'SqlAzureHybridBenefit'
 * @readonly
 * @enum {string}
 */
export type ReservedResourceType = 'VirtualMachines' | 'SqlDatabases' | 'SuseLinux' | 'CosmosDb' | 'RedHat' | 'SqlDataWarehouse' | 'VMwareCloudSimple' | 'RedHatOsa' | 'Databricks' | 'AppService' | 'ManagedDisk' | 'BlockBlob' | 'RedisCache' | 'AzureDataExplorer' | 'MySql' | 'MariaDb' | 'PostgreSql' | 'DedicatedHost' | 'SapHana' | 'SqlAzureHybridBenefit';

/**
 * Defines values for ReservationTerm.
 * Possible values include: 'P1Y', 'P3Y'
 * @readonly
 * @enum {string}
 */
export type ReservationTerm = 'P1Y' | 'P3Y';

/**
 * Defines values for ReservationBillingPlan.
 * Possible values include: 'Upfront', 'Monthly'
 * @readonly
 * @enum {string}
 */
export type ReservationBillingPlan = 'Upfront' | 'Monthly';

/**
 * Defines values for AppliedScopeType.
 * Possible values include: 'Single', 'Shared'
 * @readonly
 * @enum {string}
 */
export type AppliedScopeType = 'Single' | 'Shared';

/**
 * Defines values for InstanceFlexibility.
 * Possible values include: 'On', 'Off'
 * @readonly
 * @enum {string}
 */
export type InstanceFlexibility = 'On' | 'Off';

/**
 * Defines values for ReservationStatusCode.
 * Possible values include: 'None', 'Pending', 'Active', 'PurchaseError', 'PaymentInstrumentError',
 * 'Split', 'Merged', 'Expired', 'Succeeded'
 * @readonly
 * @enum {string}
 */
export type ReservationStatusCode = 'None' | 'Pending' | 'Active' | 'PurchaseError' | 'PaymentInstrumentError' | 'Split' | 'Merged' | 'Expired' | 'Succeeded';

/**
 * Defines values for ErrorResponseCode.
 * Possible values include: 'NotSpecified', 'InternalServerError', 'ServerTimeout',
 * 'AuthorizationFailed', 'BadRequest', 'ClientCertificateThumbprintNotSet',
 * 'InvalidRequestContent', 'OperationFailed', 'HttpMethodNotSupported', 'InvalidRequestUri',
 * 'MissingTenantId', 'InvalidTenantId', 'InvalidReservationOrderId', 'InvalidReservationId',
 * 'ReservationIdNotInReservationOrder', 'ReservationOrderNotFound', 'InvalidSubscriptionId',
 * 'InvalidAccessToken', 'InvalidLocationId', 'UnauthenticatedRequestsThrottled',
 * 'InvalidHealthCheckType', 'Forbidden', 'BillingScopeIdCannotBeChanged',
 * 'AppliedScopesNotAssociatedWithCommerceAccount', 'PatchValuesSameAsExisting',
 * 'RoleAssignmentCreationFailed', 'ReservationOrderCreationFailed', 'ReservationOrderNotEnabled',
 * 'CapacityUpdateScopesFailed', 'UnsupportedReservationTerm', 'ReservationOrderIdAlreadyExists',
 * 'RiskCheckFailed', 'CreateQuoteFailed', 'ActivateQuoteFailed', 'NonsupportedAccountId',
 * 'PaymentInstrumentNotFound', 'MissingAppliedScopesForSingle', 'NoValidReservationsToReRate',
 * 'ReRateOnlyAllowedForEA', 'OperationCannotBePerformedInCurrentState',
 * 'InvalidSingleAppliedScopesCount', 'InvalidFulfillmentRequestParameters', 'NotSupportedCountry',
 * 'InvalidRefundQuantity', 'PurchaseError', 'BillingCustomerInputError',
 * 'BillingPaymentInstrumentSoftError', 'BillingPaymentInstrumentHardError',
 * 'BillingTransientError', 'BillingError', 'FulfillmentConfigurationError',
 * 'FulfillmentOutOfStockError', 'FulfillmentTransientError', 'FulfillmentError',
 * 'CalculatePriceFailed'
 * @readonly
 * @enum {string}
 */
export type ErrorResponseCode = 'NotSpecified' | 'InternalServerError' | 'ServerTimeout' | 'AuthorizationFailed' | 'BadRequest' | 'ClientCertificateThumbprintNotSet' | 'InvalidRequestContent' | 'OperationFailed' | 'HttpMethodNotSupported' | 'InvalidRequestUri' | 'MissingTenantId' | 'InvalidTenantId' | 'InvalidReservationOrderId' | 'InvalidReservationId' | 'ReservationIdNotInReservationOrder' | 'ReservationOrderNotFound' | 'InvalidSubscriptionId' | 'InvalidAccessToken' | 'InvalidLocationId' | 'UnauthenticatedRequestsThrottled' | 'InvalidHealthCheckType' | 'Forbidden' | 'BillingScopeIdCannotBeChanged' | 'AppliedScopesNotAssociatedWithCommerceAccount' | 'PatchValuesSameAsExisting' | 'RoleAssignmentCreationFailed' | 'ReservationOrderCreationFailed' | 'ReservationOrderNotEnabled' | 'CapacityUpdateScopesFailed' | 'UnsupportedReservationTerm' | 'ReservationOrderIdAlreadyExists' | 'RiskCheckFailed' | 'CreateQuoteFailed' | 'ActivateQuoteFailed' | 'NonsupportedAccountId' | 'PaymentInstrumentNotFound' | 'MissingAppliedScopesForSingle' | 'NoValidReservationsToReRate' | 'ReRateOnlyAllowedForEA' | 'OperationCannotBePerformedInCurrentState' | 'InvalidSingleAppliedScopesCount' | 'InvalidFulfillmentRequestParameters' | 'NotSupportedCountry' | 'InvalidRefundQuantity' | 'PurchaseError' | 'BillingCustomerInputError' | 'BillingPaymentInstrumentSoftError' | 'BillingPaymentInstrumentHardError' | 'BillingTransientError' | 'BillingError' | 'FulfillmentConfigurationError' | 'FulfillmentOutOfStockError' | 'FulfillmentTransientError' | 'FulfillmentError' | 'CalculatePriceFailed';

/**
 * Defines values for CalculateExchangeOperationResultStatus.
 * Possible values include: 'Succeeded', 'Failed', 'Cancelled', 'Pending'
 * @readonly
 * @enum {string}
 */
export type CalculateExchangeOperationResultStatus = 'Succeeded' | 'Failed' | 'Cancelled' | 'Pending';

/**
 * Defines values for ExchangeOperationResultStatus.
 * Possible values include: 'Succeeded', 'Failed', 'Cancelled', 'PendingRefunds',
 * 'PendingPurchases'
 * @readonly
 * @enum {string}
 */
export type ExchangeOperationResultStatus = 'Succeeded' | 'Failed' | 'Cancelled' | 'PendingRefunds' | 'PendingPurchases';

/**
 * Defines values for OperationStatus.
 * Possible values include: 'Succeeded', 'Failed', 'Cancelled', 'Pending'
 * @readonly
 * @enum {string}
 */
export type OperationStatus = 'Succeeded' | 'Failed' | 'Cancelled' | 'Pending';

/**
 * Defines values for PaymentStatus.
 * Possible values include: 'Succeeded', 'Failed', 'Scheduled', 'Cancelled'
 * @readonly
 * @enum {string}
 */
export type PaymentStatus = 'Succeeded' | 'Failed' | 'Scheduled' | 'Cancelled';

/**
 * Contains response data for the availableScopes operation.
 */
export type ReservationAvailableScopesResponse = AvailableScopeProperties & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AvailableScopeProperties;
  };
};

/**
 * Contains response data for the split operation.
 */
export type ReservationSplitResponse = Array<ReservationResponse> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationResponse[];
  };
};

/**
 * Contains response data for the merge operation.
 */
export type ReservationMergeResponse = Array<ReservationResponse> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationResponse[];
  };
};

/**
 * Contains response data for the list operation.
 */
export type ReservationListResponse = ReservationList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ReservationGetResponse = ReservationResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationResponse;
  };
};

/**
 * Contains response data for the update operation.
 */
export type ReservationUpdateResponse = ReservationResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationResponse;
  };
};

/**
 * Contains response data for the listRevisions operation.
 */
export type ReservationListRevisionsResponse = ReservationList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationList;
  };
};

/**
 * Contains response data for the beginAvailableScopes operation.
 */
export type ReservationBeginAvailableScopesResponse = AvailableScopeProperties & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AvailableScopeProperties;
  };
};

/**
 * Contains response data for the beginSplit operation.
 */
export type ReservationBeginSplitResponse = Array<ReservationResponse> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationResponse[];
  };
};

/**
 * Contains response data for the beginMerge operation.
 */
export type ReservationBeginMergeResponse = Array<ReservationResponse> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationResponse[];
  };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type ReservationBeginUpdateResponse = ReservationResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationResponse;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ReservationListNextResponse = ReservationList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationList;
  };
};

/**
 * Contains response data for the listRevisionsNext operation.
 */
export type ReservationListRevisionsNextResponse = ReservationList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationList;
  };
};

/**
 * Contains response data for the getCatalog operation.
 */
export type GetCatalogResponse = Array<Catalog> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Catalog[];
  };
};

/**
 * Contains response data for the getAppliedReservationList operation.
 */
export type GetAppliedReservationListResponse = AppliedReservations & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: AppliedReservations;
  };
};

/**
 * Contains response data for the calculate operation.
 */
export type ReservationOrderCalculateResponse = CalculatePriceResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CalculatePriceResponse;
  };
};

/**
 * Contains response data for the list operation.
 */
export type ReservationOrderListResponse = ReservationOrderList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationOrderList;
  };
};

/**
 * Contains response data for the purchase operation.
 */
export type ReservationOrderPurchaseResponse = ReservationOrderResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationOrderResponse;
  };
};

/**
 * Contains response data for the get operation.
 */
export type ReservationOrderGetResponse = ReservationOrderResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationOrderResponse;
  };
};

/**
 * Contains response data for the beginPurchase operation.
 */
export type ReservationOrderBeginPurchaseResponse = ReservationOrderResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationOrderResponse;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type ReservationOrderListNextResponse = ReservationOrderList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReservationOrderList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type OperationListResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationListNextResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Contains response data for the post operation.
 */
export type CalculateExchangePostResponse = CalculateExchangeOperationResultResponse & CalculateExchangePostHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: CalculateExchangePostHeaders;

    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CalculateExchangeOperationResultResponse;
  };
};

/**
 * Contains response data for the post operation.
 */
export type ExchangePostResponse = ExchangeOperationResultResponse & ExchangePostHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: ExchangePostHeaders;

    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ExchangeOperationResultResponse;
  };
};

/**
 * Contains response data for the get operation.
 */
export type QuotaGetResponse = CurrentQuotaLimitBase & QuotaGetHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: QuotaGetHeaders;

    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CurrentQuotaLimitBase;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type QuotaCreateOrUpdateResponse = {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: any;
  };
};

/**
 * Contains response data for the update operation.
 */
export type QuotaUpdateResponse = {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: any;
  };
};

/**
 * Contains response data for the list operation.
 */
export type QuotaListResponse = QuotaLimits & QuotaListHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: QuotaListHeaders;

    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: QuotaLimits;
  };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type QuotaBeginCreateOrUpdateResponse = {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: any;
  };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type QuotaBeginUpdateResponse = {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: any;
  };
};

/**
 * Contains response data for the get operation.
 */
export type QuotaRequestStatusGetResponse = QuotaRequestDetails & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: QuotaRequestDetails;
  };
};

/**
 * Contains response data for the list operation.
 */
export type QuotaRequestStatusListResponse = QuotaRequestDetailsList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: QuotaRequestDetailsList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type QuotaRequestStatusListNextResponse = QuotaRequestDetailsList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: QuotaRequestDetailsList;
  };
};
