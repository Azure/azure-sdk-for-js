/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Available scope */
export interface AvailableScopeRequest {
  /** Available scope request properties */
  properties?: AvailableScopeRequestProperties;
}

/** Available scope request properties */
export interface AvailableScopeRequestProperties {
  scopes?: string[];
}

/** The response of available scope api containing scopes and their eligibilities. */
export interface AvailableScopeProperties {
  /** The scopes checked by the available scope api. */
  properties?: SubscriptionScopeProperties;
}

/** The scopes checked by the available scope api. */
export interface SubscriptionScopeProperties {
  scopes?: ScopeProperties[];
}

/** The scope and whether it is valid. */
export interface ScopeProperties {
  scope?: string;
  valid?: boolean;
}

/** Error information */
export interface ErrorModel {
  /** Extended error information including error code and error message */
  error?: ExtendedErrorInfo;
}

/** Extended error information including error code and error message */
export interface ExtendedErrorInfo {
  /** Error code describing the reason that service is not able to process the incoming request */
  code?: ErrorResponseCode;
  message?: string;
}

/** The list of catalogs and pagination information. */
export interface CatalogsResult {
  /**
   * The list of catalogs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Catalog[];
  /**
   * The link (url) to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
  /** The total amount of catalog items. */
  totalItems?: number;
}

/** Product details of a type of resource. */
export interface Catalog {
  /**
   * The type of resource the sku applies to.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceType?: string;
  /**
   * The name of sku
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /** The billing plan options available for this sku. */
  billingPlans?: { [propertyName: string]: ReservationBillingPlan[] };
  /**
   * Available reservation terms for this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly terms?: ReservationTerm[];
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly locations?: string[];
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly skuProperties?: SkuProperty[];
  /**
   * Pricing information about the sku
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly msrp?: CatalogMsrp;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly restrictions?: SkuRestriction[];
  /**
   * The tier of this sku
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tier?: string;
  /**
   * The size of this sku
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly size?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly capabilities?: SkuCapability[];
}

/** Property of a sku. */
export interface SkuProperty {
  /** An invariant to describe the feature. */
  name?: string;
  /** An invariant if the feature is measured by quantity. */
  value?: string;
}

/** Pricing information about the sku */
export interface CatalogMsrp {
  /** Amount in pricing currency. Tax not included. */
  p1Y?: Price;
}

/** Pricing information containing the amount and the currency code */
export interface Price {
  /** The ISO 4217 3-letter currency code for the currency used by this purchase record. */
  currencyCode?: string;
  amount?: number;
}

/** Restriction of a sku. */
export interface SkuRestriction {
  /** The type of restrictions. */
  type?: string;
  /** The value of restrictions. If the restriction type is set to location. This would be different locations where the sku is restricted. */
  values?: string[];
  /** The reason for restriction. */
  reasonCode?: string;
}

/** Capability of a sku. */
export interface SkuCapability {
  /** An invariant to describe the feature. */
  name?: string;
  /** An invariant if the feature is measured by quantity. */
  value?: string;
}

/** The response for applied reservations api */
export interface AppliedReservations {
  /**
   * Identifier of the applied reservations
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Name of resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Type of resource. "Microsoft.Capacity/AppliedReservations"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Paginated list of applied reservations */
  reservationOrderIds?: AppliedReservationList;
}

/** Paginated list of applied reservations */
export interface AppliedReservationList {
  value?: string[];
  /** Url to get the next page of reservations */
  nextLink?: string;
}

/** The request for reservation purchase */
export interface PurchaseRequest {
  /** The name of sku */
  sku?: SkuName;
  /** The Azure region where the reserved resource lives. */
  location?: string;
  /** The type of the resource that is being reserved. */
  reservedResourceType?: ReservedResourceType;
  /** Subscription that will be charged for purchasing reservation or savings plan */
  billingScopeId?: string;
  /** Represent the term of reservation. */
  term?: ReservationTerm;
  /** Represent the billing plans. */
  billingPlan?: ReservationBillingPlan;
  /** Quantity of the skus that are part of the reservation. */
  quantity?: number;
  /** Friendly name of the reservation */
  displayName?: string;
  /** Type of the Applied Scope. */
  appliedScopeType?: AppliedScopeType;
  /** List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared. */
  appliedScopes?: string[];
  /** Properties specific to applied scope type. Not required if not applicable. Required and need to provide tenantId and managementGroupId if AppliedScopeType is ManagementGroup */
  appliedScopeProperties?: AppliedScopeProperties;
  /** Setting this to true will automatically purchase a new reservation on the expiration date time. */
  renew?: boolean;
  /** Properties specific to each reserved resource type. Not required if not applicable. */
  reservedResourceProperties?: PurchaseRequestPropertiesReservedResourceProperties;
  /** This is the date-time when the Azure hybrid benefit needs to be reviewed. */
  reviewDateTime?: Date;
}

/** The name of sku */
export interface SkuName {
  name?: string;
}

/** Properties specific to applied scope type. Not required if not applicable. Required and need to provide tenantId and managementGroupId if AppliedScopeType is ManagementGroup */
export interface AppliedScopeProperties {
  /** Tenant ID where the savings plan should apply benefit. */
  tenantId?: string;
  /** Fully-qualified identifier of the management group where the benefit must be applied. */
  managementGroupId?: string;
  /** Fully-qualified identifier of the subscription. */
  subscriptionId?: string;
  /** Fully-qualified identifier of the resource group. */
  resourceGroupId?: string;
  /** Display name */
  displayName?: string;
}

/** Properties specific to each reserved resource type. Not required if not applicable. */
export interface PurchaseRequestPropertiesReservedResourceProperties {
  /** Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type. */
  instanceFlexibility?: InstanceFlexibility;
}

/** The response of calculate price for reservation. */
export interface CalculatePriceResponse {
  /** Properties for calculate price response */
  properties?: CalculatePriceResponseProperties;
}

/** Properties for calculate price response */
export interface CalculatePriceResponseProperties {
  /** Currency and amount that customer will be charged in customer's local currency. Tax is not included. */
  billingCurrencyTotal?: CalculatePriceResponsePropertiesBillingCurrencyTotal;
  /** Net total amount in pricing currency. */
  netTotal?: number;
  /** Tax amount in pricing currency. */
  taxTotal?: number;
  /** Total amount in pricing currency. */
  grandTotal?: number;
  /** Whether or not tax is included in grand total */
  isTaxIncluded?: boolean;
  /** True if billing is managed by Microsoft Partner. Used only for CSP accounts. */
  isBillingPartnerManaged?: boolean;
  /** GUID that represents reservation order that can be placed after calculating price. */
  reservationOrderId?: string;
  /** Title of sku that is being purchased. */
  skuTitle?: string;
  /** Description of sku that is being purchased. */
  skuDescription?: string;
  /** Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is not included. */
  pricingCurrencyTotal?: CalculatePriceResponsePropertiesPricingCurrencyTotal;
  paymentSchedule?: PaymentDetail[];
}

/** Currency and amount that customer will be charged in customer's local currency. Tax is not included. */
export interface CalculatePriceResponsePropertiesBillingCurrencyTotal {
  /** The ISO 4217 3-letter currency code for the currency used by this purchase record. */
  currencyCode?: string;
  /** Amount in pricing currency. Tax is not included. */
  amount?: number;
}

/** Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is not included. */
export interface CalculatePriceResponsePropertiesPricingCurrencyTotal {
  /** The ISO 4217 3-letter currency code for the currency used by this purchase record. */
  currencyCode?: string;
  amount?: number;
}

/** Information about payment related to a reservation order. */
export interface PaymentDetail {
  /** Date when the payment needs to be done. */
  dueDate?: Date;
  /** Date when the transaction is completed. Is null when it is scheduled. */
  paymentDate?: Date;
  /** Amount in pricing currency. Tax not included. */
  pricingCurrencyTotal?: Price;
  /** Amount charged in Billing currency. Tax not included. Is null for future payments */
  billingCurrencyTotal?: Price;
  /** Shows the Account that is charged for this payment. */
  billingAccount?: string;
  /** Describes whether the payment is completed, failed, cancelled or scheduled in the future. */
  status?: PaymentStatus;
  extendedStatusInfo?: ExtendedStatusInfo;
}

export interface ExtendedStatusInfo {
  statusCode?: ReservationStatusCode;
  /** The message giving detailed information about the status code. */
  message?: string;
}

/** List of `ReservationOrder`s */
export interface ReservationOrderList {
  value?: ReservationOrderResponse[];
  /** Url to get the next page of reservationOrders. */
  nextLink?: string;
}

/** Details of a reservation order being returned. */
export interface ReservationOrderResponse {
  etag?: number;
  /**
   * Identifier of the reservation
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Name of the reservation
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Type of resource. "Microsoft.Capacity/reservations"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Friendly name for user to easily identified the reservation. */
  displayName?: string;
  /** This is the DateTime when the reservation was initially requested for purchase. */
  requestDateTime?: Date;
  /** This is the DateTime when the reservation was created. */
  createdDateTime?: Date;
  /** This is the date when the reservation will expire. */
  expiryDate?: Date;
  /** This is the date-time when the reservation will expire. */
  expiryDateTime?: Date;
  /** This is the DateTime when the reservation benefit started. */
  benefitStartTime?: Date;
  /** Total Quantity of the skus purchased in the reservation. */
  originalQuantity?: number;
  /** Represent the term of reservation. */
  term?: ReservationTerm;
  /** Current state of the reservation. */
  provisioningState?: ProvisioningState;
  /** Represent the billing plans. */
  billingPlan?: ReservationBillingPlan;
  /** Information describing the type of billing plan for this reservation. */
  planInformation?: ReservationOrderBillingPlanInformation;
  reservations?: ReservationResponse[];
  /** This is the date-time when the Azure Hybrid Benefit needs to be reviewed. */
  reviewDateTime?: Date;
}

/** Information describing the type of billing plan for this reservation. */
export interface ReservationOrderBillingPlanInformation {
  /** Amount of money to be paid for the Order. Tax is not included. */
  pricingCurrencyTotal?: Price;
  /** Date when the billing plan has started. */
  startDate?: Date;
  /** For recurring billing plans, indicates the date when next payment will be processed. Null when total is paid off. */
  nextPaymentDueDate?: Date;
  transactions?: PaymentDetail[];
}

/** The properties of the reservations */
export interface ReservationsProperties {
  /** The type of the resource that is being reserved. */
  reservedResourceType?: ReservedResourceType;
  /** Allows reservation discount to be applied across skus within the same auto fit group. Not all skus support instance size flexibility. */
  instanceFlexibility?: InstanceFlexibility;
  /** Friendly name for user to easily identify the reservation */
  displayName?: string;
  /** The list of applied scopes */
  appliedScopes?: string[];
  /** The applied scope type */
  appliedScopeType?: AppliedScopeType;
  /** Indicates if the reservation is archived */
  archived?: boolean;
  /** Capabilities of the reservation */
  capabilities?: string;
  /** Quantity of the skus that are part of the reservation. */
  quantity?: number;
  /** Current state of the reservation. */
  provisioningState?: ProvisioningState;
  /** DateTime of the reservation starting when this version is effective from. */
  effectiveDateTime?: Date;
  /** This is the DateTime when the reservation benefit started. */
  benefitStartTime?: Date;
  /**
   * DateTime of the last time the reservation was updated.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastUpdatedDateTime?: Date;
  /** This is the date when the reservation will expire. */
  expiryDate?: Date;
  /** This is the date-time when the reservation will expire. */
  expiryDateTime?: Date;
  /** This is the date-time when the Azure Hybrid Benefit needs to be reviewed. */
  reviewDateTime?: Date;
  /** Description of the sku in english. */
  skuDescription?: string;
  /** The message giving detailed information about the status code. */
  extendedStatusInfo?: ExtendedStatusInfo;
  /** The billing plan options available for this sku. */
  billingPlan?: ReservationBillingPlan;
  /**
   * The provisioning state of the reservation for display, e.g. Succeeded
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly displayProvisioningState?: string;
  /**
   * The provisioning sub-state of the reservation, e.g. Succeeded
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningSubState?: string;
  /** This is the date when the reservation was purchased. */
  purchaseDate?: Date;
  /** This is the date-time when the reservation was purchased. */
  purchaseDateTime?: Date;
  /** Properties of reservation split */
  splitProperties?: ReservationSplitProperties;
  /** Properties of reservation merge */
  mergeProperties?: ReservationMergeProperties;
  /** Properties of reservation swap */
  swapProperties?: ReservationSwapProperties;
  /** Properties specific to applied scope type. Not required if not applicable. Required and need to provide tenantId and managementGroupId if AppliedScopeType is ManagementGroup */
  appliedScopeProperties?: AppliedScopeProperties;
  /** Subscription that will be charged for purchasing reservation or savings plan */
  billingScopeId?: string;
  /** Setting this to true will automatically purchase a new reservation on the expiration date time. */
  renew?: boolean;
  /** Reservation Id of the reservation from which this reservation is renewed. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}. */
  renewSource?: string;
  /** Reservation Id of the reservation which is purchased because of renew. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}. */
  renewDestination?: string;
  /** The renew properties for a reservation. */
  renewProperties?: RenewPropertiesResponse;
  /** Represent the term of reservation. */
  term?: ReservationTerm;
  /**
   * The applied scope type of the reservation for display, e.g. Shared
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly userFriendlyAppliedScopeType?: string;
  /**
   * The renew state of the reservation for display, e.g. On
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly userFriendlyRenewState?: string;
  /**
   * Reservation utilization
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly utilization?: ReservationsPropertiesUtilization;
}

/** Properties of reservation split */
export interface ReservationSplitProperties {
  /** List of destination resource id that are created due to split. Format of the resource id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId} */
  splitDestinations?: string[];
  /** Resource id of the reservation from which this is split. Format of the resource id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId} */
  splitSource?: string;
}

/** Properties of reservation merge */
export interface ReservationMergeProperties {
  /** Reservation resource id Created due to the merge. Format of the resource id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId} */
  mergeDestination?: string;
  /** Resource ids of the source reservation's merged to form this reservation. Format of the resource id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId} */
  mergeSources?: string[];
}

/** Properties of reservation swap */
export interface ReservationSwapProperties {
  /** Resource id of the source reservation that gets swapped. Format of the resource id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId} */
  swapSource?: string;
  /** Reservation resource id that the original resource gets swapped to. Format of the resource id is /providers/microsoft.capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId} */
  swapDestination?: string;
}

/** The renew properties for a reservation. */
export interface RenewPropertiesResponse {
  /** The request for reservation purchase */
  purchaseProperties?: PurchaseRequest;
  /** Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is not included. This is locked price 30 days before expiry. */
  pricingCurrencyTotal?: RenewPropertiesResponsePricingCurrencyTotal;
  /** Currency and amount that customer will be charged in customer's local currency for renewal purchase. Tax is not included. */
  billingCurrencyTotal?: RenewPropertiesResponseBillingCurrencyTotal;
}

/** Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is not included. This is locked price 30 days before expiry. */
export interface RenewPropertiesResponsePricingCurrencyTotal {
  /** The ISO 4217 3-letter currency code for the currency used by this purchase record. */
  currencyCode?: string;
  amount?: number;
}

/** Currency and amount that customer will be charged in customer's local currency for renewal purchase. Tax is not included. */
export interface RenewPropertiesResponseBillingCurrencyTotal {
  /** The ISO 4217 3-letter currency code for the currency used by this purchase record. */
  currencyCode?: string;
  amount?: number;
}

/** Reservation utilization */
export interface ReservationsPropertiesUtilization {
  /**
   * last 7 day utilization trend for a reservation
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly trend?: string;
  /** The array of aggregates of a reservation's utilization */
  aggregates?: ReservationUtilizationAggregates[];
}

/** The aggregate values of reservation utilization */
export interface ReservationUtilizationAggregates {
  /**
   * The grain of the aggregate
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly grain?: number;
  /**
   * The grain unit of the aggregate
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly grainUnit?: string;
  /**
   * The aggregate value
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: number;
  /**
   * The aggregate value unit
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly valueUnit?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** The request for reservation split */
export interface SplitRequest {
  /** List of the quantities in the new reservations to create. */
  quantities?: number[];
  /** Resource id of the reservation to be split. Format of the resource id should be /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId} */
  reservationId?: string;
}

/** The request for reservation merge */
export interface MergeRequest {
  /** Format of the resource id should be /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId} */
  sources?: string[];
}

/** List of `Reservation`s */
export interface ReservationList {
  value?: ReservationResponse[];
  /** Url to get the next page of reservations. */
  nextLink?: string;
}

/** The request for reservation patch */
export interface Patch {
  /** Type of the Applied Scope. */
  appliedScopeType?: AppliedScopeType;
  /** List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared. */
  appliedScopes?: string[];
  /** Properties specific to applied scope type. Not required if not applicable. Required and need to provide tenantId and managementGroupId if AppliedScopeType is ManagementGroup */
  appliedScopeProperties?: AppliedScopeProperties;
  /** Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type. */
  instanceFlexibility?: InstanceFlexibility;
  /** Display name of the reservation */
  name?: string;
  /** Setting this to true will automatically purchase a new reservation on the expiration date time. */
  renew?: boolean;
  renewProperties?: PatchPropertiesRenewProperties;
  /** This is the date-time when the Azure hybrid benefit needs to be reviewed. */
  reviewDateTime?: Date;
}

export interface PatchPropertiesRenewProperties {
  /** The request for reservation purchase */
  purchaseProperties?: PurchaseRequest;
}

/** Paginated list of operations */
export interface OperationList {
  value?: OperationResponse[];
  /** Url to get the next page of items. */
  nextLink?: string;
}

/** The response containing operation information */
export interface OperationResponse {
  /** Name of the operation */
  name?: string;
  /** Indicates whether the operation is a data action */
  isDataAction?: boolean;
  /** Display of the operation */
  display?: OperationDisplay;
  /** Origin of the operation */
  origin?: string;
  /** Properties of the operation */
  properties?: Record<string, unknown>;
}

/** Information about an operation */
export interface OperationDisplay {
  provider?: string;
  resource?: string;
  operation?: string;
  description?: string;
}

/** Request containing information needed for calculating refund. */
export interface CalculateRefundRequest {
  /** Fully qualified identifier of the reservation order being returned */
  id?: string;
  /** Properties needed for calculate refund including the scope and the reservation to be returned. */
  properties?: CalculateRefundRequestProperties;
}

/** Properties needed for calculate refund including the scope and the reservation to be returned. */
export interface CalculateRefundRequestProperties {
  /** The scope of the refund, e.g. Reservation */
  scope?: string;
  /** Reservation to return */
  reservationToReturn?: ReservationToReturn;
}

/** Reservation to return */
export interface ReservationToReturn {
  /** Fully qualified identifier of the reservation being returned */
  reservationId?: string;
  /** Quantity to be returned. Must be greater than zero. */
  quantity?: number;
}

/** The response of calculate refund containing refund information of reservation */
export interface CalculateRefundResponse {
  /** Fully qualified identifier of the reservation being returned */
  id?: string;
  /** The refund properties of reservation */
  properties?: RefundResponseProperties;
}

/** The refund properties of reservation */
export interface RefundResponseProperties {
  /** Refund session identifier */
  sessionId?: string;
  /** Quantity to be returned */
  quantity?: number;
  /** Pricing information containing the amount and the currency code */
  billingRefundAmount?: Price;
  /** Pricing information containing the amount and the currency code */
  pricingRefundAmount?: Price;
  /** Refund policy result */
  policyResult?: RefundPolicyResult;
  /** billing information */
  billingInformation?: RefundBillingInformation;
}

/** Refund policy result */
export interface RefundPolicyResult {
  /** Refund policy result property */
  properties?: RefundPolicyResultProperty;
}

/** Refund policy result property */
export interface RefundPolicyResultProperty {
  /** Pricing information containing the amount and the currency code */
  consumedRefundsTotal?: Price;
  /** Pricing information containing the amount and the currency code */
  maxRefundLimit?: Price;
  /** Refund Policy errors */
  policyErrors?: RefundPolicyError[];
}

/** error details */
export interface RefundPolicyError {
  /** Error code describing the reason that service is not able to process the incoming request */
  code?: ErrorResponseCode;
  message?: string;
}

/** billing information */
export interface RefundBillingInformation {
  /** Represent the billing plans. */
  billingPlan?: ReservationBillingPlan;
  /** The number of completed transactions in this reservation's payment */
  completedTransactions?: number;
  /** The number of total transactions in this reservation's payment */
  totalTransactions?: number;
  /** Pricing information containing the amount and the currency code */
  billingCurrencyTotalPaidAmount?: Price;
  /** Pricing information containing the amount and the currency code */
  billingCurrencyProratedAmount?: Price;
  /** Pricing information containing the amount and the currency code */
  billingCurrencyRemainingCommitmentAmount?: Price;
}

/** Request containing information needed for returning reservation. */
export interface RefundRequest {
  /** Properties needed for refund request including the session id from calculate refund, the scope, the reservation to be returned and the return reason. */
  properties?: RefundRequestProperties;
}

/** Properties needed for refund request including the session id from calculate refund, the scope, the reservation to be returned and the return reason. */
export interface RefundRequestProperties {
  /** SessionId that was returned by CalculateRefund API. */
  sessionId?: string;
  /** The scope of the refund, e.g. Reservation */
  scope?: string;
  /** Reservation to return */
  reservationToReturn?: ReservationToReturn;
  /** The reason of returning the reservation */
  returnReason?: string;
}

/** The response of refund request containing refund information of reservation */
export interface RefundResponse {
  /** Fully qualified identifier of the reservation being returned */
  id?: string;
  /** The refund properties of reservation */
  properties?: RefundResponseProperties;
}

/** Calculate exchange request */
export interface CalculateExchangeRequest {
  /** Calculate exchange request properties */
  properties?: CalculateExchangeRequestProperties;
}

/** Calculate exchange request properties */
export interface CalculateExchangeRequestProperties {
  /** List of reservations that are being purchased in this exchange. */
  reservationsToPurchase?: PurchaseRequest[];
  /** List of savings plans that are being purchased in this exchange. */
  savingsPlansToPurchase?: SavingsPlanPurchaseRequest[];
  /** List of reservations that are being returned in this exchange. */
  reservationsToExchange?: ReservationToReturn[];
}

/** Request body for savings plan purchase */
export interface SavingsPlanPurchaseRequest {
  /** The name of sku */
  sku?: SkuName;
  /** Friendly name of the savings plan */
  displayName?: string;
  /** Subscription that will be charged for purchasing reservation or savings plan */
  billingScopeId?: string;
  /** Represent savings plan term in ISO 8601 format. */
  term?: SavingsPlanTerm;
  /** Represents the billing plan in ISO 8601 format. Required only for monthly billing plans. */
  billingPlan?: BillingPlan;
  /** Type of the Applied Scope. */
  appliedScopeType?: AppliedScopeType;
  /** Properties specific to applied scope type. Not required if not applicable. Required and need to provide tenantId and managementGroupId if AppliedScopeType is ManagementGroup */
  appliedScopeProperties?: AppliedScopeProperties;
  /** Commitment towards the benefit. */
  commitment?: Commitment;
}

/** CalculateExchange operation result */
export interface CalculateExchangeOperationResultResponse {
  /** It should match what is used to GET the operation result. */
  id?: string;
  /** It must match the last segment of the id field, and will typically be a GUID / system generated value. */
  name?: string;
  /** Status of the operation. */
  status?: CalculateExchangeOperationResultStatus;
  /** CalculateExchange response properties */
  properties?: CalculateExchangeResponseProperties;
  /** Required if status == failed or status == canceled. */
  error?: OperationResultError;
}

/** CalculateExchange response properties */
export interface CalculateExchangeResponseProperties {
  /** Exchange session identifier */
  sessionId?: string;
  /** Pricing information containing the amount and the currency code */
  netPayable?: Price;
  /** Pricing information containing the amount and the currency code */
  refundsTotal?: Price;
  /** Pricing information containing the amount and the currency code */
  purchasesTotal?: Price;
  /** Details of the reservations being purchased */
  reservationsToPurchase?: ReservationToPurchaseCalculateExchange[];
  /** Details of the savings plans being purchased */
  savingsPlansToPurchase?: SavingsPlanToPurchaseCalculateExchange[];
  /** Details of the reservations being returned */
  reservationsToExchange?: ReservationToExchange[];
  /** Exchange policy errors */
  policyResult?: ExchangePolicyErrors;
}

/** Reservation purchase details */
export interface ReservationToPurchaseCalculateExchange {
  /** The request for reservation purchase */
  properties?: PurchaseRequest;
  /** Pricing information containing the amount and the currency code */
  billingCurrencyTotal?: Price;
}

/** Savings plan purchase details */
export interface SavingsPlanToPurchaseCalculateExchange {
  /** Request body for savings plan purchase */
  properties?: SavingsPlanPurchaseRequest;
  /** Pricing information containing the amount and the currency code */
  billingCurrencyTotal?: Price;
}

/** Reservation refund details */
export interface ReservationToExchange {
  /** Fully qualified id of the reservation being returned. */
  reservationId?: string;
  /** Quantity to be returned */
  quantity?: number;
  /** Pricing information containing the amount and the currency code */
  billingRefundAmount?: Price;
  /** billing information */
  billingInformation?: BillingInformation;
}

/** billing information */
export interface BillingInformation {
  /** Pricing information containing the amount and the currency code */
  billingCurrencyTotalPaidAmount?: Price;
  /** Pricing information containing the amount and the currency code */
  billingCurrencyProratedAmount?: Price;
  /** Pricing information containing the amount and the currency code */
  billingCurrencyRemainingCommitmentAmount?: Price;
}

/** Exchange policy errors */
export interface ExchangePolicyErrors {
  /** Exchange Policy errors */
  policyErrors?: ExchangePolicyError[];
}

/** error details */
export interface ExchangePolicyError {
  code?: string;
  message?: string;
}

/** Required if status == failed or status == canceled. */
export interface OperationResultError {
  /** Required if status == failed or status == cancelled. If status == failed, provide an invariant error code used for error troubleshooting, aggregation, and analysis. */
  code?: string;
  /** Required if status == failed. Localized. If status == failed, provide an actionable error message indicating what error occurred, and what the user can do to address the issue. */
  message?: string;
}

/** Exchange request */
export interface ExchangeRequest {
  /** Exchange request properties */
  properties?: ExchangeRequestProperties;
}

/** Exchange request properties */
export interface ExchangeRequestProperties {
  /** SessionId that was returned by CalculateExchange API. */
  sessionId?: string;
}

/** Exchange operation result */
export interface ExchangeOperationResultResponse {
  /** It should match what is used to GET the operation result. */
  id?: string;
  /** It must match the last segment of the id field, and will typically be a GUID / system generated value. */
  name?: string;
  /** Status of the operation. */
  status?: ExchangeOperationResultStatus;
  /** Exchange response properties */
  properties?: ExchangeResponseProperties;
  /** Required if status == failed or status == canceled. */
  error?: OperationResultError;
}

/** Exchange response properties */
export interface ExchangeResponseProperties {
  /** Exchange session identifier */
  sessionId?: string;
  /** Pricing information containing the amount and the currency code */
  netPayable?: Price;
  /** Pricing information containing the amount and the currency code */
  refundsTotal?: Price;
  /** Pricing information containing the amount and the currency code */
  purchasesTotal?: Price;
  /** Details of the reservations being purchased */
  reservationsToPurchase?: ReservationToPurchaseExchange[];
  /** Details of the savings plans being purchased */
  savingsPlansToPurchase?: SavingsPlanToPurchaseExchange[];
  /** Details of the reservations being returned */
  reservationsToExchange?: ReservationToReturnForExchange[];
  /** Exchange policy errors */
  policyResult?: ExchangePolicyErrors;
}

/** Reservation purchase details */
export interface ReservationToPurchaseExchange {
  /** Fully qualified id of the reservationOrder being purchased */
  reservationOrderId?: string;
  /** Fully qualified id of the reservation being purchased. This value is only guaranteed to be non-null if the purchase is successful. */
  reservationId?: string;
  /** The request for reservation purchase */
  properties?: PurchaseRequest;
  /** Pricing information containing the amount and the currency code */
  billingCurrencyTotal?: Price;
  /** Status of the individual operation. */
  status?: OperationStatus;
}

/** Savings plan purchase details */
export interface SavingsPlanToPurchaseExchange {
  /** Fully qualified id of the savings plan order being purchased */
  savingsPlanOrderId?: string;
  /** Fully qualified id of the savings plan being purchased. This value is only guaranteed to be non-null if the purchase is successful. */
  savingsPlanId?: string;
  /** Request body for savings plan purchase */
  properties?: SavingsPlanPurchaseRequest;
  /** Pricing information containing the amount and the currency code */
  billingCurrencyTotal?: Price;
  /** Status of the individual operation. */
  status?: OperationStatus;
}

/** Reservation refund details */
export interface ReservationToReturnForExchange {
  /** Fully qualified id of the reservation being returned. */
  reservationId?: string;
  /** Quantity to be returned */
  quantity?: number;
  /** Pricing information containing the amount and the currency code */
  billingRefundAmount?: Price;
  /** billing information */
  billingInformation?: BillingInformation;
  /** Status of the individual operation. */
  status?: OperationStatus;
}

/** The list of reservations and summary of roll out count of reservations in each state. */
export interface ReservationsListResult {
  /**
   * The list of reservations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: ReservationResponse[];
  /**
   * The link (url) to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
  /** The roll out count summary of the reservations */
  summary?: ReservationSummary;
}

/** The roll up count summary of reservations in each state */
export interface ReservationSummary {
  /**
   * The number of reservation in Succeeded state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly succeededCount?: number;
  /**
   * The number of reservation in Failed state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly failedCount?: number;
  /**
   * The number of reservation in Expiring state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly expiringCount?: number;
  /**
   * The number of reservation in Expired state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly expiredCount?: number;
  /**
   * The number of reservation in Pending state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly pendingCount?: number;
  /**
   * The number of reservation in Cancelled state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cancelledCount?: number;
  /**
   * The number of reservation in Processing state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly processingCount?: number;
  /**
   * The number of reservation in Warning state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly warningCount?: number;
  /**
   * The number of reservation in NoBenefit state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly noBenefitCount?: number;
}

/** Error response indicates that the service is not able to process the incoming request. The reason is provided in the error message. */
export interface ErrorResponse {
  /** The details of the error. */
  error?: ErrorDetails;
}

/** The details of the error. */
export interface ErrorDetails {
  /**
   * Error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * Error message indicating why the operation failed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The target of the particular error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
}

/** Request body for change directory of a reservation. */
export interface ChangeDirectoryRequest {
  /** Tenant id GUID that reservation order is to be transferred to */
  destinationTenantId?: string;
}

/** Change directory response */
export interface ChangeDirectoryResponse {
  /** Change directory result for reservation order or reservation */
  reservationOrder?: ChangeDirectoryResult;
  reservations?: ChangeDirectoryResult[];
}

/** Change directory result for reservation order or reservation */
export interface ChangeDirectoryResult {
  /** Identifier of the reservation order or reservation */
  id?: string;
  /** Name of the reservation order or reservation */
  name?: string;
  /** True if change directory operation succeeded on this reservation order or reservation */
  isSucceeded?: boolean;
  /** Error reason if operation failed. Null otherwise */
  error?: string;
}

/** Quota properties. */
export interface CurrentQuotaLimitBase {
  /**
   * The quota request ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the quota request.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Type of resource. "Microsoft.Capacity/ServiceLimits"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Quota properties for the resource. */
  properties?: QuotaProperties;
}

/** Quota properties for the resource. */
export interface QuotaProperties {
  /** Quota properties. */
  limit?: number;
  /**
   * Current usage value for the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly currentValue?: number;
  /**  The limit units, such as **count** and **bytes**. Use the unit field provided in the response of the GET quota operation. */
  unit?: string;
  /** Name of the resource provide by the resource provider. Use this property for quotaRequests resource operations. */
  name?: ResourceName;
  /** The name of the resource type. */
  resourceType?: ResourceType;
  /**
   * The time period over which the quota usage values are summarized. For example, P1D (per one day), PT1M (per one minute), and PT1S (per one second). This parameter is optional because, for some resources such as compute, the time period is irrelevant.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly quotaPeriod?: string;
  /** Additional properties for the specified resource provider. */
  properties?: Record<string, unknown>;
}

/** Resource name provided by the resource provider. Use this property for quotaRequest parameter. */
export interface ResourceName {
  /** Resource name. */
  value?: string;
  /**
   * Resource display localized name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly localizedValue?: string;
}

/** The API error. */
export interface ExceptionResponse {
  /** The API error details. */
  error?: ServiceError;
}

/** The API error details. */
export interface ServiceError {
  /** The error code. */
  code?: string;
  /** The error message text. */
  message?: string;
  /**
   * The list of error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ServiceErrorDetail[];
}

/** The error details. */
export interface ServiceErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
}

/** Response with request ID that the quota request was accepted. */
export interface QuotaRequestSubmitResponse201 {
  /**
   * The quota request ID. Use the requestId parameter to check the request status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Operation ID
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The details of the quota request status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: QuotaRequestState;
  /**
   * A user friendly message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
}

/** Quota limits. */
export interface QuotaLimits {
  /** List of quotas (service limits). */
  value?: CurrentQuotaLimitBase[];
  /** The URI for fetching the next page of quotas (service limits). When no more pages exist, the value is null. */
  nextLink?: string;
}

/** Quota request details. */
export interface QuotaRequestDetails {
  /**
   * Quota request ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Quota request name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The quota request status. */
  provisioningState?: QuotaRequestState;
  /**
   * User friendly status message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The time when the quota request was submitted using format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly requestSubmitTime?: Date;
  /** The quotaRequests. */
  value?: SubRequest[];
}

/** The details of quota request. */
export interface QuotaRequestProperties {
  /** The quota request status. */
  provisioningState?: QuotaRequestState;
  /**
   * User friendly status message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The time when the quota request was submitted using format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly requestSubmitTime?: Date;
  /** The quotaRequests. */
  value?: SubRequest[];
}

/** The sub-request submitted with the quota request. */
export interface SubRequest {
  /**
   * Quota (resource limit).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly limit?: number;
  /** The resource name. */
  name?: ResourceName;
  /**
   * Resource type for which the quota check was made.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceType?: string;
  /**  The limit units, such as **count** and **bytes**. Use the unit field provided in the response of the GET quota operation. */
  unit?: string;
  /** The quota request status. */
  provisioningState?: QuotaRequestState;
  /**
   * User-friendly status message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * Sub request ID for individual request.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly subRequestId?: string;
}

/** Quota request details. */
export interface QuotaRequestDetailsList {
  /** The quota requests. */
  value?: QuotaRequestDetails[];
  /** The URI to fetch the next page of quota limits. When there are no more pages, this is null. */
  nextLink?: string;
}

/** Current quota limits. */
export interface CurrentQuotaLimit {
  /**
   * The details of the quota request status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: QuotaRequestState;
  /**
   * A user friendly message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The quota request ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the quota request.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Type of resource. "Microsoft.Capacity/ServiceLimits"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Quota properties for the resource. */
  properties?: QuotaProperties;
}

/** Quotas (service limits) in the request response. */
export interface QuotaLimitsResponse {
  /** List of quotas with the quota request status. */
  value?: CurrentQuotaLimit[];
  /** The URI for fetching the next page of quota limits. When no more pages exist, the value is null. */
  nextLink?: string;
}

/** Quota change requests information. */
export interface CreateGenericQuotaRequestParameters {
  /** Quota change requests. */
  value?: CurrentQuotaLimitBase[];
}

/** Response for the quota submission request. */
export interface QuotaRequestOneResourceSubmitResponse {
  /**
   * The quota request ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the quota request.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Type of resource. "Microsoft.Capacity/ServiceLimits"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The quota request status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: QuotaRequestState;
  /**
   * User friendly status message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The time when the quota request was submitted using format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly requestSubmitTime?: Date;
  /**
   * The quota request ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly idPropertiesId?: string;
  /**
   * The name of the quota request.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly namePropertiesName?: string;
  /**
   * Type of resource. "Microsoft.Capacity/ServiceLimits"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly typePropertiesType?: string;
  /** Quota properties for the resource. */
  properties?: QuotaProperties;
}

/** Response for the quota submission request. */
export interface QuotaRequestSubmitResponse {
  /**
   * The quota request ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the quota request.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /** The quota request details. */
  properties?: QuotaRequestProperties;
  /**
   * Type of resource. "Microsoft.Capacity/serviceLimits"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** Commitment towards the benefit. */
export interface Commitment extends Price {
  /** Commitment grain. */
  grain?: CommitmentGrain;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** The definition of the reservation. */
export interface ReservationResponse extends ProxyResource {
  /** The Azure region where the reserved resource lives. */
  location?: string;
  etag?: number;
  /** The sku information associated to this reservation */
  sku?: SkuName;
  /** The properties associated to this reservation */
  properties?: ReservationsProperties;
  /** Resource Provider type to be reserved. */
  kind?: "Microsoft.Compute";
}

/** Defines headers for Reservation_split operation. */
export interface ReservationSplitHeaders {
  /** URL for determining when an operation has completed. Only use this value only when Azure-AsyncOperation isn't returned. */
  location?: string;
  /** Clients should wait for the Retry-After interval before polling again */
  retryAfter?: number;
}

/** Defines headers for Reservation_merge operation. */
export interface ReservationMergeHeaders {
  /** URL for determining when an operation has completed. Only use this value only when Azure-AsyncOperation isn't returned. */
  location?: string;
  /** Clients should wait for the Retry-After interval before polling again */
  retryAfter?: number;
}

/** Defines headers for Reservation_update operation. */
export interface ReservationUpdateHeaders {
  /** URL for checking the ongoing status of the operation. */
  azureAsyncOperation?: string;
  /** URL for determining when an operation has completed. Only use this value only when Azure-AsyncOperation isn't returned. */
  location?: string;
  /** Clients should wait for the Retry-After interval before polling again */
  retryAfter?: number;
}

/** Defines headers for ReservationOrder_purchase operation. */
export interface ReservationOrderPurchaseHeaders {
  /** URL for determining when an operation has completed. Only use this value only when Azure-AsyncOperation isn't returned. */
  location?: string;
  /** Clients should wait for the Retry-After interval before polling again */
  retryAfter?: number;
}

/** Defines headers for Return_post operation. */
export interface ReturnPostHeaders {
  location?: string;
}

/** Defines headers for CalculateExchange_post operation. */
export interface CalculateExchangePostHeaders {
  /** URL for checking the ongoing status of the operation. */
  azureAsyncOperation?: string;
  /** URL for determining when an operation has completed. Only use this value only when Azure-AsyncOperation isn't returned. */
  location?: string;
  /** Clients should wait for the Retry-After interval before polling again */
  retryAfter?: number;
}

/** Defines headers for Exchange_post operation. */
export interface ExchangePostHeaders {
  /** URL for checking the ongoing status of the operation. */
  azureAsyncOperation?: string;
  /** URL for determining when an operation has completed. Only use this value only when Azure-AsyncOperation isn't returned. */
  location?: string;
  /** Clients should wait for the Retry-After interval before polling again */
  retryAfter?: number;
}

/** Defines headers for Quota_get operation. */
export interface QuotaGetHeaders {
  /** Current entity state version. It should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Quota_list operation. */
export interface QuotaListHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Quota_listNext operation. */
export interface QuotaListNextHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Known values of {@link ErrorResponseCode} that the service accepts. */
export enum KnownErrorResponseCode {
  /** NotSpecified */
  NotSpecified = "NotSpecified",
  /** InternalServerError */
  InternalServerError = "InternalServerError",
  /** ServerTimeout */
  ServerTimeout = "ServerTimeout",
  /** AuthorizationFailed */
  AuthorizationFailed = "AuthorizationFailed",
  /** BadRequest */
  BadRequest = "BadRequest",
  /** ClientCertificateThumbprintNotSet */
  ClientCertificateThumbprintNotSet = "ClientCertificateThumbprintNotSet",
  /** InvalidRequestContent */
  InvalidRequestContent = "InvalidRequestContent",
  /** OperationFailed */
  OperationFailed = "OperationFailed",
  /** HttpMethodNotSupported */
  HttpMethodNotSupported = "HttpMethodNotSupported",
  /** InvalidRequestUri */
  InvalidRequestUri = "InvalidRequestUri",
  /** MissingTenantId */
  MissingTenantId = "MissingTenantId",
  /** InvalidTenantId */
  InvalidTenantId = "InvalidTenantId",
  /** InvalidReservationOrderId */
  InvalidReservationOrderId = "InvalidReservationOrderId",
  /** InvalidReservationId */
  InvalidReservationId = "InvalidReservationId",
  /** ReservationIdNotInReservationOrder */
  ReservationIdNotInReservationOrder = "ReservationIdNotInReservationOrder",
  /** ReservationOrderNotFound */
  ReservationOrderNotFound = "ReservationOrderNotFound",
  /** InvalidSubscriptionId */
  InvalidSubscriptionId = "InvalidSubscriptionId",
  /** InvalidAccessToken */
  InvalidAccessToken = "InvalidAccessToken",
  /** InvalidLocationId */
  InvalidLocationId = "InvalidLocationId",
  /** UnauthenticatedRequestsThrottled */
  UnauthenticatedRequestsThrottled = "UnauthenticatedRequestsThrottled",
  /** InvalidHealthCheckType */
  InvalidHealthCheckType = "InvalidHealthCheckType",
  /** Forbidden */
  Forbidden = "Forbidden",
  /** BillingScopeIdCannotBeChanged */
  BillingScopeIdCannotBeChanged = "BillingScopeIdCannotBeChanged",
  /** AppliedScopesNotAssociatedWithCommerceAccount */
  AppliedScopesNotAssociatedWithCommerceAccount = "AppliedScopesNotAssociatedWithCommerceAccount",
  /** PatchValuesSameAsExisting */
  PatchValuesSameAsExisting = "PatchValuesSameAsExisting",
  /** RoleAssignmentCreationFailed */
  RoleAssignmentCreationFailed = "RoleAssignmentCreationFailed",
  /** ReservationOrderCreationFailed */
  ReservationOrderCreationFailed = "ReservationOrderCreationFailed",
  /** ReservationOrderNotEnabled */
  ReservationOrderNotEnabled = "ReservationOrderNotEnabled",
  /** CapacityUpdateScopesFailed */
  CapacityUpdateScopesFailed = "CapacityUpdateScopesFailed",
  /** UnsupportedReservationTerm */
  UnsupportedReservationTerm = "UnsupportedReservationTerm",
  /** ReservationOrderIdAlreadyExists */
  ReservationOrderIdAlreadyExists = "ReservationOrderIdAlreadyExists",
  /** RiskCheckFailed */
  RiskCheckFailed = "RiskCheckFailed",
  /** CreateQuoteFailed */
  CreateQuoteFailed = "CreateQuoteFailed",
  /** ActivateQuoteFailed */
  ActivateQuoteFailed = "ActivateQuoteFailed",
  /** NonsupportedAccountId */
  NonsupportedAccountId = "NonsupportedAccountId",
  /** PaymentInstrumentNotFound */
  PaymentInstrumentNotFound = "PaymentInstrumentNotFound",
  /** MissingAppliedScopesForSingle */
  MissingAppliedScopesForSingle = "MissingAppliedScopesForSingle",
  /** NoValidReservationsToReRate */
  NoValidReservationsToReRate = "NoValidReservationsToReRate",
  /** ReRateOnlyAllowedForEA */
  ReRateOnlyAllowedForEA = "ReRateOnlyAllowedForEA",
  /** OperationCannotBePerformedInCurrentState */
  OperationCannotBePerformedInCurrentState = "OperationCannotBePerformedInCurrentState",
  /** InvalidSingleAppliedScopesCount */
  InvalidSingleAppliedScopesCount = "InvalidSingleAppliedScopesCount",
  /** InvalidFulfillmentRequestParameters */
  InvalidFulfillmentRequestParameters = "InvalidFulfillmentRequestParameters",
  /** NotSupportedCountry */
  NotSupportedCountry = "NotSupportedCountry",
  /** InvalidRefundQuantity */
  InvalidRefundQuantity = "InvalidRefundQuantity",
  /** PurchaseError */
  PurchaseError = "PurchaseError",
  /** BillingCustomerInputError */
  BillingCustomerInputError = "BillingCustomerInputError",
  /** BillingPaymentInstrumentSoftError */
  BillingPaymentInstrumentSoftError = "BillingPaymentInstrumentSoftError",
  /** BillingPaymentInstrumentHardError */
  BillingPaymentInstrumentHardError = "BillingPaymentInstrumentHardError",
  /** BillingTransientError */
  BillingTransientError = "BillingTransientError",
  /** BillingError */
  BillingError = "BillingError",
  /** FulfillmentConfigurationError */
  FulfillmentConfigurationError = "FulfillmentConfigurationError",
  /** FulfillmentOutOfStockError */
  FulfillmentOutOfStockError = "FulfillmentOutOfStockError",
  /** FulfillmentTransientError */
  FulfillmentTransientError = "FulfillmentTransientError",
  /** FulfillmentError */
  FulfillmentError = "FulfillmentError",
  /** CalculatePriceFailed */
  CalculatePriceFailed = "CalculatePriceFailed",
  /** AppliedScopesSameAsExisting */
  AppliedScopesSameAsExisting = "AppliedScopesSameAsExisting",
  /** SelfServiceRefundNotSupported */
  SelfServiceRefundNotSupported = "SelfServiceRefundNotSupported",
  /** RefundLimitExceeded */
  RefundLimitExceeded = "RefundLimitExceeded"
}

/**
 * Defines values for ErrorResponseCode. \
 * {@link KnownErrorResponseCode} can be used interchangeably with ErrorResponseCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **InternalServerError** \
 * **ServerTimeout** \
 * **AuthorizationFailed** \
 * **BadRequest** \
 * **ClientCertificateThumbprintNotSet** \
 * **InvalidRequestContent** \
 * **OperationFailed** \
 * **HttpMethodNotSupported** \
 * **InvalidRequestUri** \
 * **MissingTenantId** \
 * **InvalidTenantId** \
 * **InvalidReservationOrderId** \
 * **InvalidReservationId** \
 * **ReservationIdNotInReservationOrder** \
 * **ReservationOrderNotFound** \
 * **InvalidSubscriptionId** \
 * **InvalidAccessToken** \
 * **InvalidLocationId** \
 * **UnauthenticatedRequestsThrottled** \
 * **InvalidHealthCheckType** \
 * **Forbidden** \
 * **BillingScopeIdCannotBeChanged** \
 * **AppliedScopesNotAssociatedWithCommerceAccount** \
 * **PatchValuesSameAsExisting** \
 * **RoleAssignmentCreationFailed** \
 * **ReservationOrderCreationFailed** \
 * **ReservationOrderNotEnabled** \
 * **CapacityUpdateScopesFailed** \
 * **UnsupportedReservationTerm** \
 * **ReservationOrderIdAlreadyExists** \
 * **RiskCheckFailed** \
 * **CreateQuoteFailed** \
 * **ActivateQuoteFailed** \
 * **NonsupportedAccountId** \
 * **PaymentInstrumentNotFound** \
 * **MissingAppliedScopesForSingle** \
 * **NoValidReservationsToReRate** \
 * **ReRateOnlyAllowedForEA** \
 * **OperationCannotBePerformedInCurrentState** \
 * **InvalidSingleAppliedScopesCount** \
 * **InvalidFulfillmentRequestParameters** \
 * **NotSupportedCountry** \
 * **InvalidRefundQuantity** \
 * **PurchaseError** \
 * **BillingCustomerInputError** \
 * **BillingPaymentInstrumentSoftError** \
 * **BillingPaymentInstrumentHardError** \
 * **BillingTransientError** \
 * **BillingError** \
 * **FulfillmentConfigurationError** \
 * **FulfillmentOutOfStockError** \
 * **FulfillmentTransientError** \
 * **FulfillmentError** \
 * **CalculatePriceFailed** \
 * **AppliedScopesSameAsExisting** \
 * **SelfServiceRefundNotSupported** \
 * **RefundLimitExceeded**
 */
export type ErrorResponseCode = string;

/** Known values of {@link ReservationBillingPlan} that the service accepts. */
export enum KnownReservationBillingPlan {
  /** Upfront */
  Upfront = "Upfront",
  /** Monthly */
  Monthly = "Monthly"
}

/**
 * Defines values for ReservationBillingPlan. \
 * {@link KnownReservationBillingPlan} can be used interchangeably with ReservationBillingPlan,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Upfront** \
 * **Monthly**
 */
export type ReservationBillingPlan = string;

/** Known values of {@link ReservationTerm} that the service accepts. */
export enum KnownReservationTerm {
  /** P1Y */
  P1Y = "P1Y",
  /** P3Y */
  P3Y = "P3Y",
  /** P5Y */
  P5Y = "P5Y"
}

/**
 * Defines values for ReservationTerm. \
 * {@link KnownReservationTerm} can be used interchangeably with ReservationTerm,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **P1Y** \
 * **P3Y** \
 * **P5Y**
 */
export type ReservationTerm = string;

/** Known values of {@link ReservedResourceType} that the service accepts. */
export enum KnownReservedResourceType {
  /** VirtualMachines */
  VirtualMachines = "VirtualMachines",
  /** SqlDatabases */
  SqlDatabases = "SqlDatabases",
  /** SuseLinux */
  SuseLinux = "SuseLinux",
  /** CosmosDb */
  CosmosDb = "CosmosDb",
  /** RedHat */
  RedHat = "RedHat",
  /** SqlDataWarehouse */
  SqlDataWarehouse = "SqlDataWarehouse",
  /** VMwareCloudSimple */
  VMwareCloudSimple = "VMwareCloudSimple",
  /** RedHatOsa */
  RedHatOsa = "RedHatOsa",
  /** Databricks */
  Databricks = "Databricks",
  /** AppService */
  AppService = "AppService",
  /** ManagedDisk */
  ManagedDisk = "ManagedDisk",
  /** BlockBlob */
  BlockBlob = "BlockBlob",
  /** RedisCache */
  RedisCache = "RedisCache",
  /** AzureDataExplorer */
  AzureDataExplorer = "AzureDataExplorer",
  /** MySql */
  MySql = "MySql",
  /** MariaDb */
  MariaDb = "MariaDb",
  /** PostgreSql */
  PostgreSql = "PostgreSql",
  /** DedicatedHost */
  DedicatedHost = "DedicatedHost",
  /** SapHana */
  SapHana = "SapHana",
  /** SqlAzureHybridBenefit */
  SqlAzureHybridBenefit = "SqlAzureHybridBenefit",
  /** AVS */
  AVS = "AVS",
  /** DataFactory */
  DataFactory = "DataFactory",
  /** NetAppStorage */
  NetAppStorage = "NetAppStorage",
  /** AzureFiles */
  AzureFiles = "AzureFiles",
  /** SqlEdge */
  SqlEdge = "SqlEdge",
  /** VirtualMachineSoftware */
  VirtualMachineSoftware = "VirtualMachineSoftware"
}

/**
 * Defines values for ReservedResourceType. \
 * {@link KnownReservedResourceType} can be used interchangeably with ReservedResourceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **VirtualMachines** \
 * **SqlDatabases** \
 * **SuseLinux** \
 * **CosmosDb** \
 * **RedHat** \
 * **SqlDataWarehouse** \
 * **VMwareCloudSimple** \
 * **RedHatOsa** \
 * **Databricks** \
 * **AppService** \
 * **ManagedDisk** \
 * **BlockBlob** \
 * **RedisCache** \
 * **AzureDataExplorer** \
 * **MySql** \
 * **MariaDb** \
 * **PostgreSql** \
 * **DedicatedHost** \
 * **SapHana** \
 * **SqlAzureHybridBenefit** \
 * **AVS** \
 * **DataFactory** \
 * **NetAppStorage** \
 * **AzureFiles** \
 * **SqlEdge** \
 * **VirtualMachineSoftware**
 */
export type ReservedResourceType = string;

/** Known values of {@link AppliedScopeType} that the service accepts. */
export enum KnownAppliedScopeType {
  /** Single */
  Single = "Single",
  /** Shared */
  Shared = "Shared",
  /** ManagementGroup */
  ManagementGroup = "ManagementGroup"
}

/**
 * Defines values for AppliedScopeType. \
 * {@link KnownAppliedScopeType} can be used interchangeably with AppliedScopeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Single** \
 * **Shared** \
 * **ManagementGroup**
 */
export type AppliedScopeType = string;

/** Known values of {@link InstanceFlexibility} that the service accepts. */
export enum KnownInstanceFlexibility {
  /** On */
  On = "On",
  /** Off */
  Off = "Off"
}

/**
 * Defines values for InstanceFlexibility. \
 * {@link KnownInstanceFlexibility} can be used interchangeably with InstanceFlexibility,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **On** \
 * **Off**
 */
export type InstanceFlexibility = string;

/** Known values of {@link PaymentStatus} that the service accepts. */
export enum KnownPaymentStatus {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Scheduled */
  Scheduled = "Scheduled",
  /** Cancelled */
  Cancelled = "Cancelled"
}

/**
 * Defines values for PaymentStatus. \
 * {@link KnownPaymentStatus} can be used interchangeably with PaymentStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Scheduled** \
 * **Cancelled**
 */
export type PaymentStatus = string;

/** Known values of {@link ReservationStatusCode} that the service accepts. */
export enum KnownReservationStatusCode {
  /** None */
  None = "None",
  /** Pending */
  Pending = "Pending",
  /** Processing */
  Processing = "Processing",
  /** Active */
  Active = "Active",
  /** PurchaseError */
  PurchaseError = "PurchaseError",
  /** PaymentInstrumentError */
  PaymentInstrumentError = "PaymentInstrumentError",
  /** Split */
  Split = "Split",
  /** Merged */
  Merged = "Merged",
  /** Expired */
  Expired = "Expired",
  /** Succeeded */
  Succeeded = "Succeeded"
}

/**
 * Defines values for ReservationStatusCode. \
 * {@link KnownReservationStatusCode} can be used interchangeably with ReservationStatusCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Pending** \
 * **Processing** \
 * **Active** \
 * **PurchaseError** \
 * **PaymentInstrumentError** \
 * **Split** \
 * **Merged** \
 * **Expired** \
 * **Succeeded**
 */
export type ReservationStatusCode = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Creating */
  Creating = "Creating",
  /** PendingResourceHold */
  PendingResourceHold = "PendingResourceHold",
  /** ConfirmedResourceHold */
  ConfirmedResourceHold = "ConfirmedResourceHold",
  /** PendingBilling */
  PendingBilling = "PendingBilling",
  /** ConfirmedBilling */
  ConfirmedBilling = "ConfirmedBilling",
  /** Created */
  Created = "Created",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Cancelled */
  Cancelled = "Cancelled",
  /** Expired */
  Expired = "Expired",
  /** BillingFailed */
  BillingFailed = "BillingFailed",
  /** Failed */
  Failed = "Failed",
  /** Split */
  Split = "Split",
  /** Merged */
  Merged = "Merged"
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **PendingResourceHold** \
 * **ConfirmedResourceHold** \
 * **PendingBilling** \
 * **ConfirmedBilling** \
 * **Created** \
 * **Succeeded** \
 * **Cancelled** \
 * **Expired** \
 * **BillingFailed** \
 * **Failed** \
 * **Split** \
 * **Merged**
 */
export type ProvisioningState = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link SavingsPlanTerm} that the service accepts. */
export enum KnownSavingsPlanTerm {
  /** P1Y */
  P1Y = "P1Y",
  /** P3Y */
  P3Y = "P3Y"
}

/**
 * Defines values for SavingsPlanTerm. \
 * {@link KnownSavingsPlanTerm} can be used interchangeably with SavingsPlanTerm,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **P1Y** \
 * **P3Y**
 */
export type SavingsPlanTerm = string;

/** Known values of {@link BillingPlan} that the service accepts. */
export enum KnownBillingPlan {
  /** P1M */
  P1M = "P1M"
}

/**
 * Defines values for BillingPlan. \
 * {@link KnownBillingPlan} can be used interchangeably with BillingPlan,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **P1M**
 */
export type BillingPlan = string;

/** Known values of {@link CommitmentGrain} that the service accepts. */
export enum KnownCommitmentGrain {
  /** Hourly */
  Hourly = "Hourly"
}

/**
 * Defines values for CommitmentGrain. \
 * {@link KnownCommitmentGrain} can be used interchangeably with CommitmentGrain,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Hourly**
 */
export type CommitmentGrain = string;

/** Known values of {@link CalculateExchangeOperationResultStatus} that the service accepts. */
export enum KnownCalculateExchangeOperationResultStatus {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Cancelled */
  Cancelled = "Cancelled",
  /** Pending */
  Pending = "Pending"
}

/**
 * Defines values for CalculateExchangeOperationResultStatus. \
 * {@link KnownCalculateExchangeOperationResultStatus} can be used interchangeably with CalculateExchangeOperationResultStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Cancelled** \
 * **Pending**
 */
export type CalculateExchangeOperationResultStatus = string;

/** Known values of {@link ExchangeOperationResultStatus} that the service accepts. */
export enum KnownExchangeOperationResultStatus {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Cancelled */
  Cancelled = "Cancelled",
  /** PendingRefunds */
  PendingRefunds = "PendingRefunds",
  /** PendingPurchases */
  PendingPurchases = "PendingPurchases"
}

/**
 * Defines values for ExchangeOperationResultStatus. \
 * {@link KnownExchangeOperationResultStatus} can be used interchangeably with ExchangeOperationResultStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Cancelled** \
 * **PendingRefunds** \
 * **PendingPurchases**
 */
export type ExchangeOperationResultStatus = string;

/** Known values of {@link OperationStatus} that the service accepts. */
export enum KnownOperationStatus {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Cancelled */
  Cancelled = "Cancelled",
  /** Pending */
  Pending = "Pending"
}

/**
 * Defines values for OperationStatus. \
 * {@link KnownOperationStatus} can be used interchangeably with OperationStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Cancelled** \
 * **Pending**
 */
export type OperationStatus = string;

/** Known values of {@link ResourceType} that the service accepts. */
export enum KnownResourceType {
  /** Standard */
  Standard = "standard",
  /** Dedicated */
  Dedicated = "dedicated",
  /** LowPriority */
  LowPriority = "lowPriority",
  /** Shared */
  Shared = "shared",
  /** ServiceSpecific */
  ServiceSpecific = "serviceSpecific"
}

/**
 * Defines values for ResourceType. \
 * {@link KnownResourceType} can be used interchangeably with ResourceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **standard** \
 * **dedicated** \
 * **lowPriority** \
 * **shared** \
 * **serviceSpecific**
 */
export type ResourceType = string;

/** Known values of {@link QuotaRequestState} that the service accepts. */
export enum KnownQuotaRequestState {
  /** Accepted */
  Accepted = "Accepted",
  /** Invalid */
  Invalid = "Invalid",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** InProgress */
  InProgress = "InProgress"
}

/**
 * Defines values for QuotaRequestState. \
 * {@link KnownQuotaRequestState} can be used interchangeably with QuotaRequestState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Accepted** \
 * **Invalid** \
 * **Succeeded** \
 * **Failed** \
 * **InProgress**
 */
export type QuotaRequestState = string;

/** Known values of {@link Location} that the service accepts. */
export enum KnownLocation {
  /** Westus */
  Westus = "westus",
  /** Eastus */
  Eastus = "eastus",
  /** Eastus2 */
  Eastus2 = "eastus2",
  /** Northcentralus */
  Northcentralus = "northcentralus",
  /** Westus2 */
  Westus2 = "westus2",
  /** Southcentralus */
  Southcentralus = "southcentralus",
  /** Centralus */
  Centralus = "centralus",
  /** Westeurope */
  Westeurope = "westeurope",
  /** Northeurope */
  Northeurope = "northeurope",
  /** Eastasia */
  Eastasia = "eastasia",
  /** Southeastasia */
  Southeastasia = "southeastasia",
  /** Japaneast */
  Japaneast = "japaneast",
  /** Japanwest */
  Japanwest = "japanwest",
  /** Brazilsouth */
  Brazilsouth = "brazilsouth",
  /** Australiaeast */
  Australiaeast = "australiaeast",
  /** Australiasoutheast */
  Australiasoutheast = "australiasoutheast",
  /** Southindia */
  Southindia = "southindia",
  /** Westindia */
  Westindia = "westindia",
  /** Centralindia */
  Centralindia = "centralindia",
  /** Canadacentral */
  Canadacentral = "canadacentral",
  /** Canadaeast */
  Canadaeast = "canadaeast",
  /** Uksouth */
  Uksouth = "uksouth",
  /** Westcentralus */
  Westcentralus = "westcentralus",
  /** Ukwest */
  Ukwest = "ukwest"
}

/**
 * Defines values for Location. \
 * {@link KnownLocation} can be used interchangeably with Location,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **westus** \
 * **eastus** \
 * **eastus2** \
 * **northcentralus** \
 * **westus2** \
 * **southcentralus** \
 * **centralus** \
 * **westeurope** \
 * **northeurope** \
 * **eastasia** \
 * **southeastasia** \
 * **japaneast** \
 * **japanwest** \
 * **brazilsouth** \
 * **australiaeast** \
 * **australiasoutheast** \
 * **southindia** \
 * **westindia** \
 * **centralindia** \
 * **canadacentral** \
 * **canadaeast** \
 * **uksouth** \
 * **westcentralus** \
 * **ukwest**
 */
export type Location = string;

/** Known values of {@link DisplayProvisioningState} that the service accepts. */
export enum KnownDisplayProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Expiring */
  Expiring = "Expiring",
  /** Expired */
  Expired = "Expired",
  /** Pending */
  Pending = "Pending",
  /** Processing */
  Processing = "Processing",
  /** Cancelled */
  Cancelled = "Cancelled",
  /** Failed */
  Failed = "Failed",
  /** Warning */
  Warning = "Warning",
  /** NoBenefit */
  NoBenefit = "NoBenefit"
}

/**
 * Defines values for DisplayProvisioningState. \
 * {@link KnownDisplayProvisioningState} can be used interchangeably with DisplayProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Expiring** \
 * **Expired** \
 * **Pending** \
 * **Processing** \
 * **Cancelled** \
 * **Failed** \
 * **Warning** \
 * **NoBenefit**
 */
export type DisplayProvisioningState = string;

/** Known values of {@link UserFriendlyAppliedScopeType} that the service accepts. */
export enum KnownUserFriendlyAppliedScopeType {
  /** None */
  None = "None",
  /** Shared */
  Shared = "Shared",
  /** Single */
  Single = "Single",
  /** ResourceGroup */
  ResourceGroup = "ResourceGroup",
  /** ManagementGroup */
  ManagementGroup = "ManagementGroup"
}

/**
 * Defines values for UserFriendlyAppliedScopeType. \
 * {@link KnownUserFriendlyAppliedScopeType} can be used interchangeably with UserFriendlyAppliedScopeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Shared** \
 * **Single** \
 * **ResourceGroup** \
 * **ManagementGroup**
 */
export type UserFriendlyAppliedScopeType = string;

/** Known values of {@link UserFriendlyRenewState} that the service accepts. */
export enum KnownUserFriendlyRenewState {
  /** On */
  On = "On",
  /** Off */
  Off = "Off",
  /** Renewed */
  Renewed = "Renewed",
  /** NotRenewed */
  NotRenewed = "NotRenewed",
  /** NotApplicable */
  NotApplicable = "NotApplicable"
}

/**
 * Defines values for UserFriendlyRenewState. \
 * {@link KnownUserFriendlyRenewState} can be used interchangeably with UserFriendlyRenewState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **On** \
 * **Off** \
 * **Renewed** \
 * **NotRenewed** \
 * **NotApplicable**
 */
export type UserFriendlyRenewState = string;

/** Optional parameters. */
export interface ReservationAvailableScopesOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the availableScopes operation. */
export type ReservationAvailableScopesResponse = AvailableScopeProperties;

/** Optional parameters. */
export interface ReservationSplitOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the split operation. */
export type ReservationSplitResponse = ReservationResponse[];

/** Optional parameters. */
export interface ReservationMergeOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the merge operation. */
export type ReservationMergeResponse = ReservationResponse[];

/** Optional parameters. */
export interface ReservationListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ReservationListResponse = ReservationList;

/** Optional parameters. */
export interface ReservationGetOptionalParams
  extends coreClient.OperationOptions {
  /** Supported value of this query is renewProperties */
  expand?: string;
}

/** Contains response data for the get operation. */
export type ReservationGetResponse = ReservationResponse;

/** Optional parameters. */
export interface ReservationUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type ReservationUpdateResponse = ReservationResponse;

/** Optional parameters. */
export interface ReservationArchiveOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ReservationUnarchiveOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ReservationListRevisionsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listRevisions operation. */
export type ReservationListRevisionsResponse = ReservationList;

/** Optional parameters. */
export interface ReservationListAllOptionalParams
  extends coreClient.OperationOptions {
  /** May be used to filter by reservation properties. The filter supports 'eq', 'or', and 'and'. It does not currently support 'ne', 'gt', 'le', 'ge', or 'not'. Reservation properties include sku/name, properties/{appliedScopeType, archived, displayName, displayProvisioningState, effectiveDateTime, expiryDate, expiryDateTime, provisioningState, quantity, renew, reservedResourceType, term, userFriendlyAppliedScopeType, userFriendlyRenewState} */
  filter?: string;
  /** May be used to sort order by reservation properties. */
  orderby?: string;
  /** To indicate whether to refresh the roll up counts of the reservations group by provisioning states */
  refreshSummary?: string;
  /** The number of reservations to skip from the list before returning results */
  skiptoken?: number;
  /** The selected provisioning state */
  selectedState?: string;
  /** To number of reservations to return */
  take?: number;
}

/** Contains response data for the listAll operation. */
export type ReservationListAllResponse = ReservationsListResult;

/** Optional parameters. */
export interface ReservationListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ReservationListNextResponse = ReservationList;

/** Optional parameters. */
export interface ReservationListRevisionsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listRevisionsNext operation. */
export type ReservationListRevisionsNextResponse = ReservationList;

/** Optional parameters. */
export interface ReservationListAllNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listAllNext operation. */
export type ReservationListAllNextResponse = ReservationsListResult;

/** Optional parameters. */
export interface GetCatalogOptionalParams extends coreClient.OperationOptions {
  /** May be used to filter by Catalog properties. The filter supports 'eq', 'or', and 'and'. */
  filter?: string;
  /** The type of the resource for which the skus should be provided. */
  reservedResourceType?: string;
  /** Filters the skus based on the location specified in this parameter. This can be an Azure region or global */
  location?: string;
  /** Publisher id used to get the third party products */
  publisherId?: string;
  /** Offer id used to get the third party products */
  offerId?: string;
  /** Plan id used to get the third party products */
  planId?: string;
  /** The number of reservations to skip from the list before returning results */
  skip?: number;
  /** To number of reservations to return */
  take?: number;
}

/** Contains response data for the getCatalog operation. */
export type GetCatalogResponse = CatalogsResult;

/** Optional parameters. */
export interface GetAppliedReservationListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getAppliedReservationList operation. */
export type GetAppliedReservationListResponse = AppliedReservations;

/** Optional parameters. */
export interface GetCatalogNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getCatalogNext operation. */
export type GetCatalogNextResponse = CatalogsResult;

/** Optional parameters. */
export interface ReservationOrderCalculateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the calculate operation. */
export type ReservationOrderCalculateResponse = CalculatePriceResponse;

/** Optional parameters. */
export interface ReservationOrderListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ReservationOrderListResponse = ReservationOrderList;

/** Optional parameters. */
export interface ReservationOrderPurchaseOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the purchase operation. */
export type ReservationOrderPurchaseResponse = ReservationOrderResponse;

/** Optional parameters. */
export interface ReservationOrderGetOptionalParams
  extends coreClient.OperationOptions {
  /** May be used to expand the planInformation. */
  expand?: string;
}

/** Contains response data for the get operation. */
export type ReservationOrderGetResponse = ReservationOrderResponse;

/** Optional parameters. */
export interface ReservationOrderChangeDirectoryOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the changeDirectory operation. */
export type ReservationOrderChangeDirectoryResponse = ChangeDirectoryResponse;

/** Optional parameters. */
export interface ReservationOrderListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ReservationOrderListNextResponse = ReservationOrderList;

/** Optional parameters. */
export interface OperationListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationListResponse = OperationList;

/** Optional parameters. */
export interface OperationListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationListNextResponse = OperationList;

/** Optional parameters. */
export interface CalculateRefundPostOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the post operation. */
export type CalculateRefundPostResponse = CalculateRefundResponse;

/** Optional parameters. */
export interface ReturnPostOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the post operation. */
export type ReturnPostResponse = ReturnPostHeaders & RefundResponse;

/** Optional parameters. */
export interface CalculateExchangePostOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the post operation. */
export type CalculateExchangePostResponse = CalculateExchangeOperationResultResponse;

/** Optional parameters. */
export interface ExchangePostOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the post operation. */
export type ExchangePostResponse = ExchangeOperationResultResponse;

/** Optional parameters. */
export interface QuotaGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type QuotaGetResponse = QuotaGetHeaders & CurrentQuotaLimitBase;

/** Optional parameters. */
export interface QuotaCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type QuotaCreateOrUpdateResponse = CurrentQuotaLimitBase;

/** Optional parameters. */
export interface QuotaUpdateOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type QuotaUpdateResponse = CurrentQuotaLimitBase;

/** Optional parameters. */
export interface QuotaListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type QuotaListResponse = QuotaListHeaders & QuotaLimits;

/** Optional parameters. */
export interface QuotaListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type QuotaListNextResponse = QuotaListNextHeaders & QuotaLimits;

/** Optional parameters. */
export interface QuotaRequestStatusGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type QuotaRequestStatusGetResponse = QuotaRequestDetails;

/** Optional parameters. */
export interface QuotaRequestStatusListOptionalParams
  extends coreClient.OperationOptions {
  /**
   * | Field | Supported operators |
   * |---------------------|------------------------|
   * |requestSubmitTime | ge, le, eq, gt, lt |
   */
  filter?: string;
  /** Number of records to return. */
  top?: number;
  /** Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element includes a skiptoken parameter that specifies a starting point to use for subsequent calls. */
  skiptoken?: string;
}

/** Contains response data for the list operation. */
export type QuotaRequestStatusListResponse = QuotaRequestDetailsList;

/** Optional parameters. */
export interface QuotaRequestStatusListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type QuotaRequestStatusListNextResponse = QuotaRequestDetailsList;

/** Optional parameters. */
export interface AzureReservationAPIOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
