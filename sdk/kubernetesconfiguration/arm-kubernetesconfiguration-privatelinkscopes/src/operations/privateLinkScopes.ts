/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { PrivateLinkScopes } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { PrivateLinkScopesClient } from "../privateLinkScopesClient.js";
import {
  KubernetesConfigurationPrivateLinkScope,
  PrivateLinkScopesListNextOptionalParams,
  PrivateLinkScopesListOptionalParams,
  PrivateLinkScopesListResponse,
  PrivateLinkScopesListByResourceGroupNextOptionalParams,
  PrivateLinkScopesListByResourceGroupOptionalParams,
  PrivateLinkScopesListByResourceGroupResponse,
  PrivateLinkScopesDeleteOptionalParams,
  PrivateLinkScopesGetOptionalParams,
  PrivateLinkScopesGetResponse,
  PrivateLinkScopesCreateOrUpdateOptionalParams,
  PrivateLinkScopesCreateOrUpdateResponse,
  TagsResource,
  PrivateLinkScopesUpdateTagsOptionalParams,
  PrivateLinkScopesUpdateTagsResponse,
  PrivateLinkScopesListNextResponse,
  PrivateLinkScopesListByResourceGroupNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing PrivateLinkScopes operations. */
export class PrivateLinkScopesImpl implements PrivateLinkScopes {
  private readonly client: PrivateLinkScopesClient;

  /**
   * Initialize a new instance of the class PrivateLinkScopes class.
   * @param client Reference to the service client
   */
  constructor(client: PrivateLinkScopesClient) {
    this.client = client;
  }

  /**
   * Gets a list of all Azure Arc PrivateLinkScopes within a subscription.
   * @param options The options parameters.
   */
  public list(
    options?: PrivateLinkScopesListOptionalParams,
  ): PagedAsyncIterableIterator<KubernetesConfigurationPrivateLinkScope> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      },
    };
  }

  private async *listPagingPage(
    options?: PrivateLinkScopesListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<KubernetesConfigurationPrivateLinkScope[]> {
    let result: PrivateLinkScopesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: PrivateLinkScopesListOptionalParams,
  ): AsyncIterableIterator<KubernetesConfigurationPrivateLinkScope> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets a list of Azure Arc PrivateLinkScopes within a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: PrivateLinkScopesListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<KubernetesConfigurationPrivateLinkScope> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: PrivateLinkScopesListByResourceGroupOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<KubernetesConfigurationPrivateLinkScope[]> {
    let result: PrivateLinkScopesListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: PrivateLinkScopesListByResourceGroupOptionalParams,
  ): AsyncIterableIterator<KubernetesConfigurationPrivateLinkScope> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets a list of all Azure Arc PrivateLinkScopes within a subscription.
   * @param options The options parameters.
   */
  private _list(
    options?: PrivateLinkScopesListOptionalParams,
  ): Promise<PrivateLinkScopesListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Gets a list of Azure Arc PrivateLinkScopes within a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: PrivateLinkScopesListByResourceGroupOptionalParams,
  ): Promise<PrivateLinkScopesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec,
    );
  }

  /**
   * Deletes a Azure Arc PrivateLinkScope.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param scopeName The name of the Azure Arc PrivateLinkScope resource.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    scopeName: string,
    options?: PrivateLinkScopesDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, scopeName, options },
      deleteOperationSpec,
    );
  }

  /**
   * Returns a Azure Arc PrivateLinkScope.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param scopeName The name of the Azure Arc PrivateLinkScope resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    scopeName: string,
    options?: PrivateLinkScopesGetOptionalParams,
  ): Promise<PrivateLinkScopesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, scopeName, options },
      getOperationSpec,
    );
  }

  /**
   * Creates (or updates) a Azure Arc PrivateLinkScope. Note: You cannot specify a different value for
   * InstrumentationKey nor AppId in the Put operation.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param scopeName The name of the Azure Arc PrivateLinkScope resource.
   * @param parameters Properties that need to be specified to create or update a Azure Arc for Servers
   *                   and Clusters PrivateLinkScope.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    scopeName: string,
    parameters: KubernetesConfigurationPrivateLinkScope,
    options?: PrivateLinkScopesCreateOrUpdateOptionalParams,
  ): Promise<PrivateLinkScopesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, scopeName, parameters, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Updates an existing PrivateLinkScope's tags. To update other fields use the CreateOrUpdate method.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param scopeName The name of the Azure Arc PrivateLinkScope resource.
   * @param privateLinkScopeTags Updated tag information to set into the PrivateLinkScope instance.
   * @param options The options parameters.
   */
  updateTags(
    resourceGroupName: string,
    scopeName: string,
    privateLinkScopeTags: TagsResource,
    options?: PrivateLinkScopesUpdateTagsOptionalParams,
  ): Promise<PrivateLinkScopesUpdateTagsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, scopeName, privateLinkScopeTags, options },
      updateTagsOperationSpec,
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: PrivateLinkScopesListNextOptionalParams,
  ): Promise<PrivateLinkScopesListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec,
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: PrivateLinkScopesListByResourceGroupNextOptionalParams,
  ): Promise<PrivateLinkScopesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.KubernetesConfiguration/privateLinkScopes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KubernetesConfigurationPrivateLinkScopeListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KubernetesConfiguration/privateLinkScopes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KubernetesConfigurationPrivateLinkScopeListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KubernetesConfiguration/privateLinkScopes/{scopeName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.scopeName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KubernetesConfiguration/privateLinkScopes/{scopeName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KubernetesConfigurationPrivateLinkScope,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.scopeName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KubernetesConfiguration/privateLinkScopes/{scopeName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.KubernetesConfigurationPrivateLinkScope,
    },
    201: {
      bodyMapper: Mappers.KubernetesConfigurationPrivateLinkScope,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.scopeName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateTagsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KubernetesConfiguration/privateLinkScopes/{scopeName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.KubernetesConfigurationPrivateLinkScope,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.privateLinkScopeTags,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.scopeName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KubernetesConfigurationPrivateLinkScopeListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KubernetesConfigurationPrivateLinkScopeListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
