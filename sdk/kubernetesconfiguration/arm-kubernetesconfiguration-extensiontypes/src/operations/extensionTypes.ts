/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { ExtensionTypes } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { ExtensionTypesClient } from "../extensionTypesClient.js";
import {
  ExtensionType,
  ExtensionTypesLocationListNextOptionalParams,
  ExtensionTypesLocationListOptionalParams,
  ExtensionTypesLocationListResponse,
  ExtensionTypeVersionForReleaseTrain,
  ExtensionTypesListVersionsNextOptionalParams,
  ExtensionTypesListVersionsOptionalParams,
  ExtensionTypesListVersionsResponse,
  ExtensionTypesListNextOptionalParams,
  ExtensionTypesListOptionalParams,
  ExtensionTypesListResponse,
  ExtensionTypesClusterListVersionsNextOptionalParams,
  ExtensionTypesClusterListVersionsOptionalParams,
  ExtensionTypesClusterListVersionsResponse,
  ExtensionTypesLocationGetOptionalParams,
  ExtensionTypesLocationGetResponse,
  ExtensionTypesGetVersionOptionalParams,
  ExtensionTypesGetVersionResponse,
  ExtensionTypesGetOptionalParams,
  ExtensionTypesGetResponse,
  ExtensionTypesClusterGetVersionOptionalParams,
  ExtensionTypesClusterGetVersionResponse,
  ExtensionTypesLocationListNextResponse,
  ExtensionTypesListVersionsNextResponse,
  ExtensionTypesListNextResponse,
  ExtensionTypesClusterListVersionsNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing ExtensionTypes operations. */
export class ExtensionTypesImpl implements ExtensionTypes {
  private readonly client: ExtensionTypesClient;

  /**
   * Initialize a new instance of the class ExtensionTypes class.
   * @param client Reference to the service client
   */
  constructor(client: ExtensionTypesClient) {
    this.client = client;
  }

  /**
   * List all Extension Types for the location.
   * @param location The name of Azure region.
   * @param options The options parameters.
   */
  public listLocationList(
    location: string,
    options?: ExtensionTypesLocationListOptionalParams,
  ): PagedAsyncIterableIterator<ExtensionType> {
    const iter = this.locationListPagingAll(location, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.locationListPagingPage(location, options, settings);
      },
    };
  }

  private async *locationListPagingPage(
    location: string,
    options?: ExtensionTypesLocationListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ExtensionType[]> {
    let result: ExtensionTypesLocationListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._locationList(location, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._locationListNext(location, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *locationListPagingAll(
    location: string,
    options?: ExtensionTypesLocationListOptionalParams,
  ): AsyncIterableIterator<ExtensionType> {
    for await (const page of this.locationListPagingPage(location, options)) {
      yield* page;
    }
  }

  /**
   * List the versions for an extension type and location.
   * @param location The name of Azure region.
   * @param extensionTypeName Name of the Extension Type.
   * @param options The options parameters.
   */
  public listVersions(
    location: string,
    extensionTypeName: string,
    options?: ExtensionTypesListVersionsOptionalParams,
  ): PagedAsyncIterableIterator<ExtensionTypeVersionForReleaseTrain> {
    const iter = this.listVersionsPagingAll(location, extensionTypeName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listVersionsPagingPage(location, extensionTypeName, options, settings);
      },
    };
  }

  private async *listVersionsPagingPage(
    location: string,
    extensionTypeName: string,
    options?: ExtensionTypesListVersionsOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ExtensionTypeVersionForReleaseTrain[]> {
    let result: ExtensionTypesListVersionsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listVersions(location, extensionTypeName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listVersionsNext(
        location,
        extensionTypeName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listVersionsPagingAll(
    location: string,
    extensionTypeName: string,
    options?: ExtensionTypesListVersionsOptionalParams,
  ): AsyncIterableIterator<ExtensionTypeVersionForReleaseTrain> {
    for await (const page of this.listVersionsPagingPage(location, extensionTypeName, options)) {
      yield* page;
    }
  }

  /**
   * List installable Extension Types for the cluster based region and type for the cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
   *                  Microsoft.HybridContainerService.
   * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
   *                            connectedClusters, provisionedClusters, appliances.
   * @param clusterName The name of the kubernetes cluster.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    options?: ExtensionTypesListOptionalParams,
  ): PagedAsyncIterableIterator<ExtensionType> {
    const iter = this.listPagingAll(
      resourceGroupName,
      clusterRp,
      clusterResourceName,
      clusterName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          clusterRp,
          clusterResourceName,
          clusterName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    options?: ExtensionTypesListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ExtensionType[]> {
    let result: ExtensionTypesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    options?: ExtensionTypesListOptionalParams,
  ): AsyncIterableIterator<ExtensionType> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      clusterRp,
      clusterResourceName,
      clusterName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List the version for an Extension Type installable to the cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
   *                  Microsoft.HybridContainerService.
   * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
   *                            connectedClusters, provisionedClusters, appliances.
   * @param clusterName The name of the kubernetes cluster.
   * @param extensionTypeName Name of the Extension Type.
   * @param options The options parameters.
   */
  public listClusterListVersions(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    extensionTypeName: string,
    options?: ExtensionTypesClusterListVersionsOptionalParams,
  ): PagedAsyncIterableIterator<ExtensionTypeVersionForReleaseTrain> {
    const iter = this.clusterListVersionsPagingAll(
      resourceGroupName,
      clusterRp,
      clusterResourceName,
      clusterName,
      extensionTypeName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.clusterListVersionsPagingPage(
          resourceGroupName,
          clusterRp,
          clusterResourceName,
          clusterName,
          extensionTypeName,
          options,
          settings,
        );
      },
    };
  }

  private async *clusterListVersionsPagingPage(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    extensionTypeName: string,
    options?: ExtensionTypesClusterListVersionsOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ExtensionTypeVersionForReleaseTrain[]> {
    let result: ExtensionTypesClusterListVersionsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._clusterListVersions(
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        extensionTypeName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._clusterListVersionsNext(
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        extensionTypeName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *clusterListVersionsPagingAll(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    extensionTypeName: string,
    options?: ExtensionTypesClusterListVersionsOptionalParams,
  ): AsyncIterableIterator<ExtensionTypeVersionForReleaseTrain> {
    for await (const page of this.clusterListVersionsPagingPage(
      resourceGroupName,
      clusterRp,
      clusterResourceName,
      clusterName,
      extensionTypeName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List all Extension Types for the location.
   * @param location The name of Azure region.
   * @param options The options parameters.
   */
  private _locationList(
    location: string,
    options?: ExtensionTypesLocationListOptionalParams,
  ): Promise<ExtensionTypesLocationListResponse> {
    return this.client.sendOperationRequest({ location, options }, locationListOperationSpec);
  }

  /**
   * Get an extension type for the location.
   * @param location The name of Azure region.
   * @param extensionTypeName Name of the Extension Type.
   * @param options The options parameters.
   */
  locationGet(
    location: string,
    extensionTypeName: string,
    options?: ExtensionTypesLocationGetOptionalParams,
  ): Promise<ExtensionTypesLocationGetResponse> {
    return this.client.sendOperationRequest(
      { location, extensionTypeName, options },
      locationGetOperationSpec,
    );
  }

  /**
   * List the versions for an extension type and location.
   * @param location The name of Azure region.
   * @param extensionTypeName Name of the Extension Type.
   * @param options The options parameters.
   */
  private _listVersions(
    location: string,
    extensionTypeName: string,
    options?: ExtensionTypesListVersionsOptionalParams,
  ): Promise<ExtensionTypesListVersionsResponse> {
    return this.client.sendOperationRequest(
      { location, extensionTypeName, options },
      listVersionsOperationSpec,
    );
  }

  /**
   * Get details of a version for an extension type and location
   * @param location The name of Azure region.
   * @param extensionTypeName Name of the Extension Type.
   * @param versionNumber Version number of the Extension Type.
   * @param options The options parameters.
   */
  getVersion(
    location: string,
    extensionTypeName: string,
    versionNumber: string,
    options?: ExtensionTypesGetVersionOptionalParams,
  ): Promise<ExtensionTypesGetVersionResponse> {
    return this.client.sendOperationRequest(
      { location, extensionTypeName, versionNumber, options },
      getVersionOperationSpec,
    );
  }

  /**
   * List installable Extension Types for the cluster based region and type for the cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
   *                  Microsoft.HybridContainerService.
   * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
   *                            connectedClusters, provisionedClusters, appliances.
   * @param clusterName The name of the kubernetes cluster.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    options?: ExtensionTypesListOptionalParams,
  ): Promise<ExtensionTypesListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        options,
      },
      listOperationSpec,
    );
  }

  /**
   * Get an Extension Type installable to the cluster based region and type for the cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
   *                  Microsoft.HybridContainerService.
   * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
   *                            connectedClusters, provisionedClusters, appliances.
   * @param clusterName The name of the kubernetes cluster.
   * @param extensionTypeName Name of the Extension Type.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    extensionTypeName: string,
    options?: ExtensionTypesGetOptionalParams,
  ): Promise<ExtensionTypesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        extensionTypeName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * List the version for an Extension Type installable to the cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
   *                  Microsoft.HybridContainerService.
   * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
   *                            connectedClusters, provisionedClusters, appliances.
   * @param clusterName The name of the kubernetes cluster.
   * @param extensionTypeName Name of the Extension Type.
   * @param options The options parameters.
   */
  private _clusterListVersions(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    extensionTypeName: string,
    options?: ExtensionTypesClusterListVersionsOptionalParams,
  ): Promise<ExtensionTypesClusterListVersionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        extensionTypeName,
        options,
      },
      clusterListVersionsOperationSpec,
    );
  }

  /**
   * Get details of a version for an Extension Type installable to the cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
   *                  Microsoft.HybridContainerService.
   * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
   *                            connectedClusters, provisionedClusters, appliances.
   * @param clusterName The name of the kubernetes cluster.
   * @param extensionTypeName Name of the Extension Type.
   * @param versionNumber Version number of the Extension Type.
   * @param options The options parameters.
   */
  clusterGetVersion(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    extensionTypeName: string,
    versionNumber: string,
    options?: ExtensionTypesClusterGetVersionOptionalParams,
  ): Promise<ExtensionTypesClusterGetVersionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        extensionTypeName,
        versionNumber,
        options,
      },
      clusterGetVersionOperationSpec,
    );
  }

  /**
   * LocationListNext
   * @param location The name of Azure region.
   * @param nextLink The nextLink from the previous successful call to the LocationList method.
   * @param options The options parameters.
   */
  private _locationListNext(
    location: string,
    nextLink: string,
    options?: ExtensionTypesLocationListNextOptionalParams,
  ): Promise<ExtensionTypesLocationListNextResponse> {
    return this.client.sendOperationRequest(
      { location, nextLink, options },
      locationListNextOperationSpec,
    );
  }

  /**
   * ListVersionsNext
   * @param location The name of Azure region.
   * @param extensionTypeName Name of the Extension Type.
   * @param nextLink The nextLink from the previous successful call to the ListVersions method.
   * @param options The options parameters.
   */
  private _listVersionsNext(
    location: string,
    extensionTypeName: string,
    nextLink: string,
    options?: ExtensionTypesListVersionsNextOptionalParams,
  ): Promise<ExtensionTypesListVersionsNextResponse> {
    return this.client.sendOperationRequest(
      { location, extensionTypeName, nextLink, options },
      listVersionsNextOperationSpec,
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
   *                  Microsoft.HybridContainerService.
   * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
   *                            connectedClusters, provisionedClusters, appliances.
   * @param clusterName The name of the kubernetes cluster.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    nextLink: string,
    options?: ExtensionTypesListNextOptionalParams,
  ): Promise<ExtensionTypesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        nextLink,
        options,
      },
      listNextOperationSpec,
    );
  }

  /**
   * ClusterListVersionsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
   *                  Microsoft.HybridContainerService.
   * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
   *                            connectedClusters, provisionedClusters, appliances.
   * @param clusterName The name of the kubernetes cluster.
   * @param extensionTypeName Name of the Extension Type.
   * @param nextLink The nextLink from the previous successful call to the ClusterListVersions method.
   * @param options The options parameters.
   */
  private _clusterListVersionsNext(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    extensionTypeName: string,
    nextLink: string,
    options?: ExtensionTypesClusterListVersionsNextOptionalParams,
  ): Promise<ExtensionTypesClusterListVersionsNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        extensionTypeName,
        nextLink,
        options,
      },
      clusterListVersionsNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const locationListOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.KubernetesConfiguration/locations/{location}/extensionTypes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionTypesList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.publisherId,
    Parameters.offerId,
    Parameters.planId,
    Parameters.releaseTrain,
    Parameters.clusterType,
    Parameters.apiVersion,
  ],
  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.location],
  headerParameters: [Parameters.accept],
  serializer,
};
const locationGetOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.KubernetesConfiguration/locations/{location}/extensionTypes/{extensionTypeName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionType,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.extensionTypeName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listVersionsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.KubernetesConfiguration/locations/{location}/extensionTypes/{extensionTypeName}/versions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionTypeVersionsList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.releaseTrain,
    Parameters.clusterType,
    Parameters.apiVersion,
    Parameters.majorVersion,
    Parameters.showLatest,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.extensionTypeName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getVersionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.KubernetesConfiguration/locations/{location}/extensionTypes/{extensionTypeName}/versions/{versionNumber}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionTypeVersionForReleaseTrain,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.extensionTypeName,
    Parameters.versionNumber,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensionTypes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionTypesList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.publisherId,
    Parameters.offerId,
    Parameters.planId,
    Parameters.releaseTrain,
    Parameters.apiVersion,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterRp,
    Parameters.clusterResourceName,
    Parameters.clusterName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensionTypes/{extensionTypeName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionType,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.extensionTypeName,
    Parameters.resourceGroupName,
    Parameters.clusterRp,
    Parameters.clusterResourceName,
    Parameters.clusterName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const clusterListVersionsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensionTypes/{extensionTypeName}/versions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionTypeVersionsList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.releaseTrain,
    Parameters.apiVersion,
    Parameters.majorVersion,
    Parameters.showLatest,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.extensionTypeName,
    Parameters.resourceGroupName,
    Parameters.clusterRp,
    Parameters.clusterResourceName,
    Parameters.clusterName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const clusterGetVersionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensionTypes/{extensionTypeName}/versions/{versionNumber}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionTypeVersionForReleaseTrain,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.extensionTypeName,
    Parameters.versionNumber,
    Parameters.resourceGroupName,
    Parameters.clusterRp,
    Parameters.clusterResourceName,
    Parameters.clusterName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const locationListNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionTypesList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listVersionsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionTypeVersionsList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.extensionTypeName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionTypesList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterRp,
    Parameters.clusterResourceName,
    Parameters.clusterName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const clusterListVersionsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionTypeVersionsList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.extensionTypeName,
    Parameters.resourceGroupName,
    Parameters.clusterRp,
    Parameters.clusterResourceName,
    Parameters.clusterName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
