/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import { TokenCredential } from "@azure/core-auth";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as operations from "./operations";
import { SourceControlConfigurationClientContext } from "./sourceControlConfigurationClientContext";


class SourceControlConfigurationClient extends SourceControlConfigurationClientContext {
  // Operation groups
  clusterExtensionType: operations.ClusterExtensionType;
  clusterExtensionTypes: operations.ClusterExtensionTypes;
  extensionTypeVersions: operations.ExtensionTypeVersions;
  locationExtensionTypes: operations.LocationExtensionTypes;
  extensions: operations.Extensions;
  operationStatus: operations.OperationStatus;
  fluxConfigurations: operations.FluxConfigurations;
  fluxConfigOperationStatus: operations.FluxConfigOperationStatus;
  sourceControlConfigurations: operations.SourceControlConfigurations;
  operations: operations.Operations;

  /**
   * Initializes a new instance of the SourceControlConfigurationClient class.
   * @param credentials Credentials needed for the client to connect to Azure. Credentials
   * implementing the TokenCredential interface from the @azure/identity package are recommended. For
   * more information about these credentials, see
   * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
   * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
   * @azure/ms-rest-browserauth are also supported.
   * @param subscriptionId The ID of the target subscription.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials | TokenCredential, subscriptionId: string, options?: Models.SourceControlConfigurationClientOptions) {
    super(credentials, subscriptionId, options);
    this.clusterExtensionType = new operations.ClusterExtensionType(this);
    this.clusterExtensionTypes = new operations.ClusterExtensionTypes(this);
    this.extensionTypeVersions = new operations.ExtensionTypeVersions(this);
    this.locationExtensionTypes = new operations.LocationExtensionTypes(this);
    this.extensions = new operations.Extensions(this);
    this.operationStatus = new operations.OperationStatus(this);
    this.fluxConfigurations = new operations.FluxConfigurations(this);
    this.fluxConfigOperationStatus = new operations.FluxConfigOperationStatus(this);
    this.sourceControlConfigurations = new operations.SourceControlConfigurations(this);
    this.operations = new operations.Operations(this);
  }
}

// Operation Specifications

export {
  SourceControlConfigurationClient,
  SourceControlConfigurationClientContext,
  Models as SourceControlConfigurationModels,
  Mappers as SourceControlConfigurationMappers
};
export * from "./operations";
