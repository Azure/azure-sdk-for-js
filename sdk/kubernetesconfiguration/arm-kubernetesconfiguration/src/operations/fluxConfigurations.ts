/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { FluxConfigurations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SourceControlConfigurationClient } from "../sourceControlConfigurationClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  FluxConfiguration,
  FluxConfigurationsListNextOptionalParams,
  FluxConfigurationsListOptionalParams,
  FluxConfigurationsListResponse,
  FluxConfigurationsGetOptionalParams,
  FluxConfigurationsGetResponse,
  FluxConfigurationsCreateOrUpdateOptionalParams,
  FluxConfigurationsCreateOrUpdateResponse,
  FluxConfigurationPatch,
  FluxConfigurationsUpdateOptionalParams,
  FluxConfigurationsUpdateResponse,
  FluxConfigurationsDeleteOptionalParams,
  FluxConfigurationsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing FluxConfigurations operations. */
export class FluxConfigurationsImpl implements FluxConfigurations {
  private readonly client: SourceControlConfigurationClient;

  /**
   * Initialize a new instance of the class FluxConfigurations class.
   * @param client Reference to the service client
   */
  constructor(client: SourceControlConfigurationClient) {
    this.client = client;
  }

  /**
   * List all Flux Configurations.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
   *                  Microsoft.HybridContainerService.
   * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
   *                            connectedClusters, provisionedClusters.
   * @param clusterName The name of the kubernetes cluster.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    options?: FluxConfigurationsListOptionalParams
  ): PagedAsyncIterableIterator<FluxConfiguration> {
    const iter = this.listPagingAll(
      resourceGroupName,
      clusterRp,
      clusterResourceName,
      clusterName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          clusterRp,
          clusterResourceName,
          clusterName,
          options,
          settings
        );
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    options?: FluxConfigurationsListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<FluxConfiguration[]> {
    let result: FluxConfigurationsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    options?: FluxConfigurationsListOptionalParams
  ): AsyncIterableIterator<FluxConfiguration> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      clusterRp,
      clusterResourceName,
      clusterName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets details of the Flux Configuration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
   *                  Microsoft.HybridContainerService.
   * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
   *                            connectedClusters, provisionedClusters.
   * @param clusterName The name of the kubernetes cluster.
   * @param fluxConfigurationName Name of the Flux Configuration.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    fluxConfigurationName: string,
    options?: FluxConfigurationsGetOptionalParams
  ): Promise<FluxConfigurationsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        fluxConfigurationName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Create a new Kubernetes Flux Configuration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
   *                  Microsoft.HybridContainerService.
   * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
   *                            connectedClusters, provisionedClusters.
   * @param clusterName The name of the kubernetes cluster.
   * @param fluxConfigurationName Name of the Flux Configuration.
   * @param fluxConfiguration Properties necessary to Create a FluxConfiguration.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    fluxConfigurationName: string,
    fluxConfiguration: FluxConfiguration,
    options?: FluxConfigurationsCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<FluxConfigurationsCreateOrUpdateResponse>,
      FluxConfigurationsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<FluxConfigurationsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        fluxConfigurationName,
        fluxConfiguration,
        options
      },
      createOrUpdateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a new Kubernetes Flux Configuration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
   *                  Microsoft.HybridContainerService.
   * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
   *                            connectedClusters, provisionedClusters.
   * @param clusterName The name of the kubernetes cluster.
   * @param fluxConfigurationName Name of the Flux Configuration.
   * @param fluxConfiguration Properties necessary to Create a FluxConfiguration.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    fluxConfigurationName: string,
    fluxConfiguration: FluxConfiguration,
    options?: FluxConfigurationsCreateOrUpdateOptionalParams
  ): Promise<FluxConfigurationsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      clusterRp,
      clusterResourceName,
      clusterName,
      fluxConfigurationName,
      fluxConfiguration,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Update an existing Kubernetes Flux Configuration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
   *                  Microsoft.HybridContainerService.
   * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
   *                            connectedClusters, provisionedClusters.
   * @param clusterName The name of the kubernetes cluster.
   * @param fluxConfigurationName Name of the Flux Configuration.
   * @param fluxConfigurationPatch Properties to Patch in an existing Flux Configuration.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    fluxConfigurationName: string,
    fluxConfigurationPatch: FluxConfigurationPatch,
    options?: FluxConfigurationsUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<FluxConfigurationsUpdateResponse>,
      FluxConfigurationsUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<FluxConfigurationsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        fluxConfigurationName,
        fluxConfigurationPatch,
        options
      },
      updateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update an existing Kubernetes Flux Configuration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
   *                  Microsoft.HybridContainerService.
   * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
   *                            connectedClusters, provisionedClusters.
   * @param clusterName The name of the kubernetes cluster.
   * @param fluxConfigurationName Name of the Flux Configuration.
   * @param fluxConfigurationPatch Properties to Patch in an existing Flux Configuration.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    fluxConfigurationName: string,
    fluxConfigurationPatch: FluxConfigurationPatch,
    options?: FluxConfigurationsUpdateOptionalParams
  ): Promise<FluxConfigurationsUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      clusterRp,
      clusterResourceName,
      clusterName,
      fluxConfigurationName,
      fluxConfigurationPatch,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * This will delete the YAML file used to set up the Flux Configuration, thus stopping future sync from
   * the source repo.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
   *                  Microsoft.HybridContainerService.
   * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
   *                            connectedClusters, provisionedClusters.
   * @param clusterName The name of the kubernetes cluster.
   * @param fluxConfigurationName Name of the Flux Configuration.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    fluxConfigurationName: string,
    options?: FluxConfigurationsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        fluxConfigurationName,
        options
      },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * This will delete the YAML file used to set up the Flux Configuration, thus stopping future sync from
   * the source repo.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
   *                  Microsoft.HybridContainerService.
   * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
   *                            connectedClusters, provisionedClusters.
   * @param clusterName The name of the kubernetes cluster.
   * @param fluxConfigurationName Name of the Flux Configuration.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    fluxConfigurationName: string,
    options?: FluxConfigurationsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      clusterRp,
      clusterResourceName,
      clusterName,
      fluxConfigurationName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * List all Flux Configurations.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
   *                  Microsoft.HybridContainerService.
   * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
   *                            connectedClusters, provisionedClusters.
   * @param clusterName The name of the kubernetes cluster.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    options?: FluxConfigurationsListOptionalParams
  ): Promise<FluxConfigurationsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        options
      },
      listOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
   *                  Microsoft.HybridContainerService.
   * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
   *                            connectedClusters, provisionedClusters.
   * @param clusterName The name of the kubernetes cluster.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    clusterRp: string,
    clusterResourceName: string,
    clusterName: string,
    nextLink: string,
    options?: FluxConfigurationsListNextOptionalParams
  ): Promise<FluxConfigurationsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        nextLink,
        options
      },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/fluxConfigurations/{fluxConfigurationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FluxConfiguration
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterRp,
    Parameters.clusterResourceName,
    Parameters.clusterName,
    Parameters.fluxConfigurationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/fluxConfigurations/{fluxConfigurationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.FluxConfiguration
    },
    201: {
      bodyMapper: Mappers.FluxConfiguration
    },
    202: {
      bodyMapper: Mappers.FluxConfiguration
    },
    204: {
      bodyMapper: Mappers.FluxConfiguration
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.fluxConfiguration,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterRp,
    Parameters.clusterResourceName,
    Parameters.clusterName,
    Parameters.fluxConfigurationName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/fluxConfigurations/{fluxConfigurationName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.FluxConfiguration
    },
    201: {
      bodyMapper: Mappers.FluxConfiguration
    },
    202: {
      bodyMapper: Mappers.FluxConfiguration
    },
    204: {
      bodyMapper: Mappers.FluxConfiguration
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.fluxConfigurationPatch,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterRp,
    Parameters.clusterResourceName,
    Parameters.clusterName,
    Parameters.fluxConfigurationName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/fluxConfigurations/{fluxConfigurationName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.forceDelete],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterRp,
    Parameters.clusterResourceName,
    Parameters.clusterName,
    Parameters.fluxConfigurationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/fluxConfigurations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FluxConfigurationsList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterRp,
    Parameters.clusterResourceName,
    Parameters.clusterName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FluxConfigurationsList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterRp,
    Parameters.clusterResourceName,
    Parameters.clusterName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
