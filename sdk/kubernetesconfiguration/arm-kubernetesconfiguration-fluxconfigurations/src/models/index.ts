/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Parameters to reconcile to the GitRepository source kind type. */
export interface GitRepositoryDefinition {
  /** The URL to sync for the flux configuration git repository. */
  url?: string;
  /** The maximum time to attempt to reconcile the cluster git repository source with the remote. */
  timeoutInSeconds?: number;
  /** The interval at which to re-reconcile the cluster git repository source with the remote. */
  syncIntervalInSeconds?: number;
  /** The source reference for the GitRepository object. */
  repositoryRef?: RepositoryRefDefinition;
  /** Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH */
  sshKnownHosts?: string;
  /** Plaintext HTTPS username used to access private git repositories over HTTPS */
  httpsUser?: string;
  /** Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS */
  httpsCACert?: string;
  /** Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets. */
  localAuthRef?: string;
  /** Name of the provider used for authentication. */
  provider?: ProviderType;
}

/** The source reference for the GitRepository object. */
export interface RepositoryRefDefinition {
  /** The git repository branch name to checkout. */
  branch?: string;
  /** The git repository tag name to checkout. This takes precedence over branch. */
  tag?: string;
  /** The semver range used to match against git repository tags. This takes precedence over tag. */
  semver?: string;
  /** The commit SHA to checkout. This value must be combined with the branch name to be valid. This takes precedence over semver. */
  commit?: string;
}

/** Parameters to reconcile to the Bucket source kind type. */
export interface BucketDefinition {
  /** The URL to sync for the flux configuration S3 bucket. */
  url?: string;
  /** The bucket name to sync from the url endpoint for the flux configuration. */
  bucketName?: string;
  /** Specify whether to use insecure communication when puling data from the S3 bucket. */
  insecure?: boolean;
  /** The maximum time to attempt to reconcile the cluster bucket source with the remote. */
  timeoutInSeconds?: number;
  /** The interval at which to re-reconcile the cluster bucket source with the remote. */
  syncIntervalInSeconds?: number;
  /** Plaintext access key used to securely access the S3 bucket */
  accessKey?: string;
  /** Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets. */
  localAuthRef?: string;
}

/** Parameters to reconcile to the AzureBlob source kind type. */
export interface AzureBlobDefinition {
  /** The URL to sync for the flux configuration Azure Blob storage account. */
  url?: string;
  /** The Azure Blob container name to sync from the url endpoint for the flux configuration. */
  containerName?: string;
  /** The maximum time to attempt to reconcile the cluster Azure Blob source with the remote. */
  timeoutInSeconds?: number;
  /** The interval at which to re-reconcile the cluster Azure Blob source with the remote. */
  syncIntervalInSeconds?: number;
  /** Parameters to authenticate using Service Principal. */
  servicePrincipal?: ServicePrincipalDefinition;
  /** The account key (shared key) to access the storage account */
  accountKey?: string;
  /** The Shared Access token to access the storage container */
  sasToken?: string;
  /** Parameters to authenticate using a Managed Identity. */
  managedIdentity?: ManagedIdentityDefinition;
  /** Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets. */
  localAuthRef?: string;
}

/** Parameters to authenticate using Service Principal. */
export interface ServicePrincipalDefinition {
  /** The client Id for authenticating a Service Principal. */
  clientId?: string;
  /** The tenant Id for authenticating a Service Principal */
  tenantId?: string;
  /** The client secret for authenticating a Service Principal */
  clientSecret?: string;
  /** Base64-encoded certificate used to authenticate a Service Principal */
  clientCertificate?: string;
  /** The password for the certificate used to authenticate a Service Principal */
  clientCertificatePassword?: string;
  /** Specifies whether to include x5c header in client claims when acquiring a token to enable subject name / issuer based authentication for the Client Certificate */
  clientCertificateSendChain?: boolean;
}

/** Parameters to authenticate using a Managed Identity. */
export interface ManagedIdentityDefinition {
  /** The client Id for authenticating a Managed Identity. */
  clientId?: string;
}

/** Parameters to reconcile to the OCIRepository source kind type. */
export interface OCIRepositoryDefinition {
  /** The URL to sync for the flux configuration OCI repository. */
  url?: string;
  /** The maximum time to attempt to reconcile the cluster OCI repository source with the remote. */
  timeoutInSeconds?: number;
  /** The interval at which to re-reconcile the cluster OCI repository source with the remote. */
  syncIntervalInSeconds?: number;
  /** The source reference for the OCIRepository object. */
  repositoryRef?: OCIRepositoryRefDefinition;
  /** The layer to be pulled from the OCI artifact. */
  layerSelector?: LayerSelectorDefinition;
  /** Verification of the authenticity of an OCI Artifact. */
  verify?: VerifyDefinition;
  /** Specify whether to allow connecting to a non-TLS HTTP container registry. */
  insecure?: boolean;
  /** Specifies whether to use Workload Identity to authenticate with the OCI repository. */
  useWorkloadIdentity?: boolean;
  /** The service account name to authenticate with the OCI repository. */
  serviceAccountName?: string;
  /** Parameters to authenticate using TLS config for OCI repository. */
  tlsConfig?: TlsConfigDefinition;
  /** Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets. */
  localAuthRef?: string;
}

/** The source reference for the OCIRepository object. */
export interface OCIRepositoryRefDefinition {
  /** The OCI repository image tag name to pull. This defaults to 'latest'. */
  tag?: string;
  /** The semver range used to match against OCI repository tags. This takes precedence over tag. */
  semver?: string;
  /** The image digest to pull from OCI repository, the value should be in the format ‘sha256:’. This takes precedence over semver. */
  digest?: string;
}

/** Parameters to specify which layer to pull from the OCI artifact. By default, the first layer in the artifact is pulled. */
export interface LayerSelectorDefinition {
  /** The first layer matching the specified media type will be used. */
  mediaType?: string;
  /** The operation to be performed on the selected layer. The default value is 'extract', but it can be set to 'copy'. */
  operation?: OperationType;
}

/** Parameters to verify the authenticity of an OCI Artifact. */
export interface VerifyDefinition {
  /** Verification provider name. */
  provider?: string;
  /** An object containing trusted public keys of trusted authors. */
  verificationConfig?: { [propertyName: string]: string };
  /** Array defining the criteria for matching the identity while verifying an OCI artifact. */
  matchOidcIdentity?: (MatchOidcIdentityDefinition | null)[];
}

/** MatchOIDCIdentity defines the criteria for matching the identity while verifying an OCI artifact. */
export interface MatchOidcIdentityDefinition {
  /** The regex pattern to match against to verify the OIDC issuer. */
  issuer?: string;
  /** The regex pattern to match against to verify the identity subject. */
  subject?: string;
}

/** Parameters to authenticate using TLS config for OCI repository. */
export interface TlsConfigDefinition {
  /** Base64-encoded certificate used to authenticate a client with the OCI repository. */
  clientCertificate?: string;
  /** Base64-encoded private key used to authenticate a client with the OCI repository. */
  privateKey?: string;
  /** Base64-encoded CA certificate used to verify the server. */
  caCertificate?: string;
}

/** The Kustomization defining how to reconcile the artifact pulled by the source type on the cluster. */
export interface KustomizationDefinition {
  /**
   * Name of the Kustomization, matching the key in the Kustomizations object map.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /** The path in the source reference to reconcile on the cluster. */
  path?: string;
  /** Specifies other Kustomizations that this Kustomization depends on. This Kustomization will not reconcile until all dependencies have completed their reconciliation. */
  dependsOn?: string[];
  /** The maximum time to attempt to reconcile the Kustomization on the cluster. */
  timeoutInSeconds?: number;
  /** The interval at which to re-reconcile the Kustomization on the cluster. */
  syncIntervalInSeconds?: number;
  /** The interval at which to re-reconcile the Kustomization on the cluster in the event of failure on reconciliation. */
  retryIntervalInSeconds?: number;
  /** Enable/disable garbage collections of Kubernetes objects created by this Kustomization. */
  prune?: boolean;
  /** Enable/disable re-creating Kubernetes resources on the cluster when patching fails due to an immutable field change. */
  force?: boolean;
  /** Enable/disable health check for all Kubernetes objects created by this Kustomization. */
  wait?: boolean;
  /** Used for variable substitution for this Kustomization after kustomize build. */
  postBuild?: PostBuildDefinition;
}

/** The postBuild definitions defining variable substitutions for this Kustomization after kustomize build. */
export interface PostBuildDefinition {
  /** Key/value pairs holding the variables to be substituted in this Kustomization. */
  substitute?: { [propertyName: string]: string };
  /** Array of ConfigMaps/Secrets from which the variables are substituted for this Kustomization. */
  substituteFrom?: (SubstituteFromDefinition | null)[];
}

/** Array of ConfigMaps/Secrets from which the variables are substituted for this Kustomization. */
export interface SubstituteFromDefinition {
  /** Define whether it is ConfigMap or Secret that holds the variables to be used in substitution. */
  kind?: string;
  /** Name of the ConfigMap/Secret that holds the variables to be used in substitution. */
  name?: string;
  /** Set to True to proceed without ConfigMap/Secret, if it is not present. */
  optional?: boolean;
}

/** Statuses of objects deployed by the user-specified kustomizations from the git repository. */
export interface ObjectStatusDefinition {
  /** Name of the applied object */
  name?: string;
  /** Namespace of the applied object */
  namespace?: string;
  /** Kind of the applied object */
  kind?: string;
  /** Compliance state of the applied object showing whether the applied object has come into a ready state on the cluster. */
  complianceState?: FluxComplianceState;
  /** Object reference to the Kustomization that applied this object */
  appliedBy?: ObjectReferenceDefinition;
  /** List of Kubernetes object status conditions present on the cluster */
  statusConditions?: ObjectStatusConditionDefinition[];
  /** Additional properties that are provided from objects of the HelmRelease kind */
  helmReleaseProperties?: HelmReleasePropertiesDefinition;
}

/** Object reference to a Kubernetes object on a cluster */
export interface ObjectReferenceDefinition {
  /** Name of the object */
  name?: string;
  /** Namespace of the object */
  namespace?: string;
}

/** Status condition of Kubernetes object */
export interface ObjectStatusConditionDefinition {
  /** Last time this status condition has changed */
  lastTransitionTime?: Date;
  /** A more verbose description of the object status condition */
  message?: string;
  /** Reason for the specified status condition type status */
  reason?: string;
  /** Status of the Kubernetes object condition type */
  status?: string;
  /** Object status condition type for this object */
  type?: string;
}

/** Properties for HelmRelease objects */
export interface HelmReleasePropertiesDefinition {
  /** The revision number of the last released object change */
  lastRevisionApplied?: number;
  /** The reference to the HelmChart object used as the source to this HelmRelease */
  helmChartRef?: ObjectReferenceDefinition;
  /** Total number of times that the HelmRelease failed to install or upgrade */
  failureCount?: number;
  /** Number of times that the HelmRelease failed to install */
  installFailureCount?: number;
  /** Number of times that the HelmRelease failed to upgrade */
  upgradeFailureCount?: number;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** The Flux Configuration Patch Request object. */
export interface FluxConfigurationPatch {
  /** Source Kind to pull the configuration data from. */
  sourceKind?: SourceKindType;
  /** Whether this configuration should suspend its reconciliation of its kustomizations and sources. */
  suspend?: boolean;
  /** Parameters to reconcile to the GitRepository source kind type. */
  gitRepository?: GitRepositoryPatchDefinition;
  /** Parameters to reconcile to the Bucket source kind type. */
  bucket?: BucketPatchDefinition;
  /** Parameters to reconcile to the AzureBlob source kind type. */
  azureBlob?: AzureBlobPatchDefinition;
  /** Parameters to reconcile to the OCIRepository source kind type. */
  ociRepository?: OCIRepositoryPatchDefinition;
  /** Array of kustomizations used to reconcile the artifact pulled by the source type on the cluster. */
  kustomizations?: {
    [propertyName: string]: KustomizationPatchDefinition | null;
  };
  /** Key-value pairs of protected configuration settings for the configuration */
  configurationProtectedSettings?: { [propertyName: string]: string };
}

/** Parameters to reconcile to the GitRepository source kind type. */
export interface GitRepositoryPatchDefinition {
  /** The URL to sync for the flux configuration git repository. */
  url?: string;
  /** The maximum time to attempt to reconcile the cluster git repository source with the remote. */
  timeoutInSeconds?: number;
  /** The interval at which to re-reconcile the cluster git repository source with the remote. */
  syncIntervalInSeconds?: number;
  /** The source reference for the GitRepository object. */
  repositoryRef?: RepositoryRefDefinition;
  /** Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH */
  sshKnownHosts?: string;
  /** Plaintext HTTPS username used to access private git repositories over HTTPS */
  httpsUser?: string;
  /** Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS */
  httpsCACert?: string;
  /** Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets. */
  localAuthRef?: string;
  /** Name of the provider used for authentication. */
  provider?: ProviderType;
}

/** Parameters to reconcile to the Bucket source kind type. */
export interface BucketPatchDefinition {
  /** The URL to sync for the flux configuration S3 bucket. */
  url?: string;
  /** The bucket name to sync from the url endpoint for the flux configuration. */
  bucketName?: string;
  /** Specify whether to use insecure communication when puling data from the S3 bucket. */
  insecure?: boolean;
  /** The maximum time to attempt to reconcile the cluster bucket source with the remote. */
  timeoutInSeconds?: number;
  /** The interval at which to re-reconcile the cluster bucket source with the remote. */
  syncIntervalInSeconds?: number;
  /** Plaintext access key used to securely access the S3 bucket */
  accessKey?: string;
  /** Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets. */
  localAuthRef?: string;
}

/** Parameters to reconcile to the AzureBlob source kind type. */
export interface AzureBlobPatchDefinition {
  /** The URL to sync for the flux configuration Azure Blob storage account. */
  url?: string;
  /** The Azure Blob container name to sync from the url endpoint for the flux configuration. */
  containerName?: string;
  /** The maximum time to attempt to reconcile the cluster Azure Blob source with the remote. */
  timeoutInSeconds?: number;
  /** The interval at which to re-reconcile the cluster Azure Blob source with the remote. */
  syncIntervalInSeconds?: number;
  /** Parameters to authenticate using Service Principal. */
  servicePrincipal?: ServicePrincipalPatchDefinition;
  /** The account key (shared key) to access the storage account */
  accountKey?: string;
  /** The Shared Access token to access the storage container */
  sasToken?: string;
  /** Parameters to authenticate using a Managed Identity. */
  managedIdentity?: ManagedIdentityPatchDefinition;
  /** Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets. */
  localAuthRef?: string;
}

/** Parameters to authenticate using Service Principal. */
export interface ServicePrincipalPatchDefinition {
  /** The client Id for authenticating a Service Principal. */
  clientId?: string;
  /** The tenant Id for authenticating a Service Principal */
  tenantId?: string;
  /** The client secret for authenticating a Service Principal */
  clientSecret?: string;
  /** Base64-encoded certificate used to authenticate a Service Principal */
  clientCertificate?: string;
  /** The password for the certificate used to authenticate a Service Principal */
  clientCertificatePassword?: string;
  /** Specifies whether to include x5c header in client claims when acquiring a token to enable subject name / issuer based authentication for the Client Certificate */
  clientCertificateSendChain?: boolean;
}

/** Parameters to authenticate using a Managed Identity. */
export interface ManagedIdentityPatchDefinition {
  /** The client Id for authenticating a Managed Identity. */
  clientId?: string;
}

/** Parameters to reconcile to the OCIRepository source kind type. */
export interface OCIRepositoryPatchDefinition {
  /** The URL to sync for the flux configuration OCI repository. */
  url?: string;
  /** The maximum time to attempt to reconcile the cluster OCI repository source with the remote. */
  timeoutInSeconds?: number;
  /** The interval at which to re-reconcile the cluster OCI repository source with the remote. */
  syncIntervalInSeconds?: number;
  /** The source reference for the OCIRepository object. */
  repositoryRef?: OCIRepositoryRefPatchDefinition;
  /** The layer to be pulled from the OCI artifact. */
  layerSelector?: LayerSelectorPatchDefinition;
  /** Verification of the authenticity of an OCI Artifact. */
  verify?: VerifyPatchDefinition;
  /** Specify whether to allow connecting to a non-TLS HTTP container registry. */
  insecure?: boolean;
  /** Specifies whether to use Workload Identity to authenticate with the OCI repository. */
  useWorkloadIdentity?: boolean;
  /** The service account name to authenticate with the OCI repository. */
  serviceAccountName?: string;
  /** Parameters to authenticate using TLS config for OCI repository. */
  tlsConfig?: TlsConfigPatchDefinition;
  /** Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets. */
  localAuthRef?: string;
}

/** The source reference for the OCIRepository object. */
export interface OCIRepositoryRefPatchDefinition {
  /** The OCI repository image tag name to pull. This defaults to 'latest'. */
  tag?: string;
  /** The semver range used to match against OCI repository tags. This takes precedence over tag. */
  semver?: string;
  /** The image digest to pull from OCI repository, the value should be in the format ‘sha256:’. This takes precedence over semver. */
  digest?: string;
}

/** Parameters to specify which layer to pull from the OCI artifact. By default, the first layer in the artifact is pulled. */
export interface LayerSelectorPatchDefinition {
  /** The first layer matching the specified media type will be used. */
  mediaType?: string;
  /** The operation to be performed on the selected layer. The default value is 'extract', but it can be set to 'copy'. */
  operation?: OperationType;
}

/** Parameters to verify the authenticity of an OCI Artifact. */
export interface VerifyPatchDefinition {
  /** Verification provider name. */
  provider?: string;
  /** An object containing trusted public keys of trusted authors. */
  verificationConfig?: { [propertyName: string]: string };
  /** Array defining the criteria for matching the OIDC identity while verifying an OCI artifact. */
  matchOidcIdentity?: (MatchOidcIdentityPatchDefinition | null)[];
}

/** MatchOIDCIdentity defines the criteria for matching the identity while verifying an OCI artifact. */
export interface MatchOidcIdentityPatchDefinition {
  /** The regex pattern to match against to verify the OIDC issuer. */
  issuer?: string;
  /** The regex pattern to match against to verify the identity subject. */
  subject?: string;
}

/** Parameters to authenticate using TLS config for OCI repository. */
export interface TlsConfigPatchDefinition {
  /** Base64-encoded certificate used to authenticate a client with the OCI repository. */
  clientCertificate?: string;
  /** Base64-encoded private key used to authenticate a client with the OCI repository. */
  privateKey?: string;
  /** Base64-encoded CA certificate used to verify the server. */
  caCertificate?: string;
}

/** The Kustomization defining how to reconcile the artifact pulled by the source type on the cluster. */
export interface KustomizationPatchDefinition {
  /** The path in the source reference to reconcile on the cluster. */
  path?: string;
  /** Specifies other Kustomizations that this Kustomization depends on. This Kustomization will not reconcile until all dependencies have completed their reconciliation. */
  dependsOn?: string[];
  /** The maximum time to attempt to reconcile the Kustomization on the cluster. */
  timeoutInSeconds?: number;
  /** The interval at which to re-reconcile the Kustomization on the cluster. */
  syncIntervalInSeconds?: number;
  /** The interval at which to re-reconcile the Kustomization on the cluster in the event of failure on reconciliation. */
  retryIntervalInSeconds?: number;
  /** Enable/disable garbage collections of Kubernetes objects created by this Kustomization. */
  prune?: boolean;
  /** Enable/disable re-creating Kubernetes resources on the cluster when patching fails due to an immutable field change. */
  force?: boolean;
  /** Enable/disable health check for all Kubernetes objects created by this Kustomization. */
  wait?: boolean;
  /** Used for variable substitution for this Kustomization after kustomize build. */
  postBuild?: PostBuildPatchDefinition;
}

/** The postBuild definitions defining variable substitutions for this Kustomization after kustomize build. */
export interface PostBuildPatchDefinition {
  /** Key/value pairs holding the variables to be substituted in this Kustomization. */
  substitute?: { [propertyName: string]: string };
  /** Array of ConfigMaps/Secrets from which the variables are substituted for this Kustomization. */
  substituteFrom?: (SubstituteFromPatchDefinition | null)[];
}

/** Array of ConfigMaps/Secrets from which the variables are substituted for this Kustomization. */
export interface SubstituteFromPatchDefinition {
  /** Define whether it is ConfigMap or Secret that holds the variables to be used in substitution. */
  kind?: string;
  /** Name of the ConfigMap/Secret that holds the variables to be used in substitution. */
  name?: string;
  /** Set to True to proceed without ConfigMap/Secret, if it is not present. */
  optional?: boolean;
}

/** Result of the request to list Flux Configurations.  It contains a list of FluxConfiguration objects and a URL link to get the next set of results. */
export interface FluxConfigurationsList {
  /**
   * List of Flux Configurations within a Kubernetes cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: FluxConfiguration[];
  /**
   * URL to get the next set of configuration objects, if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The current status of an async operation. */
export interface OperationStatusResult {
  /** Fully qualified ID for the async operation. */
  id?: string;
  /** Name of the async operation. */
  name?: string;
  /** Operation status. */
  status: string;
  /** Additional information, if available. */
  properties?: { [propertyName: string]: string };
  /**
   * If present, details of the operation error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: ErrorDetail;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** The Flux Configuration object returned in Get & Put response. */
export interface FluxConfiguration extends ProxyResource {
  /**
   * Top level metadata https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/common-api-contracts.md#system-metadata-for-all-azure-resources
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Scope at which the operator will be installed. */
  scope?: ScopeType;
  /** The namespace to which this configuration is installed to. Maximum of 253 lower case alphanumeric characters, hyphen and period only. */
  namespace?: string;
  /** Source Kind to pull the configuration data from. */
  sourceKind?: SourceKindType;
  /** Whether this configuration should suspend its reconciliation of its kustomizations and sources. */
  suspend?: boolean;
  /** Parameters to reconcile to the GitRepository source kind type. */
  gitRepository?: GitRepositoryDefinition;
  /** Parameters to reconcile to the Bucket source kind type. */
  bucket?: BucketDefinition;
  /** Parameters to reconcile to the AzureBlob source kind type. */
  azureBlob?: AzureBlobDefinition;
  /** Parameters to reconcile to the OCIRepository source kind type. */
  ociRepository?: OCIRepositoryDefinition;
  /** Array of kustomizations used to reconcile the artifact pulled by the source type on the cluster. */
  kustomizations?: { [propertyName: string]: KustomizationDefinition | null };
  /** Key-value pairs of protected configuration settings for the configuration */
  configurationProtectedSettings?: { [propertyName: string]: string };
  /**
   * Statuses of the Flux Kubernetes resources created by the fluxConfiguration or created by the managed objects provisioned by the fluxConfiguration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statuses?: (ObjectStatusDefinition | null)[];
  /**
   * Public Key associated with this fluxConfiguration (either generated within the cluster or provided by the user).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly repositoryPublicKey?: string;
  /**
   * Branch and/or SHA of the source commit synced with the cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceSyncedCommitId?: string;
  /**
   * Datetime the fluxConfiguration synced its source on the cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceUpdatedAt?: Date;
  /**
   * Datetime the fluxConfiguration synced its status on the cluster with Azure.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusUpdatedAt?: Date;
  /** Whether flux configuration deployment should wait for cluster to reconcile the kustomizations. */
  waitForReconciliation?: boolean;
  /** Maximum duration to wait for flux configuration reconciliation. E.g PT1H, PT5M, P1D */
  reconciliationWaitDuration?: string;
  /**
   * Combined status of the Flux Kubernetes resources created by the fluxConfiguration or created by the managed objects.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly complianceState?: FluxComplianceState;
  /**
   * Status of the creation of the fluxConfiguration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Error message returned to the user in the case of provisioning failure.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorMessage?: string;
}

/** Known values of {@link ScopeType} that the service accepts. */
export enum KnownScopeType {
  /** Cluster */
  Cluster = "cluster",
  /** Namespace */
  Namespace = "namespace",
}

/**
 * Defines values for ScopeType. \
 * {@link KnownScopeType} can be used interchangeably with ScopeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **cluster** \
 * **namespace**
 */
export type ScopeType = string;

/** Known values of {@link SourceKindType} that the service accepts. */
export enum KnownSourceKindType {
  /** GitRepository */
  GitRepository = "GitRepository",
  /** Bucket */
  Bucket = "Bucket",
  /** AzureBlob */
  AzureBlob = "AzureBlob",
  /** OCIRepository */
  OCIRepository = "OCIRepository",
}

/**
 * Defines values for SourceKindType. \
 * {@link KnownSourceKindType} can be used interchangeably with SourceKindType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **GitRepository** \
 * **Bucket** \
 * **AzureBlob** \
 * **OCIRepository**
 */
export type SourceKindType = string;

/** Known values of {@link ProviderType} that the service accepts. */
export enum KnownProviderType {
  /** Azure provider can be used to authenticate to Azure DevOps repositories using Managed Identity. */
  Azure = "Azure",
  /** GitHub provider can be used to authenticate */
  GitHub = "GitHub",
  /** Generic is the default provider that indicates secret-based authentication mechanism. */
  Generic = "Generic",
}

/**
 * Defines values for ProviderType. \
 * {@link KnownProviderType} can be used interchangeably with ProviderType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Azure**: Azure provider can be used to authenticate to Azure DevOps repositories using Managed Identity. \
 * **GitHub**: GitHub provider can be used to authenticate  \
 * **Generic**: Generic is the default provider that indicates secret-based authentication mechanism.
 */
export type ProviderType = string;

/** Known values of {@link OperationType} that the service accepts. */
export enum KnownOperationType {
  /** Extract */
  Extract = "extract",
  /** Copy */
  Copy = "copy",
}

/**
 * Defines values for OperationType. \
 * {@link KnownOperationType} can be used interchangeably with OperationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **extract** \
 * **copy**
 */
export type OperationType = string;

/** Known values of {@link FluxComplianceState} that the service accepts. */
export enum KnownFluxComplianceState {
  /** Compliant */
  Compliant = "Compliant",
  /** NonCompliant */
  NonCompliant = "Non-Compliant",
  /** Pending */
  Pending = "Pending",
  /** Suspended */
  Suspended = "Suspended",
  /** Unknown */
  Unknown = "Unknown",
}

/**
 * Defines values for FluxComplianceState. \
 * {@link KnownFluxComplianceState} can be used interchangeably with FluxComplianceState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Compliant** \
 * **Non-Compliant** \
 * **Pending** \
 * **Suspended** \
 * **Unknown**
 */
export type FluxComplianceState = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Deleting */
  Deleting = "Deleting",
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Creating** \
 * **Updating** \
 * **Deleting**
 */
export type ProvisioningState = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key",
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link KustomizationValidationType} that the service accepts. */
export enum KnownKustomizationValidationType {
  /** None */
  None = "none",
  /** Client */
  Client = "client",
  /** Server */
  Server = "server",
}

/**
 * Defines values for KustomizationValidationType. \
 * {@link KnownKustomizationValidationType} can be used interchangeably with KustomizationValidationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **none** \
 * **client** \
 * **server**
 */
export type KustomizationValidationType = string;

/** Optional parameters. */
export interface FluxConfigurationsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type FluxConfigurationsGetResponse = FluxConfiguration;

/** Optional parameters. */
export interface FluxConfigurationsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type FluxConfigurationsCreateOrUpdateResponse = FluxConfiguration;

/** Optional parameters. */
export interface FluxConfigurationsUpdateOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type FluxConfigurationsUpdateResponse = FluxConfiguration;

/** Optional parameters. */
export interface FluxConfigurationsDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delete the extension resource in Azure - not the normal asynchronous delete. */
  forceDelete?: boolean;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface FluxConfigurationsListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type FluxConfigurationsListResponse = FluxConfigurationsList;

/** Optional parameters. */
export interface FluxConfigurationsListNextOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type FluxConfigurationsListNextResponse = FluxConfigurationsList;

/** Optional parameters. */
export interface FluxConfigOperationStatusGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type FluxConfigOperationStatusGetResponse = OperationStatusResult;

/** Optional parameters. */
export interface FluxConfigurationClientOptionalParams extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
