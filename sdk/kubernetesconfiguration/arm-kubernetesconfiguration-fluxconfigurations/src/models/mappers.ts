/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const GitRepositoryDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitRepositoryDefinition",
    modelProperties: {
      url: {
        serializedName: "url",
        nullable: true,
        type: {
          name: "String",
        },
      },
      timeoutInSeconds: {
        defaultValue: 600,
        serializedName: "timeoutInSeconds",
        nullable: true,
        type: {
          name: "Number",
        },
      },
      syncIntervalInSeconds: {
        defaultValue: 600,
        serializedName: "syncIntervalInSeconds",
        nullable: true,
        type: {
          name: "Number",
        },
      },
      repositoryRef: {
        serializedName: "repositoryRef",
        type: {
          name: "Composite",
          className: "RepositoryRefDefinition",
        },
      },
      sshKnownHosts: {
        serializedName: "sshKnownHosts",
        nullable: true,
        type: {
          name: "String",
        },
      },
      httpsUser: {
        serializedName: "httpsUser",
        nullable: true,
        type: {
          name: "String",
        },
      },
      httpsCACert: {
        serializedName: "httpsCACert",
        nullable: true,
        type: {
          name: "String",
        },
      },
      localAuthRef: {
        serializedName: "localAuthRef",
        nullable: true,
        type: {
          name: "String",
        },
      },
      provider: {
        serializedName: "provider",
        nullable: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const RepositoryRefDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RepositoryRefDefinition",
    modelProperties: {
      branch: {
        serializedName: "branch",
        nullable: true,
        type: {
          name: "String",
        },
      },
      tag: {
        serializedName: "tag",
        nullable: true,
        type: {
          name: "String",
        },
      },
      semver: {
        serializedName: "semver",
        nullable: true,
        type: {
          name: "String",
        },
      },
      commit: {
        serializedName: "commit",
        nullable: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const BucketDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BucketDefinition",
    modelProperties: {
      url: {
        serializedName: "url",
        type: {
          name: "String",
        },
      },
      bucketName: {
        serializedName: "bucketName",
        type: {
          name: "String",
        },
      },
      insecure: {
        defaultValue: true,
        serializedName: "insecure",
        type: {
          name: "Boolean",
        },
      },
      timeoutInSeconds: {
        defaultValue: 600,
        serializedName: "timeoutInSeconds",
        nullable: true,
        type: {
          name: "Number",
        },
      },
      syncIntervalInSeconds: {
        defaultValue: 600,
        serializedName: "syncIntervalInSeconds",
        nullable: true,
        type: {
          name: "Number",
        },
      },
      accessKey: {
        serializedName: "accessKey",
        nullable: true,
        type: {
          name: "String",
        },
      },
      localAuthRef: {
        serializedName: "localAuthRef",
        nullable: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AzureBlobDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureBlobDefinition",
    modelProperties: {
      url: {
        serializedName: "url",
        nullable: true,
        type: {
          name: "String",
        },
      },
      containerName: {
        serializedName: "containerName",
        nullable: true,
        type: {
          name: "String",
        },
      },
      timeoutInSeconds: {
        defaultValue: 600,
        serializedName: "timeoutInSeconds",
        nullable: true,
        type: {
          name: "Number",
        },
      },
      syncIntervalInSeconds: {
        defaultValue: 600,
        serializedName: "syncIntervalInSeconds",
        nullable: true,
        type: {
          name: "Number",
        },
      },
      servicePrincipal: {
        serializedName: "servicePrincipal",
        type: {
          name: "Composite",
          className: "ServicePrincipalDefinition",
        },
      },
      accountKey: {
        serializedName: "accountKey",
        nullable: true,
        type: {
          name: "String",
        },
      },
      sasToken: {
        serializedName: "sasToken",
        nullable: true,
        type: {
          name: "String",
        },
      },
      managedIdentity: {
        serializedName: "managedIdentity",
        type: {
          name: "Composite",
          className: "ManagedIdentityDefinition",
        },
      },
      localAuthRef: {
        serializedName: "localAuthRef",
        nullable: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ServicePrincipalDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServicePrincipalDefinition",
    modelProperties: {
      clientId: {
        serializedName: "clientId",
        nullable: true,
        type: {
          name: "String",
        },
      },
      tenantId: {
        serializedName: "tenantId",
        nullable: true,
        type: {
          name: "String",
        },
      },
      clientSecret: {
        serializedName: "clientSecret",
        nullable: true,
        type: {
          name: "String",
        },
      },
      clientCertificate: {
        serializedName: "clientCertificate",
        nullable: true,
        type: {
          name: "String",
        },
      },
      clientCertificatePassword: {
        serializedName: "clientCertificatePassword",
        nullable: true,
        type: {
          name: "String",
        },
      },
      clientCertificateSendChain: {
        defaultValue: false,
        serializedName: "clientCertificateSendChain",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const ManagedIdentityDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedIdentityDefinition",
    modelProperties: {
      clientId: {
        serializedName: "clientId",
        nullable: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OCIRepositoryDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OCIRepositoryDefinition",
    modelProperties: {
      url: {
        serializedName: "url",
        nullable: true,
        type: {
          name: "String",
        },
      },
      timeoutInSeconds: {
        defaultValue: 600,
        serializedName: "timeoutInSeconds",
        nullable: true,
        type: {
          name: "Number",
        },
      },
      syncIntervalInSeconds: {
        defaultValue: 600,
        serializedName: "syncIntervalInSeconds",
        nullable: true,
        type: {
          name: "Number",
        },
      },
      repositoryRef: {
        serializedName: "repositoryRef",
        type: {
          name: "Composite",
          className: "OCIRepositoryRefDefinition",
        },
      },
      layerSelector: {
        serializedName: "layerSelector",
        type: {
          name: "Composite",
          className: "LayerSelectorDefinition",
        },
      },
      verify: {
        serializedName: "verify",
        type: {
          name: "Composite",
          className: "VerifyDefinition",
        },
      },
      insecure: {
        defaultValue: false,
        serializedName: "insecure",
        type: {
          name: "Boolean",
        },
      },
      useWorkloadIdentity: {
        defaultValue: false,
        serializedName: "useWorkloadIdentity",
        type: {
          name: "Boolean",
        },
      },
      serviceAccountName: {
        serializedName: "serviceAccountName",
        nullable: true,
        type: {
          name: "String",
        },
      },
      tlsConfig: {
        serializedName: "tlsConfig",
        type: {
          name: "Composite",
          className: "TlsConfigDefinition",
        },
      },
      localAuthRef: {
        serializedName: "localAuthRef",
        nullable: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OCIRepositoryRefDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OCIRepositoryRefDefinition",
    modelProperties: {
      tag: {
        serializedName: "tag",
        nullable: true,
        type: {
          name: "String",
        },
      },
      semver: {
        serializedName: "semver",
        nullable: true,
        type: {
          name: "String",
        },
      },
      digest: {
        serializedName: "digest",
        nullable: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const LayerSelectorDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LayerSelectorDefinition",
    modelProperties: {
      mediaType: {
        serializedName: "mediaType",
        nullable: true,
        type: {
          name: "String",
        },
      },
      operation: {
        serializedName: "operation",
        nullable: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const VerifyDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VerifyDefinition",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String",
        },
      },
      verificationConfig: {
        serializedName: "verificationConfig",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      matchOidcIdentity: {
        serializedName: "matchOidcIdentity",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MatchOidcIdentityDefinition",
            },
          },
        },
      },
    },
  },
};

export const MatchOidcIdentityDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MatchOidcIdentityDefinition",
    modelProperties: {
      issuer: {
        serializedName: "issuer",
        type: {
          name: "String",
        },
      },
      subject: {
        serializedName: "subject",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TlsConfigDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TlsConfigDefinition",
    modelProperties: {
      clientCertificate: {
        serializedName: "clientCertificate",
        nullable: true,
        type: {
          name: "String",
        },
      },
      privateKey: {
        serializedName: "privateKey",
        nullable: true,
        type: {
          name: "String",
        },
      },
      caCertificate: {
        serializedName: "caCertificate",
        nullable: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const KustomizationDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KustomizationDefinition",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      path: {
        defaultValue: "",
        serializedName: "path",
        type: {
          name: "String",
        },
      },
      dependsOn: {
        serializedName: "dependsOn",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      timeoutInSeconds: {
        defaultValue: 600,
        serializedName: "timeoutInSeconds",
        nullable: true,
        type: {
          name: "Number",
        },
      },
      syncIntervalInSeconds: {
        defaultValue: 600,
        serializedName: "syncIntervalInSeconds",
        nullable: true,
        type: {
          name: "Number",
        },
      },
      retryIntervalInSeconds: {
        serializedName: "retryIntervalInSeconds",
        nullable: true,
        type: {
          name: "Number",
        },
      },
      prune: {
        defaultValue: false,
        serializedName: "prune",
        type: {
          name: "Boolean",
        },
      },
      force: {
        defaultValue: false,
        serializedName: "force",
        type: {
          name: "Boolean",
        },
      },
      wait: {
        defaultValue: true,
        serializedName: "wait",
        type: {
          name: "Boolean",
        },
      },
      postBuild: {
        serializedName: "postBuild",
        type: {
          name: "Composite",
          className: "PostBuildDefinition",
        },
      },
    },
  },
};

export const PostBuildDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PostBuildDefinition",
    modelProperties: {
      substitute: {
        serializedName: "substitute",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      substituteFrom: {
        serializedName: "substituteFrom",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubstituteFromDefinition",
            },
          },
        },
      },
    },
  },
};

export const SubstituteFromDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubstituteFromDefinition",
    modelProperties: {
      kind: {
        serializedName: "kind",
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      optional: {
        defaultValue: false,
        serializedName: "optional",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const ObjectStatusDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ObjectStatusDefinition",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      namespace: {
        serializedName: "namespace",
        type: {
          name: "String",
        },
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String",
        },
      },
      complianceState: {
        defaultValue: "Unknown",
        serializedName: "complianceState",
        type: {
          name: "String",
        },
      },
      appliedBy: {
        serializedName: "appliedBy",
        type: {
          name: "Composite",
          className: "ObjectReferenceDefinition",
        },
      },
      statusConditions: {
        serializedName: "statusConditions",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ObjectStatusConditionDefinition",
            },
          },
        },
      },
      helmReleaseProperties: {
        serializedName: "helmReleaseProperties",
        type: {
          name: "Composite",
          className: "HelmReleasePropertiesDefinition",
        },
      },
    },
  },
};

export const ObjectReferenceDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ObjectReferenceDefinition",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      namespace: {
        serializedName: "namespace",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ObjectStatusConditionDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ObjectStatusConditionDefinition",
    modelProperties: {
      lastTransitionTime: {
        serializedName: "lastTransitionTime",
        type: {
          name: "DateTime",
        },
      },
      message: {
        serializedName: "message",
        type: {
          name: "String",
        },
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "status",
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const HelmReleasePropertiesDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HelmReleasePropertiesDefinition",
    modelProperties: {
      lastRevisionApplied: {
        serializedName: "lastRevisionApplied",
        nullable: true,
        type: {
          name: "Number",
        },
      },
      helmChartRef: {
        serializedName: "helmChartRef",
        type: {
          name: "Composite",
          className: "ObjectReferenceDefinition",
        },
      },
      failureCount: {
        serializedName: "failureCount",
        nullable: true,
        type: {
          name: "Number",
        },
      },
      installFailureCount: {
        serializedName: "installFailureCount",
        nullable: true,
        type: {
          name: "Number",
        },
      },
      upgradeFailureCount: {
        serializedName: "upgradeFailureCount",
        nullable: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const FluxConfigurationPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FluxConfigurationPatch",
    modelProperties: {
      sourceKind: {
        serializedName: "properties.sourceKind",
        nullable: true,
        type: {
          name: "String",
        },
      },
      suspend: {
        serializedName: "properties.suspend",
        nullable: true,
        type: {
          name: "Boolean",
        },
      },
      gitRepository: {
        serializedName: "properties.gitRepository",
        type: {
          name: "Composite",
          className: "GitRepositoryPatchDefinition",
        },
      },
      bucket: {
        serializedName: "properties.bucket",
        type: {
          name: "Composite",
          className: "BucketPatchDefinition",
        },
      },
      azureBlob: {
        serializedName: "properties.azureBlob",
        type: {
          name: "Composite",
          className: "AzureBlobPatchDefinition",
        },
      },
      ociRepository: {
        serializedName: "properties.ociRepository",
        type: {
          name: "Composite",
          className: "OCIRepositoryPatchDefinition",
        },
      },
      kustomizations: {
        serializedName: "properties.kustomizations",
        nullable: true,
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "KustomizationPatchDefinition",
            },
          },
        },
      },
      configurationProtectedSettings: {
        serializedName: "properties.configurationProtectedSettings",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const GitRepositoryPatchDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitRepositoryPatchDefinition",
    modelProperties: {
      url: {
        serializedName: "url",
        nullable: true,
        type: {
          name: "String",
        },
      },
      timeoutInSeconds: {
        serializedName: "timeoutInSeconds",
        nullable: true,
        type: {
          name: "Number",
        },
      },
      syncIntervalInSeconds: {
        serializedName: "syncIntervalInSeconds",
        nullable: true,
        type: {
          name: "Number",
        },
      },
      repositoryRef: {
        serializedName: "repositoryRef",
        type: {
          name: "Composite",
          className: "RepositoryRefDefinition",
        },
      },
      sshKnownHosts: {
        serializedName: "sshKnownHosts",
        nullable: true,
        type: {
          name: "String",
        },
      },
      httpsUser: {
        serializedName: "httpsUser",
        nullable: true,
        type: {
          name: "String",
        },
      },
      httpsCACert: {
        serializedName: "httpsCACert",
        nullable: true,
        type: {
          name: "String",
        },
      },
      localAuthRef: {
        serializedName: "localAuthRef",
        nullable: true,
        type: {
          name: "String",
        },
      },
      provider: {
        serializedName: "provider",
        nullable: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const BucketPatchDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BucketPatchDefinition",
    modelProperties: {
      url: {
        serializedName: "url",
        nullable: true,
        type: {
          name: "String",
        },
      },
      bucketName: {
        serializedName: "bucketName",
        nullable: true,
        type: {
          name: "String",
        },
      },
      insecure: {
        serializedName: "insecure",
        nullable: true,
        type: {
          name: "Boolean",
        },
      },
      timeoutInSeconds: {
        serializedName: "timeoutInSeconds",
        nullable: true,
        type: {
          name: "Number",
        },
      },
      syncIntervalInSeconds: {
        serializedName: "syncIntervalInSeconds",
        nullable: true,
        type: {
          name: "Number",
        },
      },
      accessKey: {
        serializedName: "accessKey",
        nullable: true,
        type: {
          name: "String",
        },
      },
      localAuthRef: {
        serializedName: "localAuthRef",
        nullable: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AzureBlobPatchDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureBlobPatchDefinition",
    modelProperties: {
      url: {
        serializedName: "url",
        nullable: true,
        type: {
          name: "String",
        },
      },
      containerName: {
        serializedName: "containerName",
        nullable: true,
        type: {
          name: "String",
        },
      },
      timeoutInSeconds: {
        serializedName: "timeoutInSeconds",
        nullable: true,
        type: {
          name: "Number",
        },
      },
      syncIntervalInSeconds: {
        serializedName: "syncIntervalInSeconds",
        nullable: true,
        type: {
          name: "Number",
        },
      },
      servicePrincipal: {
        serializedName: "servicePrincipal",
        type: {
          name: "Composite",
          className: "ServicePrincipalPatchDefinition",
        },
      },
      accountKey: {
        serializedName: "accountKey",
        nullable: true,
        type: {
          name: "String",
        },
      },
      sasToken: {
        serializedName: "sasToken",
        nullable: true,
        type: {
          name: "String",
        },
      },
      managedIdentity: {
        serializedName: "managedIdentity",
        type: {
          name: "Composite",
          className: "ManagedIdentityPatchDefinition",
        },
      },
      localAuthRef: {
        serializedName: "localAuthRef",
        nullable: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ServicePrincipalPatchDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServicePrincipalPatchDefinition",
    modelProperties: {
      clientId: {
        serializedName: "clientId",
        nullable: true,
        type: {
          name: "String",
        },
      },
      tenantId: {
        serializedName: "tenantId",
        nullable: true,
        type: {
          name: "String",
        },
      },
      clientSecret: {
        serializedName: "clientSecret",
        nullable: true,
        type: {
          name: "String",
        },
      },
      clientCertificate: {
        serializedName: "clientCertificate",
        nullable: true,
        type: {
          name: "String",
        },
      },
      clientCertificatePassword: {
        serializedName: "clientCertificatePassword",
        nullable: true,
        type: {
          name: "String",
        },
      },
      clientCertificateSendChain: {
        serializedName: "clientCertificateSendChain",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const ManagedIdentityPatchDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedIdentityPatchDefinition",
    modelProperties: {
      clientId: {
        serializedName: "clientId",
        nullable: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OCIRepositoryPatchDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OCIRepositoryPatchDefinition",
    modelProperties: {
      url: {
        serializedName: "url",
        nullable: true,
        type: {
          name: "String",
        },
      },
      timeoutInSeconds: {
        serializedName: "timeoutInSeconds",
        nullable: true,
        type: {
          name: "Number",
        },
      },
      syncIntervalInSeconds: {
        serializedName: "syncIntervalInSeconds",
        nullable: true,
        type: {
          name: "Number",
        },
      },
      repositoryRef: {
        serializedName: "repositoryRef",
        type: {
          name: "Composite",
          className: "OCIRepositoryRefPatchDefinition",
        },
      },
      layerSelector: {
        serializedName: "layerSelector",
        type: {
          name: "Composite",
          className: "LayerSelectorPatchDefinition",
        },
      },
      verify: {
        serializedName: "verify",
        type: {
          name: "Composite",
          className: "VerifyPatchDefinition",
        },
      },
      insecure: {
        defaultValue: false,
        serializedName: "insecure",
        type: {
          name: "Boolean",
        },
      },
      useWorkloadIdentity: {
        defaultValue: false,
        serializedName: "useWorkloadIdentity",
        type: {
          name: "Boolean",
        },
      },
      serviceAccountName: {
        serializedName: "serviceAccountName",
        nullable: true,
        type: {
          name: "String",
        },
      },
      tlsConfig: {
        serializedName: "tlsConfig",
        type: {
          name: "Composite",
          className: "TlsConfigPatchDefinition",
        },
      },
      localAuthRef: {
        serializedName: "localAuthRef",
        nullable: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OCIRepositoryRefPatchDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OCIRepositoryRefPatchDefinition",
    modelProperties: {
      tag: {
        serializedName: "tag",
        nullable: true,
        type: {
          name: "String",
        },
      },
      semver: {
        serializedName: "semver",
        nullable: true,
        type: {
          name: "String",
        },
      },
      digest: {
        serializedName: "digest",
        nullable: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const LayerSelectorPatchDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LayerSelectorPatchDefinition",
    modelProperties: {
      mediaType: {
        serializedName: "mediaType",
        nullable: true,
        type: {
          name: "String",
        },
      },
      operation: {
        serializedName: "operation",
        nullable: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const VerifyPatchDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VerifyPatchDefinition",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String",
        },
      },
      verificationConfig: {
        serializedName: "verificationConfig",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      matchOidcIdentity: {
        serializedName: "matchOidcIdentity",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MatchOidcIdentityPatchDefinition",
            },
          },
        },
      },
    },
  },
};

export const MatchOidcIdentityPatchDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MatchOidcIdentityPatchDefinition",
    modelProperties: {
      issuer: {
        serializedName: "issuer",
        type: {
          name: "String",
        },
      },
      subject: {
        serializedName: "subject",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TlsConfigPatchDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TlsConfigPatchDefinition",
    modelProperties: {
      clientCertificate: {
        serializedName: "clientCertificate",
        nullable: true,
        type: {
          name: "String",
        },
      },
      privateKey: {
        serializedName: "privateKey",
        nullable: true,
        type: {
          name: "String",
        },
      },
      caCertificate: {
        serializedName: "caCertificate",
        nullable: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const KustomizationPatchDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KustomizationPatchDefinition",
    modelProperties: {
      path: {
        serializedName: "path",
        nullable: true,
        type: {
          name: "String",
        },
      },
      dependsOn: {
        serializedName: "dependsOn",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      timeoutInSeconds: {
        serializedName: "timeoutInSeconds",
        nullable: true,
        type: {
          name: "Number",
        },
      },
      syncIntervalInSeconds: {
        serializedName: "syncIntervalInSeconds",
        nullable: true,
        type: {
          name: "Number",
        },
      },
      retryIntervalInSeconds: {
        serializedName: "retryIntervalInSeconds",
        nullable: true,
        type: {
          name: "Number",
        },
      },
      prune: {
        serializedName: "prune",
        nullable: true,
        type: {
          name: "Boolean",
        },
      },
      force: {
        serializedName: "force",
        nullable: true,
        type: {
          name: "Boolean",
        },
      },
      wait: {
        serializedName: "wait",
        nullable: true,
        type: {
          name: "Boolean",
        },
      },
      postBuild: {
        serializedName: "postBuild",
        type: {
          name: "Composite",
          className: "PostBuildPatchDefinition",
        },
      },
    },
  },
};

export const PostBuildPatchDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PostBuildPatchDefinition",
    modelProperties: {
      substitute: {
        serializedName: "substitute",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      substituteFrom: {
        serializedName: "substituteFrom",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubstituteFromPatchDefinition",
            },
          },
        },
      },
    },
  },
};

export const SubstituteFromPatchDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubstituteFromPatchDefinition",
    modelProperties: {
      kind: {
        serializedName: "kind",
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      optional: {
        defaultValue: false,
        serializedName: "optional",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const FluxConfigurationsList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FluxConfigurationsList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FluxConfiguration",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationStatusResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationStatusResult",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "String",
        },
      },
      properties: {
        serializedName: "properties",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
    },
  },
};

export const FluxConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FluxConfiguration",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
      scope: {
        defaultValue: "cluster",
        serializedName: "properties.scope",
        type: {
          name: "String",
        },
      },
      namespace: {
        defaultValue: "default",
        serializedName: "properties.namespace",
        type: {
          name: "String",
        },
      },
      sourceKind: {
        serializedName: "properties.sourceKind",
        type: {
          name: "String",
        },
      },
      suspend: {
        defaultValue: false,
        serializedName: "properties.suspend",
        type: {
          name: "Boolean",
        },
      },
      gitRepository: {
        serializedName: "properties.gitRepository",
        type: {
          name: "Composite",
          className: "GitRepositoryDefinition",
        },
      },
      bucket: {
        serializedName: "properties.bucket",
        type: {
          name: "Composite",
          className: "BucketDefinition",
        },
      },
      azureBlob: {
        serializedName: "properties.azureBlob",
        type: {
          name: "Composite",
          className: "AzureBlobDefinition",
        },
      },
      ociRepository: {
        serializedName: "properties.ociRepository",
        type: {
          name: "Composite",
          className: "OCIRepositoryDefinition",
        },
      },
      kustomizations: {
        serializedName: "properties.kustomizations",
        nullable: true,
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "KustomizationDefinition" },
          },
        },
      },
      configurationProtectedSettings: {
        serializedName: "properties.configurationProtectedSettings",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      statuses: {
        serializedName: "properties.statuses",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ObjectStatusDefinition",
            },
          },
        },
      },
      repositoryPublicKey: {
        serializedName: "properties.repositoryPublicKey",
        readOnly: true,
        nullable: true,
        type: {
          name: "String",
        },
      },
      sourceSyncedCommitId: {
        serializedName: "properties.sourceSyncedCommitId",
        readOnly: true,
        nullable: true,
        type: {
          name: "String",
        },
      },
      sourceUpdatedAt: {
        serializedName: "properties.sourceUpdatedAt",
        readOnly: true,
        nullable: true,
        type: {
          name: "DateTime",
        },
      },
      statusUpdatedAt: {
        serializedName: "properties.statusUpdatedAt",
        readOnly: true,
        nullable: true,
        type: {
          name: "DateTime",
        },
      },
      waitForReconciliation: {
        serializedName: "properties.waitForReconciliation",
        nullable: true,
        type: {
          name: "Boolean",
        },
      },
      reconciliationWaitDuration: {
        serializedName: "properties.reconciliationWaitDuration",
        nullable: true,
        type: {
          name: "String",
        },
      },
      complianceState: {
        defaultValue: "Unknown",
        serializedName: "properties.complianceState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      errorMessage: {
        serializedName: "properties.errorMessage",
        readOnly: true,
        nullable: true,
        type: {
          name: "String",
        },
      },
    },
  },
};
