/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  EventSourceCreateOrUpdateParametersUnion,
  EventSourcesCreateOrUpdateOptionalParams,
  EventSourcesCreateOrUpdateResponse,
  EventSourcesGetOptionalParams,
  EventSourcesGetResponse,
  EventSourceUpdateParametersUnion,
  EventSourcesUpdateOptionalParams,
  EventSourcesUpdateResponse,
  EventSourcesDeleteOptionalParams,
  EventSourcesListByEnvironmentOptionalParams,
  EventSourcesListByEnvironmentResponse
} from "../models";

/** Interface representing a EventSources. */
export interface EventSources {
  /**
   * Create or update an event source under the specified environment.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param environmentName The name of the Time Series Insights environment associated with the
   *                        specified resource group.
   * @param eventSourceName Name of the event source.
   * @param parameters Parameters for creating an event source resource.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    environmentName: string,
    eventSourceName: string,
    parameters: EventSourceCreateOrUpdateParametersUnion,
    options?: EventSourcesCreateOrUpdateOptionalParams
  ): Promise<EventSourcesCreateOrUpdateResponse>;
  /**
   * Gets the event source with the specified name in the specified environment.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param environmentName The name of the Time Series Insights environment associated with the
   *                        specified resource group.
   * @param eventSourceName The name of the Time Series Insights event source associated with the
   *                        specified environment.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    environmentName: string,
    eventSourceName: string,
    options?: EventSourcesGetOptionalParams
  ): Promise<EventSourcesGetResponse>;
  /**
   * Updates the event source with the specified name in the specified subscription, resource group, and
   * environment.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param environmentName The name of the Time Series Insights environment associated with the
   *                        specified resource group.
   * @param eventSourceName The name of the Time Series Insights event source associated with the
   *                        specified environment.
   * @param eventSourceUpdateParameters Request object that contains the updated information for the
   *                                    event source.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    environmentName: string,
    eventSourceName: string,
    eventSourceUpdateParameters: EventSourceUpdateParametersUnion,
    options?: EventSourcesUpdateOptionalParams
  ): Promise<EventSourcesUpdateResponse>;
  /**
   * Deletes the event source with the specified name in the specified subscription, resource group, and
   * environment
   * @param resourceGroupName Name of an Azure Resource group.
   * @param environmentName The name of the Time Series Insights environment associated with the
   *                        specified resource group.
   * @param eventSourceName The name of the Time Series Insights event source associated with the
   *                        specified environment.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    environmentName: string,
    eventSourceName: string,
    options?: EventSourcesDeleteOptionalParams
  ): Promise<void>;
  /**
   * Lists all the available event sources associated with the subscription and within the specified
   * resource group and environment.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param environmentName The name of the Time Series Insights environment associated with the
   *                        specified resource group.
   * @param options The options parameters.
   */
  listByEnvironment(
    resourceGroupName: string,
    environmentName: string,
    options?: EventSourcesListByEnvironmentOptionalParams
  ): Promise<EventSourcesListByEnvironmentResponse>;
}
