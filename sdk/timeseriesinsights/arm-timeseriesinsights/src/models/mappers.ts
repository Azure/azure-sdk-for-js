/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const OperationDisplay: msRest.CompositeMapper = {
  serializedName: "Operation_display",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        readOnly: true,
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        readOnly: true,
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        readOnly: true,
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: msRest.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        readOnly: true,
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: msRest.CompositeMapper = {
  serializedName: "TrackedResource",
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ResourceProperties: msRest.CompositeMapper = {
  serializedName: "ResourceProperties",
  type: {
    name: "Composite",
    className: "ResourceProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Accepted",
            "Creating",
            "Updating",
            "Succeeded",
            "Failed",
            "Deleting"
          ]
        }
      },
      creationTime: {
        readOnly: true,
        serializedName: "creationTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const Sku: msRest.CompositeMapper = {
  serializedName: "Sku",
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "Enum",
          allowedValues: [
            "S1",
            "S2"
          ]
        }
      },
      capacity: {
        required: true,
        serializedName: "capacity",
        constraints: {
          InclusiveMaximum: 10,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CreateOrUpdateTrackedResourceProperties: msRest.CompositeMapper = {
  serializedName: "CreateOrUpdateTrackedResourceProperties",
  type: {
    name: "Composite",
    className: "CreateOrUpdateTrackedResourceProperties",
    modelProperties: {
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const PartitionKeyProperty: msRest.CompositeMapper = {
  serializedName: "PartitionKeyProperty",
  type: {
    name: "Composite",
    className: "PartitionKeyProperty",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnvironmentCreateOrUpdateParameters: msRest.CompositeMapper = {
  serializedName: "EnvironmentCreateOrUpdateParameters",
  type: {
    name: "Composite",
    className: "EnvironmentCreateOrUpdateParameters",
    modelProperties: {
      ...CreateOrUpdateTrackedResourceProperties.type.modelProperties,
      sku: {
        required: true,
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      dataRetentionTime: {
        required: true,
        serializedName: "properties.dataRetentionTime",
        type: {
          name: "TimeSpan"
        }
      },
      storageLimitExceededBehavior: {
        serializedName: "properties.storageLimitExceededBehavior",
        type: {
          name: "Enum",
          allowedValues: [
            "PurgeOldData",
            "PauseIngress"
          ]
        }
      },
      partitionKeyProperties: {
        serializedName: "properties.partitionKeyProperties",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PartitionKeyProperty"
            }
          }
        }
      }
    }
  }
};

export const EnvironmentUpdateParameters: msRest.CompositeMapper = {
  serializedName: "EnvironmentUpdateParameters",
  type: {
    name: "Composite",
    className: "EnvironmentUpdateParameters",
    modelProperties: {
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      dataRetentionTime: {
        serializedName: "properties.dataRetentionTime",
        type: {
          name: "TimeSpan"
        }
      },
      storageLimitExceededBehavior: {
        serializedName: "properties.storageLimitExceededBehavior",
        type: {
          name: "Enum",
          allowedValues: [
            "PurgeOldData",
            "PauseIngress"
          ]
        }
      },
      partitionKeyProperties: {
        serializedName: "properties.partitionKeyProperties",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PartitionKeyProperty"
            }
          }
        }
      }
    }
  }
};

export const EnvironmentStateDetails: msRest.CompositeMapper = {
  serializedName: "EnvironmentStateDetails",
  type: {
    name: "Composite",
    className: "EnvironmentStateDetails",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IngressEnvironmentStatus: msRest.CompositeMapper = {
  serializedName: "IngressEnvironmentStatus",
  type: {
    name: "Composite",
    className: "IngressEnvironmentStatus",
    modelProperties: {
      state: {
        serializedName: "state",
        type: {
          name: "Enum",
          allowedValues: [
            "Disabled",
            "Ready",
            "Running",
            "Paused",
            "Unknown"
          ]
        }
      },
      stateDetails: {
        serializedName: "stateDetails",
        type: {
          name: "Composite",
          className: "EnvironmentStateDetails"
        }
      }
    }
  }
};

export const EnvironmentStatus: msRest.CompositeMapper = {
  serializedName: "EnvironmentStatus",
  type: {
    name: "Composite",
    className: "EnvironmentStatus",
    modelProperties: {
      ingress: {
        serializedName: "ingress",
        type: {
          name: "Composite",
          className: "IngressEnvironmentStatus"
        }
      }
    }
  }
};

export const EnvironmentResource: msRest.CompositeMapper = {
  serializedName: "EnvironmentResource",
  type: {
    name: "Composite",
    className: "EnvironmentResource",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      dataRetentionTime: {
        required: true,
        serializedName: "properties.dataRetentionTime",
        type: {
          name: "TimeSpan"
        }
      },
      storageLimitExceededBehavior: {
        serializedName: "properties.storageLimitExceededBehavior",
        type: {
          name: "Enum",
          allowedValues: [
            "PurgeOldData",
            "PauseIngress"
          ]
        }
      },
      partitionKeyProperties: {
        serializedName: "properties.partitionKeyProperties",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PartitionKeyProperty"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Accepted",
            "Creating",
            "Updating",
            "Succeeded",
            "Failed",
            "Deleting"
          ]
        }
      },
      creationTime: {
        readOnly: true,
        serializedName: "properties.creationTime",
        type: {
          name: "DateTime"
        }
      },
      dataAccessId: {
        readOnly: true,
        serializedName: "properties.dataAccessId",
        type: {
          name: "Uuid"
        }
      },
      dataAccessFqdn: {
        readOnly: true,
        serializedName: "properties.dataAccessFqdn",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Composite",
          className: "EnvironmentStatus"
        }
      }
    }
  }
};

export const EnvironmentListResponse: msRest.CompositeMapper = {
  serializedName: "EnvironmentListResponse",
  type: {
    name: "Composite",
    className: "EnvironmentListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentResource"
            }
          }
        }
      }
    }
  }
};

export const EventSourceCreateOrUpdateParameters: msRest.CompositeMapper = {
  serializedName: "EventSourceCreateOrUpdateParameters",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    uberParent: "CreateOrUpdateTrackedResourceProperties",
    className: "EventSourceCreateOrUpdateParameters",
    modelProperties: {
      ...CreateOrUpdateTrackedResourceProperties.type.modelProperties,
      kind: {
        required: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventHubEventSourceCreateOrUpdateParameters: msRest.CompositeMapper = {
  serializedName: "Microsoft.EventHub",
  type: {
    name: "Composite",
    className: "EventHubEventSourceCreateOrUpdateParameters",
    modelProperties: {
      ...EventSourceCreateOrUpdateParameters.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Accepted",
            "Creating",
            "Updating",
            "Succeeded",
            "Failed",
            "Deleting"
          ]
        }
      },
      creationTime: {
        readOnly: true,
        serializedName: "properties.creationTime",
        type: {
          name: "DateTime"
        }
      },
      timestampPropertyName: {
        serializedName: "properties.timestampPropertyName",
        type: {
          name: "String"
        }
      },
      eventSourceResourceId: {
        required: true,
        serializedName: "properties.eventSourceResourceId",
        type: {
          name: "String"
        }
      },
      serviceBusNamespace: {
        required: true,
        serializedName: "properties.serviceBusNamespace",
        type: {
          name: "String"
        }
      },
      eventHubName: {
        required: true,
        serializedName: "properties.eventHubName",
        type: {
          name: "String"
        }
      },
      consumerGroupName: {
        required: true,
        serializedName: "properties.consumerGroupName",
        type: {
          name: "String"
        }
      },
      keyName: {
        required: true,
        serializedName: "properties.keyName",
        type: {
          name: "String"
        }
      },
      sharedAccessKey: {
        required: true,
        serializedName: "properties.sharedAccessKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IoTHubEventSourceCreateOrUpdateParameters: msRest.CompositeMapper = {
  serializedName: "Microsoft.IoTHub",
  type: {
    name: "Composite",
    className: "IoTHubEventSourceCreateOrUpdateParameters",
    modelProperties: {
      ...EventSourceCreateOrUpdateParameters.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Accepted",
            "Creating",
            "Updating",
            "Succeeded",
            "Failed",
            "Deleting"
          ]
        }
      },
      creationTime: {
        readOnly: true,
        serializedName: "properties.creationTime",
        type: {
          name: "DateTime"
        }
      },
      timestampPropertyName: {
        serializedName: "properties.timestampPropertyName",
        type: {
          name: "String"
        }
      },
      eventSourceResourceId: {
        required: true,
        serializedName: "properties.eventSourceResourceId",
        type: {
          name: "String"
        }
      },
      iotHubName: {
        required: true,
        serializedName: "properties.iotHubName",
        type: {
          name: "String"
        }
      },
      consumerGroupName: {
        required: true,
        serializedName: "properties.consumerGroupName",
        type: {
          name: "String"
        }
      },
      keyName: {
        required: true,
        serializedName: "properties.keyName",
        type: {
          name: "String"
        }
      },
      sharedAccessKey: {
        required: true,
        serializedName: "properties.sharedAccessKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventSourceUpdateParameters: msRest.CompositeMapper = {
  serializedName: "EventSourceUpdateParameters",
  type: {
    name: "Composite",
    className: "EventSourceUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const EventHubEventSourceUpdateParameters: msRest.CompositeMapper = {
  serializedName: "EventHubEventSourceUpdateParameters",
  type: {
    name: "Composite",
    className: "EventHubEventSourceUpdateParameters",
    modelProperties: {
      ...EventSourceUpdateParameters.type.modelProperties,
      timestampPropertyName: {
        serializedName: "properties.timestampPropertyName",
        type: {
          name: "String"
        }
      },
      localTimestamp: {
        serializedName: "properties.localTimestamp",
        type: {
          name: "Composite",
          className: "LocalTimestamp"
        }
      },
      sharedAccessKey: {
        serializedName: "properties.sharedAccessKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IoTHubEventSourceUpdateParameters: msRest.CompositeMapper = {
  serializedName: "IoTHubEventSourceUpdateParameters",
  type: {
    name: "Composite",
    className: "IoTHubEventSourceUpdateParameters",
    modelProperties: {
      ...EventSourceUpdateParameters.type.modelProperties,
      timestampPropertyName: {
        serializedName: "properties.timestampPropertyName",
        type: {
          name: "String"
        }
      },
      localTimestamp: {
        serializedName: "properties.localTimestamp",
        type: {
          name: "Composite",
          className: "LocalTimestamp"
        }
      },
      sharedAccessKey: {
        serializedName: "properties.sharedAccessKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventSourceResource: msRest.CompositeMapper = {
  serializedName: "EventSourceResource",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    uberParent: "BaseResource",
    className: "EventSourceResource",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      kind: {
        required: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventSourceListResponse: msRest.CompositeMapper = {
  serializedName: "EventSourceListResponse",
  type: {
    name: "Composite",
    className: "EventSourceListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EventSourceResource"
            }
          }
        }
      }
    }
  }
};

export const EventHubEventSourceResource: msRest.CompositeMapper = {
  serializedName: "Microsoft.EventHub",
  type: {
    name: "Composite",
    className: "EventHubEventSourceResource",
    modelProperties: {
      ...EventSourceResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Accepted",
            "Creating",
            "Updating",
            "Succeeded",
            "Failed",
            "Deleting"
          ]
        }
      },
      creationTime: {
        readOnly: true,
        serializedName: "properties.creationTime",
        type: {
          name: "DateTime"
        }
      },
      timestampPropertyName: {
        serializedName: "properties.timestampPropertyName",
        type: {
          name: "String"
        }
      },
      eventSourceResourceId: {
        required: true,
        serializedName: "properties.eventSourceResourceId",
        type: {
          name: "String"
        }
      },
      serviceBusNamespace: {
        required: true,
        serializedName: "properties.serviceBusNamespace",
        type: {
          name: "String"
        }
      },
      eventHubName: {
        required: true,
        serializedName: "properties.eventHubName",
        type: {
          name: "String"
        }
      },
      consumerGroupName: {
        required: true,
        serializedName: "properties.consumerGroupName",
        type: {
          name: "String"
        }
      },
      keyName: {
        required: true,
        serializedName: "properties.keyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IoTHubEventSourceResource: msRest.CompositeMapper = {
  serializedName: "Microsoft.IotHub",
  type: {
    name: "Composite",
    className: "IoTHubEventSourceResource",
    modelProperties: {
      ...EventSourceResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Accepted",
            "Creating",
            "Updating",
            "Succeeded",
            "Failed",
            "Deleting"
          ]
        }
      },
      creationTime: {
        readOnly: true,
        serializedName: "properties.creationTime",
        type: {
          name: "DateTime"
        }
      },
      timestampPropertyName: {
        serializedName: "properties.timestampPropertyName",
        type: {
          name: "String"
        }
      },
      eventSourceResourceId: {
        required: true,
        serializedName: "properties.eventSourceResourceId",
        type: {
          name: "String"
        }
      },
      iotHubName: {
        required: true,
        serializedName: "properties.iotHubName",
        type: {
          name: "String"
        }
      },
      consumerGroupName: {
        required: true,
        serializedName: "properties.consumerGroupName",
        type: {
          name: "String"
        }
      },
      keyName: {
        required: true,
        serializedName: "properties.keyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventSourceCommonProperties: msRest.CompositeMapper = {
  serializedName: "EventSourceCommonProperties",
  type: {
    name: "Composite",
    className: "EventSourceCommonProperties",
    modelProperties: {
      ...ResourceProperties.type.modelProperties,
      timestampPropertyName: {
        serializedName: "timestampPropertyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureEventSourceProperties: msRest.CompositeMapper = {
  serializedName: "AzureEventSourceProperties",
  type: {
    name: "Composite",
    className: "AzureEventSourceProperties",
    modelProperties: {
      ...EventSourceCommonProperties.type.modelProperties,
      eventSourceResourceId: {
        required: true,
        serializedName: "eventSourceResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventHubEventSourceCommonProperties: msRest.CompositeMapper = {
  serializedName: "EventHubEventSourceCommonProperties",
  type: {
    name: "Composite",
    className: "EventHubEventSourceCommonProperties",
    modelProperties: {
      ...AzureEventSourceProperties.type.modelProperties,
      serviceBusNamespace: {
        required: true,
        serializedName: "serviceBusNamespace",
        type: {
          name: "String"
        }
      },
      eventHubName: {
        required: true,
        serializedName: "eventHubName",
        type: {
          name: "String"
        }
      },
      consumerGroupName: {
        required: true,
        serializedName: "consumerGroupName",
        type: {
          name: "String"
        }
      },
      keyName: {
        required: true,
        serializedName: "keyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IoTHubEventSourceCommonProperties: msRest.CompositeMapper = {
  serializedName: "IoTHubEventSourceCommonProperties",
  type: {
    name: "Composite",
    className: "IoTHubEventSourceCommonProperties",
    modelProperties: {
      ...AzureEventSourceProperties.type.modelProperties,
      iotHubName: {
        required: true,
        serializedName: "iotHubName",
        type: {
          name: "String"
        }
      },
      consumerGroupName: {
        required: true,
        serializedName: "consumerGroupName",
        type: {
          name: "String"
        }
      },
      keyName: {
        required: true,
        serializedName: "keyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LocalTimestampTimeZoneOffset: msRest.CompositeMapper = {
  serializedName: "LocalTimestamp_timeZoneOffset",
  type: {
    name: "Composite",
    className: "LocalTimestampTimeZoneOffset",
    modelProperties: {
      propertyName: {
        serializedName: "propertyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LocalTimestamp: msRest.CompositeMapper = {
  serializedName: "LocalTimestamp",
  type: {
    name: "Composite",
    className: "LocalTimestamp",
    modelProperties: {
      format: {
        serializedName: "format",
        type: {
          name: "Enum",
          allowedValues: [
            "Embedded",
            "Iana",
            "TimeSpan"
          ]
        }
      },
      timeZoneOffset: {
        serializedName: "timeZoneOffset",
        type: {
          name: "Composite",
          className: "LocalTimestampTimeZoneOffset"
        }
      }
    }
  }
};

export const EventSourceMutableProperties: msRest.CompositeMapper = {
  serializedName: "EventSourceMutableProperties",
  type: {
    name: "Composite",
    className: "EventSourceMutableProperties",
    modelProperties: {
      timestampPropertyName: {
        serializedName: "timestampPropertyName",
        type: {
          name: "String"
        }
      },
      localTimestamp: {
        serializedName: "localTimestamp",
        type: {
          name: "Composite",
          className: "LocalTimestamp"
        }
      }
    }
  }
};

export const ReferenceDataSetKeyProperty: msRest.CompositeMapper = {
  serializedName: "ReferenceDataSetKeyProperty",
  type: {
    name: "Composite",
    className: "ReferenceDataSetKeyProperty",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "String",
            "Double",
            "Bool",
            "DateTime"
          ]
        }
      }
    }
  }
};

export const ReferenceDataSetCreateOrUpdateParameters: msRest.CompositeMapper = {
  serializedName: "ReferenceDataSetCreateOrUpdateParameters",
  type: {
    name: "Composite",
    className: "ReferenceDataSetCreateOrUpdateParameters",
    modelProperties: {
      ...CreateOrUpdateTrackedResourceProperties.type.modelProperties,
      keyProperties: {
        required: true,
        serializedName: "properties.keyProperties",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReferenceDataSetKeyProperty"
            }
          }
        }
      },
      dataStringComparisonBehavior: {
        serializedName: "properties.dataStringComparisonBehavior",
        type: {
          name: "Enum",
          allowedValues: [
            "Ordinal",
            "OrdinalIgnoreCase"
          ]
        }
      }
    }
  }
};

export const ReferenceDataSetUpdateParameters: msRest.CompositeMapper = {
  serializedName: "ReferenceDataSetUpdateParameters",
  type: {
    name: "Composite",
    className: "ReferenceDataSetUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ReferenceDataSetResource: msRest.CompositeMapper = {
  serializedName: "ReferenceDataSetResource",
  type: {
    name: "Composite",
    className: "ReferenceDataSetResource",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      keyProperties: {
        required: true,
        serializedName: "properties.keyProperties",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReferenceDataSetKeyProperty"
            }
          }
        }
      },
      dataStringComparisonBehavior: {
        serializedName: "properties.dataStringComparisonBehavior",
        type: {
          name: "Enum",
          allowedValues: [
            "Ordinal",
            "OrdinalIgnoreCase"
          ]
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Accepted",
            "Creating",
            "Updating",
            "Succeeded",
            "Failed",
            "Deleting"
          ]
        }
      },
      creationTime: {
        readOnly: true,
        serializedName: "properties.creationTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ReferenceDataSetListResponse: msRest.CompositeMapper = {
  serializedName: "ReferenceDataSetListResponse",
  type: {
    name: "Composite",
    className: "ReferenceDataSetListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReferenceDataSetResource"
            }
          }
        }
      }
    }
  }
};

export const AccessPolicyCreateOrUpdateParameters: msRest.CompositeMapper = {
  serializedName: "AccessPolicyCreateOrUpdateParameters",
  type: {
    name: "Composite",
    className: "AccessPolicyCreateOrUpdateParameters",
    modelProperties: {
      principalObjectId: {
        serializedName: "properties.principalObjectId",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      roles: {
        serializedName: "properties.roles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "Reader",
                "Contributor"
              ]
            }
          }
        }
      }
    }
  }
};

export const AccessPolicyUpdateParameters: msRest.CompositeMapper = {
  serializedName: "AccessPolicyUpdateParameters",
  type: {
    name: "Composite",
    className: "AccessPolicyUpdateParameters",
    modelProperties: {
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      roles: {
        serializedName: "properties.roles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "Reader",
                "Contributor"
              ]
            }
          }
        }
      }
    }
  }
};

export const AccessPolicyResource: msRest.CompositeMapper = {
  serializedName: "AccessPolicyResource",
  type: {
    name: "Composite",
    className: "AccessPolicyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      principalObjectId: {
        serializedName: "properties.principalObjectId",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      roles: {
        serializedName: "properties.roles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "Reader",
                "Contributor"
              ]
            }
          }
        }
      }
    }
  }
};

export const AccessPolicyListResponse: msRest.CompositeMapper = {
  serializedName: "AccessPolicyListResponse",
  type: {
    name: "Composite",
    className: "AccessPolicyListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccessPolicyResource"
            }
          }
        }
      }
    }
  }
};

export const OperationListResult: msRest.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const discriminators = {
  'CreateOrUpdateTrackedResourceProperties.EventSourceCreateOrUpdateParameters' : EventSourceCreateOrUpdateParameters,
  'CreateOrUpdateTrackedResourceProperties.Microsoft.EventHub' : EventHubEventSourceCreateOrUpdateParameters,
  'CreateOrUpdateTrackedResourceProperties.Microsoft.IoTHub' : IoTHubEventSourceCreateOrUpdateParameters,
  'BaseResource.EventSourceResource' : EventSourceResource,
  'BaseResource.Microsoft.EventHub' : EventHubEventSourceResource,
  'BaseResource.Microsoft.IotHub' : IoTHubEventSourceResource

};
