/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      serviceSpecification: {
        serializedName: "properties.serviceSpecification",
        type: {
          name: "Composite",
          className: "ServiceSpecification"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceSpecification",
    modelProperties: {
      metricSpecifications: {
        serializedName: "metricSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricSpecification"
            }
          }
        }
      },
      logSpecifications: {
        serializedName: "logSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LogSpecification"
            }
          }
        }
      }
    }
  }
};

export const MetricSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      displayDescription: {
        serializedName: "displayDescription",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Dimension"
            }
          }
        }
      },
      aggregationType: {
        serializedName: "aggregationType",
        type: {
          name: "String"
        }
      },
      availabilities: {
        serializedName: "availabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricAvailability"
            }
          }
        }
      },
      category: {
        serializedName: "category",
        type: {
          name: "String"
        }
      },
      resourceIdDimensionNameOverride: {
        serializedName: "resourceIdDimensionNameOverride",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Dimension: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Dimension",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricAvailability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricAvailability",
    modelProperties: {
      timeGrain: {
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      },
      blobDuration: {
        serializedName: "blobDuration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LogSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const CloudErrorBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudErrorBody"
            }
          }
        }
      }
    }
  }
};

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      capacity: {
        constraints: {
          InclusiveMaximum: 10,
          InclusiveMinimum: 1
        },
        serializedName: "capacity",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CreateOrUpdateTrackedResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateOrUpdateTrackedResourceProperties",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnvironmentUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnvironmentUpdateParameters",
    uberParent: "EnvironmentUpdateParameters",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const EnvironmentListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnvironmentListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentResource"
            }
          }
        }
      }
    }
  }
};

export const LocalTimestamp: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LocalTimestamp",
    modelProperties: {
      format: {
        serializedName: "format",
        type: {
          name: "String"
        }
      },
      timeZoneOffset: {
        serializedName: "timeZoneOffset",
        type: {
          name: "Composite",
          className: "LocalTimestampTimeZoneOffset"
        }
      }
    }
  }
};

export const LocalTimestampTimeZoneOffset: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LocalTimestampTimeZoneOffset",
    modelProperties: {
      propertyName: {
        serializedName: "propertyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventSourceUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventSourceUpdateParameters",
    uberParent: "EventSourceUpdateParameters",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const EventSourceListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventSourceListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EventSourceResource"
            }
          }
        }
      }
    }
  }
};

export const ReferenceDataSetCreationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReferenceDataSetCreationProperties",
    modelProperties: {
      keyProperties: {
        serializedName: "keyProperties",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReferenceDataSetKeyProperty"
            }
          }
        }
      },
      dataStringComparisonBehavior: {
        serializedName: "dataStringComparisonBehavior",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReferenceDataSetKeyProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReferenceDataSetKeyProperty",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ReferenceDataSetUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReferenceDataSetUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ReferenceDataSetListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReferenceDataSetListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReferenceDataSetResource"
            }
          }
        }
      }
    }
  }
};

export const AccessPolicyCreateOrUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessPolicyCreateOrUpdateParameters",
    modelProperties: {
      principalObjectId: {
        serializedName: "properties.principalObjectId",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      roles: {
        serializedName: "properties.roles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AccessPolicyUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessPolicyUpdateParameters",
    modelProperties: {
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      roles: {
        serializedName: "properties.roles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AccessPolicyListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessPolicyListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccessPolicyResource"
            }
          }
        }
      }
    }
  }
};

export const PrivateEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      }
    }
  }
};

export const PrivateLinkResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      }
    }
  }
};

export const WarmStoreConfigurationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WarmStoreConfigurationProperties",
    modelProperties: {
      dataRetention: {
        serializedName: "dataRetention",
        required: true,
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const Gen2StorageConfigurationInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Gen2StorageConfigurationInput",
    modelProperties: {
      accountName: {
        serializedName: "accountName",
        required: true,
        type: {
          name: "String"
        }
      },
      managementKey: {
        serializedName: "managementKey",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Gen2StorageConfigurationOutput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Gen2StorageConfigurationOutput",
    modelProperties: {
      accountName: {
        serializedName: "accountName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Gen2StorageConfigurationMutableProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Gen2StorageConfigurationMutableProperties",
    modelProperties: {
      managementKey: {
        serializedName: "managementKey",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Gen1EnvironmentCreationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Gen1EnvironmentCreationProperties",
    modelProperties: {
      dataRetentionTime: {
        serializedName: "dataRetentionTime",
        required: true,
        type: {
          name: "TimeSpan"
        }
      },
      storageLimitExceededBehavior: {
        serializedName: "storageLimitExceededBehavior",
        type: {
          name: "String"
        }
      },
      partitionKeyProperties: {
        serializedName: "partitionKeyProperties",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimeSeriesIdProperty"
            }
          }
        }
      }
    }
  }
};

export const TimeSeriesIdProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TimeSeriesIdProperty",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnvironmentStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnvironmentStatus",
    modelProperties: {
      ingress: {
        serializedName: "ingress",
        type: {
          name: "Composite",
          className: "IngressEnvironmentStatus"
        }
      },
      warmStorage: {
        serializedName: "warmStorage",
        type: {
          name: "Composite",
          className: "WarmStorageEnvironmentStatus"
        }
      }
    }
  }
};

export const IngressEnvironmentStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IngressEnvironmentStatus",
    modelProperties: {
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      stateDetails: {
        serializedName: "stateDetails",
        type: {
          name: "Composite",
          className: "EnvironmentStateDetails"
        }
      }
    }
  }
};

export const EnvironmentStateDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnvironmentStateDetails",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WarmStorageEnvironmentStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WarmStorageEnvironmentStatus",
    modelProperties: {
      state: {
        serializedName: "propertiesUsage.state",
        type: {
          name: "String"
        }
      },
      currentCount: {
        constraints: {
          InclusiveMaximum: 10,
          InclusiveMinimum: 1
        },
        serializedName: "propertiesUsage.stateDetails.currentCount",
        type: {
          name: "Number"
        }
      },
      maxCount: {
        constraints: {
          InclusiveMaximum: 10,
          InclusiveMinimum: 1
        },
        serializedName: "propertiesUsage.stateDetails.maxCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EventSourceMutableProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventSourceMutableProperties",
    modelProperties: {
      timestampPropertyName: {
        serializedName: "timestampPropertyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnvironmentCreateOrUpdateParameters: coreClient.CompositeMapper = {
  serializedName: "EnvironmentCreateOrUpdateParameters",
  type: {
    name: "Composite",
    className: "EnvironmentCreateOrUpdateParameters",
    uberParent: "CreateOrUpdateTrackedResourceProperties",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...CreateOrUpdateTrackedResourceProperties.type.modelProperties,
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const EventSourceCreateOrUpdateParameters: coreClient.CompositeMapper = {
  serializedName: "EventSourceCreateOrUpdateParameters",
  type: {
    name: "Composite",
    className: "EventSourceCreateOrUpdateParameters",
    uberParent: "CreateOrUpdateTrackedResourceProperties",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...CreateOrUpdateTrackedResourceProperties.type.modelProperties,
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      localTimestamp: {
        serializedName: "localTimestamp",
        type: {
          name: "Composite",
          className: "LocalTimestamp"
        }
      }
    }
  }
};

export const ReferenceDataSetCreateOrUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReferenceDataSetCreateOrUpdateParameters",
    modelProperties: {
      ...CreateOrUpdateTrackedResourceProperties.type.modelProperties,
      keyProperties: {
        serializedName: "properties.keyProperties",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReferenceDataSetKeyProperty"
            }
          }
        }
      },
      dataStringComparisonBehavior: {
        serializedName: "properties.dataStringComparisonBehavior",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const AccessPolicyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessPolicyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      principalObjectId: {
        serializedName: "properties.principalObjectId",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      roles: {
        serializedName: "properties.roles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...Resource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      groupIds: {
        serializedName: "properties.groupIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      }
    }
  }
};

export const PrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      groupId: {
        serializedName: "properties.groupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        serializedName: "properties.requiredMembers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      requiredZoneNames: {
        serializedName: "properties.requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Gen1EnvironmentUpdateParameters: coreClient.CompositeMapper = {
  serializedName: "Gen1",
  type: {
    name: "Composite",
    className: "Gen1EnvironmentUpdateParameters",
    uberParent: "EnvironmentUpdateParameters",
    polymorphicDiscriminator:
      EnvironmentUpdateParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...EnvironmentUpdateParameters.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      dataRetentionTime: {
        serializedName: "properties.dataRetentionTime",
        type: {
          name: "TimeSpan"
        }
      },
      storageLimitExceededBehavior: {
        serializedName: "properties.storageLimitExceededBehavior",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Gen2EnvironmentUpdateParameters: coreClient.CompositeMapper = {
  serializedName: "Gen2",
  type: {
    name: "Composite",
    className: "Gen2EnvironmentUpdateParameters",
    uberParent: "EnvironmentUpdateParameters",
    polymorphicDiscriminator:
      EnvironmentUpdateParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...EnvironmentUpdateParameters.type.modelProperties,
      storageConfiguration: {
        serializedName: "properties.storageConfiguration",
        type: {
          name: "Composite",
          className: "Gen2StorageConfigurationMutableProperties"
        }
      },
      warmStoreConfiguration: {
        serializedName: "properties.warmStoreConfiguration",
        type: {
          name: "Composite",
          className: "WarmStoreConfigurationProperties"
        }
      }
    }
  }
};

export const EventHubEventSourceUpdateParameters: coreClient.CompositeMapper = {
  serializedName: "Microsoft.EventHub",
  type: {
    name: "Composite",
    className: "EventHubEventSourceUpdateParameters",
    uberParent: "EventSourceUpdateParameters",
    polymorphicDiscriminator:
      EventSourceUpdateParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventSourceUpdateParameters.type.modelProperties,
      timestampPropertyName: {
        serializedName: "properties.timestampPropertyName",
        type: {
          name: "String"
        }
      },
      sharedAccessKey: {
        serializedName: "properties.sharedAccessKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IoTHubEventSourceUpdateParameters: coreClient.CompositeMapper = {
  serializedName: "Microsoft.IoTHub",
  type: {
    name: "Composite",
    className: "IoTHubEventSourceUpdateParameters",
    uberParent: "EventSourceUpdateParameters",
    polymorphicDiscriminator:
      EventSourceUpdateParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventSourceUpdateParameters.type.modelProperties,
      timestampPropertyName: {
        serializedName: "properties.timestampPropertyName",
        type: {
          name: "String"
        }
      },
      sharedAccessKey: {
        serializedName: "properties.sharedAccessKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReferenceDataSetResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReferenceDataSetResourceProperties",
    modelProperties: {
      ...ReferenceDataSetCreationProperties.type.modelProperties,
      ...ResourceProperties.type.modelProperties
    }
  }
};

export const EnvironmentResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnvironmentResourceProperties",
    modelProperties: {
      ...ResourceProperties.type.modelProperties,
      dataAccessId: {
        serializedName: "dataAccessId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      dataAccessFqdn: {
        serializedName: "dataAccessFqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Composite",
          className: "EnvironmentStatus"
        }
      }
    }
  }
};

export const EventSourceCommonProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventSourceCommonProperties",
    modelProperties: {
      ...ResourceProperties.type.modelProperties,
      timestampPropertyName: {
        serializedName: "timestampPropertyName",
        type: {
          name: "String"
        }
      },
      localTimestamp: {
        serializedName: "localTimestamp",
        type: {
          name: "Composite",
          className: "LocalTimestamp"
        }
      },
      type: {
        serializedName: "ingressStartAt.type",
        type: {
          name: "String"
        }
      },
      time: {
        serializedName: "ingressStartAt.time",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Gen1EnvironmentResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Gen1EnvironmentResourceProperties",
    modelProperties: {
      ...Gen1EnvironmentCreationProperties.type.modelProperties,
      ...EnvironmentResourceProperties.type.modelProperties
    }
  }
};

export const EventHubEventSourceMutableProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventHubEventSourceMutableProperties",
    modelProperties: {
      ...EventSourceMutableProperties.type.modelProperties,
      sharedAccessKey: {
        serializedName: "sharedAccessKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IoTHubEventSourceMutableProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IoTHubEventSourceMutableProperties",
    modelProperties: {
      ...EventSourceMutableProperties.type.modelProperties,
      sharedAccessKey: {
        serializedName: "sharedAccessKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Gen1EnvironmentCreateOrUpdateParameters: coreClient.CompositeMapper = {
  serializedName: "Gen1",
  type: {
    name: "Composite",
    className: "Gen1EnvironmentCreateOrUpdateParameters",
    uberParent: "EnvironmentCreateOrUpdateParameters",
    polymorphicDiscriminator:
      EnvironmentCreateOrUpdateParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...EnvironmentCreateOrUpdateParameters.type.modelProperties,
      dataRetentionTime: {
        serializedName: "properties.dataRetentionTime",
        required: true,
        type: {
          name: "TimeSpan"
        }
      },
      storageLimitExceededBehavior: {
        serializedName: "properties.storageLimitExceededBehavior",
        type: {
          name: "String"
        }
      },
      partitionKeyProperties: {
        serializedName: "properties.partitionKeyProperties",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimeSeriesIdProperty"
            }
          }
        }
      }
    }
  }
};

export const Gen2EnvironmentCreateOrUpdateParameters: coreClient.CompositeMapper = {
  serializedName: "Gen2",
  type: {
    name: "Composite",
    className: "Gen2EnvironmentCreateOrUpdateParameters",
    uberParent: "EnvironmentCreateOrUpdateParameters",
    polymorphicDiscriminator:
      EnvironmentCreateOrUpdateParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...EnvironmentCreateOrUpdateParameters.type.modelProperties,
      timeSeriesIdProperties: {
        serializedName: "properties.timeSeriesIdProperties",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimeSeriesIdProperty"
            }
          }
        }
      },
      storageConfiguration: {
        serializedName: "properties.storageConfiguration",
        type: {
          name: "Composite",
          className: "Gen2StorageConfigurationInput"
        }
      },
      warmStoreConfiguration: {
        serializedName: "properties.warmStoreConfiguration",
        type: {
          name: "Composite",
          className: "WarmStoreConfigurationProperties"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      }
    }
  }
};

export const EventHubEventSourceCreateOrUpdateParameters: coreClient.CompositeMapper = {
  serializedName: "Microsoft.EventHub",
  type: {
    name: "Composite",
    className: "EventHubEventSourceCreateOrUpdateParameters",
    uberParent: "EventSourceCreateOrUpdateParameters",
    polymorphicDiscriminator:
      EventSourceCreateOrUpdateParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventSourceCreateOrUpdateParameters.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      timestampPropertyName: {
        serializedName: "properties.timestampPropertyName",
        type: {
          name: "String"
        }
      },
      localTimestampPropertiesLocalTimestamp: {
        serializedName: "properties.localTimestamp",
        type: {
          name: "Composite",
          className: "LocalTimestamp"
        }
      },
      type: {
        serializedName: "properties.ingressStartAt.type",
        type: {
          name: "String"
        }
      },
      time: {
        serializedName: "properties.ingressStartAt.time",
        type: {
          name: "String"
        }
      },
      eventSourceResourceId: {
        serializedName: "properties.eventSourceResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      serviceBusNamespace: {
        serializedName: "properties.serviceBusNamespace",
        required: true,
        type: {
          name: "String"
        }
      },
      eventHubName: {
        serializedName: "properties.eventHubName",
        required: true,
        type: {
          name: "String"
        }
      },
      consumerGroupName: {
        serializedName: "properties.consumerGroupName",
        required: true,
        type: {
          name: "String"
        }
      },
      keyName: {
        serializedName: "properties.keyName",
        required: true,
        type: {
          name: "String"
        }
      },
      sharedAccessKey: {
        serializedName: "properties.sharedAccessKey",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IoTHubEventSourceCreateOrUpdateParameters: coreClient.CompositeMapper = {
  serializedName: "Microsoft.IoTHub",
  type: {
    name: "Composite",
    className: "IoTHubEventSourceCreateOrUpdateParameters",
    uberParent: "EventSourceCreateOrUpdateParameters",
    polymorphicDiscriminator:
      EventSourceCreateOrUpdateParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventSourceCreateOrUpdateParameters.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      timestampPropertyName: {
        serializedName: "properties.timestampPropertyName",
        type: {
          name: "String"
        }
      },
      localTimestampPropertiesLocalTimestamp: {
        serializedName: "properties.localTimestamp",
        type: {
          name: "Composite",
          className: "LocalTimestamp"
        }
      },
      type: {
        serializedName: "properties.ingressStartAt.type",
        type: {
          name: "String"
        }
      },
      time: {
        serializedName: "properties.ingressStartAt.time",
        type: {
          name: "String"
        }
      },
      eventSourceResourceId: {
        serializedName: "properties.eventSourceResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      iotHubName: {
        serializedName: "properties.iotHubName",
        required: true,
        type: {
          name: "String"
        }
      },
      consumerGroupName: {
        serializedName: "properties.consumerGroupName",
        required: true,
        type: {
          name: "String"
        }
      },
      keyName: {
        serializedName: "properties.keyName",
        required: true,
        type: {
          name: "String"
        }
      },
      sharedAccessKey: {
        serializedName: "properties.sharedAccessKey",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnvironmentResource: coreClient.CompositeMapper = {
  serializedName: "EnvironmentResource",
  type: {
    name: "Composite",
    className: "EnvironmentResource",
    uberParent: "TrackedResource",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventSourceResource: coreClient.CompositeMapper = {
  serializedName: "EventSourceResource",
  type: {
    name: "Composite",
    className: "EventSourceResource",
    uberParent: "TrackedResource",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReferenceDataSetResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReferenceDataSetResource",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      keyProperties: {
        serializedName: "properties.keyProperties",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReferenceDataSetKeyProperty"
            }
          }
        }
      },
      dataStringComparisonBehavior: {
        serializedName: "properties.dataStringComparisonBehavior",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const Gen2EnvironmentResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Gen2EnvironmentResourceProperties",
    modelProperties: {
      ...EnvironmentResourceProperties.type.modelProperties,
      timeSeriesIdProperties: {
        serializedName: "timeSeriesIdProperties",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimeSeriesIdProperty"
            }
          }
        }
      },
      storageConfiguration: {
        serializedName: "storageConfiguration",
        type: {
          name: "Composite",
          className: "Gen2StorageConfigurationOutput"
        }
      },
      warmStoreConfiguration: {
        serializedName: "warmStoreConfiguration",
        type: {
          name: "Composite",
          className: "WarmStoreConfigurationProperties"
        }
      },
      publicNetworkAccess: {
        serializedName: "publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      privateEndpointConnections: {
        serializedName: "privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      }
    }
  }
};

export const AzureEventSourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureEventSourceProperties",
    modelProperties: {
      ...EventSourceCommonProperties.type.modelProperties,
      eventSourceResourceId: {
        serializedName: "eventSourceResourceId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Gen1EnvironmentResource: coreClient.CompositeMapper = {
  serializedName: "Gen1",
  type: {
    name: "Composite",
    className: "Gen1EnvironmentResource",
    uberParent: "EnvironmentResource",
    polymorphicDiscriminator: EnvironmentResource.type.polymorphicDiscriminator,
    modelProperties: {
      ...EnvironmentResource.type.modelProperties,
      dataRetentionTime: {
        serializedName: "properties.dataRetentionTime",
        required: true,
        type: {
          name: "TimeSpan"
        }
      },
      storageLimitExceededBehavior: {
        serializedName: "properties.storageLimitExceededBehavior",
        type: {
          name: "String"
        }
      },
      partitionKeyProperties: {
        serializedName: "properties.partitionKeyProperties",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimeSeriesIdProperty"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      dataAccessId: {
        serializedName: "properties.dataAccessId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      dataAccessFqdn: {
        serializedName: "properties.dataAccessFqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Composite",
          className: "EnvironmentStatus"
        }
      }
    }
  }
};

export const Gen2EnvironmentResource: coreClient.CompositeMapper = {
  serializedName: "Gen2",
  type: {
    name: "Composite",
    className: "Gen2EnvironmentResource",
    uberParent: "EnvironmentResource",
    polymorphicDiscriminator: EnvironmentResource.type.polymorphicDiscriminator,
    modelProperties: {
      ...EnvironmentResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      dataAccessId: {
        serializedName: "properties.dataAccessId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      dataAccessFqdn: {
        serializedName: "properties.dataAccessFqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Composite",
          className: "EnvironmentStatus"
        }
      },
      timeSeriesIdProperties: {
        serializedName: "properties.timeSeriesIdProperties",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimeSeriesIdProperty"
            }
          }
        }
      },
      storageConfiguration: {
        serializedName: "properties.storageConfiguration",
        type: {
          name: "Composite",
          className: "Gen2StorageConfigurationOutput"
        }
      },
      warmStoreConfiguration: {
        serializedName: "properties.warmStoreConfiguration",
        type: {
          name: "Composite",
          className: "WarmStoreConfigurationProperties"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      }
    }
  }
};

export const EventHubEventSourceResource: coreClient.CompositeMapper = {
  serializedName: "Microsoft.EventHub",
  type: {
    name: "Composite",
    className: "EventHubEventSourceResource",
    uberParent: "EventSourceResource",
    polymorphicDiscriminator: EventSourceResource.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventSourceResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      timestampPropertyName: {
        serializedName: "properties.timestampPropertyName",
        type: {
          name: "String"
        }
      },
      localTimestamp: {
        serializedName: "properties.localTimestamp",
        type: {
          name: "Composite",
          className: "LocalTimestamp"
        }
      },
      typePropertiesIngressStartAtType: {
        serializedName: "properties.ingressStartAt.type",
        type: {
          name: "String"
        }
      },
      time: {
        serializedName: "properties.ingressStartAt.time",
        type: {
          name: "String"
        }
      },
      eventSourceResourceId: {
        serializedName: "properties.eventSourceResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      serviceBusNamespace: {
        serializedName: "properties.serviceBusNamespace",
        required: true,
        type: {
          name: "String"
        }
      },
      eventHubName: {
        serializedName: "properties.eventHubName",
        required: true,
        type: {
          name: "String"
        }
      },
      consumerGroupName: {
        serializedName: "properties.consumerGroupName",
        required: true,
        type: {
          name: "String"
        }
      },
      keyName: {
        serializedName: "properties.keyName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IoTHubEventSourceResource: coreClient.CompositeMapper = {
  serializedName: "Microsoft.IoTHub",
  type: {
    name: "Composite",
    className: "IoTHubEventSourceResource",
    uberParent: "EventSourceResource",
    polymorphicDiscriminator: EventSourceResource.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventSourceResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      timestampPropertyName: {
        serializedName: "properties.timestampPropertyName",
        type: {
          name: "String"
        }
      },
      localTimestamp: {
        serializedName: "properties.localTimestamp",
        type: {
          name: "Composite",
          className: "LocalTimestamp"
        }
      },
      typePropertiesIngressStartAtType: {
        serializedName: "properties.ingressStartAt.type",
        type: {
          name: "String"
        }
      },
      time: {
        serializedName: "properties.ingressStartAt.time",
        type: {
          name: "String"
        }
      },
      eventSourceResourceId: {
        serializedName: "properties.eventSourceResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      iotHubName: {
        serializedName: "properties.iotHubName",
        required: true,
        type: {
          name: "String"
        }
      },
      consumerGroupName: {
        serializedName: "properties.consumerGroupName",
        required: true,
        type: {
          name: "String"
        }
      },
      keyName: {
        serializedName: "properties.keyName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventHubEventSourceCommonProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventHubEventSourceCommonProperties",
    modelProperties: {
      ...AzureEventSourceProperties.type.modelProperties,
      serviceBusNamespace: {
        serializedName: "serviceBusNamespace",
        required: true,
        type: {
          name: "String"
        }
      },
      eventHubName: {
        serializedName: "eventHubName",
        required: true,
        type: {
          name: "String"
        }
      },
      consumerGroupName: {
        serializedName: "consumerGroupName",
        required: true,
        type: {
          name: "String"
        }
      },
      keyName: {
        serializedName: "keyName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IoTHubEventSourceCommonProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IoTHubEventSourceCommonProperties",
    modelProperties: {
      ...AzureEventSourceProperties.type.modelProperties,
      iotHubName: {
        serializedName: "iotHubName",
        required: true,
        type: {
          name: "String"
        }
      },
      consumerGroupName: {
        serializedName: "consumerGroupName",
        required: true,
        type: {
          name: "String"
        }
      },
      keyName: {
        serializedName: "keyName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventHubEventSourceCreationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventHubEventSourceCreationProperties",
    modelProperties: {
      ...EventHubEventSourceCommonProperties.type.modelProperties,
      sharedAccessKey: {
        serializedName: "sharedAccessKey",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventHubEventSourceResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventHubEventSourceResourceProperties",
    modelProperties: {
      ...EventHubEventSourceCommonProperties.type.modelProperties
    }
  }
};

export const IoTHubEventSourceCreationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IoTHubEventSourceCreationProperties",
    modelProperties: {
      ...IoTHubEventSourceCommonProperties.type.modelProperties,
      sharedAccessKey: {
        serializedName: "sharedAccessKey",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IoTHubEventSourceResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IoTHubEventSourceResourceProperties",
    modelProperties: {
      ...IoTHubEventSourceCommonProperties.type.modelProperties
    }
  }
};

export let discriminators = {
  EnvironmentUpdateParameters: EnvironmentUpdateParameters,
  EventSourceUpdateParameters: EventSourceUpdateParameters,
  "CreateOrUpdateTrackedResourceProperties.EnvironmentCreateOrUpdateParameters": EnvironmentCreateOrUpdateParameters,
  "CreateOrUpdateTrackedResourceProperties.EventSourceCreateOrUpdateParameters": EventSourceCreateOrUpdateParameters,
  "EnvironmentUpdateParameters.Gen1": Gen1EnvironmentUpdateParameters,
  "EnvironmentUpdateParameters.Gen2": Gen2EnvironmentUpdateParameters,
  "EventSourceUpdateParameters.Microsoft.EventHub": EventHubEventSourceUpdateParameters,
  "EventSourceUpdateParameters.Microsoft.IoTHub": IoTHubEventSourceUpdateParameters,
  "EnvironmentCreateOrUpdateParameters.Gen1": Gen1EnvironmentCreateOrUpdateParameters,
  "EnvironmentCreateOrUpdateParameters.Gen2": Gen2EnvironmentCreateOrUpdateParameters,
  "EventSourceCreateOrUpdateParameters.Microsoft.EventHub": EventHubEventSourceCreateOrUpdateParameters,
  "EventSourceCreateOrUpdateParameters.Microsoft.IoTHub": IoTHubEventSourceCreateOrUpdateParameters,
  "TrackedResource.EnvironmentResource": EnvironmentResource,
  "TrackedResource.EventSourceResource": EventSourceResource,
  "EnvironmentResource.Gen1": Gen1EnvironmentResource,
  "EnvironmentResource.Gen2": Gen2EnvironmentResource,
  "EventSourceResource.Microsoft.EventHub": EventHubEventSourceResource,
  "EventSourceResource.Microsoft.IoTHub": IoTHubEventSourceResource
};
