/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/eventSourcesMappers";
import * as Parameters from "../models/parameters";
import { TimeSeriesInsightsClientContext } from "../timeSeriesInsightsClientContext";

/** Class representing a EventSources. */
export class EventSources {
  private readonly client: TimeSeriesInsightsClientContext;

  /**
   * Create a EventSources.
   * @param {TimeSeriesInsightsClientContext} client Reference to the service client.
   */
  constructor(client: TimeSeriesInsightsClientContext) {
    this.client = client;
  }

  /**
   * Create or update an event source under the specified environment.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param environmentName The name of the Time Series Insights environment associated with the
   * specified resource group.
   * @param eventSourceName Name of the event source.
   * @param parameters Parameters for creating an event source resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventSourcesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, environmentName: string, eventSourceName: string, parameters: Models.EventSourceCreateOrUpdateParametersUnion, options?: msRest.RequestOptionsBase): Promise<Models.EventSourcesCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName Name of an Azure Resource group.
   * @param environmentName The name of the Time Series Insights environment associated with the
   * specified resource group.
   * @param eventSourceName Name of the event source.
   * @param parameters Parameters for creating an event source resource.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, environmentName: string, eventSourceName: string, parameters: Models.EventSourceCreateOrUpdateParametersUnion, callback: msRest.ServiceCallback<Models.EventSourceResourceUnion>): void;
  /**
   * @param resourceGroupName Name of an Azure Resource group.
   * @param environmentName The name of the Time Series Insights environment associated with the
   * specified resource group.
   * @param eventSourceName Name of the event source.
   * @param parameters Parameters for creating an event source resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, environmentName: string, eventSourceName: string, parameters: Models.EventSourceCreateOrUpdateParametersUnion, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EventSourceResourceUnion>): void;
  createOrUpdate(resourceGroupName: string, environmentName: string, eventSourceName: string, parameters: Models.EventSourceCreateOrUpdateParametersUnion, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EventSourceResourceUnion>, callback?: msRest.ServiceCallback<Models.EventSourceResourceUnion>): Promise<Models.EventSourcesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        environmentName,
        eventSourceName,
        parameters,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.EventSourcesCreateOrUpdateResponse>;
  }

  /**
   * Gets the event source with the specified name in the specified environment.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param environmentName The name of the Time Series Insights environment associated with the
   * specified resource group.
   * @param eventSourceName The name of the Time Series Insights event source associated with the
   * specified environment.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventSourcesGetResponse>
   */
  get(resourceGroupName: string, environmentName: string, eventSourceName: string, options?: msRest.RequestOptionsBase): Promise<Models.EventSourcesGetResponse>;
  /**
   * @param resourceGroupName Name of an Azure Resource group.
   * @param environmentName The name of the Time Series Insights environment associated with the
   * specified resource group.
   * @param eventSourceName The name of the Time Series Insights event source associated with the
   * specified environment.
   * @param callback The callback
   */
  get(resourceGroupName: string, environmentName: string, eventSourceName: string, callback: msRest.ServiceCallback<Models.EventSourceResourceUnion>): void;
  /**
   * @param resourceGroupName Name of an Azure Resource group.
   * @param environmentName The name of the Time Series Insights environment associated with the
   * specified resource group.
   * @param eventSourceName The name of the Time Series Insights event source associated with the
   * specified environment.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, environmentName: string, eventSourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EventSourceResourceUnion>): void;
  get(resourceGroupName: string, environmentName: string, eventSourceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EventSourceResourceUnion>, callback?: msRest.ServiceCallback<Models.EventSourceResourceUnion>): Promise<Models.EventSourcesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        environmentName,
        eventSourceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.EventSourcesGetResponse>;
  }

  /**
   * Updates the event source with the specified name in the specified subscription, resource group,
   * and environment.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param environmentName The name of the Time Series Insights environment associated with the
   * specified resource group.
   * @param eventSourceName The name of the Time Series Insights event source associated with the
   * specified environment.
   * @param eventSourceUpdateParameters Request object that contains the updated information for the
   * event source.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventSourcesUpdateResponse>
   */
  update(resourceGroupName: string, environmentName: string, eventSourceName: string, eventSourceUpdateParameters: Models.EventSourceUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.EventSourcesUpdateResponse>;
  /**
   * @param resourceGroupName Name of an Azure Resource group.
   * @param environmentName The name of the Time Series Insights environment associated with the
   * specified resource group.
   * @param eventSourceName The name of the Time Series Insights event source associated with the
   * specified environment.
   * @param eventSourceUpdateParameters Request object that contains the updated information for the
   * event source.
   * @param callback The callback
   */
  update(resourceGroupName: string, environmentName: string, eventSourceName: string, eventSourceUpdateParameters: Models.EventSourceUpdateParameters, callback: msRest.ServiceCallback<Models.EventSourceResourceUnion>): void;
  /**
   * @param resourceGroupName Name of an Azure Resource group.
   * @param environmentName The name of the Time Series Insights environment associated with the
   * specified resource group.
   * @param eventSourceName The name of the Time Series Insights event source associated with the
   * specified environment.
   * @param eventSourceUpdateParameters Request object that contains the updated information for the
   * event source.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, environmentName: string, eventSourceName: string, eventSourceUpdateParameters: Models.EventSourceUpdateParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EventSourceResourceUnion>): void;
  update(resourceGroupName: string, environmentName: string, eventSourceName: string, eventSourceUpdateParameters: Models.EventSourceUpdateParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EventSourceResourceUnion>, callback?: msRest.ServiceCallback<Models.EventSourceResourceUnion>): Promise<Models.EventSourcesUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        environmentName,
        eventSourceName,
        eventSourceUpdateParameters,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.EventSourcesUpdateResponse>;
  }

  /**
   * Deletes the event source with the specified name in the specified subscription, resource group,
   * and environment
   * @param resourceGroupName Name of an Azure Resource group.
   * @param environmentName The name of the Time Series Insights environment associated with the
   * specified resource group.
   * @param eventSourceName The name of the Time Series Insights event source associated with the
   * specified environment.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, environmentName: string, eventSourceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of an Azure Resource group.
   * @param environmentName The name of the Time Series Insights environment associated with the
   * specified resource group.
   * @param eventSourceName The name of the Time Series Insights event source associated with the
   * specified environment.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, environmentName: string, eventSourceName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of an Azure Resource group.
   * @param environmentName The name of the Time Series Insights environment associated with the
   * specified resource group.
   * @param eventSourceName The name of the Time Series Insights event source associated with the
   * specified environment.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, environmentName: string, eventSourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, environmentName: string, eventSourceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        environmentName,
        eventSourceName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Lists all the available event sources associated with the subscription and within the specified
   * resource group and environment.
   * @param resourceGroupName Name of an Azure Resource group.
   * @param environmentName The name of the Time Series Insights environment associated with the
   * specified resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventSourcesListByEnvironmentResponse>
   */
  listByEnvironment(resourceGroupName: string, environmentName: string, options?: msRest.RequestOptionsBase): Promise<Models.EventSourcesListByEnvironmentResponse>;
  /**
   * @param resourceGroupName Name of an Azure Resource group.
   * @param environmentName The name of the Time Series Insights environment associated with the
   * specified resource group.
   * @param callback The callback
   */
  listByEnvironment(resourceGroupName: string, environmentName: string, callback: msRest.ServiceCallback<Models.EventSourceListResponse>): void;
  /**
   * @param resourceGroupName Name of an Azure Resource group.
   * @param environmentName The name of the Time Series Insights environment associated with the
   * specified resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByEnvironment(resourceGroupName: string, environmentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EventSourceListResponse>): void;
  listByEnvironment(resourceGroupName: string, environmentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EventSourceListResponse>, callback?: msRest.ServiceCallback<Models.EventSourceListResponse>): Promise<Models.EventSourcesListByEnvironmentResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        environmentName,
        options
      },
      listByEnvironmentOperationSpec,
      callback) as Promise<Models.EventSourcesListByEnvironmentResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/eventSources/{eventSourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.environmentName1,
    Parameters.eventSourceName0
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.EventSourceCreateOrUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.EventSourceResource
    },
    201: {
      bodyMapper: Mappers.EventSourceResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/eventSources/{eventSourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.environmentName1,
    Parameters.eventSourceName1
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventSourceResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/eventSources/{eventSourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.environmentName1,
    Parameters.eventSourceName1
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "eventSourceUpdateParameters",
    mapper: {
      ...Mappers.EventSourceUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.EventSourceResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/eventSources/{eventSourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.environmentName1,
    Parameters.eventSourceName1
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByEnvironmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/eventSources",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.environmentName1
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventSourceListResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
