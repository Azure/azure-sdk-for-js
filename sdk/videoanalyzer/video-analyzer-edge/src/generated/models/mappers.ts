/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const LivePipeline: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LivePipeline",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "LivePipelineProperties"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const LivePipelineProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LivePipelineProperties",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      topologyName: {
        serializedName: "topologyName",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ParameterDefinition"
            }
          }
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ParameterDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ParameterDefinition",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LivePipelineCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LivePipelineCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LivePipeline"
            }
          }
        }
      },
      continuationToken: {
        serializedName: "@continuationToken",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PipelineTopologyCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PipelineTopologyCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PipelineTopology"
            }
          }
        }
      },
      continuationToken: {
        serializedName: "@continuationToken",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PipelineTopology: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PipelineTopology",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PipelineTopologyProperties"
        }
      }
    }
  }
};

export const PipelineTopologyProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PipelineTopologyProperties",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ParameterDeclaration"
            }
          }
        }
      },
      sources: {
        serializedName: "sources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SourceNodeBase"
            }
          }
        }
      },
      processors: {
        serializedName: "processors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProcessorNodeBase"
            }
          }
        }
      },
      sinks: {
        serializedName: "sinks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SinkNodeBase"
            }
          }
        }
      }
    }
  }
};

export const ParameterDeclaration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ParameterDeclaration",
    modelProperties: {
      name: {
        constraints: {
          MaxLength: 64
        },
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      default: {
        serializedName: "default",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SourceNodeBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SourceNodeBase",
    uberParent: "SourceNodeBase",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "@type"
    },
    modelProperties: {
      "@type": {
        serializedName: "@type",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProcessorNodeBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProcessorNodeBase",
    uberParent: "ProcessorNodeBase",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "@type"
    },
    modelProperties: {
      "@type": {
        serializedName: "@type",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      inputs: {
        serializedName: "inputs",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NodeInput"
            }
          }
        }
      }
    }
  }
};

export const NodeInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeInput",
    modelProperties: {
      nodeName: {
        serializedName: "nodeName",
        required: true,
        type: {
          name: "String"
        }
      },
      outputSelectors: {
        serializedName: "outputSelectors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OutputSelector"
            }
          }
        }
      }
    }
  }
};

export const OutputSelector: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OutputSelector",
    modelProperties: {
      property: {
        serializedName: "property",
        type: {
          name: "String"
        }
      },
      operator: {
        serializedName: "operator",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SinkNodeBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SinkNodeBase",
    uberParent: "SinkNodeBase",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "@type"
    },
    modelProperties: {
      "@type": {
        serializedName: "@type",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      inputs: {
        serializedName: "inputs",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NodeInput"
            }
          }
        }
      }
    }
  }
};

export const EndpointBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EndpointBase",
    uberParent: "EndpointBase",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "@type"
    },
    modelProperties: {
      "@type": {
        serializedName: "@type",
        required: true,
        type: {
          name: "String"
        }
      },
      credentials: {
        serializedName: "credentials",
        type: {
          name: "Composite",
          className: "CredentialsBase"
        }
      },
      url: {
        serializedName: "url",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CredentialsBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CredentialsBase",
    uberParent: "CredentialsBase",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "@type"
    },
    modelProperties: {
      "@type": {
        serializedName: "@type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateSource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificateSource",
    uberParent: "CertificateSource",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "@type"
    },
    modelProperties: {
      "@type": {
        serializedName: "@type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TlsValidationOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TlsValidationOptions",
    modelProperties: {
      ignoreHostname: {
        serializedName: "ignoreHostname",
        type: {
          name: "String"
        }
      },
      ignoreSignature: {
        serializedName: "ignoreSignature",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VideoPublishingOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VideoPublishingOptions",
    modelProperties: {
      enableVideoPreviewImage: {
        serializedName: "enableVideoPreviewImage",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VideoCreationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VideoCreationProperties",
    modelProperties: {
      title: {
        serializedName: "title",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      segmentLength: {
        serializedName: "segmentLength",
        type: {
          name: "String"
        }
      },
      retentionPeriod: {
        serializedName: "retentionPeriod",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NamedLineBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NamedLineBase",
    uberParent: "NamedLineBase",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "@type"
    },
    modelProperties: {
      "@type": {
        serializedName: "@type",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageProperties",
    modelProperties: {
      scale: {
        serializedName: "scale",
        type: {
          name: "Composite",
          className: "ImageScale"
        }
      },
      format: {
        serializedName: "format",
        type: {
          name: "Composite",
          className: "ImageFormatProperties"
        }
      }
    }
  }
};

export const ImageScale: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageScale",
    modelProperties: {
      mode: {
        serializedName: "mode",
        type: {
          name: "String"
        }
      },
      width: {
        serializedName: "width",
        type: {
          name: "String"
        }
      },
      height: {
        serializedName: "height",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageFormatProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageFormatProperties",
    uberParent: "ImageFormatProperties",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "@type"
    },
    modelProperties: {
      "@type": {
        serializedName: "@type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SamplingOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SamplingOptions",
    modelProperties: {
      skipSamplesWithoutAnnotation: {
        serializedName: "skipSamplesWithoutAnnotation",
        type: {
          name: "String"
        }
      },
      maximumSamplesPerSecond: {
        serializedName: "maximumSamplesPerSecond",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GrpcExtensionDataTransfer: coreClient.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.GrpcExtensionDataTransfer",
  type: {
    name: "Composite",
    className: "GrpcExtensionDataTransfer",
    modelProperties: {
      sharedMemorySizeMiB: {
        serializedName: "sharedMemorySizeMiB",
        type: {
          name: "String"
        }
      },
      mode: {
        serializedName: "mode",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NamedPolygonBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NamedPolygonBase",
    uberParent: "NamedPolygonBase",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "@type"
    },
    modelProperties: {
      "@type": {
        serializedName: "@type",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SpatialAnalysisOperationBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SpatialAnalysisOperationBase",
    uberParent: "SpatialAnalysisOperationBase",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "@type"
    },
    modelProperties: {
      "@type": {
        serializedName: "@type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SpatialAnalysisOperationEventBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SpatialAnalysisOperationEventBase",
    modelProperties: {
      threshold: {
        serializedName: "threshold",
        type: {
          name: "String"
        }
      },
      focus: {
        serializedName: "focus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SpatialAnalysisPersonCountZoneEvents: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SpatialAnalysisPersonCountZoneEvents",
    modelProperties: {
      zone: {
        serializedName: "zone",
        type: {
          name: "Composite",
          className: "NamedPolygonBase"
        }
      },
      events: {
        serializedName: "events",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SpatialAnalysisPersonCountEvent"
            }
          }
        }
      }
    }
  }
};

export const SpatialAnalysisPersonZoneCrossingZoneEvents: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SpatialAnalysisPersonZoneCrossingZoneEvents",
    modelProperties: {
      zone: {
        serializedName: "zone",
        type: {
          name: "Composite",
          className: "NamedPolygonBase"
        }
      },
      events: {
        serializedName: "events",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SpatialAnalysisPersonZoneCrossingEvent"
            }
          }
        }
      }
    }
  }
};

export const SpatialAnalysisPersonDistanceZoneEvents: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SpatialAnalysisPersonDistanceZoneEvents",
    modelProperties: {
      zone: {
        serializedName: "zone",
        type: {
          name: "Composite",
          className: "NamedPolygonBase"
        }
      },
      events: {
        serializedName: "events",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SpatialAnalysisPersonDistanceEvent"
            }
          }
        }
      }
    }
  }
};

export const SpatialAnalysisPersonLineCrossingLineEvents: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SpatialAnalysisPersonLineCrossingLineEvents",
    modelProperties: {
      line: {
        serializedName: "line",
        type: {
          name: "Composite",
          className: "NamedLineBase"
        }
      },
      events: {
        serializedName: "events",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SpatialAnalysisPersonLineCrossingEvent"
            }
          }
        }
      }
    }
  }
};

export const RemoteDeviceAdapter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RemoteDeviceAdapter",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RemoteDeviceAdapterProperties"
        }
      }
    }
  }
};

export const RemoteDeviceAdapterProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RemoteDeviceAdapterProperties",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "Composite",
          className: "RemoteDeviceAdapterTarget"
        }
      },
      iotHubDeviceConnection: {
        serializedName: "iotHubDeviceConnection",
        type: {
          name: "Composite",
          className: "IotHubDeviceConnection"
        }
      }
    }
  }
};

export const RemoteDeviceAdapterTarget: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RemoteDeviceAdapterTarget",
    modelProperties: {
      host: {
        serializedName: "host",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IotHubDeviceConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IotHubDeviceConnection",
    modelProperties: {
      deviceId: {
        serializedName: "deviceId",
        required: true,
        type: {
          name: "String"
        }
      },
      credentials: {
        serializedName: "credentials",
        type: {
          name: "Composite",
          className: "CredentialsBase"
        }
      }
    }
  }
};

export const RemoteDeviceAdapterCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RemoteDeviceAdapterCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RemoteDeviceAdapter"
            }
          }
        }
      },
      continuationToken: {
        serializedName: "@continuationToken",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiscoveredOnvifDeviceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiscoveredOnvifDeviceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiscoveredOnvifDevice"
            }
          }
        }
      }
    }
  }
};

export const DiscoveredOnvifDevice: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiscoveredOnvifDevice",
    modelProperties: {
      serviceIdentifier: {
        serializedName: "serviceIdentifier",
        type: {
          name: "String"
        }
      },
      remoteIPAddress: {
        serializedName: "remoteIPAddress",
        type: {
          name: "String"
        }
      },
      scopes: {
        serializedName: "scopes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      endpoints: {
        serializedName: "endpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const OnvifDevice: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OnvifDevice",
    modelProperties: {
      hostname: {
        serializedName: "hostname",
        type: {
          name: "Composite",
          className: "OnvifHostName"
        }
      },
      systemDateTime: {
        serializedName: "systemDateTime",
        type: {
          name: "Composite",
          className: "OnvifSystemDateTime"
        }
      },
      dns: {
        serializedName: "dns",
        type: {
          name: "Composite",
          className: "OnvifDns"
        }
      },
      mediaProfiles: {
        serializedName: "mediaProfiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MediaProfile"
            }
          }
        }
      }
    }
  }
};

export const OnvifHostName: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OnvifHostName",
    modelProperties: {
      fromDhcp: {
        serializedName: "fromDhcp",
        type: {
          name: "Boolean"
        }
      },
      hostname: {
        serializedName: "hostname",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OnvifSystemDateTime: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OnvifSystemDateTime",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      time: {
        serializedName: "time",
        type: {
          name: "String"
        }
      },
      timeZone: {
        serializedName: "timeZone",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OnvifDns: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OnvifDns",
    modelProperties: {
      fromDhcp: {
        serializedName: "fromDhcp",
        type: {
          name: "Boolean"
        }
      },
      ipv4Address: {
        serializedName: "ipv4Address",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      ipv6Address: {
        serializedName: "ipv6Address",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const MediaProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MediaProfile",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      mediaUri: {
        serializedName: "mediaUri",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      videoEncoderConfiguration: {
        serializedName: "videoEncoderConfiguration",
        type: {
          name: "Composite",
          className: "VideoEncoderConfiguration"
        }
      }
    }
  }
};

export const VideoEncoderConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VideoEncoderConfiguration",
    modelProperties: {
      encoding: {
        serializedName: "encoding",
        type: {
          name: "String"
        }
      },
      quality: {
        serializedName: "quality",
        type: {
          name: "Number"
        }
      },
      resolution: {
        serializedName: "resolution",
        type: {
          name: "Composite",
          className: "VideoResolution"
        }
      },
      rateControl: {
        serializedName: "rateControl",
        type: {
          name: "Composite",
          className: "RateControl"
        }
      },
      h264: {
        serializedName: "h264",
        type: {
          name: "Composite",
          className: "H264Configuration"
        }
      },
      mpeg4: {
        serializedName: "mpeg4",
        type: {
          name: "Composite",
          className: "Mpeg4Configuration"
        }
      }
    }
  }
};

export const VideoResolution: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VideoResolution",
    modelProperties: {
      width: {
        serializedName: "width",
        type: {
          name: "Number"
        }
      },
      height: {
        serializedName: "height",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RateControl: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RateControl",
    modelProperties: {
      bitRateLimit: {
        serializedName: "bitRateLimit",
        type: {
          name: "Number"
        }
      },
      encodingInterval: {
        serializedName: "encodingInterval",
        type: {
          name: "Number"
        }
      },
      frameRateLimit: {
        serializedName: "frameRateLimit",
        type: {
          name: "Number"
        }
      },
      guaranteedFrameRate: {
        serializedName: "guaranteedFrameRate",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const H264Configuration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "H264Configuration",
    modelProperties: {
      govLength: {
        serializedName: "govLength",
        type: {
          name: "Number"
        }
      },
      profile: {
        serializedName: "profile",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Mpeg4Configuration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Mpeg4Configuration",
    modelProperties: {
      govLength: {
        serializedName: "govLength",
        type: {
          name: "Number"
        }
      },
      profile: {
        serializedName: "profile",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MediaUri: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MediaUri",
    modelProperties: {
      uri: {
        serializedName: "uri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MethodRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MethodRequest",
    uberParent: "MethodRequest",
    polymorphicDiscriminator: {
      serializedName: "methodName",
      clientName: "methodName"
    },
    modelProperties: {
      methodName: {
        serializedName: "methodName",
        required: true,
        readOnly: true,
        type: {
          name: "String"
        }
      },
      apiVersion: {
        defaultValue: "1.1",
        isConstant: true,
        serializedName: "@apiVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RtspSource: coreClient.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.RtspSource",
  type: {
    name: "Composite",
    className: "RtspSource",
    uberParent: "SourceNodeBase",
    polymorphicDiscriminator: SourceNodeBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...SourceNodeBase.type.modelProperties,
      transport: {
        serializedName: "transport",
        type: {
          name: "String"
        }
      },
      endpoint: {
        serializedName: "endpoint",
        type: {
          name: "Composite",
          className: "EndpointBase"
        }
      }
    }
  }
};

export const IotHubMessageSource: coreClient.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.IotHubMessageSource",
  type: {
    name: "Composite",
    className: "IotHubMessageSource",
    uberParent: "SourceNodeBase",
    polymorphicDiscriminator: SourceNodeBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...SourceNodeBase.type.modelProperties,
      hubInputName: {
        serializedName: "hubInputName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MotionDetectionProcessor: coreClient.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.MotionDetectionProcessor",
  type: {
    name: "Composite",
    className: "MotionDetectionProcessor",
    uberParent: "ProcessorNodeBase",
    polymorphicDiscriminator: ProcessorNodeBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProcessorNodeBase.type.modelProperties,
      sensitivity: {
        serializedName: "sensitivity",
        type: {
          name: "String"
        }
      },
      outputMotionRegion: {
        serializedName: "outputMotionRegion",
        type: {
          name: "Boolean"
        }
      },
      eventAggregationWindow: {
        serializedName: "eventAggregationWindow",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ObjectTrackingProcessor: coreClient.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.ObjectTrackingProcessor",
  type: {
    name: "Composite",
    className: "ObjectTrackingProcessor",
    uberParent: "ProcessorNodeBase",
    polymorphicDiscriminator: ProcessorNodeBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProcessorNodeBase.type.modelProperties,
      accuracy: {
        serializedName: "accuracy",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LineCrossingProcessor: coreClient.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.LineCrossingProcessor",
  type: {
    name: "Composite",
    className: "LineCrossingProcessor",
    uberParent: "ProcessorNodeBase",
    polymorphicDiscriminator: ProcessorNodeBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProcessorNodeBase.type.modelProperties,
      lines: {
        serializedName: "lines",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NamedLineBase"
            }
          }
        }
      }
    }
  }
};

export const ExtensionProcessorBase: coreClient.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.ExtensionProcessorBase",
  type: {
    name: "Composite",
    className: "ExtensionProcessorBase",
    uberParent: "ProcessorNodeBase",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "@type"
    },
    modelProperties: {
      ...ProcessorNodeBase.type.modelProperties,
      endpoint: {
        serializedName: "endpoint",
        type: {
          name: "Composite",
          className: "EndpointBase"
        }
      },
      image: {
        serializedName: "image",
        type: {
          name: "Composite",
          className: "ImageProperties"
        }
      },
      samplingOptions: {
        serializedName: "samplingOptions",
        type: {
          name: "Composite",
          className: "SamplingOptions"
        }
      }
    }
  }
};

export const SignalGateProcessor: coreClient.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.SignalGateProcessor",
  type: {
    name: "Composite",
    className: "SignalGateProcessor",
    uberParent: "ProcessorNodeBase",
    polymorphicDiscriminator: ProcessorNodeBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProcessorNodeBase.type.modelProperties,
      activationEvaluationWindow: {
        serializedName: "activationEvaluationWindow",
        type: {
          name: "String"
        }
      },
      activationSignalOffset: {
        serializedName: "activationSignalOffset",
        type: {
          name: "String"
        }
      },
      minimumActivationTime: {
        serializedName: "minimumActivationTime",
        type: {
          name: "String"
        }
      },
      maximumActivationTime: {
        serializedName: "maximumActivationTime",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CognitiveServicesVisionProcessor: coreClient.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.CognitiveServicesVisionProcessor",
  type: {
    name: "Composite",
    className: "CognitiveServicesVisionProcessor",
    uberParent: "ProcessorNodeBase",
    polymorphicDiscriminator: ProcessorNodeBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProcessorNodeBase.type.modelProperties,
      endpoint: {
        serializedName: "endpoint",
        type: {
          name: "Composite",
          className: "EndpointBase"
        }
      },
      image: {
        serializedName: "image",
        type: {
          name: "Composite",
          className: "ImageProperties"
        }
      },
      samplingOptions: {
        serializedName: "samplingOptions",
        type: {
          name: "Composite",
          className: "SamplingOptions"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "Composite",
          className: "SpatialAnalysisOperationBase"
        }
      }
    }
  }
};

export const IotHubMessageSink: coreClient.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.IotHubMessageSink",
  type: {
    name: "Composite",
    className: "IotHubMessageSink",
    uberParent: "SinkNodeBase",
    polymorphicDiscriminator: SinkNodeBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...SinkNodeBase.type.modelProperties,
      hubOutputName: {
        serializedName: "hubOutputName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileSink: coreClient.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.FileSink",
  type: {
    name: "Composite",
    className: "FileSink",
    uberParent: "SinkNodeBase",
    polymorphicDiscriminator: SinkNodeBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...SinkNodeBase.type.modelProperties,
      baseDirectoryPath: {
        serializedName: "baseDirectoryPath",
        required: true,
        type: {
          name: "String"
        }
      },
      fileNamePattern: {
        serializedName: "fileNamePattern",
        required: true,
        type: {
          name: "String"
        }
      },
      maximumSizeMiB: {
        serializedName: "maximumSizeMiB",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VideoSink: coreClient.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.VideoSink",
  type: {
    name: "Composite",
    className: "VideoSink",
    uberParent: "SinkNodeBase",
    polymorphicDiscriminator: SinkNodeBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...SinkNodeBase.type.modelProperties,
      videoName: {
        serializedName: "videoName",
        required: true,
        type: {
          name: "String"
        }
      },
      videoCreationProperties: {
        serializedName: "videoCreationProperties",
        type: {
          name: "Composite",
          className: "VideoCreationProperties"
        }
      },
      videoPublishingOptions: {
        serializedName: "videoPublishingOptions",
        type: {
          name: "Composite",
          className: "VideoPublishingOptions"
        }
      },
      localMediaCachePath: {
        serializedName: "localMediaCachePath",
        required: true,
        type: {
          name: "String"
        }
      },
      localMediaCacheMaximumSizeMiB: {
        serializedName: "localMediaCacheMaximumSizeMiB",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UnsecuredEndpoint: coreClient.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.UnsecuredEndpoint",
  type: {
    name: "Composite",
    className: "UnsecuredEndpoint",
    uberParent: "EndpointBase",
    polymorphicDiscriminator: EndpointBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...EndpointBase.type.modelProperties
    }
  }
};

export const TlsEndpoint: coreClient.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.TlsEndpoint",
  type: {
    name: "Composite",
    className: "TlsEndpoint",
    uberParent: "EndpointBase",
    polymorphicDiscriminator: EndpointBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...EndpointBase.type.modelProperties,
      trustedCertificates: {
        serializedName: "trustedCertificates",
        type: {
          name: "Composite",
          className: "CertificateSource"
        }
      },
      validationOptions: {
        serializedName: "validationOptions",
        type: {
          name: "Composite",
          className: "TlsValidationOptions"
        }
      }
    }
  }
};

export const UsernamePasswordCredentials: coreClient.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.UsernamePasswordCredentials",
  type: {
    name: "Composite",
    className: "UsernamePasswordCredentials",
    uberParent: "CredentialsBase",
    polymorphicDiscriminator: CredentialsBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...CredentialsBase.type.modelProperties,
      username: {
        serializedName: "username",
        required: true,
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HttpHeaderCredentials: coreClient.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.HttpHeaderCredentials",
  type: {
    name: "Composite",
    className: "HttpHeaderCredentials",
    uberParent: "CredentialsBase",
    polymorphicDiscriminator: CredentialsBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...CredentialsBase.type.modelProperties,
      headerName: {
        serializedName: "headerName",
        required: true,
        type: {
          name: "String"
        }
      },
      headerValue: {
        serializedName: "headerValue",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SymmetricKeyCredentials: coreClient.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.SymmetricKeyCredentials",
  type: {
    name: "Composite",
    className: "SymmetricKeyCredentials",
    uberParent: "CredentialsBase",
    polymorphicDiscriminator: CredentialsBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...CredentialsBase.type.modelProperties,
      key: {
        serializedName: "key",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PemCertificateList: coreClient.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.PemCertificateList",
  type: {
    name: "Composite",
    className: "PemCertificateList",
    uberParent: "CertificateSource",
    polymorphicDiscriminator: CertificateSource.type.polymorphicDiscriminator,
    modelProperties: {
      ...CertificateSource.type.modelProperties,
      certificates: {
        serializedName: "certificates",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const NamedLineString: coreClient.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.NamedLineString",
  type: {
    name: "Composite",
    className: "NamedLineString",
    uberParent: "NamedLineBase",
    polymorphicDiscriminator: NamedLineBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...NamedLineBase.type.modelProperties,
      line: {
        serializedName: "line",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageFormatRaw: coreClient.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.ImageFormatRaw",
  type: {
    name: "Composite",
    className: "ImageFormatRaw",
    uberParent: "ImageFormatProperties",
    polymorphicDiscriminator:
      ImageFormatProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ImageFormatProperties.type.modelProperties,
      pixelFormat: {
        serializedName: "pixelFormat",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageFormatJpeg: coreClient.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.ImageFormatJpeg",
  type: {
    name: "Composite",
    className: "ImageFormatJpeg",
    uberParent: "ImageFormatProperties",
    polymorphicDiscriminator:
      ImageFormatProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ImageFormatProperties.type.modelProperties,
      quality: {
        serializedName: "quality",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageFormatBmp: coreClient.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.ImageFormatBmp",
  type: {
    name: "Composite",
    className: "ImageFormatBmp",
    uberParent: "ImageFormatProperties",
    polymorphicDiscriminator:
      ImageFormatProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ImageFormatProperties.type.modelProperties
    }
  }
};

export const ImageFormatPng: coreClient.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.ImageFormatPng",
  type: {
    name: "Composite",
    className: "ImageFormatPng",
    uberParent: "ImageFormatProperties",
    polymorphicDiscriminator:
      ImageFormatProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ImageFormatProperties.type.modelProperties
    }
  }
};

export const NamedPolygonString: coreClient.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.NamedPolygonString",
  type: {
    name: "Composite",
    className: "NamedPolygonString",
    uberParent: "NamedPolygonBase",
    polymorphicDiscriminator: NamedPolygonBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...NamedPolygonBase.type.modelProperties,
      polygon: {
        serializedName: "polygon",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SpatialAnalysisCustomOperation: coreClient.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.SpatialAnalysisCustomOperation",
  type: {
    name: "Composite",
    className: "SpatialAnalysisCustomOperation",
    uberParent: "SpatialAnalysisOperationBase",
    polymorphicDiscriminator:
      SpatialAnalysisOperationBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...SpatialAnalysisOperationBase.type.modelProperties,
      extensionConfiguration: {
        serializedName: "extensionConfiguration",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SpatialAnalysisTypedOperationBase: coreClient.CompositeMapper = {
  serializedName: "SpatialAnalysisTypedOperationBase",
  type: {
    name: "Composite",
    className: "SpatialAnalysisTypedOperationBase",
    uberParent: "SpatialAnalysisOperationBase",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "@type"
    },
    modelProperties: {
      ...SpatialAnalysisOperationBase.type.modelProperties,
      debug: {
        serializedName: "debug",
        type: {
          name: "String"
        }
      },
      calibrationConfiguration: {
        serializedName: "calibrationConfiguration",
        type: {
          name: "String"
        }
      },
      cameraConfiguration: {
        serializedName: "cameraConfiguration",
        type: {
          name: "String"
        }
      },
      cameraCalibratorNodeConfiguration: {
        serializedName: "cameraCalibratorNodeConfiguration",
        type: {
          name: "String"
        }
      },
      detectorNodeConfiguration: {
        serializedName: "detectorNodeConfiguration",
        type: {
          name: "String"
        }
      },
      trackerNodeConfiguration: {
        serializedName: "trackerNodeConfiguration",
        type: {
          name: "String"
        }
      },
      enableFaceMaskClassifier: {
        serializedName: "enableFaceMaskClassifier",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SpatialAnalysisPersonCountEvent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SpatialAnalysisPersonCountEvent",
    modelProperties: {
      ...SpatialAnalysisOperationEventBase.type.modelProperties,
      trigger: {
        serializedName: "trigger",
        type: {
          name: "String"
        }
      },
      outputFrequency: {
        serializedName: "outputFrequency",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SpatialAnalysisPersonZoneCrossingEvent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SpatialAnalysisPersonZoneCrossingEvent",
    modelProperties: {
      ...SpatialAnalysisOperationEventBase.type.modelProperties,
      eventType: {
        serializedName: "eventType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SpatialAnalysisPersonDistanceEvent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SpatialAnalysisPersonDistanceEvent",
    modelProperties: {
      ...SpatialAnalysisOperationEventBase.type.modelProperties,
      trigger: {
        serializedName: "trigger",
        type: {
          name: "String"
        }
      },
      outputFrequency: {
        serializedName: "outputFrequency",
        type: {
          name: "String"
        }
      },
      minimumDistanceThreshold: {
        serializedName: "minimumDistanceThreshold",
        type: {
          name: "String"
        }
      },
      maximumDistanceThreshold: {
        serializedName: "maximumDistanceThreshold",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SpatialAnalysisPersonLineCrossingEvent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SpatialAnalysisPersonLineCrossingEvent",
    modelProperties: {
      ...SpatialAnalysisOperationEventBase.type.modelProperties
    }
  }
};

export const GrpcExtension: coreClient.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.GrpcExtension",
  type: {
    name: "Composite",
    className: "GrpcExtension",
    uberParent: "ProcessorNodeBase",
    polymorphicDiscriminator: ProcessorNodeBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...ExtensionProcessorBase.type.modelProperties,
      dataTransfer: {
        serializedName: "dataTransfer",
        type: {
          name: "Composite",
          className: "GrpcExtensionDataTransfer"
        }
      },
      extensionConfiguration: {
        serializedName: "extensionConfiguration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HttpExtension: coreClient.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.HttpExtension",
  type: {
    name: "Composite",
    className: "HttpExtension",
    uberParent: "ProcessorNodeBase",
    polymorphicDiscriminator: ProcessorNodeBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...ExtensionProcessorBase.type.modelProperties
    }
  }
};

export const SpatialAnalysisPersonCountOperation: coreClient.CompositeMapper = {
  serializedName:
    "#Microsoft.VideoAnalyzer.SpatialAnalysisPersonCountOperation",
  type: {
    name: "Composite",
    className: "SpatialAnalysisPersonCountOperation",
    uberParent: "SpatialAnalysisOperationBase",
    polymorphicDiscriminator:
      SpatialAnalysisOperationBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...SpatialAnalysisTypedOperationBase.type.modelProperties,
      zones: {
        serializedName: "zones",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SpatialAnalysisPersonCountZoneEvents"
            }
          }
        }
      }
    }
  }
};

export const SpatialAnalysisPersonZoneCrossingOperation: coreClient.CompositeMapper = {
  serializedName:
    "#Microsoft.VideoAnalyzer.SpatialAnalysisPersonZoneCrossingOperation",
  type: {
    name: "Composite",
    className: "SpatialAnalysisPersonZoneCrossingOperation",
    uberParent: "SpatialAnalysisOperationBase",
    polymorphicDiscriminator:
      SpatialAnalysisOperationBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...SpatialAnalysisTypedOperationBase.type.modelProperties,
      zones: {
        serializedName: "zones",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SpatialAnalysisPersonZoneCrossingZoneEvents"
            }
          }
        }
      }
    }
  }
};

export const SpatialAnalysisPersonDistanceOperation: coreClient.CompositeMapper = {
  serializedName:
    "#Microsoft.VideoAnalyzer.SpatialAnalysisPersonDistanceOperation",
  type: {
    name: "Composite",
    className: "SpatialAnalysisPersonDistanceOperation",
    uberParent: "SpatialAnalysisOperationBase",
    polymorphicDiscriminator:
      SpatialAnalysisOperationBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...SpatialAnalysisTypedOperationBase.type.modelProperties,
      zones: {
        serializedName: "zones",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SpatialAnalysisPersonDistanceZoneEvents"
            }
          }
        }
      }
    }
  }
};

export const SpatialAnalysisPersonLineCrossingOperation: coreClient.CompositeMapper = {
  serializedName:
    "#Microsoft.VideoAnalyzer.SpatialAnalysisPersonLineCrossingOperation",
  type: {
    name: "Composite",
    className: "SpatialAnalysisPersonLineCrossingOperation",
    uberParent: "SpatialAnalysisOperationBase",
    polymorphicDiscriminator:
      SpatialAnalysisOperationBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...SpatialAnalysisTypedOperationBase.type.modelProperties,
      lines: {
        serializedName: "lines",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SpatialAnalysisPersonLineCrossingLineEvents"
            }
          }
        }
      }
    }
  }
};

export let discriminators = {
  SourceNodeBase: SourceNodeBase,
  ProcessorNodeBase: ProcessorNodeBase,
  SinkNodeBase: SinkNodeBase,
  EndpointBase: EndpointBase,
  CredentialsBase: CredentialsBase,
  CertificateSource: CertificateSource,
  NamedLineBase: NamedLineBase,
  ImageFormatProperties: ImageFormatProperties,
  NamedPolygonBase: NamedPolygonBase,
  SpatialAnalysisOperationBase: SpatialAnalysisOperationBase,
  "MethodRequest.undefined": MethodRequest,
  "SourceNodeBase.#Microsoft.VideoAnalyzer.RtspSource": RtspSource,
  "SourceNodeBase.#Microsoft.VideoAnalyzer.IotHubMessageSource": IotHubMessageSource,
  "ProcessorNodeBase.#Microsoft.VideoAnalyzer.MotionDetectionProcessor": MotionDetectionProcessor,
  "ProcessorNodeBase.#Microsoft.VideoAnalyzer.ObjectTrackingProcessor": ObjectTrackingProcessor,
  "ProcessorNodeBase.#Microsoft.VideoAnalyzer.LineCrossingProcessor": LineCrossingProcessor,
  "ProcessorNodeBase.#Microsoft.VideoAnalyzer.ExtensionProcessorBase": ExtensionProcessorBase,
  "ProcessorNodeBase.#Microsoft.VideoAnalyzer.SignalGateProcessor": SignalGateProcessor,
  "ProcessorNodeBase.#Microsoft.VideoAnalyzer.CognitiveServicesVisionProcessor": CognitiveServicesVisionProcessor,
  "SinkNodeBase.#Microsoft.VideoAnalyzer.IotHubMessageSink": IotHubMessageSink,
  "SinkNodeBase.#Microsoft.VideoAnalyzer.FileSink": FileSink,
  "SinkNodeBase.#Microsoft.VideoAnalyzer.VideoSink": VideoSink,
  "EndpointBase.#Microsoft.VideoAnalyzer.UnsecuredEndpoint": UnsecuredEndpoint,
  "EndpointBase.#Microsoft.VideoAnalyzer.TlsEndpoint": TlsEndpoint,
  "CredentialsBase.#Microsoft.VideoAnalyzer.UsernamePasswordCredentials": UsernamePasswordCredentials,
  "CredentialsBase.#Microsoft.VideoAnalyzer.HttpHeaderCredentials": HttpHeaderCredentials,
  "CredentialsBase.#Microsoft.VideoAnalyzer.SymmetricKeyCredentials": SymmetricKeyCredentials,
  "CertificateSource.#Microsoft.VideoAnalyzer.PemCertificateList": PemCertificateList,
  "NamedLineBase.#Microsoft.VideoAnalyzer.NamedLineString": NamedLineString,
  "ImageFormatProperties.#Microsoft.VideoAnalyzer.ImageFormatRaw": ImageFormatRaw,
  "ImageFormatProperties.#Microsoft.VideoAnalyzer.ImageFormatJpeg": ImageFormatJpeg,
  "ImageFormatProperties.#Microsoft.VideoAnalyzer.ImageFormatBmp": ImageFormatBmp,
  "ImageFormatProperties.#Microsoft.VideoAnalyzer.ImageFormatPng": ImageFormatPng,
  "NamedPolygonBase.#Microsoft.VideoAnalyzer.NamedPolygonString": NamedPolygonString,
  "SpatialAnalysisOperationBase.#Microsoft.VideoAnalyzer.SpatialAnalysisCustomOperation": SpatialAnalysisCustomOperation,
  "SpatialAnalysisOperationBase.SpatialAnalysisTypedOperationBase": SpatialAnalysisTypedOperationBase,
  "ProcessorNodeBase.#Microsoft.VideoAnalyzer.GrpcExtension": GrpcExtension,
  "ProcessorNodeBase.#Microsoft.VideoAnalyzer.HttpExtension": HttpExtension,
  "SpatialAnalysisOperationBase.#Microsoft.VideoAnalyzer.SpatialAnalysisPersonCountOperation": SpatialAnalysisPersonCountOperation,
  "SpatialAnalysisOperationBase.#Microsoft.VideoAnalyzer.SpatialAnalysisPersonZoneCrossingOperation": SpatialAnalysisPersonZoneCrossingOperation,
  "SpatialAnalysisOperationBase.#Microsoft.VideoAnalyzer.SpatialAnalysisPersonDistanceOperation": SpatialAnalysisPersonDistanceOperation,
  "SpatialAnalysisOperationBase.#Microsoft.VideoAnalyzer.SpatialAnalysisPersonLineCrossingOperation": SpatialAnalysisPersonLineCrossingOperation
};
