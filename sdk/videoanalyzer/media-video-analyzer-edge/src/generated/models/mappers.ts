/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const LivePipeline: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LivePipeline",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "LivePipelineProperties"
        }
      }
    }
  }
};

export const SystemData: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const LivePipelineProperties: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LivePipelineProperties",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      topologyName: {
        serializedName: "topologyName",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ParameterDefinition"
            }
          }
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ParameterDefinition: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ParameterDefinition",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LivePipelineCollection: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LivePipelineCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LivePipeline"
            }
          }
        }
      },
      continuationToken: {
        serializedName: "@continuationToken",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PipelineTopologyCollection: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PipelineTopologyCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PipelineTopology"
            }
          }
        }
      },
      continuationToken: {
        serializedName: "@continuationToken",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PipelineTopology: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PipelineTopology",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PipelineTopologyProperties"
        }
      }
    }
  }
};

export const PipelineTopologyProperties: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PipelineTopologyProperties",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ParameterDeclaration"
            }
          }
        }
      },
      sources: {
        serializedName: "sources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Source"
            }
          }
        }
      },
      processors: {
        serializedName: "processors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Processor"
            }
          }
        }
      },
      sinks: {
        serializedName: "sinks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Sink"
            }
          }
        }
      }
    }
  }
};

export const ParameterDeclaration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ParameterDeclaration",
    modelProperties: {
      name: {
        constraints: {
          MaxLength: 64
        },
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      default: {
        serializedName: "default",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Source: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Source",
    uberParent: "Source",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "@type"
    },
    modelProperties: {
      "@type": {
        serializedName: "@type",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Processor: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Processor",
    uberParent: "Processor",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "@type"
    },
    modelProperties: {
      "@type": {
        serializedName: "@type",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      inputs: {
        serializedName: "inputs",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NodeInput"
            }
          }
        }
      }
    }
  }
};

export const NodeInput: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeInput",
    modelProperties: {
      nodeName: {
        serializedName: "nodeName",
        required: true,
        type: {
          name: "String"
        }
      },
      outputSelectors: {
        serializedName: "outputSelectors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OutputSelector"
            }
          }
        }
      }
    }
  }
};

export const OutputSelector: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OutputSelector",
    modelProperties: {
      property: {
        serializedName: "property",
        type: {
          name: "String"
        }
      },
      operator: {
        serializedName: "operator",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sink: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sink",
    uberParent: "Sink",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "@type"
    },
    modelProperties: {
      "@type": {
        serializedName: "@type",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      inputs: {
        serializedName: "inputs",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NodeInput"
            }
          }
        }
      }
    }
  }
};

export const Endpoint: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Endpoint",
    uberParent: "Endpoint",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "@type"
    },
    modelProperties: {
      "@type": {
        serializedName: "@type",
        required: true,
        type: {
          name: "String"
        }
      },
      credentials: {
        serializedName: "credentials",
        type: {
          name: "Composite",
          className: "Credentials"
        }
      },
      url: {
        serializedName: "url",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Credentials: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Credentials",
    uberParent: "Credentials",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "@type"
    },
    modelProperties: {
      "@type": {
        serializedName: "@type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateSource: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificateSource",
    uberParent: "CertificateSource",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "@type"
    },
    modelProperties: {
      "@type": {
        serializedName: "@type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TlsValidationOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TlsValidationOptions",
    modelProperties: {
      ignoreHostname: {
        serializedName: "ignoreHostname",
        type: {
          name: "String"
        }
      },
      ignoreSignature: {
        serializedName: "ignoreSignature",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Line: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Line",
    modelProperties: {
      line: {
        serializedName: "line",
        type: {
          name: "Composite",
          className: "LineCoordinates"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LineCoordinates: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LineCoordinates",
    modelProperties: {
      start: {
        serializedName: "start",
        type: {
          name: "Composite",
          className: "Point"
        }
      },
      end: {
        serializedName: "end",
        type: {
          name: "Composite",
          className: "Point"
        }
      }
    }
  }
};

export const Point: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Point",
    modelProperties: {
      x: {
        serializedName: "x",
        required: true,
        type: {
          name: "String"
        }
      },
      y: {
        serializedName: "y",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Image: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Image",
    modelProperties: {
      scale: {
        serializedName: "scale",
        type: {
          name: "Composite",
          className: "ImageScale"
        }
      },
      format: {
        serializedName: "format",
        type: {
          name: "Composite",
          className: "ImageFormat"
        }
      }
    }
  }
};

export const ImageScale: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageScale",
    modelProperties: {
      mode: {
        serializedName: "mode",
        type: {
          name: "String"
        }
      },
      width: {
        serializedName: "width",
        type: {
          name: "String"
        }
      },
      height: {
        serializedName: "height",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageFormat: coreHttp.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.ImageFormat",
  type: {
    name: "Composite",
    className: "ImageFormat",
    uberParent: "ImageFormat",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "@type"
    },
    modelProperties: {
      "@type": {
        serializedName: "@type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SamplingOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SamplingOptions",
    modelProperties: {
      skipSamplesWithoutAnnotation: {
        serializedName: "skipSamplesWithoutAnnotation",
        type: {
          name: "String"
        }
      },
      maximumSamplesPerSecond: {
        serializedName: "maximumSamplesPerSecond",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GrpcExtensionDataTransfer: coreHttp.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.GrpcExtensionDataTransfer",
  type: {
    name: "Composite",
    className: "GrpcExtensionDataTransfer",
    modelProperties: {
      sharedMemorySizeMiB: {
        serializedName: "sharedMemorySizeMiB",
        type: {
          name: "String"
        }
      },
      mode: {
        serializedName: "mode",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MethodRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MethodRequest",
    uberParent: "MethodRequest",
    polymorphicDiscriminator: {
      serializedName: "methodName",
      clientName: "methodName"
    },
    modelProperties: {
      methodName: {
        serializedName: "methodName",
        required: true,
        readOnly: true,
        type: {
          name: "String"
        }
      },
      apiVersion: {
        defaultValue: "1.0",
        isConstant: true,
        serializedName: "@apiVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LivePipelineSetRequestBody: coreHttp.CompositeMapper = {
  serializedName: "livePipelineSetRequestBody",
  type: {
    name: "Composite",
    className: "LivePipelineSetRequestBody",
    uberParent: "MethodRequest",
    polymorphicDiscriminator: MethodRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...MethodRequest.type.modelProperties,
      ...LivePipeline.type.modelProperties
    }
  }
};

export const PipelineTopologySetRequestBody: coreHttp.CompositeMapper = {
  serializedName: "PipelineTopologySetRequestBody",
  type: {
    name: "Composite",
    className: "PipelineTopologySetRequestBody",
    uberParent: "MethodRequest",
    polymorphicDiscriminator: MethodRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...MethodRequest.type.modelProperties,
      ...PipelineTopology.type.modelProperties
    }
  }
};

export const RtspSource: coreHttp.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.RtspSource",
  type: {
    name: "Composite",
    className: "RtspSource",
    uberParent: "Source",
    polymorphicDiscriminator: Source.type.polymorphicDiscriminator,
    modelProperties: {
      ...Source.type.modelProperties,
      transport: {
        serializedName: "transport",
        type: {
          name: "String"
        }
      },
      endpoint: {
        serializedName: "endpoint",
        type: {
          name: "Composite",
          className: "Endpoint"
        }
      }
    }
  }
};

export const IotHubMessageSource: coreHttp.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.IotHubMessageSource",
  type: {
    name: "Composite",
    className: "IotHubMessageSource",
    uberParent: "Source",
    polymorphicDiscriminator: Source.type.polymorphicDiscriminator,
    modelProperties: {
      ...Source.type.modelProperties,
      hubInputName: {
        serializedName: "hubInputName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MotionDetectionProcessor: coreHttp.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.MotionDetectionProcessor",
  type: {
    name: "Composite",
    className: "MotionDetectionProcessor",
    uberParent: "Processor",
    polymorphicDiscriminator: Processor.type.polymorphicDiscriminator,
    modelProperties: {
      ...Processor.type.modelProperties,
      sensitivity: {
        serializedName: "sensitivity",
        type: {
          name: "String"
        }
      },
      outputMotionRegion: {
        serializedName: "outputMotionRegion",
        type: {
          name: "Boolean"
        }
      },
      eventAggregationWindow: {
        serializedName: "eventAggregationWindow",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ObjectTrackingProcessor: coreHttp.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.ObjectTrackingProcessor",
  type: {
    name: "Composite",
    className: "ObjectTrackingProcessor",
    uberParent: "Processor",
    polymorphicDiscriminator: Processor.type.polymorphicDiscriminator,
    modelProperties: {
      ...Processor.type.modelProperties,
      accuracy: {
        serializedName: "accuracy",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LineCrossingProcessor: coreHttp.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.LineCrossingProcessor",
  type: {
    name: "Composite",
    className: "LineCrossingProcessor",
    uberParent: "Processor",
    polymorphicDiscriminator: Processor.type.polymorphicDiscriminator,
    modelProperties: {
      ...Processor.type.modelProperties,
      lines: {
        serializedName: "lines",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Line"
            }
          }
        }
      }
    }
  }
};

export const ExtensionProcessorBase: coreHttp.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.ExtensionProcessorBase",
  type: {
    name: "Composite",
    className: "ExtensionProcessorBase",
    uberParent: "Processor",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "@type"
    },
    modelProperties: {
      ...Processor.type.modelProperties,
      endpoint: {
        serializedName: "endpoint",
        type: {
          name: "Composite",
          className: "Endpoint"
        }
      },
      image: {
        serializedName: "image",
        type: {
          name: "Composite",
          className: "Image"
        }
      },
      samplingOptions: {
        serializedName: "samplingOptions",
        type: {
          name: "Composite",
          className: "SamplingOptions"
        }
      }
    }
  }
};

export const SignalGateProcessor: coreHttp.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.SignalGateProcessor",
  type: {
    name: "Composite",
    className: "SignalGateProcessor",
    uberParent: "Processor",
    polymorphicDiscriminator: Processor.type.polymorphicDiscriminator,
    modelProperties: {
      ...Processor.type.modelProperties,
      activationEvaluationWindow: {
        serializedName: "activationEvaluationWindow",
        type: {
          name: "String"
        }
      },
      activationSignalOffset: {
        serializedName: "activationSignalOffset",
        type: {
          name: "String"
        }
      },
      minimumActivationTime: {
        serializedName: "minimumActivationTime",
        type: {
          name: "String"
        }
      },
      maximumActivationTime: {
        serializedName: "maximumActivationTime",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IotHubMessageSink: coreHttp.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.IotHubMessageSink",
  type: {
    name: "Composite",
    className: "IotHubMessageSink",
    uberParent: "Sink",
    polymorphicDiscriminator: Sink.type.polymorphicDiscriminator,
    modelProperties: {
      ...Sink.type.modelProperties,
      hubOutputName: {
        serializedName: "hubOutputName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileSink: coreHttp.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.FileSink",
  type: {
    name: "Composite",
    className: "FileSink",
    uberParent: "Sink",
    polymorphicDiscriminator: Sink.type.polymorphicDiscriminator,
    modelProperties: {
      ...Sink.type.modelProperties,
      baseDirectoryPath: {
        serializedName: "baseDirectoryPath",
        required: true,
        type: {
          name: "String"
        }
      },
      fileNamePattern: {
        serializedName: "fileNamePattern",
        required: true,
        type: {
          name: "String"
        }
      },
      maximumSizeMiB: {
        serializedName: "maximumSizeMiB",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AssetSink: coreHttp.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.AssetSink",
  type: {
    name: "Composite",
    className: "AssetSink",
    uberParent: "Sink",
    polymorphicDiscriminator: Sink.type.polymorphicDiscriminator,
    modelProperties: {
      ...Sink.type.modelProperties,
      assetContainerSasUrl: {
        serializedName: "assetContainerSasUrl",
        required: true,
        type: {
          name: "String"
        }
      },
      segmentLength: {
        serializedName: "segmentLength",
        type: {
          name: "String"
        }
      },
      localMediaCachePath: {
        serializedName: "localMediaCachePath",
        required: true,
        type: {
          name: "String"
        }
      },
      localMediaCacheMaximumSizeMiB: {
        serializedName: "localMediaCacheMaximumSizeMiB",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UnsecuredEndpoint: coreHttp.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.UnsecuredEndpoint",
  type: {
    name: "Composite",
    className: "UnsecuredEndpoint",
    uberParent: "Endpoint",
    polymorphicDiscriminator: Endpoint.type.polymorphicDiscriminator,
    modelProperties: {
      ...Endpoint.type.modelProperties
    }
  }
};

export const TlsEndpoint: coreHttp.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.TlsEndpoint",
  type: {
    name: "Composite",
    className: "TlsEndpoint",
    uberParent: "Endpoint",
    polymorphicDiscriminator: Endpoint.type.polymorphicDiscriminator,
    modelProperties: {
      ...Endpoint.type.modelProperties,
      trustedCertificates: {
        serializedName: "trustedCertificates",
        type: {
          name: "Composite",
          className: "CertificateSource"
        }
      },
      validationOptions: {
        serializedName: "validationOptions",
        type: {
          name: "Composite",
          className: "TlsValidationOptions"
        }
      }
    }
  }
};

export const UsernamePasswordCredentials: coreHttp.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.UsernamePasswordCredentials",
  type: {
    name: "Composite",
    className: "UsernamePasswordCredentials",
    uberParent: "Credentials",
    polymorphicDiscriminator: Credentials.type.polymorphicDiscriminator,
    modelProperties: {
      ...Credentials.type.modelProperties,
      username: {
        serializedName: "username",
        required: true,
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HttpHeaderCredentials: coreHttp.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.HttpHeaderCredentials",
  type: {
    name: "Composite",
    className: "HttpHeaderCredentials",
    uberParent: "Credentials",
    polymorphicDiscriminator: Credentials.type.polymorphicDiscriminator,
    modelProperties: {
      ...Credentials.type.modelProperties,
      headerName: {
        serializedName: "headerName",
        required: true,
        type: {
          name: "String"
        }
      },
      headerValue: {
        serializedName: "headerValue",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SymmetricKeyCredentials: coreHttp.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.SymmetricKeyCredentials",
  type: {
    name: "Composite",
    className: "SymmetricKeyCredentials",
    uberParent: "Credentials",
    polymorphicDiscriminator: Credentials.type.polymorphicDiscriminator,
    modelProperties: {
      ...Credentials.type.modelProperties,
      key: {
        serializedName: "key",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PemCertificateList: coreHttp.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.PemCertificateList",
  type: {
    name: "Composite",
    className: "PemCertificateList",
    uberParent: "CertificateSource",
    polymorphicDiscriminator: CertificateSource.type.polymorphicDiscriminator,
    modelProperties: {
      ...CertificateSource.type.modelProperties,
      certificates: {
        serializedName: "certificates",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ImageFormatRaw: coreHttp.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.ImageFormatRaw",
  type: {
    name: "Composite",
    className: "ImageFormatRaw",
    uberParent: "ImageFormat",
    polymorphicDiscriminator: ImageFormat.type.polymorphicDiscriminator,
    modelProperties: {
      ...ImageFormat.type.modelProperties,
      pixelFormat: {
        serializedName: "pixelFormat",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageFormatJpeg: coreHttp.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.ImageFormatJpeg",
  type: {
    name: "Composite",
    className: "ImageFormatJpeg",
    uberParent: "ImageFormat",
    polymorphicDiscriminator: ImageFormat.type.polymorphicDiscriminator,
    modelProperties: {
      ...ImageFormat.type.modelProperties,
      quality: {
        serializedName: "quality",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageFormatBmp: coreHttp.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.ImageFormatBmp",
  type: {
    name: "Composite",
    className: "ImageFormatBmp",
    uberParent: "ImageFormat",
    polymorphicDiscriminator: ImageFormat.type.polymorphicDiscriminator,
    modelProperties: {
      ...ImageFormat.type.modelProperties
    }
  }
};

export const ImageFormatPng: coreHttp.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.ImageFormatPng",
  type: {
    name: "Composite",
    className: "ImageFormatPng",
    uberParent: "ImageFormat",
    polymorphicDiscriminator: ImageFormat.type.polymorphicDiscriminator,
    modelProperties: {
      ...ImageFormat.type.modelProperties
    }
  }
};

export const PipelineTopologySetRequest: coreHttp.CompositeMapper = {
  serializedName: "pipelineTopologySet",
  type: {
    name: "Composite",
    className: "PipelineTopologySetRequest",
    uberParent: "MethodRequest",
    polymorphicDiscriminator: MethodRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...MethodRequest.type.modelProperties,
      pipelineTopology: {
        serializedName: "pipelineTopology",
        type: {
          name: "Composite",
          className: "PipelineTopology"
        }
      }
    }
  }
};

export const LivePipelineSetRequest: coreHttp.CompositeMapper = {
  serializedName: "livePipelineSet",
  type: {
    name: "Composite",
    className: "LivePipelineSetRequest",
    uberParent: "MethodRequest",
    polymorphicDiscriminator: MethodRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...MethodRequest.type.modelProperties,
      livePipeline: {
        serializedName: "livePipeline",
        type: {
          name: "Composite",
          className: "LivePipeline"
        }
      }
    }
  }
};

export const ItemNonSetRequestBase: coreHttp.CompositeMapper = {
  serializedName: "ItemNonSetRequestBase",
  type: {
    name: "Composite",
    className: "ItemNonSetRequestBase",
    uberParent: "MethodRequest",
    polymorphicDiscriminator: {
      serializedName: "methodName",
      clientName: "methodName"
    },
    modelProperties: {
      ...MethodRequest.type.modelProperties,
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PipelineTopologyListRequest: coreHttp.CompositeMapper = {
  serializedName: "pipelineTopologyList",
  type: {
    name: "Composite",
    className: "PipelineTopologyListRequest",
    uberParent: "MethodRequest",
    polymorphicDiscriminator: MethodRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...MethodRequest.type.modelProperties
    }
  }
};

export const LivePipelineListRequest: coreHttp.CompositeMapper = {
  serializedName: "livePipelineList",
  type: {
    name: "Composite",
    className: "LivePipelineListRequest",
    uberParent: "MethodRequest",
    polymorphicDiscriminator: MethodRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...MethodRequest.type.modelProperties
    }
  }
};

export const CognitiveServicesVisionExtension: coreHttp.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.CognitiveServicesVisionExtension",
  type: {
    name: "Composite",
    className: "CognitiveServicesVisionExtension",
    uberParent: "Processor",
    polymorphicDiscriminator: Processor.type.polymorphicDiscriminator,
    modelProperties: {
      ...ExtensionProcessorBase.type.modelProperties,
      extensionConfiguration: {
        serializedName: "extensionConfiguration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GrpcExtension: coreHttp.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.GrpcExtension",
  type: {
    name: "Composite",
    className: "GrpcExtension",
    uberParent: "Processor",
    polymorphicDiscriminator: Processor.type.polymorphicDiscriminator,
    modelProperties: {
      ...ExtensionProcessorBase.type.modelProperties,
      dataTransfer: {
        serializedName: "dataTransfer",
        type: {
          name: "Composite",
          className: "GrpcExtensionDataTransfer"
        }
      },
      extensionConfiguration: {
        serializedName: "extensionConfiguration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HttpExtension: coreHttp.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.HttpExtension",
  type: {
    name: "Composite",
    className: "HttpExtension",
    uberParent: "Processor",
    polymorphicDiscriminator: Processor.type.polymorphicDiscriminator,
    modelProperties: {
      ...ExtensionProcessorBase.type.modelProperties
    }
  }
};

export const PipelineTopologyGetRequest: coreHttp.CompositeMapper = {
  serializedName: "pipelineTopologyGet",
  type: {
    name: "Composite",
    className: "PipelineTopologyGetRequest",
    uberParent: "MethodRequest",
    polymorphicDiscriminator: MethodRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...ItemNonSetRequestBase.type.modelProperties
    }
  }
};

export const PipelineTopologyDeleteRequest: coreHttp.CompositeMapper = {
  serializedName: "pipelineTopologyDelete",
  type: {
    name: "Composite",
    className: "PipelineTopologyDeleteRequest",
    uberParent: "MethodRequest",
    polymorphicDiscriminator: MethodRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...ItemNonSetRequestBase.type.modelProperties
    }
  }
};

export const LivePipelineGetRequest: coreHttp.CompositeMapper = {
  serializedName: "livePipelineGet",
  type: {
    name: "Composite",
    className: "LivePipelineGetRequest",
    uberParent: "MethodRequest",
    polymorphicDiscriminator: MethodRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...ItemNonSetRequestBase.type.modelProperties
    }
  }
};

export const LivePipelineActivateRequest: coreHttp.CompositeMapper = {
  serializedName: "livePipelineActivate",
  type: {
    name: "Composite",
    className: "LivePipelineActivateRequest",
    uberParent: "MethodRequest",
    polymorphicDiscriminator: MethodRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...ItemNonSetRequestBase.type.modelProperties
    }
  }
};

export const LivePipelineDeactivateRequest: coreHttp.CompositeMapper = {
  serializedName: "livePipelineDeactivate",
  type: {
    name: "Composite",
    className: "LivePipelineDeactivateRequest",
    uberParent: "MethodRequest",
    polymorphicDiscriminator: MethodRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...ItemNonSetRequestBase.type.modelProperties
    }
  }
};

export const LivePipelineDeleteRequest: coreHttp.CompositeMapper = {
  serializedName: "livePipelineDelete",
  type: {
    name: "Composite",
    className: "LivePipelineDeleteRequest",
    uberParent: "MethodRequest",
    polymorphicDiscriminator: MethodRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...ItemNonSetRequestBase.type.modelProperties
    }
  }
};

export let discriminators = {
  Source: Source,
  Processor: Processor,
  Sink: Sink,
  Endpoint: Endpoint,
  Credentials: Credentials,
  CertificateSource: CertificateSource,
  ImageFormat: ImageFormat,
  MethodRequest: MethodRequest,
  "MethodRequest.livePipelineSetRequestBody": LivePipelineSetRequestBody,
  "MethodRequest.PipelineTopologySetRequestBody": PipelineTopologySetRequestBody,
  "Source.#Microsoft.VideoAnalyzer.RtspSource": RtspSource,
  "Source.#Microsoft.VideoAnalyzer.IotHubMessageSource": IotHubMessageSource,
  "Processor.#Microsoft.VideoAnalyzer.MotionDetectionProcessor": MotionDetectionProcessor,
  "Processor.#Microsoft.VideoAnalyzer.ObjectTrackingProcessor": ObjectTrackingProcessor,
  "Processor.#Microsoft.VideoAnalyzer.LineCrossingProcessor": LineCrossingProcessor,
  "Processor.#Microsoft.VideoAnalyzer.ExtensionProcessorBase": ExtensionProcessorBase,
  "Processor.#Microsoft.VideoAnalyzer.SignalGateProcessor": SignalGateProcessor,
  "Sink.#Microsoft.VideoAnalyzer.IotHubMessageSink": IotHubMessageSink,
  "Sink.#Microsoft.VideoAnalyzer.FileSink": FileSink,
  "Sink.#Microsoft.VideoAnalyzer.AssetSink": AssetSink,
  "Endpoint.#Microsoft.VideoAnalyzer.UnsecuredEndpoint": UnsecuredEndpoint,
  "Endpoint.#Microsoft.VideoAnalyzer.TlsEndpoint": TlsEndpoint,
  "Credentials.#Microsoft.VideoAnalyzer.UsernamePasswordCredentials": UsernamePasswordCredentials,
  "Credentials.#Microsoft.VideoAnalyzer.HttpHeaderCredentials": HttpHeaderCredentials,
  "Credentials.#Microsoft.VideoAnalyzer.SymmetricKeyCredentials": SymmetricKeyCredentials,
  "CertificateSource.#Microsoft.VideoAnalyzer.PemCertificateList": PemCertificateList,
  "ImageFormat.#Microsoft.VideoAnalyzer.ImageFormatRaw": ImageFormatRaw,
  "ImageFormat.#Microsoft.VideoAnalyzer.ImageFormatJpeg": ImageFormatJpeg,
  "ImageFormat.#Microsoft.VideoAnalyzer.ImageFormatBmp": ImageFormatBmp,
  "ImageFormat.#Microsoft.VideoAnalyzer.ImageFormatPng": ImageFormatPng,
  "MethodRequest.pipelineTopologySet": PipelineTopologySetRequest,
  "MethodRequest.livePipelineSet": LivePipelineSetRequest,
  "MethodRequest.ItemNonSetRequestBase": ItemNonSetRequestBase,
  "MethodRequest.pipelineTopologyList": PipelineTopologyListRequest,
  "MethodRequest.livePipelineList": LivePipelineListRequest,
  "Processor.#Microsoft.VideoAnalyzer.CognitiveServicesVisionExtension": CognitiveServicesVisionExtension,
  "Processor.#Microsoft.VideoAnalyzer.GrpcExtension": GrpcExtension,
  "Processor.#Microsoft.VideoAnalyzer.HttpExtension": HttpExtension,
  "MethodRequest.pipelineTopologyGet": PipelineTopologyGetRequest,
  "MethodRequest.pipelineTopologyDelete": PipelineTopologyDeleteRequest,
  "MethodRequest.livePipelineGet": LivePipelineGetRequest,
  "MethodRequest.livePipelineActivate": LivePipelineActivateRequest,
  "MethodRequest.livePipelineDeactivate": LivePipelineDeactivateRequest,
  "MethodRequest.livePipelineDelete": LivePipelineDeleteRequest
};
