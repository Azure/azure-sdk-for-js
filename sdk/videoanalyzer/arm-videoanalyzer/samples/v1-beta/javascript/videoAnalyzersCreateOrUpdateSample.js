/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
const { VideoAnalyzerManagementClient } = require("@azure/arm-videoanalyzer");
const { DefaultAzureCredential } = require("@azure/identity");
require("dotenv").config();

/**
 * This sample demonstrates how to Create or update an instance of a Video Analyzer account
 *
 * @summary Create or update an instance of a Video Analyzer account
 * x-ms-original-file: specification/videoanalyzer/resource-manager/Microsoft.Media/preview/2021-11-01-preview/examples/video-analyzer-accounts-create-or-update.json
 */
async function createAVideoAnalyzerAccount() {
  const subscriptionId =
    process.env["VIDEOANALYZER_SUBSCRIPTION_ID"] || "00000000-0000-0000-0000-000000000000";
  const resourceGroupName = process.env["VIDEOANALYZER_RESOURCE_GROUP"] || "contoso";
  const accountName = "contosotv";
  const parameters = {
    encryption: { type: "SystemKey" },
    identity: {
      type: "UserAssigned",
      userAssignedIdentities: {
        "/subscriptions/00000000000000000000000000000000/resourceGroups/rg/providers/MicrosoftManagedIdentity/userAssignedIdentities/id1":
          {},
        "/subscriptions/00000000000000000000000000000000/resourceGroups/rg/providers/MicrosoftManagedIdentity/userAssignedIdentities/id2":
          {},
        "/subscriptions/00000000000000000000000000000000/resourceGroups/rg/providers/MicrosoftManagedIdentity/userAssignedIdentities/id3":
          {},
      },
    },
    iotHubs: [
      {
        id: "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Devices/IotHubs/hub1",
        identity: {
          userAssignedIdentity:
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id3",
        },
      },
      {
        id: "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Devices/IotHubs/hub2",
        identity: {
          userAssignedIdentity:
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id3",
        },
      },
    ],
    location: "South Central US",
    storageAccounts: [
      {
        id: "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.Storage/storageAccounts/storage1",
        identity: {
          userAssignedIdentity:
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id2",
        },
      },
    ],
    tags: { tag1: "value1", tag2: "value2" },
  };
  const credential = new DefaultAzureCredential();
  const client = new VideoAnalyzerManagementClient(credential, subscriptionId);
  const result = await client.videoAnalyzers.beginCreateOrUpdateAndWait(
    resourceGroupName,
    accountName,
    parameters
  );
  console.log(result);
}

async function main() {
  createAVideoAnalyzerAccount();
}

main().catch(console.error);
