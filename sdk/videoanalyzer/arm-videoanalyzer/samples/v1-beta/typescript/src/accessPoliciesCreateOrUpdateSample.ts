/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import {
  AccessPolicyEntity,
  VideoAnalyzerManagementClient
} from "@azure/arm-videoanalyzer";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";

dotenv.config();

/**
 * This sample demonstrates how to Creates a new access policy resource or updates an existing one with the given name.
 *
 * @summary Creates a new access policy resource or updates an existing one with the given name.
 * x-ms-original-file: specification/videoanalyzer/resource-manager/Microsoft.Media/preview/2021-11-01-preview/examples/access-policy-create.json
 */
async function registerAccessPolicyEntity() {
  const subscriptionId =
    process.env["VIDEOANALYZER_SUBSCRIPTION_ID"] ||
    "591e76c3-3e97-44db-879c-3e2b12961b62";
  const resourceGroupName =
    process.env["VIDEOANALYZER_RESOURCE_GROUP"] || "testrg";
  const accountName = "testaccount2";
  const accessPolicyName = "accessPolicyName1";
  const parameters: AccessPolicyEntity = {
    authentication: {
      type: "#Microsoft.VideoAnalyzer.JwtAuthentication",
      audiences: ["audience1"],
      claims: [
        { name: "claimname1", value: "claimvalue1" },
        { name: "claimname2", value: "claimvalue2" }
      ],
      issuers: ["issuer1", "issuer2"],
      keys: [
        {
          type: "#Microsoft.VideoAnalyzer.RsaTokenKey",
          alg: "RS256",
          e: "ZLFzZTY0IQ==",
          kid: "123",
          n: "YmFzZTY0IQ=="
        },
        {
          type: "#Microsoft.VideoAnalyzer.EccTokenKey",
          alg: "ES256",
          kid: "124",
          x: "XX==",
          y: "YY=="
        }
      ]
    }
  };
  const credential = new DefaultAzureCredential();
  const client = new VideoAnalyzerManagementClient(credential, subscriptionId);
  const result = await client.accessPolicies.createOrUpdate(
    resourceGroupName,
    accountName,
    accessPolicyName,
    parameters
  );
  console.log(result);
}

async function main() {
  registerAccessPolicyEntity();
}

main().catch(console.error);
