/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { VideoAnalyzers } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { VideoAnalyzerManagementClient } from "../videoAnalyzerManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  VideoAnalyzersListOptionalParams,
  VideoAnalyzersListResponse,
  VideoAnalyzersGetOptionalParams,
  VideoAnalyzersGetResponse,
  VideoAnalyzer,
  VideoAnalyzersCreateOrUpdateOptionalParams,
  VideoAnalyzersCreateOrUpdateResponse,
  VideoAnalyzersDeleteOptionalParams,
  VideoAnalyzerUpdate,
  VideoAnalyzersUpdateOptionalParams,
  VideoAnalyzersUpdateResponse,
  VideoAnalyzersListBySubscriptionOptionalParams,
  VideoAnalyzersListBySubscriptionResponse
} from "../models";

/** Class containing VideoAnalyzers operations. */
export class VideoAnalyzersImpl implements VideoAnalyzers {
  private readonly client: VideoAnalyzerManagementClient;

  /**
   * Initialize a new instance of the class VideoAnalyzers class.
   * @param client Reference to the service client
   */
  constructor(client: VideoAnalyzerManagementClient) {
    this.client = client;
  }

  /**
   * Lists the Video Analyzer accounts in the specified resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    options?: VideoAnalyzersListOptionalParams
  ): Promise<VideoAnalyzersListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listOperationSpec
    );
  }

  /**
   * Get the details of the specified Video Analyzer account
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Video Analyzer account name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    options?: VideoAnalyzersGetOptionalParams
  ): Promise<VideoAnalyzersGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, options },
      getOperationSpec
    );
  }

  /**
   * Create or update an instance of a Video Analyzer account
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Video Analyzer account name.
   * @param parameters The request parameters
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    accountName: string,
    parameters: VideoAnalyzer,
    options?: VideoAnalyzersCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<VideoAnalyzersCreateOrUpdateResponse>,
      VideoAnalyzersCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<VideoAnalyzersCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, accountName, parameters, options },
      createOrUpdateOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * Create or update an instance of a Video Analyzer account
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Video Analyzer account name.
   * @param parameters The request parameters
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    accountName: string,
    parameters: VideoAnalyzer,
    options?: VideoAnalyzersCreateOrUpdateOptionalParams
  ): Promise<VideoAnalyzersCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      accountName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete the specified Video Analyzer account
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Video Analyzer account name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    accountName: string,
    options?: VideoAnalyzersDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, options },
      deleteOperationSpec
    );
  }

  /**
   * Updates an existing instance of Video Analyzer account
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Video Analyzer account name.
   * @param parameters The request parameters
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    accountName: string,
    parameters: VideoAnalyzerUpdate,
    options?: VideoAnalyzersUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<VideoAnalyzersUpdateResponse>,
      VideoAnalyzersUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<VideoAnalyzersUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, accountName, parameters, options },
      updateOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * Updates an existing instance of Video Analyzer account
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Video Analyzer account name.
   * @param parameters The request parameters
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    accountName: string,
    parameters: VideoAnalyzerUpdate,
    options?: VideoAnalyzersUpdateOptionalParams
  ): Promise<VideoAnalyzersUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      accountName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * List all Video Analyzer accounts in the specified subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: VideoAnalyzersListBySubscriptionOptionalParams
  ): Promise<VideoAnalyzersListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VideoAnalyzerCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VideoAnalyzer
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.VideoAnalyzer
    },
    201: {
      bodyMapper: Mappers.VideoAnalyzer
    },
    202: {
      bodyMapper: Mappers.VideoAnalyzer
    },
    204: {
      bodyMapper: Mappers.VideoAnalyzer
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.VideoAnalyzer,
      headersMapper: Mappers.VideoAnalyzersUpdateHeaders
    },
    201: {
      bodyMapper: Mappers.VideoAnalyzer,
      headersMapper: Mappers.VideoAnalyzersUpdateHeaders
    },
    202: {
      bodyMapper: Mappers.VideoAnalyzer,
      headersMapper: Mappers.VideoAnalyzersUpdateHeaders
    },
    204: {
      bodyMapper: Mappers.VideoAnalyzer,
      headersMapper: Mappers.VideoAnalyzersUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters9,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Media/videoAnalyzers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VideoAnalyzerCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
