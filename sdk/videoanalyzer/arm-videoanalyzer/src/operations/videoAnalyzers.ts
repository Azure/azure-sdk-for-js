/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/videoAnalyzersMappers";
import * as Parameters from "../models/parameters";
import { AzureVideoAnalyzerContext } from "../azureVideoAnalyzerContext";

/** Class representing a VideoAnalyzers. */
export class VideoAnalyzers {
  private readonly client: AzureVideoAnalyzerContext;

  /**
   * Create a VideoAnalyzers.
   * @param {AzureVideoAnalyzerContext} client Reference to the service client.
   */
  constructor(client: AzureVideoAnalyzerContext) {
    this.client = client;
  }

  /**
   * Lists the Video Analyzer accounts in the specified resource group.
   * @summary List Video Analyzer accounts
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.VideoAnalyzersListResponse>
   */
  list(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.VideoAnalyzersListResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param callback The callback
   */
  list(resourceGroupName: string, callback: msRest.ServiceCallback<Models.VideoAnalyzerCollection>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VideoAnalyzerCollection>): void;
  list(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VideoAnalyzerCollection>, callback?: msRest.ServiceCallback<Models.VideoAnalyzerCollection>): Promise<Models.VideoAnalyzersListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.VideoAnalyzersListResponse>;
  }

  /**
   * Get the details of the specified Video Analyzer account
   * @summary Get a Video Analyzer account
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Video Analyzer account name.
   * @param [options] The optional parameters
   * @returns Promise<Models.VideoAnalyzersGetResponse>
   */
  get(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<Models.VideoAnalyzersGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Video Analyzer account name.
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.VideoAnalyzer>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Video Analyzer account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VideoAnalyzer>): void;
  get(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VideoAnalyzer>, callback?: msRest.ServiceCallback<Models.VideoAnalyzer>): Promise<Models.VideoAnalyzersGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.VideoAnalyzersGetResponse>;
  }

  /**
   * Create or update an instance of a Video Analyzer account
   * @summary Create or update a Video Analyzer account
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Video Analyzer account name.
   * @param parameters The request parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.VideoAnalyzersCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, accountName: string, parameters: Models.VideoAnalyzer, options?: msRest.RequestOptionsBase): Promise<Models.VideoAnalyzersCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Video Analyzer account name.
   * @param parameters The request parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, accountName: string, parameters: Models.VideoAnalyzer, callback: msRest.ServiceCallback<Models.VideoAnalyzer>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Video Analyzer account name.
   * @param parameters The request parameters
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, accountName: string, parameters: Models.VideoAnalyzer, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VideoAnalyzer>): void;
  createOrUpdate(resourceGroupName: string, accountName: string, parameters: Models.VideoAnalyzer, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VideoAnalyzer>, callback?: msRest.ServiceCallback<Models.VideoAnalyzer>): Promise<Models.VideoAnalyzersCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        parameters,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.VideoAnalyzersCreateOrUpdateResponse>;
  }

  /**
   * Delete the specified Video Analyzer account
   * @summary Delete a Video Analyzer account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Video Analyzer account name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Video Analyzer account name.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Video Analyzer account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Updates an existing instance of Video Analyzer account
   * @summary Update a Video Analyzer account
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Video Analyzer account name.
   * @param parameters The request parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.VideoAnalyzersUpdateResponse>
   */
  update(resourceGroupName: string, accountName: string, parameters: Models.VideoAnalyzerUpdate, options?: msRest.RequestOptionsBase): Promise<Models.VideoAnalyzersUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Video Analyzer account name.
   * @param parameters The request parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, accountName: string, parameters: Models.VideoAnalyzerUpdate, callback: msRest.ServiceCallback<Models.VideoAnalyzer>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Video Analyzer account name.
   * @param parameters The request parameters
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, accountName: string, parameters: Models.VideoAnalyzerUpdate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VideoAnalyzer>): void;
  update(resourceGroupName: string, accountName: string, parameters: Models.VideoAnalyzerUpdate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VideoAnalyzer>, callback?: msRest.ServiceCallback<Models.VideoAnalyzer>): Promise<Models.VideoAnalyzersUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        parameters,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.VideoAnalyzersUpdateResponse>;
  }

  /**
   * Synchronizes storage account keys for a storage account associated with the Video Analyzer
   * account.
   * @summary Synchronizes Storage Account Keys
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Video Analyzer account name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  syncStorageKeys(resourceGroupName: string, accountName: string, options?: Models.VideoAnalyzersSyncStorageKeysOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Video Analyzer account name.
   * @param callback The callback
   */
  syncStorageKeys(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Video Analyzer account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  syncStorageKeys(resourceGroupName: string, accountName: string, options: Models.VideoAnalyzersSyncStorageKeysOptionalParams, callback: msRest.ServiceCallback<void>): void;
  syncStorageKeys(resourceGroupName: string, accountName: string, options?: Models.VideoAnalyzersSyncStorageKeysOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      syncStorageKeysOperationSpec,
      callback);
  }

  /**
   * Lists the Video Analyzer accounts in the specific subscription.
   * @summary List Video Analyzer accounts
   * @param [options] The optional parameters
   * @returns Promise<Models.VideoAnalyzersListBySubscriptionResponse>
   */
  listBySubscription(options?: msRest.RequestOptionsBase): Promise<Models.VideoAnalyzersListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.VideoAnalyzerCollection>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VideoAnalyzerCollection>): void;
  listBySubscription(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VideoAnalyzerCollection>, callback?: msRest.ServiceCallback<Models.VideoAnalyzerCollection>): Promise<Models.VideoAnalyzersListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.VideoAnalyzersListBySubscriptionResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VideoAnalyzerCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VideoAnalyzer
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.VideoAnalyzer,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VideoAnalyzer
    },
    201: {
      bodyMapper: Mappers.VideoAnalyzer
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.VideoAnalyzerUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VideoAnalyzer
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const syncStorageKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/syncStorageKeys",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      id: [
        "options",
        "id"
      ]
    },
    mapper: {
      ...Mappers.SyncStorageKeysInput,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Media/videoAnalyzers",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VideoAnalyzerCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
