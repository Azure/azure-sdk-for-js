/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/videoAnalyzerOperationResultsMappers";
import * as Parameters from "../models/parameters";
import { VideoAnalyzerContext } from "../videoAnalyzerContext";

/** Class representing a VideoAnalyzerOperationResults. */
export class VideoAnalyzerOperationResults {
  private readonly client: VideoAnalyzerContext;

  /**
   * Create a VideoAnalyzerOperationResults.
   * @param {VideoAnalyzerContext} client Reference to the service client.
   */
  constructor(client: VideoAnalyzerContext) {
    this.client = client;
  }

  /**
   * Get video analyzer operation result.
   * @summary Get operation result.
   * @param locationName Location name.
   * @param operationId Operation Id.
   * @param [options] The optional parameters
   * @returns Promise<Models.VideoAnalyzerOperationResultsGetResponse>
   */
  get(locationName: string, operationId: string, options?: msRest.RequestOptionsBase): Promise<Models.VideoAnalyzerOperationResultsGetResponse> {
    return this.beginGet(locationName,operationId,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VideoAnalyzerOperationResultsGetResponse>;
  }

  /**
   * Get video analyzer operation result.
   * @summary Get operation result.
   * @param locationName Location name.
   * @param operationId Operation Id.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginGet(locationName: string, operationId: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        locationName,
        operationId,
        options
      },
      beginGetOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const beginGetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Media/locations/{locationName}/videoAnalyzerOperationResults/{operationId}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.locationName,
    Parameters.operationId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VideoAnalyzerModel
    },
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
