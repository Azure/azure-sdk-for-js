/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/operationResultsMappers";
import * as Parameters from "../models/parameters";
import { VideoAnalyzerContext } from "../videoAnalyzerContext";

/** Class representing a OperationResults. */
export class OperationResults {
  private readonly client: VideoAnalyzerContext;

  /**
   * Create a OperationResults.
   * @param {VideoAnalyzerContext} client Reference to the service client.
   */
  constructor(client: VideoAnalyzerContext) {
    this.client = client;
  }

  /**
   * Get private endpoint connection operation result.
   * @summary Get operation result.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Video Analyzer account name.
   * @param name Private endpoint connection name.
   * @param operationId Operation Id.
   * @param [options] The optional parameters
   * @returns Promise<Models.OperationResultsGetResponse>
   */
  get(resourceGroupName: string, accountName: string, name: string, operationId: string, options?: msRest.RequestOptionsBase): Promise<Models.OperationResultsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Video Analyzer account name.
   * @param name Private endpoint connection name.
   * @param operationId Operation Id.
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, name: string, operationId: string, callback: msRest.ServiceCallback<Models.PrivateEndpointConnection>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Video Analyzer account name.
   * @param name Private endpoint connection name.
   * @param operationId Operation Id.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, name: string, operationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrivateEndpointConnection>): void;
  get(resourceGroupName: string, accountName: string, name: string, operationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PrivateEndpointConnection>, callback?: msRest.ServiceCallback<Models.PrivateEndpointConnection>): Promise<Models.OperationResultsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        name,
        operationId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.OperationResultsGetResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/privateEndpointConnections/{name}/operationResults/{operationId}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.name,
    Parameters.operationId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnection
    },
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
