/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/edgeModulesMappers";
import * as Parameters from "../models/parameters";
import { VideoAnalyzerContext } from "../videoAnalyzerContext";

/** Class representing a EdgeModules. */
export class EdgeModules {
  private readonly client: VideoAnalyzerContext;

  /**
   * Create a EdgeModules.
   * @param {VideoAnalyzerContext} client Reference to the service client.
   */
  constructor(client: VideoAnalyzerContext) {
    this.client = client;
  }

  /**
   * List all existing edge module resources, along with their JSON representations.
   * @summary List all existing edge module resources.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param [options] The optional parameters
   * @returns Promise<Models.EdgeModulesListResponse>
   */
  list(resourceGroupName: string, accountName: string, options?: Models.EdgeModulesListOptionalParams): Promise<Models.EdgeModulesListResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param callback The callback
   */
  list(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.EdgeModuleEntityCollection>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, accountName: string, options: Models.EdgeModulesListOptionalParams, callback: msRest.ServiceCallback<Models.EdgeModuleEntityCollection>): void;
  list(resourceGroupName: string, accountName: string, options?: Models.EdgeModulesListOptionalParams | msRest.ServiceCallback<Models.EdgeModuleEntityCollection>, callback?: msRest.ServiceCallback<Models.EdgeModuleEntityCollection>): Promise<Models.EdgeModulesListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.EdgeModulesListResponse>;
  }

  /**
   * Retrieves an existing edge module resource with the given name.
   * @summary Retrieves an existing edge module resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param edgeModuleName The Edge Module name.
   * @param [options] The optional parameters
   * @returns Promise<Models.EdgeModulesGetResponse>
   */
  get(resourceGroupName: string, accountName: string, edgeModuleName: string, options?: msRest.RequestOptionsBase): Promise<Models.EdgeModulesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param edgeModuleName The Edge Module name.
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, edgeModuleName: string, callback: msRest.ServiceCallback<Models.EdgeModuleEntity>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param edgeModuleName The Edge Module name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, edgeModuleName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EdgeModuleEntity>): void;
  get(resourceGroupName: string, accountName: string, edgeModuleName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EdgeModuleEntity>, callback?: msRest.ServiceCallback<Models.EdgeModuleEntity>): Promise<Models.EdgeModulesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        edgeModuleName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.EdgeModulesGetResponse>;
  }

  /**
   * Creates a new edge module or updates an existing one. An edge module resource enables a single
   * instance of an Azure Video Analyzer IoT edge module to interact with the Video Analyzer Account.
   * This is used for authorization and also to make sure that the particular edge module instance
   * only has access to the data it requires from the Azure Video Analyzer service. A new edge module
   * resource should be created for every new instance of an Azure Video Analyzer edge module
   * deployed to you Azure IoT edge environment. Edge module resources can be deleted if the specific
   * module is not in use anymore.
   * @summary Creates a new edge module or updates an existing one.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param edgeModuleName The Edge Module name.
   * @param [options] The optional parameters
   * @returns Promise<Models.EdgeModulesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, accountName: string, edgeModuleName: string, options?: msRest.RequestOptionsBase): Promise<Models.EdgeModulesCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param edgeModuleName The Edge Module name.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, accountName: string, edgeModuleName: string, callback: msRest.ServiceCallback<Models.EdgeModuleEntity>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param edgeModuleName The Edge Module name.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, accountName: string, edgeModuleName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EdgeModuleEntity>): void;
  createOrUpdate(resourceGroupName: string, accountName: string, edgeModuleName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EdgeModuleEntity>, callback?: msRest.ServiceCallback<Models.EdgeModuleEntity>): Promise<Models.EdgeModulesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        edgeModuleName,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.EdgeModulesCreateOrUpdateResponse>;
  }

  /**
   * Deletes an existing edge module resource. Deleting the edge module resource will prevent an
   * Azure Video Analyzer IoT edge module which was previously initiated with the module provisioning
   * token from communicating with the cloud.
   * @summary Deletes an existing edge module resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param edgeModuleName The Edge Module name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, accountName: string, edgeModuleName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param edgeModuleName The Edge Module name.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, accountName: string, edgeModuleName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param edgeModuleName The Edge Module name.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, accountName: string, edgeModuleName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, accountName: string, edgeModuleName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        edgeModuleName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Creates a new provisioning token. A provisioning token allows for a single instance of Azure
   * Video analyzer IoT edge module to be initialized and authorized to the cloud account. The
   * provisioning token itself is short lived and it is only used for the initial handshake between
   * IoT edge module and the cloud. After the initial handshake, the IoT edge module will agree on a
   * set of authentication keys which will be auto-rotated as long as the module is able to
   * periodically connect to the cloud. A new provisioning token can be generated for the same IoT
   * edge module in case the module state lost or reset.
   * @summary Creates a new provisioning token.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param edgeModuleName The Edge Module name.
   * @param expirationDate The desired expiration date of the registration token. The Azure Video
   * Analyzer IoT edge module must be initialized and connected to the Internet prior to the token
   * expiration date.
   * @param [options] The optional parameters
   * @returns Promise<Models.EdgeModulesListProvisioningTokenResponse>
   */
  listProvisioningToken(resourceGroupName: string, accountName: string, edgeModuleName: string, expirationDate: Date | string, options?: msRest.RequestOptionsBase): Promise<Models.EdgeModulesListProvisioningTokenResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param edgeModuleName The Edge Module name.
   * @param expirationDate The desired expiration date of the registration token. The Azure Video
   * Analyzer IoT edge module must be initialized and connected to the Internet prior to the token
   * expiration date.
   * @param callback The callback
   */
  listProvisioningToken(resourceGroupName: string, accountName: string, edgeModuleName: string, expirationDate: Date | string, callback: msRest.ServiceCallback<Models.EdgeModuleProvisioningToken>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param edgeModuleName The Edge Module name.
   * @param expirationDate The desired expiration date of the registration token. The Azure Video
   * Analyzer IoT edge module must be initialized and connected to the Internet prior to the token
   * expiration date.
   * @param options The optional parameters
   * @param callback The callback
   */
  listProvisioningToken(resourceGroupName: string, accountName: string, edgeModuleName: string, expirationDate: Date | string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EdgeModuleProvisioningToken>): void;
  listProvisioningToken(resourceGroupName: string, accountName: string, edgeModuleName: string, expirationDate: Date | string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EdgeModuleProvisioningToken>, callback?: msRest.ServiceCallback<Models.EdgeModuleProvisioningToken>): Promise<Models.EdgeModulesListProvisioningTokenResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        edgeModuleName,
        expirationDate,
        options
      },
      listProvisioningTokenOperationSpec,
      callback) as Promise<Models.EdgeModulesListProvisioningTokenResponse>;
  }

  /**
   * List all existing edge module resources, along with their JSON representations.
   * @summary List all existing edge module resources.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.EdgeModulesListNextResponse>
   */
  listNext(nextPageLink: string, options?: Models.EdgeModulesListNextOptionalParams): Promise<Models.EdgeModulesListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.EdgeModuleEntityCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: Models.EdgeModulesListNextOptionalParams, callback: msRest.ServiceCallback<Models.EdgeModuleEntityCollection>): void;
  listNext(nextPageLink: string, options?: Models.EdgeModulesListNextOptionalParams | msRest.ServiceCallback<Models.EdgeModuleEntityCollection>, callback?: msRest.ServiceCallback<Models.EdgeModuleEntityCollection>): Promise<Models.EdgeModulesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.EdgeModulesListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/edgeModules",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EdgeModuleEntityCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/edgeModules/{edgeModuleName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.edgeModuleName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EdgeModuleEntity
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/edgeModules/{edgeModuleName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.edgeModuleName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.EdgeModuleEntity,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.EdgeModuleEntity
    },
    201: {
      bodyMapper: Mappers.EdgeModuleEntity
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/edgeModules/{edgeModuleName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.edgeModuleName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listProvisioningTokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/edgeModules/{edgeModuleName}/listProvisioningToken",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.edgeModuleName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      expirationDate: "expirationDate"
    },
    mapper: {
      ...Mappers.ListProvisioningTokenInput,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.EdgeModuleProvisioningToken
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EdgeModuleEntityCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
