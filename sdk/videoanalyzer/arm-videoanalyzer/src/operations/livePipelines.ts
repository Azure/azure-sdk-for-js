/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/livePipelinesMappers";
import * as Parameters from "../models/parameters";
import { VideoAnalyzerContext } from "../videoAnalyzerContext";

/** Class representing a LivePipelines. */
export class LivePipelines {
  private readonly client: VideoAnalyzerContext;

  /**
   * Create a LivePipelines.
   * @param {VideoAnalyzerContext} client Reference to the service client.
   */
  constructor(client: VideoAnalyzerContext) {
    this.client = client;
  }

  /**
   * Retrieves a list of live pipelines that have been created, along with their JSON
   * representations.
   * @summary Retrieves a list of live pipelines.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param [options] The optional parameters
   * @returns Promise<Models.LivePipelinesListResponse>
   */
  list(resourceGroupName: string, accountName: string, options?: Models.LivePipelinesListOptionalParams): Promise<Models.LivePipelinesListResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param callback The callback
   */
  list(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.LivePipelineCollection>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, accountName: string, options: Models.LivePipelinesListOptionalParams, callback: msRest.ServiceCallback<Models.LivePipelineCollection>): void;
  list(resourceGroupName: string, accountName: string, options?: Models.LivePipelinesListOptionalParams | msRest.ServiceCallback<Models.LivePipelineCollection>, callback?: msRest.ServiceCallback<Models.LivePipelineCollection>): Promise<Models.LivePipelinesListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.LivePipelinesListResponse>;
  }

  /**
   * Retrieves a specific live pipeline by name. If a live pipeline with that name has been
   * previously created, the call will return the JSON representation of that instance.
   * @summary Retrieves a specific live pipeline by name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param livePipelineName Live pipeline unique identifier.
   * @param [options] The optional parameters
   * @returns Promise<Models.LivePipelinesGetResponse>
   */
  get(resourceGroupName: string, accountName: string, livePipelineName: string, options?: msRest.RequestOptionsBase): Promise<Models.LivePipelinesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param livePipelineName Live pipeline unique identifier.
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, livePipelineName: string, callback: msRest.ServiceCallback<Models.LivePipeline>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param livePipelineName Live pipeline unique identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, livePipelineName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LivePipeline>): void;
  get(resourceGroupName: string, accountName: string, livePipelineName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LivePipeline>, callback?: msRest.ServiceCallback<Models.LivePipeline>): Promise<Models.LivePipelinesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        livePipelineName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.LivePipelinesGetResponse>;
  }

  /**
   * Creates a new live pipeline or updates an existing one, with the given name.
   * @summary Creates or updates a live pipeline.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param livePipelineName Live pipeline unique identifier.
   * @param parameters The request parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.LivePipelinesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, accountName: string, livePipelineName: string, parameters: Models.LivePipeline, options?: msRest.RequestOptionsBase): Promise<Models.LivePipelinesCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param livePipelineName Live pipeline unique identifier.
   * @param parameters The request parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, accountName: string, livePipelineName: string, parameters: Models.LivePipeline, callback: msRest.ServiceCallback<Models.LivePipeline>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param livePipelineName Live pipeline unique identifier.
   * @param parameters The request parameters
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, accountName: string, livePipelineName: string, parameters: Models.LivePipeline, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LivePipeline>): void;
  createOrUpdate(resourceGroupName: string, accountName: string, livePipelineName: string, parameters: Models.LivePipeline, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LivePipeline>, callback?: msRest.ServiceCallback<Models.LivePipeline>): Promise<Models.LivePipelinesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        livePipelineName,
        parameters,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.LivePipelinesCreateOrUpdateResponse>;
  }

  /**
   * Deletes a live pipeline with the given name.
   * @summary Deletes a live pipeline.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param livePipelineName Live pipeline unique identifier.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, accountName: string, livePipelineName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param livePipelineName Live pipeline unique identifier.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, accountName: string, livePipelineName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param livePipelineName Live pipeline unique identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, accountName: string, livePipelineName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, accountName: string, livePipelineName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        livePipelineName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Updates an existing live pipeline with the given name. Properties that can be updated include:
   * description, bitrateKbps, and parameter definitions. Only the description can be updated while
   * the live pipeline is active.
   * @summary Updates an existing live pipeline.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param livePipelineName Live pipeline unique identifier.
   * @param parameters The request parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.LivePipelinesUpdateResponse>
   */
  update(resourceGroupName: string, accountName: string, livePipelineName: string, parameters: Models.LivePipelineUpdate, options?: msRest.RequestOptionsBase): Promise<Models.LivePipelinesUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param livePipelineName Live pipeline unique identifier.
   * @param parameters The request parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, accountName: string, livePipelineName: string, parameters: Models.LivePipelineUpdate, callback: msRest.ServiceCallback<Models.LivePipeline>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param livePipelineName Live pipeline unique identifier.
   * @param parameters The request parameters
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, accountName: string, livePipelineName: string, parameters: Models.LivePipelineUpdate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LivePipeline>): void;
  update(resourceGroupName: string, accountName: string, livePipelineName: string, parameters: Models.LivePipelineUpdate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LivePipeline>, callback?: msRest.ServiceCallback<Models.LivePipeline>): Promise<Models.LivePipelinesUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        livePipelineName,
        parameters,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.LivePipelinesUpdateResponse>;
  }

  /**
   * Activates a live pipeline with the given name.
   * @summary Activates a live pipeline.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param livePipelineName Live pipeline unique identifier.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  activate(resourceGroupName: string, accountName: string, livePipelineName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginActivate(resourceGroupName,accountName,livePipelineName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Deactivates a live pipeline with the given name.
   * @summary Deactivates a live pipeline.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param livePipelineName Live pipeline unique identifier.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deactivate(resourceGroupName: string, accountName: string, livePipelineName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeactivate(resourceGroupName,accountName,livePipelineName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Activates a live pipeline with the given name.
   * @summary Activates a live pipeline.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param livePipelineName Live pipeline unique identifier.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginActivate(resourceGroupName: string, accountName: string, livePipelineName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        livePipelineName,
        options
      },
      beginActivateOperationSpec,
      options);
  }

  /**
   * Deactivates a live pipeline with the given name.
   * @summary Deactivates a live pipeline.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param livePipelineName Live pipeline unique identifier.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeactivate(resourceGroupName: string, accountName: string, livePipelineName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        livePipelineName,
        options
      },
      beginDeactivateOperationSpec,
      options);
  }

  /**
   * Retrieves a list of live pipelines that have been created, along with their JSON
   * representations.
   * @summary Retrieves a list of live pipelines.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.LivePipelinesListNextResponse>
   */
  listNext(nextPageLink: string, options?: Models.LivePipelinesListNextOptionalParams): Promise<Models.LivePipelinesListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.LivePipelineCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: Models.LivePipelinesListNextOptionalParams, callback: msRest.ServiceCallback<Models.LivePipelineCollection>): void;
  listNext(nextPageLink: string, options?: Models.LivePipelinesListNextOptionalParams | msRest.ServiceCallback<Models.LivePipelineCollection>, callback?: msRest.ServiceCallback<Models.LivePipelineCollection>): Promise<Models.LivePipelinesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.LivePipelinesListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/livePipelines",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LivePipelineCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/livePipelines/{livePipelineName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.livePipelineName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LivePipeline
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/livePipelines/{livePipelineName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.livePipelineName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.LivePipeline,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.LivePipeline
    },
    201: {
      bodyMapper: Mappers.LivePipeline
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/livePipelines/{livePipelineName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.livePipelineName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/livePipelines/{livePipelineName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.livePipelineName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.LivePipelineUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.LivePipeline
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginActivateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/livePipelines/{livePipelineName}/activate",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.livePipelineName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeactivateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/livePipelines/{livePipelineName}/deactivate",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.livePipelineName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LivePipelineCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
