/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/pipelineTopologiesMappers";
import * as Parameters from "../models/parameters";
import { VideoAnalyzerContext } from "../videoAnalyzerContext";

/** Class representing a PipelineTopologies. */
export class PipelineTopologies {
  private readonly client: VideoAnalyzerContext;

  /**
   * Create a PipelineTopologies.
   * @param {VideoAnalyzerContext} client Reference to the service client.
   */
  constructor(client: VideoAnalyzerContext) {
    this.client = client;
  }

  /**
   * Retrieves a list of pipeline topologies that have been added to the account, if any, along with
   * their JSON representation.
   * @summary Retrieves a list of pipeline topologies.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param [options] The optional parameters
   * @returns Promise<Models.PipelineTopologiesListResponse>
   */
  list(resourceGroupName: string, accountName: string, options?: Models.PipelineTopologiesListOptionalParams): Promise<Models.PipelineTopologiesListResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param callback The callback
   */
  list(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.PipelineTopologyCollection>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, accountName: string, options: Models.PipelineTopologiesListOptionalParams, callback: msRest.ServiceCallback<Models.PipelineTopologyCollection>): void;
  list(resourceGroupName: string, accountName: string, options?: Models.PipelineTopologiesListOptionalParams | msRest.ServiceCallback<Models.PipelineTopologyCollection>, callback?: msRest.ServiceCallback<Models.PipelineTopologyCollection>): Promise<Models.PipelineTopologiesListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.PipelineTopologiesListResponse>;
  }

  /**
   * Retrieves a specific pipeline topology by name. If a topology with that name has been previously
   * created, the call will return the JSON representation of that topology.
   * @summary Retrieves a specific pipeline topology by name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param pipelineTopologyName Pipeline topology unique identifier.
   * @param [options] The optional parameters
   * @returns Promise<Models.PipelineTopologiesGetResponse>
   */
  get(resourceGroupName: string, accountName: string, pipelineTopologyName: string, options?: msRest.RequestOptionsBase): Promise<Models.PipelineTopologiesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param pipelineTopologyName Pipeline topology unique identifier.
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, pipelineTopologyName: string, callback: msRest.ServiceCallback<Models.PipelineTopology>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param pipelineTopologyName Pipeline topology unique identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, pipelineTopologyName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PipelineTopology>): void;
  get(resourceGroupName: string, accountName: string, pipelineTopologyName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PipelineTopology>, callback?: msRest.ServiceCallback<Models.PipelineTopology>): Promise<Models.PipelineTopologiesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        pipelineTopologyName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.PipelineTopologiesGetResponse>;
  }

  /**
   * Creates a new pipeline topology or updates an existing one, with the given name. A pipeline
   * topology describes the processing steps to be applied when processing content for a particular
   * outcome. The topology should be defined according to the scenario to be achieved and can be
   * reused across many pipeline instances which share the same processing characteristics.
   * @summary Creates or updates a pipeline topology.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param pipelineTopologyName Pipeline topology unique identifier.
   * @param parameters The request parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.PipelineTopologiesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, accountName: string, pipelineTopologyName: string, parameters: Models.PipelineTopology, options?: msRest.RequestOptionsBase): Promise<Models.PipelineTopologiesCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param pipelineTopologyName Pipeline topology unique identifier.
   * @param parameters The request parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, accountName: string, pipelineTopologyName: string, parameters: Models.PipelineTopology, callback: msRest.ServiceCallback<Models.PipelineTopology>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param pipelineTopologyName Pipeline topology unique identifier.
   * @param parameters The request parameters
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, accountName: string, pipelineTopologyName: string, parameters: Models.PipelineTopology, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PipelineTopology>): void;
  createOrUpdate(resourceGroupName: string, accountName: string, pipelineTopologyName: string, parameters: Models.PipelineTopology, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PipelineTopology>, callback?: msRest.ServiceCallback<Models.PipelineTopology>): Promise<Models.PipelineTopologiesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        pipelineTopologyName,
        parameters,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.PipelineTopologiesCreateOrUpdateResponse>;
  }

  /**
   * Deletes a pipeline topology with the given name. This method should be called after all
   * instances of the topology have been stopped and deleted.
   * @summary Deletes a pipeline topology.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param pipelineTopologyName Pipeline topology unique identifier.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, accountName: string, pipelineTopologyName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param pipelineTopologyName Pipeline topology unique identifier.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, accountName: string, pipelineTopologyName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param pipelineTopologyName Pipeline topology unique identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, accountName: string, pipelineTopologyName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, accountName: string, pipelineTopologyName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        pipelineTopologyName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Updates an existing pipeline topology with the given name. If the associated live pipelines or
   * pipeline jobs are in active or processing state, respectively, then only the description can be
   * updated. Else, the properties that can be updated include: description, parameter declarations,
   * sources, processors, and sinks.
   * @summary Updates an existing pipeline topology.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param pipelineTopologyName Pipeline topology unique identifier.
   * @param parameters The request parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.PipelineTopologiesUpdateResponse>
   */
  update(resourceGroupName: string, accountName: string, pipelineTopologyName: string, parameters: Models.PipelineTopologyUpdate, options?: msRest.RequestOptionsBase): Promise<Models.PipelineTopologiesUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param pipelineTopologyName Pipeline topology unique identifier.
   * @param parameters The request parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, accountName: string, pipelineTopologyName: string, parameters: Models.PipelineTopologyUpdate, callback: msRest.ServiceCallback<Models.PipelineTopology>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param pipelineTopologyName Pipeline topology unique identifier.
   * @param parameters The request parameters
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, accountName: string, pipelineTopologyName: string, parameters: Models.PipelineTopologyUpdate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PipelineTopology>): void;
  update(resourceGroupName: string, accountName: string, pipelineTopologyName: string, parameters: Models.PipelineTopologyUpdate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PipelineTopology>, callback?: msRest.ServiceCallback<Models.PipelineTopology>): Promise<Models.PipelineTopologiesUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        pipelineTopologyName,
        parameters,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.PipelineTopologiesUpdateResponse>;
  }

  /**
   * Retrieves a list of pipeline topologies that have been added to the account, if any, along with
   * their JSON representation.
   * @summary Retrieves a list of pipeline topologies.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PipelineTopologiesListNextResponse>
   */
  listNext(nextPageLink: string, options?: Models.PipelineTopologiesListNextOptionalParams): Promise<Models.PipelineTopologiesListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PipelineTopologyCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: Models.PipelineTopologiesListNextOptionalParams, callback: msRest.ServiceCallback<Models.PipelineTopologyCollection>): void;
  listNext(nextPageLink: string, options?: Models.PipelineTopologiesListNextOptionalParams | msRest.ServiceCallback<Models.PipelineTopologyCollection>, callback?: msRest.ServiceCallback<Models.PipelineTopologyCollection>): Promise<Models.PipelineTopologiesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.PipelineTopologiesListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/pipelineTopologies",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PipelineTopologyCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/pipelineTopologies/{pipelineTopologyName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.pipelineTopologyName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PipelineTopology
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/pipelineTopologies/{pipelineTopologyName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.pipelineTopologyName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.PipelineTopology,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PipelineTopology
    },
    201: {
      bodyMapper: Mappers.PipelineTopology
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/pipelineTopologies/{pipelineTopologyName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.pipelineTopologyName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/pipelineTopologies/{pipelineTopologyName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.pipelineTopologyName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.PipelineTopologyUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PipelineTopology
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PipelineTopologyCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
