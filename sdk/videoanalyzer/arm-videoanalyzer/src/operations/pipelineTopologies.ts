/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PipelineTopologies } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { VideoAnalyzerManagementClient } from "../videoAnalyzerManagementClient";
import {
  PipelineTopology,
  PipelineTopologiesListNextOptionalParams,
  PipelineTopologiesListOptionalParams,
  PipelineTopologiesListResponse,
  PipelineTopologiesGetOptionalParams,
  PipelineTopologiesGetResponse,
  PipelineTopologiesCreateOrUpdateOptionalParams,
  PipelineTopologiesCreateOrUpdateResponse,
  PipelineTopologiesDeleteOptionalParams,
  PipelineTopologyUpdate,
  PipelineTopologiesUpdateOptionalParams,
  PipelineTopologiesUpdateResponse,
  PipelineTopologiesListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing PipelineTopologies operations. */
export class PipelineTopologiesImpl implements PipelineTopologies {
  private readonly client: VideoAnalyzerManagementClient;

  /**
   * Initialize a new instance of the class PipelineTopologies class.
   * @param client Reference to the service client
   */
  constructor(client: VideoAnalyzerManagementClient) {
    this.client = client;
  }

  /**
   * Retrieves a list of pipeline topologies that have been added to the account, if any, along with
   * their JSON representation.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    accountName: string,
    options?: PipelineTopologiesListOptionalParams
  ): PagedAsyncIterableIterator<PipelineTopology> {
    const iter = this.listPagingAll(resourceGroupName, accountName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(resourceGroupName, accountName, options);
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    accountName: string,
    options?: PipelineTopologiesListOptionalParams
  ): AsyncIterableIterator<PipelineTopology[]> {
    let result = await this._list(resourceGroupName, accountName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        accountName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    accountName: string,
    options?: PipelineTopologiesListOptionalParams
  ): AsyncIterableIterator<PipelineTopology> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      accountName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Retrieves a list of pipeline topologies that have been added to the account, if any, along with
   * their JSON representation.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    accountName: string,
    options?: PipelineTopologiesListOptionalParams
  ): Promise<PipelineTopologiesListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, options },
      listOperationSpec
    );
  }

  /**
   * Retrieves a specific pipeline topology by name. If a topology with that name has been previously
   * created, the call will return the JSON representation of that topology.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param pipelineTopologyName Pipeline topology unique identifier.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    pipelineTopologyName: string,
    options?: PipelineTopologiesGetOptionalParams
  ): Promise<PipelineTopologiesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, pipelineTopologyName, options },
      getOperationSpec
    );
  }

  /**
   * Creates a new pipeline topology or updates an existing one, with the given name. A pipeline topology
   * describes the processing steps to be applied when processing content for a particular outcome. The
   * topology should be defined according to the scenario to be achieved and can be reused across many
   * pipeline instances which share the same processing characteristics.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param pipelineTopologyName Pipeline topology unique identifier.
   * @param parameters The request parameters
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    accountName: string,
    pipelineTopologyName: string,
    parameters: PipelineTopology,
    options?: PipelineTopologiesCreateOrUpdateOptionalParams
  ): Promise<PipelineTopologiesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        pipelineTopologyName,
        parameters,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Deletes a pipeline topology with the given name. This method should be called after all instances of
   * the topology have been stopped and deleted.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param pipelineTopologyName Pipeline topology unique identifier.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    accountName: string,
    pipelineTopologyName: string,
    options?: PipelineTopologiesDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, pipelineTopologyName, options },
      deleteOperationSpec
    );
  }

  /**
   * Updates an existing pipeline topology with the given name. If the associated live pipelines or
   * pipeline jobs are in active or processing state, respectively, then only the description can be
   * updated. Else, the properties that can be updated include: description, parameter declarations,
   * sources, processors, and sinks.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param pipelineTopologyName Pipeline topology unique identifier.
   * @param parameters The request parameters
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    accountName: string,
    pipelineTopologyName: string,
    parameters: PipelineTopologyUpdate,
    options?: PipelineTopologiesUpdateOptionalParams
  ): Promise<PipelineTopologiesUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        pipelineTopologyName,
        parameters,
        options
      },
      updateOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    accountName: string,
    nextLink: string,
    options?: PipelineTopologiesListNextOptionalParams
  ): Promise<PipelineTopologiesListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/pipelineTopologies",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PipelineTopologyCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/pipelineTopologies/{pipelineTopologyName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PipelineTopology
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.pipelineTopologyName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/pipelineTopologies/{pipelineTopologyName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PipelineTopology
    },
    201: {
      bodyMapper: Mappers.PipelineTopology
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.pipelineTopologyName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/pipelineTopologies/{pipelineTopologyName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.pipelineTopologyName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/pipelineTopologies/{pipelineTopologyName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.PipelineTopology
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.pipelineTopologyName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PipelineTopologyCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
