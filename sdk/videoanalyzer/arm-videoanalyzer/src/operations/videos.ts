/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/videosMappers";
import * as Parameters from "../models/parameters";
import { AzureVideoAnalyzerContext } from "../azureVideoAnalyzerContext";

/** Class representing a Videos. */
export class Videos {
  private readonly client: AzureVideoAnalyzerContext;

  /**
   * Create a Videos.
   * @param {AzureVideoAnalyzerContext} client Reference to the service client.
   */
  constructor(client: AzureVideoAnalyzerContext) {
    this.client = client;
  }

  /**
   * List all existing video resources in the specified account.
   * @summary List all existing video resources.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param [options] The optional parameters
   * @returns Promise<Models.VideosListResponse>
   */
  list(resourceGroupName: string, accountName: string, options?: Models.VideosListOptionalParams): Promise<Models.VideosListResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param callback The callback
   */
  list(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.VideoEntityCollection>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, accountName: string, options: Models.VideosListOptionalParams, callback: msRest.ServiceCallback<Models.VideoEntityCollection>): void;
  list(resourceGroupName: string, accountName: string, options?: Models.VideosListOptionalParams | msRest.ServiceCallback<Models.VideoEntityCollection>, callback?: msRest.ServiceCallback<Models.VideoEntityCollection>): Promise<Models.VideosListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.VideosListResponse>;
  }

  /**
   * Retrieves an existing video resource within an account with a given name.
   * @summary Retrieves a video resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param videoName The name of the video to retrieve.
   * @param [options] The optional parameters
   * @returns Promise<Models.VideosGetResponse>
   */
  get(resourceGroupName: string, accountName: string, videoName: string, options?: msRest.RequestOptionsBase): Promise<Models.VideosGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param videoName The name of the video to retrieve.
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, videoName: string, callback: msRest.ServiceCallback<Models.VideoEntity>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param videoName The name of the video to retrieve.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, videoName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VideoEntity>): void;
  get(resourceGroupName: string, accountName: string, videoName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VideoEntity>, callback?: msRest.ServiceCallback<Models.VideoEntity>): Promise<Models.VideosGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        videoName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.VideosGetResponse>;
  }

  /**
   * Creates a new video resource or updates an existing one in an account.
   * @summary Create or updates a video resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param videoName The name of the video to create or update.
   * @param parameters The request parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.VideosCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, accountName: string, videoName: string, parameters: Models.VideoEntity, options?: msRest.RequestOptionsBase): Promise<Models.VideosCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param videoName The name of the video to create or update.
   * @param parameters The request parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, accountName: string, videoName: string, parameters: Models.VideoEntity, callback: msRest.ServiceCallback<Models.VideoEntity>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param videoName The name of the video to create or update.
   * @param parameters The request parameters
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, accountName: string, videoName: string, parameters: Models.VideoEntity, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VideoEntity>): void;
  createOrUpdate(resourceGroupName: string, accountName: string, videoName: string, parameters: Models.VideoEntity, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VideoEntity>, callback?: msRest.ServiceCallback<Models.VideoEntity>): Promise<Models.VideosCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        videoName,
        parameters,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.VideosCreateOrUpdateResponse>;
  }

  /**
   * Deletes an existing video resource and its underlying data. This operation is irreversible.
   * @summary Deletes a video resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param videoName The name of the video to delete.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, accountName: string, videoName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param videoName The name of the video to delete.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, accountName: string, videoName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param videoName The name of the video to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, accountName: string, videoName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, accountName: string, videoName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        videoName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Updates individual properties of an existing video resource.
   * @summary Updates the properties of a video resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param videoName The name of the video to update.
   * @param parameters The request parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.VideosUpdateResponse>
   */
  update(resourceGroupName: string, accountName: string, videoName: string, parameters: Models.VideoEntity, options?: msRest.RequestOptionsBase): Promise<Models.VideosUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param videoName The name of the video to update.
   * @param parameters The request parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, accountName: string, videoName: string, parameters: Models.VideoEntity, callback: msRest.ServiceCallback<Models.VideoEntity>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param videoName The name of the video to update.
   * @param parameters The request parameters
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, accountName: string, videoName: string, parameters: Models.VideoEntity, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VideoEntity>): void;
  update(resourceGroupName: string, accountName: string, videoName: string, parameters: Models.VideoEntity, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VideoEntity>, callback?: msRest.ServiceCallback<Models.VideoEntity>): Promise<Models.VideosUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        videoName,
        parameters,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.VideosUpdateResponse>;
  }

  /**
   * Generates a streaming token used for authenticating video playback.
   * @summary Generates a streaming token for video playback.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param videoName The name of the video to generate a token for playback.
   * @param [options] The optional parameters
   * @returns Promise<Models.VideosListStreamingTokenResponse>
   */
  listStreamingToken(resourceGroupName: string, accountName: string, videoName: string, options?: msRest.RequestOptionsBase): Promise<Models.VideosListStreamingTokenResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param videoName The name of the video to generate a token for playback.
   * @param callback The callback
   */
  listStreamingToken(resourceGroupName: string, accountName: string, videoName: string, callback: msRest.ServiceCallback<Models.VideoStreamingToken>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param videoName The name of the video to generate a token for playback.
   * @param options The optional parameters
   * @param callback The callback
   */
  listStreamingToken(resourceGroupName: string, accountName: string, videoName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VideoStreamingToken>): void;
  listStreamingToken(resourceGroupName: string, accountName: string, videoName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VideoStreamingToken>, callback?: msRest.ServiceCallback<Models.VideoStreamingToken>): Promise<Models.VideosListStreamingTokenResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        videoName,
        options
      },
      listStreamingTokenOperationSpec,
      callback) as Promise<Models.VideosListStreamingTokenResponse>;
  }

  /**
   * List all existing video resources in the specified account.
   * @summary List all existing video resources.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.VideosListNextResponse>
   */
  listNext(nextPageLink: string, options?: Models.VideosListNextOptionalParams): Promise<Models.VideosListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.VideoEntityCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: Models.VideosListNextOptionalParams, callback: msRest.ServiceCallback<Models.VideoEntityCollection>): void;
  listNext(nextPageLink: string, options?: Models.VideosListNextOptionalParams | msRest.ServiceCallback<Models.VideoEntityCollection>, callback?: msRest.ServiceCallback<Models.VideoEntityCollection>): Promise<Models.VideosListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.VideosListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/videos",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VideoEntityCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/videos/{videoName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.videoName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VideoEntity
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/videos/{videoName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.videoName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.VideoEntity,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VideoEntity
    },
    201: {
      bodyMapper: Mappers.VideoEntity
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/videos/{videoName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.videoName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/videos/{videoName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.videoName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.VideoEntity,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VideoEntity
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listStreamingTokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/videos/{videoName}/listStreamingToken",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.videoName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VideoStreamingToken
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VideoEntityCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
