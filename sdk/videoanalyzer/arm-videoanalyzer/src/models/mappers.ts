/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const ListProvisioningTokenInput: msRest.CompositeMapper = {
  serializedName: "ListProvisioningTokenInput",
  type: {
    name: "Composite",
    className: "ListProvisioningTokenInput",
    modelProperties: {
      expirationDate: {
        required: true,
        serializedName: "expirationDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const EdgeModuleProvisioningToken: msRest.CompositeMapper = {
  serializedName: "EdgeModuleProvisioningToken",
  type: {
    name: "Composite",
    className: "EdgeModuleProvisioningToken",
    modelProperties: {
      expirationDate: {
        nullable: false,
        readOnly: true,
        serializedName: "expirationDate",
        type: {
          name: "DateTime"
        }
      },
      token: {
        readOnly: true,
        serializedName: "token",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      systemData: {
        readOnly: true,
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const ProxyResource: msRest.CompositeMapper = {
  serializedName: "ProxyResource",
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const EdgeModuleEntity: msRest.CompositeMapper = {
  serializedName: "EdgeModuleEntity",
  type: {
    name: "Composite",
    className: "EdgeModuleEntity",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      edgeModuleId: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.edgeModuleId",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: msRest.CompositeMapper = {
  serializedName: "ErrorAdditionalInfo",
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      info: {
        readOnly: true,
        serializedName: "info",
        type: {
          name: "Object"
        }
      }
    }
  }
};

export const ErrorDetail: msRest.CompositeMapper = {
  serializedName: "ErrorDetail",
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        readOnly: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        readOnly: true,
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        readOnly: true,
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        readOnly: true,
        serializedName: "additionalInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorResponse: msRest.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const SystemData: msRest.CompositeMapper = {
  serializedName: "systemData",
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const TrackedResource: msRest.CompositeMapper = {
  serializedName: "TrackedResource",
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureEntityResource: msRest.CompositeMapper = {
  serializedName: "AzureEntityResource",
  type: {
    name: "Composite",
    className: "AzureEntityResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: msRest.CompositeMapper = {
  serializedName: "Sku",
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        nullable: false,
        readOnly: true,
        serializedName: "tier",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ParameterDeclaration: msRest.CompositeMapper = {
  serializedName: "ParameterDeclaration",
  type: {
    name: "Composite",
    className: "ParameterDeclaration",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      default: {
        serializedName: "default",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NodeBase: msRest.CompositeMapper = {
  serializedName: "NodeBase",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "type"
    },
    uberParent: "NodeBase",
    className: "NodeBase",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        serializedName: "@type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SourceNodeBase: msRest.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.SourceNodeBase",
  type: {
    name: "Composite",
    polymorphicDiscriminator: NodeBase.type.polymorphicDiscriminator,
    uberParent: "NodeBase",
    className: "SourceNodeBase",
    modelProperties: {
      ...NodeBase.type.modelProperties
    }
  }
};

export const NodeInput: msRest.CompositeMapper = {
  serializedName: "NodeInput",
  type: {
    name: "Composite",
    className: "NodeInput",
    modelProperties: {
      nodeName: {
        required: true,
        serializedName: "nodeName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProcessorNodeBase: msRest.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.ProcessorNodeBase",
  type: {
    name: "Composite",
    polymorphicDiscriminator: NodeBase.type.polymorphicDiscriminator,
    uberParent: "NodeBase",
    className: "ProcessorNodeBase",
    modelProperties: {
      ...NodeBase.type.modelProperties,
      inputs: {
        required: true,
        serializedName: "inputs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NodeInput"
            }
          }
        }
      }
    }
  }
};

export const SinkNodeBase: msRest.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.SinkNodeBase",
  type: {
    name: "Composite",
    polymorphicDiscriminator: NodeBase.type.polymorphicDiscriminator,
    uberParent: "NodeBase",
    className: "SinkNodeBase",
    modelProperties: {
      ...NodeBase.type.modelProperties,
      inputs: {
        required: true,
        serializedName: "inputs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NodeInput"
            }
          }
        }
      }
    }
  }
};

export const CredentialsBase: msRest.CompositeMapper = {
  serializedName: "CredentialsBase",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "type"
    },
    uberParent: "CredentialsBase",
    className: "CredentialsBase",
    modelProperties: {
      type: {
        required: true,
        serializedName: "@type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TunnelBase: msRest.CompositeMapper = {
  serializedName: "TunnelBase",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "type"
    },
    uberParent: "TunnelBase",
    className: "TunnelBase",
    modelProperties: {
      type: {
        required: true,
        serializedName: "@type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointBase: msRest.CompositeMapper = {
  serializedName: "EndpointBase",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "type"
    },
    uberParent: "EndpointBase",
    className: "EndpointBase",
    modelProperties: {
      credentials: {
        serializedName: "credentials",
        type: {
          name: "Composite",
          className: "CredentialsBase"
        }
      },
      url: {
        required: true,
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      tunnel: {
        serializedName: "tunnel",
        type: {
          name: "Composite",
          className: "TunnelBase"
        }
      },
      type: {
        required: true,
        serializedName: "@type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RtspSource: msRest.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.RtspSource",
  type: {
    name: "Composite",
    polymorphicDiscriminator: NodeBase.type.polymorphicDiscriminator,
    uberParent: "NodeBase",
    className: "RtspSource",
    modelProperties: {
      ...SourceNodeBase.type.modelProperties,
      transport: {
        serializedName: "transport",
        type: {
          name: "String"
        }
      },
      endpoint: {
        required: true,
        serializedName: "endpoint",
        type: {
          name: "Composite",
          className: "EndpointBase"
        }
      }
    }
  }
};

export const UsernamePasswordCredentials: msRest.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.UsernamePasswordCredentials",
  type: {
    name: "Composite",
    polymorphicDiscriminator: CredentialsBase.type.polymorphicDiscriminator,
    uberParent: "CredentialsBase",
    className: "UsernamePasswordCredentials",
    modelProperties: {
      ...CredentialsBase.type.modelProperties,
      username: {
        required: true,
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        required: true,
        serializedName: "password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecureIotDeviceRemoteTunnel: msRest.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.SecureIotDeviceRemoteTunnel",
  type: {
    name: "Composite",
    polymorphicDiscriminator: TunnelBase.type.polymorphicDiscriminator,
    uberParent: "TunnelBase",
    className: "SecureIotDeviceRemoteTunnel",
    modelProperties: {
      ...TunnelBase.type.modelProperties,
      iotHubName: {
        required: true,
        serializedName: "iotHubName",
        type: {
          name: "String"
        }
      },
      deviceId: {
        required: true,
        serializedName: "deviceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UnsecuredEndpoint: msRest.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.UnsecuredEndpoint",
  type: {
    name: "Composite",
    polymorphicDiscriminator: EndpointBase.type.polymorphicDiscriminator,
    uberParent: "EndpointBase",
    className: "UnsecuredEndpoint",
    modelProperties: {
      ...EndpointBase.type.modelProperties
    }
  }
};

export const CertificateSource: msRest.CompositeMapper = {
  serializedName: "CertificateSource",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "type"
    },
    uberParent: "CertificateSource",
    className: "CertificateSource",
    modelProperties: {
      type: {
        required: true,
        serializedName: "@type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TlsValidationOptions: msRest.CompositeMapper = {
  serializedName: "TlsValidationOptions",
  type: {
    name: "Composite",
    className: "TlsValidationOptions",
    modelProperties: {
      ignoreHostname: {
        serializedName: "ignoreHostname",
        type: {
          name: "String"
        }
      },
      ignoreSignature: {
        serializedName: "ignoreSignature",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TlsEndpoint: msRest.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.TlsEndpoint",
  type: {
    name: "Composite",
    polymorphicDiscriminator: EndpointBase.type.polymorphicDiscriminator,
    uberParent: "EndpointBase",
    className: "TlsEndpoint",
    modelProperties: {
      ...EndpointBase.type.modelProperties,
      trustedCertificates: {
        serializedName: "trustedCertificates",
        type: {
          name: "Composite",
          className: "CertificateSource"
        }
      },
      validationOptions: {
        serializedName: "validationOptions",
        type: {
          name: "Composite",
          className: "TlsValidationOptions"
        }
      }
    }
  }
};

export const PemCertificateList: msRest.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.PemCertificateList",
  type: {
    name: "Composite",
    polymorphicDiscriminator: CertificateSource.type.polymorphicDiscriminator,
    uberParent: "CertificateSource",
    className: "PemCertificateList",
    modelProperties: {
      ...CertificateSource.type.modelProperties,
      certificates: {
        required: true,
        serializedName: "certificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const TimeSequenceBase: msRest.CompositeMapper = {
  serializedName: "TimeSequenceBase",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "type"
    },
    uberParent: "TimeSequenceBase",
    className: "TimeSequenceBase",
    modelProperties: {
      type: {
        required: true,
        serializedName: "@type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VideoSource: msRest.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.VideoSource",
  type: {
    name: "Composite",
    polymorphicDiscriminator: NodeBase.type.polymorphicDiscriminator,
    uberParent: "NodeBase",
    className: "VideoSource",
    modelProperties: {
      ...SourceNodeBase.type.modelProperties,
      videoName: {
        required: true,
        serializedName: "videoName",
        type: {
          name: "String"
        }
      },
      timeSequences: {
        required: true,
        serializedName: "timeSequences",
        type: {
          name: "Composite",
          className: "TimeSequenceBase"
        }
      }
    }
  }
};

export const VideoSequenceAbsoluteTimeMarkers: msRest.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.VideoSequenceAbsoluteTimeMarkers",
  type: {
    name: "Composite",
    polymorphicDiscriminator: TimeSequenceBase.type.polymorphicDiscriminator,
    uberParent: "TimeSequenceBase",
    className: "VideoSequenceAbsoluteTimeMarkers",
    modelProperties: {
      ...TimeSequenceBase.type.modelProperties,
      ranges: {
        required: true,
        serializedName: "ranges",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EncoderPresetBase: msRest.CompositeMapper = {
  serializedName: "EncoderPresetBase",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "type"
    },
    uberParent: "EncoderPresetBase",
    className: "EncoderPresetBase",
    modelProperties: {
      type: {
        required: true,
        serializedName: "@type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EncoderProcessor: msRest.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.EncoderProcessor",
  type: {
    name: "Composite",
    polymorphicDiscriminator: NodeBase.type.polymorphicDiscriminator,
    uberParent: "NodeBase",
    className: "EncoderProcessor",
    modelProperties: {
      ...ProcessorNodeBase.type.modelProperties,
      preset: {
        required: true,
        serializedName: "preset",
        type: {
          name: "Composite",
          className: "EncoderPresetBase"
        }
      }
    }
  }
};

export const EncoderSystemPreset: msRest.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.EncoderSystemPreset",
  type: {
    name: "Composite",
    polymorphicDiscriminator: EncoderPresetBase.type.polymorphicDiscriminator,
    uberParent: "EncoderPresetBase",
    className: "EncoderSystemPreset",
    modelProperties: {
      ...EncoderPresetBase.type.modelProperties,
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AudioEncoderBase: msRest.CompositeMapper = {
  serializedName: "AudioEncoderBase",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "type"
    },
    uberParent: "AudioEncoderBase",
    className: "AudioEncoderBase",
    modelProperties: {
      bitrateKbps: {
        serializedName: "bitrateKbps",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        serializedName: "@type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VideoScale: msRest.CompositeMapper = {
  serializedName: "VideoScale",
  type: {
    name: "Composite",
    className: "VideoScale",
    modelProperties: {
      height: {
        serializedName: "height",
        type: {
          name: "String"
        }
      },
      width: {
        serializedName: "width",
        type: {
          name: "String"
        }
      },
      mode: {
        serializedName: "mode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VideoEncoderBase: msRest.CompositeMapper = {
  serializedName: "VideoEncoderBase",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "type"
    },
    uberParent: "VideoEncoderBase",
    className: "VideoEncoderBase",
    modelProperties: {
      bitrateKbps: {
        serializedName: "bitrateKbps",
        type: {
          name: "String"
        }
      },
      frameRate: {
        serializedName: "frameRate",
        type: {
          name: "String"
        }
      },
      scale: {
        serializedName: "scale",
        type: {
          name: "Composite",
          className: "VideoScale"
        }
      },
      type: {
        required: true,
        serializedName: "@type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EncoderCustomPreset: msRest.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.EncoderCustomPreset",
  type: {
    name: "Composite",
    polymorphicDiscriminator: EncoderPresetBase.type.polymorphicDiscriminator,
    uberParent: "EncoderPresetBase",
    className: "EncoderCustomPreset",
    modelProperties: {
      ...EncoderPresetBase.type.modelProperties,
      audioEncoder: {
        serializedName: "audioEncoder",
        type: {
          name: "Composite",
          className: "AudioEncoderBase"
        }
      },
      videoEncoder: {
        serializedName: "videoEncoder",
        type: {
          name: "Composite",
          className: "VideoEncoderBase"
        }
      }
    }
  }
};

export const AudioEncoderAac: msRest.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.AudioEncoderAac",
  type: {
    name: "Composite",
    polymorphicDiscriminator: AudioEncoderBase.type.polymorphicDiscriminator,
    uberParent: "AudioEncoderBase",
    className: "AudioEncoderAac",
    modelProperties: {
      ...AudioEncoderBase.type.modelProperties
    }
  }
};

export const VideoEncoderH264: msRest.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.VideoEncoderH264",
  type: {
    name: "Composite",
    polymorphicDiscriminator: VideoEncoderBase.type.polymorphicDiscriminator,
    uberParent: "VideoEncoderBase",
    className: "VideoEncoderH264",
    modelProperties: {
      ...VideoEncoderBase.type.modelProperties
    }
  }
};

export const VideoCreationProperties: msRest.CompositeMapper = {
  serializedName: "VideoCreationProperties",
  type: {
    name: "Composite",
    className: "VideoCreationProperties",
    modelProperties: {
      title: {
        serializedName: "title",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      segmentLength: {
        serializedName: "segmentLength",
        type: {
          name: "String"
        }
      },
      retentionPeriod: {
        serializedName: "retentionPeriod",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VideoPublishingOptions: msRest.CompositeMapper = {
  serializedName: "VideoPublishingOptions",
  type: {
    name: "Composite",
    className: "VideoPublishingOptions",
    modelProperties: {
      disableArchive: {
        serializedName: "disableArchive",
        type: {
          name: "String"
        }
      },
      disableRtspPublishing: {
        serializedName: "disableRtspPublishing",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VideoSink: msRest.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.VideoSink",
  type: {
    name: "Composite",
    polymorphicDiscriminator: NodeBase.type.polymorphicDiscriminator,
    uberParent: "NodeBase",
    className: "VideoSink",
    modelProperties: {
      ...SinkNodeBase.type.modelProperties,
      videoName: {
        required: true,
        serializedName: "videoName",
        type: {
          name: "String"
        }
      },
      videoCreationProperties: {
        serializedName: "videoCreationProperties",
        type: {
          name: "Composite",
          className: "VideoCreationProperties"
        }
      },
      videoPublishingOptions: {
        serializedName: "videoPublishingOptions",
        type: {
          name: "Composite",
          className: "VideoPublishingOptions"
        }
      }
    }
  }
};

export const ParameterDefinition: msRest.CompositeMapper = {
  serializedName: "ParameterDefinition",
  type: {
    name: "Composite",
    className: "ParameterDefinition",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PipelineTopology: msRest.CompositeMapper = {
  serializedName: "PipelineTopology",
  type: {
    name: "Composite",
    className: "PipelineTopology",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "properties.parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ParameterDeclaration"
            }
          }
        }
      },
      sources: {
        required: true,
        serializedName: "properties.sources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SourceNodeBase"
            }
          }
        }
      },
      processors: {
        serializedName: "properties.processors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProcessorNodeBase"
            }
          }
        }
      },
      sinks: {
        required: true,
        serializedName: "properties.sinks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SinkNodeBase"
            }
          }
        }
      },
      kind: {
        required: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      sku: {
        required: true,
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const PipelineTopologyUpdate: msRest.CompositeMapper = {
  serializedName: "PipelineTopologyUpdate",
  type: {
    name: "Composite",
    className: "PipelineTopologyUpdate",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "properties.parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ParameterDeclaration"
            }
          }
        }
      },
      sources: {
        serializedName: "properties.sources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SourceNodeBase"
            }
          }
        }
      },
      processors: {
        serializedName: "properties.processors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProcessorNodeBase"
            }
          }
        }
      },
      sinks: {
        serializedName: "properties.sinks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SinkNodeBase"
            }
          }
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const LivePipeline: msRest.CompositeMapper = {
  serializedName: "LivePipeline",
  type: {
    name: "Composite",
    className: "LivePipeline",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      topologyName: {
        required: true,
        serializedName: "properties.topologyName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      bitrateKbps: {
        required: true,
        serializedName: "properties.bitrateKbps",
        type: {
          name: "Number"
        }
      },
      state: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "properties.parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ParameterDefinition"
            }
          }
        }
      }
    }
  }
};

export const LivePipelineUpdate: msRest.CompositeMapper = {
  serializedName: "LivePipelineUpdate",
  type: {
    name: "Composite",
    className: "LivePipelineUpdate",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      topologyName: {
        serializedName: "properties.topologyName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      bitrateKbps: {
        serializedName: "properties.bitrateKbps",
        type: {
          name: "Number"
        }
      },
      state: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "properties.parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ParameterDefinition"
            }
          }
        }
      }
    }
  }
};

export const PipelineJobError: msRest.CompositeMapper = {
  serializedName: "PipelineJobError",
  type: {
    name: "Composite",
    className: "PipelineJobError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PipelineJob: msRest.CompositeMapper = {
  serializedName: "PipelineJob",
  type: {
    name: "Composite",
    className: "PipelineJob",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      topologyName: {
        required: true,
        serializedName: "properties.topologyName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      state: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      expiration: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.expiration",
        type: {
          name: "DateTime"
        }
      },
      error: {
        readOnly: true,
        serializedName: "properties.error",
        type: {
          name: "Composite",
          className: "PipelineJobError"
        }
      },
      parameters: {
        serializedName: "properties.parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ParameterDefinition"
            }
          }
        }
      }
    }
  }
};

export const PipelineJobUpdate: msRest.CompositeMapper = {
  serializedName: "PipelineJobUpdate",
  type: {
    name: "Composite",
    className: "PipelineJobUpdate",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      topologyName: {
        serializedName: "properties.topologyName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      state: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      expiration: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.expiration",
        type: {
          name: "DateTime"
        }
      },
      error: {
        readOnly: true,
        serializedName: "properties.error",
        type: {
          name: "Composite",
          className: "PipelineJobError"
        }
      },
      parameters: {
        serializedName: "properties.parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ParameterDefinition"
            }
          }
        }
      }
    }
  }
};

export const LivePipelineOperationStatus: msRest.CompositeMapper = {
  serializedName: "LivePipelineOperationStatus",
  type: {
    name: "Composite",
    className: "LivePipelineOperationStatus",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      error: {
        readOnly: true,
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const PipelineJobOperationStatus: msRest.CompositeMapper = {
  serializedName: "PipelineJobOperationStatus",
  type: {
    name: "Composite",
    className: "PipelineJobOperationStatus",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      error: {
        readOnly: true,
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const OperationDisplay: msRest.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricDimension: msRest.CompositeMapper = {
  serializedName: "MetricDimension",
  type: {
    name: "Composite",
    className: "MetricDimension",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        readOnly: true,
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      toBeExportedForShoebox: {
        nullable: false,
        readOnly: true,
        serializedName: "toBeExportedForShoebox",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const MetricSpecification: msRest.CompositeMapper = {
  serializedName: "MetricSpecification",
  type: {
    name: "Composite",
    className: "MetricSpecification",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        readOnly: true,
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      displayDescription: {
        readOnly: true,
        serializedName: "displayDescription",
        type: {
          name: "String"
        }
      },
      unit: {
        nullable: false,
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      aggregationType: {
        nullable: false,
        readOnly: true,
        serializedName: "aggregationType",
        type: {
          name: "String"
        }
      },
      lockAggregationType: {
        nullable: true,
        readOnly: true,
        serializedName: "lockAggregationType",
        type: {
          name: "String"
        }
      },
      supportedAggregationTypes: {
        serializedName: "supportedAggregationTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      dimensions: {
        readOnly: true,
        serializedName: "dimensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricDimension"
            }
          }
        }
      },
      enableRegionalMdmAccount: {
        nullable: false,
        readOnly: true,
        serializedName: "enableRegionalMdmAccount",
        type: {
          name: "Boolean"
        }
      },
      sourceMdmAccount: {
        readOnly: true,
        serializedName: "sourceMdmAccount",
        type: {
          name: "String"
        }
      },
      sourceMdmNamespace: {
        readOnly: true,
        serializedName: "sourceMdmNamespace",
        type: {
          name: "String"
        }
      },
      supportedTimeGrainTypes: {
        readOnly: true,
        serializedName: "supportedTimeGrainTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const LogSpecification: msRest.CompositeMapper = {
  serializedName: "LogSpecification",
  type: {
    name: "Composite",
    className: "LogSpecification",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        readOnly: true,
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      blobDuration: {
        readOnly: true,
        serializedName: "blobDuration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceSpecification: msRest.CompositeMapper = {
  serializedName: "ServiceSpecification",
  type: {
    name: "Composite",
    className: "ServiceSpecification",
    modelProperties: {
      logSpecifications: {
        readOnly: true,
        serializedName: "logSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LogSpecification"
            }
          }
        }
      },
      metricSpecifications: {
        readOnly: true,
        serializedName: "metricSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricSpecification"
            }
          }
        }
      }
    }
  }
};

export const Properties: msRest.CompositeMapper = {
  serializedName: "Properties",
  type: {
    name: "Composite",
    className: "Properties",
    modelProperties: {
      serviceSpecification: {
        readOnly: true,
        serializedName: "serviceSpecification",
        type: {
          name: "Composite",
          className: "ServiceSpecification"
        }
      }
    }
  }
};

export const Operation: msRest.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "Properties"
        }
      },
      isDataAction: {
        nullable: true,
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      },
      actionType: {
        nullable: true,
        serializedName: "actionType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceIdentity: msRest.CompositeMapper = {
  serializedName: "ResourceIdentity",
  type: {
    name: "Composite",
    className: "ResourceIdentity",
    modelProperties: {
      userAssignedIdentity: {
        required: true,
        serializedName: "userAssignedIdentity",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccount: msRest.CompositeMapper = {
  serializedName: "StorageAccount",
  type: {
    name: "Composite",
    className: "StorageAccount",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ResourceIdentity"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Endpoint: msRest.CompositeMapper = {
  serializedName: "Endpoint",
  type: {
    name: "Composite",
    className: "Endpoint",
    modelProperties: {
      endpointUrl: {
        serializedName: "endpointUrl",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        isConstant: true,
        serializedName: "type",
        defaultValue: 'ClientApi',
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyVaultProperties: msRest.CompositeMapper = {
  serializedName: "KeyVaultProperties",
  type: {
    name: "Composite",
    className: "KeyVaultProperties",
    modelProperties: {
      keyIdentifier: {
        required: true,
        serializedName: "keyIdentifier",
        type: {
          name: "String"
        }
      },
      currentKeyIdentifier: {
        readOnly: true,
        serializedName: "currentKeyIdentifier",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccountEncryption: msRest.CompositeMapper = {
  serializedName: "AccountEncryption",
  type: {
    name: "Composite",
    className: "AccountEncryption",
    modelProperties: {
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      keyVaultProperties: {
        serializedName: "keyVaultProperties",
        type: {
          name: "Composite",
          className: "KeyVaultProperties"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ResourceIdentity"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IotHub: msRest.CompositeMapper = {
  serializedName: "IotHub",
  type: {
    name: "Composite",
    className: "IotHub",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      identity: {
        required: true,
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ResourceIdentity"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GroupLevelAccessControl: msRest.CompositeMapper = {
  serializedName: "GroupLevelAccessControl",
  type: {
    name: "Composite",
    className: "GroupLevelAccessControl",
    modelProperties: {
      publicNetworkAccess: {
        nullable: true,
        serializedName: "publicNetworkAccess",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkAccessControl: msRest.CompositeMapper = {
  serializedName: "NetworkAccessControl",
  type: {
    name: "Composite",
    className: "NetworkAccessControl",
    modelProperties: {
      integration: {
        nullable: true,
        serializedName: "integration",
        type: {
          name: "Composite",
          className: "GroupLevelAccessControl"
        }
      },
      ingestion: {
        nullable: true,
        serializedName: "ingestion",
        type: {
          name: "Composite",
          className: "GroupLevelAccessControl"
        }
      },
      consumption: {
        nullable: true,
        serializedName: "consumption",
        type: {
          name: "Composite",
          className: "GroupLevelAccessControl"
        }
      }
    }
  }
};

export const PrivateEndpoint: msRest.CompositeMapper = {
  serializedName: "PrivateEndpoint",
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionState: msRest.CompositeMapper = {
  serializedName: "PrivateLinkServiceConnectionState",
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnection: msRest.CompositeMapper = {
  serializedName: "PrivateEndpointConnection",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...Resource.type.modelProperties,
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        required: true,
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserAssignedManagedIdentity: msRest.CompositeMapper = {
  serializedName: "UserAssignedManagedIdentity",
  type: {
    name: "Composite",
    className: "UserAssignedManagedIdentity",
    modelProperties: {
      clientId: {
        nullable: true,
        readOnly: true,
        serializedName: "clientId",
        type: {
          name: "Uuid"
        }
      },
      principalId: {
        nullable: true,
        readOnly: true,
        serializedName: "principalId",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const VideoAnalyzerIdentity: msRest.CompositeMapper = {
  serializedName: "VideoAnalyzerIdentity",
  type: {
    name: "Composite",
    className: "VideoAnalyzerIdentity",
    modelProperties: {
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "UserAssignedManagedIdentity"
            }
          }
        }
      }
    }
  }
};

export const VideoAnalyzerModel: msRest.CompositeMapper = {
  serializedName: "VideoAnalyzer",
  type: {
    name: "Composite",
    className: "VideoAnalyzerModel",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      storageAccounts: {
        required: true,
        serializedName: "properties.storageAccounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageAccount"
            }
          }
        }
      },
      endpoints: {
        readOnly: true,
        serializedName: "properties.endpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Endpoint"
            }
          }
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "AccountEncryption"
        }
      },
      iotHubs: {
        serializedName: "properties.iotHubs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IotHub"
            }
          }
        }
      },
      publicNetworkAccess: {
        nullable: true,
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      networkAccessControl: {
        nullable: true,
        serializedName: "properties.networkAccessControl",
        type: {
          name: "Composite",
          className: "NetworkAccessControl"
        }
      },
      provisioningState: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      privateEndpointConnections: {
        readOnly: true,
        serializedName: "properties.privateEndpointConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "VideoAnalyzerIdentity"
        }
      }
    }
  }
};

export const VideoAnalyzerUpdate: msRest.CompositeMapper = {
  serializedName: "VideoAnalyzerUpdate",
  type: {
    name: "Composite",
    className: "VideoAnalyzerUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      storageAccounts: {
        serializedName: "properties.storageAccounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageAccount"
            }
          }
        }
      },
      endpoints: {
        readOnly: true,
        serializedName: "properties.endpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Endpoint"
            }
          }
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "AccountEncryption"
        }
      },
      iotHubs: {
        serializedName: "properties.iotHubs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IotHub"
            }
          }
        }
      },
      publicNetworkAccess: {
        nullable: true,
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      networkAccessControl: {
        nullable: true,
        serializedName: "properties.networkAccessControl",
        type: {
          name: "Composite",
          className: "NetworkAccessControl"
        }
      },
      provisioningState: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      privateEndpointConnections: {
        readOnly: true,
        serializedName: "properties.privateEndpointConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "VideoAnalyzerIdentity"
        }
      }
    }
  }
};

export const VideoAnalyzerPrivateEndpointConnectionOperationStatus: msRest.CompositeMapper = {
  serializedName: "VideoAnalyzerPrivateEndpointConnectionOperationStatus",
  type: {
    name: "Composite",
    className: "VideoAnalyzerPrivateEndpointConnectionOperationStatus",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "String"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      error: {
        nullable: true,
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const VideoAnalyzerOperationStatus: msRest.CompositeMapper = {
  serializedName: "VideoAnalyzerOperationStatus",
  type: {
    name: "Composite",
    className: "VideoAnalyzerOperationStatus",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "String"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      error: {
        nullable: true,
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const OperationCollection: msRest.CompositeMapper = {
  serializedName: "OperationCollection",
  type: {
    name: "Composite",
    className: "OperationCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      }
    }
  }
};

export const VideoAnalyzerCollection: msRest.CompositeMapper = {
  serializedName: "VideoAnalyzerCollection",
  type: {
    name: "Composite",
    className: "VideoAnalyzerCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VideoAnalyzerModel"
            }
          }
        }
      }
    }
  }
};

export const CheckNameAvailabilityRequest: msRest.CompositeMapper = {
  serializedName: "CheckNameAvailabilityRequest",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityResponse: msRest.CompositeMapper = {
  serializedName: "CheckNameAvailabilityResponse",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResponse",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionListResult: msRest.CompositeMapper = {
  serializedName: "PrivateEndpointConnectionListResult",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      }
    }
  }
};

export const PrivateLinkResource: msRest.CompositeMapper = {
  serializedName: "PrivateLinkResource",
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      groupId: {
        readOnly: true,
        serializedName: "properties.groupId",
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        readOnly: true,
        serializedName: "properties.requiredMembers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      requiredZoneNames: {
        serializedName: "properties.requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const PrivateLinkResourceListResult: msRest.CompositeMapper = {
  serializedName: "PrivateLinkResourceListResult",
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      }
    }
  }
};

export const VideoPreviewImageUrls: msRest.CompositeMapper = {
  serializedName: "VideoPreviewImageUrls",
  type: {
    name: "Composite",
    className: "VideoPreviewImageUrls",
    modelProperties: {
      small: {
        serializedName: "small",
        type: {
          name: "String"
        }
      },
      medium: {
        serializedName: "medium",
        type: {
          name: "String"
        }
      },
      large: {
        serializedName: "large",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VideoContentUrls: msRest.CompositeMapper = {
  serializedName: "VideoContentUrls",
  type: {
    name: "Composite",
    className: "VideoContentUrls",
    modelProperties: {
      downloadUrl: {
        serializedName: "downloadUrl",
        type: {
          name: "String"
        }
      },
      archiveBaseUrl: {
        serializedName: "archiveBaseUrl",
        type: {
          name: "String"
        }
      },
      rtspTunnelUrl: {
        serializedName: "rtspTunnelUrl",
        type: {
          name: "String"
        }
      },
      previewImageUrls: {
        serializedName: "previewImageUrls",
        type: {
          name: "Composite",
          className: "VideoPreviewImageUrls"
        }
      }
    }
  }
};

export const VideoFlags: msRest.CompositeMapper = {
  serializedName: "VideoFlags",
  type: {
    name: "Composite",
    className: "VideoFlags",
    modelProperties: {
      canStream: {
        required: true,
        serializedName: "canStream",
        type: {
          name: "Boolean"
        }
      },
      hasData: {
        required: true,
        serializedName: "hasData",
        type: {
          name: "Boolean"
        }
      },
      isInUse: {
        required: true,
        serializedName: "isInUse",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const VideoMediaInfo: msRest.CompositeMapper = {
  serializedName: "VideoMediaInfo",
  type: {
    name: "Composite",
    className: "VideoMediaInfo",
    modelProperties: {
      segmentLength: {
        readOnly: true,
        serializedName: "segmentLength",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VideoContentToken: msRest.CompositeMapper = {
  serializedName: "VideoContentToken",
  type: {
    name: "Composite",
    className: "VideoContentToken",
    modelProperties: {
      expirationDate: {
        nullable: false,
        readOnly: true,
        serializedName: "expirationDate",
        type: {
          name: "DateTime"
        }
      },
      token: {
        readOnly: true,
        serializedName: "token",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VideoArchival: msRest.CompositeMapper = {
  serializedName: "VideoArchival",
  type: {
    name: "Composite",
    className: "VideoArchival",
    modelProperties: {
      retentionPeriod: {
        serializedName: "retentionPeriod",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AuthenticationBase: msRest.CompositeMapper = {
  serializedName: "AuthenticationBase",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "type"
    },
    uberParent: "AuthenticationBase",
    className: "AuthenticationBase",
    modelProperties: {
      type: {
        required: true,
        serializedName: "@type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TokenClaim: msRest.CompositeMapper = {
  serializedName: "TokenClaim",
  type: {
    name: "Composite",
    className: "TokenClaim",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TokenKey: msRest.CompositeMapper = {
  serializedName: "TokenKey",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "@type",
      clientName: "type"
    },
    uberParent: "TokenKey",
    className: "TokenKey",
    modelProperties: {
      kid: {
        required: true,
        serializedName: "kid",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        serializedName: "@type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JwtAuthentication: msRest.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.JwtAuthentication",
  type: {
    name: "Composite",
    polymorphicDiscriminator: AuthenticationBase.type.polymorphicDiscriminator,
    uberParent: "AuthenticationBase",
    className: "JwtAuthentication",
    modelProperties: {
      ...AuthenticationBase.type.modelProperties,
      issuers: {
        serializedName: "issuers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      audiences: {
        serializedName: "audiences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      claims: {
        serializedName: "claims",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TokenClaim"
            }
          }
        }
      },
      keys: {
        serializedName: "keys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TokenKey"
            }
          }
        }
      }
    }
  }
};

export const RsaTokenKey: msRest.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.RsaTokenKey",
  type: {
    name: "Composite",
    polymorphicDiscriminator: TokenKey.type.polymorphicDiscriminator,
    uberParent: "TokenKey",
    className: "RsaTokenKey",
    modelProperties: {
      ...TokenKey.type.modelProperties,
      alg: {
        required: true,
        serializedName: "alg",
        type: {
          name: "String"
        }
      },
      n: {
        required: true,
        serializedName: "n",
        type: {
          name: "String"
        }
      },
      e: {
        required: true,
        serializedName: "e",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EccTokenKey: msRest.CompositeMapper = {
  serializedName: "#Microsoft.VideoAnalyzer.EccTokenKey",
  type: {
    name: "Composite",
    polymorphicDiscriminator: TokenKey.type.polymorphicDiscriminator,
    uberParent: "TokenKey",
    className: "EccTokenKey",
    modelProperties: {
      ...TokenKey.type.modelProperties,
      alg: {
        required: true,
        serializedName: "alg",
        type: {
          name: "String"
        }
      },
      x: {
        required: true,
        serializedName: "x",
        type: {
          name: "String"
        }
      },
      y: {
        required: true,
        serializedName: "y",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VideoEntity: msRest.CompositeMapper = {
  serializedName: "VideoEntity",
  type: {
    name: "Composite",
    className: "VideoEntity",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      title: {
        serializedName: "properties.title",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      videoEntityType: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.type",
        type: {
          name: "String"
        }
      },
      flags: {
        readOnly: true,
        serializedName: "properties.flags",
        type: {
          name: "Composite",
          className: "VideoFlags"
        }
      },
      contentUrls: {
        readOnly: true,
        serializedName: "properties.contentUrls",
        type: {
          name: "Composite",
          className: "VideoContentUrls"
        }
      },
      mediaInfo: {
        readOnly: true,
        serializedName: "properties.mediaInfo",
        type: {
          name: "Composite",
          className: "VideoMediaInfo"
        }
      },
      archival: {
        serializedName: "properties.archival",
        type: {
          name: "Composite",
          className: "VideoArchival"
        }
      }
    }
  }
};

export const AccessPolicyEntity: msRest.CompositeMapper = {
  serializedName: "AccessPolicyEntity",
  type: {
    name: "Composite",
    className: "AccessPolicyEntity",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      role: {
        nullable: true,
        serializedName: "properties.role",
        type: {
          name: "String"
        }
      },
      authentication: {
        serializedName: "properties.authentication",
        type: {
          name: "Composite",
          className: "AuthenticationBase"
        }
      }
    }
  }
};

export const VideoAnalyzersCreateOrUpdateHeaders: msRest.CompositeMapper = {
  serializedName: "videoanalyzers-createorupdate-headers",
  type: {
    name: "Composite",
    className: "VideoAnalyzersCreateOrUpdateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      locationHeader: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VideoAnalyzersUpdateHeaders: msRest.CompositeMapper = {
  serializedName: "videoanalyzers-update-headers",
  type: {
    name: "Composite",
    className: "VideoAnalyzersUpdateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      locationHeader: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionsCreateOrUpdateHeaders: msRest.CompositeMapper = {
  serializedName: "privateendpointconnections-createorupdate-headers",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionsCreateOrUpdateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EdgeModuleEntityCollection: msRest.CompositeMapper = {
  serializedName: "EdgeModuleEntityCollection",
  type: {
    name: "Composite",
    className: "EdgeModuleEntityCollection",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EdgeModuleEntity"
            }
          }
        }
      },
      nextLink: {
        serializedName: "@nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PipelineTopologyCollection: msRest.CompositeMapper = {
  serializedName: "PipelineTopologyCollection",
  type: {
    name: "Composite",
    className: "PipelineTopologyCollection",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PipelineTopology"
            }
          }
        }
      },
      nextLink: {
        serializedName: "@nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LivePipelineCollection: msRest.CompositeMapper = {
  serializedName: "LivePipelineCollection",
  type: {
    name: "Composite",
    className: "LivePipelineCollection",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LivePipeline"
            }
          }
        }
      },
      nextLink: {
        serializedName: "@nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PipelineJobCollection: msRest.CompositeMapper = {
  serializedName: "PipelineJobCollection",
  type: {
    name: "Composite",
    className: "PipelineJobCollection",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PipelineJob"
            }
          }
        }
      },
      nextLink: {
        serializedName: "@nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VideoEntityCollection: msRest.CompositeMapper = {
  serializedName: "VideoEntityCollection",
  type: {
    name: "Composite",
    className: "VideoEntityCollection",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VideoEntity"
            }
          }
        }
      },
      nextLink: {
        serializedName: "@nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccessPolicyEntityCollection: msRest.CompositeMapper = {
  serializedName: "AccessPolicyEntityCollection",
  type: {
    name: "Composite",
    className: "AccessPolicyEntityCollection",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccessPolicyEntity"
            }
          }
        }
      },
      nextLink: {
        serializedName: "@nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const discriminators = {
  'NodeBase.#Microsoft.VideoAnalyzer.SourceNodeBase' : SourceNodeBase,
  'NodeBase.#Microsoft.VideoAnalyzer.ProcessorNodeBase' : ProcessorNodeBase,
  'NodeBase.#Microsoft.VideoAnalyzer.SinkNodeBase' : SinkNodeBase,
  'NodeBase' : NodeBase,
  'CredentialsBase' : CredentialsBase,
  'TunnelBase' : TunnelBase,
  'EndpointBase' : EndpointBase,
  'NodeBase.#Microsoft.VideoAnalyzer.RtspSource' : RtspSource,
  'CredentialsBase.#Microsoft.VideoAnalyzer.UsernamePasswordCredentials' : UsernamePasswordCredentials,
  'TunnelBase.#Microsoft.VideoAnalyzer.SecureIotDeviceRemoteTunnel' : SecureIotDeviceRemoteTunnel,
  'EndpointBase.#Microsoft.VideoAnalyzer.UnsecuredEndpoint' : UnsecuredEndpoint,
  'CertificateSource' : CertificateSource,
  'EndpointBase.#Microsoft.VideoAnalyzer.TlsEndpoint' : TlsEndpoint,
  'CertificateSource.#Microsoft.VideoAnalyzer.PemCertificateList' : PemCertificateList,
  'TimeSequenceBase' : TimeSequenceBase,
  'NodeBase.#Microsoft.VideoAnalyzer.VideoSource' : VideoSource,
  'TimeSequenceBase.#Microsoft.VideoAnalyzer.VideoSequenceAbsoluteTimeMarkers' : VideoSequenceAbsoluteTimeMarkers,
  'EncoderPresetBase' : EncoderPresetBase,
  'NodeBase.#Microsoft.VideoAnalyzer.EncoderProcessor' : EncoderProcessor,
  'EncoderPresetBase.#Microsoft.VideoAnalyzer.EncoderSystemPreset' : EncoderSystemPreset,
  'AudioEncoderBase' : AudioEncoderBase,
  'VideoEncoderBase' : VideoEncoderBase,
  'EncoderPresetBase.#Microsoft.VideoAnalyzer.EncoderCustomPreset' : EncoderCustomPreset,
  'AudioEncoderBase.#Microsoft.VideoAnalyzer.AudioEncoderAac' : AudioEncoderAac,
  'VideoEncoderBase.#Microsoft.VideoAnalyzer.VideoEncoderH264' : VideoEncoderH264,
  'NodeBase.#Microsoft.VideoAnalyzer.VideoSink' : VideoSink,
  'AuthenticationBase' : AuthenticationBase,
  'TokenKey' : TokenKey,
  'AuthenticationBase.#Microsoft.VideoAnalyzer.JwtAuthentication' : JwtAuthentication,
  'TokenKey.#Microsoft.VideoAnalyzer.RsaTokenKey' : RsaTokenKey,
  'TokenKey.#Microsoft.VideoAnalyzer.EccTokenKey' : EccTokenKey

};
