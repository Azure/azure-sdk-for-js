/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const ServiceConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceConfiguration",
    modelProperties: {
      rewardWaitTime: {
        serializedName: "rewardWaitTime",
        required: true,
        type: {
          name: "TimeSpan"
        }
      },
      defaultReward: {
        constraints: {
          InclusiveMaximum: 1,
          InclusiveMinimum: -1
        },
        serializedName: "defaultReward",
        required: true,
        type: {
          name: "Number"
        }
      },
      rewardAggregation: {
        constraints: {
          MaxLength: 256
        },
        serializedName: "rewardAggregation",
        required: true,
        type: {
          name: "String"
        }
      },
      explorationPercentage: {
        constraints: {
          InclusiveMaximum: 1,
          InclusiveMinimum: 0
        },
        serializedName: "explorationPercentage",
        required: true,
        type: {
          name: "Number"
        }
      },
      modelExportFrequency: {
        serializedName: "modelExportFrequency",
        required: true,
        type: {
          name: "TimeSpan"
        }
      },
      logMirrorEnabled: {
        serializedName: "logMirrorEnabled",
        type: {
          name: "Boolean"
        }
      },
      logMirrorSasUri: {
        serializedName: "logMirrorSasUri",
        type: {
          name: "String"
        }
      },
      logRetentionDays: {
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: -1
        },
        serializedName: "logRetentionDays",
        required: true,
        type: {
          name: "Number"
        }
      },
      lastConfigurationEditDate: {
        serializedName: "lastConfigurationEditDate",
        type: {
          name: "DateTime"
        }
      },
      learningMode: {
        serializedName: "learningMode",
        type: {
          name: "String"
        }
      },
      isAutoOptimizationEnabled: {
        serializedName: "isAutoOptimizationEnabled",
        type: {
          name: "Boolean"
        }
      },
      autoOptimizationFrequency: {
        serializedName: "autoOptimizationFrequency",
        type: {
          name: "TimeSpan"
        }
      },
      autoOptimizationStartDate: {
        serializedName: "autoOptimizationStartDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "PersonalizerError"
        }
      }
    }
  }
};

export const PersonalizerError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PersonalizerError",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PersonalizerError"
            }
          }
        }
      },
      innerError: {
        serializedName: "innerError",
        type: {
          name: "Composite",
          className: "InternalError"
        }
      }
    }
  }
};

export const InternalError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternalError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      innererror: {
        serializedName: "innererror",
        type: {
          name: "Composite",
          className: "InternalError"
        }
      }
    }
  }
};

export const PolicyContract: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyContract",
    modelProperties: {
      name: {
        constraints: {
          MaxLength: 256
        },
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      arguments: {
        constraints: {
          MaxLength: 1024
        },
        serializedName: "arguments",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Evaluation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Evaluation",
    modelProperties: {
      id: {
        constraints: {
          MaxLength: 256
        },
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        constraints: {
          MaxLength: 256
        },
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      jobId: {
        serializedName: "jobId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      policyResults: {
        serializedName: "policyResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PolicyResult"
            }
          }
        }
      },
      featureImportance: {
        serializedName: "featureImportance",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      },
      evaluationType: {
        serializedName: "evaluationType",
        type: {
          name: "String"
        }
      },
      optimalPolicy: {
        serializedName: "optimalPolicy",
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "creationTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const PolicyResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyResult",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      arguments: {
        serializedName: "arguments",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      policySource: {
        serializedName: "policySource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      summary: {
        serializedName: "summary",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PolicyResultSummary"
            }
          }
        }
      },
      totalSummary: {
        serializedName: "totalSummary",
        type: {
          name: "Composite",
          className: "PolicyResultTotalSummary"
        }
      }
    }
  }
};

export const PolicyResultSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyResultSummary",
    modelProperties: {
      timeStamp: {
        serializedName: "timeStamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      ipsEstimatorNumerator: {
        serializedName: "ipsEstimatorNumerator",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      ipsEstimatorDenominator: {
        serializedName: "ipsEstimatorDenominator",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      snipsEstimatorDenominator: {
        serializedName: "snipsEstimatorDenominator",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      aggregateTimeWindow: {
        serializedName: "aggregateTimeWindow",
        readOnly: true,
        type: {
          name: "TimeSpan"
        }
      },
      nonZeroProbability: {
        serializedName: "nonZeroProbability",
        type: {
          name: "Number"
        }
      },
      sumOfSquares: {
        serializedName: "sumOfSquares",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      confidenceInterval: {
        serializedName: "confidenceInterval",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      averageReward: {
        serializedName: "averageReward",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EvaluationContract: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EvaluationContract",
    modelProperties: {
      enableOfflineExperimentation: {
        serializedName: "enableOfflineExperimentation",
        type: {
          name: "Boolean"
        }
      },
      name: {
        constraints: {
          MaxLength: 256
        },
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      policies: {
        serializedName: "policies",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PolicyContract"
            }
          }
        }
      }
    }
  }
};

export const RewardRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RewardRequest",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PolicyReferenceContract: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyReferenceContract",
    modelProperties: {
      evaluationId: {
        constraints: {
          MaxLength: 256
        },
        serializedName: "evaluationId",
        required: true,
        type: {
          name: "String"
        }
      },
      policyName: {
        constraints: {
          MaxLength: 256
        },
        serializedName: "policyName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LogsProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogsProperties",
    modelProperties: {
      dateRange: {
        serializedName: "dateRange",
        type: {
          name: "Composite",
          className: "LogsPropertiesDateRange"
        }
      }
    }
  }
};

export const DateRange: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DateRange",
    modelProperties: {
      from: {
        serializedName: "from",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      to: {
        serializedName: "to",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ModelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ModelProperties",
    modelProperties: {
      creationTime: {
        serializedName: "creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastModifiedTime: {
        serializedName: "lastModifiedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const MultiSlotRewardRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MultiSlotRewardRequest",
    modelProperties: {
      reward: {
        serializedName: "reward",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SlotReward"
            }
          }
        }
      }
    }
  }
};

export const SlotReward: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SlotReward",
    modelProperties: {
      slotId: {
        constraints: {
          MaxLength: 256,
          MinLength: 1
        },
        serializedName: "slotId",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MultiSlotRankRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MultiSlotRankRequest",
    modelProperties: {
      contextFeatures: {
        serializedName: "contextFeatures",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Dictionary",
              value: { type: { name: "any" } }
            }
          }
        }
      },
      actions: {
        serializedName: "actions",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RankableAction"
            }
          }
        }
      },
      slots: {
        serializedName: "slots",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SlotRequest"
            }
          }
        }
      },
      eventId: {
        constraints: {
          MaxLength: 256
        },
        serializedName: "eventId",
        type: {
          name: "String"
        }
      },
      deferActivation: {
        defaultValue: false,
        serializedName: "deferActivation",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const RankableAction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RankableAction",
    modelProperties: {
      id: {
        constraints: {
          MaxLength: 256
        },
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      features: {
        serializedName: "features",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Dictionary",
              value: { type: { name: "any" } }
            }
          }
        }
      }
    }
  }
};

export const SlotRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SlotRequest",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      features: {
        serializedName: "features",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Dictionary",
              value: { type: { name: "any" } }
            }
          }
        }
      },
      excludedActions: {
        serializedName: "excludedActions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      baselineAction: {
        serializedName: "baselineAction",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MultiSlotRankResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MultiSlotRankResponse",
    modelProperties: {
      slots: {
        serializedName: "slots",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SlotResponse"
            }
          }
        }
      },
      eventId: {
        constraints: {
          MaxLength: 256
        },
        serializedName: "eventId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SlotResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SlotResponse",
    modelProperties: {
      id: {
        constraints: {
          MaxLength: 256
        },
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      rewardActionId: {
        constraints: {
          MaxLength: 256
        },
        serializedName: "rewardActionId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RankRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RankRequest",
    modelProperties: {
      contextFeatures: {
        serializedName: "contextFeatures",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Dictionary",
              value: { type: { name: "any" } }
            }
          }
        }
      },
      actions: {
        serializedName: "actions",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RankableAction"
            }
          }
        }
      },
      excludedActions: {
        serializedName: "excludedActions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      eventId: {
        constraints: {
          MaxLength: 256
        },
        serializedName: "eventId",
        type: {
          name: "String"
        }
      },
      deferActivation: {
        defaultValue: false,
        serializedName: "deferActivation",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const RankResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RankResponse",
    modelProperties: {
      ranking: {
        serializedName: "ranking",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RankedAction"
            }
          }
        }
      },
      eventId: {
        constraints: {
          MaxLength: 256
        },
        serializedName: "eventId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      rewardActionId: {
        constraints: {
          MaxLength: 256
        },
        serializedName: "rewardActionId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RankedAction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RankedAction",
    modelProperties: {
      id: {
        constraints: {
          MaxLength: 256
        },
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      probability: {
        constraints: {
          InclusiveMaximum: 1,
          InclusiveMinimum: 0
        },
        serializedName: "probability",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ServiceStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceStatus",
    modelProperties: {
      service: {
        serializedName: "service",
        type: {
          name: "String"
        }
      },
      apiStatus: {
        serializedName: "apiStatus",
        type: {
          name: "String"
        }
      },
      apiStatusMessage: {
        serializedName: "apiStatusMessage",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PolicyResultTotalSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyResultTotalSummary",
    modelProperties: {
      ...PolicyResultSummary.type.modelProperties
    }
  }
};

export const LogsPropertiesDateRange: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogsPropertiesDateRange",
    modelProperties: {
      ...DateRange.type.modelProperties
    }
  }
};

export const EvaluationsCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EvaluationsCreateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};
