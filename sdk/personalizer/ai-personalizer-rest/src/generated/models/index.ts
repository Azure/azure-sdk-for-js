/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** The configuration of the service. */
export interface ServiceConfiguration {
  /**
   * The time span waited until a request is marked with the default reward
   * and should be between 5 seconds and 2 days.
   * For example, PT5M (5 mins). For information about the time format,
   * see http://en.wikipedia.org/wiki/ISO_8601#Durations
   */
  rewardWaitTime: string;
  /** The reward given if a reward is not received within the specified wait time. */
  defaultReward: number;
  /** The function used to process rewards, if multiple reward scores are received before rewardWaitTime is over. */
  rewardAggregation: string;
  /** The percentage of rank responses that will use exploration. */
  explorationPercentage: number;
  /**
   * Personalizer will start using the most updated trained model for online ranks automatically every specified time period.
   * For example, PT5M (5 mins). For information about the time format,
   * see http://en.wikipedia.org/wiki/ISO_8601#Durations
   */
  modelExportFrequency: string;
  /** Flag indicates whether log mirroring is enabled. */
  logMirrorEnabled?: boolean;
  /** Azure storage account container SAS URI for log mirroring. */
  logMirrorSasUri?: string;
  /** Number of days historical logs are to be maintained. -1 implies the logs will never be deleted. */
  logRetentionDays: number;
  /** Last time model training configuration was updated */
  lastConfigurationEditDate?: Date;
  /** Learning Modes for Personalizer */
  learningMode?: LearningMode;
  /** Flag indicating whether Personalizer will automatically optimize Learning Settings by running Offline Evaluations periodically. */
  isAutoOptimizationEnabled?: boolean;
  /**
   * Frequency of automatic optimization. Only relevant if IsAutoOptimizationEnabled is true.
   * For example, PT5M (5 mins). For information about the time format,
   * \r\nsee http://en.wikipedia.org/wiki/ISO_8601#Durations
   */
  autoOptimizationFrequency?: string;
  /** Date when the first automatic optimization evaluation must be performed. Only relevant if IsAutoOptimizationEnabled is true. */
  autoOptimizationStartDate?: Date;
}

/** Used to return an error to the client */
export interface ErrorResponse {
  /** The error object. */
  error: PersonalizerError;
}

/** The error object. */
export interface PersonalizerError {
  /**
   * Error Codes returned by Personalizer
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: PersonalizerErrorCode;
  /**
   * A message explaining the error reported by the service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * Error source element.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * An array of details about specific errors that led to this reported error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: PersonalizerError[];
  /** An object containing more specific information than the parent object about the error. */
  innerError?: InternalError;
}

/** An object containing more specific information than the parent object about the error. */
export interface InternalError {
  /** Detailed error code. */
  code?: string;
  /** An object containing more specific information than the parent object about the error. */
  innererror?: InternalError;
}

/** Learning settings specifying how to train the model. */
export interface PolicyContract {
  /** Name of the learning settings. */
  name: string;
  /** Arguments of the learning settings. */
  arguments: string;
}

/** A counterfactual evaluation. */
export interface Evaluation {
  /**
   * The ID of the evaluation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the evaluation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The start time of the evaluation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startTime?: Date;
  /**
   * The end time of the evaluation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endTime?: Date;
  /**
   * The ID of the job processing the evaluation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly jobId?: string;
  /**
   * The status of the job processing the evaluation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: EvaluationJobStatus;
  /** The results of the evaluation. */
  policyResults?: PolicyResult[];
  /** Feature Importance. */
  featureImportance?: string[][];
  /** Evaluation type (manual or through Automatic Optimization). */
  evaluationType?: EvaluationType;
  /** Thr optimal policy. */
  optimalPolicy?: string;
  /** Creation time. */
  creationTime?: Date;
}

/** This class contains the Learning Settings information and the results of the Offline Evaluation using that policy. */
export interface PolicyResult {
  /**
   * The name of the Learning Settings.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The arguments of the Learning Settings.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly arguments?: string;
  /**
   * The source of the Learning Settings.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly policySource?: PolicySource;
  /**
   * The aggregate results of the Offline Evaluation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly summary?: PolicyResultSummary[];
  /**
   * The aggregate total of the Offline Evaluation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalSummary?: PolicyResultTotalSummary;
}

/** This class contains the summary of evaluating a policy on a counterfactual evaluation. */
export interface PolicyResultSummary {
  /**
   * Timestamp of the aggregation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timeStamp?: Date;
  /**
   * Numerator for IPS estimator.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipsEstimatorNumerator?: number;
  /**
   * Denominator for IPS estimator.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipsEstimatorDenominator?: number;
  /**
   * Denominator for SNIPS estimator.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly snipsEstimatorDenominator?: number;
  /**
   * Time window for aggregation.
   * For example, PT5M (5 mins). For information about the time format,
   * see http://en.wikipedia.org/wiki/ISO_8601#Durations
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly aggregateTimeWindow?: string;
  /** Probability of non-zero values for the Policy evaluation. */
  nonZeroProbability?: number;
  /**
   * Sum of Squares for the Policy evaluation results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sumOfSquares?: number;
  /**
   * Gaussian confidence interval for the Policy evaluation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly confidenceInterval?: number;
  /**
   * Average reward.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly averageReward?: number;
}

/** A counterfactual evaluation. */
export interface EvaluationContract {
  /** True if the evaluation should explore for a more optimal learning settings. */
  enableOfflineExperimentation?: boolean;
  /** The name of the evaluation. */
  name: string;
  /** The start time of the evaluation. */
  startTime: Date;
  /** The end time of the evaluation. */
  endTime: Date;
  /** Additional learning settings to evaluate. */
  policies: PolicyContract[];
}

/** Reward given to a rank response. */
export interface RewardRequest {
  /** Reward to be assigned to an action. Value is a float calculated by your application, typically between 0 and 1, and must be between -1 and 1. */
  value: number;
}

/** Reference to the policy within the evaluation. */
export interface PolicyReferenceContract {
  /** Evaluation Id of the evaluation. */
  evaluationId: string;
  /** Name of the learning settings. */
  policyName: string;
}

/** Properties related to data used to train the model. */
export interface LogsProperties {
  /**
   * Date range.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dateRange?: LogsPropertiesDateRange;
}

/** A date range starting at From and ending at To. */
export interface DateRange {
  /**
   * Start date for the range.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly from?: Date;
  /**
   * End date for the range.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly to?: Date;
}

/** Properties related to the trained model. */
export interface ModelProperties {
  /**
   * Creation time of the model.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly creationTime?: Date;
  /**
   * Last time the model was modified.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedTime?: Date;
}

/** Reward given to a list of slots. */
export interface MultiSlotRewardRequest {
  /** List of SlotRewards */
  reward: SlotReward[];
}

export interface SlotReward {
  /** Slot id for which we are sending the reward. */
  slotId: string;
  /** Reward to be assigned to slotId. Value should be between -1 and 1 inclusive. */
  value: number;
}

export interface MultiSlotRankRequest {
  /**
   * Features of the context used for Personalizer as a
   * dictionary of dictionaries. This is determined by your application, and
   * typically includes features about the current user, their
   * device, profile information, aggregated data about time and date, etc.
   * Features should not include personally identifiable information (PII),
   * unique UserIDs, or precise timestamps.
   */
  contextFeatures?: Record<string, unknown>[];
  /**
   * The set of actions the Personalizer service can pick from.
   * The set should not contain more than 50 actions.
   * The order of the actions does not affect the rank result but the order
   * should match the sequence your application would have used to display them.
   * The first item in the array will be used as Baseline item in Offline Evaluations.
   */
  actions: RankableAction[];
  /**
   * The set of slots the Personalizer service should select actions for.
   * The set should not contain more than 50 slots.
   */
  slots: SlotRequest[];
  /**
   * Optionally pass an eventId that uniquely identifies this Rank event.
   * If null, the service generates a unique eventId. The eventId will be used for
   * associating this request with its reward, as well as seeding the pseudo-random
   * generator when making a Personalizer call.
   */
  eventId?: string;
  /**
   * Send false if it is certain the rewardActionId in rank results will be shown to the user, therefore
   * Personalizer will expect a Reward call, otherwise it will assign the default
   * Reward to the event. Send true if it is possible the user will not see the action specified in the rank results,
   * (e.g. because the page is rendering later, or the Rank results may be overridden by code further downstream).
   * You must call the Activate Event API if the event output is shown to users, otherwise Rewards will be ignored.
   */
  deferActivation?: boolean;
}

/** An action with its associated features used for ranking. */
export interface RankableAction {
  /** Id of the action. */
  id: string;
  /** List of dictionaries containing features. */
  features: Record<string, unknown>[];
}

/** A slot with it's associated features and list of excluded actions */
export interface SlotRequest {
  /** Slot ID */
  id: string;
  /** List of dictionaries containing slot features. */
  features?: Record<string, unknown>[];
  /** List of excluded action Ids. */
  excludedActions?: string[];
  /**
   * The 'baseline action' ID for the slot.
   * The BaselineAction is the Id of the Action your application would use in that slot if Personalizer didn't exist.
   * BaselineAction must be defined for every slot.
   * BaselineAction should never be part of ExcludedActions.
   * Each slot must have a unique BaselineAction which corresponds to an an action from the event's Actions list.
   */
  baselineAction: string;
}

export interface MultiSlotRankResponse {
  /**
   * Each slot has a corresponding rewardActionID which is the action ID recommended by Personalizer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly slots?: SlotResponse[];
  /**
   * The eventId for the round trip from request to response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly eventId?: string;
}

export interface SlotResponse {
  /** Id is the slot ID. */
  id: string;
  /**
   * RewardActionID is the action ID recommended by Personalizer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly rewardActionId?: string;
}

/** Request a set of actions to be ranked by the Personalizer service. */
export interface RankRequest {
  /**
   * Features of the context used for Personalizer as a
   * dictionary of dictionaries. This is determined by your application, and
   * typically includes features about the current user, their
   * device, profile information, aggregated data about time and date, etc.
   * Features should not include personally identifiable information (PII),
   * unique UserIDs, or precise timestamps.
   */
  contextFeatures?: Record<string, unknown>[];
  /**
   * The set of actions the Personalizer service can pick from.
   * The set should not contain more than 50 actions.
   * The order of the actions does not affect the rank result but the order
   * should match the sequence your application would have used to display them.
   * The first item in the array will be used as Baseline item in Offline Evaluations.
   */
  actions: RankableAction[];
  /**
   * The set of action ids to exclude from ranking.
   * Personalizer will consider the first non-excluded item in the array as the Baseline action when performing Offline Evaluations.
   */
  excludedActions?: string[];
  /**
   * Optionally pass an eventId that uniquely identifies this Rank event.
   * If null, the service generates a unique eventId. The eventId will be used for
   * associating this request with its reward, as well as seeding the pseudo-random
   * generator when making a Personalizer call.
   */
  eventId?: string;
  /**
   * Send false if it is certain the rewardActionId in rank results will be shown to the user, therefore
   * Personalizer will expect a Reward call, otherwise it will assign the default
   * Reward to the event. Send true if it is possible the user will not see the action specified in the rank results,
   * (e.g. because the page is rendering later, or the Rank results may be overridden by code further downstream).
   * You must call the Activate Event API if the event output is shown to users, otherwise Rewards will be ignored.
   */
  deferActivation?: boolean;
}

/** Returns which action to use as rewardActionId, and additional information about each action as a result of a Rank request. */
export interface RankResponse {
  /**
   * The calculated ranking for the current request.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ranking?: RankedAction[];
  /**
   * The eventId for the round trip from request to response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly eventId?: string;
  /**
   * The action chosen by the Personalizer service.
   * This is the action your application should display, and for which to report the reward.
   * This might not be the first found in 'ranking'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly rewardActionId?: string;
}

/** A ranked action with its resulting probability. */
export interface RankedAction {
  /**
   * Id of the action
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Probability of the action
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly probability?: number;
}

export interface ServiceStatus {
  service?: string;
  apiStatus?: string;
  apiStatusMessage?: string;
}

/** The aggregate total of the Offline Evaluation. */
export interface PolicyResultTotalSummary extends PolicyResultSummary {}

/** Date range. */
export interface LogsPropertiesDateRange extends DateRange {}

/** Defines headers for Evaluations_create operation. */
export interface EvaluationsCreateHeaders {
  /** Location of the Offline Evaluation status and data. */
  location?: string;
}

/** Known values of {@link LearningMode} that the service accepts. */
export enum KnownLearningMode {
  /** Online */
  Online = "Online",
  /** Apprentice */
  Apprentice = "Apprentice",
  /** LoggingOnly */
  LoggingOnly = "LoggingOnly"
}

/**
 * Defines values for LearningMode. \
 * {@link KnownLearningMode} can be used interchangeably with LearningMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Online** \
 * **Apprentice** \
 * **LoggingOnly**
 */
export type LearningMode = string;

/** Known values of {@link PersonalizerErrorCode} that the service accepts. */
export enum KnownPersonalizerErrorCode {
  /** Request could not be understood by the server. */
  BadRequest = "BadRequest",
  /** Invalid service configuration. */
  InvalidServiceConfiguration = "InvalidServiceConfiguration",
  /** Updating defaultReward, rewardWaitTime and rewardAggregation when changing learning mode from Online to Apprentice mode and vice versa is not allowed. Make the mode change and then change the additional settings with an additional API call. */
  InvalidLearningModeServiceConfiguration = "InvalidLearningModeServiceConfiguration",
  /** Invalid policy configuration. */
  InvalidPolicyConfiguration = "InvalidPolicyConfiguration",
  /** Invalid policy contract. */
  InvalidPolicyContract = "InvalidPolicyContract",
  /** Invalid evaluation contract. */
  InvalidEvaluationContract = "InvalidEvaluationContract",
  /** Custom policy names should be unique. */
  DuplicateCustomPolicyNames = "DuplicateCustomPolicyNames",
  /** No logs exist in date range. */
  NoLogsExistInDateRange = "NoLogsExistInDateRange",
  /** Total size of logs exceed allowed limit. */
  LogsSizeExceedAllowedLimit = "LogsSizeExceedAllowedLimit",
  /** Invalid reward request. */
  InvalidRewardRequest = "InvalidRewardRequest",
  /** Invalid activate event request. */
  InvalidEventIdToActivate = "InvalidEventIdToActivate",
  /** Invalid request. */
  InvalidRankRequest = "InvalidRankRequest",
  /** Invalid request. */
  InvalidExportLogsRequest = "InvalidExportLogsRequest",
  /** Invalid request. */
  InvalidRequest = "InvalidRequest",
  /** SAS Uri must be the Uri to a container that has write permissions. */
  InvalidContainer = "InvalidContainer",
  /** Invalid model metadata. */
  InvalidModelMetadata = "InvalidModelMetadata",
  /** Apprentice mode never turned on. */
  ApprenticeModeNeverTurnedOn = "ApprenticeModeNeverTurnedOn",
  /** AppId is missing in the header. */
  MissingAppId = "MissingAppId",
  /** Reward wait time should be either 10 minutes or 4 hours or 12 hours or 24 hours */
  InvalidRewardWaitTime = "InvalidRewardWaitTime",
  /** Log Retention Days must be -1 to store indefinitely or must be at least reward wait time plus 1 day (rounded up) */
  InvalidLogRetentionDays = "InvalidLogRetentionDays",
  /** Multi-slot feature is currently disabled. Please follow multi-slot Personalizer documentation to update your loop settings to enable multi-slot functionality. */
  InvalidMultiSlotApiAccess = "InvalidMultiSlotApiAccess",
  /** Exceeds maximum allowed payload size. */
  PayloadSizeExceeded = "PayloadSizeExceeded",
  /** Given model file is not signed or does not have a valid signature. */
  InvalidModelImportSignature = "InvalidModelImportSignature",
  /** Given model file format is invalid. */
  InvalidModelImportFormat = "InvalidModelImportFormat",
  /** Api is currently disabled for the instance. */
  InvalidApiAccess = "InvalidApiAccess",
  /** Key vault Key used for customer managed key cannot be accessed. */
  ModelFileAccessDenied = "ModelFileAccessDenied",
  /** Auto-optimization is not compatible with multi-slot personalization. */
  ProblemTypeIncompatibleWithAutoOptimization = "ProblemTypeIncompatibleWithAutoOptimization",
  /** Requested resource does not exist on the server. */
  ResourceNotFound = "ResourceNotFound",
  /** Front end not found. */
  FrontEndNotFound = "FrontEndNotFound",
  /** Offline Evaluation not found. */
  EvaluationNotFound = "EvaluationNotFound",
  /** Learning Settings not found in evaluation. */
  LearningSettingsNotFound = "LearningSettingsNotFound",
  /** Model not found in evaluation. */
  EvaluationModelNotFound = "EvaluationModelNotFound",
  /** Log properties not found. */
  LogsPropertiesNotFound = "LogsPropertiesNotFound",
  /** Error while ranking actions using model. Please verify the learning settings are valid. */
  ModelRankingError = "ModelRankingError",
  /** A generic error has occurred on the server. */
  InternalServerError = "InternalServerError",
  /** Rank call returned null response. */
  RankNullResponse = "RankNullResponse",
  /** Failed to update configuration. */
  UpdateConfigurationFailed = "UpdateConfigurationFailed",
  /** Model reset failed. */
  ModelResetFailed = "ModelResetFailed",
  /** Model publish failed. */
  ModelPublishFailed = "ModelPublishFailed",
  /** Model metadata update failed. */
  ModelMetadataUpdateFailed = "ModelMetadataUpdateFailed",
  /** This operation is not allowed at this time. */
  OperationNotAllowed = "OperationNotAllowed"
}

/**
 * Defines values for PersonalizerErrorCode. \
 * {@link KnownPersonalizerErrorCode} can be used interchangeably with PersonalizerErrorCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BadRequest**: Request could not be understood by the server. \
 * **InvalidServiceConfiguration**: Invalid service configuration. \
 * **InvalidLearningModeServiceConfiguration**: Updating defaultReward, rewardWaitTime and rewardAggregation when changing learning mode from Online to Apprentice mode and vice versa is not allowed. Make the mode change and then change the additional settings with an additional API call. \
 * **InvalidPolicyConfiguration**: Invalid policy configuration. \
 * **InvalidPolicyContract**: Invalid policy contract. \
 * **InvalidEvaluationContract**: Invalid evaluation contract. \
 * **DuplicateCustomPolicyNames**: Custom policy names should be unique. \
 * **NoLogsExistInDateRange**: No logs exist in date range. \
 * **LogsSizeExceedAllowedLimit**: Total size of logs exceed allowed limit. \
 * **InvalidRewardRequest**: Invalid reward request. \
 * **InvalidEventIdToActivate**: Invalid activate event request. \
 * **InvalidRankRequest**: Invalid request. \
 * **InvalidExportLogsRequest**: Invalid request. \
 * **InvalidRequest**: Invalid request. \
 * **InvalidContainer**: SAS Uri must be the Uri to a container that has write permissions. \
 * **InvalidModelMetadata**: Invalid model metadata. \
 * **ApprenticeModeNeverTurnedOn**: Apprentice mode never turned on. \
 * **MissingAppId**: AppId is missing in the header. \
 * **InvalidRewardWaitTime**: Reward wait time should be either 10 minutes or 4 hours or 12 hours or 24 hours \
 * **InvalidLogRetentionDays**: Log Retention Days must be -1 to store indefinitely or must be at least reward wait time plus 1 day (rounded up) \
 * **InvalidMultiSlotApiAccess**: Multi-slot feature is currently disabled. Please follow multi-slot Personalizer documentation to update your loop settings to enable multi-slot functionality. \
 * **PayloadSizeExceeded**: Exceeds maximum allowed payload size. \
 * **InvalidModelImportSignature**: Given model file is not signed or does not have a valid signature. \
 * **InvalidModelImportFormat**: Given model file format is invalid. \
 * **InvalidApiAccess**: Api is currently disabled for the instance. \
 * **ModelFileAccessDenied**: Key vault Key used for customer managed key cannot be accessed. \
 * **ProblemTypeIncompatibleWithAutoOptimization**: Auto-optimization is not compatible with multi-slot personalization. \
 * **ResourceNotFound**: Requested resource does not exist on the server. \
 * **FrontEndNotFound**: Front end not found. \
 * **EvaluationNotFound**: Offline Evaluation not found. \
 * **LearningSettingsNotFound**: Learning Settings not found in evaluation. \
 * **EvaluationModelNotFound**: Model not found in evaluation. \
 * **LogsPropertiesNotFound**: Log properties not found. \
 * **ModelRankingError**: Error while ranking actions using model. Please verify the learning settings are valid. \
 * **InternalServerError**: A generic error has occurred on the server. \
 * **RankNullResponse**: Rank call returned null response. \
 * **UpdateConfigurationFailed**: Failed to update configuration. \
 * **ModelResetFailed**: Model reset failed. \
 * **ModelPublishFailed**: Model publish failed. \
 * **ModelMetadataUpdateFailed**: Model metadata update failed. \
 * **OperationNotAllowed**: This operation is not allowed at this time.
 */
export type PersonalizerErrorCode = string;

/** Known values of {@link EvaluationJobStatus} that the service accepts. */
export enum KnownEvaluationJobStatus {
  /** Completed */
  Completed = "completed",
  /** Pending */
  Pending = "pending",
  /** Failed */
  Failed = "failed",
  /** NotSubmitted */
  NotSubmitted = "notSubmitted",
  /** Timeout */
  Timeout = "timeout",
  /** OptimalPolicyApplied */
  OptimalPolicyApplied = "optimalPolicyApplied",
  /** OnlinePolicyRetained */
  OnlinePolicyRetained = "onlinePolicyRetained"
}

/**
 * Defines values for EvaluationJobStatus. \
 * {@link KnownEvaluationJobStatus} can be used interchangeably with EvaluationJobStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **completed** \
 * **pending** \
 * **failed** \
 * **notSubmitted** \
 * **timeout** \
 * **optimalPolicyApplied** \
 * **onlinePolicyRetained**
 */
export type EvaluationJobStatus = string;

/** Known values of {@link PolicySource} that the service accepts. */
export enum KnownPolicySource {
  /** Online */
  Online = "Online",
  /** Baseline */
  Baseline = "Baseline",
  /** Random */
  Random = "Random",
  /** Custom */
  Custom = "Custom",
  /** OfflineExperimentation */
  OfflineExperimentation = "OfflineExperimentation"
}

/**
 * Defines values for PolicySource. \
 * {@link KnownPolicySource} can be used interchangeably with PolicySource,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Online** \
 * **Baseline** \
 * **Random** \
 * **Custom** \
 * **OfflineExperimentation**
 */
export type PolicySource = string;

/** Known values of {@link EvaluationType} that the service accepts. */
export enum KnownEvaluationType {
  /** Manual */
  Manual = "Manual",
  /** Auto */
  Auto = "Auto"
}

/**
 * Defines values for EvaluationType. \
 * {@link KnownEvaluationType} can be used interchangeably with EvaluationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Manual** \
 * **Auto**
 */
export type EvaluationType = string;

/** Optional parameters. */
export interface ServiceConfigurationGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ServiceConfigurationGetResponse = ServiceConfiguration;

/** Optional parameters. */
export interface ServiceConfigurationUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type ServiceConfigurationUpdateResponse = ServiceConfiguration;

/** Optional parameters. */
export interface ServiceConfigurationApplyFromEvaluationOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface PolicyGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PolicyGetResponse = PolicyContract;

/** Optional parameters. */
export interface PolicyUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type PolicyUpdateResponse = PolicyContract;

/** Optional parameters. */
export interface PolicyResetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the reset operation. */
export type PolicyResetResponse = PolicyContract;

/** Optional parameters. */
export interface EvaluationsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type EvaluationsGetResponse = Evaluation;

/** Optional parameters. */
export interface EvaluationsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface EvaluationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type EvaluationsListResponse = Evaluation[];

/** Optional parameters. */
export interface EvaluationsCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type EvaluationsCreateResponse = EvaluationsCreateHeaders & Evaluation;

/** Optional parameters. */
export interface EventsRewardOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface EventsActivateOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface LogInteractionsOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface LogObservationsOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface LogDeleteOptionalParams extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface LogGetPropertiesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getProperties operation. */
export type LogGetPropertiesResponse = LogsProperties;

/** Optional parameters. */
export interface ModelGetOptionalParams extends coreClient.OperationOptions {
  /** True if requesting signed model zip archive, false otherwise. */
  signed?: boolean;
}

/** Contains response data for the get operation. */
export type ModelGetResponse = {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always `undefined` in node.js.
   */
  blobBody?: Promise<Blob>;
  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always `undefined` in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;
};

/** Optional parameters. */
export interface ModelImportOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ModelResetOptionalParams extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ModelGetPropertiesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getProperties operation. */
export type ModelGetPropertiesResponse = ModelProperties;

/** Optional parameters. */
export interface MultiSlotEventsRewardOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface MultiSlotEventsActivateOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface MultiSlotRankOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the rank operation. */
export type MultiSlotRankOperationResponse = MultiSlotRankResponse;

/** Optional parameters. */
export interface RankOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the rank operation. */
export type RankOperationResponse = RankResponse;

/** Optional parameters. */
export interface GeneratedClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** Overrides client endpoint. */
  endpoint?: string;
}
