/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Model } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GeneratedClient } from "../generatedClient";
import {
  ModelGetOptionalParams,
  ModelGetResponse,
  ModelImportOptionalParams,
  ModelResetOptionalParams,
  ModelGetPropertiesOptionalParams,
  ModelGetPropertiesResponse
} from "../models";

/** Class containing Model operations. */
export class ModelImpl implements Model {
  private readonly client: GeneratedClient;

  /**
   * Initialize a new instance of the class Model class.
   * @param client Reference to the service client
   */
  constructor(client: GeneratedClient) {
    this.client = client;
  }

  /**
   * Get the model file generated by Personalizer service.
   * @param options The options parameters.
   */
  get(options?: ModelGetOptionalParams): Promise<ModelGetResponse> {
    return this.client.sendOperationRequest({ options }, getOperationSpec);
  }

  /**
   * Replace the existing model file for the Personalizer service.
   * @param body The digitally signed model file obtained from getting the model.
   * @param options The options parameters.
   */
  import(
    body: coreRestPipeline.RequestBodyType,
    options?: ModelImportOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { body, options },
      importOperationSpec
    );
  }

  /**
   * Resets the model file generated by Personalizer service.
   * @param options The options parameters.
   */
  reset(options?: ModelResetOptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ options }, resetOperationSpec);
  }

  /**
   * Get properties of the model file generated by Personalizer service.
   * @param options The options parameters.
   */
  getProperties(
    options?: ModelGetPropertiesOptionalParams
  ): Promise<ModelGetPropertiesResponse> {
    return this.client.sendOperationRequest(
      { options },
      getPropertiesOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/model",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "Stream" }, serializedName: "parsedResponse" }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.signed],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept2],
  serializer
};
const importOperationSpec: coreClient.OperationSpec = {
  path: "/model",
  httpMethod: "PUT",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body1,
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType1, Parameters.accept1],
  mediaType: "binary",
  serializer
};
const resetOperationSpec: coreClient.OperationSpec = {
  path: "/model",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const getPropertiesOperationSpec: coreClient.OperationSpec = {
  path: "/model/properties",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ModelProperties
    }
  },
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
