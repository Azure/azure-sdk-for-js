/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Events } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GeneratedClient } from "../generatedClient";
import {
  RewardRequest,
  EventsRewardOptionalParams,
  EventsActivateOptionalParams
} from "../models";

/** Class containing Events operations. */
export class EventsImpl implements Events {
  private readonly client: GeneratedClient;

  /**
   * Initialize a new instance of the class Events class.
   * @param client Reference to the service client
   */
  constructor(client: GeneratedClient) {
    this.client = client;
  }

  /**
   * Report reward between 0 and 1 that resulted from using the action specified in rewardActionId, for
   * the specified event.
   * @param eventId The event id this reward applies to.
   * @param reward The reward should be a floating point number, typically between 0 and 1.
   * @param options The options parameters.
   */
  reward(
    eventId: string,
    reward: RewardRequest,
    options?: EventsRewardOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { eventId, reward, options },
      rewardOperationSpec
    );
  }

  /**
   * Report that the specified event was actually used (e.g. by being displayed to the user) and a reward
   * should be expected for it.
   * @param eventId The event ID to be activated.
   * @param options The options parameters.
   */
  activate(
    eventId: string,
    options?: EventsActivateOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { eventId, options },
      activateOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const rewardOperationSpec: coreClient.OperationSpec = {
  path: "/events/{eventId}/reward",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.reward,
  urlParameters: [Parameters.endpoint, Parameters.eventId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const activateOperationSpec: coreClient.OperationSpec = {
  path: "/events/{eventId}/activate",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.eventId],
  headerParameters: [Parameters.accept],
  serializer
};
