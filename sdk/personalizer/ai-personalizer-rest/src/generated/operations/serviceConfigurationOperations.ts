/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ServiceConfigurationOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GeneratedClient } from "../generatedClient";
import {
  ServiceConfigurationGetOptionalParams,
  ServiceConfigurationGetResponse,
  ServiceConfiguration,
  ServiceConfigurationUpdateOptionalParams,
  ServiceConfigurationUpdateResponse,
  PolicyReferenceContract,
  ServiceConfigurationApplyFromEvaluationOptionalParams
} from "../models";

/** Class containing ServiceConfigurationOperations operations. */
export class ServiceConfigurationOperationsImpl
  implements ServiceConfigurationOperations {
  private readonly client: GeneratedClient;

  /**
   * Initialize a new instance of the class ServiceConfigurationOperations class.
   * @param client Reference to the service client
   */
  constructor(client: GeneratedClient) {
    this.client = client;
  }

  /**
   * Get the Personalizer service configuration.
   * @param options The options parameters.
   */
  get(
    options?: ServiceConfigurationGetOptionalParams
  ): Promise<ServiceConfigurationGetResponse> {
    return this.client.sendOperationRequest({ options }, getOperationSpec);
  }

  /**
   * Update the Personalizer service configuration.
   * @param config The personalizer service configuration.
   * @param options The options parameters.
   */
  update(
    config: ServiceConfiguration,
    options?: ServiceConfigurationUpdateOptionalParams
  ): Promise<ServiceConfigurationUpdateResponse> {
    return this.client.sendOperationRequest(
      { config, options },
      updateOperationSpec
    );
  }

  /**
   * Apply Learning Settings and model from a pre-existing Offline Evaluation, making them the current
   * online Learning Settings and model and replacing the previous ones.
   * @param body Reference to the policy within the evaluation.
   * @param options The options parameters.
   */
  applyFromEvaluation(
    body: PolicyReferenceContract,
    options?: ServiceConfigurationApplyFromEvaluationOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { body, options },
      applyFromEvaluationOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/configurations/service",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServiceConfiguration
    }
  },
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/configurations/service",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ServiceConfiguration
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.config,
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const applyFromEvaluationOperationSpec: coreClient.OperationSpec = {
  path: "/configurations/applyFromEvaluation",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body,
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
