/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as operations from "./operations";
import { NetworkManagementClientContext } from "./networkManagementClientContext";


class NetworkManagementClient extends NetworkManagementClientContext {
  // Operation groups
  loadBalancers: operations.LoadBalancers;
  loadBalancerBackendAddressPools: operations.LoadBalancerBackendAddressPools;
  loadBalancerFrontendIPConfigurations: operations.LoadBalancerFrontendIPConfigurations;
  inboundNatRules: operations.InboundNatRules;
  loadBalancerLoadBalancingRules: operations.LoadBalancerLoadBalancingRules;
  loadBalancerNetworkInterfaces: operations.LoadBalancerNetworkInterfaces;
  loadBalancerProbes: operations.LoadBalancerProbes;
  virtualNetworkGateways: operations.VirtualNetworkGateways;
  virtualNetworkGatewayConnections: operations.VirtualNetworkGatewayConnections;
  localNetworkGateways: operations.LocalNetworkGateways;
  networkInterfaces: operations.NetworkInterfaces;
  networkInterfaceIPConfigurations: operations.NetworkInterfaceIPConfigurations;
  networkInterfaceLoadBalancers: operations.NetworkInterfaceLoadBalancers;
  networkSecurityGroups: operations.NetworkSecurityGroups;
  securityRules: operations.SecurityRules;
  defaultSecurityRules: operations.DefaultSecurityRules;
  operations: operations.Operations;
  publicIPAddresses: operations.PublicIPAddresses;
  routeTables: operations.RouteTables;
  routes: operations.Routes;
  virtualNetworks: operations.VirtualNetworks;
  subnets: operations.Subnets;
  virtualNetworkPeerings: operations.VirtualNetworkPeerings;

  /**
   * Initializes a new instance of the NetworkManagementClient class.
   * @param credentials Credentials needed for the client to connect to Azure.
   * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure
   * subscription. The subscription ID forms part of the URI for every service call.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, subscriptionId: string, options?: Models.NetworkManagementClientOptions) {
    super(credentials, subscriptionId, options);
    this.loadBalancers = new operations.LoadBalancers(this);
    this.loadBalancerBackendAddressPools = new operations.LoadBalancerBackendAddressPools(this);
    this.loadBalancerFrontendIPConfigurations = new operations.LoadBalancerFrontendIPConfigurations(this);
    this.inboundNatRules = new operations.InboundNatRules(this);
    this.loadBalancerLoadBalancingRules = new operations.LoadBalancerLoadBalancingRules(this);
    this.loadBalancerNetworkInterfaces = new operations.LoadBalancerNetworkInterfaces(this);
    this.loadBalancerProbes = new operations.LoadBalancerProbes(this);
    this.virtualNetworkGateways = new operations.VirtualNetworkGateways(this);
    this.virtualNetworkGatewayConnections = new operations.VirtualNetworkGatewayConnections(this);
    this.localNetworkGateways = new operations.LocalNetworkGateways(this);
    this.networkInterfaces = new operations.NetworkInterfaces(this);
    this.networkInterfaceIPConfigurations = new operations.NetworkInterfaceIPConfigurations(this);
    this.networkInterfaceLoadBalancers = new operations.NetworkInterfaceLoadBalancers(this);
    this.networkSecurityGroups = new operations.NetworkSecurityGroups(this);
    this.securityRules = new operations.SecurityRules(this);
    this.defaultSecurityRules = new operations.DefaultSecurityRules(this);
    this.operations = new operations.Operations(this);
    this.publicIPAddresses = new operations.PublicIPAddresses(this);
    this.routeTables = new operations.RouteTables(this);
    this.routes = new operations.Routes(this);
    this.virtualNetworks = new operations.VirtualNetworks(this);
    this.subnets = new operations.Subnets(this);
    this.virtualNetworkPeerings = new operations.VirtualNetworkPeerings(this);
  }
}

// Operation Specifications

export {
  NetworkManagementClient,
  NetworkManagementClientContext,
  Models as NetworkManagementModels,
  Mappers as NetworkManagementMappers
};
export * from "./operations";
