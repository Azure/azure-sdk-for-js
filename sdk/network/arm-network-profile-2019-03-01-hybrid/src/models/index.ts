/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * SKU of a load balancer
 */
export interface LoadBalancerSku {
  /**
   * Name of a load balancer SKU. Possible values include: 'Basic', 'Standard'
   */
  name?: LoadBalancerSkuName;
}

/**
 * Reference to another subresource.
 */
export interface SubResource extends BaseResource {
  /**
   * Resource ID.
   */
  id?: string;
}

/**
 * Common resource representation.
 */
export interface Resource extends BaseResource {
  /**
   * Resource ID.
   */
  id?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource location.
   */
  location?: string;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * An application security group in a resource group.
 */
export interface ApplicationSecurityGroup extends Resource {
  /**
   * The resource GUID property of the application security group resource. It uniquely identifies
   * a resource, even if the user changes its name or migrate the resource across subscriptions or
   * resource groups.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resourceGuid?: string;
  /**
   * The provisioning state of the application security group resource. Possible values are:
   * 'Succeeded', 'Updating', 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly etag?: string;
}

/**
 * Network security rule.
 */
export interface SecurityRule extends SubResource {
  /**
   * A description for this rule. Restricted to 140 chars.
   */
  description?: string;
  /**
   * Network protocol this rule applies to. Possible values are 'Tcp', 'Udp', and '*'. Possible
   * values include: 'Tcp', 'Udp', '*'
   */
  protocol: SecurityRuleProtocol;
  /**
   * The source port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used
   * to match all ports.
   */
  sourcePortRange?: string;
  /**
   * The destination port or range. Integer or range between 0 and 65535. Asterisk '*' can also be
   * used to match all ports.
   */
  destinationPortRange?: string;
  /**
   * The CIDR or source IP range. Asterisk '*' can also be used to match all source IPs. Default
   * tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. If this is
   * an ingress rule, specifies where network traffic originates from.
   */
  sourceAddressPrefix?: string;
  /**
   * The CIDR or source IP ranges.
   */
  sourceAddressPrefixes?: string[];
  /**
   * The application security group specified as source.
   */
  sourceApplicationSecurityGroups?: ApplicationSecurityGroup[];
  /**
   * The destination address prefix. CIDR or destination IP range. Asterisk '*' can also be used to
   * match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and
   * 'Internet' can also be used.
   */
  destinationAddressPrefix?: string;
  /**
   * The destination address prefixes. CIDR or destination IP ranges.
   */
  destinationAddressPrefixes?: string[];
  /**
   * The application security group specified as destination.
   */
  destinationApplicationSecurityGroups?: ApplicationSecurityGroup[];
  /**
   * The source port ranges.
   */
  sourcePortRanges?: string[];
  /**
   * The destination port ranges.
   */
  destinationPortRanges?: string[];
  /**
   * The network traffic is allowed or denied. Possible values are: 'Allow' and 'Deny'. Possible
   * values include: 'Allow', 'Deny'
   */
  access: SecurityRuleAccess;
  /**
   * The priority of the rule. The value can be between 100 and 4096. The priority number must be
   * unique for each rule in the collection. The lower the priority number, the higher the priority
   * of the rule.
   */
  priority?: number;
  /**
   * The direction of the rule. The direction specifies if rule will be evaluated on incoming or
   * outgoing traffic. Possible values are: 'Inbound' and 'Outbound'. Possible values include:
   * 'Inbound', 'Outbound'
   */
  direction: SecurityRuleDirection;
  /**
   * The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting',
   * and 'Failed'.
   */
  provisioningState?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * Backend address of an application gateway.
 */
export interface ApplicationGatewayBackendAddress {
  /**
   * Fully qualified domain name (FQDN).
   */
  fqdn?: string;
  /**
   * IP address
   */
  ipAddress?: string;
}

/**
 * Backend Address Pool of an application gateway.
 */
export interface ApplicationGatewayBackendAddressPool extends SubResource {
  /**
   * Collection of references to IPs defined in network interfaces.
   */
  backendIPConfigurations?: NetworkInterfaceIPConfiguration[];
  /**
   * Backend addresses
   */
  backendAddresses?: ApplicationGatewayBackendAddress[];
  /**
   * Provisioning state of the backend address pool resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * Resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
  /**
   * Type of the resource.
   */
  type?: string;
}

/**
 * Pool of backend IP addresses.
 */
export interface BackendAddressPool extends SubResource {
  /**
   * Gets collection of references to IP addresses defined in network interfaces.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly backendIPConfigurations?: NetworkInterfaceIPConfiguration[];
  /**
   * Gets load balancing rules that use this backend address pool.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly loadBalancingRules?: SubResource[];
  /**
   * Gets outbound rules that use this backend address pool.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly outboundNatRule?: SubResource;
  /**
   * Get provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting',
   * and 'Failed'.
   */
  provisioningState?: string;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * Inbound NAT rule of the load balancer.
 */
export interface InboundNatRule extends SubResource {
  /**
   * A reference to frontend IP addresses.
   */
  frontendIPConfiguration?: SubResource;
  /**
   * A reference to a private IP address defined on a network interface of a VM. Traffic sent to
   * the frontend port of each of the frontend IP configurations is forwarded to the backend IP.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly backendIPConfiguration?: NetworkInterfaceIPConfiguration;
  /**
   * Possible values include: 'Udp', 'Tcp', 'All'
   */
  protocol?: TransportProtocol;
  /**
   * The port for the external endpoint. Port numbers for each rule must be unique within the Load
   * Balancer. Acceptable values range from 1 to 65534.
   */
  frontendPort?: number;
  /**
   * The port used for the internal endpoint. Acceptable values range from 1 to 65535.
   */
  backendPort?: number;
  /**
   * The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The
   * default value is 4 minutes. This element is only used when the protocol is set to TCP.
   */
  idleTimeoutInMinutes?: number;
  /**
   * Configures a virtual machine's endpoint for the floating IP capability required to configure a
   * SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn
   * Availability Groups in SQL server. This setting can't be changed after you create the
   * endpoint.
   */
  enableFloatingIP?: boolean;
  /**
   * Gets the provisioning state of the public IP resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * SKU of a public IP address
 */
export interface PublicIPAddressSku {
  /**
   * Name of a public IP address SKU. Possible values include: 'Basic', 'Standard'
   */
  name?: PublicIPAddressSkuName;
}

/**
 * IP configuration
 */
export interface IPConfiguration extends SubResource {
  /**
   * The private IP address of the IP configuration.
   */
  privateIPAddress?: string;
  /**
   * The private IP allocation method. Possible values are 'Static' and 'Dynamic'. Possible values
   * include: 'Static', 'Dynamic'
   */
  privateIPAllocationMethod?: IPAllocationMethod;
  /**
   * The reference of the subnet resource.
   */
  subnet?: Subnet;
  /**
   * The reference of the public IP resource.
   */
  publicIPAddress?: PublicIPAddress;
  /**
   * Gets the provisioning state of the public IP resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * Contains FQDN of the DNS record associated with the public IP address
 */
export interface PublicIPAddressDnsSettings {
  /**
   * Gets or sets the Domain name label.The concatenation of the domain name label and the
   * regionalized DNS zone make up the fully qualified domain name associated with the public IP
   * address. If a domain name label is specified, an A DNS record is created for the public IP in
   * the Microsoft Azure DNS system.
   */
  domainNameLabel?: string;
  /**
   * Gets the FQDN, Fully qualified domain name of the A DNS record associated with the public IP.
   * This is the concatenation of the domainNameLabel and the regionalized DNS zone.
   */
  fqdn?: string;
  /**
   * Gets or Sets the Reverse FQDN. A user-visible, fully qualified domain name that resolves to
   * this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created
   * pointing from the IP address in the in-addr.arpa domain to the reverse FQDN.
   */
  reverseFqdn?: string;
}

/**
 * Public IP address resource.
 */
export interface PublicIPAddress extends Resource {
  /**
   * The public IP address SKU.
   */
  sku?: PublicIPAddressSku;
  /**
   * The public IP allocation method. Possible values are: 'Static' and 'Dynamic'. Possible values
   * include: 'Static', 'Dynamic'
   */
  publicIPAllocationMethod?: IPAllocationMethod;
  /**
   * The public IP address version. Possible values are: 'IPv4' and 'IPv6'. Possible values
   * include: 'IPv4', 'IPv6'
   */
  publicIPAddressVersion?: IPVersion;
  /**
   * The IP configuration associated with the public IP address.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly ipConfiguration?: IPConfiguration;
  /**
   * The FQDN of the DNS record associated with the public IP address.
   */
  dnsSettings?: PublicIPAddressDnsSettings;
  /**
   * The IP address associated with the public IP address resource.
   */
  ipAddress?: string;
  /**
   * The idle timeout of the public IP address.
   */
  idleTimeoutInMinutes?: number;
  /**
   * The resource GUID property of the public IP resource.
   */
  resourceGuid?: string;
  /**
   * The provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting',
   * and 'Failed'.
   */
  provisioningState?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
  /**
   * A list of availability zones denoting the IP allocated for the resource needs to come from.
   */
  zones?: string[];
}

/**
 * IPConfiguration in a network interface.
 */
export interface NetworkInterfaceIPConfiguration extends SubResource {
  /**
   * The reference of ApplicationGatewayBackendAddressPool resource.
   */
  applicationGatewayBackendAddressPools?: ApplicationGatewayBackendAddressPool[];
  /**
   * The reference of LoadBalancerBackendAddressPool resource.
   */
  loadBalancerBackendAddressPools?: BackendAddressPool[];
  /**
   * A list of references of LoadBalancerInboundNatRules.
   */
  loadBalancerInboundNatRules?: InboundNatRule[];
  /**
   * Private IP address of the IP configuration.
   */
  privateIPAddress?: string;
  /**
   * Defines how a private IP address is assigned. Possible values are: 'Static' and 'Dynamic'.
   * Possible values include: 'Static', 'Dynamic'
   */
  privateIPAllocationMethod?: IPAllocationMethod;
  /**
   * Available from Api-Version 2016-03-30 onwards, it represents whether the specific
   * ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and
   * 'IPv6'. Possible values include: 'IPv4', 'IPv6'
   */
  privateIPAddressVersion?: IPVersion;
  /**
   * Subnet bound to the IP configuration.
   */
  subnet?: Subnet;
  /**
   * Gets whether this is a primary customer address on the network interface.
   */
  primary?: boolean;
  /**
   * Public IP address bound to the IP configuration.
   */
  publicIPAddress?: PublicIPAddress;
  /**
   * Application security groups in which the IP configuration is included.
   */
  applicationSecurityGroups?: ApplicationSecurityGroup[];
  /**
   * The provisioning state of the network interface IP configuration. Possible values are:
   * 'Updating', 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * DNS settings of a network interface.
 */
export interface NetworkInterfaceDnsSettings {
  /**
   * List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS
   * resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only
   * value in dnsServers collection.
   */
  dnsServers?: string[];
  /**
   * If the VM that uses this NIC is part of an Availability Set, then this list will have the
   * union of all DNS servers from all NICs that are part of the Availability Set. This property is
   * what is configured on each of those VMs.
   */
  appliedDnsServers?: string[];
  /**
   * Relative DNS name for this NIC used for internal communications between VMs in the same
   * virtual network.
   */
  internalDnsNameLabel?: string;
  /**
   * Fully qualified DNS name supporting internal communications between VMs in the same virtual
   * network.
   */
  internalFqdn?: string;
  /**
   * Even if internalDnsNameLabel is not specified, a DNS entry is created for the primary NIC of
   * the VM. This DNS name can be constructed by concatenating the VM name with the value of
   * internalDomainNameSuffix.
   */
  internalDomainNameSuffix?: string;
}

/**
 * A network interface in a resource group.
 */
export interface NetworkInterface extends Resource {
  /**
   * The reference of a virtual machine.
   */
  virtualMachine?: SubResource;
  /**
   * The reference of the NetworkSecurityGroup resource.
   */
  networkSecurityGroup?: NetworkSecurityGroup;
  /**
   * A list of IPConfigurations of the network interface.
   */
  ipConfigurations?: NetworkInterfaceIPConfiguration[];
  /**
   * The DNS settings in network interface.
   */
  dnsSettings?: NetworkInterfaceDnsSettings;
  /**
   * The MAC address of the network interface.
   */
  macAddress?: string;
  /**
   * Gets whether this is a primary network interface on a virtual machine.
   */
  primary?: boolean;
  /**
   * If the network interface is accelerated networking enabled.
   */
  enableAcceleratedNetworking?: boolean;
  /**
   * Indicates whether IP forwarding is enabled on this network interface.
   */
  enableIPForwarding?: boolean;
  /**
   * The resource GUID property of the network interface resource.
   */
  resourceGuid?: string;
  /**
   * The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting',
   * and 'Failed'.
   */
  provisioningState?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * NetworkSecurityGroup resource.
 */
export interface NetworkSecurityGroup extends Resource {
  /**
   * A collection of security rules of the network security group.
   */
  securityRules?: SecurityRule[];
  /**
   * The default security rules of network security group.
   */
  defaultSecurityRules?: SecurityRule[];
  /**
   * A collection of references to network interfaces.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly networkInterfaces?: NetworkInterface[];
  /**
   * A collection of references to subnets.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly subnets?: Subnet[];
  /**
   * The resource GUID property of the network security group resource.
   */
  resourceGuid?: string;
  /**
   * The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting',
   * and 'Failed'.
   */
  provisioningState?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * Route resource
 */
export interface Route extends SubResource {
  /**
   * The destination CIDR to which the route applies.
   */
  addressPrefix?: string;
  /**
   * The type of Azure hop the packet should be sent to. Possible values are:
   * 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'. Possible
   * values include: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', 'None'
   */
  nextHopType: RouteNextHopType;
  /**
   * The IP address packets should be forwarded to. Next hop values are only allowed in routes
   * where the next hop type is VirtualAppliance.
   */
  nextHopIpAddress?: string;
  /**
   * The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   */
  provisioningState?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * Route table resource.
 */
export interface RouteTable extends Resource {
  /**
   * Collection of routes contained within a route table.
   */
  routes?: Route[];
  /**
   * A collection of references to subnets.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly subnets?: Subnet[];
  /**
   * Gets or sets whether to disable the routes learned by BGP on that route table. True means
   * disable.
   */
  disableBgpRoutePropagation?: boolean;
  /**
   * The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   */
  provisioningState?: string;
  /**
   * Gets a unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * The service endpoint properties.
 */
export interface ServiceEndpointPropertiesFormat {
  /**
   * The type of the endpoint service.
   */
  service?: string;
  /**
   * A list of locations.
   */
  locations?: string[];
  /**
   * The provisioning state of the resource.
   */
  provisioningState?: string;
}

/**
 * ResourceNavigationLink resource.
 */
export interface ResourceNavigationLink extends SubResource {
  /**
   * Resource type of the linked resource.
   */
  linkedResourceType?: string;
  /**
   * Link to the external resource
   */
  link?: string;
  /**
   * Provisioning state of the ResourceNavigationLink resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * Name of the resource that is unique within a resource group. This name can be used to access
   * the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly etag?: string;
}

/**
 * Subnet in a virtual network resource.
 */
export interface Subnet extends SubResource {
  /**
   * The address prefix for the subnet.
   */
  addressPrefix?: string;
  /**
   * The reference of the NetworkSecurityGroup resource.
   */
  networkSecurityGroup?: NetworkSecurityGroup;
  /**
   * The reference of the RouteTable resource.
   */
  routeTable?: RouteTable;
  /**
   * An array of service endpoints.
   */
  serviceEndpoints?: ServiceEndpointPropertiesFormat[];
  /**
   * Gets an array of references to the network interface IP configurations using subnet.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly ipConfigurations?: IPConfiguration[];
  /**
   * Gets an array of references to the external resources using subnet.
   */
  resourceNavigationLinks?: ResourceNavigationLink[];
  /**
   * The provisioning state of the resource.
   */
  provisioningState?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * Frontend IP address of the load balancer.
 */
export interface FrontendIPConfiguration extends SubResource {
  /**
   * Read only. Inbound rules URIs that use this frontend IP.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly inboundNatRules?: SubResource[];
  /**
   * Read only. Inbound pools URIs that use this frontend IP.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly inboundNatPools?: SubResource[];
  /**
   * Read only. Outbound rules URIs that use this frontend IP.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly outboundNatRules?: SubResource[];
  /**
   * Gets load balancing rules URIs that use this frontend IP.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly loadBalancingRules?: SubResource[];
  /**
   * The private IP address of the IP configuration.
   */
  privateIPAddress?: string;
  /**
   * The Private IP allocation method. Possible values are: 'Static' and 'Dynamic'. Possible values
   * include: 'Static', 'Dynamic'
   */
  privateIPAllocationMethod?: IPAllocationMethod;
  /**
   * The reference of the subnet resource.
   */
  subnet?: Subnet;
  /**
   * The reference of the Public IP resource.
   */
  publicIPAddress?: PublicIPAddress;
  /**
   * Gets the provisioning state of the public IP resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
  /**
   * A list of availability zones denoting the IP allocated for the resource needs to come from.
   */
  zones?: string[];
}

/**
 * A load balancing rule for a load balancer.
 */
export interface LoadBalancingRule extends SubResource {
  /**
   * A reference to frontend IP addresses.
   */
  frontendIPConfiguration?: SubResource;
  /**
   * A reference to a pool of DIPs. Inbound traffic is randomly load balanced across IPs in the
   * backend IPs.
   */
  backendAddressPool?: SubResource;
  /**
   * The reference of the load balancer probe used by the load balancing rule.
   */
  probe?: SubResource;
  /**
   * Possible values include: 'Udp', 'Tcp', 'All'
   */
  protocol: TransportProtocol;
  /**
   * The load distribution policy for this rule. Possible values are 'Default', 'SourceIP', and
   * 'SourceIPProtocol'. Possible values include: 'Default', 'SourceIP', 'SourceIPProtocol'
   */
  loadDistribution?: LoadDistribution;
  /**
   * The port for the external endpoint. Port numbers for each rule must be unique within the Load
   * Balancer. Acceptable values are between 0 and 65534. Note that value 0 enables "Any Port"
   */
  frontendPort: number;
  /**
   * The port used for internal connections on the endpoint. Acceptable values are between 0 and
   * 65535. Note that value 0 enables "Any Port"
   */
  backendPort?: number;
  /**
   * The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The
   * default value is 4 minutes. This element is only used when the protocol is set to TCP.
   */
  idleTimeoutInMinutes?: number;
  /**
   * Configures a virtual machine's endpoint for the floating IP capability required to configure a
   * SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn
   * Availability Groups in SQL server. This setting can't be changed after you create the
   * endpoint.
   */
  enableFloatingIP?: boolean;
  /**
   * Configures SNAT for the VMs in the backend pool to use the publicIP address specified in the
   * frontend of the load balancing rule.
   */
  disableOutboundSnat?: boolean;
  /**
   * Gets the provisioning state of the PublicIP resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * A load balancer probe.
 */
export interface Probe extends SubResource {
  /**
   * The load balancer rules that use this probe.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly loadBalancingRules?: SubResource[];
  /**
   * The protocol of the end point. Possible values are: 'Http' or 'Tcp'. If 'Tcp' is specified, a
   * received ACK is required for the probe to be successful. If 'Http' is specified, a 200 OK
   * response from the specifies URI is required for the probe to be successful. Possible values
   * include: 'Http', 'Tcp'
   */
  protocol: ProbeProtocol;
  /**
   * The port for communicating the probe. Possible values range from 1 to 65535, inclusive.
   */
  port: number;
  /**
   * The interval, in seconds, for how frequently to probe the endpoint for health status.
   * Typically, the interval is slightly less than half the allocated timeout period (in seconds)
   * which allows two full probes before taking the instance out of rotation. The default value is
   * 15, the minimum value is 5.
   */
  intervalInSeconds?: number;
  /**
   * The number of probes where if no response, will result in stopping further traffic from being
   * delivered to the endpoint. This values allows endpoints to be taken out of rotation faster or
   * slower than the typical times used in Azure.
   */
  numberOfProbes?: number;
  /**
   * The URI used for requesting health status from the VM. Path is required if a protocol is set
   * to http. Otherwise, it is not allowed. There is no default value.
   */
  requestPath?: string;
  /**
   * Gets the provisioning state of the public IP resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * Inbound NAT pool of the load balancer.
 */
export interface InboundNatPool extends SubResource {
  /**
   * A reference to frontend IP addresses.
   */
  frontendIPConfiguration?: SubResource;
  /**
   * Possible values include: 'Udp', 'Tcp', 'All'
   */
  protocol: TransportProtocol;
  /**
   * The first port number in the range of external ports that will be used to provide Inbound Nat
   * to NICs associated with a load balancer. Acceptable values range between 1 and 65534.
   */
  frontendPortRangeStart: number;
  /**
   * The last port number in the range of external ports that will be used to provide Inbound Nat
   * to NICs associated with a load balancer. Acceptable values range between 1 and 65535.
   */
  frontendPortRangeEnd: number;
  /**
   * The port used for internal connections on the endpoint. Acceptable values are between 1 and
   * 65535.
   */
  backendPort: number;
  /**
   * Gets the provisioning state of the PublicIP resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * Outbound NAT pool of the load balancer.
 */
export interface OutboundNatRule extends SubResource {
  /**
   * The number of outbound ports to be used for NAT.
   */
  allocatedOutboundPorts?: number;
  /**
   * The Frontend IP addresses of the load balancer.
   */
  frontendIPConfigurations?: SubResource[];
  /**
   * A reference to a pool of DIPs. Outbound traffic is randomly load balanced across IPs in the
   * backend IPs.
   */
  backendAddressPool: SubResource;
  /**
   * Gets the provisioning state of the PublicIP resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * LoadBalancer resource
 */
export interface LoadBalancer extends Resource {
  /**
   * The load balancer SKU.
   */
  sku?: LoadBalancerSku;
  /**
   * Object representing the frontend IPs to be used for the load balancer
   */
  frontendIPConfigurations?: FrontendIPConfiguration[];
  /**
   * Collection of backend address pools used by a load balancer
   */
  backendAddressPools?: BackendAddressPool[];
  /**
   * Object collection representing the load balancing rules Gets the provisioning
   */
  loadBalancingRules?: LoadBalancingRule[];
  /**
   * Collection of probe objects used in the load balancer
   */
  probes?: Probe[];
  /**
   * Collection of inbound NAT Rules used by a load balancer. Defining inbound NAT rules on your
   * load balancer is mutually exclusive with defining an inbound NAT pool. Inbound NAT pools are
   * referenced from virtual machine scale sets. NICs that are associated with individual virtual
   * machines cannot reference an Inbound NAT pool. They have to reference individual inbound NAT
   * rules.
   */
  inboundNatRules?: InboundNatRule[];
  /**
   * Defines an external port range for inbound NAT to a single backend port on NICs associated
   * with a load balancer. Inbound NAT rules are created automatically for each NIC associated with
   * the Load Balancer using an external port from this range. Defining an Inbound NAT pool on your
   * Load Balancer is mutually exclusive with defining inbound Nat rules. Inbound NAT pools are
   * referenced from virtual machine scale sets. NICs that are associated with individual virtual
   * machines cannot reference an inbound NAT pool. They have to reference individual inbound NAT
   * rules.
   */
  inboundNatPools?: InboundNatPool[];
  /**
   * The outbound NAT rules.
   */
  outboundNatRules?: OutboundNatRule[];
  /**
   * The resource GUID property of the load balancer resource.
   */
  resourceGuid?: string;
  /**
   * Gets the provisioning state of the PublicIP resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * Tags object for patch operations.
 */
export interface TagsObject {
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * IP configuration for virtual network gateway
 */
export interface VirtualNetworkGatewayIPConfiguration extends SubResource {
  /**
   * The private IP allocation method. Possible values are: 'Static' and 'Dynamic'. Possible values
   * include: 'Static', 'Dynamic'
   */
  privateIPAllocationMethod?: IPAllocationMethod;
  /**
   * The reference of the subnet resource.
   */
  subnet?: SubResource;
  /**
   * The reference of the public IP resource.
   */
  publicIPAddress?: SubResource;
  /**
   * The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting',
   * and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * VirtualNetworkGatewaySku details
 */
export interface VirtualNetworkGatewaySku {
  /**
   * Gateway SKU name. Possible values include: 'Basic', 'HighPerformance', 'Standard',
   * 'UltraPerformance', 'VpnGw1', 'VpnGw2', 'VpnGw3'
   */
  name?: VirtualNetworkGatewaySkuName;
  /**
   * Gateway SKU tier. Possible values include: 'Basic', 'HighPerformance', 'Standard',
   * 'UltraPerformance', 'VpnGw1', 'VpnGw2', 'VpnGw3'
   */
  tier?: VirtualNetworkGatewaySkuTier;
  /**
   * The capacity.
   */
  capacity?: number;
}

/**
 * AddressSpace contains an array of IP address ranges that can be used by subnets of the virtual
 * network.
 */
export interface AddressSpace {
  /**
   * A list of address blocks reserved for this virtual network in CIDR notation.
   */
  addressPrefixes?: string[];
}

/**
 * VPN client root certificate of virtual network gateway
 */
export interface VpnClientRootCertificate extends SubResource {
  /**
   * The certificate public data.
   */
  publicCertData: string;
  /**
   * The provisioning state of the VPN client root certificate resource. Possible values are:
   * 'Updating', 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * VPN client revoked certificate of virtual network gateway.
 */
export interface VpnClientRevokedCertificate extends SubResource {
  /**
   * The revoked VPN client certificate thumbprint.
   */
  thumbprint?: string;
  /**
   * The provisioning state of the VPN client revoked certificate resource. Possible values are:
   * 'Updating', 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * VpnClientConfiguration for P2S client.
 */
export interface VpnClientConfiguration {
  /**
   * The reference of the address space resource which represents Address space for P2S VpnClient.
   */
  vpnClientAddressPool?: AddressSpace;
  /**
   * VpnClientRootCertificate for virtual network gateway.
   */
  vpnClientRootCertificates?: VpnClientRootCertificate[];
  /**
   * VpnClientRevokedCertificate for Virtual network gateway.
   */
  vpnClientRevokedCertificates?: VpnClientRevokedCertificate[];
  /**
   * VpnClientProtocols for Virtual network gateway.
   */
  vpnClientProtocols?: VpnClientProtocol[];
  /**
   * The radius server address property of the VirtualNetworkGateway resource for vpn client
   * connection.
   */
  radiusServerAddress?: string;
  /**
   * The radius secret property of the VirtualNetworkGateway resource for vpn client connection.
   */
  radiusServerSecret?: string;
}

/**
 * BGP settings details
 */
export interface BgpSettings {
  /**
   * The BGP speaker's ASN.
   */
  asn?: number;
  /**
   * The BGP peering address and BGP identifier of this BGP speaker.
   */
  bgpPeeringAddress?: string;
  /**
   * The weight added to routes learned from this BGP speaker.
   */
  peerWeight?: number;
}

/**
 * BGP peer status details
 */
export interface BgpPeerStatus {
  /**
   * The virtual network gateway's local address
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly localAddress?: string;
  /**
   * The remote BGP peer
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly neighbor?: string;
  /**
   * The autonomous system number of the remote BGP peer
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly asn?: number;
  /**
   * The BGP peer state. Possible values include: 'Unknown', 'Stopped', 'Idle', 'Connecting',
   * 'Connected'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: BgpPeerState;
  /**
   * For how long the peering has been up
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly connectedDuration?: string;
  /**
   * The number of routes learned from this peer
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly routesReceived?: number;
  /**
   * The number of BGP messages sent
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly messagesSent?: number;
  /**
   * The number of BGP messages received
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly messagesReceived?: number;
}

/**
 * Gateway routing details
 */
export interface GatewayRoute {
  /**
   * The gateway's local address
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly localAddress?: string;
  /**
   * The route's network prefix
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly network?: string;
  /**
   * The route's next hop
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextHop?: string;
  /**
   * The peer this route was learned from
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourcePeer?: string;
  /**
   * The source this route was learned from
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly origin?: string;
  /**
   * The route's AS path sequence
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly asPath?: string;
  /**
   * The route's weight
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly weight?: number;
}

/**
 * A common class for general resource information
 */
export interface VirtualNetworkGateway extends Resource {
  /**
   * IP configurations for virtual network gateway.
   */
  ipConfigurations?: VirtualNetworkGatewayIPConfiguration[];
  /**
   * The type of this virtual network gateway. Possible values are: 'Vpn' and 'ExpressRoute'.
   * Possible values include: 'Vpn', 'ExpressRoute'
   */
  gatewayType?: VirtualNetworkGatewayType;
  /**
   * The type of this virtual network gateway. Possible values are: 'PolicyBased' and 'RouteBased'.
   * Possible values include: 'PolicyBased', 'RouteBased'
   */
  vpnType?: VpnType;
  /**
   * Whether BGP is enabled for this virtual network gateway or not.
   */
  enableBgp?: boolean;
  /**
   * ActiveActive flag
   */
  activeActive?: boolean;
  /**
   * The reference of the LocalNetworkGateway resource which represents local network site having
   * default routes. Assign Null value in case of removing existing default site setting.
   */
  gatewayDefaultSite?: SubResource;
  /**
   * The reference of the VirtualNetworkGatewaySku resource which represents the SKU selected for
   * Virtual network gateway.
   */
  sku?: VirtualNetworkGatewaySku;
  /**
   * The reference of the VpnClientConfiguration resource which represents the P2S VpnClient
   * configurations.
   */
  vpnClientConfiguration?: VpnClientConfiguration;
  /**
   * Virtual network gateway's BGP speaker settings.
   */
  bgpSettings?: BgpSettings;
  /**
   * The resource GUID property of the VirtualNetworkGateway resource.
   */
  resourceGuid?: string;
  /**
   * The provisioning state of the VirtualNetworkGateway resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * Gets a unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * Vpn Client Parameters for package generation
 */
export interface VpnClientParameters {
  /**
   * VPN client Processor Architecture. Possible values are: 'AMD64' and 'X86'. Possible values
   * include: 'Amd64', 'X86'
   */
  processorArchitecture?: ProcessorArchitecture;
  /**
   * VPN client Authentication Method. Possible values are: 'EAPTLS' and 'EAPMSCHAPv2'. Possible
   * values include: 'EAPTLS', 'EAPMSCHAPv2'
   */
  authenticationMethod?: AuthenticationMethod;
  /**
   * The public certificate data for the radius server authentication certificate as a Base-64
   * encoded string. Required only if external radius authentication has been configured with
   * EAPTLS authentication.
   */
  radiusServerAuthCertificate?: string;
  /**
   * A list of client root certificates public certificate data encoded as Base-64 strings.
   * Optional parameter for external radius based authentication with EAPTLS.
   */
  clientRootCertificates?: string[];
}

/**
 * Response for list BGP peer status API service call
 */
export interface BgpPeerStatusListResult {
  /**
   * List of BGP peers
   */
  value?: BgpPeerStatus[];
}

/**
 * List of virtual network gateway routes
 */
export interface GatewayRouteListResult {
  /**
   * List of gateway routes
   */
  value?: GatewayRoute[];
}

/**
 * VirtualNetworkGatewayConnection properties
 */
export interface TunnelConnectionHealth {
  /**
   * Tunnel name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tunnel?: string;
  /**
   * Virtual network Gateway connection status. Possible values include: 'Unknown', 'Connecting',
   * 'Connected', 'NotConnected'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly connectionStatus?: VirtualNetworkGatewayConnectionStatus;
  /**
   * The Ingress Bytes Transferred in this connection
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly ingressBytesTransferred?: number;
  /**
   * The Egress Bytes Transferred in this connection
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly egressBytesTransferred?: number;
  /**
   * The time at which connection was established in Utc format.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastConnectionEstablishedUtcTime?: string;
}

/**
 * A common class for general resource information
 */
export interface LocalNetworkGateway extends Resource {
  /**
   * Local network site address space.
   */
  localNetworkAddressSpace?: AddressSpace;
  /**
   * IP address of local network gateway.
   */
  gatewayIpAddress?: string;
  /**
   * Local network gateway's BGP speaker settings.
   */
  bgpSettings?: BgpSettings;
  /**
   * The resource GUID property of the LocalNetworkGateway resource.
   */
  resourceGuid?: string;
  /**
   * The provisioning state of the LocalNetworkGateway resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * An IPSec Policy configuration for a virtual network gateway connection
 */
export interface IpsecPolicy {
  /**
   * The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for
   * a site to site VPN tunnel.
   */
  saLifeTimeSeconds: number;
  /**
   * The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for a
   * site to site VPN tunnel.
   */
  saDataSizeKilobytes: number;
  /**
   * The IPSec encryption algorithm (IKE phase 1). Possible values include: 'None', 'DES', 'DES3',
   * 'AES128', 'AES192', 'AES256', 'GCMAES128', 'GCMAES192', 'GCMAES256'
   */
  ipsecEncryption: IpsecEncryption;
  /**
   * The IPSec integrity algorithm (IKE phase 1). Possible values include: 'MD5', 'SHA1', 'SHA256',
   * 'GCMAES128', 'GCMAES192', 'GCMAES256'
   */
  ipsecIntegrity: IpsecIntegrity;
  /**
   * The IKE encryption algorithm (IKE phase 2). Possible values include: 'DES', 'DES3', 'AES128',
   * 'AES192', 'AES256'
   */
  ikeEncryption: IkeEncryption;
  /**
   * The IKE integrity algorithm (IKE phase 2). Possible values include: 'MD5', 'SHA1', 'SHA256',
   * 'SHA384'
   */
  ikeIntegrity: IkeIntegrity;
  /**
   * The DH Groups used in IKE Phase 1 for initial SA. Possible values include: 'None', 'DHGroup1',
   * 'DHGroup2', 'DHGroup14', 'DHGroup2048', 'ECP256', 'ECP384', 'DHGroup24'
   */
  dhGroup: DhGroup;
  /**
   * The DH Groups used in IKE Phase 2 for new child SA. Possible values include: 'None', 'PFS1',
   * 'PFS2', 'PFS2048', 'ECP256', 'ECP384', 'PFS24'
   */
  pfsGroup: PfsGroup;
}

/**
 * A common class for general resource information
 */
export interface VirtualNetworkGatewayConnection extends Resource {
  /**
   * The authorizationKey.
   */
  authorizationKey?: string;
  /**
   * The reference to virtual network gateway resource.
   */
  virtualNetworkGateway1: VirtualNetworkGateway;
  /**
   * The reference to virtual network gateway resource.
   */
  virtualNetworkGateway2?: VirtualNetworkGateway;
  /**
   * The reference to local network gateway resource.
   */
  localNetworkGateway2?: LocalNetworkGateway;
  /**
   * Gateway connection type. Possible values are: 'IPsec','Vnet2Vnet','ExpressRoute', and
   * 'VPNClient. Possible values include: 'IPsec', 'Vnet2Vnet', 'ExpressRoute', 'VPNClient'
   */
  connectionType: VirtualNetworkGatewayConnectionType;
  /**
   * The routing weight.
   */
  routingWeight?: number;
  /**
   * The IPSec shared key.
   */
  sharedKey?: string;
  /**
   * Virtual network Gateway connection status. Possible values are 'Unknown', 'Connecting',
   * 'Connected' and 'NotConnected'. Possible values include: 'Unknown', 'Connecting', 'Connected',
   * 'NotConnected'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly connectionStatus?: VirtualNetworkGatewayConnectionStatus;
  /**
   * Collection of all tunnels' connection health status.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tunnelConnectionStatus?: TunnelConnectionHealth[];
  /**
   * The egress bytes transferred in this connection.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly egressBytesTransferred?: number;
  /**
   * The ingress bytes transferred in this connection.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly ingressBytesTransferred?: number;
  /**
   * The reference to peerings resource.
   */
  peer?: SubResource;
  /**
   * EnableBgp flag
   */
  enableBgp?: boolean;
  /**
   * Enable policy-based traffic selectors.
   */
  usePolicyBasedTrafficSelectors?: boolean;
  /**
   * The IPSec Policies to be considered by this connection.
   */
  ipsecPolicies?: IpsecPolicy[];
  /**
   * The resource GUID property of the VirtualNetworkGatewayConnection resource.
   */
  resourceGuid?: string;
  /**
   * The provisioning state of the VirtualNetworkGatewayConnection resource. Possible values are:
   * 'Updating', 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * Gets a unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * The virtual network connection reset shared key
 */
export interface ConnectionResetSharedKey {
  /**
   * The virtual network connection reset shared key length, should between 1 and 128.
   */
  keyLength: number;
}

/**
 * Response for GetConnectionSharedKey API service call
 */
export interface ConnectionSharedKey {
  /**
   * The virtual network connection shared key value.
   */
  value: string;
}

/**
 * A reference to VirtualNetworkGateway or LocalNetworkGateway resource.
 */
export interface VirtualNetworkConnectionGatewayReference {
  /**
   * The ID of VirtualNetworkGateway or LocalNetworkGateway resource.
   */
  id: string;
}

/**
 * A common class for general resource information
 */
export interface VirtualNetworkGatewayConnectionListEntity extends Resource {
  /**
   * The authorizationKey.
   */
  authorizationKey?: string;
  /**
   * The reference to virtual network gateway resource.
   */
  virtualNetworkGateway1: VirtualNetworkConnectionGatewayReference;
  /**
   * The reference to virtual network gateway resource.
   */
  virtualNetworkGateway2?: VirtualNetworkConnectionGatewayReference;
  /**
   * The reference to local network gateway resource.
   */
  localNetworkGateway2?: VirtualNetworkConnectionGatewayReference;
  /**
   * Gateway connection type. Possible values are: 'IPsec','Vnet2Vnet','ExpressRoute', and
   * 'VPNClient. Possible values include: 'IPsec', 'Vnet2Vnet', 'ExpressRoute', 'VPNClient'
   */
  connectionType: VirtualNetworkGatewayConnectionType;
  /**
   * The routing weight.
   */
  routingWeight?: number;
  /**
   * The IPSec shared key.
   */
  sharedKey?: string;
  /**
   * Virtual network Gateway connection status. Possible values are 'Unknown', 'Connecting',
   * 'Connected' and 'NotConnected'. Possible values include: 'Unknown', 'Connecting', 'Connected',
   * 'NotConnected'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly connectionStatus?: VirtualNetworkGatewayConnectionStatus;
  /**
   * Collection of all tunnels' connection health status.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tunnelConnectionStatus?: TunnelConnectionHealth[];
  /**
   * The egress bytes transferred in this connection.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly egressBytesTransferred?: number;
  /**
   * The ingress bytes transferred in this connection.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly ingressBytesTransferred?: number;
  /**
   * The reference to peerings resource.
   */
  peer?: SubResource;
  /**
   * EnableBgp flag
   */
  enableBgp?: boolean;
  /**
   * Enable policy-based traffic selectors.
   */
  usePolicyBasedTrafficSelectors?: boolean;
  /**
   * The IPSec Policies to be considered by this connection.
   */
  ipsecPolicies?: IpsecPolicy[];
  /**
   * The resource GUID property of the VirtualNetworkGatewayConnection resource.
   */
  resourceGuid?: string;
  /**
   * The provisioning state of the VirtualNetworkGatewayConnection resource. Possible values are:
   * 'Updating', 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * Gets a unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * Vpn device configuration script generation parameters
 */
export interface VpnDeviceScriptParameters {
  /**
   * The vendor for the vpn device.
   */
  vendor?: string;
  /**
   * The device family for the vpn device.
   */
  deviceFamily?: string;
  /**
   * The firmware version for the vpn device.
   */
  firmwareVersion?: string;
}

/**
 * An interface representing ErrorDetails.
 */
export interface ErrorDetails {
  code?: string;
  target?: string;
  message?: string;
}

/**
 * An interface representing ErrorModel.
 */
export interface ErrorModel {
  code?: string;
  message?: string;
  target?: string;
  details?: ErrorDetails[];
  innerError?: string;
}

/**
 * The response body contains the status of the specified asynchronous operation, indicating
 * whether it has succeeded, is in progress, or has failed. Note that this status is distinct from
 * the HTTP status code returned for the Get Operation Status operation itself. If the asynchronous
 * operation succeeded, the response body includes the HTTP status code for the successful request.
 * If the asynchronous operation failed, the response body includes the HTTP status code for the
 * failed request and error information regarding the failure.
 */
export interface AzureAsyncOperationResult {
  /**
   * Status of the Azure async operation. Possible values are: 'InProgress', 'Succeeded', and
   * 'Failed'. Possible values include: 'InProgress', 'Succeeded', 'Failed'
   */
  status?: NetworkOperationStatus;
  error?: ErrorModel;
}

/**
 * The effective network security group association.
 */
export interface EffectiveNetworkSecurityGroupAssociation {
  /**
   * The ID of the subnet if assigned.
   */
  subnet?: SubResource;
  /**
   * The ID of the network interface if assigned.
   */
  networkInterface?: SubResource;
}

/**
 * Effective network security rules.
 */
export interface EffectiveNetworkSecurityRule {
  /**
   * The name of the security rule specified by the user (if created by the user).
   */
  name?: string;
  /**
   * The network protocol this rule applies to. Possible values are: 'Tcp', 'Udp', and 'All'.
   * Possible values include: 'Tcp', 'Udp', 'All'
   */
  protocol?: EffectiveSecurityRuleProtocol;
  /**
   * The source port or range.
   */
  sourcePortRange?: string;
  /**
   * The destination port or range.
   */
  destinationPortRange?: string;
  /**
   * The source port ranges. Expected values include a single integer between 0 and 65535, a range
   * using '-' as separator (e.g. 100-400), or an asterisk (*)
   */
  sourcePortRanges?: string[];
  /**
   * The destination port ranges. Expected values include a single integer between 0 and 65535, a
   * range using '-' as separator (e.g. 100-400), or an asterisk (*)
   */
  destinationPortRanges?: string[];
  /**
   * The source address prefix.
   */
  sourceAddressPrefix?: string;
  /**
   * The destination address prefix.
   */
  destinationAddressPrefix?: string;
  /**
   * The source address prefixes. Expected values include CIDR IP ranges, Default Tags
   * (VirtualNetwork, AzureLoadBalancer, Internet), System Tags, and the asterisk (*).
   */
  sourceAddressPrefixes?: string[];
  /**
   * The destination address prefixes. Expected values include CIDR IP ranges, Default Tags
   * (VirtualNetwork, AzureLoadBalancer, Internet), System Tags, and the asterisk (*).
   */
  destinationAddressPrefixes?: string[];
  /**
   * The expanded source address prefix.
   */
  expandedSourceAddressPrefix?: string[];
  /**
   * Expanded destination address prefix.
   */
  expandedDestinationAddressPrefix?: string[];
  /**
   * Whether network traffic is allowed or denied. Possible values are: 'Allow' and 'Deny'.
   * Possible values include: 'Allow', 'Deny'
   */
  access?: SecurityRuleAccess;
  /**
   * The priority of the rule.
   */
  priority?: number;
  /**
   * The direction of the rule. Possible values are: 'Inbound and Outbound'. Possible values
   * include: 'Inbound', 'Outbound'
   */
  direction?: SecurityRuleDirection;
}

/**
 * Effective network security group.
 */
export interface EffectiveNetworkSecurityGroup {
  /**
   * The ID of network security group that is applied.
   */
  networkSecurityGroup?: SubResource;
  /**
   * Associated resources.
   */
  association?: EffectiveNetworkSecurityGroupAssociation;
  /**
   * A collection of effective security rules.
   */
  effectiveSecurityRules?: EffectiveNetworkSecurityRule[];
  /**
   * Mapping of tags to list of IP Addresses included within the tag.
   */
  tagMap?: { [propertyName: string]: string[] };
}

/**
 * Response for list effective network security groups API service call.
 */
export interface EffectiveNetworkSecurityGroupListResult {
  /**
   * A list of effective network security groups.
   */
  value?: EffectiveNetworkSecurityGroup[];
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Effective Route
 */
export interface EffectiveRoute {
  /**
   * The name of the user defined route. This is optional.
   */
  name?: string;
  /**
   * Who created the route. Possible values are: 'Unknown', 'User', 'VirtualNetworkGateway', and
   * 'Default'. Possible values include: 'Unknown', 'User', 'VirtualNetworkGateway', 'Default'
   */
  source?: EffectiveRouteSource;
  /**
   * The value of effective route. Possible values are: 'Active' and 'Invalid'. Possible values
   * include: 'Active', 'Invalid'
   */
  state?: EffectiveRouteState;
  /**
   * The address prefixes of the effective routes in CIDR notation.
   */
  addressPrefix?: string[];
  /**
   * The IP address of the next hop of the effective route.
   */
  nextHopIpAddress?: string[];
  /**
   * The type of Azure hop the packet should be sent to. Possible values are:
   * 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'. Possible
   * values include: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', 'None'
   */
  nextHopType?: RouteNextHopType;
}

/**
 * Response for list effective route API service call.
 */
export interface EffectiveRouteListResult {
  /**
   * A list of effective routes.
   */
  value?: EffectiveRoute[];
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Display metadata associated with the operation.
 */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft Network.
   */
  provider?: string;
  /**
   * Resource on which the operation is performed.
   */
  resource?: string;
  /**
   * Type of the operation: get, read, delete, etc.
   */
  operation?: string;
  /**
   * Description of the operation.
   */
  description?: string;
}

/**
 * Availability of the metric.
 */
export interface Availability {
  /**
   * The time grain of the availability.
   */
  timeGrain?: string;
  /**
   * The retention of the availability.
   */
  retention?: string;
  /**
   * Duration of the availability blob.
   */
  blobDuration?: string;
}

/**
 * Dimension of the metric.
 */
export interface Dimension {
  /**
   * The name of the dimension.
   */
  name?: string;
  /**
   * The display name of the dimension.
   */
  displayName?: string;
  /**
   * The internal name of the dimension.
   */
  internalName?: string;
}

/**
 * Description of metrics specification.
 */
export interface MetricSpecification {
  /**
   * The name of the metric.
   */
  name?: string;
  /**
   * The display name of the metric.
   */
  displayName?: string;
  /**
   * The description of the metric.
   */
  displayDescription?: string;
  /**
   * Units the metric to be displayed in.
   */
  unit?: string;
  /**
   * The aggregation type.
   */
  aggregationType?: string;
  /**
   * List of availability.
   */
  availabilities?: Availability[];
  /**
   * Whether regional MDM account enabled.
   */
  enableRegionalMdmAccount?: boolean;
  /**
   * Whether gaps would be filled with zeros.
   */
  fillGapWithZero?: boolean;
  /**
   * Pattern for the filter of the metric.
   */
  metricFilterPattern?: string;
  /**
   * List of dimensions.
   */
  dimensions?: Dimension[];
  /**
   * Whether the metric is internal.
   */
  isInternal?: boolean;
  /**
   * The source MDM account.
   */
  sourceMdmAccount?: string;
  /**
   * The source MDM namespace.
   */
  sourceMdmNamespace?: string;
  /**
   * The resource Id dimension name override.
   */
  resourceIdDimensionNameOverride?: string;
}

/**
 * Description of logging specification.
 */
export interface LogSpecification {
  /**
   * The name of the specification.
   */
  name?: string;
  /**
   * The display name of the specification.
   */
  displayName?: string;
  /**
   * Duration of the blob.
   */
  blobDuration?: string;
}

/**
 * Specification of the service.
 */
export interface OperationPropertiesFormatServiceSpecification {
  /**
   * Operation service specification.
   */
  metricSpecifications?: MetricSpecification[];
  /**
   * Operation log specification.
   */
  logSpecifications?: LogSpecification[];
}

/**
 * Network REST API operation definition.
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}
   */
  name?: string;
  /**
   * Display metadata associated with the operation.
   */
  display?: OperationDisplay;
  /**
   * Origin of the operation.
   */
  origin?: string;
  /**
   * Specification of the service.
   */
  serviceSpecification?: OperationPropertiesFormatServiceSpecification;
}

/**
 * Peerings in a virtual network resource.
 */
export interface VirtualNetworkPeering extends SubResource {
  /**
   * Whether the VMs in the linked virtual network space would be able to access all the VMs in
   * local Virtual network space.
   */
  allowVirtualNetworkAccess?: boolean;
  /**
   * Whether the forwarded traffic from the VMs in the remote virtual network will be
   * allowed/disallowed.
   */
  allowForwardedTraffic?: boolean;
  /**
   * If gateway links can be used in remote virtual networking to link to this virtual network.
   */
  allowGatewayTransit?: boolean;
  /**
   * If remote gateways can be used on this virtual network. If the flag is set to true, and
   * allowGatewayTransit on remote peering is also true, virtual network will use gateways of
   * remote virtual network for transit. Only one peering can have this flag set to true. This flag
   * cannot be set if virtual network already has a gateway.
   */
  useRemoteGateways?: boolean;
  /**
   * The reference of the remote virtual network. The remote virtual network can be in the same or
   * different region (preview). See here to register for the preview and learn more
   * (https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-create-peering).
   */
  remoteVirtualNetwork?: SubResource;
  /**
   * The reference of the remote virtual network address space.
   */
  remoteAddressSpace?: AddressSpace;
  /**
   * The status of the virtual network peering. Possible values are 'Initiated', 'Connected', and
   * 'Disconnected'. Possible values include: 'Initiated', 'Connected', 'Disconnected'
   */
  peeringState?: VirtualNetworkPeeringState;
  /**
   * The provisioning state of the resource.
   */
  provisioningState?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * DhcpOptions contains an array of DNS servers available to VMs deployed in the virtual network.
 * Standard DHCP option for a subnet overrides VNET DHCP options.
 */
export interface DhcpOptions {
  /**
   * The list of DNS servers IP addresses.
   */
  dnsServers?: string[];
}

/**
 * Virtual Network resource.
 */
export interface VirtualNetwork extends Resource {
  /**
   * The AddressSpace that contains an array of IP address ranges that can be used by subnets.
   */
  addressSpace?: AddressSpace;
  /**
   * The dhcpOptions that contains an array of DNS servers available to VMs deployed in the virtual
   * network.
   */
  dhcpOptions?: DhcpOptions;
  /**
   * A list of subnets in a Virtual Network.
   */
  subnets?: Subnet[];
  /**
   * A list of peerings in a Virtual Network.
   */
  virtualNetworkPeerings?: VirtualNetworkPeering[];
  /**
   * The resourceGuid property of the Virtual Network resource.
   */
  resourceGuid?: string;
  /**
   * The provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting',
   * and 'Failed'.
   */
  provisioningState?: string;
  /**
   * Indicates if DDoS protection is enabled for all the protected resources in a Virtual Network.
   */
  enableDdosProtection?: boolean;
  /**
   * Indicates if Vm protection is enabled for all the subnets in a Virtual Network.
   */
  enableVmProtection?: boolean;
  /**
   * Gets a unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * Response for CheckIPAddressAvailability API service call
 */
export interface IPAddressAvailabilityResult {
  /**
   * Private IP address availability.
   */
  available?: boolean;
  /**
   * Contains other available private IP addresses if the asked for address is taken.
   */
  availableIPAddresses?: string[];
}

/**
 * Usage strings container.
 */
export interface VirtualNetworkUsageName {
  /**
   * Localized subnet size and usage string.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly localizedValue?: string;
  /**
   * Subnet size and usage string.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: string;
}

/**
 * Usage details for subnet.
 */
export interface VirtualNetworkUsage {
  /**
   * Indicates number of IPs used from the Subnet.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly currentValue?: number;
  /**
   * Subnet identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Indicates the size of the subnet.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly limit?: number;
  /**
   * The name containing common and localized value for usage.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: VirtualNetworkUsageName;
  /**
   * Usage units. Returns 'Count'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly unit?: string;
}

/**
 * Optional Parameters.
 */
export interface LoadBalancersGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface InboundNatRulesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface VirtualNetworkGatewaysResetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Virtual network gateway vip address supplied to the begin reset of the active-active feature
   * enabled gateway.
   */
  gatewayVip?: string;
}

/**
 * Optional Parameters.
 */
export interface VirtualNetworkGatewaysGetBgpPeerStatusOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The IP address of the peer to retrieve the status of.
   */
  peer?: string;
}

/**
 * Optional Parameters.
 */
export interface VirtualNetworkGatewaysBeginResetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Virtual network gateway vip address supplied to the begin reset of the active-active feature
   * enabled gateway.
   */
  gatewayVip?: string;
}

/**
 * Optional Parameters.
 */
export interface VirtualNetworkGatewaysBeginGetBgpPeerStatusOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The IP address of the peer to retrieve the status of.
   */
  peer?: string;
}

/**
 * Optional Parameters.
 */
export interface NetworkInterfacesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface NetworkSecurityGroupsGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface PublicIPAddressesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface RouteTablesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface VirtualNetworksGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface VirtualNetworksCheckIPAddressAvailabilityOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The private IP address to be verified.
   */
  ipAddress?: string;
}

/**
 * Optional Parameters.
 */
export interface SubnetsGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * An interface representing NetworkManagementClientOptions.
 */
export interface NetworkManagementClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * @interface
 * Response for ListLoadBalancers API service call.
 * @extends Array<LoadBalancer>
 */
export interface LoadBalancerListResult extends Array<LoadBalancer> {
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Response for ListBackendAddressPool API service call.
 * @extends Array<BackendAddressPool>
 */
export interface LoadBalancerBackendAddressPoolListResult extends Array<BackendAddressPool> {
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Response for ListFrontendIPConfiguration API service call.
 * @extends Array<FrontendIPConfiguration>
 */
export interface LoadBalancerFrontendIPConfigurationListResult extends Array<FrontendIPConfiguration> {
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Response for ListInboundNatRule API service call.
 * @extends Array<InboundNatRule>
 */
export interface InboundNatRuleListResult extends Array<InboundNatRule> {
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Response for ListLoadBalancingRule API service call.
 * @extends Array<LoadBalancingRule>
 */
export interface LoadBalancerLoadBalancingRuleListResult extends Array<LoadBalancingRule> {
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Response for the ListNetworkInterface API service call.
 * @extends Array<NetworkInterface>
 */
export interface NetworkInterfaceListResult extends Array<NetworkInterface> {
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Response for ListProbe API service call.
 * @extends Array<Probe>
 */
export interface LoadBalancerProbeListResult extends Array<Probe> {
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Response for the ListVirtualNetworkGateways API service call.
 * @extends Array<VirtualNetworkGateway>
 */
export interface VirtualNetworkGatewayListResult extends Array<VirtualNetworkGateway> {
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Response for the VirtualNetworkGatewayListConnections API service call
 * @extends Array<VirtualNetworkGatewayConnectionListEntity>
 */
export interface VirtualNetworkGatewayListConnectionsResult extends Array<VirtualNetworkGatewayConnectionListEntity> {
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Response for the ListVirtualNetworkGatewayConnections API service call
 * @extends Array<VirtualNetworkGatewayConnection>
 */
export interface VirtualNetworkGatewayConnectionListResult extends Array<VirtualNetworkGatewayConnection> {
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Response for ListLocalNetworkGateways API service call.
 * @extends Array<LocalNetworkGateway>
 */
export interface LocalNetworkGatewayListResult extends Array<LocalNetworkGateway> {
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Response for list ip configurations API service call.
 * @extends Array<NetworkInterfaceIPConfiguration>
 */
export interface NetworkInterfaceIPConfigurationListResult extends Array<NetworkInterfaceIPConfiguration> {
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Response for list ip configurations API service call.
 * @extends Array<LoadBalancer>
 */
export interface NetworkInterfaceLoadBalancerListResult extends Array<LoadBalancer> {
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Response for ListNetworkSecurityGroups API service call.
 * @extends Array<NetworkSecurityGroup>
 */
export interface NetworkSecurityGroupListResult extends Array<NetworkSecurityGroup> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListSecurityRule API service call. Retrieves all security rules that belongs to a
 * network security group.
 * @extends Array<SecurityRule>
 */
export interface SecurityRuleListResult extends Array<SecurityRule> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Result of the request to list Network operations. It contains a list of operations and a URL
 * link to get the next set of results.
 * @extends Array<Operation>
 */
export interface OperationListResult extends Array<Operation> {
  /**
   * URL to get the next set of operation list results if there are any.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListPublicIpAddresses API service call.
 * @extends Array<PublicIPAddress>
 */
export interface PublicIPAddressListResult extends Array<PublicIPAddress> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for the ListRouteTable API service call.
 * @extends Array<RouteTable>
 */
export interface RouteTableListResult extends Array<RouteTable> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for the ListRoute API service call
 * @extends Array<Route>
 */
export interface RouteListResult extends Array<Route> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for the ListVirtualNetworks API service call.
 * @extends Array<VirtualNetwork>
 */
export interface VirtualNetworkListResult extends Array<VirtualNetwork> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for the virtual networks GetUsage API service call.
 * @extends Array<VirtualNetworkUsage>
 */
export interface VirtualNetworkListUsageResult extends Array<VirtualNetworkUsage> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListSubnets API service callRetrieves all subnet that belongs to a virtual network
 * @extends Array<Subnet>
 */
export interface SubnetListResult extends Array<Subnet> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListSubnets API service call. Retrieves all subnets that belong to a virtual
 * network.
 * @extends Array<VirtualNetworkPeering>
 */
export interface VirtualNetworkPeeringListResult extends Array<VirtualNetworkPeering> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Defines values for LoadBalancerSkuName.
 * Possible values include: 'Basic', 'Standard'
 * @readonly
 * @enum {string}
 */
export type LoadBalancerSkuName = 'Basic' | 'Standard';

/**
 * Defines values for IPAllocationMethod.
 * Possible values include: 'Static', 'Dynamic'
 * @readonly
 * @enum {string}
 */
export type IPAllocationMethod = 'Static' | 'Dynamic';

/**
 * Defines values for SecurityRuleProtocol.
 * Possible values include: 'Tcp', 'Udp', '*'
 * @readonly
 * @enum {string}
 */
export type SecurityRuleProtocol = 'Tcp' | 'Udp' | '*';

/**
 * Defines values for SecurityRuleAccess.
 * Possible values include: 'Allow', 'Deny'
 * @readonly
 * @enum {string}
 */
export type SecurityRuleAccess = 'Allow' | 'Deny';

/**
 * Defines values for SecurityRuleDirection.
 * Possible values include: 'Inbound', 'Outbound'
 * @readonly
 * @enum {string}
 */
export type SecurityRuleDirection = 'Inbound' | 'Outbound';

/**
 * Defines values for TransportProtocol.
 * Possible values include: 'Udp', 'Tcp', 'All'
 * @readonly
 * @enum {string}
 */
export type TransportProtocol = 'Udp' | 'Tcp' | 'All';

/**
 * Defines values for IPVersion.
 * Possible values include: 'IPv4', 'IPv6'
 * @readonly
 * @enum {string}
 */
export type IPVersion = 'IPv4' | 'IPv6';

/**
 * Defines values for PublicIPAddressSkuName.
 * Possible values include: 'Basic', 'Standard'
 * @readonly
 * @enum {string}
 */
export type PublicIPAddressSkuName = 'Basic' | 'Standard';

/**
 * Defines values for RouteNextHopType.
 * Possible values include: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance',
 * 'None'
 * @readonly
 * @enum {string}
 */
export type RouteNextHopType = 'VirtualNetworkGateway' | 'VnetLocal' | 'Internet' | 'VirtualAppliance' | 'None';

/**
 * Defines values for LoadDistribution.
 * Possible values include: 'Default', 'SourceIP', 'SourceIPProtocol'
 * @readonly
 * @enum {string}
 */
export type LoadDistribution = 'Default' | 'SourceIP' | 'SourceIPProtocol';

/**
 * Defines values for ProbeProtocol.
 * Possible values include: 'Http', 'Tcp'
 * @readonly
 * @enum {string}
 */
export type ProbeProtocol = 'Http' | 'Tcp';

/**
 * Defines values for VirtualNetworkGatewayType.
 * Possible values include: 'Vpn', 'ExpressRoute'
 * @readonly
 * @enum {string}
 */
export type VirtualNetworkGatewayType = 'Vpn' | 'ExpressRoute';

/**
 * Defines values for VpnType.
 * Possible values include: 'PolicyBased', 'RouteBased'
 * @readonly
 * @enum {string}
 */
export type VpnType = 'PolicyBased' | 'RouteBased';

/**
 * Defines values for VirtualNetworkGatewaySkuName.
 * Possible values include: 'Basic', 'HighPerformance', 'Standard', 'UltraPerformance', 'VpnGw1',
 * 'VpnGw2', 'VpnGw3'
 * @readonly
 * @enum {string}
 */
export type VirtualNetworkGatewaySkuName = 'Basic' | 'HighPerformance' | 'Standard' | 'UltraPerformance' | 'VpnGw1' | 'VpnGw2' | 'VpnGw3';

/**
 * Defines values for VirtualNetworkGatewaySkuTier.
 * Possible values include: 'Basic', 'HighPerformance', 'Standard', 'UltraPerformance', 'VpnGw1',
 * 'VpnGw2', 'VpnGw3'
 * @readonly
 * @enum {string}
 */
export type VirtualNetworkGatewaySkuTier = 'Basic' | 'HighPerformance' | 'Standard' | 'UltraPerformance' | 'VpnGw1' | 'VpnGw2' | 'VpnGw3';

/**
 * Defines values for VpnClientProtocol.
 * Possible values include: 'IkeV2', 'SSTP'
 * @readonly
 * @enum {string}
 */
export type VpnClientProtocol = 'IkeV2' | 'SSTP';

/**
 * Defines values for BgpPeerState.
 * Possible values include: 'Unknown', 'Stopped', 'Idle', 'Connecting', 'Connected'
 * @readonly
 * @enum {string}
 */
export type BgpPeerState = 'Unknown' | 'Stopped' | 'Idle' | 'Connecting' | 'Connected';

/**
 * Defines values for ProcessorArchitecture.
 * Possible values include: 'Amd64', 'X86'
 * @readonly
 * @enum {string}
 */
export type ProcessorArchitecture = 'Amd64' | 'X86';

/**
 * Defines values for AuthenticationMethod.
 * Possible values include: 'EAPTLS', 'EAPMSCHAPv2'
 * @readonly
 * @enum {string}
 */
export type AuthenticationMethod = 'EAPTLS' | 'EAPMSCHAPv2';

/**
 * Defines values for VirtualNetworkGatewayConnectionStatus.
 * Possible values include: 'Unknown', 'Connecting', 'Connected', 'NotConnected'
 * @readonly
 * @enum {string}
 */
export type VirtualNetworkGatewayConnectionStatus = 'Unknown' | 'Connecting' | 'Connected' | 'NotConnected';

/**
 * Defines values for VirtualNetworkGatewayConnectionType.
 * Possible values include: 'IPsec', 'Vnet2Vnet', 'ExpressRoute', 'VPNClient'
 * @readonly
 * @enum {string}
 */
export type VirtualNetworkGatewayConnectionType = 'IPsec' | 'Vnet2Vnet' | 'ExpressRoute' | 'VPNClient';

/**
 * Defines values for IpsecEncryption.
 * Possible values include: 'None', 'DES', 'DES3', 'AES128', 'AES192', 'AES256', 'GCMAES128',
 * 'GCMAES192', 'GCMAES256'
 * @readonly
 * @enum {string}
 */
export type IpsecEncryption = 'None' | 'DES' | 'DES3' | 'AES128' | 'AES192' | 'AES256' | 'GCMAES128' | 'GCMAES192' | 'GCMAES256';

/**
 * Defines values for IpsecIntegrity.
 * Possible values include: 'MD5', 'SHA1', 'SHA256', 'GCMAES128', 'GCMAES192', 'GCMAES256'
 * @readonly
 * @enum {string}
 */
export type IpsecIntegrity = 'MD5' | 'SHA1' | 'SHA256' | 'GCMAES128' | 'GCMAES192' | 'GCMAES256';

/**
 * Defines values for IkeEncryption.
 * Possible values include: 'DES', 'DES3', 'AES128', 'AES192', 'AES256'
 * @readonly
 * @enum {string}
 */
export type IkeEncryption = 'DES' | 'DES3' | 'AES128' | 'AES192' | 'AES256';

/**
 * Defines values for IkeIntegrity.
 * Possible values include: 'MD5', 'SHA1', 'SHA256', 'SHA384'
 * @readonly
 * @enum {string}
 */
export type IkeIntegrity = 'MD5' | 'SHA1' | 'SHA256' | 'SHA384';

/**
 * Defines values for DhGroup.
 * Possible values include: 'None', 'DHGroup1', 'DHGroup2', 'DHGroup14', 'DHGroup2048', 'ECP256',
 * 'ECP384', 'DHGroup24'
 * @readonly
 * @enum {string}
 */
export type DhGroup = 'None' | 'DHGroup1' | 'DHGroup2' | 'DHGroup14' | 'DHGroup2048' | 'ECP256' | 'ECP384' | 'DHGroup24';

/**
 * Defines values for PfsGroup.
 * Possible values include: 'None', 'PFS1', 'PFS2', 'PFS2048', 'ECP256', 'ECP384', 'PFS24'
 * @readonly
 * @enum {string}
 */
export type PfsGroup = 'None' | 'PFS1' | 'PFS2' | 'PFS2048' | 'ECP256' | 'ECP384' | 'PFS24';

/**
 * Defines values for NetworkOperationStatus.
 * Possible values include: 'InProgress', 'Succeeded', 'Failed'
 * @readonly
 * @enum {string}
 */
export type NetworkOperationStatus = 'InProgress' | 'Succeeded' | 'Failed';

/**
 * Defines values for EffectiveSecurityRuleProtocol.
 * Possible values include: 'Tcp', 'Udp', 'All'
 * @readonly
 * @enum {string}
 */
export type EffectiveSecurityRuleProtocol = 'Tcp' | 'Udp' | 'All';

/**
 * Defines values for EffectiveRouteSource.
 * Possible values include: 'Unknown', 'User', 'VirtualNetworkGateway', 'Default'
 * @readonly
 * @enum {string}
 */
export type EffectiveRouteSource = 'Unknown' | 'User' | 'VirtualNetworkGateway' | 'Default';

/**
 * Defines values for EffectiveRouteState.
 * Possible values include: 'Active', 'Invalid'
 * @readonly
 * @enum {string}
 */
export type EffectiveRouteState = 'Active' | 'Invalid';

/**
 * Defines values for VirtualNetworkPeeringState.
 * Possible values include: 'Initiated', 'Connected', 'Disconnected'
 * @readonly
 * @enum {string}
 */
export type VirtualNetworkPeeringState = 'Initiated' | 'Connected' | 'Disconnected';

/**
 * Contains response data for the get operation.
 */
export type LoadBalancersGetResponse = LoadBalancer & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancer;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type LoadBalancersCreateOrUpdateResponse = LoadBalancer & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancer;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type LoadBalancersUpdateTagsResponse = LoadBalancer & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancer;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type LoadBalancersListAllResponse = LoadBalancerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type LoadBalancersListResponse = LoadBalancerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type LoadBalancersBeginCreateOrUpdateResponse = LoadBalancer & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancer;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type LoadBalancersBeginUpdateTagsResponse = LoadBalancer & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancer;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type LoadBalancersListAllNextResponse = LoadBalancerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type LoadBalancersListNextResponse = LoadBalancerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type LoadBalancerBackendAddressPoolsListResponse = LoadBalancerBackendAddressPoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerBackendAddressPoolListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type LoadBalancerBackendAddressPoolsGetResponse = BackendAddressPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BackendAddressPool;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type LoadBalancerBackendAddressPoolsListNextResponse = LoadBalancerBackendAddressPoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerBackendAddressPoolListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type LoadBalancerFrontendIPConfigurationsListResponse = LoadBalancerFrontendIPConfigurationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerFrontendIPConfigurationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type LoadBalancerFrontendIPConfigurationsGetResponse = FrontendIPConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FrontendIPConfiguration;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type LoadBalancerFrontendIPConfigurationsListNextResponse = LoadBalancerFrontendIPConfigurationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerFrontendIPConfigurationListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type InboundNatRulesListResponse = InboundNatRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InboundNatRuleListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type InboundNatRulesGetResponse = InboundNatRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InboundNatRule;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type InboundNatRulesCreateOrUpdateResponse = InboundNatRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InboundNatRule;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type InboundNatRulesBeginCreateOrUpdateResponse = InboundNatRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InboundNatRule;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type InboundNatRulesListNextResponse = InboundNatRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InboundNatRuleListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type LoadBalancerLoadBalancingRulesListResponse = LoadBalancerLoadBalancingRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerLoadBalancingRuleListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type LoadBalancerLoadBalancingRulesGetResponse = LoadBalancingRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancingRule;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type LoadBalancerLoadBalancingRulesListNextResponse = LoadBalancerLoadBalancingRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerLoadBalancingRuleListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type LoadBalancerNetworkInterfacesListResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type LoadBalancerNetworkInterfacesListNextResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type LoadBalancerProbesListResponse = LoadBalancerProbeListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerProbeListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type LoadBalancerProbesGetResponse = Probe & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Probe;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type LoadBalancerProbesListNextResponse = LoadBalancerProbeListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerProbeListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualNetworkGatewaysCreateOrUpdateResponse = VirtualNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGateway;
    };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualNetworkGatewaysGetResponse = VirtualNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGateway;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type VirtualNetworkGatewaysUpdateTagsResponse = VirtualNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGateway;
    };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualNetworkGatewaysListResponse = VirtualNetworkGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayListResult;
    };
};

/**
 * Contains response data for the listConnections operation.
 */
export type VirtualNetworkGatewaysListConnectionsResponse = VirtualNetworkGatewayListConnectionsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayListConnectionsResult;
    };
};

/**
 * Contains response data for the reset operation.
 */
export type VirtualNetworkGatewaysResetResponse = VirtualNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGateway;
    };
};

/**
 * Contains response data for the generatevpnclientpackage operation.
 */
export type VirtualNetworkGatewaysGeneratevpnclientpackageResponse = {
  /**
   * The parsed response body.
   */
  body: string;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: string;
    };
};

/**
 * Contains response data for the generateVpnProfile operation.
 */
export type VirtualNetworkGatewaysGenerateVpnProfileResponse = {
  /**
   * The parsed response body.
   */
  body: string;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: string;
    };
};

/**
 * Contains response data for the getVpnProfilePackageUrl operation.
 */
export type VirtualNetworkGatewaysGetVpnProfilePackageUrlResponse = {
  /**
   * The parsed response body.
   */
  body: string;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: string;
    };
};

/**
 * Contains response data for the getBgpPeerStatus operation.
 */
export type VirtualNetworkGatewaysGetBgpPeerStatusResponse = BgpPeerStatusListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BgpPeerStatusListResult;
    };
};

/**
 * Contains response data for the supportedVpnDevices operation.
 */
export type VirtualNetworkGatewaysSupportedVpnDevicesResponse = {
  /**
   * The parsed response body.
   */
  body: string;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: string;
    };
};

/**
 * Contains response data for the getLearnedRoutes operation.
 */
export type VirtualNetworkGatewaysGetLearnedRoutesResponse = GatewayRouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GatewayRouteListResult;
    };
};

/**
 * Contains response data for the getAdvertisedRoutes operation.
 */
export type VirtualNetworkGatewaysGetAdvertisedRoutesResponse = GatewayRouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GatewayRouteListResult;
    };
};

/**
 * Contains response data for the vpnDeviceConfigurationScript operation.
 */
export type VirtualNetworkGatewaysVpnDeviceConfigurationScriptResponse = {
  /**
   * The parsed response body.
   */
  body: string;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: string;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type VirtualNetworkGatewaysBeginCreateOrUpdateResponse = VirtualNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGateway;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type VirtualNetworkGatewaysBeginUpdateTagsResponse = VirtualNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGateway;
    };
};

/**
 * Contains response data for the beginReset operation.
 */
export type VirtualNetworkGatewaysBeginResetResponse = VirtualNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGateway;
    };
};

/**
 * Contains response data for the beginGeneratevpnclientpackage operation.
 */
export type VirtualNetworkGatewaysBeginGeneratevpnclientpackageResponse = {
  /**
   * The parsed response body.
   */
  body: string;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: string;
    };
};

/**
 * Contains response data for the beginGetVpnProfilePackageUrl operation.
 */
export type VirtualNetworkGatewaysBeginGetVpnProfilePackageUrlResponse = {
  /**
   * The parsed response body.
   */
  body: string;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: string;
    };
};

/**
 * Contains response data for the beginGetBgpPeerStatus operation.
 */
export type VirtualNetworkGatewaysBeginGetBgpPeerStatusResponse = BgpPeerStatusListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BgpPeerStatusListResult;
    };
};

/**
 * Contains response data for the beginGetLearnedRoutes operation.
 */
export type VirtualNetworkGatewaysBeginGetLearnedRoutesResponse = GatewayRouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GatewayRouteListResult;
    };
};

/**
 * Contains response data for the beginGetAdvertisedRoutes operation.
 */
export type VirtualNetworkGatewaysBeginGetAdvertisedRoutesResponse = GatewayRouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GatewayRouteListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualNetworkGatewaysListNextResponse = VirtualNetworkGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayListResult;
    };
};

/**
 * Contains response data for the listConnectionsNext operation.
 */
export type VirtualNetworkGatewaysListConnectionsNextResponse = VirtualNetworkGatewayListConnectionsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayListConnectionsResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualNetworkGatewayConnectionsCreateOrUpdateResponse = VirtualNetworkGatewayConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayConnection;
    };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualNetworkGatewayConnectionsGetResponse = VirtualNetworkGatewayConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayConnection;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type VirtualNetworkGatewayConnectionsUpdateTagsResponse = VirtualNetworkGatewayConnectionListEntity & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayConnectionListEntity;
    };
};

/**
 * Contains response data for the setSharedKey operation.
 */
export type VirtualNetworkGatewayConnectionsSetSharedKeyResponse = ConnectionSharedKey & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionSharedKey;
    };
};

/**
 * Contains response data for the getSharedKey operation.
 */
export type VirtualNetworkGatewayConnectionsGetSharedKeyResponse = ConnectionSharedKey & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionSharedKey;
    };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualNetworkGatewayConnectionsListResponse = VirtualNetworkGatewayConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayConnectionListResult;
    };
};

/**
 * Contains response data for the resetSharedKey operation.
 */
export type VirtualNetworkGatewayConnectionsResetSharedKeyResponse = ConnectionResetSharedKey & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionResetSharedKey;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type VirtualNetworkGatewayConnectionsBeginCreateOrUpdateResponse = VirtualNetworkGatewayConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayConnection;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type VirtualNetworkGatewayConnectionsBeginUpdateTagsResponse = VirtualNetworkGatewayConnectionListEntity & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayConnectionListEntity;
    };
};

/**
 * Contains response data for the beginSetSharedKey operation.
 */
export type VirtualNetworkGatewayConnectionsBeginSetSharedKeyResponse = ConnectionSharedKey & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionSharedKey;
    };
};

/**
 * Contains response data for the beginResetSharedKey operation.
 */
export type VirtualNetworkGatewayConnectionsBeginResetSharedKeyResponse = ConnectionResetSharedKey & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionResetSharedKey;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualNetworkGatewayConnectionsListNextResponse = VirtualNetworkGatewayConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayConnectionListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type LocalNetworkGatewaysCreateOrUpdateResponse = LocalNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LocalNetworkGateway;
    };
};

/**
 * Contains response data for the get operation.
 */
export type LocalNetworkGatewaysGetResponse = LocalNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LocalNetworkGateway;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type LocalNetworkGatewaysUpdateTagsResponse = LocalNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LocalNetworkGateway;
    };
};

/**
 * Contains response data for the list operation.
 */
export type LocalNetworkGatewaysListResponse = LocalNetworkGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LocalNetworkGatewayListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type LocalNetworkGatewaysBeginCreateOrUpdateResponse = LocalNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LocalNetworkGateway;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type LocalNetworkGatewaysBeginUpdateTagsResponse = LocalNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LocalNetworkGateway;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type LocalNetworkGatewaysListNextResponse = LocalNetworkGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LocalNetworkGatewayListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type NetworkInterfacesGetResponse = NetworkInterface & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterface;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NetworkInterfacesCreateOrUpdateResponse = NetworkInterface & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterface;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type NetworkInterfacesUpdateTagsResponse = NetworkInterface & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterface;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type NetworkInterfacesListAllResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type NetworkInterfacesListResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the getEffectiveRouteTable operation.
 */
export type NetworkInterfacesGetEffectiveRouteTableResponse = EffectiveRouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EffectiveRouteListResult;
    };
};

/**
 * Contains response data for the listEffectiveNetworkSecurityGroups operation.
 */
export type NetworkInterfacesListEffectiveNetworkSecurityGroupsResponse = EffectiveNetworkSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EffectiveNetworkSecurityGroupListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type NetworkInterfacesBeginCreateOrUpdateResponse = NetworkInterface & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterface;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type NetworkInterfacesBeginUpdateTagsResponse = NetworkInterface & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterface;
    };
};

/**
 * Contains response data for the beginGetEffectiveRouteTable operation.
 */
export type NetworkInterfacesBeginGetEffectiveRouteTableResponse = EffectiveRouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EffectiveRouteListResult;
    };
};

/**
 * Contains response data for the beginListEffectiveNetworkSecurityGroups operation.
 */
export type NetworkInterfacesBeginListEffectiveNetworkSecurityGroupsResponse = EffectiveNetworkSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EffectiveNetworkSecurityGroupListResult;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type NetworkInterfacesListAllNextResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type NetworkInterfacesListNextResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type NetworkInterfaceIPConfigurationsListResponse = NetworkInterfaceIPConfigurationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceIPConfigurationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type NetworkInterfaceIPConfigurationsGetResponse = NetworkInterfaceIPConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceIPConfiguration;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type NetworkInterfaceIPConfigurationsListNextResponse = NetworkInterfaceIPConfigurationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceIPConfigurationListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type NetworkInterfaceLoadBalancersListResponse = NetworkInterfaceLoadBalancerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceLoadBalancerListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type NetworkInterfaceLoadBalancersListNextResponse = NetworkInterfaceLoadBalancerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceLoadBalancerListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type NetworkSecurityGroupsGetResponse = NetworkSecurityGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroup;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NetworkSecurityGroupsCreateOrUpdateResponse = NetworkSecurityGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroup;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type NetworkSecurityGroupsUpdateTagsResponse = NetworkSecurityGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroup;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type NetworkSecurityGroupsListAllResponse = NetworkSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroupListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type NetworkSecurityGroupsListResponse = NetworkSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroupListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type NetworkSecurityGroupsBeginCreateOrUpdateResponse = NetworkSecurityGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroup;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type NetworkSecurityGroupsBeginUpdateTagsResponse = NetworkSecurityGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroup;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type NetworkSecurityGroupsListAllNextResponse = NetworkSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroupListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type NetworkSecurityGroupsListNextResponse = NetworkSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroupListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type SecurityRulesGetResponse = SecurityRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityRule;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SecurityRulesCreateOrUpdateResponse = SecurityRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityRule;
    };
};

/**
 * Contains response data for the list operation.
 */
export type SecurityRulesListResponse = SecurityRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityRuleListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type SecurityRulesBeginCreateOrUpdateResponse = SecurityRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityRule;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type SecurityRulesListNextResponse = SecurityRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityRuleListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type DefaultSecurityRulesListResponse = SecurityRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityRuleListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type DefaultSecurityRulesGetResponse = SecurityRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityRule;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type DefaultSecurityRulesListNextResponse = SecurityRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityRuleListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PublicIPAddressesGetResponse = PublicIPAddress & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddress;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PublicIPAddressesCreateOrUpdateResponse = PublicIPAddress & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddress;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type PublicIPAddressesUpdateTagsResponse = PublicIPAddress & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddress;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type PublicIPAddressesListAllResponse = PublicIPAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddressListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type PublicIPAddressesListResponse = PublicIPAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddressListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type PublicIPAddressesBeginCreateOrUpdateResponse = PublicIPAddress & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddress;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type PublicIPAddressesBeginUpdateTagsResponse = PublicIPAddress & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddress;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type PublicIPAddressesListAllNextResponse = PublicIPAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddressListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type PublicIPAddressesListNextResponse = PublicIPAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddressListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type RouteTablesGetResponse = RouteTable & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTable;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type RouteTablesCreateOrUpdateResponse = RouteTable & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTable;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type RouteTablesUpdateTagsResponse = RouteTable & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTable;
    };
};

/**
 * Contains response data for the list operation.
 */
export type RouteTablesListResponse = RouteTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTableListResult;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type RouteTablesListAllResponse = RouteTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTableListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type RouteTablesBeginCreateOrUpdateResponse = RouteTable & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTable;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type RouteTablesBeginUpdateTagsResponse = RouteTable & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTable;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type RouteTablesListNextResponse = RouteTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTableListResult;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type RouteTablesListAllNextResponse = RouteTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTableListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type RoutesGetResponse = Route & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Route;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type RoutesCreateOrUpdateResponse = Route & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Route;
    };
};

/**
 * Contains response data for the list operation.
 */
export type RoutesListResponse = RouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type RoutesBeginCreateOrUpdateResponse = Route & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Route;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type RoutesListNextResponse = RouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualNetworksGetResponse = VirtualNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetwork;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualNetworksCreateOrUpdateResponse = VirtualNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetwork;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type VirtualNetworksUpdateTagsResponse = VirtualNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetwork;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type VirtualNetworksListAllResponse = VirtualNetworkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualNetworksListResponse = VirtualNetworkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkListResult;
    };
};

/**
 * Contains response data for the checkIPAddressAvailability operation.
 */
export type VirtualNetworksCheckIPAddressAvailabilityResponse = IPAddressAvailabilityResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IPAddressAvailabilityResult;
    };
};

/**
 * Contains response data for the listUsage operation.
 */
export type VirtualNetworksListUsageResponse = VirtualNetworkListUsageResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkListUsageResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type VirtualNetworksBeginCreateOrUpdateResponse = VirtualNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetwork;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type VirtualNetworksBeginUpdateTagsResponse = VirtualNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetwork;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type VirtualNetworksListAllNextResponse = VirtualNetworkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualNetworksListNextResponse = VirtualNetworkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkListResult;
    };
};

/**
 * Contains response data for the listUsageNext operation.
 */
export type VirtualNetworksListUsageNextResponse = VirtualNetworkListUsageResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkListUsageResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type SubnetsGetResponse = Subnet & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Subnet;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SubnetsCreateOrUpdateResponse = Subnet & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Subnet;
    };
};

/**
 * Contains response data for the list operation.
 */
export type SubnetsListResponse = SubnetListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SubnetListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type SubnetsBeginCreateOrUpdateResponse = Subnet & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Subnet;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type SubnetsListNextResponse = SubnetListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SubnetListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualNetworkPeeringsGetResponse = VirtualNetworkPeering & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkPeering;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualNetworkPeeringsCreateOrUpdateResponse = VirtualNetworkPeering & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkPeering;
    };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualNetworkPeeringsListResponse = VirtualNetworkPeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkPeeringListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type VirtualNetworkPeeringsBeginCreateOrUpdateResponse = VirtualNetworkPeering & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkPeering;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualNetworkPeeringsListNextResponse = VirtualNetworkPeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkPeeringListResult;
    };
};
