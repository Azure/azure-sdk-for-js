/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Reference to another subresource. */
export interface SubResource {
  /** Resource ID. */
  id?: string;
}

/** VirtualNetworkGatewaySku details */
export interface VirtualNetworkGatewaySku {
  /** Gateway SKU name. */
  name?: VirtualNetworkGatewaySkuName;
  /** Gateway SKU tier. */
  tier?: VirtualNetworkGatewaySkuTier;
  /** The capacity. */
  capacity?: number;
}

/** VpnClientConfiguration for P2S client. */
export interface VpnClientConfiguration {
  /** The reference of the address space resource which represents Address space for P2S VpnClient. */
  vpnClientAddressPool?: AddressSpace;
  /** VpnClientRootCertificate for virtual network gateway. */
  vpnClientRootCertificates?: VpnClientRootCertificate[];
  /** VpnClientRevokedCertificate for Virtual network gateway. */
  vpnClientRevokedCertificates?: VpnClientRevokedCertificate[];
  /** VpnClientProtocols for Virtual network gateway. */
  vpnClientProtocols?: VpnClientProtocol[];
  /** VpnClientIpsecPolicies for virtual network gateway P2S client. */
  vpnClientIpsecPolicies?: IpsecPolicy[];
  /** The radius server address property of the VirtualNetworkGateway resource for vpn client connection. */
  radiusServerAddress?: string;
  /** The radius secret property of the VirtualNetworkGateway resource for vpn client connection. */
  radiusServerSecret?: string;
}

/** AddressSpace contains an array of IP address ranges that can be used by subnets of the virtual network. */
export interface AddressSpace {
  /** A list of address blocks reserved for this virtual network in CIDR notation. */
  addressPrefixes?: string[];
}

/** An IPSec Policy configuration for a virtual network gateway connection */
export interface IpsecPolicy {
  /** The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for a site to site VPN tunnel. */
  saLifeTimeSeconds: number;
  /** The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for a site to site VPN tunnel. */
  saDataSizeKilobytes: number;
  /** The IPSec encryption algorithm (IKE phase 1). */
  ipsecEncryption: IpsecEncryption;
  /** The IPSec integrity algorithm (IKE phase 1). */
  ipsecIntegrity: IpsecIntegrity;
  /** The IKE encryption algorithm (IKE phase 2). */
  ikeEncryption: IkeEncryption;
  /** The IKE integrity algorithm (IKE phase 2). */
  ikeIntegrity: IkeIntegrity;
  /** The DH Groups used in IKE Phase 1 for initial SA. */
  dhGroup: DhGroup;
  /** The Pfs Groups used in IKE Phase 2 for new child SA. */
  pfsGroup: PfsGroup;
}

/** BGP settings details */
export interface BgpSettings {
  /** The BGP speaker's ASN. */
  asn?: number;
  /** The BGP peering address and BGP identifier of this BGP speaker. */
  bgpPeeringAddress?: string;
  /** The weight added to routes learned from this BGP speaker. */
  peerWeight?: number;
}

/** Common resource representation. */
export interface Resource {
  /** Resource ID. */
  id?: string;
  /**
   * Resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Resource location. */
  location?: string;
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/** Tags object for patch operations. */
export interface TagsObject {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/** Response for the ListVirtualNetworkGateways API service call. */
export interface VirtualNetworkGatewayListResult {
  /** Gets a list of VirtualNetworkGateway resources that exists in a resource group. */
  value?: VirtualNetworkGateway[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Response for the VirtualNetworkGatewayListConnections API service call */
export interface VirtualNetworkGatewayListConnectionsResult {
  /** Gets a list of VirtualNetworkGatewayConnection resources that exists in a resource group. */
  value?: VirtualNetworkGatewayConnectionListEntity[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** A reference to VirtualNetworkGateway or LocalNetworkGateway resource. */
export interface VirtualNetworkConnectionGatewayReference {
  /** The ID of VirtualNetworkGateway or LocalNetworkGateway resource. */
  id: string;
}

/** VirtualNetworkGatewayConnection properties */
export interface TunnelConnectionHealth {
  /**
   * Tunnel name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tunnel?: string;
  /**
   * Virtual network Gateway connection status
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connectionStatus?: VirtualNetworkGatewayConnectionStatus;
  /**
   * The Ingress Bytes Transferred in this connection
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ingressBytesTransferred?: number;
  /**
   * The Egress Bytes Transferred in this connection
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly egressBytesTransferred?: number;
  /**
   * The time at which connection was established in Utc format.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastConnectionEstablishedUtcTime?: string;
}

/** Vpn Client Parameters for package generation */
export interface VpnClientParameters {
  /** VPN client Processor Architecture. Possible values are: 'AMD64' and 'X86'. */
  processorArchitecture?: ProcessorArchitecture;
  /** VPN client Authentication Method. Possible values are: 'EAPTLS' and 'EAPMSCHAPv2'. */
  authenticationMethod?: AuthenticationMethod;
  /** The public certificate data for the radius server authentication certificate as a Base-64 encoded string. Required only if external radius authentication has been configured with EAPTLS authentication. */
  radiusServerAuthCertificate?: string;
  /** A list of client root certificates public certificate data encoded as Base-64 strings. Optional parameter for external radius based authentication with EAPTLS. */
  clientRootCertificates?: string[];
}

/** Response for list BGP peer status API service call */
export interface BgpPeerStatusListResult {
  /** List of BGP peers */
  value?: BgpPeerStatus[];
}

/** BGP peer status details */
export interface BgpPeerStatus {
  /**
   * The virtual network gateway's local address
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly localAddress?: string;
  /**
   * The remote BGP peer
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly neighbor?: string;
  /**
   * The autonomous system number of the remote BGP peer
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly asn?: number;
  /**
   * The BGP peer state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: BgpPeerState;
  /**
   * For how long the peering has been up
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connectedDuration?: string;
  /**
   * The number of routes learned from this peer
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly routesReceived?: number;
  /**
   * The number of BGP messages sent
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly messagesSent?: number;
  /**
   * The number of BGP messages received
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly messagesReceived?: number;
}

/** List of virtual network gateway routes */
export interface GatewayRouteListResult {
  /** List of gateway routes */
  value?: GatewayRoute[];
}

/** Gateway routing details */
export interface GatewayRoute {
  /**
   * The gateway's local address
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly localAddress?: string;
  /**
   * The route's network prefix
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly network?: string;
  /**
   * The route's next hop
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextHop?: string;
  /**
   * The peer this route was learned from
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourcePeer?: string;
  /**
   * The source this route was learned from
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: string;
  /**
   * The route's AS path sequence
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly asPath?: string;
  /**
   * The route's weight
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly weight?: number;
}

/** An IPSec parameters for a virtual network gateway P2S connection. */
export interface VpnClientIPsecParameters {
  /** The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for P2S client. */
  saLifeTimeSeconds: number;
  /** The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for P2S client.. */
  saDataSizeKilobytes: number;
  /** The IPSec encryption algorithm (IKE phase 1). */
  ipsecEncryption: IpsecEncryption;
  /** The IPSec integrity algorithm (IKE phase 1). */
  ipsecIntegrity: IpsecIntegrity;
  /** The IKE encryption algorithm (IKE phase 2). */
  ikeEncryption: IkeEncryption;
  /** The IKE integrity algorithm (IKE phase 2). */
  ikeIntegrity: IkeIntegrity;
  /** The DH Groups used in IKE Phase 1 for initial SA. */
  dhGroup: DhGroup;
  /** The Pfs Groups used in IKE Phase 2 for new child SA. */
  pfsGroup: PfsGroup;
}

/** Vpn device configuration script generation parameters */
export interface VpnDeviceScriptParameters {
  /** The vendor for the vpn device. */
  vendor?: string;
  /** The device family for the vpn device. */
  deviceFamily?: string;
  /** The firmware version for the vpn device. */
  firmwareVersion?: string;
}

/** Response for the ListVirtualNetworkGatewayConnections API service call */
export interface VirtualNetworkGatewayConnectionListResult {
  /** Gets a list of VirtualNetworkGatewayConnection resources that exists in a resource group. */
  value?: VirtualNetworkGatewayConnection[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The virtual network connection reset shared key */
export interface ConnectionResetSharedKey {
  /** The virtual network connection reset shared key length, should between 1 and 128. */
  keyLength: number;
}

/** Response for ListLocalNetworkGateways API service call. */
export interface LocalNetworkGatewayListResult {
  /** A list of local network gateways that exists in a resource group. */
  value?: LocalNetworkGateway[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** SKU of a load balancer */
export interface LoadBalancerSku {
  /** Name of a load balancer SKU. */
  name?: LoadBalancerSkuName;
}

/** Identifies the service being brought into the virtual network. */
export interface EndpointService {
  /** A unique identifier of the service being referenced by the interface endpoint. */
  id?: string;
}

/** Backend address of an application gateway. */
export interface ApplicationGatewayBackendAddress {
  /** Fully qualified domain name (FQDN). */
  fqdn?: string;
  /** IP address */
  ipAddress?: string;
}

/** SKU of a public IP address */
export interface PublicIPAddressSku {
  /** Name of a public IP address SKU. */
  name?: PublicIPAddressSkuName;
}

/** Contains FQDN of the DNS record associated with the public IP address */
export interface PublicIPAddressDnsSettings {
  /** Gets or sets the Domain name label.The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system. */
  domainNameLabel?: string;
  /** Gets the FQDN, Fully qualified domain name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone. */
  fqdn?: string;
  /** Gets or Sets the Reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN. */
  reverseFqdn?: string;
}

/** Contains the DDoS protection settings of the public IP. */
export interface DdosSettings {
  /** The DDoS custom policy associated with the public IP. */
  ddosCustomPolicy?: SubResource;
  /** The DDoS protection policy customizability of the public IP. Only standard coverage will have the ability to be customized. */
  protectionCoverage?: DdosSettingsProtectionCoverage;
}

/** Contains the IpTag associated with the object */
export interface IpTag {
  /** Gets or sets the ipTag type: Example FirstPartyUsage. */
  ipTagType?: string;
  /** Gets or sets value of the IpTag associated with the public IP. Example SQL, Storage etc */
  tag?: string;
}

/** DNS settings of a network interface. */
export interface NetworkInterfaceDnsSettings {
  /** List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection. */
  dnsServers?: string[];
  /** If the VM that uses this NIC is part of an Availability Set, then this list will have the union of all DNS servers from all NICs that are part of the Availability Set. This property is what is configured on each of those VMs. */
  appliedDnsServers?: string[];
  /** Relative DNS name for this NIC used for internal communications between VMs in the same virtual network. */
  internalDnsNameLabel?: string;
  /** Fully qualified DNS name supporting internal communications between VMs in the same virtual network. */
  internalFqdn?: string;
  /** Even if internalDnsNameLabel is not specified, a DNS entry is created for the primary NIC of the VM. This DNS name can be constructed by concatenating the VM name with the value of internalDomainNameSuffix. */
  internalDomainNameSuffix?: string;
}

/** The service endpoint properties. */
export interface ServiceEndpointPropertiesFormat {
  /** The type of the endpoint service. */
  service?: string;
  /** A list of locations. */
  locations?: string[];
  /** The provisioning state of the resource. */
  provisioningState?: string;
}

/** Response for ListLoadBalancers API service call. */
export interface LoadBalancerListResult {
  /** A list of load balancers in a resource group. */
  value?: LoadBalancer[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Response for ListBackendAddressPool API service call. */
export interface LoadBalancerBackendAddressPoolListResult {
  /** A list of backend address pools in a load balancer. */
  value?: BackendAddressPool[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Response for ListFrontendIPConfiguration API service call. */
export interface LoadBalancerFrontendIPConfigurationListResult {
  /** A list of frontend IP configurations in a load balancer. */
  value?: FrontendIPConfiguration[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Response for ListInboundNatRule API service call. */
export interface InboundNatRuleListResult {
  /** A list of inbound nat rules in a load balancer. */
  value?: InboundNatRule[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Response for ListLoadBalancingRule API service call. */
export interface LoadBalancerLoadBalancingRuleListResult {
  /** A list of load balancing rules in a load balancer. */
  value?: LoadBalancingRule[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Response for ListOutboundRule API service call. */
export interface LoadBalancerOutboundRuleListResult {
  /** A list of outbound rules in a load balancer. */
  value?: OutboundRule[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Response for the ListNetworkInterface API service call. */
export interface NetworkInterfaceListResult {
  /** A list of network interfaces in a resource group. */
  value?: NetworkInterface[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Response for ListProbe API service call. */
export interface LoadBalancerProbeListResult {
  /** A list of probes in a load balancer. */
  value?: Probe[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Response for list effective route API service call. */
export interface EffectiveRouteListResult {
  /** A list of effective routes. */
  value?: EffectiveRoute[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Effective Route */
export interface EffectiveRoute {
  /** The name of the user defined route. This is optional. */
  name?: string;
  /** Who created the route. Possible values are: 'Unknown', 'User', 'VirtualNetworkGateway', and 'Default'. */
  source?: EffectiveRouteSource;
  /** The value of effective route. Possible values are: 'Active' and 'Invalid'. */
  state?: EffectiveRouteState;
  /** The address prefixes of the effective routes in CIDR notation. */
  addressPrefix?: string[];
  /** The IP address of the next hop of the effective route. */
  nextHopIpAddress?: string[];
  /** The type of Azure hop the packet should be sent to. Possible values are: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'. */
  nextHopType?: RouteNextHopType;
}

/** Response for list effective network security groups API service call. */
export interface EffectiveNetworkSecurityGroupListResult {
  /** A list of effective network security groups. */
  value?: EffectiveNetworkSecurityGroup[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Effective network security group. */
export interface EffectiveNetworkSecurityGroup {
  /** The ID of network security group that is applied. */
  networkSecurityGroup?: SubResource;
  /** Associated resources. */
  association?: EffectiveNetworkSecurityGroupAssociation;
  /** A collection of effective security rules. */
  effectiveSecurityRules?: EffectiveNetworkSecurityRule[];
  /** Mapping of tags to list of IP Addresses included within the tag. */
  tagMap?: string;
}

/** The effective network security group association. */
export interface EffectiveNetworkSecurityGroupAssociation {
  /** The ID of the subnet if assigned. */
  subnet?: SubResource;
  /** The ID of the network interface if assigned. */
  networkInterface?: SubResource;
}

/** Effective network security rules. */
export interface EffectiveNetworkSecurityRule {
  /** The name of the security rule specified by the user (if created by the user). */
  name?: string;
  /** The network protocol this rule applies to. Possible values are: 'Tcp', 'Udp', and 'All'. */
  protocol?: EffectiveSecurityRuleProtocol;
  /** The source port or range. */
  sourcePortRange?: string;
  /** The destination port or range. */
  destinationPortRange?: string;
  /** The source port ranges. Expected values include a single integer between 0 and 65535, a range using '-' as separator (e.g. 100-400), or an asterisk (*) */
  sourcePortRanges?: string[];
  /** The destination port ranges. Expected values include a single integer between 0 and 65535, a range using '-' as separator (e.g. 100-400), or an asterisk (*) */
  destinationPortRanges?: string[];
  /** The source address prefix. */
  sourceAddressPrefix?: string;
  /** The destination address prefix. */
  destinationAddressPrefix?: string;
  /** The source address prefixes. Expected values include CIDR IP ranges, Default Tags (VirtualNetwork, AzureLoadBalancer, Internet), System Tags, and the asterisk (*). */
  sourceAddressPrefixes?: string[];
  /** The destination address prefixes. Expected values include CIDR IP ranges, Default Tags (VirtualNetwork, AzureLoadBalancer, Internet), System Tags, and the asterisk (*). */
  destinationAddressPrefixes?: string[];
  /** The expanded source address prefix. */
  expandedSourceAddressPrefix?: string[];
  /** Expanded destination address prefix. */
  expandedDestinationAddressPrefix?: string[];
  /** Whether network traffic is allowed or denied. Possible values are: 'Allow' and 'Deny'. */
  access?: SecurityRuleAccess;
  /** The priority of the rule. */
  priority?: number;
  /** The direction of the rule. Possible values are: 'Inbound and Outbound'. */
  direction?: SecurityRuleDirection;
}

/** Response for list ip configurations API service call. */
export interface NetworkInterfaceIPConfigurationListResult {
  /** A list of ip configurations. */
  value?: NetworkInterfaceIPConfiguration[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Response for list ip configurations API service call. */
export interface NetworkInterfaceLoadBalancerListResult {
  /** A list of load balancers. */
  value?: LoadBalancer[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Response for list tap configurations API service call. */
export interface NetworkInterfaceTapConfigurationListResult {
  /** A list of tap configurations. */
  value?: NetworkInterfaceTapConfiguration[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Response for ListNetworkSecurityGroups API service call. */
export interface NetworkSecurityGroupListResult {
  /** A list of NetworkSecurityGroup resources. */
  value?: NetworkSecurityGroup[];
  /** The URL to get the next set of results. */
  nextLink?: string;
}

/** Response for ListSecurityRule API service call. Retrieves all security rules that belongs to a network security group. */
export interface SecurityRuleListResult {
  /** The security rules in a network security group. */
  value?: SecurityRule[];
  /** The URL to get the next set of results. */
  nextLink?: string;
}

/** Result of the request to list Network operations. It contains a list of operations and a URL link to get the next set of results. */
export interface OperationListResult {
  /** List of Network operations supported by the Network resource provider. */
  value?: Operation[];
  /** URL to get the next set of operation list results if there are any. */
  nextLink?: string;
}

/** Network REST API operation definition. */
export interface Operation {
  /** Operation name: {provider}/{resource}/{operation} */
  name?: string;
  /** Display metadata associated with the operation. */
  display?: OperationDisplay;
  /** Origin of the operation. */
  origin?: string;
  /** Specification of the service. */
  serviceSpecification?: OperationPropertiesFormatServiceSpecification;
}

/** Display metadata associated with the operation. */
export interface OperationDisplay {
  /** Service provider: Microsoft Network. */
  provider?: string;
  /** Resource on which the operation is performed. */
  resource?: string;
  /** Type of the operation: get, read, delete, etc. */
  operation?: string;
  /** Description of the operation. */
  description?: string;
}

/** Specification of the service. */
export interface OperationPropertiesFormatServiceSpecification {
  /** Operation service specification. */
  metricSpecifications?: MetricSpecification[];
  /** Operation log specification. */
  logSpecifications?: LogSpecification[];
}

/** Description of metrics specification. */
export interface MetricSpecification {
  /** The name of the metric. */
  name?: string;
  /** The display name of the metric. */
  displayName?: string;
  /** The description of the metric. */
  displayDescription?: string;
  /** Units the metric to be displayed in. */
  unit?: string;
  /** The aggregation type. */
  aggregationType?: string;
  /** List of availability. */
  availabilities?: Availability[];
  /** Whether regional MDM account enabled. */
  enableRegionalMdmAccount?: boolean;
  /** Whether gaps would be filled with zeros. */
  fillGapWithZero?: boolean;
  /** Pattern for the filter of the metric. */
  metricFilterPattern?: string;
  /** List of dimensions. */
  dimensions?: Dimension[];
  /** Whether the metric is internal. */
  isInternal?: boolean;
  /** The source MDM account. */
  sourceMdmAccount?: string;
  /** The source MDM namespace. */
  sourceMdmNamespace?: string;
  /** The resource Id dimension name override. */
  resourceIdDimensionNameOverride?: string;
}

/** Availability of the metric. */
export interface Availability {
  /** The time grain of the availability. */
  timeGrain?: string;
  /** The retention of the availability. */
  retention?: string;
  /** Duration of the availability blob. */
  blobDuration?: string;
}

/** Dimension of the metric. */
export interface Dimension {
  /** The name of the dimension. */
  name?: string;
  /** The display name of the dimension. */
  displayName?: string;
  /** The internal name of the dimension. */
  internalName?: string;
}

/** Description of logging specification. */
export interface LogSpecification {
  /** The name of the specification. */
  name?: string;
  /** The display name of the specification. */
  displayName?: string;
  /** Duration of the blob. */
  blobDuration?: string;
}

/** Response for ListPublicIpAddresses API service call. */
export interface PublicIPAddressListResult {
  /** A list of public IP addresses that exists in a resource group. */
  value?: PublicIPAddress[];
  /** The URL to get the next set of results. */
  nextLink?: string;
}

/** Response for the ListRouteTable API service call. */
export interface RouteTableListResult {
  /** Gets a list of route tables in a resource group. */
  value?: RouteTable[];
  /** The URL to get the next set of results. */
  nextLink?: string;
}

/** Response for the ListRoute API service call */
export interface RouteListResult {
  /** Gets a list of routes in a resource group. */
  value?: Route[];
  /** The URL to get the next set of results. */
  nextLink?: string;
}

/** DhcpOptions contains an array of DNS servers available to VMs deployed in the virtual network. Standard DHCP option for a subnet overrides VNET DHCP options. */
export interface DhcpOptions {
  /** The list of DNS servers IP addresses. */
  dnsServers?: string[];
}

/** Response for the ListVirtualNetworks API service call. */
export interface VirtualNetworkListResult {
  /** Gets a list of VirtualNetwork resources in a resource group. */
  value?: VirtualNetwork[];
  /** The URL to get the next set of results. */
  nextLink?: string;
}

/** Response for ListSubnets API service callRetrieves all subnet that belongs to a virtual network */
export interface SubnetListResult {
  /** The subnets in a virtual network. */
  value?: Subnet[];
  /** The URL to get the next set of results. */
  nextLink?: string;
}

/** Response for ListSubnets API service call. Retrieves all subnets that belong to a virtual network. */
export interface VirtualNetworkPeeringListResult {
  /** The peerings in a virtual network. */
  value?: VirtualNetworkPeering[];
  /** The URL to get the next set of results. */
  nextLink?: string;
}

/** Response for CheckIPAddressAvailability API service call */
export interface IPAddressAvailabilityResult {
  /** Private IP address availability. */
  available?: boolean;
  /** Contains other available private IP addresses if the asked for address is taken. */
  availableIPAddresses?: string[];
}

/** Response for the virtual networks GetUsage API service call. */
export interface VirtualNetworkListUsageResult {
  /**
   * VirtualNetwork usage stats.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: VirtualNetworkUsage[];
  /** The URL to get the next set of results. */
  nextLink?: string;
}

/** Usage details for subnet. */
export interface VirtualNetworkUsage {
  /**
   * Indicates number of IPs used from the Subnet.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly currentValue?: number;
  /**
   * Subnet identifier.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Indicates the size of the subnet.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly limit?: number;
  /**
   * The name containing common and localized value for usage.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: VirtualNetworkUsageName;
  /**
   * Usage units. Returns 'Count'
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly unit?: string;
}

/** Usage strings container. */
export interface VirtualNetworkUsageName {
  /**
   * Localized subnet size and usage string.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly localizedValue?: string;
  /**
   * Subnet size and usage string.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: string;
}

export interface ErrorDetails {
  code?: string;
  target?: string;
  message?: string;
}

export interface ErrorModel {
  code?: string;
  message?: string;
  target?: string;
  details?: ErrorDetails[];
  innerError?: string;
}

/** The response body contains the status of the specified asynchronous operation, indicating whether it has succeeded, is in progress, or has failed. Note that this status is distinct from the HTTP status code returned for the Get Operation Status operation itself. If the asynchronous operation succeeded, the response body includes the HTTP status code for the successful request. If the asynchronous operation failed, the response body includes the HTTP status code for the failed request and error information regarding the failure. */
export interface AzureAsyncOperationResult {
  /** Status of the Azure async operation. Possible values are: 'InProgress', 'Succeeded', and 'Failed'. */
  status?: NetworkOperationStatus;
  error?: ErrorModel;
}

/** Identity for the resource. */
export interface ManagedServiceIdentity {
  /**
   * The principal id of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant id of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine. */
  type?: ResourceIdentityType;
  /** The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'. */
  userAssignedIdentities?: {
    [propertyName: string]: Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties;
  };
}

export interface Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties {
  /**
   * The principal id of user assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client id of user assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** IP configuration for virtual network gateway */
export type VirtualNetworkGatewayIPConfiguration = SubResource & {
  /** The name of the resource that is unique within a resource group. This name can be used to access the resource. */
  name?: string;
  /** A unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /** The private IP allocation method. Possible values are: 'Static' and 'Dynamic'. */
  privateIPAllocationMethod?: IPAllocationMethod;
  /** The reference of the subnet resource. */
  subnet?: SubResource;
  /** The reference of the public IP resource. */
  publicIPAddress?: SubResource;
  /**
   * The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
};

/** VPN client root certificate of virtual network gateway */
export type VpnClientRootCertificate = SubResource & {
  /** The name of the resource that is unique within a resource group. This name can be used to access the resource. */
  name?: string;
  /** A unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /** The certificate public data. */
  publicCertData: string;
  /**
   * The provisioning state of the VPN client root certificate resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
};

/** VPN client revoked certificate of virtual network gateway. */
export type VpnClientRevokedCertificate = SubResource & {
  /** The name of the resource that is unique within a resource group. This name can be used to access the resource. */
  name?: string;
  /** A unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /** The revoked VPN client certificate thumbprint. */
  thumbprint?: string;
  /**
   * The provisioning state of the VPN client revoked certificate resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
};

/** Response for GetConnectionSharedKey API service call */
export type ConnectionSharedKey = SubResource & {
  /** The virtual network connection shared key value. */
  value: string;
};

/** Network security rule. */
export type SecurityRule = SubResource & {
  /** The name of the resource that is unique within a resource group. This name can be used to access the resource. */
  name?: string;
  /** A unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /** A description for this rule. Restricted to 140 chars. */
  description?: string;
  /** Network protocol this rule applies to. Possible values are 'Tcp', 'Udp', and '*'. */
  protocol?: SecurityRuleProtocol;
  /** The source port or range. Integer or range between 0 and 65535. Asterisks '*' can also be used to match all ports. */
  sourcePortRange?: string;
  /** The destination port or range. Integer or range between 0 and 65535. Asterisks '*' can also be used to match all ports. */
  destinationPortRange?: string;
  /** The CIDR or source IP range. Asterisks '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. If this is an ingress rule, specifies where network traffic originates from. */
  sourceAddressPrefix?: string;
  /** The CIDR or source IP ranges. */
  sourceAddressPrefixes?: string[];
  /** The application security group specified as source. */
  sourceApplicationSecurityGroups?: ApplicationSecurityGroup[];
  /** The destination address prefix. CIDR or destination IP range. Asterisks '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. */
  destinationAddressPrefix?: string;
  /** The destination address prefixes. CIDR or destination IP ranges. */
  destinationAddressPrefixes?: string[];
  /** The application security group specified as destination. */
  destinationApplicationSecurityGroups?: ApplicationSecurityGroup[];
  /** The source port ranges. */
  sourcePortRanges?: string[];
  /** The destination port ranges. */
  destinationPortRanges?: string[];
  /** The network traffic is allowed or denied. Possible values are: 'Allow' and 'Deny'. */
  access?: SecurityRuleAccess;
  /** The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule. */
  priority?: number;
  /** The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic. Possible values are: 'Inbound' and 'Outbound'. */
  direction?: SecurityRuleDirection;
  /** The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'. */
  provisioningState?: string;
};

/** Tap configuration in a Network Interface */
export type NetworkInterfaceTapConfiguration = SubResource & {
  /** The name of the resource that is unique within a resource group. This name can be used to access the resource. */
  name?: string;
  /** A unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /**
   * Sub Resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The reference of the Virtual Network Tap resource. */
  virtualNetworkTap?: VirtualNetworkTap;
  /**
   * The provisioning state of the network interface tap configuration. Possible values are: 'Updating', 'Deleting', and 'Failed'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
};

/** Backend Address Pool of an application gateway. */
export type ApplicationGatewayBackendAddressPool = SubResource & {
  /** Name of the backend address pool that is unique within an Application Gateway. */
  name?: string;
  /** A unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /** Type of the resource. */
  type?: string;
  /** Collection of references to IPs defined in network interfaces. */
  backendIPConfigurations?: NetworkInterfaceIPConfiguration[];
  /** Backend addresses */
  backendAddresses?: ApplicationGatewayBackendAddress[];
  /** Provisioning state of the backend address pool resource. Possible values are: 'Updating', 'Deleting', and 'Failed'. */
  provisioningState?: string;
};

/** Pool of backend IP addresses. */
export type BackendAddressPool = SubResource & {
  /** Gets name of the resource that is unique within a resource group. This name can be used to access the resource. */
  name?: string;
  /** A unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /**
   * Gets collection of references to IP addresses defined in network interfaces.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly backendIPConfigurations?: NetworkInterfaceIPConfiguration[];
  /**
   * Gets load balancing rules that use this backend address pool.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly loadBalancingRules?: SubResource[];
  /**
   * Gets outbound rules that use this backend address pool.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly outboundRule?: SubResource;
  /**
   * Gets outbound rules that use this backend address pool.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly outboundRules?: SubResource[];
  /** Get provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'. */
  provisioningState?: string;
};

/** Inbound NAT rule of the load balancer. */
export type InboundNatRule = SubResource & {
  /** Gets name of the resource that is unique within a resource group. This name can be used to access the resource. */
  name?: string;
  /** A unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /** A reference to frontend IP addresses. */
  frontendIPConfiguration?: SubResource;
  /**
   * A reference to a private IP address defined on a network interface of a VM. Traffic sent to the frontend port of each of the frontend IP configurations is forwarded to the backend IP.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly backendIPConfiguration?: NetworkInterfaceIPConfiguration;
  /** The transport protocol for the endpoint. Possible values are 'Udp' or 'Tcp' or 'All'. */
  protocol?: TransportProtocol;
  /** The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values range from 1 to 65534. */
  frontendPort?: number;
  /** The port used for the internal endpoint. Acceptable values range from 1 to 65535. */
  backendPort?: number;
  /** The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP. */
  idleTimeoutInMinutes?: number;
  /** Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint. */
  enableFloatingIP?: boolean;
  /** Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP. */
  enableTcpReset?: boolean;
  /** Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'. */
  provisioningState?: string;
};

/** IP configuration */
export type IPConfiguration = SubResource & {
  /** The name of the resource that is unique within a resource group. This name can be used to access the resource. */
  name?: string;
  /** A unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /** The private IP address of the IP configuration. */
  privateIPAddress?: string;
  /** The private IP allocation method. Possible values are 'Static' and 'Dynamic'. */
  privateIPAllocationMethod?: IPAllocationMethod;
  /** The reference of the subnet resource. */
  subnet?: Subnet;
  /** The reference of the public IP resource. */
  publicIPAddress?: PublicIPAddress;
  /** Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'. */
  provisioningState?: string;
};

/** IPConfiguration in a network interface. */
export type NetworkInterfaceIPConfiguration = SubResource & {
  /** The name of the resource that is unique within a resource group. This name can be used to access the resource. */
  name?: string;
  /** A unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /** The reference to Virtual Network Taps. */
  virtualNetworkTaps?: VirtualNetworkTap[];
  /** The reference of ApplicationGatewayBackendAddressPool resource. */
  applicationGatewayBackendAddressPools?: ApplicationGatewayBackendAddressPool[];
  /** The reference of LoadBalancerBackendAddressPool resource. */
  loadBalancerBackendAddressPools?: BackendAddressPool[];
  /** A list of references of LoadBalancerInboundNatRules. */
  loadBalancerInboundNatRules?: InboundNatRule[];
  /** Private IP address of the IP configuration. */
  privateIPAddress?: string;
  /** Defines how a private IP address is assigned. Possible values are: 'Static' and 'Dynamic'. */
  privateIPAllocationMethod?: IPAllocationMethod;
  /** Available from Api-Version 2016-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'. */
  privateIPAddressVersion?: IPVersion;
  /** Subnet bound to the IP configuration. */
  subnet?: Subnet;
  /** Gets whether this is a primary customer address on the network interface. */
  primary?: boolean;
  /** Public IP address bound to the IP configuration. */
  publicIPAddress?: PublicIPAddress;
  /** Application security groups in which the IP configuration is included. */
  applicationSecurityGroups?: ApplicationSecurityGroup[];
  /** The provisioning state of the network interface IP configuration. Possible values are: 'Updating', 'Deleting', and 'Failed'. */
  provisioningState?: string;
};

/** Route resource */
export type Route = SubResource & {
  /** The name of the resource that is unique within a resource group. This name can be used to access the resource. */
  name?: string;
  /** A unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /** The destination CIDR to which the route applies. */
  addressPrefix?: string;
  /** The type of Azure hop the packet should be sent to. Possible values are: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None' */
  nextHopType?: RouteNextHopType;
  /** The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance. */
  nextHopIpAddress?: string;
  /** The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', and 'Failed'. */
  provisioningState?: string;
};

/** Service Endpoint policy definitions. */
export type ServiceEndpointPolicyDefinition = SubResource & {
  /** The name of the resource that is unique within a resource group. This name can be used to access the resource. */
  name?: string;
  /** A unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /** A description for this rule. Restricted to 140 chars. */
  description?: string;
  /** service endpoint name. */
  service?: string;
  /** A list of service resources. */
  serviceResources?: string[];
  /**
   * The provisioning state of the service end point policy definition. Possible values are: 'Updating', 'Deleting', and 'Failed'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
};

/** IP configuration profile child resource. */
export type IPConfigurationProfile = SubResource & {
  /** The name of the resource. This name can be used to access the resource. */
  name?: string;
  /**
   * Sub Resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** A unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /** The reference of the subnet resource to create a container network interface ip configuration. */
  subnet?: Subnet;
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
};

/** ResourceNavigationLink resource. */
export type ResourceNavigationLink = SubResource & {
  /** Name of the resource that is unique within a resource group. This name can be used to access the resource. */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly etag?: string;
  /** Resource type of the linked resource. */
  linkedResourceType?: string;
  /** Link to the external resource */
  link?: string;
  /**
   * Provisioning state of the ResourceNavigationLink resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
};

/** ServiceAssociationLink resource. */
export type ServiceAssociationLink = SubResource & {
  /** Name of the resource that is unique within a resource group. This name can be used to access the resource. */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly etag?: string;
  /** Resource type of the linked resource. */
  linkedResourceType?: string;
  /** Link to the external resource. */
  link?: string;
  /**
   * Provisioning state of the ServiceAssociationLink resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
};

/** Details the service to which the subnet is delegated. */
export type Delegation = SubResource & {
  /** The name of the resource that is unique within a subnet. This name can be used to access the resource. */
  name?: string;
  /** A unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /** The name of the service to whom the subnet should be delegated (e.g. Microsoft.Sql/servers) */
  serviceName?: string;
  /** Describes the actions permitted to the service upon delegation */
  actions?: string[];
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
};

/** Subnet in a virtual network resource. */
export type Subnet = SubResource & {
  /** The name of the resource that is unique within a resource group. This name can be used to access the resource. */
  name?: string;
  /** A unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /** The address prefix for the subnet. */
  addressPrefix?: string;
  /** List of  address prefixes for the subnet. */
  addressPrefixes?: string[];
  /** The reference of the NetworkSecurityGroup resource. */
  networkSecurityGroup?: NetworkSecurityGroup;
  /** The reference of the RouteTable resource. */
  routeTable?: RouteTable;
  /** An array of service endpoints. */
  serviceEndpoints?: ServiceEndpointPropertiesFormat[];
  /** An array of service endpoint policies. */
  serviceEndpointPolicies?: ServiceEndpointPolicy[];
  /**
   * An array of references to interface endpoints
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly interfaceEndpoints?: InterfaceEndpoint[];
  /**
   * Gets an array of references to the network interface IP configurations using subnet.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipConfigurations?: IPConfiguration[];
  /**
   * Array of IP configuration profiles which reference this subnet.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipConfigurationProfiles?: IPConfigurationProfile[];
  /** Gets an array of references to the external resources using subnet. */
  resourceNavigationLinks?: ResourceNavigationLink[];
  /** Gets an array of references to services injecting into this subnet. */
  serviceAssociationLinks?: ServiceAssociationLink[];
  /** Gets an array of references to the delegations on the subnet. */
  delegations?: Delegation[];
  /**
   * A read-only string identifying the intention of use for this subnet based on delegations and other user-defined properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly purpose?: string;
  /** The provisioning state of the resource. */
  provisioningState?: string;
};

/** Frontend IP address of the load balancer. */
export type FrontendIPConfiguration = SubResource & {
  /** The name of the resource that is unique within a resource group. This name can be used to access the resource. */
  name?: string;
  /** A unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /** A list of availability zones denoting the IP allocated for the resource needs to come from. */
  zones?: string[];
  /**
   * Read only. Inbound rules URIs that use this frontend IP.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly inboundNatRules?: SubResource[];
  /**
   * Read only. Inbound pools URIs that use this frontend IP.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly inboundNatPools?: SubResource[];
  /**
   * Read only. Outbound rules URIs that use this frontend IP.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly outboundRules?: SubResource[];
  /**
   * Gets load balancing rules URIs that use this frontend IP.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly loadBalancingRules?: SubResource[];
  /** The private IP address of the IP configuration. */
  privateIPAddress?: string;
  /** The Private IP allocation method. Possible values are: 'Static' and 'Dynamic'. */
  privateIPAllocationMethod?: IPAllocationMethod;
  /** The reference of the subnet resource. */
  subnet?: Subnet;
  /** The reference of the Public IP resource. */
  publicIPAddress?: PublicIPAddress;
  /** The reference of the Public IP Prefix resource. */
  publicIPPrefix?: SubResource;
  /** Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'. */
  provisioningState?: string;
};

/** A load balancing rule for a load balancer. */
export type LoadBalancingRule = SubResource & {
  /** The name of the resource that is unique within a resource group. This name can be used to access the resource. */
  name?: string;
  /** A unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /** A reference to frontend IP addresses. */
  frontendIPConfiguration?: SubResource;
  /** A reference to a pool of DIPs. Inbound traffic is randomly load balanced across IPs in the backend IPs. */
  backendAddressPool?: SubResource;
  /** The reference of the load balancer probe used by the load balancing rule. */
  probe?: SubResource;
  /** The transport protocol for the endpoint. Possible values are 'Udp' or 'Tcp' or 'All'. */
  protocol?: TransportProtocol;
  /** The load distribution policy for this rule. Possible values are 'Default', 'SourceIP', and 'SourceIPProtocol'. */
  loadDistribution?: LoadDistribution;
  /** The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values are between 0 and 65534. Note that value 0 enables "Any Port" */
  frontendPort?: number;
  /** The port used for internal connections on the endpoint. Acceptable values are between 0 and 65535. Note that value 0 enables "Any Port" */
  backendPort?: number;
  /** The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP. */
  idleTimeoutInMinutes?: number;
  /** Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint. */
  enableFloatingIP?: boolean;
  /** Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP. */
  enableTcpReset?: boolean;
  /** Configures SNAT for the VMs in the backend pool to use the publicIP address specified in the frontend of the load balancing rule. */
  disableOutboundSnat?: boolean;
  /** Gets the provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'. */
  provisioningState?: string;
};

/** A load balancer probe. */
export type Probe = SubResource & {
  /** Gets name of the resource that is unique within a resource group. This name can be used to access the resource. */
  name?: string;
  /** A unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /**
   * The load balancer rules that use this probe.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly loadBalancingRules?: SubResource[];
  /** The protocol of the end point. Possible values are: 'Http', 'Tcp', or 'Https'. If 'Tcp' is specified, a received ACK is required for the probe to be successful. If 'Http' or 'Https' is specified, a 200 OK response from the specifies URI is required for the probe to be successful. */
  protocol?: ProbeProtocol;
  /** The port for communicating the probe. Possible values range from 1 to 65535, inclusive. */
  port?: number;
  /** The interval, in seconds, for how frequently to probe the endpoint for health status. Typically, the interval is slightly less than half the allocated timeout period (in seconds) which allows two full probes before taking the instance out of rotation. The default value is 15, the minimum value is 5. */
  intervalInSeconds?: number;
  /** The number of probes where if no response, will result in stopping further traffic from being delivered to the endpoint. This values allows endpoints to be taken out of rotation faster or slower than the typical times used in Azure. */
  numberOfProbes?: number;
  /** The URI used for requesting health status from the VM. Path is required if a protocol is set to http. Otherwise, it is not allowed. There is no default value. */
  requestPath?: string;
  /** Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'. */
  provisioningState?: string;
};

/** Inbound NAT pool of the load balancer. */
export type InboundNatPool = SubResource & {
  /** The name of the resource that is unique within a resource group. This name can be used to access the resource. */
  name?: string;
  /** A unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /** A reference to frontend IP addresses. */
  frontendIPConfiguration?: SubResource;
  /** The transport protocol for the endpoint. Possible values are 'Udp' or 'Tcp' or 'All'. */
  protocol?: TransportProtocol;
  /** The first port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values range between 1 and 65534. */
  frontendPortRangeStart?: number;
  /** The last port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values range between 1 and 65535. */
  frontendPortRangeEnd?: number;
  /** The port used for internal connections on the endpoint. Acceptable values are between 1 and 65535. */
  backendPort?: number;
  /** The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP. */
  idleTimeoutInMinutes?: number;
  /** Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint. */
  enableFloatingIP?: boolean;
  /** Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP. */
  enableTcpReset?: boolean;
  /** Gets the provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'. */
  provisioningState?: string;
};

/** Outbound rule of the load balancer. */
export type OutboundRule = SubResource & {
  /** The name of the resource that is unique within a resource group. This name can be used to access the resource. */
  name?: string;
  /** A unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /** The number of outbound ports to be used for NAT. */
  allocatedOutboundPorts?: number;
  /** The Frontend IP addresses of the load balancer. */
  frontendIPConfigurations?: SubResource[];
  /** A reference to a pool of DIPs. Outbound traffic is randomly load balanced across IPs in the backend IPs. */
  backendAddressPool?: SubResource;
  /** Gets the provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'. */
  provisioningState?: string;
  /** Protocol - TCP, UDP or All */
  protocol?: OutboundRulePropertiesFormatProtocol;
  /** Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP. */
  enableTcpReset?: boolean;
  /** The timeout for the TCP idle connection */
  idleTimeoutInMinutes?: number;
};

/** Peerings in a virtual network resource. */
export type VirtualNetworkPeering = SubResource & {
  /** The name of the resource that is unique within a resource group. This name can be used to access the resource. */
  name?: string;
  /** A unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /** Whether the VMs in the linked virtual network space would be able to access all the VMs in local Virtual network space. */
  allowVirtualNetworkAccess?: boolean;
  /** Whether the forwarded traffic from the VMs in the remote virtual network will be allowed/disallowed. */
  allowForwardedTraffic?: boolean;
  /** If gateway links can be used in remote virtual networking to link to this virtual network. */
  allowGatewayTransit?: boolean;
  /** If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. */
  useRemoteGateways?: boolean;
  /** The reference of the remote virtual network. The remote virtual network can be in the same or different region (preview). See here to register for the preview and learn more (https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-create-peering). */
  remoteVirtualNetwork?: SubResource;
  /** The reference of the remote virtual network address space. */
  remoteAddressSpace?: AddressSpace;
  /** The status of the virtual network peering. Possible values are 'Initiated', 'Connected', and 'Disconnected'. */
  peeringState?: VirtualNetworkPeeringState;
  /** The provisioning state of the resource. */
  provisioningState?: string;
};

/** A common class for general resource information */
export type VirtualNetworkGateway = Resource & {
  /** Gets a unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /** IP configurations for virtual network gateway. */
  ipConfigurations?: VirtualNetworkGatewayIPConfiguration[];
  /** The type of this virtual network gateway. Possible values are: 'Vpn' and 'ExpressRoute'. */
  gatewayType?: VirtualNetworkGatewayType;
  /** The type of this virtual network gateway. Possible values are: 'PolicyBased' and 'RouteBased'. */
  vpnType?: VpnType;
  /** Whether BGP is enabled for this virtual network gateway or not. */
  enableBgp?: boolean;
  /** ActiveActive flag */
  active?: boolean;
  /** The reference of the LocalNetworkGateway resource which represents local network site having default routes. Assign Null value in case of removing existing default site setting. */
  gatewayDefaultSite?: SubResource;
  /** The reference of the VirtualNetworkGatewaySku resource which represents the SKU selected for Virtual network gateway. */
  sku?: VirtualNetworkGatewaySku;
  /** The reference of the VpnClientConfiguration resource which represents the P2S VpnClient configurations. */
  vpnClientConfiguration?: VpnClientConfiguration;
  /** Virtual network gateway's BGP speaker settings. */
  bgpSettings?: BgpSettings;
  /** The resource GUID property of the VirtualNetworkGateway resource. */
  resourceGuid?: string;
  /**
   * The provisioning state of the VirtualNetworkGateway resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
};

/** A common class for general resource information */
export type VirtualNetworkGatewayConnectionListEntity = Resource & {
  /** Gets a unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /** The authorizationKey. */
  authorizationKey?: string;
  /** The reference to virtual network gateway resource. */
  virtualNetworkGateway1: VirtualNetworkConnectionGatewayReference;
  /** The reference to virtual network gateway resource. */
  virtualNetworkGateway2?: VirtualNetworkConnectionGatewayReference;
  /** The reference to local network gateway resource. */
  localNetworkGateway2?: VirtualNetworkConnectionGatewayReference;
  /** Gateway connection type. Possible values are: 'Ipsec','Vnet2Vnet','ExpressRoute', and 'VPNClient. */
  connectionType: VirtualNetworkGatewayConnectionType;
  /** Connection protocol used for this connection */
  connectionProtocol?: VirtualNetworkGatewayConnectionProtocol;
  /** The routing weight. */
  routingWeight?: number;
  /** The IPSec shared key. */
  sharedKey?: string;
  /**
   * Virtual network Gateway connection status. Possible values are 'Unknown', 'Connecting', 'Connected' and 'NotConnected'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connectionStatus?: VirtualNetworkGatewayConnectionStatus;
  /**
   * Collection of all tunnels' connection health status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tunnelConnectionStatus?: TunnelConnectionHealth[];
  /**
   * The egress bytes transferred in this connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly egressBytesTransferred?: number;
  /**
   * The ingress bytes transferred in this connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ingressBytesTransferred?: number;
  /** The reference to peerings resource. */
  peer?: SubResource;
  /** EnableBgp flag */
  enableBgp?: boolean;
  /** Enable policy-based traffic selectors. */
  usePolicyBasedTrafficSelectors?: boolean;
  /** The IPSec Policies to be considered by this connection. */
  ipsecPolicies?: IpsecPolicy[];
  /** The resource GUID property of the VirtualNetworkGatewayConnection resource. */
  resourceGuid?: string;
  /**
   * The provisioning state of the VirtualNetworkGatewayConnection resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** Bypass ExpressRoute Gateway for data forwarding */
  expressRouteGatewayBypass?: boolean;
};

/** A common class for general resource information */
export type LocalNetworkGateway = Resource & {
  /** A unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /** Local network site address space. */
  localNetworkAddressSpace?: AddressSpace;
  /** IP address of local network gateway. */
  gatewayIpAddress?: string;
  /** Local network gateway's BGP speaker settings. */
  bgpSettings?: BgpSettings;
  /** The resource GUID property of the LocalNetworkGateway resource. */
  resourceGuid?: string;
  /**
   * The provisioning state of the LocalNetworkGateway resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
};

/** A common class for general resource information */
export type VirtualNetworkGatewayConnection = Resource & {
  /** Gets a unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /** The authorizationKey. */
  authorizationKey?: string;
  /** The reference to virtual network gateway resource. */
  virtualNetworkGateway1: VirtualNetworkGateway;
  /** The reference to virtual network gateway resource. */
  virtualNetworkGateway2?: VirtualNetworkGateway;
  /** The reference to local network gateway resource. */
  localNetworkGateway2?: LocalNetworkGateway;
  /** Gateway connection type. Possible values are: 'Ipsec','Vnet2Vnet','ExpressRoute', and 'VPNClient. */
  connectionType: VirtualNetworkGatewayConnectionType;
  /** Connection protocol used for this connection */
  connectionProtocol?: VirtualNetworkGatewayConnectionProtocol;
  /** The routing weight. */
  routingWeight?: number;
  /** The IPSec shared key. */
  sharedKey?: string;
  /**
   * Virtual network Gateway connection status. Possible values are 'Unknown', 'Connecting', 'Connected' and 'NotConnected'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connectionStatus?: VirtualNetworkGatewayConnectionStatus;
  /**
   * Collection of all tunnels' connection health status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tunnelConnectionStatus?: TunnelConnectionHealth[];
  /**
   * The egress bytes transferred in this connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly egressBytesTransferred?: number;
  /**
   * The ingress bytes transferred in this connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ingressBytesTransferred?: number;
  /** The reference to peerings resource. */
  peer?: SubResource;
  /** EnableBgp flag */
  enableBgp?: boolean;
  /** Enable policy-based traffic selectors. */
  usePolicyBasedTrafficSelectors?: boolean;
  /** The IPSec Policies to be considered by this connection. */
  ipsecPolicies?: IpsecPolicy[];
  /** The resource GUID property of the VirtualNetworkGatewayConnection resource. */
  resourceGuid?: string;
  /**
   * The provisioning state of the VirtualNetworkGatewayConnection resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** Bypass ExpressRoute Gateway for data forwarding */
  expressRouteGatewayBypass?: boolean;
};

/** An application security group in a resource group. */
export type ApplicationSecurityGroup = Resource & {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly etag?: string;
  /**
   * The resource GUID property of the application security group resource. It uniquely identifies a resource, even if the user changes its name or migrate the resource across subscriptions or resource groups.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceGuid?: string;
  /**
   * The provisioning state of the application security group resource. Possible values are: 'Succeeded', 'Updating', 'Deleting', and 'Failed'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
};

/** Interface endpoint resource. */
export type InterfaceEndpoint = Resource & {
  /** Gets a unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /** A first-party service's FQDN that is mapped to the private IP allocated via this interface endpoint. */
  fqdn?: string;
  /** A reference to the service being brought into the virtual network. */
  endpointService?: EndpointService;
  /** The ID of the subnet from which the private IP will be allocated. */
  subnet?: Subnet;
  /**
   * Gets an array of references to the network interfaces created for this interface endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkInterfaces?: NetworkInterface[];
  /**
   * A read-only property that identifies who created this interface endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly owner?: string;
  /**
   * The provisioning state of the interface endpoint. Possible values are: 'Updating', 'Deleting', and 'Failed'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
};

/** Virtual Network Tap resource */
export type VirtualNetworkTap = Resource & {
  /** Gets a unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /**
   * Specifies the list of resource IDs for the network interface IP configuration that needs to be tapped.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkInterfaceTapConfigurations?: NetworkInterfaceTapConfiguration[];
  /**
   * The resourceGuid property of the virtual network tap.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceGuid?: string;
  /**
   * The provisioning state of the virtual network tap. Possible values are: 'Updating', 'Deleting', and 'Failed'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** The reference to the private IP Address of the collector nic that will receive the tap */
  destinationNetworkInterfaceIPConfiguration?: NetworkInterfaceIPConfiguration;
  /** The reference to the private IP address on the internal Load Balancer that will receive the tap */
  destinationLoadBalancerFrontEndIPConfiguration?: FrontendIPConfiguration;
  /** The VXLAN destination port that will receive the tapped traffic. */
  destinationPort?: number;
};

/** Public IP address resource. */
export type PublicIPAddress = Resource & {
  /** The public IP address SKU. */
  sku?: PublicIPAddressSku;
  /** A unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /** A list of availability zones denoting the IP allocated for the resource needs to come from. */
  zones?: string[];
  /** The public IP allocation method. Possible values are: 'Static' and 'Dynamic'. */
  publicIPAllocationMethod?: IPAllocationMethod;
  /** The public IP address version. Possible values are: 'IPv4' and 'IPv6'. */
  publicIPAddressVersion?: IPVersion;
  /**
   * The IP configuration associated with the public IP address.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipConfiguration?: IPConfiguration;
  /** The FQDN of the DNS record associated with the public IP address. */
  dnsSettings?: PublicIPAddressDnsSettings;
  /** The DDoS protection custom policy associated with the public IP address. */
  ddosSettings?: DdosSettings;
  /** The list of tags associated with the public IP address. */
  ipTags?: IpTag[];
  /** The IP address associated with the public IP address resource. */
  ipAddress?: string;
  /** The Public IP Prefix this Public IP Address should be allocated from. */
  publicIPPrefix?: SubResource;
  /** The idle timeout of the public IP address. */
  idleTimeoutInMinutes?: number;
  /** The resource GUID property of the public IP resource. */
  resourceGuid?: string;
  /** The provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'. */
  provisioningState?: string;
};

/** A network interface in a resource group. */
export type NetworkInterface = Resource & {
  /** A unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /**
   * The reference of a virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly virtualMachine?: SubResource;
  /** The reference of the NetworkSecurityGroup resource. */
  networkSecurityGroup?: NetworkSecurityGroup;
  /**
   * A reference to the interface endpoint to which the network interface is linked.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly interfaceEndpoint?: InterfaceEndpoint;
  /** A list of IPConfigurations of the network interface. */
  ipConfigurations?: NetworkInterfaceIPConfiguration[];
  /** A list of TapConfigurations of the network interface. */
  tapConfigurations?: NetworkInterfaceTapConfiguration[];
  /** The DNS settings in network interface. */
  dnsSettings?: NetworkInterfaceDnsSettings;
  /** The MAC address of the network interface. */
  macAddress?: string;
  /** Gets whether this is a primary network interface on a virtual machine. */
  primary?: boolean;
  /** If the network interface is accelerated networking enabled. */
  enableAcceleratedNetworking?: boolean;
  /** Indicates whether IP forwarding is enabled on this network interface. */
  enableIPForwarding?: boolean;
  /**
   * A list of references to linked BareMetal resources
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hostedWorkloads?: string[];
  /** The resource GUID property of the network interface resource. */
  resourceGuid?: string;
  /** The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'. */
  provisioningState?: string;
};

/** NetworkSecurityGroup resource. */
export type NetworkSecurityGroup = Resource & {
  /** A unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /** A collection of security rules of the network security group. */
  securityRules?: SecurityRule[];
  /** The default security rules of network security group. */
  defaultSecurityRules?: SecurityRule[];
  /**
   * A collection of references to network interfaces.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkInterfaces?: NetworkInterface[];
  /**
   * A collection of references to subnets.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly subnets?: Subnet[];
  /** The resource GUID property of the network security group resource. */
  resourceGuid?: string;
  /** The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'. */
  provisioningState?: string;
};

/** Route table resource. */
export type RouteTable = Resource & {
  /** Gets a unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /** Collection of routes contained within a route table. */
  routes?: Route[];
  /**
   * A collection of references to subnets.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly subnets?: Subnet[];
  /** Gets or sets whether to disable the routes learned by BGP on that route table. True means disable. */
  disableBgpRoutePropagation?: boolean;
  /** The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', and 'Failed'. */
  provisioningState?: string;
};

/** Service End point policy resource. */
export type ServiceEndpointPolicy = Resource & {
  /** A unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /** A collection of service endpoint policy definitions of the service endpoint policy. */
  serviceEndpointPolicyDefinitions?: ServiceEndpointPolicyDefinition[];
  /**
   * A collection of references to subnets.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly subnets?: Subnet[];
  /**
   * The resource GUID property of the service endpoint policy resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceGuid?: string;
  /**
   * The provisioning state of the service endpoint policy. Possible values are: 'Updating', 'Deleting', and 'Failed'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
};

/** LoadBalancer resource */
export type LoadBalancer = Resource & {
  /** The load balancer SKU. */
  sku?: LoadBalancerSku;
  /** A unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /** Object representing the frontend IPs to be used for the load balancer */
  frontendIPConfigurations?: FrontendIPConfiguration[];
  /** Collection of backend address pools used by a load balancer */
  backendAddressPools?: BackendAddressPool[];
  /** Object collection representing the load balancing rules Gets the provisioning */
  loadBalancingRules?: LoadBalancingRule[];
  /** Collection of probe objects used in the load balancer */
  probes?: Probe[];
  /** Collection of inbound NAT Rules used by a load balancer. Defining inbound NAT rules on your load balancer is mutually exclusive with defining an inbound NAT pool. Inbound NAT pools are referenced from virtual machine scale sets. NICs that are associated with individual virtual machines cannot reference an Inbound NAT pool. They have to reference individual inbound NAT rules. */
  inboundNatRules?: InboundNatRule[];
  /** Defines an external port range for inbound NAT to a single backend port on NICs associated with a load balancer. Inbound NAT rules are created automatically for each NIC associated with the Load Balancer using an external port from this range. Defining an Inbound NAT pool on your Load Balancer is mutually exclusive with defining inbound Nat rules. Inbound NAT pools are referenced from virtual machine scale sets. NICs that are associated with individual virtual machines cannot reference an inbound NAT pool. They have to reference individual inbound NAT rules. */
  inboundNatPools?: InboundNatPool[];
  /** The outbound rules. */
  outboundRules?: OutboundRule[];
  /** The resource GUID property of the load balancer resource. */
  resourceGuid?: string;
  /** Gets the provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'. */
  provisioningState?: string;
};

/** Virtual Network resource. */
export type VirtualNetwork = Resource & {
  /** Gets a unique read-only string that changes whenever the resource is updated. */
  etag?: string;
  /** The AddressSpace that contains an array of IP address ranges that can be used by subnets. */
  addressSpace?: AddressSpace;
  /** The dhcpOptions that contains an array of DNS servers available to VMs deployed in the virtual network. */
  dhcpOptions?: DhcpOptions;
  /** A list of subnets in a Virtual Network. */
  subnets?: Subnet[];
  /** A list of peerings in a Virtual Network. */
  virtualNetworkPeerings?: VirtualNetworkPeering[];
  /** The resourceGuid property of the Virtual Network resource. */
  resourceGuid?: string;
  /** The provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'. */
  provisioningState?: string;
  /** Indicates if DDoS protection is enabled for all the protected resources in the virtual network. It requires a DDoS protection plan associated with the resource. */
  enableDdosProtection?: boolean;
  /** Indicates if VM protection is enabled for all the subnets in the virtual network. */
  enableVmProtection?: boolean;
  /** The DDoS protection plan associated with the virtual network. */
  ddosProtectionPlan?: SubResource;
};

/** Known values of {@link IPAllocationMethod} that the service accepts. */
export enum KnownIPAllocationMethod {
  Static = "Static",
  Dynamic = "Dynamic"
}

/**
 * Defines values for IPAllocationMethod. \
 * {@link KnownIPAllocationMethod} can be used interchangeably with IPAllocationMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Static** \
 * **Dynamic**
 */
export type IPAllocationMethod = string;

/** Known values of {@link VirtualNetworkGatewayType} that the service accepts. */
export enum KnownVirtualNetworkGatewayType {
  Vpn = "Vpn",
  ExpressRoute = "ExpressRoute"
}

/**
 * Defines values for VirtualNetworkGatewayType. \
 * {@link KnownVirtualNetworkGatewayType} can be used interchangeably with VirtualNetworkGatewayType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Vpn** \
 * **ExpressRoute**
 */
export type VirtualNetworkGatewayType = string;

/** Known values of {@link VpnType} that the service accepts. */
export enum KnownVpnType {
  PolicyBased = "PolicyBased",
  RouteBased = "RouteBased"
}

/**
 * Defines values for VpnType. \
 * {@link KnownVpnType} can be used interchangeably with VpnType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PolicyBased** \
 * **RouteBased**
 */
export type VpnType = string;

/** Known values of {@link VirtualNetworkGatewaySkuName} that the service accepts. */
export enum KnownVirtualNetworkGatewaySkuName {
  Basic = "Basic",
  HighPerformance = "HighPerformance",
  Standard = "Standard",
  UltraPerformance = "UltraPerformance",
  VpnGw1 = "VpnGw1",
  VpnGw2 = "VpnGw2",
  VpnGw3 = "VpnGw3",
  VpnGw1AZ = "VpnGw1AZ",
  VpnGw2AZ = "VpnGw2AZ",
  VpnGw3AZ = "VpnGw3AZ",
  ErGw1AZ = "ErGw1AZ",
  ErGw2AZ = "ErGw2AZ",
  ErGw3AZ = "ErGw3AZ"
}

/**
 * Defines values for VirtualNetworkGatewaySkuName. \
 * {@link KnownVirtualNetworkGatewaySkuName} can be used interchangeably with VirtualNetworkGatewaySkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **HighPerformance** \
 * **Standard** \
 * **UltraPerformance** \
 * **VpnGw1** \
 * **VpnGw2** \
 * **VpnGw3** \
 * **VpnGw1AZ** \
 * **VpnGw2AZ** \
 * **VpnGw3AZ** \
 * **ErGw1AZ** \
 * **ErGw2AZ** \
 * **ErGw3AZ**
 */
export type VirtualNetworkGatewaySkuName = string;

/** Known values of {@link VirtualNetworkGatewaySkuTier} that the service accepts. */
export enum KnownVirtualNetworkGatewaySkuTier {
  Basic = "Basic",
  HighPerformance = "HighPerformance",
  Standard = "Standard",
  UltraPerformance = "UltraPerformance",
  VpnGw1 = "VpnGw1",
  VpnGw2 = "VpnGw2",
  VpnGw3 = "VpnGw3",
  VpnGw1AZ = "VpnGw1AZ",
  VpnGw2AZ = "VpnGw2AZ",
  VpnGw3AZ = "VpnGw3AZ",
  ErGw1AZ = "ErGw1AZ",
  ErGw2AZ = "ErGw2AZ",
  ErGw3AZ = "ErGw3AZ"
}

/**
 * Defines values for VirtualNetworkGatewaySkuTier. \
 * {@link KnownVirtualNetworkGatewaySkuTier} can be used interchangeably with VirtualNetworkGatewaySkuTier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **HighPerformance** \
 * **Standard** \
 * **UltraPerformance** \
 * **VpnGw1** \
 * **VpnGw2** \
 * **VpnGw3** \
 * **VpnGw1AZ** \
 * **VpnGw2AZ** \
 * **VpnGw3AZ** \
 * **ErGw1AZ** \
 * **ErGw2AZ** \
 * **ErGw3AZ**
 */
export type VirtualNetworkGatewaySkuTier = string;

/** Known values of {@link VpnClientProtocol} that the service accepts. */
export enum KnownVpnClientProtocol {
  IkeV2 = "IkeV2",
  Sstp = "SSTP",
  OpenVPN = "OpenVPN"
}

/**
 * Defines values for VpnClientProtocol. \
 * {@link KnownVpnClientProtocol} can be used interchangeably with VpnClientProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IkeV2** \
 * **SSTP** \
 * **OpenVPN**
 */
export type VpnClientProtocol = string;

/** Known values of {@link IpsecEncryption} that the service accepts. */
export enum KnownIpsecEncryption {
  None = "None",
  DES = "DES",
  DES3 = "DES3",
  AES128 = "AES128",
  AES192 = "AES192",
  AES256 = "AES256",
  Gcmaes128 = "GCMAES128",
  Gcmaes192 = "GCMAES192",
  Gcmaes256 = "GCMAES256"
}

/**
 * Defines values for IpsecEncryption. \
 * {@link KnownIpsecEncryption} can be used interchangeably with IpsecEncryption,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **DES** \
 * **DES3** \
 * **AES128** \
 * **AES192** \
 * **AES256** \
 * **GCMAES128** \
 * **GCMAES192** \
 * **GCMAES256**
 */
export type IpsecEncryption = string;

/** Known values of {@link IpsecIntegrity} that the service accepts. */
export enum KnownIpsecIntegrity {
  MD5 = "MD5",
  SHA1 = "SHA1",
  SHA256 = "SHA256",
  Gcmaes128 = "GCMAES128",
  Gcmaes192 = "GCMAES192",
  Gcmaes256 = "GCMAES256"
}

/**
 * Defines values for IpsecIntegrity. \
 * {@link KnownIpsecIntegrity} can be used interchangeably with IpsecIntegrity,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **MD5** \
 * **SHA1** \
 * **SHA256** \
 * **GCMAES128** \
 * **GCMAES192** \
 * **GCMAES256**
 */
export type IpsecIntegrity = string;

/** Known values of {@link IkeEncryption} that the service accepts. */
export enum KnownIkeEncryption {
  DES = "DES",
  DES3 = "DES3",
  AES128 = "AES128",
  AES192 = "AES192",
  AES256 = "AES256",
  Gcmaes256 = "GCMAES256",
  Gcmaes128 = "GCMAES128"
}

/**
 * Defines values for IkeEncryption. \
 * {@link KnownIkeEncryption} can be used interchangeably with IkeEncryption,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DES** \
 * **DES3** \
 * **AES128** \
 * **AES192** \
 * **AES256** \
 * **GCMAES256** \
 * **GCMAES128**
 */
export type IkeEncryption = string;

/** Known values of {@link IkeIntegrity} that the service accepts. */
export enum KnownIkeIntegrity {
  MD5 = "MD5",
  SHA1 = "SHA1",
  SHA256 = "SHA256",
  SHA384 = "SHA384",
  Gcmaes256 = "GCMAES256",
  Gcmaes128 = "GCMAES128"
}

/**
 * Defines values for IkeIntegrity. \
 * {@link KnownIkeIntegrity} can be used interchangeably with IkeIntegrity,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **MD5** \
 * **SHA1** \
 * **SHA256** \
 * **SHA384** \
 * **GCMAES256** \
 * **GCMAES128**
 */
export type IkeIntegrity = string;

/** Known values of {@link DhGroup} that the service accepts. */
export enum KnownDhGroup {
  None = "None",
  DHGroup1 = "DHGroup1",
  DHGroup2 = "DHGroup2",
  DHGroup14 = "DHGroup14",
  DHGroup2048 = "DHGroup2048",
  ECP256 = "ECP256",
  ECP384 = "ECP384",
  DHGroup24 = "DHGroup24"
}

/**
 * Defines values for DhGroup. \
 * {@link KnownDhGroup} can be used interchangeably with DhGroup,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **DHGroup1** \
 * **DHGroup2** \
 * **DHGroup14** \
 * **DHGroup2048** \
 * **ECP256** \
 * **ECP384** \
 * **DHGroup24**
 */
export type DhGroup = string;

/** Known values of {@link PfsGroup} that the service accepts. */
export enum KnownPfsGroup {
  None = "None",
  PFS1 = "PFS1",
  PFS2 = "PFS2",
  PFS2048 = "PFS2048",
  ECP256 = "ECP256",
  ECP384 = "ECP384",
  PFS24 = "PFS24",
  PFS14 = "PFS14",
  Pfsmm = "PFSMM"
}

/**
 * Defines values for PfsGroup. \
 * {@link KnownPfsGroup} can be used interchangeably with PfsGroup,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **PFS1** \
 * **PFS2** \
 * **PFS2048** \
 * **ECP256** \
 * **ECP384** \
 * **PFS24** \
 * **PFS14** \
 * **PFSMM**
 */
export type PfsGroup = string;

/** Known values of {@link VirtualNetworkGatewayConnectionType} that the service accepts. */
export enum KnownVirtualNetworkGatewayConnectionType {
  IPsec = "IPsec",
  Vnet2Vnet = "Vnet2Vnet",
  ExpressRoute = "ExpressRoute",
  VPNClient = "VPNClient"
}

/**
 * Defines values for VirtualNetworkGatewayConnectionType. \
 * {@link KnownVirtualNetworkGatewayConnectionType} can be used interchangeably with VirtualNetworkGatewayConnectionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IPsec** \
 * **Vnet2Vnet** \
 * **ExpressRoute** \
 * **VPNClient**
 */
export type VirtualNetworkGatewayConnectionType = string;

/** Known values of {@link VirtualNetworkGatewayConnectionProtocol} that the service accepts. */
export enum KnownVirtualNetworkGatewayConnectionProtocol {
  IKEv2 = "IKEv2",
  IKEv1 = "IKEv1"
}

/**
 * Defines values for VirtualNetworkGatewayConnectionProtocol. \
 * {@link KnownVirtualNetworkGatewayConnectionProtocol} can be used interchangeably with VirtualNetworkGatewayConnectionProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IKEv2** \
 * **IKEv1**
 */
export type VirtualNetworkGatewayConnectionProtocol = string;

/** Known values of {@link VirtualNetworkGatewayConnectionStatus} that the service accepts. */
export enum KnownVirtualNetworkGatewayConnectionStatus {
  Unknown = "Unknown",
  Connecting = "Connecting",
  Connected = "Connected",
  NotConnected = "NotConnected"
}

/**
 * Defines values for VirtualNetworkGatewayConnectionStatus. \
 * {@link KnownVirtualNetworkGatewayConnectionStatus} can be used interchangeably with VirtualNetworkGatewayConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Connecting** \
 * **Connected** \
 * **NotConnected**
 */
export type VirtualNetworkGatewayConnectionStatus = string;

/** Known values of {@link ProcessorArchitecture} that the service accepts. */
export enum KnownProcessorArchitecture {
  Amd64 = "Amd64",
  X86 = "X86"
}

/**
 * Defines values for ProcessorArchitecture. \
 * {@link KnownProcessorArchitecture} can be used interchangeably with ProcessorArchitecture,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Amd64** \
 * **X86**
 */
export type ProcessorArchitecture = string;

/** Known values of {@link AuthenticationMethod} that the service accepts. */
export enum KnownAuthenticationMethod {
  Eaptls = "EAPTLS",
  EapmschaPv2 = "EAPMSCHAPv2"
}

/**
 * Defines values for AuthenticationMethod. \
 * {@link KnownAuthenticationMethod} can be used interchangeably with AuthenticationMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EAPTLS** \
 * **EAPMSCHAPv2**
 */
export type AuthenticationMethod = string;

/** Known values of {@link BgpPeerState} that the service accepts. */
export enum KnownBgpPeerState {
  Unknown = "Unknown",
  Stopped = "Stopped",
  Idle = "Idle",
  Connecting = "Connecting",
  Connected = "Connected"
}

/**
 * Defines values for BgpPeerState. \
 * {@link KnownBgpPeerState} can be used interchangeably with BgpPeerState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Stopped** \
 * **Idle** \
 * **Connecting** \
 * **Connected**
 */
export type BgpPeerState = string;

/** Known values of {@link LoadBalancerSkuName} that the service accepts. */
export enum KnownLoadBalancerSkuName {
  Basic = "Basic",
  Standard = "Standard"
}

/**
 * Defines values for LoadBalancerSkuName. \
 * {@link KnownLoadBalancerSkuName} can be used interchangeably with LoadBalancerSkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **Standard**
 */
export type LoadBalancerSkuName = string;

/** Known values of {@link SecurityRuleProtocol} that the service accepts. */
export enum KnownSecurityRuleProtocol {
  Tcp = "Tcp",
  Udp = "Udp",
  Asterisk = "*"
}

/**
 * Defines values for SecurityRuleProtocol. \
 * {@link KnownSecurityRuleProtocol} can be used interchangeably with SecurityRuleProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Tcp** \
 * **Udp** \
 * *****
 */
export type SecurityRuleProtocol = string;

/** Known values of {@link SecurityRuleAccess} that the service accepts. */
export enum KnownSecurityRuleAccess {
  Allow = "Allow",
  Deny = "Deny"
}

/**
 * Defines values for SecurityRuleAccess. \
 * {@link KnownSecurityRuleAccess} can be used interchangeably with SecurityRuleAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Allow** \
 * **Deny**
 */
export type SecurityRuleAccess = string;

/** Known values of {@link SecurityRuleDirection} that the service accepts. */
export enum KnownSecurityRuleDirection {
  Inbound = "Inbound",
  Outbound = "Outbound"
}

/**
 * Defines values for SecurityRuleDirection. \
 * {@link KnownSecurityRuleDirection} can be used interchangeably with SecurityRuleDirection,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Inbound** \
 * **Outbound**
 */
export type SecurityRuleDirection = string;

/** Known values of {@link TransportProtocol} that the service accepts. */
export enum KnownTransportProtocol {
  Udp = "Udp",
  Tcp = "Tcp",
  All = "All"
}

/**
 * Defines values for TransportProtocol. \
 * {@link KnownTransportProtocol} can be used interchangeably with TransportProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Udp** \
 * **Tcp** \
 * **All**
 */
export type TransportProtocol = string;

/** Known values of {@link IPVersion} that the service accepts. */
export enum KnownIPVersion {
  IPv4 = "IPv4",
  IPv6 = "IPv6"
}

/**
 * Defines values for IPVersion. \
 * {@link KnownIPVersion} can be used interchangeably with IPVersion,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IPv4** \
 * **IPv6**
 */
export type IPVersion = string;

/** Known values of {@link PublicIPAddressSkuName} that the service accepts. */
export enum KnownPublicIPAddressSkuName {
  Basic = "Basic",
  Standard = "Standard"
}

/**
 * Defines values for PublicIPAddressSkuName. \
 * {@link KnownPublicIPAddressSkuName} can be used interchangeably with PublicIPAddressSkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **Standard**
 */
export type PublicIPAddressSkuName = string;

/** Known values of {@link DdosSettingsProtectionCoverage} that the service accepts. */
export enum KnownDdosSettingsProtectionCoverage {
  Basic = "Basic",
  Standard = "Standard"
}

/**
 * Defines values for DdosSettingsProtectionCoverage. \
 * {@link KnownDdosSettingsProtectionCoverage} can be used interchangeably with DdosSettingsProtectionCoverage,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **Standard**
 */
export type DdosSettingsProtectionCoverage = string;

/** Known values of {@link RouteNextHopType} that the service accepts. */
export enum KnownRouteNextHopType {
  VirtualNetworkGateway = "VirtualNetworkGateway",
  VnetLocal = "VnetLocal",
  Internet = "Internet",
  VirtualAppliance = "VirtualAppliance",
  None = "None"
}

/**
 * Defines values for RouteNextHopType. \
 * {@link KnownRouteNextHopType} can be used interchangeably with RouteNextHopType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **VirtualNetworkGateway** \
 * **VnetLocal** \
 * **Internet** \
 * **VirtualAppliance** \
 * **None**
 */
export type RouteNextHopType = string;

/** Known values of {@link LoadDistribution} that the service accepts. */
export enum KnownLoadDistribution {
  Default = "Default",
  SourceIP = "SourceIP",
  SourceIPProtocol = "SourceIPProtocol"
}

/**
 * Defines values for LoadDistribution. \
 * {@link KnownLoadDistribution} can be used interchangeably with LoadDistribution,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default** \
 * **SourceIP** \
 * **SourceIPProtocol**
 */
export type LoadDistribution = string;

/** Known values of {@link ProbeProtocol} that the service accepts. */
export enum KnownProbeProtocol {
  Http = "Http",
  Tcp = "Tcp",
  Https = "Https"
}

/**
 * Defines values for ProbeProtocol. \
 * {@link KnownProbeProtocol} can be used interchangeably with ProbeProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Http** \
 * **Tcp** \
 * **Https**
 */
export type ProbeProtocol = string;

/** Known values of {@link OutboundRulePropertiesFormatProtocol} that the service accepts. */
export enum KnownOutboundRulePropertiesFormatProtocol {
  Tcp = "Tcp",
  Udp = "Udp",
  All = "All"
}

/**
 * Defines values for OutboundRulePropertiesFormatProtocol. \
 * {@link KnownOutboundRulePropertiesFormatProtocol} can be used interchangeably with OutboundRulePropertiesFormatProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Tcp** \
 * **Udp** \
 * **All**
 */
export type OutboundRulePropertiesFormatProtocol = string;

/** Known values of {@link EffectiveRouteSource} that the service accepts. */
export enum KnownEffectiveRouteSource {
  Unknown = "Unknown",
  User = "User",
  VirtualNetworkGateway = "VirtualNetworkGateway",
  Default = "Default"
}

/**
 * Defines values for EffectiveRouteSource. \
 * {@link KnownEffectiveRouteSource} can be used interchangeably with EffectiveRouteSource,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **User** \
 * **VirtualNetworkGateway** \
 * **Default**
 */
export type EffectiveRouteSource = string;

/** Known values of {@link EffectiveRouteState} that the service accepts. */
export enum KnownEffectiveRouteState {
  Active = "Active",
  Invalid = "Invalid"
}

/**
 * Defines values for EffectiveRouteState. \
 * {@link KnownEffectiveRouteState} can be used interchangeably with EffectiveRouteState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Active** \
 * **Invalid**
 */
export type EffectiveRouteState = string;

/** Known values of {@link EffectiveSecurityRuleProtocol} that the service accepts. */
export enum KnownEffectiveSecurityRuleProtocol {
  Tcp = "Tcp",
  Udp = "Udp",
  All = "All"
}

/**
 * Defines values for EffectiveSecurityRuleProtocol. \
 * {@link KnownEffectiveSecurityRuleProtocol} can be used interchangeably with EffectiveSecurityRuleProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Tcp** \
 * **Udp** \
 * **All**
 */
export type EffectiveSecurityRuleProtocol = string;

/** Known values of {@link VirtualNetworkPeeringState} that the service accepts. */
export enum KnownVirtualNetworkPeeringState {
  Initiated = "Initiated",
  Connected = "Connected",
  Disconnected = "Disconnected"
}

/**
 * Defines values for VirtualNetworkPeeringState. \
 * {@link KnownVirtualNetworkPeeringState} can be used interchangeably with VirtualNetworkPeeringState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Initiated** \
 * **Connected** \
 * **Disconnected**
 */
export type VirtualNetworkPeeringState = string;

/** Known values of {@link NetworkOperationStatus} that the service accepts. */
export enum KnownNetworkOperationStatus {
  InProgress = "InProgress",
  Succeeded = "Succeeded",
  Failed = "Failed"
}

/**
 * Defines values for NetworkOperationStatus. \
 * {@link KnownNetworkOperationStatus} can be used interchangeably with NetworkOperationStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InProgress** \
 * **Succeeded** \
 * **Failed**
 */
export type NetworkOperationStatus = string;
/** Defines values for ResourceIdentityType. */
export type ResourceIdentityType =
  | "SystemAssigned"
  | "UserAssigned"
  | "SystemAssigned, UserAssigned"
  | "None";

/** Optional parameters. */
export interface VirtualNetworkGatewaysCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type VirtualNetworkGatewaysCreateOrUpdateResponse = VirtualNetworkGateway;

/** Optional parameters. */
export interface VirtualNetworkGatewaysGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VirtualNetworkGatewaysGetResponse = VirtualNetworkGateway;

/** Optional parameters. */
export interface VirtualNetworkGatewaysDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualNetworkGatewaysUpdateTagsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateTags operation. */
export type VirtualNetworkGatewaysUpdateTagsResponse = VirtualNetworkGateway;

/** Optional parameters. */
export interface VirtualNetworkGatewaysListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type VirtualNetworkGatewaysListResponse = VirtualNetworkGatewayListResult;

/** Optional parameters. */
export interface VirtualNetworkGatewaysListConnectionsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listConnections operation. */
export type VirtualNetworkGatewaysListConnectionsResponse = VirtualNetworkGatewayListConnectionsResult;

/** Optional parameters. */
export interface VirtualNetworkGatewaysResetOptionalParams
  extends coreClient.OperationOptions {
  /** Virtual network gateway vip address supplied to the begin reset of the active-active feature enabled gateway. */
  gatewayVip?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the reset operation. */
export type VirtualNetworkGatewaysResetResponse = VirtualNetworkGateway;

/** Optional parameters. */
export interface VirtualNetworkGatewaysResetVpnClientSharedKeyOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualNetworkGatewaysGeneratevpnclientpackageOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the generatevpnclientpackage operation. */
export type VirtualNetworkGatewaysGeneratevpnclientpackageResponse = {
  /** The parsed response body. */
  body: string;
};

/** Optional parameters. */
export interface VirtualNetworkGatewaysGenerateVpnProfileOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the generateVpnProfile operation. */
export type VirtualNetworkGatewaysGenerateVpnProfileResponse = {
  /** The parsed response body. */
  body: string;
};

/** Optional parameters. */
export interface VirtualNetworkGatewaysGetVpnProfilePackageUrlOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the getVpnProfilePackageUrl operation. */
export type VirtualNetworkGatewaysGetVpnProfilePackageUrlResponse = {
  /** The parsed response body. */
  body: string;
};

/** Optional parameters. */
export interface VirtualNetworkGatewaysGetBgpPeerStatusOptionalParams
  extends coreClient.OperationOptions {
  /** The IP address of the peer to retrieve the status of. */
  peer?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the getBgpPeerStatus operation. */
export type VirtualNetworkGatewaysGetBgpPeerStatusResponse = BgpPeerStatusListResult;

/** Optional parameters. */
export interface VirtualNetworkGatewaysSupportedVpnDevicesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the supportedVpnDevices operation. */
export type VirtualNetworkGatewaysSupportedVpnDevicesResponse = {
  /** The parsed response body. */
  body: string;
};

/** Optional parameters. */
export interface VirtualNetworkGatewaysGetLearnedRoutesOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the getLearnedRoutes operation. */
export type VirtualNetworkGatewaysGetLearnedRoutesResponse = GatewayRouteListResult;

/** Optional parameters. */
export interface VirtualNetworkGatewaysGetAdvertisedRoutesOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the getAdvertisedRoutes operation. */
export type VirtualNetworkGatewaysGetAdvertisedRoutesResponse = GatewayRouteListResult;

/** Optional parameters. */
export interface VirtualNetworkGatewaysSetVpnclientIpsecParametersOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the setVpnclientIpsecParameters operation. */
export type VirtualNetworkGatewaysSetVpnclientIpsecParametersResponse = VpnClientIPsecParameters;

/** Optional parameters. */
export interface VirtualNetworkGatewaysGetVpnclientIpsecParametersOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the getVpnclientIpsecParameters operation. */
export type VirtualNetworkGatewaysGetVpnclientIpsecParametersResponse = VpnClientIPsecParameters;

/** Optional parameters. */
export interface VirtualNetworkGatewaysVpnDeviceConfigurationScriptOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the vpnDeviceConfigurationScript operation. */
export type VirtualNetworkGatewaysVpnDeviceConfigurationScriptResponse = {
  /** The parsed response body. */
  body: string;
};

/** Optional parameters. */
export interface VirtualNetworkGatewaysListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type VirtualNetworkGatewaysListNextResponse = VirtualNetworkGatewayListResult;

/** Optional parameters. */
export interface VirtualNetworkGatewaysListConnectionsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listConnectionsNext operation. */
export type VirtualNetworkGatewaysListConnectionsNextResponse = VirtualNetworkGatewayListConnectionsResult;

/** Optional parameters. */
export interface VirtualNetworkGatewayConnectionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type VirtualNetworkGatewayConnectionsCreateOrUpdateResponse = VirtualNetworkGatewayConnection;

/** Optional parameters. */
export interface VirtualNetworkGatewayConnectionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VirtualNetworkGatewayConnectionsGetResponse = VirtualNetworkGatewayConnection;

/** Optional parameters. */
export interface VirtualNetworkGatewayConnectionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualNetworkGatewayConnectionsUpdateTagsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateTags operation. */
export type VirtualNetworkGatewayConnectionsUpdateTagsResponse = VirtualNetworkGatewayConnection;

/** Optional parameters. */
export interface VirtualNetworkGatewayConnectionsSetSharedKeyOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the setSharedKey operation. */
export type VirtualNetworkGatewayConnectionsSetSharedKeyResponse = ConnectionSharedKey;

/** Optional parameters. */
export interface VirtualNetworkGatewayConnectionsGetSharedKeyOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getSharedKey operation. */
export type VirtualNetworkGatewayConnectionsGetSharedKeyResponse = ConnectionSharedKey;

/** Optional parameters. */
export interface VirtualNetworkGatewayConnectionsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type VirtualNetworkGatewayConnectionsListResponse = VirtualNetworkGatewayConnectionListResult;

/** Optional parameters. */
export interface VirtualNetworkGatewayConnectionsResetSharedKeyOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the resetSharedKey operation. */
export type VirtualNetworkGatewayConnectionsResetSharedKeyResponse = ConnectionResetSharedKey;

/** Optional parameters. */
export interface VirtualNetworkGatewayConnectionsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type VirtualNetworkGatewayConnectionsListNextResponse = VirtualNetworkGatewayConnectionListResult;

/** Optional parameters. */
export interface LocalNetworkGatewaysCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type LocalNetworkGatewaysCreateOrUpdateResponse = LocalNetworkGateway;

/** Optional parameters. */
export interface LocalNetworkGatewaysGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type LocalNetworkGatewaysGetResponse = LocalNetworkGateway;

/** Optional parameters. */
export interface LocalNetworkGatewaysDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface LocalNetworkGatewaysUpdateTagsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateTags operation. */
export type LocalNetworkGatewaysUpdateTagsResponse = LocalNetworkGateway;

/** Optional parameters. */
export interface LocalNetworkGatewaysListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type LocalNetworkGatewaysListResponse = LocalNetworkGatewayListResult;

/** Optional parameters. */
export interface LocalNetworkGatewaysListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type LocalNetworkGatewaysListNextResponse = LocalNetworkGatewayListResult;

/** Optional parameters. */
export interface LoadBalancersDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface LoadBalancersGetOptionalParams
  extends coreClient.OperationOptions {
  /** Expands referenced resources. */
  expand?: string;
}

/** Contains response data for the get operation. */
export type LoadBalancersGetResponse = LoadBalancer;

/** Optional parameters. */
export interface LoadBalancersCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type LoadBalancersCreateOrUpdateResponse = LoadBalancer;

/** Optional parameters. */
export interface LoadBalancersUpdateTagsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateTags operation. */
export type LoadBalancersUpdateTagsResponse = LoadBalancer;

/** Optional parameters. */
export interface LoadBalancersListAllOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listAll operation. */
export type LoadBalancersListAllResponse = LoadBalancerListResult;

/** Optional parameters. */
export interface LoadBalancersListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type LoadBalancersListResponse = LoadBalancerListResult;

/** Optional parameters. */
export interface LoadBalancersListAllNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listAllNext operation. */
export type LoadBalancersListAllNextResponse = LoadBalancerListResult;

/** Optional parameters. */
export interface LoadBalancersListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type LoadBalancersListNextResponse = LoadBalancerListResult;

/** Optional parameters. */
export interface LoadBalancerBackendAddressPoolsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type LoadBalancerBackendAddressPoolsListResponse = LoadBalancerBackendAddressPoolListResult;

/** Optional parameters. */
export interface LoadBalancerBackendAddressPoolsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type LoadBalancerBackendAddressPoolsGetResponse = BackendAddressPool;

/** Optional parameters. */
export interface LoadBalancerBackendAddressPoolsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type LoadBalancerBackendAddressPoolsListNextResponse = LoadBalancerBackendAddressPoolListResult;

/** Optional parameters. */
export interface LoadBalancerFrontendIPConfigurationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type LoadBalancerFrontendIPConfigurationsListResponse = LoadBalancerFrontendIPConfigurationListResult;

/** Optional parameters. */
export interface LoadBalancerFrontendIPConfigurationsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type LoadBalancerFrontendIPConfigurationsGetResponse = FrontendIPConfiguration;

/** Optional parameters. */
export interface LoadBalancerFrontendIPConfigurationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type LoadBalancerFrontendIPConfigurationsListNextResponse = LoadBalancerFrontendIPConfigurationListResult;

/** Optional parameters. */
export interface InboundNatRulesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type InboundNatRulesListResponse = InboundNatRuleListResult;

/** Optional parameters. */
export interface InboundNatRulesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface InboundNatRulesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Expands referenced resources. */
  expand?: string;
}

/** Contains response data for the get operation. */
export type InboundNatRulesGetResponse = InboundNatRule;

/** Optional parameters. */
export interface InboundNatRulesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type InboundNatRulesCreateOrUpdateResponse = InboundNatRule;

/** Optional parameters. */
export interface InboundNatRulesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type InboundNatRulesListNextResponse = InboundNatRuleListResult;

/** Optional parameters. */
export interface LoadBalancerLoadBalancingRulesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type LoadBalancerLoadBalancingRulesListResponse = LoadBalancerLoadBalancingRuleListResult;

/** Optional parameters. */
export interface LoadBalancerLoadBalancingRulesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type LoadBalancerLoadBalancingRulesGetResponse = LoadBalancingRule;

/** Optional parameters. */
export interface LoadBalancerLoadBalancingRulesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type LoadBalancerLoadBalancingRulesListNextResponse = LoadBalancerLoadBalancingRuleListResult;

/** Optional parameters. */
export interface LoadBalancerOutboundRulesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type LoadBalancerOutboundRulesListResponse = LoadBalancerOutboundRuleListResult;

/** Optional parameters. */
export interface LoadBalancerOutboundRulesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type LoadBalancerOutboundRulesGetResponse = OutboundRule;

/** Optional parameters. */
export interface LoadBalancerOutboundRulesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type LoadBalancerOutboundRulesListNextResponse = LoadBalancerOutboundRuleListResult;

/** Optional parameters. */
export interface LoadBalancerNetworkInterfacesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type LoadBalancerNetworkInterfacesListResponse = NetworkInterfaceListResult;

/** Optional parameters. */
export interface LoadBalancerNetworkInterfacesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type LoadBalancerNetworkInterfacesListNextResponse = NetworkInterfaceListResult;

/** Optional parameters. */
export interface LoadBalancerProbesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type LoadBalancerProbesListResponse = LoadBalancerProbeListResult;

/** Optional parameters. */
export interface LoadBalancerProbesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type LoadBalancerProbesGetResponse = Probe;

/** Optional parameters. */
export interface LoadBalancerProbesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type LoadBalancerProbesListNextResponse = LoadBalancerProbeListResult;

/** Optional parameters. */
export interface NetworkInterfacesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface NetworkInterfacesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Expands referenced resources. */
  expand?: string;
}

/** Contains response data for the get operation. */
export type NetworkInterfacesGetResponse = NetworkInterface;

/** Optional parameters. */
export interface NetworkInterfacesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type NetworkInterfacesCreateOrUpdateResponse = NetworkInterface;

/** Optional parameters. */
export interface NetworkInterfacesUpdateTagsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateTags operation. */
export type NetworkInterfacesUpdateTagsResponse = NetworkInterface;

/** Optional parameters. */
export interface NetworkInterfacesListAllOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listAll operation. */
export type NetworkInterfacesListAllResponse = NetworkInterfaceListResult;

/** Optional parameters. */
export interface NetworkInterfacesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type NetworkInterfacesListResponse = NetworkInterfaceListResult;

/** Optional parameters. */
export interface NetworkInterfacesGetEffectiveRouteTableOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the getEffectiveRouteTable operation. */
export type NetworkInterfacesGetEffectiveRouteTableResponse = EffectiveRouteListResult;

/** Optional parameters. */
export interface NetworkInterfacesListEffectiveNetworkSecurityGroupsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the listEffectiveNetworkSecurityGroups operation. */
export type NetworkInterfacesListEffectiveNetworkSecurityGroupsResponse = EffectiveNetworkSecurityGroupListResult;

/** Optional parameters. */
export interface NetworkInterfacesListAllNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listAllNext operation. */
export type NetworkInterfacesListAllNextResponse = NetworkInterfaceListResult;

/** Optional parameters. */
export interface NetworkInterfacesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type NetworkInterfacesListNextResponse = NetworkInterfaceListResult;

/** Optional parameters. */
export interface NetworkInterfaceIPConfigurationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type NetworkInterfaceIPConfigurationsListResponse = NetworkInterfaceIPConfigurationListResult;

/** Optional parameters. */
export interface NetworkInterfaceIPConfigurationsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NetworkInterfaceIPConfigurationsGetResponse = NetworkInterfaceIPConfiguration;

/** Optional parameters. */
export interface NetworkInterfaceIPConfigurationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type NetworkInterfaceIPConfigurationsListNextResponse = NetworkInterfaceIPConfigurationListResult;

/** Optional parameters. */
export interface NetworkInterfaceLoadBalancersListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type NetworkInterfaceLoadBalancersListResponse = NetworkInterfaceLoadBalancerListResult;

/** Optional parameters. */
export interface NetworkInterfaceLoadBalancersListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type NetworkInterfaceLoadBalancersListNextResponse = NetworkInterfaceLoadBalancerListResult;

/** Optional parameters. */
export interface NetworkInterfaceTapConfigurationsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface NetworkInterfaceTapConfigurationsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NetworkInterfaceTapConfigurationsGetResponse = NetworkInterfaceTapConfiguration;

/** Optional parameters. */
export interface NetworkInterfaceTapConfigurationsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type NetworkInterfaceTapConfigurationsCreateOrUpdateResponse = NetworkInterfaceTapConfiguration;

/** Optional parameters. */
export interface NetworkInterfaceTapConfigurationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type NetworkInterfaceTapConfigurationsListResponse = NetworkInterfaceTapConfigurationListResult;

/** Optional parameters. */
export interface NetworkInterfaceTapConfigurationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type NetworkInterfaceTapConfigurationsListNextResponse = NetworkInterfaceTapConfigurationListResult;

/** Optional parameters. */
export interface NetworkSecurityGroupsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface NetworkSecurityGroupsGetOptionalParams
  extends coreClient.OperationOptions {
  /** Expands referenced resources. */
  expand?: string;
}

/** Contains response data for the get operation. */
export type NetworkSecurityGroupsGetResponse = NetworkSecurityGroup;

/** Optional parameters. */
export interface NetworkSecurityGroupsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type NetworkSecurityGroupsCreateOrUpdateResponse = NetworkSecurityGroup;

/** Optional parameters. */
export interface NetworkSecurityGroupsUpdateTagsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateTags operation. */
export type NetworkSecurityGroupsUpdateTagsResponse = NetworkSecurityGroup;

/** Optional parameters. */
export interface NetworkSecurityGroupsListAllOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listAll operation. */
export type NetworkSecurityGroupsListAllResponse = NetworkSecurityGroupListResult;

/** Optional parameters. */
export interface NetworkSecurityGroupsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type NetworkSecurityGroupsListResponse = NetworkSecurityGroupListResult;

/** Optional parameters. */
export interface NetworkSecurityGroupsListAllNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listAllNext operation. */
export type NetworkSecurityGroupsListAllNextResponse = NetworkSecurityGroupListResult;

/** Optional parameters. */
export interface NetworkSecurityGroupsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type NetworkSecurityGroupsListNextResponse = NetworkSecurityGroupListResult;

/** Optional parameters. */
export interface SecurityRulesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface SecurityRulesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SecurityRulesGetResponse = SecurityRule;

/** Optional parameters. */
export interface SecurityRulesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type SecurityRulesCreateOrUpdateResponse = SecurityRule;

/** Optional parameters. */
export interface SecurityRulesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type SecurityRulesListResponse = SecurityRuleListResult;

/** Optional parameters. */
export interface SecurityRulesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type SecurityRulesListNextResponse = SecurityRuleListResult;

/** Optional parameters. */
export interface DefaultSecurityRulesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type DefaultSecurityRulesListResponse = SecurityRuleListResult;

/** Optional parameters. */
export interface DefaultSecurityRulesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DefaultSecurityRulesGetResponse = SecurityRule;

/** Optional parameters. */
export interface DefaultSecurityRulesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type DefaultSecurityRulesListNextResponse = SecurityRuleListResult;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface PublicIPAddressesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface PublicIPAddressesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Expands referenced resources. */
  expand?: string;
}

/** Contains response data for the get operation. */
export type PublicIPAddressesGetResponse = PublicIPAddress;

/** Optional parameters. */
export interface PublicIPAddressesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type PublicIPAddressesCreateOrUpdateResponse = PublicIPAddress;

/** Optional parameters. */
export interface PublicIPAddressesUpdateTagsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateTags operation. */
export type PublicIPAddressesUpdateTagsResponse = PublicIPAddress;

/** Optional parameters. */
export interface PublicIPAddressesListAllOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listAll operation. */
export type PublicIPAddressesListAllResponse = PublicIPAddressListResult;

/** Optional parameters. */
export interface PublicIPAddressesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type PublicIPAddressesListResponse = PublicIPAddressListResult;

/** Optional parameters. */
export interface PublicIPAddressesListAllNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listAllNext operation. */
export type PublicIPAddressesListAllNextResponse = PublicIPAddressListResult;

/** Optional parameters. */
export interface PublicIPAddressesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type PublicIPAddressesListNextResponse = PublicIPAddressListResult;

/** Optional parameters. */
export interface RouteTablesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface RouteTablesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Expands referenced resources. */
  expand?: string;
}

/** Contains response data for the get operation. */
export type RouteTablesGetResponse = RouteTable;

/** Optional parameters. */
export interface RouteTablesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type RouteTablesCreateOrUpdateResponse = RouteTable;

/** Optional parameters. */
export interface RouteTablesUpdateTagsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateTags operation. */
export type RouteTablesUpdateTagsResponse = RouteTable;

/** Optional parameters. */
export interface RouteTablesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type RouteTablesListResponse = RouteTableListResult;

/** Optional parameters. */
export interface RouteTablesListAllOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listAll operation. */
export type RouteTablesListAllResponse = RouteTableListResult;

/** Optional parameters. */
export interface RouteTablesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type RouteTablesListNextResponse = RouteTableListResult;

/** Optional parameters. */
export interface RouteTablesListAllNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listAllNext operation. */
export type RouteTablesListAllNextResponse = RouteTableListResult;

/** Optional parameters. */
export interface RoutesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface RoutesGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RoutesGetResponse = Route;

/** Optional parameters. */
export interface RoutesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type RoutesCreateOrUpdateResponse = Route;

/** Optional parameters. */
export interface RoutesListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type RoutesListResponse = RouteListResult;

/** Optional parameters. */
export interface RoutesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type RoutesListNextResponse = RouteListResult;

/** Optional parameters. */
export interface VirtualNetworksDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualNetworksGetOptionalParams
  extends coreClient.OperationOptions {
  /** Expands referenced resources. */
  expand?: string;
}

/** Contains response data for the get operation. */
export type VirtualNetworksGetResponse = VirtualNetwork;

/** Optional parameters. */
export interface VirtualNetworksCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type VirtualNetworksCreateOrUpdateResponse = VirtualNetwork;

/** Optional parameters. */
export interface VirtualNetworksUpdateTagsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateTags operation. */
export type VirtualNetworksUpdateTagsResponse = VirtualNetwork;

/** Optional parameters. */
export interface VirtualNetworksListAllOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listAll operation. */
export type VirtualNetworksListAllResponse = VirtualNetworkListResult;

/** Optional parameters. */
export interface VirtualNetworksListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type VirtualNetworksListResponse = VirtualNetworkListResult;

/** Optional parameters. */
export interface VirtualNetworksCheckIPAddressAvailabilityOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkIPAddressAvailability operation. */
export type VirtualNetworksCheckIPAddressAvailabilityResponse = IPAddressAvailabilityResult;

/** Optional parameters. */
export interface VirtualNetworksListUsageOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listUsage operation. */
export type VirtualNetworksListUsageResponse = VirtualNetworkListUsageResult;

/** Optional parameters. */
export interface VirtualNetworksListAllNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listAllNext operation. */
export type VirtualNetworksListAllNextResponse = VirtualNetworkListResult;

/** Optional parameters. */
export interface VirtualNetworksListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type VirtualNetworksListNextResponse = VirtualNetworkListResult;

/** Optional parameters. */
export interface VirtualNetworksListUsageNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listUsageNext operation. */
export type VirtualNetworksListUsageNextResponse = VirtualNetworkListUsageResult;

/** Optional parameters. */
export interface SubnetsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface SubnetsGetOptionalParams extends coreClient.OperationOptions {
  /** Expands referenced resources. */
  expand?: string;
}

/** Contains response data for the get operation. */
export type SubnetsGetResponse = Subnet;

/** Optional parameters. */
export interface SubnetsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type SubnetsCreateOrUpdateResponse = Subnet;

/** Optional parameters. */
export interface SubnetsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type SubnetsListResponse = SubnetListResult;

/** Optional parameters. */
export interface SubnetsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type SubnetsListNextResponse = SubnetListResult;

/** Optional parameters. */
export interface VirtualNetworkPeeringsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualNetworkPeeringsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VirtualNetworkPeeringsGetResponse = VirtualNetworkPeering;

/** Optional parameters. */
export interface VirtualNetworkPeeringsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type VirtualNetworkPeeringsCreateOrUpdateResponse = VirtualNetworkPeering;

/** Optional parameters. */
export interface VirtualNetworkPeeringsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type VirtualNetworkPeeringsListResponse = VirtualNetworkPeeringListResult;

/** Optional parameters. */
export interface VirtualNetworkPeeringsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type VirtualNetworkPeeringsListNextResponse = VirtualNetworkPeeringListResult;

/** Optional parameters. */
export interface NetworkManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
