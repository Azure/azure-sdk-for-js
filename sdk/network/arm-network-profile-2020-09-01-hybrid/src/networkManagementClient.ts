/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import {
  PipelineRequest,
  PipelineResponse,
  SendRequest
} from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import {
  VirtualNetworkGatewaysImpl,
  VirtualNetworkGatewayConnectionsImpl,
  LocalNetworkGatewaysImpl,
  LoadBalancersImpl,
  LoadBalancerBackendAddressPoolsImpl,
  LoadBalancerFrontendIPConfigurationsImpl,
  InboundNatRulesImpl,
  LoadBalancerLoadBalancingRulesImpl,
  LoadBalancerOutboundRulesImpl,
  LoadBalancerNetworkInterfacesImpl,
  LoadBalancerProbesImpl,
  NetworkInterfacesImpl,
  NetworkInterfaceIPConfigurationsImpl,
  NetworkInterfaceLoadBalancersImpl,
  NetworkInterfaceTapConfigurationsImpl,
  NetworkSecurityGroupsImpl,
  SecurityRulesImpl,
  DefaultSecurityRulesImpl,
  OperationsImpl,
  PublicIPAddressesImpl,
  RouteTablesImpl,
  RoutesImpl,
  VirtualNetworksImpl,
  SubnetsImpl,
  VirtualNetworkPeeringsImpl
} from "./operations";
import {
  VirtualNetworkGateways,
  VirtualNetworkGatewayConnections,
  LocalNetworkGateways,
  LoadBalancers,
  LoadBalancerBackendAddressPools,
  LoadBalancerFrontendIPConfigurations,
  InboundNatRules,
  LoadBalancerLoadBalancingRules,
  LoadBalancerOutboundRules,
  LoadBalancerNetworkInterfaces,
  LoadBalancerProbes,
  NetworkInterfaces,
  NetworkInterfaceIPConfigurations,
  NetworkInterfaceLoadBalancers,
  NetworkInterfaceTapConfigurations,
  NetworkSecurityGroups,
  SecurityRules,
  DefaultSecurityRules,
  Operations,
  PublicIPAddresses,
  RouteTables,
  Routes,
  VirtualNetworks,
  Subnets,
  VirtualNetworkPeerings
} from "./operationsInterfaces";
import { NetworkManagementClientOptionalParams } from "./models";

export class NetworkManagementClient extends coreClient.ServiceClient {
  $host: string;
  apiVersion: string;
  subscriptionId: string;

  /**
   * Initializes a new instance of the NetworkManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure
   *                       subscription. The subscription ID forms part of the URI for every service call.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: NetworkManagementClientOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: NetworkManagementClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-network-profile-2020-09-01-hybrid/2.1.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      endpoint:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com"
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes:
            optionsWithDefaults.credentialScopes ??
            `${optionsWithDefaults.endpoint}/.default`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge
          }
        })
      );
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2018-11-01";
    this.virtualNetworkGateways = new VirtualNetworkGatewaysImpl(this);
    this.virtualNetworkGatewayConnections = new VirtualNetworkGatewayConnectionsImpl(
      this
    );
    this.localNetworkGateways = new LocalNetworkGatewaysImpl(this);
    this.loadBalancers = new LoadBalancersImpl(this);
    this.loadBalancerBackendAddressPools = new LoadBalancerBackendAddressPoolsImpl(
      this
    );
    this.loadBalancerFrontendIPConfigurations = new LoadBalancerFrontendIPConfigurationsImpl(
      this
    );
    this.inboundNatRules = new InboundNatRulesImpl(this);
    this.loadBalancerLoadBalancingRules = new LoadBalancerLoadBalancingRulesImpl(
      this
    );
    this.loadBalancerOutboundRules = new LoadBalancerOutboundRulesImpl(this);
    this.loadBalancerNetworkInterfaces = new LoadBalancerNetworkInterfacesImpl(
      this
    );
    this.loadBalancerProbes = new LoadBalancerProbesImpl(this);
    this.networkInterfaces = new NetworkInterfacesImpl(this);
    this.networkInterfaceIPConfigurations = new NetworkInterfaceIPConfigurationsImpl(
      this
    );
    this.networkInterfaceLoadBalancers = new NetworkInterfaceLoadBalancersImpl(
      this
    );
    this.networkInterfaceTapConfigurations = new NetworkInterfaceTapConfigurationsImpl(
      this
    );
    this.networkSecurityGroups = new NetworkSecurityGroupsImpl(this);
    this.securityRules = new SecurityRulesImpl(this);
    this.defaultSecurityRules = new DefaultSecurityRulesImpl(this);
    this.operations = new OperationsImpl(this);
    this.publicIPAddresses = new PublicIPAddressesImpl(this);
    this.routeTables = new RouteTablesImpl(this);
    this.routes = new RoutesImpl(this);
    this.virtualNetworks = new VirtualNetworksImpl(this);
    this.subnets = new SubnetsImpl(this);
    this.virtualNetworkPeerings = new VirtualNetworkPeeringsImpl(this);
    this.addCustomApiVersionPolicy(options.apiVersion);
  }

  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
  private addCustomApiVersionPolicy(apiVersion?: string) {
    if (!apiVersion) {
      return;
    }
    const apiVersionPolicy = {
      name: "CustomApiVersionPolicy",
      async sendRequest(
        request: PipelineRequest,
        next: SendRequest
      ): Promise<PipelineResponse> {
        const param = request.url.split("?");
        if (param.length > 1) {
          const newParams = param[1].split("&").map((item) => {
            if (item.indexOf("api-version") > -1) {
              return "api-version=" + apiVersion;
            } else {
              return item;
            }
          });
          request.url = param[0] + "?" + newParams.join("&");
        }
        return next(request);
      }
    };
    this.pipeline.addPolicy(apiVersionPolicy);
  }

  virtualNetworkGateways: VirtualNetworkGateways;
  virtualNetworkGatewayConnections: VirtualNetworkGatewayConnections;
  localNetworkGateways: LocalNetworkGateways;
  loadBalancers: LoadBalancers;
  loadBalancerBackendAddressPools: LoadBalancerBackendAddressPools;
  loadBalancerFrontendIPConfigurations: LoadBalancerFrontendIPConfigurations;
  inboundNatRules: InboundNatRules;
  loadBalancerLoadBalancingRules: LoadBalancerLoadBalancingRules;
  loadBalancerOutboundRules: LoadBalancerOutboundRules;
  loadBalancerNetworkInterfaces: LoadBalancerNetworkInterfaces;
  loadBalancerProbes: LoadBalancerProbes;
  networkInterfaces: NetworkInterfaces;
  networkInterfaceIPConfigurations: NetworkInterfaceIPConfigurations;
  networkInterfaceLoadBalancers: NetworkInterfaceLoadBalancers;
  networkInterfaceTapConfigurations: NetworkInterfaceTapConfigurations;
  networkSecurityGroups: NetworkSecurityGroups;
  securityRules: SecurityRules;
  defaultSecurityRules: DefaultSecurityRules;
  operations: Operations;
  publicIPAddresses: PublicIPAddresses;
  routeTables: RouteTables;
  routes: Routes;
  virtualNetworks: VirtualNetworks;
  subnets: Subnets;
  virtualNetworkPeerings: VirtualNetworkPeerings;
}
