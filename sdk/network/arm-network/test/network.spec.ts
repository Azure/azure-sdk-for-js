/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import type { RecorderStartOptions } from "@azure-tools/test-recorder";
import { env, Recorder, isPlaybackMode } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { NetworkManagementClient } from "../src/networkManagementClient.js";
import { describe, it, assert, beforeEach, afterEach } from "vitest";

const replaceableVariables: Record<string, string> = {
  SUBSCRIPTION_ID: "azure_subscription_id",
};

const recorderOptions: RecorderStartOptions = {
  envSetupForPlayback: replaceableVariables,
  removeCentralSanitizers: [
    "AZSDK3493", // .name in the body is not a secret and is listed below in the beforeEach section
    "AZSDK3430", // .id in the body is not a secret and is listed below in the beforeEach section
  ],
};

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("Network test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: NetworkManagementClient;
  let resourceGroupName: string;
  let virtualNetworkName: string;
  let subnetName: string;

  beforeEach(async (ctx) => {
    recorder = new Recorder(ctx);
    await recorder.start(recorderOptions);
    subscriptionId = env.SUBSCRIPTION_ID || "";
    // This is an example of how the environment variables are used
    const credential = createTestCredential();
    client = new NetworkManagementClient(
      credential,
      subscriptionId,
      recorder.configureClientOptions({}),
    );
    resourceGroupName = "myjstest";
    virtualNetworkName = "virtualnetworkzzz";
    subnetName = "subnetzzz";
  });

  afterEach(async () => {
    await recorder.stop();
  });

  it("operations list test", async () => {
    const resArray = new Array();
    for await (const item of client.operations.list()) {
      resArray.push(item);
    }
    assert.notEqual(resArray.length, 0);
  });

  it("virtualNetworks get test", async () => {
    const res = await client.virtualNetworks.get(resourceGroupName, virtualNetworkName);
    assert.equal(res.name, virtualNetworkName);
  });

  it("subnets get test", async () => {
    const res = await client.subnets.get(resourceGroupName, virtualNetworkName, subnetName);
    assert.equal(res.name, subnetName);
  });

  it("ipGroups get test", async () => {
    const res = await client.ipGroups.get(resourceGroupName, virtualNetworkName);
    assert.equal(res.type, "Microsoft.Network/IpGroups");
  });

  it("virtualNetworks list test", async () => {
    const resArray = new Array();
    for await (const item of client.virtualNetworks.list(resourceGroupName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("subnets list test", async () => {
    const resArray = new Array();
    for await (const item of client.subnets.list(resourceGroupName, virtualNetworkName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("ipGroups list test", async () => {
    const resArray = new Array();
    for await (const item of client.ipGroups.listByResourceGroup(resourceGroupName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("virtualNetworks updatetags test", async () => {
    const res = await client.virtualNetworks.updateTags(resourceGroupName, virtualNetworkName, {
      tags: { tag1: "value1", tag2: "value2" },
    });
    assert.equal(res.name, virtualNetworkName);
  });

  it("ipGroups beginDeleteAndWait test", async () => {
    const resArray = new Array();
    for await (const item of client.ipGroups.listByResourceGroup(resourceGroupName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });

  it("subnets beginDeleteAndWait test", async () => {
    const resArray = new Array();
    for await (const item of client.subnets.list(resourceGroupName, virtualNetworkName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });

  it("virtualNetworks beginDeleteAndWait test", async () => {
    const resArray = new Array();
    for await (const item of client.virtualNetworks.list(resourceGroupName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });
});
