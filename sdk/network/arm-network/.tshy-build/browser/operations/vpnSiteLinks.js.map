{"version":3,"file":"vpnSiteLinks.js","sourceRoot":"","sources":["../../../src/operations/vpnSiteLinks.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport { VpnSiteLinks } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { NetworkManagementClient } from \"../networkManagementClient.js\";\nimport {\n  VpnSiteLink,\n  VpnSiteLinksListByVpnSiteNextOptionalParams,\n  VpnSiteLinksListByVpnSiteOptionalParams,\n  VpnSiteLinksListByVpnSiteResponse,\n  VpnSiteLinksGetOptionalParams,\n  VpnSiteLinksGetResponse,\n  VpnSiteLinksListByVpnSiteNextResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing VpnSiteLinks operations. */\nexport class VpnSiteLinksImpl implements VpnSiteLinks {\n  private readonly client: NetworkManagementClient;\n\n  /**\n   * Initialize a new instance of the class VpnSiteLinks class.\n   * @param client Reference to the service client\n   */\n  constructor(client: NetworkManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists all the vpnSiteLinks in a resource group for a vpn site.\n   * @param resourceGroupName The resource group name of the VpnSite.\n   * @param vpnSiteName The name of the VpnSite.\n   * @param options The options parameters.\n   */\n  public listByVpnSite(\n    resourceGroupName: string,\n    vpnSiteName: string,\n    options?: VpnSiteLinksListByVpnSiteOptionalParams,\n  ): PagedAsyncIterableIterator<VpnSiteLink> {\n    const iter = this.listByVpnSitePagingAll(\n      resourceGroupName,\n      vpnSiteName,\n      options,\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByVpnSitePagingPage(\n          resourceGroupName,\n          vpnSiteName,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listByVpnSitePagingPage(\n    resourceGroupName: string,\n    vpnSiteName: string,\n    options?: VpnSiteLinksListByVpnSiteOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<VpnSiteLink[]> {\n    let result: VpnSiteLinksListByVpnSiteResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listByVpnSite(\n        resourceGroupName,\n        vpnSiteName,\n        options,\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listByVpnSiteNext(\n        resourceGroupName,\n        vpnSiteName,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listByVpnSitePagingAll(\n    resourceGroupName: string,\n    vpnSiteName: string,\n    options?: VpnSiteLinksListByVpnSiteOptionalParams,\n  ): AsyncIterableIterator<VpnSiteLink> {\n    for await (const page of this.listByVpnSitePagingPage(\n      resourceGroupName,\n      vpnSiteName,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves the details of a VPN site link.\n   * @param resourceGroupName The resource group name of the VpnSite.\n   * @param vpnSiteName The name of the VpnSite.\n   * @param vpnSiteLinkName The name of the VpnSiteLink being retrieved.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    vpnSiteName: string,\n    vpnSiteLinkName: string,\n    options?: VpnSiteLinksGetOptionalParams,\n  ): Promise<VpnSiteLinksGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, vpnSiteName, vpnSiteLinkName, options },\n      getOperationSpec,\n    );\n  }\n\n  /**\n   * Lists all the vpnSiteLinks in a resource group for a vpn site.\n   * @param resourceGroupName The resource group name of the VpnSite.\n   * @param vpnSiteName The name of the VpnSite.\n   * @param options The options parameters.\n   */\n  private _listByVpnSite(\n    resourceGroupName: string,\n    vpnSiteName: string,\n    options?: VpnSiteLinksListByVpnSiteOptionalParams,\n  ): Promise<VpnSiteLinksListByVpnSiteResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, vpnSiteName, options },\n      listByVpnSiteOperationSpec,\n    );\n  }\n\n  /**\n   * ListByVpnSiteNext\n   * @param resourceGroupName The resource group name of the VpnSite.\n   * @param vpnSiteName The name of the VpnSite.\n   * @param nextLink The nextLink from the previous successful call to the ListByVpnSite method.\n   * @param options The options parameters.\n   */\n  private _listByVpnSiteNext(\n    resourceGroupName: string,\n    vpnSiteName: string,\n    nextLink: string,\n    options?: VpnSiteLinksListByVpnSiteNextOptionalParams,\n  ): Promise<VpnSiteLinksListByVpnSiteNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, vpnSiteName, nextLink, options },\n      listByVpnSiteNextOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnSites/{vpnSiteName}/vpnSiteLinks/{vpnSiteLinkName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.VpnSiteLink,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.vpnSiteName,\n    Parameters.vpnSiteLinkName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listByVpnSiteOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnSites/{vpnSiteName}/vpnSiteLinks\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListVpnSiteLinksResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.vpnSiteName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listByVpnSiteNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListVpnSiteLinksResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.nextLink,\n    Parameters.vpnSiteName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n"]}