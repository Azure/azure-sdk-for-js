{"version":3,"file":"vpnLinkConnections.js","sourceRoot":"","sources":["../../../src/operations/vpnLinkConnections.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport { VpnLinkConnections } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { NetworkManagementClient } from \"../networkManagementClient.js\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller,\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl.js\";\nimport {\n  ConnectionSharedKeyResult,\n  VpnLinkConnectionsGetAllSharedKeysNextOptionalParams,\n  VpnLinkConnectionsGetAllSharedKeysOptionalParams,\n  VpnLinkConnectionsGetAllSharedKeysResponse,\n  VpnSiteLinkConnection,\n  VpnLinkConnectionsListByVpnConnectionNextOptionalParams,\n  VpnLinkConnectionsListByVpnConnectionOptionalParams,\n  VpnLinkConnectionsListByVpnConnectionResponse,\n  VpnLinkConnectionsResetConnectionOptionalParams,\n  VpnLinkConnectionsGetDefaultSharedKeyOptionalParams,\n  VpnLinkConnectionsGetDefaultSharedKeyResponse,\n  VpnLinkConnectionsSetOrInitDefaultSharedKeyOptionalParams,\n  VpnLinkConnectionsSetOrInitDefaultSharedKeyResponse,\n  VpnLinkConnectionsListDefaultSharedKeyOptionalParams,\n  VpnLinkConnectionsListDefaultSharedKeyResponse,\n  VpnLinkConnectionsGetIkeSasOptionalParams,\n  VpnLinkConnectionsGetIkeSasResponse,\n  VpnLinkConnectionsGetAllSharedKeysNextResponse,\n  VpnLinkConnectionsListByVpnConnectionNextResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing VpnLinkConnections operations. */\nexport class VpnLinkConnectionsImpl implements VpnLinkConnections {\n  private readonly client: NetworkManagementClient;\n\n  /**\n   * Initialize a new instance of the class VpnLinkConnections class.\n   * @param client Reference to the service client\n   */\n  constructor(client: NetworkManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists all shared keys of VpnLink connection specified.\n   * @param resourceGroupName The name of the resource group.\n   * @param gatewayName The name of the gateway.\n   * @param connectionName The name of the vpn connection.\n   * @param linkConnectionName The name of the vpn link connection.\n   * @param options The options parameters.\n   */\n  public listAllSharedKeys(\n    resourceGroupName: string,\n    gatewayName: string,\n    connectionName: string,\n    linkConnectionName: string,\n    options?: VpnLinkConnectionsGetAllSharedKeysOptionalParams,\n  ): PagedAsyncIterableIterator<ConnectionSharedKeyResult> {\n    const iter = this.getAllSharedKeysPagingAll(\n      resourceGroupName,\n      gatewayName,\n      connectionName,\n      linkConnectionName,\n      options,\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.getAllSharedKeysPagingPage(\n          resourceGroupName,\n          gatewayName,\n          connectionName,\n          linkConnectionName,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *getAllSharedKeysPagingPage(\n    resourceGroupName: string,\n    gatewayName: string,\n    connectionName: string,\n    linkConnectionName: string,\n    options?: VpnLinkConnectionsGetAllSharedKeysOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<ConnectionSharedKeyResult[]> {\n    let result: VpnLinkConnectionsGetAllSharedKeysResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._getAllSharedKeys(\n        resourceGroupName,\n        gatewayName,\n        connectionName,\n        linkConnectionName,\n        options,\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._getAllSharedKeysNext(\n        resourceGroupName,\n        gatewayName,\n        connectionName,\n        linkConnectionName,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *getAllSharedKeysPagingAll(\n    resourceGroupName: string,\n    gatewayName: string,\n    connectionName: string,\n    linkConnectionName: string,\n    options?: VpnLinkConnectionsGetAllSharedKeysOptionalParams,\n  ): AsyncIterableIterator<ConnectionSharedKeyResult> {\n    for await (const page of this.getAllSharedKeysPagingPage(\n      resourceGroupName,\n      gatewayName,\n      connectionName,\n      linkConnectionName,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves all vpn site link connections for a particular virtual wan vpn gateway vpn connection.\n   * @param resourceGroupName The resource group name of the vpn gateway.\n   * @param gatewayName The name of the gateway.\n   * @param connectionName The name of the vpn connection.\n   * @param options The options parameters.\n   */\n  public listByVpnConnection(\n    resourceGroupName: string,\n    gatewayName: string,\n    connectionName: string,\n    options?: VpnLinkConnectionsListByVpnConnectionOptionalParams,\n  ): PagedAsyncIterableIterator<VpnSiteLinkConnection> {\n    const iter = this.listByVpnConnectionPagingAll(\n      resourceGroupName,\n      gatewayName,\n      connectionName,\n      options,\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByVpnConnectionPagingPage(\n          resourceGroupName,\n          gatewayName,\n          connectionName,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listByVpnConnectionPagingPage(\n    resourceGroupName: string,\n    gatewayName: string,\n    connectionName: string,\n    options?: VpnLinkConnectionsListByVpnConnectionOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<VpnSiteLinkConnection[]> {\n    let result: VpnLinkConnectionsListByVpnConnectionResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listByVpnConnection(\n        resourceGroupName,\n        gatewayName,\n        connectionName,\n        options,\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listByVpnConnectionNext(\n        resourceGroupName,\n        gatewayName,\n        connectionName,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listByVpnConnectionPagingAll(\n    resourceGroupName: string,\n    gatewayName: string,\n    connectionName: string,\n    options?: VpnLinkConnectionsListByVpnConnectionOptionalParams,\n  ): AsyncIterableIterator<VpnSiteLinkConnection> {\n    for await (const page of this.listByVpnConnectionPagingPage(\n      resourceGroupName,\n      gatewayName,\n      connectionName,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Resets the VpnLink connection specified.\n   * @param resourceGroupName The name of the resource group.\n   * @param gatewayName The name of the gateway.\n   * @param connectionName The name of the vpn connection.\n   * @param linkConnectionName The name of the vpn link connection.\n   * @param options The options parameters.\n   */\n  async beginResetConnection(\n    resourceGroupName: string,\n    gatewayName: string,\n    connectionName: string,\n    linkConnectionName: string,\n    options?: VpnLinkConnectionsResetConnectionOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        gatewayName,\n        connectionName,\n        linkConnectionName,\n        options,\n      },\n      spec: resetConnectionOperationSpec,\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Resets the VpnLink connection specified.\n   * @param resourceGroupName The name of the resource group.\n   * @param gatewayName The name of the gateway.\n   * @param connectionName The name of the vpn connection.\n   * @param linkConnectionName The name of the vpn link connection.\n   * @param options The options parameters.\n   */\n  async beginResetConnectionAndWait(\n    resourceGroupName: string,\n    gatewayName: string,\n    connectionName: string,\n    linkConnectionName: string,\n    options?: VpnLinkConnectionsResetConnectionOptionalParams,\n  ): Promise<void> {\n    const poller = await this.beginResetConnection(\n      resourceGroupName,\n      gatewayName,\n      connectionName,\n      linkConnectionName,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Lists all shared keys of VpnLink connection specified.\n   * @param resourceGroupName The name of the resource group.\n   * @param gatewayName The name of the gateway.\n   * @param connectionName The name of the vpn connection.\n   * @param linkConnectionName The name of the vpn link connection.\n   * @param options The options parameters.\n   */\n  private _getAllSharedKeys(\n    resourceGroupName: string,\n    gatewayName: string,\n    connectionName: string,\n    linkConnectionName: string,\n    options?: VpnLinkConnectionsGetAllSharedKeysOptionalParams,\n  ): Promise<VpnLinkConnectionsGetAllSharedKeysResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        gatewayName,\n        connectionName,\n        linkConnectionName,\n        options,\n      },\n      getAllSharedKeysOperationSpec,\n    );\n  }\n\n  /**\n   * Gets the shared key of VpnLink connection specified.\n   * @param resourceGroupName The name of the resource group.\n   * @param gatewayName The name of the gateway.\n   * @param connectionName The name of the vpn connection.\n   * @param linkConnectionName The name of the vpn link connection.\n   * @param options The options parameters.\n   */\n  getDefaultSharedKey(\n    resourceGroupName: string,\n    gatewayName: string,\n    connectionName: string,\n    linkConnectionName: string,\n    options?: VpnLinkConnectionsGetDefaultSharedKeyOptionalParams,\n  ): Promise<VpnLinkConnectionsGetDefaultSharedKeyResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        gatewayName,\n        connectionName,\n        linkConnectionName,\n        options,\n      },\n      getDefaultSharedKeyOperationSpec,\n    );\n  }\n\n  /**\n   * Sets or auto generates the shared key based on the user input. If users give a shared key value, it\n   * does the set operation. If key length is given, the operation creates a random key of the\n   * pre-defined length.\n   * @param resourceGroupName The resource group name of the VpnGateway.\n   * @param gatewayName The name of the gateway.\n   * @param connectionName The name of the connection.\n   * @param linkConnectionName The name of the vpn link connection.\n   * @param connectionSharedKeyParameters Parameters supplied to set or auto generate the shared key for\n   *                                      the vpn link connection.\n   * @param options The options parameters.\n   */\n  async beginSetOrInitDefaultSharedKey(\n    resourceGroupName: string,\n    gatewayName: string,\n    connectionName: string,\n    linkConnectionName: string,\n    connectionSharedKeyParameters: ConnectionSharedKeyResult,\n    options?: VpnLinkConnectionsSetOrInitDefaultSharedKeyOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<VpnLinkConnectionsSetOrInitDefaultSharedKeyResponse>,\n      VpnLinkConnectionsSetOrInitDefaultSharedKeyResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<VpnLinkConnectionsSetOrInitDefaultSharedKeyResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        gatewayName,\n        connectionName,\n        linkConnectionName,\n        connectionSharedKeyParameters,\n        options,\n      },\n      spec: setOrInitDefaultSharedKeyOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      VpnLinkConnectionsSetOrInitDefaultSharedKeyResponse,\n      OperationState<VpnLinkConnectionsSetOrInitDefaultSharedKeyResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"azure-async-operation\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Sets or auto generates the shared key based on the user input. If users give a shared key value, it\n   * does the set operation. If key length is given, the operation creates a random key of the\n   * pre-defined length.\n   * @param resourceGroupName The resource group name of the VpnGateway.\n   * @param gatewayName The name of the gateway.\n   * @param connectionName The name of the connection.\n   * @param linkConnectionName The name of the vpn link connection.\n   * @param connectionSharedKeyParameters Parameters supplied to set or auto generate the shared key for\n   *                                      the vpn link connection.\n   * @param options The options parameters.\n   */\n  async beginSetOrInitDefaultSharedKeyAndWait(\n    resourceGroupName: string,\n    gatewayName: string,\n    connectionName: string,\n    linkConnectionName: string,\n    connectionSharedKeyParameters: ConnectionSharedKeyResult,\n    options?: VpnLinkConnectionsSetOrInitDefaultSharedKeyOptionalParams,\n  ): Promise<VpnLinkConnectionsSetOrInitDefaultSharedKeyResponse> {\n    const poller = await this.beginSetOrInitDefaultSharedKey(\n      resourceGroupName,\n      gatewayName,\n      connectionName,\n      linkConnectionName,\n      connectionSharedKeyParameters,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets the value of the shared key of VpnLink connection specified.\n   * @param resourceGroupName The name of the resource group.\n   * @param gatewayName The name of the gateway.\n   * @param connectionName The name of the vpn connection.\n   * @param linkConnectionName The name of the vpn link connection.\n   * @param options The options parameters.\n   */\n  listDefaultSharedKey(\n    resourceGroupName: string,\n    gatewayName: string,\n    connectionName: string,\n    linkConnectionName: string,\n    options?: VpnLinkConnectionsListDefaultSharedKeyOptionalParams,\n  ): Promise<VpnLinkConnectionsListDefaultSharedKeyResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        gatewayName,\n        connectionName,\n        linkConnectionName,\n        options,\n      },\n      listDefaultSharedKeyOperationSpec,\n    );\n  }\n\n  /**\n   * Lists IKE Security Associations for Vpn Site Link Connection in the specified resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param gatewayName The name of the gateway.\n   * @param connectionName The name of the vpn connection.\n   * @param linkConnectionName The name of the vpn link connection.\n   * @param options The options parameters.\n   */\n  async beginGetIkeSas(\n    resourceGroupName: string,\n    gatewayName: string,\n    connectionName: string,\n    linkConnectionName: string,\n    options?: VpnLinkConnectionsGetIkeSasOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<VpnLinkConnectionsGetIkeSasResponse>,\n      VpnLinkConnectionsGetIkeSasResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<VpnLinkConnectionsGetIkeSasResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        gatewayName,\n        connectionName,\n        linkConnectionName,\n        options,\n      },\n      spec: getIkeSasOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      VpnLinkConnectionsGetIkeSasResponse,\n      OperationState<VpnLinkConnectionsGetIkeSasResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Lists IKE Security Associations for Vpn Site Link Connection in the specified resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param gatewayName The name of the gateway.\n   * @param connectionName The name of the vpn connection.\n   * @param linkConnectionName The name of the vpn link connection.\n   * @param options The options parameters.\n   */\n  async beginGetIkeSasAndWait(\n    resourceGroupName: string,\n    gatewayName: string,\n    connectionName: string,\n    linkConnectionName: string,\n    options?: VpnLinkConnectionsGetIkeSasOptionalParams,\n  ): Promise<VpnLinkConnectionsGetIkeSasResponse> {\n    const poller = await this.beginGetIkeSas(\n      resourceGroupName,\n      gatewayName,\n      connectionName,\n      linkConnectionName,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Retrieves all vpn site link connections for a particular virtual wan vpn gateway vpn connection.\n   * @param resourceGroupName The resource group name of the vpn gateway.\n   * @param gatewayName The name of the gateway.\n   * @param connectionName The name of the vpn connection.\n   * @param options The options parameters.\n   */\n  private _listByVpnConnection(\n    resourceGroupName: string,\n    gatewayName: string,\n    connectionName: string,\n    options?: VpnLinkConnectionsListByVpnConnectionOptionalParams,\n  ): Promise<VpnLinkConnectionsListByVpnConnectionResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, gatewayName, connectionName, options },\n      listByVpnConnectionOperationSpec,\n    );\n  }\n\n  /**\n   * GetAllSharedKeysNext\n   * @param resourceGroupName The name of the resource group.\n   * @param gatewayName The name of the gateway.\n   * @param connectionName The name of the vpn connection.\n   * @param linkConnectionName The name of the vpn link connection.\n   * @param nextLink The nextLink from the previous successful call to the GetAllSharedKeys method.\n   * @param options The options parameters.\n   */\n  private _getAllSharedKeysNext(\n    resourceGroupName: string,\n    gatewayName: string,\n    connectionName: string,\n    linkConnectionName: string,\n    nextLink: string,\n    options?: VpnLinkConnectionsGetAllSharedKeysNextOptionalParams,\n  ): Promise<VpnLinkConnectionsGetAllSharedKeysNextResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        gatewayName,\n        connectionName,\n        linkConnectionName,\n        nextLink,\n        options,\n      },\n      getAllSharedKeysNextOperationSpec,\n    );\n  }\n\n  /**\n   * ListByVpnConnectionNext\n   * @param resourceGroupName The resource group name of the vpn gateway.\n   * @param gatewayName The name of the gateway.\n   * @param connectionName The name of the vpn connection.\n   * @param nextLink The nextLink from the previous successful call to the ListByVpnConnection method.\n   * @param options The options parameters.\n   */\n  private _listByVpnConnectionNext(\n    resourceGroupName: string,\n    gatewayName: string,\n    connectionName: string,\n    nextLink: string,\n    options?: VpnLinkConnectionsListByVpnConnectionNextOptionalParams,\n  ): Promise<VpnLinkConnectionsListByVpnConnectionNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, gatewayName, connectionName, nextLink, options },\n      listByVpnConnectionNextOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst resetConnectionOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/vpnConnections/{connectionName}/vpnLinkConnections/{linkConnectionName}/resetconnection\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.connectionName,\n    Parameters.gatewayName,\n    Parameters.linkConnectionName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAllSharedKeysOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/vpnConnections/{connectionName}/vpnLinkConnections/{linkConnectionName}/sharedKeys\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ConnectionSharedKeyResultList,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.connectionName,\n    Parameters.gatewayName,\n    Parameters.linkConnectionName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getDefaultSharedKeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/vpnConnections/{connectionName}/vpnLinkConnections/{linkConnectionName}/sharedKeys/default\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ConnectionSharedKeyResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.connectionName,\n    Parameters.gatewayName,\n    Parameters.linkConnectionName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst setOrInitDefaultSharedKeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/vpnConnections/{connectionName}/vpnLinkConnections/{linkConnectionName}/sharedKeys/default\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ConnectionSharedKeyResult,\n    },\n    201: {\n      bodyMapper: Mappers.ConnectionSharedKeyResult,\n    },\n    202: {\n      bodyMapper: Mappers.ConnectionSharedKeyResult,\n    },\n    204: {\n      bodyMapper: Mappers.ConnectionSharedKeyResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.connectionSharedKeyParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.connectionName,\n    Parameters.gatewayName,\n    Parameters.linkConnectionName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst listDefaultSharedKeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/vpnConnections/{connectionName}/vpnLinkConnections/{linkConnectionName}/sharedKeys/default/listSharedKey\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ConnectionSharedKeyResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.connectionName,\n    Parameters.gatewayName,\n    Parameters.linkConnectionName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getIkeSasOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/vpnConnections/{connectionName}/vpnLinkConnections/{linkConnectionName}/getikesas\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"String\" } },\n    },\n    201: {\n      bodyMapper: { type: { name: \"String\" } },\n    },\n    202: {\n      bodyMapper: { type: { name: \"String\" } },\n    },\n    204: {\n      bodyMapper: { type: { name: \"String\" } },\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.connectionName,\n    Parameters.gatewayName,\n    Parameters.linkConnectionName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listByVpnConnectionOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/vpnConnections/{connectionName}/vpnLinkConnections\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListVpnSiteLinkConnectionsResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.connectionName,\n    Parameters.gatewayName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getAllSharedKeysNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ConnectionSharedKeyResultList,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.nextLink,\n    Parameters.connectionName,\n    Parameters.gatewayName,\n    Parameters.linkConnectionName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listByVpnConnectionNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListVpnSiteLinkConnectionsResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.nextLink,\n    Parameters.connectionName,\n    Parameters.gatewayName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n"]}