{"version":3,"file":"expressRouteCircuits.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/expressRouteCircuits.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  ExpressRouteCircuit,\n  ExpressRouteCircuitsListOptionalParams,\n  ExpressRouteCircuitsListAllOptionalParams,\n  ExpressRouteCircuitsDeleteOptionalParams,\n  ExpressRouteCircuitsGetOptionalParams,\n  ExpressRouteCircuitsGetResponse,\n  ExpressRouteCircuitsCreateOrUpdateOptionalParams,\n  ExpressRouteCircuitsCreateOrUpdateResponse,\n  TagsObject,\n  ExpressRouteCircuitsUpdateTagsOptionalParams,\n  ExpressRouteCircuitsUpdateTagsResponse,\n  ExpressRouteCircuitsListArpTableOptionalParams,\n  ExpressRouteCircuitsListArpTableResponse,\n  ExpressRouteCircuitsListRoutesTableOptionalParams,\n  ExpressRouteCircuitsListRoutesTableResponse,\n  ExpressRouteCircuitsListRoutesTableSummaryOptionalParams,\n  ExpressRouteCircuitsListRoutesTableSummaryResponse,\n  ExpressRouteCircuitsGetStatsOptionalParams,\n  ExpressRouteCircuitsGetStatsResponse,\n  ExpressRouteCircuitsGetPeeringStatsOptionalParams,\n  ExpressRouteCircuitsGetPeeringStatsResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a ExpressRouteCircuits. */\nexport interface ExpressRouteCircuits {\n  /**\n   * Gets all the express route circuits in a resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param options The options parameters.\n   */\n  list(\n    resourceGroupName: string,\n    options?: ExpressRouteCircuitsListOptionalParams,\n  ): PagedAsyncIterableIterator<ExpressRouteCircuit>;\n  /**\n   * Gets all the express route circuits in a subscription.\n   * @param options The options parameters.\n   */\n  listAll(\n    options?: ExpressRouteCircuitsListAllOptionalParams,\n  ): PagedAsyncIterableIterator<ExpressRouteCircuit>;\n  /**\n   * Deletes the specified express route circuit.\n   * @param resourceGroupName The name of the resource group.\n   * @param circuitName The name of the express route circuit.\n   * @param options The options parameters.\n   */\n  beginDelete(\n    resourceGroupName: string,\n    circuitName: string,\n    options?: ExpressRouteCircuitsDeleteOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Deletes the specified express route circuit.\n   * @param resourceGroupName The name of the resource group.\n   * @param circuitName The name of the express route circuit.\n   * @param options The options parameters.\n   */\n  beginDeleteAndWait(\n    resourceGroupName: string,\n    circuitName: string,\n    options?: ExpressRouteCircuitsDeleteOptionalParams,\n  ): Promise<void>;\n  /**\n   * Gets information about the specified express route circuit.\n   * @param resourceGroupName The name of the resource group.\n   * @param circuitName The name of express route circuit.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    circuitName: string,\n    options?: ExpressRouteCircuitsGetOptionalParams,\n  ): Promise<ExpressRouteCircuitsGetResponse>;\n  /**\n   * Creates or updates an express route circuit.\n   * @param resourceGroupName The name of the resource group.\n   * @param circuitName The name of the circuit.\n   * @param parameters Parameters supplied to the create or update express route circuit operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdate(\n    resourceGroupName: string,\n    circuitName: string,\n    parameters: ExpressRouteCircuit,\n    options?: ExpressRouteCircuitsCreateOrUpdateOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ExpressRouteCircuitsCreateOrUpdateResponse>,\n      ExpressRouteCircuitsCreateOrUpdateResponse\n    >\n  >;\n  /**\n   * Creates or updates an express route circuit.\n   * @param resourceGroupName The name of the resource group.\n   * @param circuitName The name of the circuit.\n   * @param parameters Parameters supplied to the create or update express route circuit operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    circuitName: string,\n    parameters: ExpressRouteCircuit,\n    options?: ExpressRouteCircuitsCreateOrUpdateOptionalParams,\n  ): Promise<ExpressRouteCircuitsCreateOrUpdateResponse>;\n  /**\n   * Updates an express route circuit tags.\n   * @param resourceGroupName The name of the resource group.\n   * @param circuitName The name of the circuit.\n   * @param parameters Parameters supplied to update express route circuit tags.\n   * @param options The options parameters.\n   */\n  updateTags(\n    resourceGroupName: string,\n    circuitName: string,\n    parameters: TagsObject,\n    options?: ExpressRouteCircuitsUpdateTagsOptionalParams,\n  ): Promise<ExpressRouteCircuitsUpdateTagsResponse>;\n  /**\n   * Gets the currently advertised ARP table associated with the express route circuit in a resource\n   * group.\n   * @param resourceGroupName The name of the resource group.\n   * @param circuitName The name of the express route circuit.\n   * @param peeringName The name of the peering.\n   * @param devicePath The path of the device.\n   * @param options The options parameters.\n   */\n  beginListArpTable(\n    resourceGroupName: string,\n    circuitName: string,\n    peeringName: string,\n    devicePath: string,\n    options?: ExpressRouteCircuitsListArpTableOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ExpressRouteCircuitsListArpTableResponse>,\n      ExpressRouteCircuitsListArpTableResponse\n    >\n  >;\n  /**\n   * Gets the currently advertised ARP table associated with the express route circuit in a resource\n   * group.\n   * @param resourceGroupName The name of the resource group.\n   * @param circuitName The name of the express route circuit.\n   * @param peeringName The name of the peering.\n   * @param devicePath The path of the device.\n   * @param options The options parameters.\n   */\n  beginListArpTableAndWait(\n    resourceGroupName: string,\n    circuitName: string,\n    peeringName: string,\n    devicePath: string,\n    options?: ExpressRouteCircuitsListArpTableOptionalParams,\n  ): Promise<ExpressRouteCircuitsListArpTableResponse>;\n  /**\n   * Gets the currently advertised routes table associated with the express route circuit in a resource\n   * group.\n   * @param resourceGroupName The name of the resource group.\n   * @param circuitName The name of the express route circuit.\n   * @param peeringName The name of the peering.\n   * @param devicePath The path of the device.\n   * @param options The options parameters.\n   */\n  beginListRoutesTable(\n    resourceGroupName: string,\n    circuitName: string,\n    peeringName: string,\n    devicePath: string,\n    options?: ExpressRouteCircuitsListRoutesTableOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ExpressRouteCircuitsListRoutesTableResponse>,\n      ExpressRouteCircuitsListRoutesTableResponse\n    >\n  >;\n  /**\n   * Gets the currently advertised routes table associated with the express route circuit in a resource\n   * group.\n   * @param resourceGroupName The name of the resource group.\n   * @param circuitName The name of the express route circuit.\n   * @param peeringName The name of the peering.\n   * @param devicePath The path of the device.\n   * @param options The options parameters.\n   */\n  beginListRoutesTableAndWait(\n    resourceGroupName: string,\n    circuitName: string,\n    peeringName: string,\n    devicePath: string,\n    options?: ExpressRouteCircuitsListRoutesTableOptionalParams,\n  ): Promise<ExpressRouteCircuitsListRoutesTableResponse>;\n  /**\n   * Gets the currently advertised routes table summary associated with the express route circuit in a\n   * resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param circuitName The name of the express route circuit.\n   * @param peeringName The name of the peering.\n   * @param devicePath The path of the device.\n   * @param options The options parameters.\n   */\n  beginListRoutesTableSummary(\n    resourceGroupName: string,\n    circuitName: string,\n    peeringName: string,\n    devicePath: string,\n    options?: ExpressRouteCircuitsListRoutesTableSummaryOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ExpressRouteCircuitsListRoutesTableSummaryResponse>,\n      ExpressRouteCircuitsListRoutesTableSummaryResponse\n    >\n  >;\n  /**\n   * Gets the currently advertised routes table summary associated with the express route circuit in a\n   * resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param circuitName The name of the express route circuit.\n   * @param peeringName The name of the peering.\n   * @param devicePath The path of the device.\n   * @param options The options parameters.\n   */\n  beginListRoutesTableSummaryAndWait(\n    resourceGroupName: string,\n    circuitName: string,\n    peeringName: string,\n    devicePath: string,\n    options?: ExpressRouteCircuitsListRoutesTableSummaryOptionalParams,\n  ): Promise<ExpressRouteCircuitsListRoutesTableSummaryResponse>;\n  /**\n   * Gets all the stats from an express route circuit in a resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param circuitName The name of the express route circuit.\n   * @param options The options parameters.\n   */\n  getStats(\n    resourceGroupName: string,\n    circuitName: string,\n    options?: ExpressRouteCircuitsGetStatsOptionalParams,\n  ): Promise<ExpressRouteCircuitsGetStatsResponse>;\n  /**\n   * Gets all stats from an express route circuit in a resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param circuitName The name of the express route circuit.\n   * @param peeringName The name of the peering.\n   * @param options The options parameters.\n   */\n  getPeeringStats(\n    resourceGroupName: string,\n    circuitName: string,\n    peeringName: string,\n    options?: ExpressRouteCircuitsGetPeeringStatsOptionalParams,\n  ): Promise<ExpressRouteCircuitsGetPeeringStatsResponse>;\n}\n"]}