{"version":3,"file":"expressRoutePortsLocations.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/expressRoutePortsLocations.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport {\n  ExpressRoutePortsLocation,\n  ExpressRoutePortsLocationsListOptionalParams,\n  ExpressRoutePortsLocationsGetOptionalParams,\n  ExpressRoutePortsLocationsGetResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a ExpressRoutePortsLocations. */\nexport interface ExpressRoutePortsLocations {\n  /**\n   * Retrieves all ExpressRoutePort peering locations. Does not return available bandwidths for each\n   * location. Available bandwidths can only be obtained when retrieving a specific peering location.\n   * @param options The options parameters.\n   */\n  list(\n    options?: ExpressRoutePortsLocationsListOptionalParams,\n  ): PagedAsyncIterableIterator<ExpressRoutePortsLocation>;\n  /**\n   * Retrieves a single ExpressRoutePort peering location, including the list of available bandwidths\n   * available at said peering location.\n   * @param locationName Name of the requested ExpressRoutePort peering location.\n   * @param options The options parameters.\n   */\n  get(\n    locationName: string,\n    options?: ExpressRoutePortsLocationsGetOptionalParams,\n  ): Promise<ExpressRoutePortsLocationsGetResponse>;\n}\n"]}