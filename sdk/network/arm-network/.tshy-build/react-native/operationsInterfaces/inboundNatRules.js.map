{"version":3,"file":"inboundNatRules.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/inboundNatRules.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  InboundNatRule,\n  InboundNatRulesListOptionalParams,\n  InboundNatRulesDeleteOptionalParams,\n  InboundNatRulesGetOptionalParams,\n  InboundNatRulesGetResponse,\n  InboundNatRulesCreateOrUpdateOptionalParams,\n  InboundNatRulesCreateOrUpdateResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a InboundNatRules. */\nexport interface InboundNatRules {\n  /**\n   * Gets all the inbound NAT rules in a load balancer.\n   * @param resourceGroupName The name of the resource group.\n   * @param loadBalancerName The name of the load balancer.\n   * @param options The options parameters.\n   */\n  list(\n    resourceGroupName: string,\n    loadBalancerName: string,\n    options?: InboundNatRulesListOptionalParams,\n  ): PagedAsyncIterableIterator<InboundNatRule>;\n  /**\n   * Deletes the specified load balancer inbound NAT rule.\n   * @param resourceGroupName The name of the resource group.\n   * @param loadBalancerName The name of the load balancer.\n   * @param inboundNatRuleName The name of the inbound NAT rule.\n   * @param options The options parameters.\n   */\n  beginDelete(\n    resourceGroupName: string,\n    loadBalancerName: string,\n    inboundNatRuleName: string,\n    options?: InboundNatRulesDeleteOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Deletes the specified load balancer inbound NAT rule.\n   * @param resourceGroupName The name of the resource group.\n   * @param loadBalancerName The name of the load balancer.\n   * @param inboundNatRuleName The name of the inbound NAT rule.\n   * @param options The options parameters.\n   */\n  beginDeleteAndWait(\n    resourceGroupName: string,\n    loadBalancerName: string,\n    inboundNatRuleName: string,\n    options?: InboundNatRulesDeleteOptionalParams,\n  ): Promise<void>;\n  /**\n   * Gets the specified load balancer inbound NAT rule.\n   * @param resourceGroupName The name of the resource group.\n   * @param loadBalancerName The name of the load balancer.\n   * @param inboundNatRuleName The name of the inbound NAT rule.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    loadBalancerName: string,\n    inboundNatRuleName: string,\n    options?: InboundNatRulesGetOptionalParams,\n  ): Promise<InboundNatRulesGetResponse>;\n  /**\n   * Creates or updates a load balancer inbound NAT rule.\n   * @param resourceGroupName The name of the resource group.\n   * @param loadBalancerName The name of the load balancer.\n   * @param inboundNatRuleName The name of the inbound NAT rule.\n   * @param inboundNatRuleParameters Parameters supplied to the create or update inbound NAT rule\n   *                                 operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdate(\n    resourceGroupName: string,\n    loadBalancerName: string,\n    inboundNatRuleName: string,\n    inboundNatRuleParameters: InboundNatRule,\n    options?: InboundNatRulesCreateOrUpdateOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<InboundNatRulesCreateOrUpdateResponse>,\n      InboundNatRulesCreateOrUpdateResponse\n    >\n  >;\n  /**\n   * Creates or updates a load balancer inbound NAT rule.\n   * @param resourceGroupName The name of the resource group.\n   * @param loadBalancerName The name of the load balancer.\n   * @param inboundNatRuleName The name of the inbound NAT rule.\n   * @param inboundNatRuleParameters Parameters supplied to the create or update inbound NAT rule\n   *                                 operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    loadBalancerName: string,\n    inboundNatRuleName: string,\n    inboundNatRuleParameters: InboundNatRule,\n    options?: InboundNatRulesCreateOrUpdateOptionalParams,\n  ): Promise<InboundNatRulesCreateOrUpdateResponse>;\n}\n"]}