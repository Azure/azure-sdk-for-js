{"version":3,"file":"virtualNetworks.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/virtualNetworks.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  VirtualNetwork,\n  VirtualNetworksListAllOptionalParams,\n  VirtualNetworksListOptionalParams,\n  VirtualNetworkUsage,\n  VirtualNetworksListUsageOptionalParams,\n  PublicIpDdosProtectionStatusResult,\n  VirtualNetworksListDdosProtectionStatusOptionalParams,\n  VirtualNetworksDeleteOptionalParams,\n  VirtualNetworksGetOptionalParams,\n  VirtualNetworksGetResponse,\n  VirtualNetworksCreateOrUpdateOptionalParams,\n  VirtualNetworksCreateOrUpdateResponse,\n  TagsObject,\n  VirtualNetworksUpdateTagsOptionalParams,\n  VirtualNetworksUpdateTagsResponse,\n  VirtualNetworksCheckIPAddressAvailabilityOptionalParams,\n  VirtualNetworksCheckIPAddressAvailabilityResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a VirtualNetworks. */\nexport interface VirtualNetworks {\n  /**\n   * Gets all virtual networks in a subscription.\n   * @param options The options parameters.\n   */\n  listAll(\n    options?: VirtualNetworksListAllOptionalParams,\n  ): PagedAsyncIterableIterator<VirtualNetwork>;\n  /**\n   * Gets all virtual networks in a resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param options The options parameters.\n   */\n  list(\n    resourceGroupName: string,\n    options?: VirtualNetworksListOptionalParams,\n  ): PagedAsyncIterableIterator<VirtualNetwork>;\n  /**\n   * Lists usage stats.\n   * @param resourceGroupName The name of the resource group.\n   * @param virtualNetworkName The name of the virtual network.\n   * @param options The options parameters.\n   */\n  listUsage(\n    resourceGroupName: string,\n    virtualNetworkName: string,\n    options?: VirtualNetworksListUsageOptionalParams,\n  ): PagedAsyncIterableIterator<VirtualNetworkUsage>;\n  /**\n   * Gets the Ddos Protection Status of all IP Addresses under the Virtual Network\n   * @param resourceGroupName The name of the resource group.\n   * @param virtualNetworkName The name of the virtual network.\n   * @param options The options parameters.\n   */\n  beginListDdosProtectionStatusAndWait(\n    resourceGroupName: string,\n    virtualNetworkName: string,\n    options?: VirtualNetworksListDdosProtectionStatusOptionalParams,\n  ): PagedAsyncIterableIterator<PublicIpDdosProtectionStatusResult>;\n  /**\n   * Deletes the specified virtual network.\n   * @param resourceGroupName The name of the resource group.\n   * @param virtualNetworkName The name of the virtual network.\n   * @param options The options parameters.\n   */\n  beginDelete(\n    resourceGroupName: string,\n    virtualNetworkName: string,\n    options?: VirtualNetworksDeleteOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Deletes the specified virtual network.\n   * @param resourceGroupName The name of the resource group.\n   * @param virtualNetworkName The name of the virtual network.\n   * @param options The options parameters.\n   */\n  beginDeleteAndWait(\n    resourceGroupName: string,\n    virtualNetworkName: string,\n    options?: VirtualNetworksDeleteOptionalParams,\n  ): Promise<void>;\n  /**\n   * Gets the specified virtual network by resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param virtualNetworkName The name of the virtual network.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    virtualNetworkName: string,\n    options?: VirtualNetworksGetOptionalParams,\n  ): Promise<VirtualNetworksGetResponse>;\n  /**\n   * Creates or updates a virtual network in the specified resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param virtualNetworkName The name of the virtual network.\n   * @param parameters Parameters supplied to the create or update virtual network operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdate(\n    resourceGroupName: string,\n    virtualNetworkName: string,\n    parameters: VirtualNetwork,\n    options?: VirtualNetworksCreateOrUpdateOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<VirtualNetworksCreateOrUpdateResponse>,\n      VirtualNetworksCreateOrUpdateResponse\n    >\n  >;\n  /**\n   * Creates or updates a virtual network in the specified resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param virtualNetworkName The name of the virtual network.\n   * @param parameters Parameters supplied to the create or update virtual network operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    virtualNetworkName: string,\n    parameters: VirtualNetwork,\n    options?: VirtualNetworksCreateOrUpdateOptionalParams,\n  ): Promise<VirtualNetworksCreateOrUpdateResponse>;\n  /**\n   * Updates a virtual network tags.\n   * @param resourceGroupName The name of the resource group.\n   * @param virtualNetworkName The name of the virtual network.\n   * @param parameters Parameters supplied to update virtual network tags.\n   * @param options The options parameters.\n   */\n  updateTags(\n    resourceGroupName: string,\n    virtualNetworkName: string,\n    parameters: TagsObject,\n    options?: VirtualNetworksUpdateTagsOptionalParams,\n  ): Promise<VirtualNetworksUpdateTagsResponse>;\n  /**\n   * Checks whether a private IP address is available for use.\n   * @param resourceGroupName The name of the resource group.\n   * @param virtualNetworkName The name of the virtual network.\n   * @param ipAddress The private IP address to be verified.\n   * @param options The options parameters.\n   */\n  checkIPAddressAvailability(\n    resourceGroupName: string,\n    virtualNetworkName: string,\n    ipAddress: string,\n    options?: VirtualNetworksCheckIPAddressAvailabilityOptionalParams,\n  ): Promise<VirtualNetworksCheckIPAddressAvailabilityResponse>;\n}\n"]}