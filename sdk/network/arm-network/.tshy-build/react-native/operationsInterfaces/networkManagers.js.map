{"version":3,"file":"networkManagers.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/networkManagers.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  NetworkManager,\n  NetworkManagersListBySubscriptionOptionalParams,\n  NetworkManagersListOptionalParams,\n  NetworkManagersGetOptionalParams,\n  NetworkManagersGetResponse,\n  NetworkManagersCreateOrUpdateOptionalParams,\n  NetworkManagersCreateOrUpdateResponse,\n  NetworkManagersDeleteOptionalParams,\n  PatchObject,\n  NetworkManagersPatchOptionalParams,\n  NetworkManagersPatchResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a NetworkManagers. */\nexport interface NetworkManagers {\n  /**\n   * List all network managers in a subscription.\n   * @param options The options parameters.\n   */\n  listBySubscription(\n    options?: NetworkManagersListBySubscriptionOptionalParams,\n  ): PagedAsyncIterableIterator<NetworkManager>;\n  /**\n   * List network managers in a resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param options The options parameters.\n   */\n  list(\n    resourceGroupName: string,\n    options?: NetworkManagersListOptionalParams,\n  ): PagedAsyncIterableIterator<NetworkManager>;\n  /**\n   * Gets the specified Network Manager.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkManagerName The name of the network manager.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    networkManagerName: string,\n    options?: NetworkManagersGetOptionalParams,\n  ): Promise<NetworkManagersGetResponse>;\n  /**\n   * Creates or updates a Network Manager.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkManagerName The name of the network manager.\n   * @param parameters Parameters supplied to specify which network manager is.\n   * @param options The options parameters.\n   */\n  createOrUpdate(\n    resourceGroupName: string,\n    networkManagerName: string,\n    parameters: NetworkManager,\n    options?: NetworkManagersCreateOrUpdateOptionalParams,\n  ): Promise<NetworkManagersCreateOrUpdateResponse>;\n  /**\n   * Deletes a network manager.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkManagerName The name of the network manager.\n   * @param options The options parameters.\n   */\n  beginDelete(\n    resourceGroupName: string,\n    networkManagerName: string,\n    options?: NetworkManagersDeleteOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Deletes a network manager.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkManagerName The name of the network manager.\n   * @param options The options parameters.\n   */\n  beginDeleteAndWait(\n    resourceGroupName: string,\n    networkManagerName: string,\n    options?: NetworkManagersDeleteOptionalParams,\n  ): Promise<void>;\n  /**\n   * Patch NetworkManager.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkManagerName The name of the network manager.\n   * @param parameters Parameters supplied to specify which network manager is.\n   * @param options The options parameters.\n   */\n  patch(\n    resourceGroupName: string,\n    networkManagerName: string,\n    parameters: PatchObject,\n    options?: NetworkManagersPatchOptionalParams,\n  ): Promise<NetworkManagersPatchResponse>;\n}\n"]}