{"version":3,"file":"expressRouteCrossConnectionPeerings.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/expressRouteCrossConnectionPeerings.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  ExpressRouteCrossConnectionPeering,\n  ExpressRouteCrossConnectionPeeringsListOptionalParams,\n  ExpressRouteCrossConnectionPeeringsDeleteOptionalParams,\n  ExpressRouteCrossConnectionPeeringsGetOptionalParams,\n  ExpressRouteCrossConnectionPeeringsGetResponse,\n  ExpressRouteCrossConnectionPeeringsCreateOrUpdateOptionalParams,\n  ExpressRouteCrossConnectionPeeringsCreateOrUpdateResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a ExpressRouteCrossConnectionPeerings. */\nexport interface ExpressRouteCrossConnectionPeerings {\n  /**\n   * Gets all peerings in a specified ExpressRouteCrossConnection.\n   * @param resourceGroupName The name of the resource group.\n   * @param crossConnectionName The name of the ExpressRouteCrossConnection.\n   * @param options The options parameters.\n   */\n  list(\n    resourceGroupName: string,\n    crossConnectionName: string,\n    options?: ExpressRouteCrossConnectionPeeringsListOptionalParams,\n  ): PagedAsyncIterableIterator<ExpressRouteCrossConnectionPeering>;\n  /**\n   * Deletes the specified peering from the ExpressRouteCrossConnection.\n   * @param resourceGroupName The name of the resource group.\n   * @param crossConnectionName The name of the ExpressRouteCrossConnection.\n   * @param peeringName The name of the peering.\n   * @param options The options parameters.\n   */\n  beginDelete(\n    resourceGroupName: string,\n    crossConnectionName: string,\n    peeringName: string,\n    options?: ExpressRouteCrossConnectionPeeringsDeleteOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Deletes the specified peering from the ExpressRouteCrossConnection.\n   * @param resourceGroupName The name of the resource group.\n   * @param crossConnectionName The name of the ExpressRouteCrossConnection.\n   * @param peeringName The name of the peering.\n   * @param options The options parameters.\n   */\n  beginDeleteAndWait(\n    resourceGroupName: string,\n    crossConnectionName: string,\n    peeringName: string,\n    options?: ExpressRouteCrossConnectionPeeringsDeleteOptionalParams,\n  ): Promise<void>;\n  /**\n   * Gets the specified peering for the ExpressRouteCrossConnection.\n   * @param resourceGroupName The name of the resource group.\n   * @param crossConnectionName The name of the ExpressRouteCrossConnection.\n   * @param peeringName The name of the peering.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    crossConnectionName: string,\n    peeringName: string,\n    options?: ExpressRouteCrossConnectionPeeringsGetOptionalParams,\n  ): Promise<ExpressRouteCrossConnectionPeeringsGetResponse>;\n  /**\n   * Creates or updates a peering in the specified ExpressRouteCrossConnection.\n   * @param resourceGroupName The name of the resource group.\n   * @param crossConnectionName The name of the ExpressRouteCrossConnection.\n   * @param peeringName The name of the peering.\n   * @param peeringParameters Parameters supplied to the create or update ExpressRouteCrossConnection\n   *                          peering operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdate(\n    resourceGroupName: string,\n    crossConnectionName: string,\n    peeringName: string,\n    peeringParameters: ExpressRouteCrossConnectionPeering,\n    options?: ExpressRouteCrossConnectionPeeringsCreateOrUpdateOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ExpressRouteCrossConnectionPeeringsCreateOrUpdateResponse>,\n      ExpressRouteCrossConnectionPeeringsCreateOrUpdateResponse\n    >\n  >;\n  /**\n   * Creates or updates a peering in the specified ExpressRouteCrossConnection.\n   * @param resourceGroupName The name of the resource group.\n   * @param crossConnectionName The name of the ExpressRouteCrossConnection.\n   * @param peeringName The name of the peering.\n   * @param peeringParameters Parameters supplied to the create or update ExpressRouteCrossConnection\n   *                          peering operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    crossConnectionName: string,\n    peeringName: string,\n    peeringParameters: ExpressRouteCrossConnectionPeering,\n    options?: ExpressRouteCrossConnectionPeeringsCreateOrUpdateOptionalParams,\n  ): Promise<ExpressRouteCrossConnectionPeeringsCreateOrUpdateResponse>;\n}\n"]}