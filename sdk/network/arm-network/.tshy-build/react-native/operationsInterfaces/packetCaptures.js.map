{"version":3,"file":"packetCaptures.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/packetCaptures.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  PacketCaptureResult,\n  PacketCapturesListOptionalParams,\n  PacketCapture,\n  PacketCapturesCreateOptionalParams,\n  PacketCapturesCreateResponse,\n  PacketCapturesGetOptionalParams,\n  PacketCapturesGetResponse,\n  PacketCapturesDeleteOptionalParams,\n  PacketCapturesStopOptionalParams,\n  PacketCapturesGetStatusOptionalParams,\n  PacketCapturesGetStatusResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a PacketCaptures. */\nexport interface PacketCaptures {\n  /**\n   * Lists all packet capture sessions within the specified resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkWatcherName The name of the Network Watcher resource.\n   * @param options The options parameters.\n   */\n  list(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    options?: PacketCapturesListOptionalParams,\n  ): PagedAsyncIterableIterator<PacketCaptureResult>;\n  /**\n   * Create and start a packet capture on the specified VM.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkWatcherName The name of the network watcher.\n   * @param packetCaptureName The name of the packet capture session.\n   * @param parameters Parameters that define the create packet capture operation.\n   * @param options The options parameters.\n   */\n  beginCreate(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    packetCaptureName: string,\n    parameters: PacketCapture,\n    options?: PacketCapturesCreateOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<PacketCapturesCreateResponse>,\n      PacketCapturesCreateResponse\n    >\n  >;\n  /**\n   * Create and start a packet capture on the specified VM.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkWatcherName The name of the network watcher.\n   * @param packetCaptureName The name of the packet capture session.\n   * @param parameters Parameters that define the create packet capture operation.\n   * @param options The options parameters.\n   */\n  beginCreateAndWait(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    packetCaptureName: string,\n    parameters: PacketCapture,\n    options?: PacketCapturesCreateOptionalParams,\n  ): Promise<PacketCapturesCreateResponse>;\n  /**\n   * Gets a packet capture session by name.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkWatcherName The name of the network watcher.\n   * @param packetCaptureName The name of the packet capture session.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    packetCaptureName: string,\n    options?: PacketCapturesGetOptionalParams,\n  ): Promise<PacketCapturesGetResponse>;\n  /**\n   * Deletes the specified packet capture session.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkWatcherName The name of the network watcher.\n   * @param packetCaptureName The name of the packet capture session.\n   * @param options The options parameters.\n   */\n  beginDelete(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    packetCaptureName: string,\n    options?: PacketCapturesDeleteOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Deletes the specified packet capture session.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkWatcherName The name of the network watcher.\n   * @param packetCaptureName The name of the packet capture session.\n   * @param options The options parameters.\n   */\n  beginDeleteAndWait(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    packetCaptureName: string,\n    options?: PacketCapturesDeleteOptionalParams,\n  ): Promise<void>;\n  /**\n   * Stops a specified packet capture session.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkWatcherName The name of the network watcher.\n   * @param packetCaptureName The name of the packet capture session.\n   * @param options The options parameters.\n   */\n  beginStop(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    packetCaptureName: string,\n    options?: PacketCapturesStopOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Stops a specified packet capture session.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkWatcherName The name of the network watcher.\n   * @param packetCaptureName The name of the packet capture session.\n   * @param options The options parameters.\n   */\n  beginStopAndWait(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    packetCaptureName: string,\n    options?: PacketCapturesStopOptionalParams,\n  ): Promise<void>;\n  /**\n   * Query the status of a running packet capture session.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkWatcherName The name of the Network Watcher resource.\n   * @param packetCaptureName The name given to the packet capture session.\n   * @param options The options parameters.\n   */\n  beginGetStatus(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    packetCaptureName: string,\n    options?: PacketCapturesGetStatusOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<PacketCapturesGetStatusResponse>,\n      PacketCapturesGetStatusResponse\n    >\n  >;\n  /**\n   * Query the status of a running packet capture session.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkWatcherName The name of the Network Watcher resource.\n   * @param packetCaptureName The name given to the packet capture session.\n   * @param options The options parameters.\n   */\n  beginGetStatusAndWait(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    packetCaptureName: string,\n    options?: PacketCapturesGetStatusOptionalParams,\n  ): Promise<PacketCapturesGetStatusResponse>;\n}\n"]}