{"version":3,"file":"routeFilters.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/routeFilters.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  RouteFilter,\n  RouteFiltersListByResourceGroupOptionalParams,\n  RouteFiltersListOptionalParams,\n  RouteFiltersDeleteOptionalParams,\n  RouteFiltersGetOptionalParams,\n  RouteFiltersGetResponse,\n  RouteFiltersCreateOrUpdateOptionalParams,\n  RouteFiltersCreateOrUpdateResponse,\n  TagsObject,\n  RouteFiltersUpdateTagsOptionalParams,\n  RouteFiltersUpdateTagsResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a RouteFilters. */\nexport interface RouteFilters {\n  /**\n   * Gets all route filters in a resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param options The options parameters.\n   */\n  listByResourceGroup(\n    resourceGroupName: string,\n    options?: RouteFiltersListByResourceGroupOptionalParams,\n  ): PagedAsyncIterableIterator<RouteFilter>;\n  /**\n   * Gets all route filters in a subscription.\n   * @param options The options parameters.\n   */\n  list(\n    options?: RouteFiltersListOptionalParams,\n  ): PagedAsyncIterableIterator<RouteFilter>;\n  /**\n   * Deletes the specified route filter.\n   * @param resourceGroupName The name of the resource group.\n   * @param routeFilterName The name of the route filter.\n   * @param options The options parameters.\n   */\n  beginDelete(\n    resourceGroupName: string,\n    routeFilterName: string,\n    options?: RouteFiltersDeleteOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Deletes the specified route filter.\n   * @param resourceGroupName The name of the resource group.\n   * @param routeFilterName The name of the route filter.\n   * @param options The options parameters.\n   */\n  beginDeleteAndWait(\n    resourceGroupName: string,\n    routeFilterName: string,\n    options?: RouteFiltersDeleteOptionalParams,\n  ): Promise<void>;\n  /**\n   * Gets the specified route filter.\n   * @param resourceGroupName The name of the resource group.\n   * @param routeFilterName The name of the route filter.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    routeFilterName: string,\n    options?: RouteFiltersGetOptionalParams,\n  ): Promise<RouteFiltersGetResponse>;\n  /**\n   * Creates or updates a route filter in a specified resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param routeFilterName The name of the route filter.\n   * @param routeFilterParameters Parameters supplied to the create or update route filter operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdate(\n    resourceGroupName: string,\n    routeFilterName: string,\n    routeFilterParameters: RouteFilter,\n    options?: RouteFiltersCreateOrUpdateOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<RouteFiltersCreateOrUpdateResponse>,\n      RouteFiltersCreateOrUpdateResponse\n    >\n  >;\n  /**\n   * Creates or updates a route filter in a specified resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param routeFilterName The name of the route filter.\n   * @param routeFilterParameters Parameters supplied to the create or update route filter operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    routeFilterName: string,\n    routeFilterParameters: RouteFilter,\n    options?: RouteFiltersCreateOrUpdateOptionalParams,\n  ): Promise<RouteFiltersCreateOrUpdateResponse>;\n  /**\n   * Updates tags of a route filter.\n   * @param resourceGroupName The name of the resource group.\n   * @param routeFilterName The name of the route filter.\n   * @param parameters Parameters supplied to update route filter tags.\n   * @param options The options parameters.\n   */\n  updateTags(\n    resourceGroupName: string,\n    routeFilterName: string,\n    parameters: TagsObject,\n    options?: RouteFiltersUpdateTagsOptionalParams,\n  ): Promise<RouteFiltersUpdateTagsResponse>;\n}\n"]}