{"version":3,"file":"expressRoutePorts.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/expressRoutePorts.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  ExpressRoutePort,\n  ExpressRoutePortsListByResourceGroupOptionalParams,\n  ExpressRoutePortsListOptionalParams,\n  ExpressRoutePortsDeleteOptionalParams,\n  ExpressRoutePortsGetOptionalParams,\n  ExpressRoutePortsGetResponse,\n  ExpressRoutePortsCreateOrUpdateOptionalParams,\n  ExpressRoutePortsCreateOrUpdateResponse,\n  TagsObject,\n  ExpressRoutePortsUpdateTagsOptionalParams,\n  ExpressRoutePortsUpdateTagsResponse,\n  GenerateExpressRoutePortsLOARequest,\n  ExpressRoutePortsGenerateLOAOptionalParams,\n  ExpressRoutePortsGenerateLOAResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a ExpressRoutePorts. */\nexport interface ExpressRoutePorts {\n  /**\n   * List all the ExpressRoutePort resources in the specified resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param options The options parameters.\n   */\n  listByResourceGroup(\n    resourceGroupName: string,\n    options?: ExpressRoutePortsListByResourceGroupOptionalParams,\n  ): PagedAsyncIterableIterator<ExpressRoutePort>;\n  /**\n   * List all the ExpressRoutePort resources in the specified subscription.\n   * @param options The options parameters.\n   */\n  list(\n    options?: ExpressRoutePortsListOptionalParams,\n  ): PagedAsyncIterableIterator<ExpressRoutePort>;\n  /**\n   * Deletes the specified ExpressRoutePort resource.\n   * @param resourceGroupName The name of the resource group.\n   * @param expressRoutePortName The name of the ExpressRoutePort resource.\n   * @param options The options parameters.\n   */\n  beginDelete(\n    resourceGroupName: string,\n    expressRoutePortName: string,\n    options?: ExpressRoutePortsDeleteOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Deletes the specified ExpressRoutePort resource.\n   * @param resourceGroupName The name of the resource group.\n   * @param expressRoutePortName The name of the ExpressRoutePort resource.\n   * @param options The options parameters.\n   */\n  beginDeleteAndWait(\n    resourceGroupName: string,\n    expressRoutePortName: string,\n    options?: ExpressRoutePortsDeleteOptionalParams,\n  ): Promise<void>;\n  /**\n   * Retrieves the requested ExpressRoutePort resource.\n   * @param resourceGroupName The name of the resource group.\n   * @param expressRoutePortName The name of ExpressRoutePort.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    expressRoutePortName: string,\n    options?: ExpressRoutePortsGetOptionalParams,\n  ): Promise<ExpressRoutePortsGetResponse>;\n  /**\n   * Creates or updates the specified ExpressRoutePort resource.\n   * @param resourceGroupName The name of the resource group.\n   * @param expressRoutePortName The name of the ExpressRoutePort resource.\n   * @param parameters Parameters supplied to the create ExpressRoutePort operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdate(\n    resourceGroupName: string,\n    expressRoutePortName: string,\n    parameters: ExpressRoutePort,\n    options?: ExpressRoutePortsCreateOrUpdateOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ExpressRoutePortsCreateOrUpdateResponse>,\n      ExpressRoutePortsCreateOrUpdateResponse\n    >\n  >;\n  /**\n   * Creates or updates the specified ExpressRoutePort resource.\n   * @param resourceGroupName The name of the resource group.\n   * @param expressRoutePortName The name of the ExpressRoutePort resource.\n   * @param parameters Parameters supplied to the create ExpressRoutePort operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    expressRoutePortName: string,\n    parameters: ExpressRoutePort,\n    options?: ExpressRoutePortsCreateOrUpdateOptionalParams,\n  ): Promise<ExpressRoutePortsCreateOrUpdateResponse>;\n  /**\n   * Update ExpressRoutePort tags.\n   * @param resourceGroupName The name of the resource group.\n   * @param expressRoutePortName The name of the ExpressRoutePort resource.\n   * @param parameters Parameters supplied to update ExpressRoutePort resource tags.\n   * @param options The options parameters.\n   */\n  updateTags(\n    resourceGroupName: string,\n    expressRoutePortName: string,\n    parameters: TagsObject,\n    options?: ExpressRoutePortsUpdateTagsOptionalParams,\n  ): Promise<ExpressRoutePortsUpdateTagsResponse>;\n  /**\n   * Generate a letter of authorization for the requested ExpressRoutePort resource.\n   * @param resourceGroupName The name of the resource group.\n   * @param expressRoutePortName The name of ExpressRoutePort.\n   * @param request Request parameters supplied to generate a letter of authorization.\n   * @param options The options parameters.\n   */\n  generateLOA(\n    resourceGroupName: string,\n    expressRoutePortName: string,\n    request: GenerateExpressRoutePortsLOARequest,\n    options?: ExpressRoutePortsGenerateLOAOptionalParams,\n  ): Promise<ExpressRoutePortsGenerateLOAResponse>;\n}\n"]}