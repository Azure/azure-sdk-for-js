/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link ApplicationGatewaySkuName} that the service accepts. */
export var KnownApplicationGatewaySkuName;
(function (KnownApplicationGatewaySkuName) {
    /** StandardSmall */
    KnownApplicationGatewaySkuName["StandardSmall"] = "Standard_Small";
    /** StandardMedium */
    KnownApplicationGatewaySkuName["StandardMedium"] = "Standard_Medium";
    /** StandardLarge */
    KnownApplicationGatewaySkuName["StandardLarge"] = "Standard_Large";
    /** WAFMedium */
    KnownApplicationGatewaySkuName["WAFMedium"] = "WAF_Medium";
    /** WAFLarge */
    KnownApplicationGatewaySkuName["WAFLarge"] = "WAF_Large";
    /** StandardV2 */
    KnownApplicationGatewaySkuName["StandardV2"] = "Standard_v2";
    /** WAFV2 */
    KnownApplicationGatewaySkuName["WAFV2"] = "WAF_v2";
    /** Basic */
    KnownApplicationGatewaySkuName["Basic"] = "Basic";
})(KnownApplicationGatewaySkuName || (KnownApplicationGatewaySkuName = {}));
/** Known values of {@link ApplicationGatewayTier} that the service accepts. */
export var KnownApplicationGatewayTier;
(function (KnownApplicationGatewayTier) {
    /** Standard */
    KnownApplicationGatewayTier["Standard"] = "Standard";
    /** WAF */
    KnownApplicationGatewayTier["WAF"] = "WAF";
    /** StandardV2 */
    KnownApplicationGatewayTier["StandardV2"] = "Standard_v2";
    /** WAFV2 */
    KnownApplicationGatewayTier["WAFV2"] = "WAF_v2";
    /** Basic */
    KnownApplicationGatewayTier["Basic"] = "Basic";
})(KnownApplicationGatewayTier || (KnownApplicationGatewayTier = {}));
/** Known values of {@link ApplicationGatewaySkuFamily} that the service accepts. */
export var KnownApplicationGatewaySkuFamily;
(function (KnownApplicationGatewaySkuFamily) {
    /** Generation1 */
    KnownApplicationGatewaySkuFamily["Generation1"] = "Generation_1";
    /** Generation2 */
    KnownApplicationGatewaySkuFamily["Generation2"] = "Generation_2";
})(KnownApplicationGatewaySkuFamily || (KnownApplicationGatewaySkuFamily = {}));
/** Known values of {@link ApplicationGatewaySslProtocol} that the service accepts. */
export var KnownApplicationGatewaySslProtocol;
(function (KnownApplicationGatewaySslProtocol) {
    /** TLSv10 */
    KnownApplicationGatewaySslProtocol["TLSv10"] = "TLSv1_0";
    /** TLSv11 */
    KnownApplicationGatewaySslProtocol["TLSv11"] = "TLSv1_1";
    /** TLSv12 */
    KnownApplicationGatewaySslProtocol["TLSv12"] = "TLSv1_2";
    /** TLSv13 */
    KnownApplicationGatewaySslProtocol["TLSv13"] = "TLSv1_3";
})(KnownApplicationGatewaySslProtocol || (KnownApplicationGatewaySslProtocol = {}));
/** Known values of {@link ApplicationGatewaySslPolicyType} that the service accepts. */
export var KnownApplicationGatewaySslPolicyType;
(function (KnownApplicationGatewaySslPolicyType) {
    /** Predefined */
    KnownApplicationGatewaySslPolicyType["Predefined"] = "Predefined";
    /** Custom */
    KnownApplicationGatewaySslPolicyType["Custom"] = "Custom";
    /** CustomV2 */
    KnownApplicationGatewaySslPolicyType["CustomV2"] = "CustomV2";
})(KnownApplicationGatewaySslPolicyType || (KnownApplicationGatewaySslPolicyType = {}));
/** Known values of {@link ApplicationGatewaySslPolicyName} that the service accepts. */
export var KnownApplicationGatewaySslPolicyName;
(function (KnownApplicationGatewaySslPolicyName) {
    /** AppGwSslPolicy20150501 */
    KnownApplicationGatewaySslPolicyName["AppGwSslPolicy20150501"] = "AppGwSslPolicy20150501";
    /** AppGwSslPolicy20170401 */
    KnownApplicationGatewaySslPolicyName["AppGwSslPolicy20170401"] = "AppGwSslPolicy20170401";
    /** AppGwSslPolicy20170401S */
    KnownApplicationGatewaySslPolicyName["AppGwSslPolicy20170401S"] = "AppGwSslPolicy20170401S";
    /** AppGwSslPolicy20220101 */
    KnownApplicationGatewaySslPolicyName["AppGwSslPolicy20220101"] = "AppGwSslPolicy20220101";
    /** AppGwSslPolicy20220101S */
    KnownApplicationGatewaySslPolicyName["AppGwSslPolicy20220101S"] = "AppGwSslPolicy20220101S";
})(KnownApplicationGatewaySslPolicyName || (KnownApplicationGatewaySslPolicyName = {}));
/** Known values of {@link ApplicationGatewaySslCipherSuite} that the service accepts. */
export var KnownApplicationGatewaySslCipherSuite;
(function (KnownApplicationGatewaySslCipherSuite) {
    /** TLSEcdheRSAWithAES256CBCSHA384 */
    KnownApplicationGatewaySslCipherSuite["TLSEcdheRSAWithAES256CBCSHA384"] = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384";
    /** TLSEcdheRSAWithAES128CBCSHA256 */
    KnownApplicationGatewaySslCipherSuite["TLSEcdheRSAWithAES128CBCSHA256"] = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256";
    /** TLSEcdheRSAWithAES256CBCSHA */
    KnownApplicationGatewaySslCipherSuite["TLSEcdheRSAWithAES256CBCSHA"] = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA";
    /** TLSEcdheRSAWithAES128CBCSHA */
    KnownApplicationGatewaySslCipherSuite["TLSEcdheRSAWithAES128CBCSHA"] = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA";
    /** TLSDHERSAWithAES256GCMSHA384 */
    KnownApplicationGatewaySslCipherSuite["TLSDHERSAWithAES256GCMSHA384"] = "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384";
    /** TLSDHERSAWithAES128GCMSHA256 */
    KnownApplicationGatewaySslCipherSuite["TLSDHERSAWithAES128GCMSHA256"] = "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256";
    /** TLSDHERSAWithAES256CBCSHA */
    KnownApplicationGatewaySslCipherSuite["TLSDHERSAWithAES256CBCSHA"] = "TLS_DHE_RSA_WITH_AES_256_CBC_SHA";
    /** TLSDHERSAWithAES128CBCSHA */
    KnownApplicationGatewaySslCipherSuite["TLSDHERSAWithAES128CBCSHA"] = "TLS_DHE_RSA_WITH_AES_128_CBC_SHA";
    /** TLSRSAWithAES256GCMSHA384 */
    KnownApplicationGatewaySslCipherSuite["TLSRSAWithAES256GCMSHA384"] = "TLS_RSA_WITH_AES_256_GCM_SHA384";
    /** TLSRSAWithAES128GCMSHA256 */
    KnownApplicationGatewaySslCipherSuite["TLSRSAWithAES128GCMSHA256"] = "TLS_RSA_WITH_AES_128_GCM_SHA256";
    /** TLSRSAWithAES256CBCSHA256 */
    KnownApplicationGatewaySslCipherSuite["TLSRSAWithAES256CBCSHA256"] = "TLS_RSA_WITH_AES_256_CBC_SHA256";
    /** TLSRSAWithAES128CBCSHA256 */
    KnownApplicationGatewaySslCipherSuite["TLSRSAWithAES128CBCSHA256"] = "TLS_RSA_WITH_AES_128_CBC_SHA256";
    /** TLSRSAWithAES256CBCSHA */
    KnownApplicationGatewaySslCipherSuite["TLSRSAWithAES256CBCSHA"] = "TLS_RSA_WITH_AES_256_CBC_SHA";
    /** TLSRSAWithAES128CBCSHA */
    KnownApplicationGatewaySslCipherSuite["TLSRSAWithAES128CBCSHA"] = "TLS_RSA_WITH_AES_128_CBC_SHA";
    /** TLSEcdheEcdsaWithAES256GCMSHA384 */
    KnownApplicationGatewaySslCipherSuite["TLSEcdheEcdsaWithAES256GCMSHA384"] = "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384";
    /** TLSEcdheEcdsaWithAES128GCMSHA256 */
    KnownApplicationGatewaySslCipherSuite["TLSEcdheEcdsaWithAES128GCMSHA256"] = "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256";
    /** TLSEcdheEcdsaWithAES256CBCSHA384 */
    KnownApplicationGatewaySslCipherSuite["TLSEcdheEcdsaWithAES256CBCSHA384"] = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384";
    /** TLSEcdheEcdsaWithAES128CBCSHA256 */
    KnownApplicationGatewaySslCipherSuite["TLSEcdheEcdsaWithAES128CBCSHA256"] = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256";
    /** TLSEcdheEcdsaWithAES256CBCSHA */
    KnownApplicationGatewaySslCipherSuite["TLSEcdheEcdsaWithAES256CBCSHA"] = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA";
    /** TLSEcdheEcdsaWithAES128CBCSHA */
    KnownApplicationGatewaySslCipherSuite["TLSEcdheEcdsaWithAES128CBCSHA"] = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA";
    /** TLSDHEDSSWithAES256CBCSHA256 */
    KnownApplicationGatewaySslCipherSuite["TLSDHEDSSWithAES256CBCSHA256"] = "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256";
    /** TLSDHEDSSWithAES128CBCSHA256 */
    KnownApplicationGatewaySslCipherSuite["TLSDHEDSSWithAES128CBCSHA256"] = "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256";
    /** TLSDHEDSSWithAES256CBCSHA */
    KnownApplicationGatewaySslCipherSuite["TLSDHEDSSWithAES256CBCSHA"] = "TLS_DHE_DSS_WITH_AES_256_CBC_SHA";
    /** TLSDHEDSSWithAES128CBCSHA */
    KnownApplicationGatewaySslCipherSuite["TLSDHEDSSWithAES128CBCSHA"] = "TLS_DHE_DSS_WITH_AES_128_CBC_SHA";
    /** TLSRSAWith3DESEDECBCSHA */
    KnownApplicationGatewaySslCipherSuite["TLSRSAWith3DESEDECBCSHA"] = "TLS_RSA_WITH_3DES_EDE_CBC_SHA";
    /** TLSDHEDSSWith3DESEDECBCSHA */
    KnownApplicationGatewaySslCipherSuite["TLSDHEDSSWith3DESEDECBCSHA"] = "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA";
    /** TLSEcdheRSAWithAES128GCMSHA256 */
    KnownApplicationGatewaySslCipherSuite["TLSEcdheRSAWithAES128GCMSHA256"] = "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256";
    /** TLSEcdheRSAWithAES256GCMSHA384 */
    KnownApplicationGatewaySslCipherSuite["TLSEcdheRSAWithAES256GCMSHA384"] = "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384";
})(KnownApplicationGatewaySslCipherSuite || (KnownApplicationGatewaySslCipherSuite = {}));
/** Known values of {@link ApplicationGatewayOperationalState} that the service accepts. */
export var KnownApplicationGatewayOperationalState;
(function (KnownApplicationGatewayOperationalState) {
    /** Stopped */
    KnownApplicationGatewayOperationalState["Stopped"] = "Stopped";
    /** Starting */
    KnownApplicationGatewayOperationalState["Starting"] = "Starting";
    /** Running */
    KnownApplicationGatewayOperationalState["Running"] = "Running";
    /** Stopping */
    KnownApplicationGatewayOperationalState["Stopping"] = "Stopping";
})(KnownApplicationGatewayOperationalState || (KnownApplicationGatewayOperationalState = {}));
/** Known values of {@link ProvisioningState} that the service accepts. */
export var KnownProvisioningState;
(function (KnownProvisioningState) {
    /** Failed */
    KnownProvisioningState["Failed"] = "Failed";
    /** Succeeded */
    KnownProvisioningState["Succeeded"] = "Succeeded";
    /** Canceled */
    KnownProvisioningState["Canceled"] = "Canceled";
    /** Creating */
    KnownProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownProvisioningState["Updating"] = "Updating";
    /** Deleting */
    KnownProvisioningState["Deleting"] = "Deleting";
})(KnownProvisioningState || (KnownProvisioningState = {}));
/** Known values of {@link IPAllocationMethod} that the service accepts. */
export var KnownIPAllocationMethod;
(function (KnownIPAllocationMethod) {
    /** Static */
    KnownIPAllocationMethod["Static"] = "Static";
    /** Dynamic */
    KnownIPAllocationMethod["Dynamic"] = "Dynamic";
})(KnownIPAllocationMethod || (KnownIPAllocationMethod = {}));
/** Known values of {@link ApplicationGatewayProtocol} that the service accepts. */
export var KnownApplicationGatewayProtocol;
(function (KnownApplicationGatewayProtocol) {
    /** Supported for httpListeners and  backendHttpSettingsCollection properties. */
    KnownApplicationGatewayProtocol["Http"] = "Http";
    /** Supported for httpListeners and  backendHttpSettingsCollection properties. */
    KnownApplicationGatewayProtocol["Https"] = "Https";
    /** Supported for listeners and backendSettingsCollection properties. */
    KnownApplicationGatewayProtocol["Tcp"] = "Tcp";
    /** Supported for listeners and backendSettingsCollection properties. */
    KnownApplicationGatewayProtocol["Tls"] = "Tls";
})(KnownApplicationGatewayProtocol || (KnownApplicationGatewayProtocol = {}));
/** Known values of {@link IPVersion} that the service accepts. */
export var KnownIPVersion;
(function (KnownIPVersion) {
    /** IPv4 */
    KnownIPVersion["IPv4"] = "IPv4";
    /** IPv6 */
    KnownIPVersion["IPv6"] = "IPv6";
})(KnownIPVersion || (KnownIPVersion = {}));
/** Known values of {@link SecurityRuleProtocol} that the service accepts. */
export var KnownSecurityRuleProtocol;
(function (KnownSecurityRuleProtocol) {
    /** Tcp */
    KnownSecurityRuleProtocol["Tcp"] = "Tcp";
    /** Udp */
    KnownSecurityRuleProtocol["Udp"] = "Udp";
    /** Icmp */
    KnownSecurityRuleProtocol["Icmp"] = "Icmp";
    /** Esp */
    KnownSecurityRuleProtocol["Esp"] = "Esp";
    /** Asterisk */
    KnownSecurityRuleProtocol["Asterisk"] = "*";
    /** Ah */
    KnownSecurityRuleProtocol["Ah"] = "Ah";
})(KnownSecurityRuleProtocol || (KnownSecurityRuleProtocol = {}));
/** Known values of {@link SecurityRuleAccess} that the service accepts. */
export var KnownSecurityRuleAccess;
(function (KnownSecurityRuleAccess) {
    /** Allow */
    KnownSecurityRuleAccess["Allow"] = "Allow";
    /** Deny */
    KnownSecurityRuleAccess["Deny"] = "Deny";
})(KnownSecurityRuleAccess || (KnownSecurityRuleAccess = {}));
/** Known values of {@link SecurityRuleDirection} that the service accepts. */
export var KnownSecurityRuleDirection;
(function (KnownSecurityRuleDirection) {
    /** Inbound */
    KnownSecurityRuleDirection["Inbound"] = "Inbound";
    /** Outbound */
    KnownSecurityRuleDirection["Outbound"] = "Outbound";
})(KnownSecurityRuleDirection || (KnownSecurityRuleDirection = {}));
/** Known values of {@link ExtendedLocationTypes} that the service accepts. */
export var KnownExtendedLocationTypes;
(function (KnownExtendedLocationTypes) {
    /** EdgeZone */
    KnownExtendedLocationTypes["EdgeZone"] = "EdgeZone";
})(KnownExtendedLocationTypes || (KnownExtendedLocationTypes = {}));
/** Known values of {@link NetworkInterfaceNicType} that the service accepts. */
export var KnownNetworkInterfaceNicType;
(function (KnownNetworkInterfaceNicType) {
    /** Standard */
    KnownNetworkInterfaceNicType["Standard"] = "Standard";
    /** Elastic */
    KnownNetworkInterfaceNicType["Elastic"] = "Elastic";
})(KnownNetworkInterfaceNicType || (KnownNetworkInterfaceNicType = {}));
/** Known values of {@link NetworkInterfaceMigrationPhase} that the service accepts. */
export var KnownNetworkInterfaceMigrationPhase;
(function (KnownNetworkInterfaceMigrationPhase) {
    /** None */
    KnownNetworkInterfaceMigrationPhase["None"] = "None";
    /** Prepare */
    KnownNetworkInterfaceMigrationPhase["Prepare"] = "Prepare";
    /** Commit */
    KnownNetworkInterfaceMigrationPhase["Commit"] = "Commit";
    /** Abort */
    KnownNetworkInterfaceMigrationPhase["Abort"] = "Abort";
    /** Committed */
    KnownNetworkInterfaceMigrationPhase["Committed"] = "Committed";
})(KnownNetworkInterfaceMigrationPhase || (KnownNetworkInterfaceMigrationPhase = {}));
/** Known values of {@link NetworkInterfaceAuxiliaryMode} that the service accepts. */
export var KnownNetworkInterfaceAuxiliaryMode;
(function (KnownNetworkInterfaceAuxiliaryMode) {
    /** None */
    KnownNetworkInterfaceAuxiliaryMode["None"] = "None";
    /** MaxConnections */
    KnownNetworkInterfaceAuxiliaryMode["MaxConnections"] = "MaxConnections";
    /** Floating */
    KnownNetworkInterfaceAuxiliaryMode["Floating"] = "Floating";
    /** AcceleratedConnections */
    KnownNetworkInterfaceAuxiliaryMode["AcceleratedConnections"] = "AcceleratedConnections";
})(KnownNetworkInterfaceAuxiliaryMode || (KnownNetworkInterfaceAuxiliaryMode = {}));
/** Known values of {@link NetworkInterfaceAuxiliarySku} that the service accepts. */
export var KnownNetworkInterfaceAuxiliarySku;
(function (KnownNetworkInterfaceAuxiliarySku) {
    /** None */
    KnownNetworkInterfaceAuxiliarySku["None"] = "None";
    /** A1 */
    KnownNetworkInterfaceAuxiliarySku["A1"] = "A1";
    /** A2 */
    KnownNetworkInterfaceAuxiliarySku["A2"] = "A2";
    /** A4 */
    KnownNetworkInterfaceAuxiliarySku["A4"] = "A4";
    /** A8 */
    KnownNetworkInterfaceAuxiliarySku["A8"] = "A8";
})(KnownNetworkInterfaceAuxiliarySku || (KnownNetworkInterfaceAuxiliarySku = {}));
/** Known values of {@link FlowLogFormatType} that the service accepts. */
export var KnownFlowLogFormatType;
(function (KnownFlowLogFormatType) {
    /** Json */
    KnownFlowLogFormatType["Json"] = "JSON";
})(KnownFlowLogFormatType || (KnownFlowLogFormatType = {}));
/** Known values of {@link RouteNextHopType} that the service accepts. */
export var KnownRouteNextHopType;
(function (KnownRouteNextHopType) {
    /** VirtualNetworkGateway */
    KnownRouteNextHopType["VirtualNetworkGateway"] = "VirtualNetworkGateway";
    /** VnetLocal */
    KnownRouteNextHopType["VnetLocal"] = "VnetLocal";
    /** Internet */
    KnownRouteNextHopType["Internet"] = "Internet";
    /** VirtualAppliance */
    KnownRouteNextHopType["VirtualAppliance"] = "VirtualAppliance";
    /** None */
    KnownRouteNextHopType["None"] = "None";
})(KnownRouteNextHopType || (KnownRouteNextHopType = {}));
/** Known values of {@link PublicIPAddressSkuName} that the service accepts. */
export var KnownPublicIPAddressSkuName;
(function (KnownPublicIPAddressSkuName) {
    /** Basic */
    KnownPublicIPAddressSkuName["Basic"] = "Basic";
    /** Standard */
    KnownPublicIPAddressSkuName["Standard"] = "Standard";
})(KnownPublicIPAddressSkuName || (KnownPublicIPAddressSkuName = {}));
/** Known values of {@link PublicIPAddressSkuTier} that the service accepts. */
export var KnownPublicIPAddressSkuTier;
(function (KnownPublicIPAddressSkuTier) {
    /** Regional */
    KnownPublicIPAddressSkuTier["Regional"] = "Regional";
    /** Global */
    KnownPublicIPAddressSkuTier["Global"] = "Global";
})(KnownPublicIPAddressSkuTier || (KnownPublicIPAddressSkuTier = {}));
/** Known values of {@link DdosSettingsProtectionMode} that the service accepts. */
export var KnownDdosSettingsProtectionMode;
(function (KnownDdosSettingsProtectionMode) {
    /** VirtualNetworkInherited */
    KnownDdosSettingsProtectionMode["VirtualNetworkInherited"] = "VirtualNetworkInherited";
    /** Enabled */
    KnownDdosSettingsProtectionMode["Enabled"] = "Enabled";
    /** Disabled */
    KnownDdosSettingsProtectionMode["Disabled"] = "Disabled";
})(KnownDdosSettingsProtectionMode || (KnownDdosSettingsProtectionMode = {}));
/** Known values of {@link NatGatewaySkuName} that the service accepts. */
export var KnownNatGatewaySkuName;
(function (KnownNatGatewaySkuName) {
    /** Standard */
    KnownNatGatewaySkuName["Standard"] = "Standard";
})(KnownNatGatewaySkuName || (KnownNatGatewaySkuName = {}));
/** Known values of {@link PublicIPAddressMigrationPhase} that the service accepts. */
export var KnownPublicIPAddressMigrationPhase;
(function (KnownPublicIPAddressMigrationPhase) {
    /** None */
    KnownPublicIPAddressMigrationPhase["None"] = "None";
    /** Prepare */
    KnownPublicIPAddressMigrationPhase["Prepare"] = "Prepare";
    /** Commit */
    KnownPublicIPAddressMigrationPhase["Commit"] = "Commit";
    /** Abort */
    KnownPublicIPAddressMigrationPhase["Abort"] = "Abort";
    /** Committed */
    KnownPublicIPAddressMigrationPhase["Committed"] = "Committed";
})(KnownPublicIPAddressMigrationPhase || (KnownPublicIPAddressMigrationPhase = {}));
/** Known values of {@link DeleteOptions} that the service accepts. */
export var KnownDeleteOptions;
(function (KnownDeleteOptions) {
    /** Delete */
    KnownDeleteOptions["Delete"] = "Delete";
    /** Detach */
    KnownDeleteOptions["Detach"] = "Detach";
})(KnownDeleteOptions || (KnownDeleteOptions = {}));
/** Known values of {@link VirtualNetworkPrivateEndpointNetworkPolicies} that the service accepts. */
export var KnownVirtualNetworkPrivateEndpointNetworkPolicies;
(function (KnownVirtualNetworkPrivateEndpointNetworkPolicies) {
    /** Enabled */
    KnownVirtualNetworkPrivateEndpointNetworkPolicies["Enabled"] = "Enabled";
    /** Disabled */
    KnownVirtualNetworkPrivateEndpointNetworkPolicies["Disabled"] = "Disabled";
    /** NetworkSecurityGroupEnabled */
    KnownVirtualNetworkPrivateEndpointNetworkPolicies["NetworkSecurityGroupEnabled"] = "NetworkSecurityGroupEnabled";
    /** RouteTableEnabled */
    KnownVirtualNetworkPrivateEndpointNetworkPolicies["RouteTableEnabled"] = "RouteTableEnabled";
})(KnownVirtualNetworkPrivateEndpointNetworkPolicies || (KnownVirtualNetworkPrivateEndpointNetworkPolicies = {}));
/** Known values of {@link VirtualNetworkPrivateLinkServiceNetworkPolicies} that the service accepts. */
export var KnownVirtualNetworkPrivateLinkServiceNetworkPolicies;
(function (KnownVirtualNetworkPrivateLinkServiceNetworkPolicies) {
    /** Enabled */
    KnownVirtualNetworkPrivateLinkServiceNetworkPolicies["Enabled"] = "Enabled";
    /** Disabled */
    KnownVirtualNetworkPrivateLinkServiceNetworkPolicies["Disabled"] = "Disabled";
})(KnownVirtualNetworkPrivateLinkServiceNetworkPolicies || (KnownVirtualNetworkPrivateLinkServiceNetworkPolicies = {}));
/** Known values of {@link SharingScope} that the service accepts. */
export var KnownSharingScope;
(function (KnownSharingScope) {
    /** Tenant */
    KnownSharingScope["Tenant"] = "Tenant";
    /** DelegatedServices */
    KnownSharingScope["DelegatedServices"] = "DelegatedServices";
})(KnownSharingScope || (KnownSharingScope = {}));
/** Known values of {@link GatewayLoadBalancerTunnelProtocol} that the service accepts. */
export var KnownGatewayLoadBalancerTunnelProtocol;
(function (KnownGatewayLoadBalancerTunnelProtocol) {
    /** None */
    KnownGatewayLoadBalancerTunnelProtocol["None"] = "None";
    /** Native */
    KnownGatewayLoadBalancerTunnelProtocol["Native"] = "Native";
    /** Vxlan */
    KnownGatewayLoadBalancerTunnelProtocol["Vxlan"] = "VXLAN";
})(KnownGatewayLoadBalancerTunnelProtocol || (KnownGatewayLoadBalancerTunnelProtocol = {}));
/** Known values of {@link GatewayLoadBalancerTunnelInterfaceType} that the service accepts. */
export var KnownGatewayLoadBalancerTunnelInterfaceType;
(function (KnownGatewayLoadBalancerTunnelInterfaceType) {
    /** None */
    KnownGatewayLoadBalancerTunnelInterfaceType["None"] = "None";
    /** Internal */
    KnownGatewayLoadBalancerTunnelInterfaceType["Internal"] = "Internal";
    /** External */
    KnownGatewayLoadBalancerTunnelInterfaceType["External"] = "External";
})(KnownGatewayLoadBalancerTunnelInterfaceType || (KnownGatewayLoadBalancerTunnelInterfaceType = {}));
/** Known values of {@link LoadBalancerBackendAddressAdminState} that the service accepts. */
export var KnownLoadBalancerBackendAddressAdminState;
(function (KnownLoadBalancerBackendAddressAdminState) {
    /** None */
    KnownLoadBalancerBackendAddressAdminState["None"] = "None";
    /** Up */
    KnownLoadBalancerBackendAddressAdminState["Up"] = "Up";
    /** Down */
    KnownLoadBalancerBackendAddressAdminState["Down"] = "Down";
})(KnownLoadBalancerBackendAddressAdminState || (KnownLoadBalancerBackendAddressAdminState = {}));
/** Known values of {@link SyncMode} that the service accepts. */
export var KnownSyncMode;
(function (KnownSyncMode) {
    /** Automatic */
    KnownSyncMode["Automatic"] = "Automatic";
    /** Manual */
    KnownSyncMode["Manual"] = "Manual";
})(KnownSyncMode || (KnownSyncMode = {}));
/** Known values of {@link TransportProtocol} that the service accepts. */
export var KnownTransportProtocol;
(function (KnownTransportProtocol) {
    /** Udp */
    KnownTransportProtocol["Udp"] = "Udp";
    /** Tcp */
    KnownTransportProtocol["Tcp"] = "Tcp";
    /** All */
    KnownTransportProtocol["All"] = "All";
})(KnownTransportProtocol || (KnownTransportProtocol = {}));
/** Known values of {@link ApplicationGatewayCookieBasedAffinity} that the service accepts. */
export var KnownApplicationGatewayCookieBasedAffinity;
(function (KnownApplicationGatewayCookieBasedAffinity) {
    /** Enabled */
    KnownApplicationGatewayCookieBasedAffinity["Enabled"] = "Enabled";
    /** Disabled */
    KnownApplicationGatewayCookieBasedAffinity["Disabled"] = "Disabled";
})(KnownApplicationGatewayCookieBasedAffinity || (KnownApplicationGatewayCookieBasedAffinity = {}));
/** Known values of {@link ApplicationGatewayCustomErrorStatusCode} that the service accepts. */
export var KnownApplicationGatewayCustomErrorStatusCode;
(function (KnownApplicationGatewayCustomErrorStatusCode) {
    /** HttpStatus400 */
    KnownApplicationGatewayCustomErrorStatusCode["HttpStatus400"] = "HttpStatus400";
    /** HttpStatus403 */
    KnownApplicationGatewayCustomErrorStatusCode["HttpStatus403"] = "HttpStatus403";
    /** HttpStatus404 */
    KnownApplicationGatewayCustomErrorStatusCode["HttpStatus404"] = "HttpStatus404";
    /** HttpStatus405 */
    KnownApplicationGatewayCustomErrorStatusCode["HttpStatus405"] = "HttpStatus405";
    /** HttpStatus408 */
    KnownApplicationGatewayCustomErrorStatusCode["HttpStatus408"] = "HttpStatus408";
    /** HttpStatus500 */
    KnownApplicationGatewayCustomErrorStatusCode["HttpStatus500"] = "HttpStatus500";
    /** HttpStatus502 */
    KnownApplicationGatewayCustomErrorStatusCode["HttpStatus502"] = "HttpStatus502";
    /** HttpStatus503 */
    KnownApplicationGatewayCustomErrorStatusCode["HttpStatus503"] = "HttpStatus503";
    /** HttpStatus504 */
    KnownApplicationGatewayCustomErrorStatusCode["HttpStatus504"] = "HttpStatus504";
})(KnownApplicationGatewayCustomErrorStatusCode || (KnownApplicationGatewayCustomErrorStatusCode = {}));
/** Known values of {@link ApplicationGatewayClientRevocationOptions} that the service accepts. */
export var KnownApplicationGatewayClientRevocationOptions;
(function (KnownApplicationGatewayClientRevocationOptions) {
    /** None */
    KnownApplicationGatewayClientRevocationOptions["None"] = "None";
    /** Ocsp */
    KnownApplicationGatewayClientRevocationOptions["Ocsp"] = "OCSP";
})(KnownApplicationGatewayClientRevocationOptions || (KnownApplicationGatewayClientRevocationOptions = {}));
/** Known values of {@link ApplicationGatewayRequestRoutingRuleType} that the service accepts. */
export var KnownApplicationGatewayRequestRoutingRuleType;
(function (KnownApplicationGatewayRequestRoutingRuleType) {
    /** Basic */
    KnownApplicationGatewayRequestRoutingRuleType["Basic"] = "Basic";
    /** PathBasedRouting */
    KnownApplicationGatewayRequestRoutingRuleType["PathBasedRouting"] = "PathBasedRouting";
})(KnownApplicationGatewayRequestRoutingRuleType || (KnownApplicationGatewayRequestRoutingRuleType = {}));
/** Known values of {@link ApplicationGatewayRedirectType} that the service accepts. */
export var KnownApplicationGatewayRedirectType;
(function (KnownApplicationGatewayRedirectType) {
    /** Permanent */
    KnownApplicationGatewayRedirectType["Permanent"] = "Permanent";
    /** Found */
    KnownApplicationGatewayRedirectType["Found"] = "Found";
    /** SeeOther */
    KnownApplicationGatewayRedirectType["SeeOther"] = "SeeOther";
    /** Temporary */
    KnownApplicationGatewayRedirectType["Temporary"] = "Temporary";
})(KnownApplicationGatewayRedirectType || (KnownApplicationGatewayRedirectType = {}));
/** Known values of {@link ApplicationGatewayFirewallMode} that the service accepts. */
export var KnownApplicationGatewayFirewallMode;
(function (KnownApplicationGatewayFirewallMode) {
    /** Detection */
    KnownApplicationGatewayFirewallMode["Detection"] = "Detection";
    /** Prevention */
    KnownApplicationGatewayFirewallMode["Prevention"] = "Prevention";
})(KnownApplicationGatewayFirewallMode || (KnownApplicationGatewayFirewallMode = {}));
/** Known values of {@link ApplicationGatewayLoadDistributionAlgorithm} that the service accepts. */
export var KnownApplicationGatewayLoadDistributionAlgorithm;
(function (KnownApplicationGatewayLoadDistributionAlgorithm) {
    /** RoundRobin */
    KnownApplicationGatewayLoadDistributionAlgorithm["RoundRobin"] = "RoundRobin";
    /** LeastConnections */
    KnownApplicationGatewayLoadDistributionAlgorithm["LeastConnections"] = "LeastConnections";
    /** IpHash */
    KnownApplicationGatewayLoadDistributionAlgorithm["IpHash"] = "IpHash";
})(KnownApplicationGatewayLoadDistributionAlgorithm || (KnownApplicationGatewayLoadDistributionAlgorithm = {}));
/** Known values of {@link ApplicationGatewayBackendHealthServerHealth} that the service accepts. */
export var KnownApplicationGatewayBackendHealthServerHealth;
(function (KnownApplicationGatewayBackendHealthServerHealth) {
    /** Unknown */
    KnownApplicationGatewayBackendHealthServerHealth["Unknown"] = "Unknown";
    /** Up */
    KnownApplicationGatewayBackendHealthServerHealth["Up"] = "Up";
    /** Down */
    KnownApplicationGatewayBackendHealthServerHealth["Down"] = "Down";
    /** Partial */
    KnownApplicationGatewayBackendHealthServerHealth["Partial"] = "Partial";
    /** Draining */
    KnownApplicationGatewayBackendHealthServerHealth["Draining"] = "Draining";
})(KnownApplicationGatewayBackendHealthServerHealth || (KnownApplicationGatewayBackendHealthServerHealth = {}));
/** Known values of {@link ApplicationGatewayWafRuleStateTypes} that the service accepts. */
export var KnownApplicationGatewayWafRuleStateTypes;
(function (KnownApplicationGatewayWafRuleStateTypes) {
    /** Enabled */
    KnownApplicationGatewayWafRuleStateTypes["Enabled"] = "Enabled";
    /** Disabled */
    KnownApplicationGatewayWafRuleStateTypes["Disabled"] = "Disabled";
})(KnownApplicationGatewayWafRuleStateTypes || (KnownApplicationGatewayWafRuleStateTypes = {}));
/** Known values of {@link ApplicationGatewayWafRuleActionTypes} that the service accepts. */
export var KnownApplicationGatewayWafRuleActionTypes;
(function (KnownApplicationGatewayWafRuleActionTypes) {
    /** None */
    KnownApplicationGatewayWafRuleActionTypes["None"] = "None";
    /** AnomalyScoring */
    KnownApplicationGatewayWafRuleActionTypes["AnomalyScoring"] = "AnomalyScoring";
    /** Allow */
    KnownApplicationGatewayWafRuleActionTypes["Allow"] = "Allow";
    /** Block */
    KnownApplicationGatewayWafRuleActionTypes["Block"] = "Block";
    /** Log */
    KnownApplicationGatewayWafRuleActionTypes["Log"] = "Log";
})(KnownApplicationGatewayWafRuleActionTypes || (KnownApplicationGatewayWafRuleActionTypes = {}));
/** Known values of {@link ApplicationGatewayWafRuleSensitivityTypes} that the service accepts. */
export var KnownApplicationGatewayWafRuleSensitivityTypes;
(function (KnownApplicationGatewayWafRuleSensitivityTypes) {
    /** None */
    KnownApplicationGatewayWafRuleSensitivityTypes["None"] = "None";
    /** Low */
    KnownApplicationGatewayWafRuleSensitivityTypes["Low"] = "Low";
    /** Medium */
    KnownApplicationGatewayWafRuleSensitivityTypes["Medium"] = "Medium";
    /** High */
    KnownApplicationGatewayWafRuleSensitivityTypes["High"] = "High";
})(KnownApplicationGatewayWafRuleSensitivityTypes || (KnownApplicationGatewayWafRuleSensitivityTypes = {}));
/** Known values of {@link ApplicationGatewayTierTypes} that the service accepts. */
export var KnownApplicationGatewayTierTypes;
(function (KnownApplicationGatewayTierTypes) {
    /** Standard */
    KnownApplicationGatewayTierTypes["Standard"] = "Standard";
    /** WAF */
    KnownApplicationGatewayTierTypes["WAF"] = "WAF";
    /** StandardV2 */
    KnownApplicationGatewayTierTypes["StandardV2"] = "Standard_v2";
    /** WAFV2 */
    KnownApplicationGatewayTierTypes["WAFV2"] = "WAF_v2";
})(KnownApplicationGatewayTierTypes || (KnownApplicationGatewayTierTypes = {}));
/** Known values of {@link ApplicationGatewayRuleSetStatusOptions} that the service accepts. */
export var KnownApplicationGatewayRuleSetStatusOptions;
(function (KnownApplicationGatewayRuleSetStatusOptions) {
    /** Preview */
    KnownApplicationGatewayRuleSetStatusOptions["Preview"] = "Preview";
    /** GA */
    KnownApplicationGatewayRuleSetStatusOptions["GA"] = "GA";
    /** Supported */
    KnownApplicationGatewayRuleSetStatusOptions["Supported"] = "Supported";
    /** Deprecated */
    KnownApplicationGatewayRuleSetStatusOptions["Deprecated"] = "Deprecated";
})(KnownApplicationGatewayRuleSetStatusOptions || (KnownApplicationGatewayRuleSetStatusOptions = {}));
/** Known values of {@link AzureFirewallRCActionType} that the service accepts. */
export var KnownAzureFirewallRCActionType;
(function (KnownAzureFirewallRCActionType) {
    /** Allow */
    KnownAzureFirewallRCActionType["Allow"] = "Allow";
    /** Deny */
    KnownAzureFirewallRCActionType["Deny"] = "Deny";
})(KnownAzureFirewallRCActionType || (KnownAzureFirewallRCActionType = {}));
/** Known values of {@link AzureFirewallApplicationRuleProtocolType} that the service accepts. */
export var KnownAzureFirewallApplicationRuleProtocolType;
(function (KnownAzureFirewallApplicationRuleProtocolType) {
    /** Http */
    KnownAzureFirewallApplicationRuleProtocolType["Http"] = "Http";
    /** Https */
    KnownAzureFirewallApplicationRuleProtocolType["Https"] = "Https";
    /** Mssql */
    KnownAzureFirewallApplicationRuleProtocolType["Mssql"] = "Mssql";
})(KnownAzureFirewallApplicationRuleProtocolType || (KnownAzureFirewallApplicationRuleProtocolType = {}));
/** Known values of {@link AzureFirewallNatRCActionType} that the service accepts. */
export var KnownAzureFirewallNatRCActionType;
(function (KnownAzureFirewallNatRCActionType) {
    /** Snat */
    KnownAzureFirewallNatRCActionType["Snat"] = "Snat";
    /** Dnat */
    KnownAzureFirewallNatRCActionType["Dnat"] = "Dnat";
})(KnownAzureFirewallNatRCActionType || (KnownAzureFirewallNatRCActionType = {}));
/** Known values of {@link AzureFirewallNetworkRuleProtocol} that the service accepts. */
export var KnownAzureFirewallNetworkRuleProtocol;
(function (KnownAzureFirewallNetworkRuleProtocol) {
    /** TCP */
    KnownAzureFirewallNetworkRuleProtocol["TCP"] = "TCP";
    /** UDP */
    KnownAzureFirewallNetworkRuleProtocol["UDP"] = "UDP";
    /** Any */
    KnownAzureFirewallNetworkRuleProtocol["Any"] = "Any";
    /** Icmp */
    KnownAzureFirewallNetworkRuleProtocol["Icmp"] = "ICMP";
})(KnownAzureFirewallNetworkRuleProtocol || (KnownAzureFirewallNetworkRuleProtocol = {}));
/** Known values of {@link AzureFirewallThreatIntelMode} that the service accepts. */
export var KnownAzureFirewallThreatIntelMode;
(function (KnownAzureFirewallThreatIntelMode) {
    /** Alert */
    KnownAzureFirewallThreatIntelMode["Alert"] = "Alert";
    /** Deny */
    KnownAzureFirewallThreatIntelMode["Deny"] = "Deny";
    /** Off */
    KnownAzureFirewallThreatIntelMode["Off"] = "Off";
})(KnownAzureFirewallThreatIntelMode || (KnownAzureFirewallThreatIntelMode = {}));
/** Known values of {@link AzureFirewallSkuName} that the service accepts. */
export var KnownAzureFirewallSkuName;
(function (KnownAzureFirewallSkuName) {
    /** AzfwVnet */
    KnownAzureFirewallSkuName["AzfwVnet"] = "AZFW_VNet";
    /** AzfwHub */
    KnownAzureFirewallSkuName["AzfwHub"] = "AZFW_Hub";
})(KnownAzureFirewallSkuName || (KnownAzureFirewallSkuName = {}));
/** Known values of {@link AzureFirewallSkuTier} that the service accepts. */
export var KnownAzureFirewallSkuTier;
(function (KnownAzureFirewallSkuTier) {
    /** Standard */
    KnownAzureFirewallSkuTier["Standard"] = "Standard";
    /** Premium */
    KnownAzureFirewallSkuTier["Premium"] = "Premium";
    /** Basic */
    KnownAzureFirewallSkuTier["Basic"] = "Basic";
})(KnownAzureFirewallSkuTier || (KnownAzureFirewallSkuTier = {}));
/** Known values of {@link AzureFirewallPacketCaptureFlagsType} that the service accepts. */
export var KnownAzureFirewallPacketCaptureFlagsType;
(function (KnownAzureFirewallPacketCaptureFlagsType) {
    /** Fin */
    KnownAzureFirewallPacketCaptureFlagsType["Fin"] = "fin";
    /** Syn */
    KnownAzureFirewallPacketCaptureFlagsType["Syn"] = "syn";
    /** Rst */
    KnownAzureFirewallPacketCaptureFlagsType["Rst"] = "rst";
    /** Push */
    KnownAzureFirewallPacketCaptureFlagsType["Push"] = "push";
    /** Ack */
    KnownAzureFirewallPacketCaptureFlagsType["Ack"] = "ack";
    /** Urg */
    KnownAzureFirewallPacketCaptureFlagsType["Urg"] = "urg";
})(KnownAzureFirewallPacketCaptureFlagsType || (KnownAzureFirewallPacketCaptureFlagsType = {}));
/** Known values of {@link BastionHostSkuName} that the service accepts. */
export var KnownBastionHostSkuName;
(function (KnownBastionHostSkuName) {
    /** Basic */
    KnownBastionHostSkuName["Basic"] = "Basic";
    /** Standard */
    KnownBastionHostSkuName["Standard"] = "Standard";
    /** Developer */
    KnownBastionHostSkuName["Developer"] = "Developer";
    /** Premium */
    KnownBastionHostSkuName["Premium"] = "Premium";
})(KnownBastionHostSkuName || (KnownBastionHostSkuName = {}));
/** Known values of {@link BastionConnectProtocol} that the service accepts. */
export var KnownBastionConnectProtocol;
(function (KnownBastionConnectProtocol) {
    /** SSH */
    KnownBastionConnectProtocol["SSH"] = "SSH";
    /** RDP */
    KnownBastionConnectProtocol["RDP"] = "RDP";
})(KnownBastionConnectProtocol || (KnownBastionConnectProtocol = {}));
/** Known values of {@link CommissionedState} that the service accepts. */
export var KnownCommissionedState;
(function (KnownCommissionedState) {
    /** Provisioning */
    KnownCommissionedState["Provisioning"] = "Provisioning";
    /** Provisioned */
    KnownCommissionedState["Provisioned"] = "Provisioned";
    /** Commissioning */
    KnownCommissionedState["Commissioning"] = "Commissioning";
    /** CommissionedNoInternetAdvertise */
    KnownCommissionedState["CommissionedNoInternetAdvertise"] = "CommissionedNoInternetAdvertise";
    /** Commissioned */
    KnownCommissionedState["Commissioned"] = "Commissioned";
    /** Decommissioning */
    KnownCommissionedState["Decommissioning"] = "Decommissioning";
    /** Deprovisioning */
    KnownCommissionedState["Deprovisioning"] = "Deprovisioning";
    /** Deprovisioned */
    KnownCommissionedState["Deprovisioned"] = "Deprovisioned";
})(KnownCommissionedState || (KnownCommissionedState = {}));
/** Known values of {@link Geo} that the service accepts. */
export var KnownGeo;
(function (KnownGeo) {
    /** Global */
    KnownGeo["Global"] = "GLOBAL";
    /** Afri */
    KnownGeo["Afri"] = "AFRI";
    /** Apac */
    KnownGeo["Apac"] = "APAC";
    /** Euro */
    KnownGeo["Euro"] = "EURO";
    /** Latam */
    KnownGeo["Latam"] = "LATAM";
    /** NAM */
    KnownGeo["NAM"] = "NAM";
    /** ME */
    KnownGeo["ME"] = "ME";
    /** Oceania */
    KnownGeo["Oceania"] = "OCEANIA";
    /** AQ */
    KnownGeo["AQ"] = "AQ";
})(KnownGeo || (KnownGeo = {}));
/** Known values of {@link CustomIpPrefixType} that the service accepts. */
export var KnownCustomIpPrefixType;
(function (KnownCustomIpPrefixType) {
    /** Singular */
    KnownCustomIpPrefixType["Singular"] = "Singular";
    /** Parent */
    KnownCustomIpPrefixType["Parent"] = "Parent";
    /** Child */
    KnownCustomIpPrefixType["Child"] = "Child";
})(KnownCustomIpPrefixType || (KnownCustomIpPrefixType = {}));
/** Known values of {@link ProtocolType} that the service accepts. */
export var KnownProtocolType;
(function (KnownProtocolType) {
    /** DoNotUse */
    KnownProtocolType["DoNotUse"] = "DoNotUse";
    /** Icmp */
    KnownProtocolType["Icmp"] = "Icmp";
    /** Tcp */
    KnownProtocolType["Tcp"] = "Tcp";
    /** Udp */
    KnownProtocolType["Udp"] = "Udp";
    /** Gre */
    KnownProtocolType["Gre"] = "Gre";
    /** Esp */
    KnownProtocolType["Esp"] = "Esp";
    /** Ah */
    KnownProtocolType["Ah"] = "Ah";
    /** Vxlan */
    KnownProtocolType["Vxlan"] = "Vxlan";
    /** All */
    KnownProtocolType["All"] = "All";
})(KnownProtocolType || (KnownProtocolType = {}));
/** Known values of {@link AuthorizationUseStatus} that the service accepts. */
export var KnownAuthorizationUseStatus;
(function (KnownAuthorizationUseStatus) {
    /** Available */
    KnownAuthorizationUseStatus["Available"] = "Available";
    /** InUse */
    KnownAuthorizationUseStatus["InUse"] = "InUse";
})(KnownAuthorizationUseStatus || (KnownAuthorizationUseStatus = {}));
/** Known values of {@link ExpressRoutePeeringType} that the service accepts. */
export var KnownExpressRoutePeeringType;
(function (KnownExpressRoutePeeringType) {
    /** AzurePublicPeering */
    KnownExpressRoutePeeringType["AzurePublicPeering"] = "AzurePublicPeering";
    /** AzurePrivatePeering */
    KnownExpressRoutePeeringType["AzurePrivatePeering"] = "AzurePrivatePeering";
    /** MicrosoftPeering */
    KnownExpressRoutePeeringType["MicrosoftPeering"] = "MicrosoftPeering";
})(KnownExpressRoutePeeringType || (KnownExpressRoutePeeringType = {}));
/** Known values of {@link ExpressRoutePeeringState} that the service accepts. */
export var KnownExpressRoutePeeringState;
(function (KnownExpressRoutePeeringState) {
    /** Disabled */
    KnownExpressRoutePeeringState["Disabled"] = "Disabled";
    /** Enabled */
    KnownExpressRoutePeeringState["Enabled"] = "Enabled";
})(KnownExpressRoutePeeringState || (KnownExpressRoutePeeringState = {}));
/** Known values of {@link ExpressRouteCircuitPeeringAdvertisedPublicPrefixState} that the service accepts. */
export var KnownExpressRouteCircuitPeeringAdvertisedPublicPrefixState;
(function (KnownExpressRouteCircuitPeeringAdvertisedPublicPrefixState) {
    /** NotConfigured */
    KnownExpressRouteCircuitPeeringAdvertisedPublicPrefixState["NotConfigured"] = "NotConfigured";
    /** Configuring */
    KnownExpressRouteCircuitPeeringAdvertisedPublicPrefixState["Configuring"] = "Configuring";
    /** Configured */
    KnownExpressRouteCircuitPeeringAdvertisedPublicPrefixState["Configured"] = "Configured";
    /** ValidationNeeded */
    KnownExpressRouteCircuitPeeringAdvertisedPublicPrefixState["ValidationNeeded"] = "ValidationNeeded";
})(KnownExpressRouteCircuitPeeringAdvertisedPublicPrefixState || (KnownExpressRouteCircuitPeeringAdvertisedPublicPrefixState = {}));
/** Known values of {@link ExpressRouteCircuitPeeringState} that the service accepts. */
export var KnownExpressRouteCircuitPeeringState;
(function (KnownExpressRouteCircuitPeeringState) {
    /** Disabled */
    KnownExpressRouteCircuitPeeringState["Disabled"] = "Disabled";
    /** Enabled */
    KnownExpressRouteCircuitPeeringState["Enabled"] = "Enabled";
})(KnownExpressRouteCircuitPeeringState || (KnownExpressRouteCircuitPeeringState = {}));
/** Known values of {@link CircuitConnectionStatus} that the service accepts. */
export var KnownCircuitConnectionStatus;
(function (KnownCircuitConnectionStatus) {
    /** Connected */
    KnownCircuitConnectionStatus["Connected"] = "Connected";
    /** Connecting */
    KnownCircuitConnectionStatus["Connecting"] = "Connecting";
    /** Disconnected */
    KnownCircuitConnectionStatus["Disconnected"] = "Disconnected";
})(KnownCircuitConnectionStatus || (KnownCircuitConnectionStatus = {}));
/** Known values of {@link ExpressRouteCircuitSkuTier} that the service accepts. */
export var KnownExpressRouteCircuitSkuTier;
(function (KnownExpressRouteCircuitSkuTier) {
    /** Standard */
    KnownExpressRouteCircuitSkuTier["Standard"] = "Standard";
    /** Premium */
    KnownExpressRouteCircuitSkuTier["Premium"] = "Premium";
    /** Basic */
    KnownExpressRouteCircuitSkuTier["Basic"] = "Basic";
    /** Local */
    KnownExpressRouteCircuitSkuTier["Local"] = "Local";
})(KnownExpressRouteCircuitSkuTier || (KnownExpressRouteCircuitSkuTier = {}));
/** Known values of {@link ExpressRouteCircuitSkuFamily} that the service accepts. */
export var KnownExpressRouteCircuitSkuFamily;
(function (KnownExpressRouteCircuitSkuFamily) {
    /** UnlimitedData */
    KnownExpressRouteCircuitSkuFamily["UnlimitedData"] = "UnlimitedData";
    /** MeteredData */
    KnownExpressRouteCircuitSkuFamily["MeteredData"] = "MeteredData";
})(KnownExpressRouteCircuitSkuFamily || (KnownExpressRouteCircuitSkuFamily = {}));
/** Known values of {@link ServiceProviderProvisioningState} that the service accepts. */
export var KnownServiceProviderProvisioningState;
(function (KnownServiceProviderProvisioningState) {
    /** NotProvisioned */
    KnownServiceProviderProvisioningState["NotProvisioned"] = "NotProvisioned";
    /** Provisioning */
    KnownServiceProviderProvisioningState["Provisioning"] = "Provisioning";
    /** Provisioned */
    KnownServiceProviderProvisioningState["Provisioned"] = "Provisioned";
    /** Deprovisioning */
    KnownServiceProviderProvisioningState["Deprovisioning"] = "Deprovisioning";
})(KnownServiceProviderProvisioningState || (KnownServiceProviderProvisioningState = {}));
/** Known values of {@link ExpressRoutePortsEncapsulation} that the service accepts. */
export var KnownExpressRoutePortsEncapsulation;
(function (KnownExpressRoutePortsEncapsulation) {
    /** Dot1Q */
    KnownExpressRoutePortsEncapsulation["Dot1Q"] = "Dot1Q";
    /** QinQ */
    KnownExpressRoutePortsEncapsulation["QinQ"] = "QinQ";
})(KnownExpressRoutePortsEncapsulation || (KnownExpressRoutePortsEncapsulation = {}));
/** Known values of {@link ExpressRouteLinkConnectorType} that the service accepts. */
export var KnownExpressRouteLinkConnectorType;
(function (KnownExpressRouteLinkConnectorType) {
    /** LC */
    KnownExpressRouteLinkConnectorType["LC"] = "LC";
    /** SC */
    KnownExpressRouteLinkConnectorType["SC"] = "SC";
})(KnownExpressRouteLinkConnectorType || (KnownExpressRouteLinkConnectorType = {}));
/** Known values of {@link ExpressRouteLinkAdminState} that the service accepts. */
export var KnownExpressRouteLinkAdminState;
(function (KnownExpressRouteLinkAdminState) {
    /** Enabled */
    KnownExpressRouteLinkAdminState["Enabled"] = "Enabled";
    /** Disabled */
    KnownExpressRouteLinkAdminState["Disabled"] = "Disabled";
})(KnownExpressRouteLinkAdminState || (KnownExpressRouteLinkAdminState = {}));
/** Known values of {@link ExpressRouteLinkMacSecCipher} that the service accepts. */
export var KnownExpressRouteLinkMacSecCipher;
(function (KnownExpressRouteLinkMacSecCipher) {
    /** GcmAes256 */
    KnownExpressRouteLinkMacSecCipher["GcmAes256"] = "GcmAes256";
    /** GcmAes128 */
    KnownExpressRouteLinkMacSecCipher["GcmAes128"] = "GcmAes128";
    /** GcmAesXpn128 */
    KnownExpressRouteLinkMacSecCipher["GcmAesXpn128"] = "GcmAesXpn128";
    /** GcmAesXpn256 */
    KnownExpressRouteLinkMacSecCipher["GcmAesXpn256"] = "GcmAesXpn256";
})(KnownExpressRouteLinkMacSecCipher || (KnownExpressRouteLinkMacSecCipher = {}));
/** Known values of {@link ExpressRouteLinkMacSecSciState} that the service accepts. */
export var KnownExpressRouteLinkMacSecSciState;
(function (KnownExpressRouteLinkMacSecSciState) {
    /** Disabled */
    KnownExpressRouteLinkMacSecSciState["Disabled"] = "Disabled";
    /** Enabled */
    KnownExpressRouteLinkMacSecSciState["Enabled"] = "Enabled";
})(KnownExpressRouteLinkMacSecSciState || (KnownExpressRouteLinkMacSecSciState = {}));
/** Known values of {@link ExpressRoutePortsBillingType} that the service accepts. */
export var KnownExpressRoutePortsBillingType;
(function (KnownExpressRoutePortsBillingType) {
    /** MeteredData */
    KnownExpressRoutePortsBillingType["MeteredData"] = "MeteredData";
    /** UnlimitedData */
    KnownExpressRoutePortsBillingType["UnlimitedData"] = "UnlimitedData";
})(KnownExpressRoutePortsBillingType || (KnownExpressRoutePortsBillingType = {}));
/** Known values of {@link ExpressRoutePortAuthorizationUseStatus} that the service accepts. */
export var KnownExpressRoutePortAuthorizationUseStatus;
(function (KnownExpressRoutePortAuthorizationUseStatus) {
    /** Available */
    KnownExpressRoutePortAuthorizationUseStatus["Available"] = "Available";
    /** InUse */
    KnownExpressRoutePortAuthorizationUseStatus["InUse"] = "InUse";
})(KnownExpressRoutePortAuthorizationUseStatus || (KnownExpressRoutePortAuthorizationUseStatus = {}));
/** Known values of {@link AutoLearnPrivateRangesMode} that the service accepts. */
export var KnownAutoLearnPrivateRangesMode;
(function (KnownAutoLearnPrivateRangesMode) {
    /** Enabled */
    KnownAutoLearnPrivateRangesMode["Enabled"] = "Enabled";
    /** Disabled */
    KnownAutoLearnPrivateRangesMode["Disabled"] = "Disabled";
})(KnownAutoLearnPrivateRangesMode || (KnownAutoLearnPrivateRangesMode = {}));
/** Known values of {@link FirewallPolicyIntrusionDetectionStateType} that the service accepts. */
export var KnownFirewallPolicyIntrusionDetectionStateType;
(function (KnownFirewallPolicyIntrusionDetectionStateType) {
    /** Off */
    KnownFirewallPolicyIntrusionDetectionStateType["Off"] = "Off";
    /** Alert */
    KnownFirewallPolicyIntrusionDetectionStateType["Alert"] = "Alert";
    /** Deny */
    KnownFirewallPolicyIntrusionDetectionStateType["Deny"] = "Deny";
})(KnownFirewallPolicyIntrusionDetectionStateType || (KnownFirewallPolicyIntrusionDetectionStateType = {}));
/** Known values of {@link FirewallPolicyIntrusionDetectionProfileType} that the service accepts. */
export var KnownFirewallPolicyIntrusionDetectionProfileType;
(function (KnownFirewallPolicyIntrusionDetectionProfileType) {
    /** Basic */
    KnownFirewallPolicyIntrusionDetectionProfileType["Basic"] = "Basic";
    /** Standard */
    KnownFirewallPolicyIntrusionDetectionProfileType["Standard"] = "Standard";
    /** Advanced */
    KnownFirewallPolicyIntrusionDetectionProfileType["Advanced"] = "Advanced";
    /** Extended */
    KnownFirewallPolicyIntrusionDetectionProfileType["Extended"] = "Extended";
})(KnownFirewallPolicyIntrusionDetectionProfileType || (KnownFirewallPolicyIntrusionDetectionProfileType = {}));
/** Known values of {@link FirewallPolicyIntrusionDetectionProtocol} that the service accepts. */
export var KnownFirewallPolicyIntrusionDetectionProtocol;
(function (KnownFirewallPolicyIntrusionDetectionProtocol) {
    /** TCP */
    KnownFirewallPolicyIntrusionDetectionProtocol["TCP"] = "TCP";
    /** UDP */
    KnownFirewallPolicyIntrusionDetectionProtocol["UDP"] = "UDP";
    /** Icmp */
    KnownFirewallPolicyIntrusionDetectionProtocol["Icmp"] = "ICMP";
    /** ANY */
    KnownFirewallPolicyIntrusionDetectionProtocol["ANY"] = "ANY";
})(KnownFirewallPolicyIntrusionDetectionProtocol || (KnownFirewallPolicyIntrusionDetectionProtocol = {}));
/** Known values of {@link FirewallPolicySkuTier} that the service accepts. */
export var KnownFirewallPolicySkuTier;
(function (KnownFirewallPolicySkuTier) {
    /** Standard */
    KnownFirewallPolicySkuTier["Standard"] = "Standard";
    /** Premium */
    KnownFirewallPolicySkuTier["Premium"] = "Premium";
    /** Basic */
    KnownFirewallPolicySkuTier["Basic"] = "Basic";
})(KnownFirewallPolicySkuTier || (KnownFirewallPolicySkuTier = {}));
/** Known values of {@link FirewallPolicyRuleCollectionType} that the service accepts. */
export var KnownFirewallPolicyRuleCollectionType;
(function (KnownFirewallPolicyRuleCollectionType) {
    /** FirewallPolicyNatRuleCollection */
    KnownFirewallPolicyRuleCollectionType["FirewallPolicyNatRuleCollection"] = "FirewallPolicyNatRuleCollection";
    /** FirewallPolicyFilterRuleCollection */
    KnownFirewallPolicyRuleCollectionType["FirewallPolicyFilterRuleCollection"] = "FirewallPolicyFilterRuleCollection";
})(KnownFirewallPolicyRuleCollectionType || (KnownFirewallPolicyRuleCollectionType = {}));
/** Known values of {@link FirewallPolicyIdpsQuerySortOrder} that the service accepts. */
export var KnownFirewallPolicyIdpsQuerySortOrder;
(function (KnownFirewallPolicyIdpsQuerySortOrder) {
    /** Ascending */
    KnownFirewallPolicyIdpsQuerySortOrder["Ascending"] = "Ascending";
    /** Descending */
    KnownFirewallPolicyIdpsQuerySortOrder["Descending"] = "Descending";
})(KnownFirewallPolicyIdpsQuerySortOrder || (KnownFirewallPolicyIdpsQuerySortOrder = {}));
/** Known values of {@link IpType} that the service accepts. */
export var KnownIpType;
(function (KnownIpType) {
    /** IPv4 */
    KnownIpType["IPv4"] = "IPv4";
    /** IPv6 */
    KnownIpType["IPv6"] = "IPv6";
})(KnownIpType || (KnownIpType = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
export var KnownCreatedByType;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(KnownCreatedByType || (KnownCreatedByType = {}));
/** Known values of {@link IpAllocationType} that the service accepts. */
export var KnownIpAllocationType;
(function (KnownIpAllocationType) {
    /** Undefined */
    KnownIpAllocationType["Undefined"] = "Undefined";
    /** Hypernet */
    KnownIpAllocationType["Hypernet"] = "Hypernet";
})(KnownIpAllocationType || (KnownIpAllocationType = {}));
/** Known values of {@link LoadBalancerSkuName} that the service accepts. */
export var KnownLoadBalancerSkuName;
(function (KnownLoadBalancerSkuName) {
    /** Basic */
    KnownLoadBalancerSkuName["Basic"] = "Basic";
    /** Standard */
    KnownLoadBalancerSkuName["Standard"] = "Standard";
    /** Gateway */
    KnownLoadBalancerSkuName["Gateway"] = "Gateway";
})(KnownLoadBalancerSkuName || (KnownLoadBalancerSkuName = {}));
/** Known values of {@link LoadBalancerSkuTier} that the service accepts. */
export var KnownLoadBalancerSkuTier;
(function (KnownLoadBalancerSkuTier) {
    /** Regional */
    KnownLoadBalancerSkuTier["Regional"] = "Regional";
    /** Global */
    KnownLoadBalancerSkuTier["Global"] = "Global";
})(KnownLoadBalancerSkuTier || (KnownLoadBalancerSkuTier = {}));
/** Known values of {@link LoadDistribution} that the service accepts. */
export var KnownLoadDistribution;
(function (KnownLoadDistribution) {
    /** Default */
    KnownLoadDistribution["Default"] = "Default";
    /** SourceIP */
    KnownLoadDistribution["SourceIP"] = "SourceIP";
    /** SourceIPProtocol */
    KnownLoadDistribution["SourceIPProtocol"] = "SourceIPProtocol";
})(KnownLoadDistribution || (KnownLoadDistribution = {}));
/** Known values of {@link ProbeProtocol} that the service accepts. */
export var KnownProbeProtocol;
(function (KnownProbeProtocol) {
    /** Http */
    KnownProbeProtocol["Http"] = "Http";
    /** Tcp */
    KnownProbeProtocol["Tcp"] = "Tcp";
    /** Https */
    KnownProbeProtocol["Https"] = "Https";
})(KnownProbeProtocol || (KnownProbeProtocol = {}));
/** Known values of {@link ProbeNoHealthyBackendsBehavior} that the service accepts. */
export var KnownProbeNoHealthyBackendsBehavior;
(function (KnownProbeNoHealthyBackendsBehavior) {
    /** No new flows will be sent to the backend pool. */
    KnownProbeNoHealthyBackendsBehavior["AllProbedDown"] = "AllProbedDown";
    /** When all backend instances are probed down, incoming packets will be sent to all instances. */
    KnownProbeNoHealthyBackendsBehavior["AllProbedUp"] = "AllProbedUp";
})(KnownProbeNoHealthyBackendsBehavior || (KnownProbeNoHealthyBackendsBehavior = {}));
/** Known values of {@link LoadBalancerOutboundRuleProtocol} that the service accepts. */
export var KnownLoadBalancerOutboundRuleProtocol;
(function (KnownLoadBalancerOutboundRuleProtocol) {
    /** Tcp */
    KnownLoadBalancerOutboundRuleProtocol["Tcp"] = "Tcp";
    /** Udp */
    KnownLoadBalancerOutboundRuleProtocol["Udp"] = "Udp";
    /** All */
    KnownLoadBalancerOutboundRuleProtocol["All"] = "All";
})(KnownLoadBalancerOutboundRuleProtocol || (KnownLoadBalancerOutboundRuleProtocol = {}));
/** Known values of {@link EffectiveRouteSource} that the service accepts. */
export var KnownEffectiveRouteSource;
(function (KnownEffectiveRouteSource) {
    /** Unknown */
    KnownEffectiveRouteSource["Unknown"] = "Unknown";
    /** User */
    KnownEffectiveRouteSource["User"] = "User";
    /** VirtualNetworkGateway */
    KnownEffectiveRouteSource["VirtualNetworkGateway"] = "VirtualNetworkGateway";
    /** Default */
    KnownEffectiveRouteSource["Default"] = "Default";
})(KnownEffectiveRouteSource || (KnownEffectiveRouteSource = {}));
/** Known values of {@link EffectiveRouteState} that the service accepts. */
export var KnownEffectiveRouteState;
(function (KnownEffectiveRouteState) {
    /** Active */
    KnownEffectiveRouteState["Active"] = "Active";
    /** Invalid */
    KnownEffectiveRouteState["Invalid"] = "Invalid";
})(KnownEffectiveRouteState || (KnownEffectiveRouteState = {}));
/** Known values of {@link EffectiveSecurityRuleProtocol} that the service accepts. */
export var KnownEffectiveSecurityRuleProtocol;
(function (KnownEffectiveSecurityRuleProtocol) {
    /** Tcp */
    KnownEffectiveSecurityRuleProtocol["Tcp"] = "Tcp";
    /** Udp */
    KnownEffectiveSecurityRuleProtocol["Udp"] = "Udp";
    /** All */
    KnownEffectiveSecurityRuleProtocol["All"] = "All";
})(KnownEffectiveSecurityRuleProtocol || (KnownEffectiveSecurityRuleProtocol = {}));
/** Known values of {@link ConfigurationType} that the service accepts. */
export var KnownConfigurationType;
(function (KnownConfigurationType) {
    /** SecurityAdmin */
    KnownConfigurationType["SecurityAdmin"] = "SecurityAdmin";
    /** Connectivity */
    KnownConfigurationType["Connectivity"] = "Connectivity";
    /** SecurityUser */
    KnownConfigurationType["SecurityUser"] = "SecurityUser";
    /** Routing */
    KnownConfigurationType["Routing"] = "Routing";
})(KnownConfigurationType || (KnownConfigurationType = {}));
/** Known values of {@link DeploymentStatus} that the service accepts. */
export var KnownDeploymentStatus;
(function (KnownDeploymentStatus) {
    /** NotStarted */
    KnownDeploymentStatus["NotStarted"] = "NotStarted";
    /** Deploying */
    KnownDeploymentStatus["Deploying"] = "Deploying";
    /** Deployed */
    KnownDeploymentStatus["Deployed"] = "Deployed";
    /** Failed */
    KnownDeploymentStatus["Failed"] = "Failed";
})(KnownDeploymentStatus || (KnownDeploymentStatus = {}));
/** Known values of {@link ConnectivityTopology} that the service accepts. */
export var KnownConnectivityTopology;
(function (KnownConnectivityTopology) {
    /** HubAndSpoke */
    KnownConnectivityTopology["HubAndSpoke"] = "HubAndSpoke";
    /** Mesh */
    KnownConnectivityTopology["Mesh"] = "Mesh";
})(KnownConnectivityTopology || (KnownConnectivityTopology = {}));
/** Known values of {@link IsGlobal} that the service accepts. */
export var KnownIsGlobal;
(function (KnownIsGlobal) {
    /** False */
    KnownIsGlobal["False"] = "False";
    /** True */
    KnownIsGlobal["True"] = "True";
})(KnownIsGlobal || (KnownIsGlobal = {}));
/** Known values of {@link UseHubGateway} that the service accepts. */
export var KnownUseHubGateway;
(function (KnownUseHubGateway) {
    /** False */
    KnownUseHubGateway["False"] = "False";
    /** True */
    KnownUseHubGateway["True"] = "True";
})(KnownUseHubGateway || (KnownUseHubGateway = {}));
/** Known values of {@link GroupConnectivity} that the service accepts. */
export var KnownGroupConnectivity;
(function (KnownGroupConnectivity) {
    /** None */
    KnownGroupConnectivity["None"] = "None";
    /** DirectlyConnected */
    KnownGroupConnectivity["DirectlyConnected"] = "DirectlyConnected";
})(KnownGroupConnectivity || (KnownGroupConnectivity = {}));
/** Known values of {@link DeleteExistingPeering} that the service accepts. */
export var KnownDeleteExistingPeering;
(function (KnownDeleteExistingPeering) {
    /** False */
    KnownDeleteExistingPeering["False"] = "False";
    /** True */
    KnownDeleteExistingPeering["True"] = "True";
})(KnownDeleteExistingPeering || (KnownDeleteExistingPeering = {}));
/** Known values of {@link GroupMemberType} that the service accepts. */
export var KnownGroupMemberType;
(function (KnownGroupMemberType) {
    /** VirtualNetwork */
    KnownGroupMemberType["VirtualNetwork"] = "VirtualNetwork";
    /** Subnet */
    KnownGroupMemberType["Subnet"] = "Subnet";
})(KnownGroupMemberType || (KnownGroupMemberType = {}));
/** Known values of {@link EffectiveAdminRuleKind} that the service accepts. */
export var KnownEffectiveAdminRuleKind;
(function (KnownEffectiveAdminRuleKind) {
    /** Custom */
    KnownEffectiveAdminRuleKind["Custom"] = "Custom";
    /** Default */
    KnownEffectiveAdminRuleKind["Default"] = "Default";
})(KnownEffectiveAdminRuleKind || (KnownEffectiveAdminRuleKind = {}));
/** Known values of {@link ScopeConnectionState} that the service accepts. */
export var KnownScopeConnectionState;
(function (KnownScopeConnectionState) {
    /** Connected */
    KnownScopeConnectionState["Connected"] = "Connected";
    /** Pending */
    KnownScopeConnectionState["Pending"] = "Pending";
    /** Conflict */
    KnownScopeConnectionState["Conflict"] = "Conflict";
    /** Revoked */
    KnownScopeConnectionState["Revoked"] = "Revoked";
    /** Rejected */
    KnownScopeConnectionState["Rejected"] = "Rejected";
})(KnownScopeConnectionState || (KnownScopeConnectionState = {}));
/** Known values of {@link DisableBgpRoutePropagation} that the service accepts. */
export var KnownDisableBgpRoutePropagation;
(function (KnownDisableBgpRoutePropagation) {
    /** False */
    KnownDisableBgpRoutePropagation["False"] = "False";
    /** True */
    KnownDisableBgpRoutePropagation["True"] = "True";
})(KnownDisableBgpRoutePropagation || (KnownDisableBgpRoutePropagation = {}));
/** Known values of {@link RoutingRuleDestinationType} that the service accepts. */
export var KnownRoutingRuleDestinationType;
(function (KnownRoutingRuleDestinationType) {
    /** AddressPrefix */
    KnownRoutingRuleDestinationType["AddressPrefix"] = "AddressPrefix";
    /** ServiceTag */
    KnownRoutingRuleDestinationType["ServiceTag"] = "ServiceTag";
})(KnownRoutingRuleDestinationType || (KnownRoutingRuleDestinationType = {}));
/** Known values of {@link RoutingRuleNextHopType} that the service accepts. */
export var KnownRoutingRuleNextHopType;
(function (KnownRoutingRuleNextHopType) {
    /** Internet */
    KnownRoutingRuleNextHopType["Internet"] = "Internet";
    /** NoNextHop */
    KnownRoutingRuleNextHopType["NoNextHop"] = "NoNextHop";
    /** VirtualAppliance */
    KnownRoutingRuleNextHopType["VirtualAppliance"] = "VirtualAppliance";
    /** VirtualNetworkGateway */
    KnownRoutingRuleNextHopType["VirtualNetworkGateway"] = "VirtualNetworkGateway";
    /** VnetLocal */
    KnownRoutingRuleNextHopType["VnetLocal"] = "VnetLocal";
})(KnownRoutingRuleNextHopType || (KnownRoutingRuleNextHopType = {}));
/** Known values of {@link NetworkIntentPolicyBasedService} that the service accepts. */
export var KnownNetworkIntentPolicyBasedService;
(function (KnownNetworkIntentPolicyBasedService) {
    /** None */
    KnownNetworkIntentPolicyBasedService["None"] = "None";
    /** All */
    KnownNetworkIntentPolicyBasedService["All"] = "All";
    /** AllowRulesOnly */
    KnownNetworkIntentPolicyBasedService["AllowRulesOnly"] = "AllowRulesOnly";
})(KnownNetworkIntentPolicyBasedService || (KnownNetworkIntentPolicyBasedService = {}));
/** Known values of {@link AddressSpaceAggregationOption} that the service accepts. */
export var KnownAddressSpaceAggregationOption;
(function (KnownAddressSpaceAggregationOption) {
    /** None */
    KnownAddressSpaceAggregationOption["None"] = "None";
    /** Manual */
    KnownAddressSpaceAggregationOption["Manual"] = "Manual";
})(KnownAddressSpaceAggregationOption || (KnownAddressSpaceAggregationOption = {}));
/** Known values of {@link AdminRuleKind} that the service accepts. */
export var KnownAdminRuleKind;
(function (KnownAdminRuleKind) {
    /** Custom */
    KnownAdminRuleKind["Custom"] = "Custom";
    /** Default */
    KnownAdminRuleKind["Default"] = "Default";
})(KnownAdminRuleKind || (KnownAdminRuleKind = {}));
/** Known values of {@link SecurityConfigurationRuleProtocol} that the service accepts. */
export var KnownSecurityConfigurationRuleProtocol;
(function (KnownSecurityConfigurationRuleProtocol) {
    /** Tcp */
    KnownSecurityConfigurationRuleProtocol["Tcp"] = "Tcp";
    /** Udp */
    KnownSecurityConfigurationRuleProtocol["Udp"] = "Udp";
    /** Icmp */
    KnownSecurityConfigurationRuleProtocol["Icmp"] = "Icmp";
    /** Esp */
    KnownSecurityConfigurationRuleProtocol["Esp"] = "Esp";
    /** Any */
    KnownSecurityConfigurationRuleProtocol["Any"] = "Any";
    /** Ah */
    KnownSecurityConfigurationRuleProtocol["Ah"] = "Ah";
})(KnownSecurityConfigurationRuleProtocol || (KnownSecurityConfigurationRuleProtocol = {}));
/** Known values of {@link AddressPrefixType} that the service accepts. */
export var KnownAddressPrefixType;
(function (KnownAddressPrefixType) {
    /** IPPrefix */
    KnownAddressPrefixType["IPPrefix"] = "IPPrefix";
    /** ServiceTag */
    KnownAddressPrefixType["ServiceTag"] = "ServiceTag";
    /** NetworkGroup */
    KnownAddressPrefixType["NetworkGroup"] = "NetworkGroup";
})(KnownAddressPrefixType || (KnownAddressPrefixType = {}));
/** Known values of {@link SecurityConfigurationRuleDirection} that the service accepts. */
export var KnownSecurityConfigurationRuleDirection;
(function (KnownSecurityConfigurationRuleDirection) {
    /** Inbound */
    KnownSecurityConfigurationRuleDirection["Inbound"] = "Inbound";
    /** Outbound */
    KnownSecurityConfigurationRuleDirection["Outbound"] = "Outbound";
})(KnownSecurityConfigurationRuleDirection || (KnownSecurityConfigurationRuleDirection = {}));
/** Known values of {@link NetworkProtocol} that the service accepts. */
export var KnownNetworkProtocol;
(function (KnownNetworkProtocol) {
    /** Any */
    KnownNetworkProtocol["Any"] = "Any";
    /** TCP */
    KnownNetworkProtocol["TCP"] = "TCP";
    /** UDP */
    KnownNetworkProtocol["UDP"] = "UDP";
    /** Icmp */
    KnownNetworkProtocol["Icmp"] = "ICMP";
})(KnownNetworkProtocol || (KnownNetworkProtocol = {}));
/** Known values of {@link NicTypeInResponse} that the service accepts. */
export var KnownNicTypeInResponse;
(function (KnownNicTypeInResponse) {
    /** PublicNic */
    KnownNicTypeInResponse["PublicNic"] = "PublicNic";
    /** PrivateNic */
    KnownNicTypeInResponse["PrivateNic"] = "PrivateNic";
    /** AdditionalNic */
    KnownNicTypeInResponse["AdditionalNic"] = "AdditionalNic";
})(KnownNicTypeInResponse || (KnownNicTypeInResponse = {}));
/** Known values of {@link NicTypeInRequest} that the service accepts. */
export var KnownNicTypeInRequest;
(function (KnownNicTypeInRequest) {
    /** PublicNic */
    KnownNicTypeInRequest["PublicNic"] = "PublicNic";
    /** PrivateNic */
    KnownNicTypeInRequest["PrivateNic"] = "PrivateNic";
})(KnownNicTypeInRequest || (KnownNicTypeInRequest = {}));
/** Known values of {@link InboundSecurityRuleType} that the service accepts. */
export var KnownInboundSecurityRuleType;
(function (KnownInboundSecurityRuleType) {
    /** AutoExpire */
    KnownInboundSecurityRuleType["AutoExpire"] = "AutoExpire";
    /** Permanent */
    KnownInboundSecurityRuleType["Permanent"] = "Permanent";
})(KnownInboundSecurityRuleType || (KnownInboundSecurityRuleType = {}));
/** Known values of {@link InboundSecurityRulesProtocol} that the service accepts. */
export var KnownInboundSecurityRulesProtocol;
(function (KnownInboundSecurityRulesProtocol) {
    /** TCP */
    KnownInboundSecurityRulesProtocol["TCP"] = "TCP";
    /** UDP */
    KnownInboundSecurityRulesProtocol["UDP"] = "UDP";
})(KnownInboundSecurityRulesProtocol || (KnownInboundSecurityRulesProtocol = {}));
/** Known values of {@link AssociationType} that the service accepts. */
export var KnownAssociationType;
(function (KnownAssociationType) {
    /** Associated */
    KnownAssociationType["Associated"] = "Associated";
    /** Contains */
    KnownAssociationType["Contains"] = "Contains";
})(KnownAssociationType || (KnownAssociationType = {}));
/** Known values of {@link Direction} that the service accepts. */
export var KnownDirection;
(function (KnownDirection) {
    /** Inbound */
    KnownDirection["Inbound"] = "Inbound";
    /** Outbound */
    KnownDirection["Outbound"] = "Outbound";
})(KnownDirection || (KnownDirection = {}));
/** Known values of {@link IpFlowProtocol} that the service accepts. */
export var KnownIpFlowProtocol;
(function (KnownIpFlowProtocol) {
    /** TCP */
    KnownIpFlowProtocol["TCP"] = "TCP";
    /** UDP */
    KnownIpFlowProtocol["UDP"] = "UDP";
})(KnownIpFlowProtocol || (KnownIpFlowProtocol = {}));
/** Known values of {@link Access} that the service accepts. */
export var KnownAccess;
(function (KnownAccess) {
    /** Allow */
    KnownAccess["Allow"] = "Allow";
    /** Deny */
    KnownAccess["Deny"] = "Deny";
})(KnownAccess || (KnownAccess = {}));
/** Known values of {@link NextHopType} that the service accepts. */
export var KnownNextHopType;
(function (KnownNextHopType) {
    /** Internet */
    KnownNextHopType["Internet"] = "Internet";
    /** VirtualAppliance */
    KnownNextHopType["VirtualAppliance"] = "VirtualAppliance";
    /** VirtualNetworkGateway */
    KnownNextHopType["VirtualNetworkGateway"] = "VirtualNetworkGateway";
    /** VnetLocal */
    KnownNextHopType["VnetLocal"] = "VnetLocal";
    /** HyperNetGateway */
    KnownNextHopType["HyperNetGateway"] = "HyperNetGateway";
    /** None */
    KnownNextHopType["None"] = "None";
})(KnownNextHopType || (KnownNextHopType = {}));
/** Known values of {@link PcProtocol} that the service accepts. */
export var KnownPcProtocol;
(function (KnownPcProtocol) {
    /** TCP */
    KnownPcProtocol["TCP"] = "TCP";
    /** UDP */
    KnownPcProtocol["UDP"] = "UDP";
    /** Any */
    KnownPcProtocol["Any"] = "Any";
})(KnownPcProtocol || (KnownPcProtocol = {}));
/** Known values of {@link PcStatus} that the service accepts. */
export var KnownPcStatus;
(function (KnownPcStatus) {
    /** NotStarted */
    KnownPcStatus["NotStarted"] = "NotStarted";
    /** Running */
    KnownPcStatus["Running"] = "Running";
    /** Stopped */
    KnownPcStatus["Stopped"] = "Stopped";
    /** Error */
    KnownPcStatus["Error"] = "Error";
    /** Unknown */
    KnownPcStatus["Unknown"] = "Unknown";
})(KnownPcStatus || (KnownPcStatus = {}));
/** Known values of {@link PcError} that the service accepts. */
export var KnownPcError;
(function (KnownPcError) {
    /** InternalError */
    KnownPcError["InternalError"] = "InternalError";
    /** AgentStopped */
    KnownPcError["AgentStopped"] = "AgentStopped";
    /** CaptureFailed */
    KnownPcError["CaptureFailed"] = "CaptureFailed";
    /** LocalFileFailed */
    KnownPcError["LocalFileFailed"] = "LocalFileFailed";
    /** StorageFailed */
    KnownPcError["StorageFailed"] = "StorageFailed";
})(KnownPcError || (KnownPcError = {}));
/** Known values of {@link Protocol} that the service accepts. */
export var KnownProtocol;
(function (KnownProtocol) {
    /** Tcp */
    KnownProtocol["Tcp"] = "Tcp";
    /** Http */
    KnownProtocol["Http"] = "Http";
    /** Https */
    KnownProtocol["Https"] = "Https";
    /** Icmp */
    KnownProtocol["Icmp"] = "Icmp";
})(KnownProtocol || (KnownProtocol = {}));
/** Known values of {@link HttpMethod} that the service accepts. */
export var KnownHttpMethod;
(function (KnownHttpMethod) {
    /** Get */
    KnownHttpMethod["Get"] = "Get";
})(KnownHttpMethod || (KnownHttpMethod = {}));
/** Known values of {@link Origin} that the service accepts. */
export var KnownOrigin;
(function (KnownOrigin) {
    /** Local */
    KnownOrigin["Local"] = "Local";
    /** Inbound */
    KnownOrigin["Inbound"] = "Inbound";
    /** Outbound */
    KnownOrigin["Outbound"] = "Outbound";
})(KnownOrigin || (KnownOrigin = {}));
/** Known values of {@link Severity} that the service accepts. */
export var KnownSeverity;
(function (KnownSeverity) {
    /** Error */
    KnownSeverity["Error"] = "Error";
    /** Warning */
    KnownSeverity["Warning"] = "Warning";
})(KnownSeverity || (KnownSeverity = {}));
/** Known values of {@link IssueType} that the service accepts. */
export var KnownIssueType;
(function (KnownIssueType) {
    /** Unknown */
    KnownIssueType["Unknown"] = "Unknown";
    /** AgentStopped */
    KnownIssueType["AgentStopped"] = "AgentStopped";
    /** GuestFirewall */
    KnownIssueType["GuestFirewall"] = "GuestFirewall";
    /** DnsResolution */
    KnownIssueType["DnsResolution"] = "DnsResolution";
    /** SocketBind */
    KnownIssueType["SocketBind"] = "SocketBind";
    /** NetworkSecurityRule */
    KnownIssueType["NetworkSecurityRule"] = "NetworkSecurityRule";
    /** UserDefinedRoute */
    KnownIssueType["UserDefinedRoute"] = "UserDefinedRoute";
    /** PortThrottled */
    KnownIssueType["PortThrottled"] = "PortThrottled";
    /** Platform */
    KnownIssueType["Platform"] = "Platform";
})(KnownIssueType || (KnownIssueType = {}));
/** Known values of {@link ConnectionStatus} that the service accepts. */
export var KnownConnectionStatus;
(function (KnownConnectionStatus) {
    /** Unknown */
    KnownConnectionStatus["Unknown"] = "Unknown";
    /** Connected */
    KnownConnectionStatus["Connected"] = "Connected";
    /** Disconnected */
    KnownConnectionStatus["Disconnected"] = "Disconnected";
    /** Degraded */
    KnownConnectionStatus["Degraded"] = "Degraded";
})(KnownConnectionStatus || (KnownConnectionStatus = {}));
/** Known values of {@link VerbosityLevel} that the service accepts. */
export var KnownVerbosityLevel;
(function (KnownVerbosityLevel) {
    /** Normal */
    KnownVerbosityLevel["Normal"] = "Normal";
    /** Minimum */
    KnownVerbosityLevel["Minimum"] = "Minimum";
    /** Full */
    KnownVerbosityLevel["Full"] = "Full";
})(KnownVerbosityLevel || (KnownVerbosityLevel = {}));
/** Known values of {@link EndpointType} that the service accepts. */
export var KnownEndpointType;
(function (KnownEndpointType) {
    /** AzureVM */
    KnownEndpointType["AzureVM"] = "AzureVM";
    /** AzureVNet */
    KnownEndpointType["AzureVNet"] = "AzureVNet";
    /** AzureSubnet */
    KnownEndpointType["AzureSubnet"] = "AzureSubnet";
    /** ExternalAddress */
    KnownEndpointType["ExternalAddress"] = "ExternalAddress";
    /** MMAWorkspaceMachine */
    KnownEndpointType["MMAWorkspaceMachine"] = "MMAWorkspaceMachine";
    /** MMAWorkspaceNetwork */
    KnownEndpointType["MMAWorkspaceNetwork"] = "MMAWorkspaceNetwork";
    /** AzureArcVM */
    KnownEndpointType["AzureArcVM"] = "AzureArcVM";
    /** AzureVmss */
    KnownEndpointType["AzureVmss"] = "AzureVMSS";
    /** AzureArcNetwork */
    KnownEndpointType["AzureArcNetwork"] = "AzureArcNetwork";
})(KnownEndpointType || (KnownEndpointType = {}));
/** Known values of {@link ConnectionMonitorEndpointFilterType} that the service accepts. */
export var KnownConnectionMonitorEndpointFilterType;
(function (KnownConnectionMonitorEndpointFilterType) {
    /** Include */
    KnownConnectionMonitorEndpointFilterType["Include"] = "Include";
})(KnownConnectionMonitorEndpointFilterType || (KnownConnectionMonitorEndpointFilterType = {}));
/** Known values of {@link ConnectionMonitorEndpointFilterItemType} that the service accepts. */
export var KnownConnectionMonitorEndpointFilterItemType;
(function (KnownConnectionMonitorEndpointFilterItemType) {
    /** AgentAddress */
    KnownConnectionMonitorEndpointFilterItemType["AgentAddress"] = "AgentAddress";
})(KnownConnectionMonitorEndpointFilterItemType || (KnownConnectionMonitorEndpointFilterItemType = {}));
/** Known values of {@link CoverageLevel} that the service accepts. */
export var KnownCoverageLevel;
(function (KnownCoverageLevel) {
    /** Default */
    KnownCoverageLevel["Default"] = "Default";
    /** Low */
    KnownCoverageLevel["Low"] = "Low";
    /** BelowAverage */
    KnownCoverageLevel["BelowAverage"] = "BelowAverage";
    /** Average */
    KnownCoverageLevel["Average"] = "Average";
    /** AboveAverage */
    KnownCoverageLevel["AboveAverage"] = "AboveAverage";
    /** Full */
    KnownCoverageLevel["Full"] = "Full";
})(KnownCoverageLevel || (KnownCoverageLevel = {}));
/** Known values of {@link ConnectionMonitorTestConfigurationProtocol} that the service accepts. */
export var KnownConnectionMonitorTestConfigurationProtocol;
(function (KnownConnectionMonitorTestConfigurationProtocol) {
    /** Tcp */
    KnownConnectionMonitorTestConfigurationProtocol["Tcp"] = "Tcp";
    /** Http */
    KnownConnectionMonitorTestConfigurationProtocol["Http"] = "Http";
    /** Icmp */
    KnownConnectionMonitorTestConfigurationProtocol["Icmp"] = "Icmp";
})(KnownConnectionMonitorTestConfigurationProtocol || (KnownConnectionMonitorTestConfigurationProtocol = {}));
/** Known values of {@link PreferredIPVersion} that the service accepts. */
export var KnownPreferredIPVersion;
(function (KnownPreferredIPVersion) {
    /** IPv4 */
    KnownPreferredIPVersion["IPv4"] = "IPv4";
    /** IPv6 */
    KnownPreferredIPVersion["IPv6"] = "IPv6";
})(KnownPreferredIPVersion || (KnownPreferredIPVersion = {}));
/** Known values of {@link HttpConfigurationMethod} that the service accepts. */
export var KnownHttpConfigurationMethod;
(function (KnownHttpConfigurationMethod) {
    /** Get */
    KnownHttpConfigurationMethod["Get"] = "Get";
    /** Post */
    KnownHttpConfigurationMethod["Post"] = "Post";
})(KnownHttpConfigurationMethod || (KnownHttpConfigurationMethod = {}));
/** Known values of {@link DestinationPortBehavior} that the service accepts. */
export var KnownDestinationPortBehavior;
(function (KnownDestinationPortBehavior) {
    /** None */
    KnownDestinationPortBehavior["None"] = "None";
    /** ListenIfAvailable */
    KnownDestinationPortBehavior["ListenIfAvailable"] = "ListenIfAvailable";
})(KnownDestinationPortBehavior || (KnownDestinationPortBehavior = {}));
/** Known values of {@link OutputType} that the service accepts. */
export var KnownOutputType;
(function (KnownOutputType) {
    /** Workspace */
    KnownOutputType["Workspace"] = "Workspace";
})(KnownOutputType || (KnownOutputType = {}));
/** Known values of {@link ConnectionMonitorType} that the service accepts. */
export var KnownConnectionMonitorType;
(function (KnownConnectionMonitorType) {
    /** MultiEndpoint */
    KnownConnectionMonitorType["MultiEndpoint"] = "MultiEndpoint";
    /** SingleSourceDestination */
    KnownConnectionMonitorType["SingleSourceDestination"] = "SingleSourceDestination";
})(KnownConnectionMonitorType || (KnownConnectionMonitorType = {}));
/** Known values of {@link ConnectionMonitorSourceStatus} that the service accepts. */
export var KnownConnectionMonitorSourceStatus;
(function (KnownConnectionMonitorSourceStatus) {
    /** Unknown */
    KnownConnectionMonitorSourceStatus["Unknown"] = "Unknown";
    /** Active */
    KnownConnectionMonitorSourceStatus["Active"] = "Active";
    /** Inactive */
    KnownConnectionMonitorSourceStatus["Inactive"] = "Inactive";
})(KnownConnectionMonitorSourceStatus || (KnownConnectionMonitorSourceStatus = {}));
/** Known values of {@link ConnectionState} that the service accepts. */
export var KnownConnectionState;
(function (KnownConnectionState) {
    /** Reachable */
    KnownConnectionState["Reachable"] = "Reachable";
    /** Unreachable */
    KnownConnectionState["Unreachable"] = "Unreachable";
    /** Unknown */
    KnownConnectionState["Unknown"] = "Unknown";
})(KnownConnectionState || (KnownConnectionState = {}));
/** Known values of {@link EvaluationState} that the service accepts. */
export var KnownEvaluationState;
(function (KnownEvaluationState) {
    /** NotStarted */
    KnownEvaluationState["NotStarted"] = "NotStarted";
    /** InProgress */
    KnownEvaluationState["InProgress"] = "InProgress";
    /** Completed */
    KnownEvaluationState["Completed"] = "Completed";
})(KnownEvaluationState || (KnownEvaluationState = {}));
/** Known values of {@link IsWorkloadProtected} that the service accepts. */
export var KnownIsWorkloadProtected;
(function (KnownIsWorkloadProtected) {
    /** False */
    KnownIsWorkloadProtected["False"] = "False";
    /** True */
    KnownIsWorkloadProtected["True"] = "True";
})(KnownIsWorkloadProtected || (KnownIsWorkloadProtected = {}));
/** Known values of {@link PublicIPPrefixSkuName} that the service accepts. */
export var KnownPublicIPPrefixSkuName;
(function (KnownPublicIPPrefixSkuName) {
    /** Standard */
    KnownPublicIPPrefixSkuName["Standard"] = "Standard";
})(KnownPublicIPPrefixSkuName || (KnownPublicIPPrefixSkuName = {}));
/** Known values of {@link PublicIPPrefixSkuTier} that the service accepts. */
export var KnownPublicIPPrefixSkuTier;
(function (KnownPublicIPPrefixSkuTier) {
    /** Regional */
    KnownPublicIPPrefixSkuTier["Regional"] = "Regional";
    /** Global */
    KnownPublicIPPrefixSkuTier["Global"] = "Global";
})(KnownPublicIPPrefixSkuTier || (KnownPublicIPPrefixSkuTier = {}));
/** Known values of {@link RouteFilterRuleType} that the service accepts. */
export var KnownRouteFilterRuleType;
(function (KnownRouteFilterRuleType) {
    /** Community */
    KnownRouteFilterRuleType["Community"] = "Community";
})(KnownRouteFilterRuleType || (KnownRouteFilterRuleType = {}));
/** Known values of {@link SecurityProviderName} that the service accepts. */
export var KnownSecurityProviderName;
(function (KnownSecurityProviderName) {
    /** ZScaler */
    KnownSecurityProviderName["ZScaler"] = "ZScaler";
    /** IBoss */
    KnownSecurityProviderName["IBoss"] = "IBoss";
    /** Checkpoint */
    KnownSecurityProviderName["Checkpoint"] = "Checkpoint";
})(KnownSecurityProviderName || (KnownSecurityProviderName = {}));
/** Known values of {@link SecurityPartnerProviderConnectionStatus} that the service accepts. */
export var KnownSecurityPartnerProviderConnectionStatus;
(function (KnownSecurityPartnerProviderConnectionStatus) {
    /** Unknown */
    KnownSecurityPartnerProviderConnectionStatus["Unknown"] = "Unknown";
    /** PartiallyConnected */
    KnownSecurityPartnerProviderConnectionStatus["PartiallyConnected"] = "PartiallyConnected";
    /** Connected */
    KnownSecurityPartnerProviderConnectionStatus["Connected"] = "Connected";
    /** NotConnected */
    KnownSecurityPartnerProviderConnectionStatus["NotConnected"] = "NotConnected";
})(KnownSecurityPartnerProviderConnectionStatus || (KnownSecurityPartnerProviderConnectionStatus = {}));
/** Known values of {@link UsageUnit} that the service accepts. */
export var KnownUsageUnit;
(function (KnownUsageUnit) {
    /** Count */
    KnownUsageUnit["Count"] = "Count";
})(KnownUsageUnit || (KnownUsageUnit = {}));
/** Known values of {@link VirtualNetworkEncryptionEnforcement} that the service accepts. */
export var KnownVirtualNetworkEncryptionEnforcement;
(function (KnownVirtualNetworkEncryptionEnforcement) {
    /** DropUnencrypted */
    KnownVirtualNetworkEncryptionEnforcement["DropUnencrypted"] = "DropUnencrypted";
    /** AllowUnencrypted */
    KnownVirtualNetworkEncryptionEnforcement["AllowUnencrypted"] = "AllowUnencrypted";
})(KnownVirtualNetworkEncryptionEnforcement || (KnownVirtualNetworkEncryptionEnforcement = {}));
/** Known values of {@link VirtualNetworkPeeringState} that the service accepts. */
export var KnownVirtualNetworkPeeringState;
(function (KnownVirtualNetworkPeeringState) {
    /** Initiated */
    KnownVirtualNetworkPeeringState["Initiated"] = "Initiated";
    /** Connected */
    KnownVirtualNetworkPeeringState["Connected"] = "Connected";
    /** Disconnected */
    KnownVirtualNetworkPeeringState["Disconnected"] = "Disconnected";
})(KnownVirtualNetworkPeeringState || (KnownVirtualNetworkPeeringState = {}));
/** Known values of {@link VirtualNetworkPeeringLevel} that the service accepts. */
export var KnownVirtualNetworkPeeringLevel;
(function (KnownVirtualNetworkPeeringLevel) {
    /** FullyInSync */
    KnownVirtualNetworkPeeringLevel["FullyInSync"] = "FullyInSync";
    /** RemoteNotInSync */
    KnownVirtualNetworkPeeringLevel["RemoteNotInSync"] = "RemoteNotInSync";
    /** LocalNotInSync */
    KnownVirtualNetworkPeeringLevel["LocalNotInSync"] = "LocalNotInSync";
    /** LocalAndRemoteNotInSync */
    KnownVirtualNetworkPeeringLevel["LocalAndRemoteNotInSync"] = "LocalAndRemoteNotInSync";
})(KnownVirtualNetworkPeeringLevel || (KnownVirtualNetworkPeeringLevel = {}));
/** Known values of {@link PrivateEndpointVNetPolicies} that the service accepts. */
export var KnownPrivateEndpointVNetPolicies;
(function (KnownPrivateEndpointVNetPolicies) {
    /** Disabled */
    KnownPrivateEndpointVNetPolicies["Disabled"] = "Disabled";
    /** Basic */
    KnownPrivateEndpointVNetPolicies["Basic"] = "Basic";
})(KnownPrivateEndpointVNetPolicies || (KnownPrivateEndpointVNetPolicies = {}));
/** Known values of {@link SyncRemoteAddressSpace} that the service accepts. */
export var KnownSyncRemoteAddressSpace;
(function (KnownSyncRemoteAddressSpace) {
    /** True */
    KnownSyncRemoteAddressSpace["True"] = "true";
})(KnownSyncRemoteAddressSpace || (KnownSyncRemoteAddressSpace = {}));
/** Known values of {@link VirtualNetworkGatewayType} that the service accepts. */
export var KnownVirtualNetworkGatewayType;
(function (KnownVirtualNetworkGatewayType) {
    /** Vpn */
    KnownVirtualNetworkGatewayType["Vpn"] = "Vpn";
    /** ExpressRoute */
    KnownVirtualNetworkGatewayType["ExpressRoute"] = "ExpressRoute";
    /** LocalGateway */
    KnownVirtualNetworkGatewayType["LocalGateway"] = "LocalGateway";
})(KnownVirtualNetworkGatewayType || (KnownVirtualNetworkGatewayType = {}));
/** Known values of {@link VpnType} that the service accepts. */
export var KnownVpnType;
(function (KnownVpnType) {
    /** PolicyBased */
    KnownVpnType["PolicyBased"] = "PolicyBased";
    /** RouteBased */
    KnownVpnType["RouteBased"] = "RouteBased";
})(KnownVpnType || (KnownVpnType = {}));
/** Known values of {@link VpnGatewayGeneration} that the service accepts. */
export var KnownVpnGatewayGeneration;
(function (KnownVpnGatewayGeneration) {
    /** None */
    KnownVpnGatewayGeneration["None"] = "None";
    /** Generation1 */
    KnownVpnGatewayGeneration["Generation1"] = "Generation1";
    /** Generation2 */
    KnownVpnGatewayGeneration["Generation2"] = "Generation2";
})(KnownVpnGatewayGeneration || (KnownVpnGatewayGeneration = {}));
/** Known values of {@link VirtualNetworkGatewaySkuName} that the service accepts. */
export var KnownVirtualNetworkGatewaySkuName;
(function (KnownVirtualNetworkGatewaySkuName) {
    /** Basic */
    KnownVirtualNetworkGatewaySkuName["Basic"] = "Basic";
    /** HighPerformance */
    KnownVirtualNetworkGatewaySkuName["HighPerformance"] = "HighPerformance";
    /** Standard */
    KnownVirtualNetworkGatewaySkuName["Standard"] = "Standard";
    /** UltraPerformance */
    KnownVirtualNetworkGatewaySkuName["UltraPerformance"] = "UltraPerformance";
    /** VpnGw1 */
    KnownVirtualNetworkGatewaySkuName["VpnGw1"] = "VpnGw1";
    /** VpnGw2 */
    KnownVirtualNetworkGatewaySkuName["VpnGw2"] = "VpnGw2";
    /** VpnGw3 */
    KnownVirtualNetworkGatewaySkuName["VpnGw3"] = "VpnGw3";
    /** VpnGw4 */
    KnownVirtualNetworkGatewaySkuName["VpnGw4"] = "VpnGw4";
    /** VpnGw5 */
    KnownVirtualNetworkGatewaySkuName["VpnGw5"] = "VpnGw5";
    /** VpnGw1AZ */
    KnownVirtualNetworkGatewaySkuName["VpnGw1AZ"] = "VpnGw1AZ";
    /** VpnGw2AZ */
    KnownVirtualNetworkGatewaySkuName["VpnGw2AZ"] = "VpnGw2AZ";
    /** VpnGw3AZ */
    KnownVirtualNetworkGatewaySkuName["VpnGw3AZ"] = "VpnGw3AZ";
    /** VpnGw4AZ */
    KnownVirtualNetworkGatewaySkuName["VpnGw4AZ"] = "VpnGw4AZ";
    /** VpnGw5AZ */
    KnownVirtualNetworkGatewaySkuName["VpnGw5AZ"] = "VpnGw5AZ";
    /** ErGw1AZ */
    KnownVirtualNetworkGatewaySkuName["ErGw1AZ"] = "ErGw1AZ";
    /** ErGw2AZ */
    KnownVirtualNetworkGatewaySkuName["ErGw2AZ"] = "ErGw2AZ";
    /** ErGw3AZ */
    KnownVirtualNetworkGatewaySkuName["ErGw3AZ"] = "ErGw3AZ";
    /** ErGwScale */
    KnownVirtualNetworkGatewaySkuName["ErGwScale"] = "ErGwScale";
})(KnownVirtualNetworkGatewaySkuName || (KnownVirtualNetworkGatewaySkuName = {}));
/** Known values of {@link VirtualNetworkGatewaySkuTier} that the service accepts. */
export var KnownVirtualNetworkGatewaySkuTier;
(function (KnownVirtualNetworkGatewaySkuTier) {
    /** Basic */
    KnownVirtualNetworkGatewaySkuTier["Basic"] = "Basic";
    /** HighPerformance */
    KnownVirtualNetworkGatewaySkuTier["HighPerformance"] = "HighPerformance";
    /** Standard */
    KnownVirtualNetworkGatewaySkuTier["Standard"] = "Standard";
    /** UltraPerformance */
    KnownVirtualNetworkGatewaySkuTier["UltraPerformance"] = "UltraPerformance";
    /** VpnGw1 */
    KnownVirtualNetworkGatewaySkuTier["VpnGw1"] = "VpnGw1";
    /** VpnGw2 */
    KnownVirtualNetworkGatewaySkuTier["VpnGw2"] = "VpnGw2";
    /** VpnGw3 */
    KnownVirtualNetworkGatewaySkuTier["VpnGw3"] = "VpnGw3";
    /** VpnGw4 */
    KnownVirtualNetworkGatewaySkuTier["VpnGw4"] = "VpnGw4";
    /** VpnGw5 */
    KnownVirtualNetworkGatewaySkuTier["VpnGw5"] = "VpnGw5";
    /** VpnGw1AZ */
    KnownVirtualNetworkGatewaySkuTier["VpnGw1AZ"] = "VpnGw1AZ";
    /** VpnGw2AZ */
    KnownVirtualNetworkGatewaySkuTier["VpnGw2AZ"] = "VpnGw2AZ";
    /** VpnGw3AZ */
    KnownVirtualNetworkGatewaySkuTier["VpnGw3AZ"] = "VpnGw3AZ";
    /** VpnGw4AZ */
    KnownVirtualNetworkGatewaySkuTier["VpnGw4AZ"] = "VpnGw4AZ";
    /** VpnGw5AZ */
    KnownVirtualNetworkGatewaySkuTier["VpnGw5AZ"] = "VpnGw5AZ";
    /** ErGw1AZ */
    KnownVirtualNetworkGatewaySkuTier["ErGw1AZ"] = "ErGw1AZ";
    /** ErGw2AZ */
    KnownVirtualNetworkGatewaySkuTier["ErGw2AZ"] = "ErGw2AZ";
    /** ErGw3AZ */
    KnownVirtualNetworkGatewaySkuTier["ErGw3AZ"] = "ErGw3AZ";
    /** ErGwScale */
    KnownVirtualNetworkGatewaySkuTier["ErGwScale"] = "ErGwScale";
})(KnownVirtualNetworkGatewaySkuTier || (KnownVirtualNetworkGatewaySkuTier = {}));
/** Known values of {@link VpnClientProtocol} that the service accepts. */
export var KnownVpnClientProtocol;
(function (KnownVpnClientProtocol) {
    /** IkeV2 */
    KnownVpnClientProtocol["IkeV2"] = "IkeV2";
    /** Sstp */
    KnownVpnClientProtocol["Sstp"] = "SSTP";
    /** OpenVPN */
    KnownVpnClientProtocol["OpenVPN"] = "OpenVPN";
})(KnownVpnClientProtocol || (KnownVpnClientProtocol = {}));
/** Known values of {@link VpnAuthenticationType} that the service accepts. */
export var KnownVpnAuthenticationType;
(function (KnownVpnAuthenticationType) {
    /** Certificate */
    KnownVpnAuthenticationType["Certificate"] = "Certificate";
    /** Radius */
    KnownVpnAuthenticationType["Radius"] = "Radius";
    /** AAD */
    KnownVpnAuthenticationType["AAD"] = "AAD";
})(KnownVpnAuthenticationType || (KnownVpnAuthenticationType = {}));
/** Known values of {@link IpsecEncryption} that the service accepts. */
export var KnownIpsecEncryption;
(function (KnownIpsecEncryption) {
    /** None */
    KnownIpsecEncryption["None"] = "None";
    /** DES */
    KnownIpsecEncryption["DES"] = "DES";
    /** DES3 */
    KnownIpsecEncryption["DES3"] = "DES3";
    /** AES128 */
    KnownIpsecEncryption["AES128"] = "AES128";
    /** AES192 */
    KnownIpsecEncryption["AES192"] = "AES192";
    /** AES256 */
    KnownIpsecEncryption["AES256"] = "AES256";
    /** Gcmaes128 */
    KnownIpsecEncryption["Gcmaes128"] = "GCMAES128";
    /** Gcmaes192 */
    KnownIpsecEncryption["Gcmaes192"] = "GCMAES192";
    /** Gcmaes256 */
    KnownIpsecEncryption["Gcmaes256"] = "GCMAES256";
})(KnownIpsecEncryption || (KnownIpsecEncryption = {}));
/** Known values of {@link IpsecIntegrity} that the service accepts. */
export var KnownIpsecIntegrity;
(function (KnownIpsecIntegrity) {
    /** MD5 */
    KnownIpsecIntegrity["MD5"] = "MD5";
    /** SHA1 */
    KnownIpsecIntegrity["SHA1"] = "SHA1";
    /** SHA256 */
    KnownIpsecIntegrity["SHA256"] = "SHA256";
    /** Gcmaes128 */
    KnownIpsecIntegrity["Gcmaes128"] = "GCMAES128";
    /** Gcmaes192 */
    KnownIpsecIntegrity["Gcmaes192"] = "GCMAES192";
    /** Gcmaes256 */
    KnownIpsecIntegrity["Gcmaes256"] = "GCMAES256";
})(KnownIpsecIntegrity || (KnownIpsecIntegrity = {}));
/** Known values of {@link IkeEncryption} that the service accepts. */
export var KnownIkeEncryption;
(function (KnownIkeEncryption) {
    /** DES */
    KnownIkeEncryption["DES"] = "DES";
    /** DES3 */
    KnownIkeEncryption["DES3"] = "DES3";
    /** AES128 */
    KnownIkeEncryption["AES128"] = "AES128";
    /** AES192 */
    KnownIkeEncryption["AES192"] = "AES192";
    /** AES256 */
    KnownIkeEncryption["AES256"] = "AES256";
    /** Gcmaes256 */
    KnownIkeEncryption["Gcmaes256"] = "GCMAES256";
    /** Gcmaes128 */
    KnownIkeEncryption["Gcmaes128"] = "GCMAES128";
})(KnownIkeEncryption || (KnownIkeEncryption = {}));
/** Known values of {@link IkeIntegrity} that the service accepts. */
export var KnownIkeIntegrity;
(function (KnownIkeIntegrity) {
    /** MD5 */
    KnownIkeIntegrity["MD5"] = "MD5";
    /** SHA1 */
    KnownIkeIntegrity["SHA1"] = "SHA1";
    /** SHA256 */
    KnownIkeIntegrity["SHA256"] = "SHA256";
    /** SHA384 */
    KnownIkeIntegrity["SHA384"] = "SHA384";
    /** Gcmaes256 */
    KnownIkeIntegrity["Gcmaes256"] = "GCMAES256";
    /** Gcmaes128 */
    KnownIkeIntegrity["Gcmaes128"] = "GCMAES128";
})(KnownIkeIntegrity || (KnownIkeIntegrity = {}));
/** Known values of {@link DhGroup} that the service accepts. */
export var KnownDhGroup;
(function (KnownDhGroup) {
    /** None */
    KnownDhGroup["None"] = "None";
    /** DHGroup1 */
    KnownDhGroup["DHGroup1"] = "DHGroup1";
    /** DHGroup2 */
    KnownDhGroup["DHGroup2"] = "DHGroup2";
    /** DHGroup14 */
    KnownDhGroup["DHGroup14"] = "DHGroup14";
    /** DHGroup2048 */
    KnownDhGroup["DHGroup2048"] = "DHGroup2048";
    /** ECP256 */
    KnownDhGroup["ECP256"] = "ECP256";
    /** ECP384 */
    KnownDhGroup["ECP384"] = "ECP384";
    /** DHGroup24 */
    KnownDhGroup["DHGroup24"] = "DHGroup24";
})(KnownDhGroup || (KnownDhGroup = {}));
/** Known values of {@link PfsGroup} that the service accepts. */
export var KnownPfsGroup;
(function (KnownPfsGroup) {
    /** None */
    KnownPfsGroup["None"] = "None";
    /** PFS1 */
    KnownPfsGroup["PFS1"] = "PFS1";
    /** PFS2 */
    KnownPfsGroup["PFS2"] = "PFS2";
    /** PFS2048 */
    KnownPfsGroup["PFS2048"] = "PFS2048";
    /** ECP256 */
    KnownPfsGroup["ECP256"] = "ECP256";
    /** ECP384 */
    KnownPfsGroup["ECP384"] = "ECP384";
    /** PFS24 */
    KnownPfsGroup["PFS24"] = "PFS24";
    /** PFS14 */
    KnownPfsGroup["PFS14"] = "PFS14";
    /** Pfsmm */
    KnownPfsGroup["Pfsmm"] = "PFSMM";
})(KnownPfsGroup || (KnownPfsGroup = {}));
/** Known values of {@link VpnPolicyMemberAttributeType} that the service accepts. */
export var KnownVpnPolicyMemberAttributeType;
(function (KnownVpnPolicyMemberAttributeType) {
    /** CertificateGroupId */
    KnownVpnPolicyMemberAttributeType["CertificateGroupId"] = "CertificateGroupId";
    /** AADGroupId */
    KnownVpnPolicyMemberAttributeType["AADGroupId"] = "AADGroupId";
    /** RadiusAzureGroupId */
    KnownVpnPolicyMemberAttributeType["RadiusAzureGroupId"] = "RadiusAzureGroupId";
})(KnownVpnPolicyMemberAttributeType || (KnownVpnPolicyMemberAttributeType = {}));
/** Known values of {@link VpnNatRuleType} that the service accepts. */
export var KnownVpnNatRuleType;
(function (KnownVpnNatRuleType) {
    /** Static */
    KnownVpnNatRuleType["Static"] = "Static";
    /** Dynamic */
    KnownVpnNatRuleType["Dynamic"] = "Dynamic";
})(KnownVpnNatRuleType || (KnownVpnNatRuleType = {}));
/** Known values of {@link VpnNatRuleMode} that the service accepts. */
export var KnownVpnNatRuleMode;
(function (KnownVpnNatRuleMode) {
    /** EgressSnat */
    KnownVpnNatRuleMode["EgressSnat"] = "EgressSnat";
    /** IngressSnat */
    KnownVpnNatRuleMode["IngressSnat"] = "IngressSnat";
})(KnownVpnNatRuleMode || (KnownVpnNatRuleMode = {}));
/** Known values of {@link AdminState} that the service accepts. */
export var KnownAdminState;
(function (KnownAdminState) {
    /** Enabled */
    KnownAdminState["Enabled"] = "Enabled";
    /** Disabled */
    KnownAdminState["Disabled"] = "Disabled";
})(KnownAdminState || (KnownAdminState = {}));
/** Known values of {@link ResiliencyModel} that the service accepts. */
export var KnownResiliencyModel;
(function (KnownResiliencyModel) {
    /** SingleHomed */
    KnownResiliencyModel["SingleHomed"] = "SingleHomed";
    /** MultiHomed */
    KnownResiliencyModel["MultiHomed"] = "MultiHomed";
})(KnownResiliencyModel || (KnownResiliencyModel = {}));
/** Known values of {@link VirtualNetworkGatewayConnectionType} that the service accepts. */
export var KnownVirtualNetworkGatewayConnectionType;
(function (KnownVirtualNetworkGatewayConnectionType) {
    /** IPsec */
    KnownVirtualNetworkGatewayConnectionType["IPsec"] = "IPsec";
    /** Vnet2Vnet */
    KnownVirtualNetworkGatewayConnectionType["Vnet2Vnet"] = "Vnet2Vnet";
    /** ExpressRoute */
    KnownVirtualNetworkGatewayConnectionType["ExpressRoute"] = "ExpressRoute";
    /** VPNClient */
    KnownVirtualNetworkGatewayConnectionType["VPNClient"] = "VPNClient";
})(KnownVirtualNetworkGatewayConnectionType || (KnownVirtualNetworkGatewayConnectionType = {}));
/** Known values of {@link VirtualNetworkGatewayConnectionProtocol} that the service accepts. */
export var KnownVirtualNetworkGatewayConnectionProtocol;
(function (KnownVirtualNetworkGatewayConnectionProtocol) {
    /** IKEv2 */
    KnownVirtualNetworkGatewayConnectionProtocol["IKEv2"] = "IKEv2";
    /** IKEv1 */
    KnownVirtualNetworkGatewayConnectionProtocol["IKEv1"] = "IKEv1";
})(KnownVirtualNetworkGatewayConnectionProtocol || (KnownVirtualNetworkGatewayConnectionProtocol = {}));
/** Known values of {@link VirtualNetworkGatewayConnectionMode} that the service accepts. */
export var KnownVirtualNetworkGatewayConnectionMode;
(function (KnownVirtualNetworkGatewayConnectionMode) {
    /** Default */
    KnownVirtualNetworkGatewayConnectionMode["Default"] = "Default";
    /** ResponderOnly */
    KnownVirtualNetworkGatewayConnectionMode["ResponderOnly"] = "ResponderOnly";
    /** InitiatorOnly */
    KnownVirtualNetworkGatewayConnectionMode["InitiatorOnly"] = "InitiatorOnly";
})(KnownVirtualNetworkGatewayConnectionMode || (KnownVirtualNetworkGatewayConnectionMode = {}));
/** Known values of {@link VirtualNetworkGatewayConnectionStatus} that the service accepts. */
export var KnownVirtualNetworkGatewayConnectionStatus;
(function (KnownVirtualNetworkGatewayConnectionStatus) {
    /** Unknown */
    KnownVirtualNetworkGatewayConnectionStatus["Unknown"] = "Unknown";
    /** Connecting */
    KnownVirtualNetworkGatewayConnectionStatus["Connecting"] = "Connecting";
    /** Connected */
    KnownVirtualNetworkGatewayConnectionStatus["Connected"] = "Connected";
    /** NotConnected */
    KnownVirtualNetworkGatewayConnectionStatus["NotConnected"] = "NotConnected";
})(KnownVirtualNetworkGatewayConnectionStatus || (KnownVirtualNetworkGatewayConnectionStatus = {}));
/** Known values of {@link ProcessorArchitecture} that the service accepts. */
export var KnownProcessorArchitecture;
(function (KnownProcessorArchitecture) {
    /** Amd64 */
    KnownProcessorArchitecture["Amd64"] = "Amd64";
    /** X86 */
    KnownProcessorArchitecture["X86"] = "X86";
})(KnownProcessorArchitecture || (KnownProcessorArchitecture = {}));
/** Known values of {@link AuthenticationMethod} that the service accepts. */
export var KnownAuthenticationMethod;
(function (KnownAuthenticationMethod) {
    /** Eaptls */
    KnownAuthenticationMethod["Eaptls"] = "EAPTLS";
    /** EapmschaPv2 */
    KnownAuthenticationMethod["EapmschaPv2"] = "EAPMSCHAPv2";
})(KnownAuthenticationMethod || (KnownAuthenticationMethod = {}));
/** Known values of {@link BgpPeerState} that the service accepts. */
export var KnownBgpPeerState;
(function (KnownBgpPeerState) {
    /** Unknown */
    KnownBgpPeerState["Unknown"] = "Unknown";
    /** Stopped */
    KnownBgpPeerState["Stopped"] = "Stopped";
    /** Idle */
    KnownBgpPeerState["Idle"] = "Idle";
    /** Connecting */
    KnownBgpPeerState["Connecting"] = "Connecting";
    /** Connected */
    KnownBgpPeerState["Connected"] = "Connected";
})(KnownBgpPeerState || (KnownBgpPeerState = {}));
/** Known values of {@link FailoverTestStatus} that the service accepts. */
export var KnownFailoverTestStatus;
(function (KnownFailoverTestStatus) {
    /** NotStarted */
    KnownFailoverTestStatus["NotStarted"] = "NotStarted";
    /** Starting */
    KnownFailoverTestStatus["Starting"] = "Starting";
    /** Running */
    KnownFailoverTestStatus["Running"] = "Running";
    /** StartFailed */
    KnownFailoverTestStatus["StartFailed"] = "StartFailed";
    /** Stopping */
    KnownFailoverTestStatus["Stopping"] = "Stopping";
    /** Completed */
    KnownFailoverTestStatus["Completed"] = "Completed";
    /** StopFailed */
    KnownFailoverTestStatus["StopFailed"] = "StopFailed";
    /** Invalid */
    KnownFailoverTestStatus["Invalid"] = "Invalid";
    /** Expired */
    KnownFailoverTestStatus["Expired"] = "Expired";
})(KnownFailoverTestStatus || (KnownFailoverTestStatus = {}));
/** Known values of {@link FailoverConnectionStatus} that the service accepts. */
export var KnownFailoverConnectionStatus;
(function (KnownFailoverConnectionStatus) {
    /** Connected */
    KnownFailoverConnectionStatus["Connected"] = "Connected";
    /** Disconnected */
    KnownFailoverConnectionStatus["Disconnected"] = "Disconnected";
})(KnownFailoverConnectionStatus || (KnownFailoverConnectionStatus = {}));
/** Known values of {@link FailoverTestType} that the service accepts. */
export var KnownFailoverTestType;
(function (KnownFailoverTestType) {
    /** SingleSiteFailover */
    KnownFailoverTestType["SingleSiteFailover"] = "SingleSiteFailover";
    /** MultiSiteFailover */
    KnownFailoverTestType["MultiSiteFailover"] = "MultiSiteFailover";
    /** All */
    KnownFailoverTestType["All"] = "All";
})(KnownFailoverTestType || (KnownFailoverTestType = {}));
/** Known values of {@link FailoverTestStatusForSingleTest} that the service accepts. */
export var KnownFailoverTestStatusForSingleTest;
(function (KnownFailoverTestStatusForSingleTest) {
    /** NotStarted */
    KnownFailoverTestStatusForSingleTest["NotStarted"] = "NotStarted";
    /** Starting */
    KnownFailoverTestStatusForSingleTest["Starting"] = "Starting";
    /** Running */
    KnownFailoverTestStatusForSingleTest["Running"] = "Running";
    /** StartFailed */
    KnownFailoverTestStatusForSingleTest["StartFailed"] = "StartFailed";
    /** Stopping */
    KnownFailoverTestStatusForSingleTest["Stopping"] = "Stopping";
    /** Completed */
    KnownFailoverTestStatusForSingleTest["Completed"] = "Completed";
    /** StopFailed */
    KnownFailoverTestStatusForSingleTest["StopFailed"] = "StopFailed";
    /** Invalid */
    KnownFailoverTestStatusForSingleTest["Invalid"] = "Invalid";
    /** Expired */
    KnownFailoverTestStatusForSingleTest["Expired"] = "Expired";
})(KnownFailoverTestStatusForSingleTest || (KnownFailoverTestStatusForSingleTest = {}));
/** Known values of {@link OfficeTrafficCategory} that the service accepts. */
export var KnownOfficeTrafficCategory;
(function (KnownOfficeTrafficCategory) {
    /** Optimize */
    KnownOfficeTrafficCategory["Optimize"] = "Optimize";
    /** OptimizeAndAllow */
    KnownOfficeTrafficCategory["OptimizeAndAllow"] = "OptimizeAndAllow";
    /** All */
    KnownOfficeTrafficCategory["All"] = "All";
    /** None */
    KnownOfficeTrafficCategory["None"] = "None";
})(KnownOfficeTrafficCategory || (KnownOfficeTrafficCategory = {}));
/** Known values of {@link VirtualWanSecurityProviderType} that the service accepts. */
export var KnownVirtualWanSecurityProviderType;
(function (KnownVirtualWanSecurityProviderType) {
    /** External */
    KnownVirtualWanSecurityProviderType["External"] = "External";
    /** Native */
    KnownVirtualWanSecurityProviderType["Native"] = "Native";
})(KnownVirtualWanSecurityProviderType || (KnownVirtualWanSecurityProviderType = {}));
/** Known values of {@link VpnGatewayTunnelingProtocol} that the service accepts. */
export var KnownVpnGatewayTunnelingProtocol;
(function (KnownVpnGatewayTunnelingProtocol) {
    /** IkeV2 */
    KnownVpnGatewayTunnelingProtocol["IkeV2"] = "IkeV2";
    /** OpenVPN */
    KnownVpnGatewayTunnelingProtocol["OpenVPN"] = "OpenVPN";
})(KnownVpnGatewayTunnelingProtocol || (KnownVpnGatewayTunnelingProtocol = {}));
/** Known values of {@link VnetLocalRouteOverrideCriteria} that the service accepts. */
export var KnownVnetLocalRouteOverrideCriteria;
(function (KnownVnetLocalRouteOverrideCriteria) {
    /** Contains */
    KnownVnetLocalRouteOverrideCriteria["Contains"] = "Contains";
    /** Equal */
    KnownVnetLocalRouteOverrideCriteria["Equal"] = "Equal";
})(KnownVnetLocalRouteOverrideCriteria || (KnownVnetLocalRouteOverrideCriteria = {}));
/** Known values of {@link RoutingState} that the service accepts. */
export var KnownRoutingState;
(function (KnownRoutingState) {
    /** None */
    KnownRoutingState["None"] = "None";
    /** Provisioned */
    KnownRoutingState["Provisioned"] = "Provisioned";
    /** Provisioning */
    KnownRoutingState["Provisioning"] = "Provisioning";
    /** Failed */
    KnownRoutingState["Failed"] = "Failed";
})(KnownRoutingState || (KnownRoutingState = {}));
/** Known values of {@link PreferredRoutingGateway} that the service accepts. */
export var KnownPreferredRoutingGateway;
(function (KnownPreferredRoutingGateway) {
    /** ExpressRoute */
    KnownPreferredRoutingGateway["ExpressRoute"] = "ExpressRoute";
    /** VpnGateway */
    KnownPreferredRoutingGateway["VpnGateway"] = "VpnGateway";
    /** None */
    KnownPreferredRoutingGateway["None"] = "None";
})(KnownPreferredRoutingGateway || (KnownPreferredRoutingGateway = {}));
/** Known values of {@link HubRoutingPreference} that the service accepts. */
export var KnownHubRoutingPreference;
(function (KnownHubRoutingPreference) {
    /** ExpressRoute */
    KnownHubRoutingPreference["ExpressRoute"] = "ExpressRoute";
    /** VpnGateway */
    KnownHubRoutingPreference["VpnGateway"] = "VpnGateway";
    /** ASPath */
    KnownHubRoutingPreference["ASPath"] = "ASPath";
})(KnownHubRoutingPreference || (KnownHubRoutingPreference = {}));
/** Known values of {@link RouteMapMatchCondition} that the service accepts. */
export var KnownRouteMapMatchCondition;
(function (KnownRouteMapMatchCondition) {
    /** Unknown */
    KnownRouteMapMatchCondition["Unknown"] = "Unknown";
    /** Contains */
    KnownRouteMapMatchCondition["Contains"] = "Contains";
    /** Equals */
    KnownRouteMapMatchCondition["Equals"] = "Equals";
    /** NotContains */
    KnownRouteMapMatchCondition["NotContains"] = "NotContains";
    /** NotEquals */
    KnownRouteMapMatchCondition["NotEquals"] = "NotEquals";
})(KnownRouteMapMatchCondition || (KnownRouteMapMatchCondition = {}));
/** Known values of {@link RouteMapActionType} that the service accepts. */
export var KnownRouteMapActionType;
(function (KnownRouteMapActionType) {
    /** Unknown */
    KnownRouteMapActionType["Unknown"] = "Unknown";
    /** Remove */
    KnownRouteMapActionType["Remove"] = "Remove";
    /** Add */
    KnownRouteMapActionType["Add"] = "Add";
    /** Replace */
    KnownRouteMapActionType["Replace"] = "Replace";
    /** Drop */
    KnownRouteMapActionType["Drop"] = "Drop";
})(KnownRouteMapActionType || (KnownRouteMapActionType = {}));
/** Known values of {@link NextStep} that the service accepts. */
export var KnownNextStep;
(function (KnownNextStep) {
    /** Unknown */
    KnownNextStep["Unknown"] = "Unknown";
    /** Continue */
    KnownNextStep["Continue"] = "Continue";
    /** Terminate */
    KnownNextStep["Terminate"] = "Terminate";
})(KnownNextStep || (KnownNextStep = {}));
/** Known values of {@link VpnConnectionStatus} that the service accepts. */
export var KnownVpnConnectionStatus;
(function (KnownVpnConnectionStatus) {
    /** Unknown */
    KnownVpnConnectionStatus["Unknown"] = "Unknown";
    /** Connecting */
    KnownVpnConnectionStatus["Connecting"] = "Connecting";
    /** Connected */
    KnownVpnConnectionStatus["Connected"] = "Connected";
    /** NotConnected */
    KnownVpnConnectionStatus["NotConnected"] = "NotConnected";
})(KnownVpnConnectionStatus || (KnownVpnConnectionStatus = {}));
/** Known values of {@link VpnLinkConnectionMode} that the service accepts. */
export var KnownVpnLinkConnectionMode;
(function (KnownVpnLinkConnectionMode) {
    /** Default */
    KnownVpnLinkConnectionMode["Default"] = "Default";
    /** ResponderOnly */
    KnownVpnLinkConnectionMode["ResponderOnly"] = "ResponderOnly";
    /** InitiatorOnly */
    KnownVpnLinkConnectionMode["InitiatorOnly"] = "InitiatorOnly";
})(KnownVpnLinkConnectionMode || (KnownVpnLinkConnectionMode = {}));
/** Known values of {@link HubBgpConnectionStatus} that the service accepts. */
export var KnownHubBgpConnectionStatus;
(function (KnownHubBgpConnectionStatus) {
    /** Unknown */
    KnownHubBgpConnectionStatus["Unknown"] = "Unknown";
    /** Connecting */
    KnownHubBgpConnectionStatus["Connecting"] = "Connecting";
    /** Connected */
    KnownHubBgpConnectionStatus["Connected"] = "Connected";
    /** NotConnected */
    KnownHubBgpConnectionStatus["NotConnected"] = "NotConnected";
})(KnownHubBgpConnectionStatus || (KnownHubBgpConnectionStatus = {}));
/** Known values of {@link WebApplicationFirewallEnabledState} that the service accepts. */
export var KnownWebApplicationFirewallEnabledState;
(function (KnownWebApplicationFirewallEnabledState) {
    /** Disabled */
    KnownWebApplicationFirewallEnabledState["Disabled"] = "Disabled";
    /** Enabled */
    KnownWebApplicationFirewallEnabledState["Enabled"] = "Enabled";
})(KnownWebApplicationFirewallEnabledState || (KnownWebApplicationFirewallEnabledState = {}));
/** Known values of {@link WebApplicationFirewallMode} that the service accepts. */
export var KnownWebApplicationFirewallMode;
(function (KnownWebApplicationFirewallMode) {
    /** Prevention */
    KnownWebApplicationFirewallMode["Prevention"] = "Prevention";
    /** Detection */
    KnownWebApplicationFirewallMode["Detection"] = "Detection";
})(KnownWebApplicationFirewallMode || (KnownWebApplicationFirewallMode = {}));
/** Known values of {@link WebApplicationFirewallScrubbingState} that the service accepts. */
export var KnownWebApplicationFirewallScrubbingState;
(function (KnownWebApplicationFirewallScrubbingState) {
    /** Disabled */
    KnownWebApplicationFirewallScrubbingState["Disabled"] = "Disabled";
    /** Enabled */
    KnownWebApplicationFirewallScrubbingState["Enabled"] = "Enabled";
})(KnownWebApplicationFirewallScrubbingState || (KnownWebApplicationFirewallScrubbingState = {}));
/** Known values of {@link ScrubbingRuleEntryMatchVariable} that the service accepts. */
export var KnownScrubbingRuleEntryMatchVariable;
(function (KnownScrubbingRuleEntryMatchVariable) {
    /** RequestHeaderNames */
    KnownScrubbingRuleEntryMatchVariable["RequestHeaderNames"] = "RequestHeaderNames";
    /** RequestCookieNames */
    KnownScrubbingRuleEntryMatchVariable["RequestCookieNames"] = "RequestCookieNames";
    /** RequestArgNames */
    KnownScrubbingRuleEntryMatchVariable["RequestArgNames"] = "RequestArgNames";
    /** RequestPostArgNames */
    KnownScrubbingRuleEntryMatchVariable["RequestPostArgNames"] = "RequestPostArgNames";
    /** RequestJsonArgNames */
    KnownScrubbingRuleEntryMatchVariable["RequestJsonArgNames"] = "RequestJSONArgNames";
    /** RequestIPAddress */
    KnownScrubbingRuleEntryMatchVariable["RequestIPAddress"] = "RequestIPAddress";
})(KnownScrubbingRuleEntryMatchVariable || (KnownScrubbingRuleEntryMatchVariable = {}));
/** Known values of {@link ScrubbingRuleEntryMatchOperator} that the service accepts. */
export var KnownScrubbingRuleEntryMatchOperator;
(function (KnownScrubbingRuleEntryMatchOperator) {
    /** Equals */
    KnownScrubbingRuleEntryMatchOperator["Equals"] = "Equals";
    /** EqualsAny */
    KnownScrubbingRuleEntryMatchOperator["EqualsAny"] = "EqualsAny";
})(KnownScrubbingRuleEntryMatchOperator || (KnownScrubbingRuleEntryMatchOperator = {}));
/** Known values of {@link ScrubbingRuleEntryState} that the service accepts. */
export var KnownScrubbingRuleEntryState;
(function (KnownScrubbingRuleEntryState) {
    /** Enabled */
    KnownScrubbingRuleEntryState["Enabled"] = "Enabled";
    /** Disabled */
    KnownScrubbingRuleEntryState["Disabled"] = "Disabled";
})(KnownScrubbingRuleEntryState || (KnownScrubbingRuleEntryState = {}));
/** Known values of {@link WebApplicationFirewallState} that the service accepts. */
export var KnownWebApplicationFirewallState;
(function (KnownWebApplicationFirewallState) {
    /** Disabled */
    KnownWebApplicationFirewallState["Disabled"] = "Disabled";
    /** Enabled */
    KnownWebApplicationFirewallState["Enabled"] = "Enabled";
})(KnownWebApplicationFirewallState || (KnownWebApplicationFirewallState = {}));
/** Known values of {@link ApplicationGatewayFirewallRateLimitDuration} that the service accepts. */
export var KnownApplicationGatewayFirewallRateLimitDuration;
(function (KnownApplicationGatewayFirewallRateLimitDuration) {
    /** OneMin */
    KnownApplicationGatewayFirewallRateLimitDuration["OneMin"] = "OneMin";
    /** FiveMins */
    KnownApplicationGatewayFirewallRateLimitDuration["FiveMins"] = "FiveMins";
})(KnownApplicationGatewayFirewallRateLimitDuration || (KnownApplicationGatewayFirewallRateLimitDuration = {}));
/** Known values of {@link WebApplicationFirewallRuleType} that the service accepts. */
export var KnownWebApplicationFirewallRuleType;
(function (KnownWebApplicationFirewallRuleType) {
    /** MatchRule */
    KnownWebApplicationFirewallRuleType["MatchRule"] = "MatchRule";
    /** RateLimitRule */
    KnownWebApplicationFirewallRuleType["RateLimitRule"] = "RateLimitRule";
    /** Invalid */
    KnownWebApplicationFirewallRuleType["Invalid"] = "Invalid";
})(KnownWebApplicationFirewallRuleType || (KnownWebApplicationFirewallRuleType = {}));
/** Known values of {@link WebApplicationFirewallMatchVariable} that the service accepts. */
export var KnownWebApplicationFirewallMatchVariable;
(function (KnownWebApplicationFirewallMatchVariable) {
    /** RemoteAddr */
    KnownWebApplicationFirewallMatchVariable["RemoteAddr"] = "RemoteAddr";
    /** RequestMethod */
    KnownWebApplicationFirewallMatchVariable["RequestMethod"] = "RequestMethod";
    /** QueryString */
    KnownWebApplicationFirewallMatchVariable["QueryString"] = "QueryString";
    /** PostArgs */
    KnownWebApplicationFirewallMatchVariable["PostArgs"] = "PostArgs";
    /** RequestUri */
    KnownWebApplicationFirewallMatchVariable["RequestUri"] = "RequestUri";
    /** RequestHeaders */
    KnownWebApplicationFirewallMatchVariable["RequestHeaders"] = "RequestHeaders";
    /** RequestBody */
    KnownWebApplicationFirewallMatchVariable["RequestBody"] = "RequestBody";
    /** RequestCookies */
    KnownWebApplicationFirewallMatchVariable["RequestCookies"] = "RequestCookies";
})(KnownWebApplicationFirewallMatchVariable || (KnownWebApplicationFirewallMatchVariable = {}));
/** Known values of {@link WebApplicationFirewallOperator} that the service accepts. */
export var KnownWebApplicationFirewallOperator;
(function (KnownWebApplicationFirewallOperator) {
    /** IPMatch */
    KnownWebApplicationFirewallOperator["IPMatch"] = "IPMatch";
    /** Equal */
    KnownWebApplicationFirewallOperator["Equal"] = "Equal";
    /** Contains */
    KnownWebApplicationFirewallOperator["Contains"] = "Contains";
    /** LessThan */
    KnownWebApplicationFirewallOperator["LessThan"] = "LessThan";
    /** GreaterThan */
    KnownWebApplicationFirewallOperator["GreaterThan"] = "GreaterThan";
    /** LessThanOrEqual */
    KnownWebApplicationFirewallOperator["LessThanOrEqual"] = "LessThanOrEqual";
    /** GreaterThanOrEqual */
    KnownWebApplicationFirewallOperator["GreaterThanOrEqual"] = "GreaterThanOrEqual";
    /** BeginsWith */
    KnownWebApplicationFirewallOperator["BeginsWith"] = "BeginsWith";
    /** EndsWith */
    KnownWebApplicationFirewallOperator["EndsWith"] = "EndsWith";
    /** Regex */
    KnownWebApplicationFirewallOperator["Regex"] = "Regex";
    /** GeoMatch */
    KnownWebApplicationFirewallOperator["GeoMatch"] = "GeoMatch";
    /** Any */
    KnownWebApplicationFirewallOperator["Any"] = "Any";
})(KnownWebApplicationFirewallOperator || (KnownWebApplicationFirewallOperator = {}));
/** Known values of {@link WebApplicationFirewallTransform} that the service accepts. */
export var KnownWebApplicationFirewallTransform;
(function (KnownWebApplicationFirewallTransform) {
    /** Uppercase */
    KnownWebApplicationFirewallTransform["Uppercase"] = "Uppercase";
    /** Lowercase */
    KnownWebApplicationFirewallTransform["Lowercase"] = "Lowercase";
    /** Trim */
    KnownWebApplicationFirewallTransform["Trim"] = "Trim";
    /** UrlDecode */
    KnownWebApplicationFirewallTransform["UrlDecode"] = "UrlDecode";
    /** UrlEncode */
    KnownWebApplicationFirewallTransform["UrlEncode"] = "UrlEncode";
    /** RemoveNulls */
    KnownWebApplicationFirewallTransform["RemoveNulls"] = "RemoveNulls";
    /** HtmlEntityDecode */
    KnownWebApplicationFirewallTransform["HtmlEntityDecode"] = "HtmlEntityDecode";
})(KnownWebApplicationFirewallTransform || (KnownWebApplicationFirewallTransform = {}));
/** Known values of {@link ApplicationGatewayFirewallUserSessionVariable} that the service accepts. */
export var KnownApplicationGatewayFirewallUserSessionVariable;
(function (KnownApplicationGatewayFirewallUserSessionVariable) {
    /** ClientAddr */
    KnownApplicationGatewayFirewallUserSessionVariable["ClientAddr"] = "ClientAddr";
    /** GeoLocation */
    KnownApplicationGatewayFirewallUserSessionVariable["GeoLocation"] = "GeoLocation";
    /** None */
    KnownApplicationGatewayFirewallUserSessionVariable["None"] = "None";
})(KnownApplicationGatewayFirewallUserSessionVariable || (KnownApplicationGatewayFirewallUserSessionVariable = {}));
/** Known values of {@link WebApplicationFirewallAction} that the service accepts. */
export var KnownWebApplicationFirewallAction;
(function (KnownWebApplicationFirewallAction) {
    /** Allow */
    KnownWebApplicationFirewallAction["Allow"] = "Allow";
    /** Block */
    KnownWebApplicationFirewallAction["Block"] = "Block";
    /** Log */
    KnownWebApplicationFirewallAction["Log"] = "Log";
    /** JSChallenge */
    KnownWebApplicationFirewallAction["JSChallenge"] = "JSChallenge";
})(KnownWebApplicationFirewallAction || (KnownWebApplicationFirewallAction = {}));
/** Known values of {@link WebApplicationFirewallPolicyResourceState} that the service accepts. */
export var KnownWebApplicationFirewallPolicyResourceState;
(function (KnownWebApplicationFirewallPolicyResourceState) {
    /** Creating */
    KnownWebApplicationFirewallPolicyResourceState["Creating"] = "Creating";
    /** Enabling */
    KnownWebApplicationFirewallPolicyResourceState["Enabling"] = "Enabling";
    /** Enabled */
    KnownWebApplicationFirewallPolicyResourceState["Enabled"] = "Enabled";
    /** Disabling */
    KnownWebApplicationFirewallPolicyResourceState["Disabling"] = "Disabling";
    /** Disabled */
    KnownWebApplicationFirewallPolicyResourceState["Disabled"] = "Disabled";
    /** Deleting */
    KnownWebApplicationFirewallPolicyResourceState["Deleting"] = "Deleting";
})(KnownWebApplicationFirewallPolicyResourceState || (KnownWebApplicationFirewallPolicyResourceState = {}));
/** Known values of {@link ExceptionEntryMatchVariable} that the service accepts. */
export var KnownExceptionEntryMatchVariable;
(function (KnownExceptionEntryMatchVariable) {
    /** RequestURI */
    KnownExceptionEntryMatchVariable["RequestURI"] = "RequestURI";
    /** RemoteAddr */
    KnownExceptionEntryMatchVariable["RemoteAddr"] = "RemoteAddr";
    /** RequestHeader */
    KnownExceptionEntryMatchVariable["RequestHeader"] = "RequestHeader";
})(KnownExceptionEntryMatchVariable || (KnownExceptionEntryMatchVariable = {}));
/** Known values of {@link ExceptionEntryValueMatchOperator} that the service accepts. */
export var KnownExceptionEntryValueMatchOperator;
(function (KnownExceptionEntryValueMatchOperator) {
    /** Equals */
    KnownExceptionEntryValueMatchOperator["Equals"] = "Equals";
    /** Contains */
    KnownExceptionEntryValueMatchOperator["Contains"] = "Contains";
    /** StartsWith */
    KnownExceptionEntryValueMatchOperator["StartsWith"] = "StartsWith";
    /** EndsWith */
    KnownExceptionEntryValueMatchOperator["EndsWith"] = "EndsWith";
    /** IPMatch */
    KnownExceptionEntryValueMatchOperator["IPMatch"] = "IPMatch";
})(KnownExceptionEntryValueMatchOperator || (KnownExceptionEntryValueMatchOperator = {}));
/** Known values of {@link ExceptionEntrySelectorMatchOperator} that the service accepts. */
export var KnownExceptionEntrySelectorMatchOperator;
(function (KnownExceptionEntrySelectorMatchOperator) {
    /** Equals */
    KnownExceptionEntrySelectorMatchOperator["Equals"] = "Equals";
    /** Contains */
    KnownExceptionEntrySelectorMatchOperator["Contains"] = "Contains";
    /** StartsWith */
    KnownExceptionEntrySelectorMatchOperator["StartsWith"] = "StartsWith";
    /** EndsWith */
    KnownExceptionEntrySelectorMatchOperator["EndsWith"] = "EndsWith";
})(KnownExceptionEntrySelectorMatchOperator || (KnownExceptionEntrySelectorMatchOperator = {}));
/** Known values of {@link OwaspCrsExclusionEntryMatchVariable} that the service accepts. */
export var KnownOwaspCrsExclusionEntryMatchVariable;
(function (KnownOwaspCrsExclusionEntryMatchVariable) {
    /** RequestHeaderNames */
    KnownOwaspCrsExclusionEntryMatchVariable["RequestHeaderNames"] = "RequestHeaderNames";
    /** RequestCookieNames */
    KnownOwaspCrsExclusionEntryMatchVariable["RequestCookieNames"] = "RequestCookieNames";
    /** RequestArgNames */
    KnownOwaspCrsExclusionEntryMatchVariable["RequestArgNames"] = "RequestArgNames";
    /** RequestHeaderKeys */
    KnownOwaspCrsExclusionEntryMatchVariable["RequestHeaderKeys"] = "RequestHeaderKeys";
    /** RequestHeaderValues */
    KnownOwaspCrsExclusionEntryMatchVariable["RequestHeaderValues"] = "RequestHeaderValues";
    /** RequestCookieKeys */
    KnownOwaspCrsExclusionEntryMatchVariable["RequestCookieKeys"] = "RequestCookieKeys";
    /** RequestCookieValues */
    KnownOwaspCrsExclusionEntryMatchVariable["RequestCookieValues"] = "RequestCookieValues";
    /** RequestArgKeys */
    KnownOwaspCrsExclusionEntryMatchVariable["RequestArgKeys"] = "RequestArgKeys";
    /** RequestArgValues */
    KnownOwaspCrsExclusionEntryMatchVariable["RequestArgValues"] = "RequestArgValues";
})(KnownOwaspCrsExclusionEntryMatchVariable || (KnownOwaspCrsExclusionEntryMatchVariable = {}));
/** Known values of {@link OwaspCrsExclusionEntrySelectorMatchOperator} that the service accepts. */
export var KnownOwaspCrsExclusionEntrySelectorMatchOperator;
(function (KnownOwaspCrsExclusionEntrySelectorMatchOperator) {
    /** Equals */
    KnownOwaspCrsExclusionEntrySelectorMatchOperator["Equals"] = "Equals";
    /** Contains */
    KnownOwaspCrsExclusionEntrySelectorMatchOperator["Contains"] = "Contains";
    /** StartsWith */
    KnownOwaspCrsExclusionEntrySelectorMatchOperator["StartsWith"] = "StartsWith";
    /** EndsWith */
    KnownOwaspCrsExclusionEntrySelectorMatchOperator["EndsWith"] = "EndsWith";
    /** EqualsAny */
    KnownOwaspCrsExclusionEntrySelectorMatchOperator["EqualsAny"] = "EqualsAny";
})(KnownOwaspCrsExclusionEntrySelectorMatchOperator || (KnownOwaspCrsExclusionEntrySelectorMatchOperator = {}));
/** Known values of {@link ManagedRuleEnabledState} that the service accepts. */
export var KnownManagedRuleEnabledState;
(function (KnownManagedRuleEnabledState) {
    /** Disabled */
    KnownManagedRuleEnabledState["Disabled"] = "Disabled";
    /** Enabled */
    KnownManagedRuleEnabledState["Enabled"] = "Enabled";
})(KnownManagedRuleEnabledState || (KnownManagedRuleEnabledState = {}));
/** Known values of {@link ActionType} that the service accepts. */
export var KnownActionType;
(function (KnownActionType) {
    /** AnomalyScoring */
    KnownActionType["AnomalyScoring"] = "AnomalyScoring";
    /** Allow */
    KnownActionType["Allow"] = "Allow";
    /** Block */
    KnownActionType["Block"] = "Block";
    /** Log */
    KnownActionType["Log"] = "Log";
    /** JSChallenge */
    KnownActionType["JSChallenge"] = "JSChallenge";
})(KnownActionType || (KnownActionType = {}));
/** Known values of {@link SensitivityType} that the service accepts. */
export var KnownSensitivityType;
(function (KnownSensitivityType) {
    /** None */
    KnownSensitivityType["None"] = "None";
    /** Low */
    KnownSensitivityType["Low"] = "Low";
    /** Medium */
    KnownSensitivityType["Medium"] = "Medium";
    /** High */
    KnownSensitivityType["High"] = "High";
})(KnownSensitivityType || (KnownSensitivityType = {}));
/** Known values of {@link FirewallPolicyNatRuleCollectionActionType} that the service accepts. */
export var KnownFirewallPolicyNatRuleCollectionActionType;
(function (KnownFirewallPolicyNatRuleCollectionActionType) {
    /** Dnat */
    KnownFirewallPolicyNatRuleCollectionActionType["Dnat"] = "DNAT";
})(KnownFirewallPolicyNatRuleCollectionActionType || (KnownFirewallPolicyNatRuleCollectionActionType = {}));
/** Known values of {@link FirewallPolicyRuleType} that the service accepts. */
export var KnownFirewallPolicyRuleType;
(function (KnownFirewallPolicyRuleType) {
    /** ApplicationRule */
    KnownFirewallPolicyRuleType["ApplicationRule"] = "ApplicationRule";
    /** NetworkRule */
    KnownFirewallPolicyRuleType["NetworkRule"] = "NetworkRule";
    /** NatRule */
    KnownFirewallPolicyRuleType["NatRule"] = "NatRule";
})(KnownFirewallPolicyRuleType || (KnownFirewallPolicyRuleType = {}));
/** Known values of {@link FirewallPolicyFilterRuleCollectionActionType} that the service accepts. */
export var KnownFirewallPolicyFilterRuleCollectionActionType;
(function (KnownFirewallPolicyFilterRuleCollectionActionType) {
    /** Allow */
    KnownFirewallPolicyFilterRuleCollectionActionType["Allow"] = "Allow";
    /** Deny */
    KnownFirewallPolicyFilterRuleCollectionActionType["Deny"] = "Deny";
})(KnownFirewallPolicyFilterRuleCollectionActionType || (KnownFirewallPolicyFilterRuleCollectionActionType = {}));
/** Known values of {@link FirewallPolicyRuleApplicationProtocolType} that the service accepts. */
export var KnownFirewallPolicyRuleApplicationProtocolType;
(function (KnownFirewallPolicyRuleApplicationProtocolType) {
    /** Http */
    KnownFirewallPolicyRuleApplicationProtocolType["Http"] = "Http";
    /** Https */
    KnownFirewallPolicyRuleApplicationProtocolType["Https"] = "Https";
})(KnownFirewallPolicyRuleApplicationProtocolType || (KnownFirewallPolicyRuleApplicationProtocolType = {}));
/** Known values of {@link FirewallPolicyRuleNetworkProtocol} that the service accepts. */
export var KnownFirewallPolicyRuleNetworkProtocol;
(function (KnownFirewallPolicyRuleNetworkProtocol) {
    /** TCP */
    KnownFirewallPolicyRuleNetworkProtocol["TCP"] = "TCP";
    /** UDP */
    KnownFirewallPolicyRuleNetworkProtocol["UDP"] = "UDP";
    /** Any */
    KnownFirewallPolicyRuleNetworkProtocol["Any"] = "Any";
    /** Icmp */
    KnownFirewallPolicyRuleNetworkProtocol["Icmp"] = "ICMP";
})(KnownFirewallPolicyRuleNetworkProtocol || (KnownFirewallPolicyRuleNetworkProtocol = {}));
/** Known values of {@link NetworkOperationStatus} that the service accepts. */
export var KnownNetworkOperationStatus;
(function (KnownNetworkOperationStatus) {
    /** InProgress */
    KnownNetworkOperationStatus["InProgress"] = "InProgress";
    /** Succeeded */
    KnownNetworkOperationStatus["Succeeded"] = "Succeeded";
    /** Failed */
    KnownNetworkOperationStatus["Failed"] = "Failed";
})(KnownNetworkOperationStatus || (KnownNetworkOperationStatus = {}));
/** Known values of {@link SecurityConfigurationRuleAccess} that the service accepts. */
export var KnownSecurityConfigurationRuleAccess;
(function (KnownSecurityConfigurationRuleAccess) {
    /** Allow */
    KnownSecurityConfigurationRuleAccess["Allow"] = "Allow";
    /** Deny */
    KnownSecurityConfigurationRuleAccess["Deny"] = "Deny";
    /** AlwaysAllow */
    KnownSecurityConfigurationRuleAccess["AlwaysAllow"] = "AlwaysAllow";
})(KnownSecurityConfigurationRuleAccess || (KnownSecurityConfigurationRuleAccess = {}));
/** Known values of {@link TunnelConnectionStatus} that the service accepts. */
export var KnownTunnelConnectionStatus;
(function (KnownTunnelConnectionStatus) {
    /** Unknown */
    KnownTunnelConnectionStatus["Unknown"] = "Unknown";
    /** Connecting */
    KnownTunnelConnectionStatus["Connecting"] = "Connecting";
    /** Connected */
    KnownTunnelConnectionStatus["Connected"] = "Connected";
    /** NotConnected */
    KnownTunnelConnectionStatus["NotConnected"] = "NotConnected";
})(KnownTunnelConnectionStatus || (KnownTunnelConnectionStatus = {}));
/** Known values of {@link HubVirtualNetworkConnectionStatus} that the service accepts. */
export var KnownHubVirtualNetworkConnectionStatus;
(function (KnownHubVirtualNetworkConnectionStatus) {
    /** Unknown */
    KnownHubVirtualNetworkConnectionStatus["Unknown"] = "Unknown";
    /** Connecting */
    KnownHubVirtualNetworkConnectionStatus["Connecting"] = "Connecting";
    /** Connected */
    KnownHubVirtualNetworkConnectionStatus["Connected"] = "Connected";
    /** NotConnected */
    KnownHubVirtualNetworkConnectionStatus["NotConnected"] = "NotConnected";
})(KnownHubVirtualNetworkConnectionStatus || (KnownHubVirtualNetworkConnectionStatus = {}));
//# sourceMappingURL=index.js.map