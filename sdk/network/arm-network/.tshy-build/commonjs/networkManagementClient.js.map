{"version":3,"file":"networkManagementClient.js","sourceRoot":"","sources":["../../src/networkManagementClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\nimport * as coreRestPipeline from \"@azure/core-rest-pipeline\";\nimport * as coreAuth from \"@azure/core-auth\";\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"./pagingHelper.js\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller,\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"./lroImpl.js\";\nimport {\n  ApplicationGatewaysImpl,\n  ApplicationGatewayPrivateLinkResourcesImpl,\n  ApplicationGatewayPrivateEndpointConnectionsImpl,\n  ApplicationGatewayWafDynamicManifestsDefaultImpl,\n  ApplicationGatewayWafDynamicManifestsImpl,\n  ApplicationSecurityGroupsImpl,\n  AvailableDelegationsImpl,\n  AvailableResourceGroupDelegationsImpl,\n  AvailableServiceAliasesImpl,\n  AzureFirewallsImpl,\n  AzureFirewallFqdnTagsImpl,\n  WebCategoriesImpl,\n  BastionHostsImpl,\n  NetworkInterfacesImpl,\n  PublicIPAddressesImpl,\n  VipSwapImpl,\n  CustomIPPrefixesImpl,\n  DdosCustomPoliciesImpl,\n  DdosProtectionPlansImpl,\n  DscpConfigurationOperationsImpl,\n  AvailableEndpointServicesImpl,\n  ExpressRouteCircuitAuthorizationsImpl,\n  ExpressRouteCircuitPeeringsImpl,\n  ExpressRouteCircuitConnectionsImpl,\n  PeerExpressRouteCircuitConnectionsImpl,\n  ExpressRouteCircuitsImpl,\n  ExpressRouteServiceProvidersImpl,\n  ExpressRouteCrossConnectionsImpl,\n  ExpressRouteCrossConnectionPeeringsImpl,\n  ExpressRoutePortsLocationsImpl,\n  ExpressRoutePortsImpl,\n  ExpressRouteLinksImpl,\n  ExpressRoutePortAuthorizationsImpl,\n  ExpressRouteProviderPortsLocationImpl,\n  FirewallPoliciesImpl,\n  FirewallPolicyRuleCollectionGroupsImpl,\n  FirewallPolicyIdpsSignaturesImpl,\n  FirewallPolicyIdpsSignaturesOverridesImpl,\n  FirewallPolicyIdpsSignaturesFilterValuesImpl,\n  FirewallPolicyDraftsImpl,\n  FirewallPolicyDeploymentsImpl,\n  FirewallPolicyRuleCollectionGroupDraftsImpl,\n  IpamPoolsImpl,\n  StaticCidrsImpl,\n  IpAllocationsImpl,\n  IpGroupsImpl,\n  LoadBalancersImpl,\n  LoadBalancerBackendAddressPoolsImpl,\n  LoadBalancerFrontendIPConfigurationsImpl,\n  InboundNatRulesImpl,\n  LoadBalancerLoadBalancingRulesImpl,\n  LoadBalancerOutboundRulesImpl,\n  LoadBalancerNetworkInterfacesImpl,\n  LoadBalancerProbesImpl,\n  NatGatewaysImpl,\n  NetworkInterfaceIPConfigurationsImpl,\n  NetworkInterfaceLoadBalancersImpl,\n  NetworkInterfaceTapConfigurationsImpl,\n  NetworkManagersImpl,\n  NetworkManagerCommitsImpl,\n  NetworkManagerDeploymentStatusOperationsImpl,\n  SubscriptionNetworkManagerConnectionsImpl,\n  ManagementGroupNetworkManagerConnectionsImpl,\n  ConnectivityConfigurationsImpl,\n  NetworkGroupsImpl,\n  StaticMembersImpl,\n  NetworkManagerRoutingConfigurationsImpl,\n  RoutingRuleCollectionsImpl,\n  RoutingRulesImpl,\n  ScopeConnectionsImpl,\n  SecurityAdminConfigurationsImpl,\n  AdminRuleCollectionsImpl,\n  AdminRulesImpl,\n  SecurityUserConfigurationsImpl,\n  SecurityUserRuleCollectionsImpl,\n  SecurityUserRulesImpl,\n  NetworkProfilesImpl,\n  NetworkSecurityGroupsImpl,\n  SecurityRulesImpl,\n  DefaultSecurityRulesImpl,\n  ReachabilityAnalysisIntentsImpl,\n  ReachabilityAnalysisRunsImpl,\n  VerifierWorkspacesImpl,\n  NetworkVirtualAppliancesImpl,\n  VirtualApplianceSitesImpl,\n  VirtualApplianceSkusImpl,\n  InboundSecurityRuleOperationsImpl,\n  NetworkWatchersImpl,\n  PacketCapturesImpl,\n  ConnectionMonitorsImpl,\n  FlowLogsImpl,\n  OperationsImpl,\n  PrivateEndpointsImpl,\n  AvailablePrivateEndpointTypesImpl,\n  PrivateDnsZoneGroupsImpl,\n  PrivateLinkServicesImpl,\n  PublicIPPrefixesImpl,\n  RouteFiltersImpl,\n  RouteFilterRulesImpl,\n  RouteTablesImpl,\n  RoutesImpl,\n  SecurityPartnerProvidersImpl,\n  BgpServiceCommunitiesImpl,\n  ServiceEndpointPoliciesImpl,\n  ServiceEndpointPolicyDefinitionsImpl,\n  ServiceTagsImpl,\n  ServiceTagInformationOperationsImpl,\n  UsagesImpl,\n  VirtualNetworksImpl,\n  SubnetsImpl,\n  ResourceNavigationLinksImpl,\n  ServiceAssociationLinksImpl,\n  VirtualNetworkPeeringsImpl,\n  VirtualNetworkGatewaysImpl,\n  VirtualNetworkGatewayConnectionsImpl,\n  LocalNetworkGatewaysImpl,\n  VirtualNetworkGatewayNatRulesImpl,\n  VirtualNetworkTapsImpl,\n  VirtualRoutersImpl,\n  VirtualRouterPeeringsImpl,\n  VirtualWansImpl,\n  VpnSitesImpl,\n  VpnSiteLinksImpl,\n  VpnSitesConfigurationImpl,\n  VpnServerConfigurationsImpl,\n  ConfigurationPolicyGroupsImpl,\n  VirtualHubsImpl,\n  RouteMapsImpl,\n  HubVirtualNetworkConnectionsImpl,\n  VpnGatewaysImpl,\n  VpnLinkConnectionsImpl,\n  VpnConnectionsImpl,\n  VpnSiteLinkConnectionsImpl,\n  NatRulesImpl,\n  P2SVpnGatewaysImpl,\n  VpnServerConfigurationsAssociatedWithVirtualWanImpl,\n  VirtualHubRouteTableV2SImpl,\n  ExpressRouteGatewaysImpl,\n  ExpressRouteConnectionsImpl,\n  NetworkVirtualApplianceConnectionsImpl,\n  VirtualHubBgpConnectionImpl,\n  VirtualHubBgpConnectionsImpl,\n  VirtualHubIpConfigurationImpl,\n  HubRouteTablesImpl,\n  RoutingIntentOperationsImpl,\n  WebApplicationFirewallPoliciesImpl,\n} from \"./operations/index.js\";\nimport {\n  ApplicationGateways,\n  ApplicationGatewayPrivateLinkResources,\n  ApplicationGatewayPrivateEndpointConnections,\n  ApplicationGatewayWafDynamicManifestsDefault,\n  ApplicationGatewayWafDynamicManifests,\n  ApplicationSecurityGroups,\n  AvailableDelegations,\n  AvailableResourceGroupDelegations,\n  AvailableServiceAliases,\n  AzureFirewalls,\n  AzureFirewallFqdnTags,\n  WebCategories,\n  BastionHosts,\n  NetworkInterfaces,\n  PublicIPAddresses,\n  VipSwap,\n  CustomIPPrefixes,\n  DdosCustomPolicies,\n  DdosProtectionPlans,\n  DscpConfigurationOperations,\n  AvailableEndpointServices,\n  ExpressRouteCircuitAuthorizations,\n  ExpressRouteCircuitPeerings,\n  ExpressRouteCircuitConnections,\n  PeerExpressRouteCircuitConnections,\n  ExpressRouteCircuits,\n  ExpressRouteServiceProviders,\n  ExpressRouteCrossConnections,\n  ExpressRouteCrossConnectionPeerings,\n  ExpressRoutePortsLocations,\n  ExpressRoutePorts,\n  ExpressRouteLinks,\n  ExpressRoutePortAuthorizations,\n  ExpressRouteProviderPortsLocation,\n  FirewallPolicies,\n  FirewallPolicyRuleCollectionGroups,\n  FirewallPolicyIdpsSignatures,\n  FirewallPolicyIdpsSignaturesOverrides,\n  FirewallPolicyIdpsSignaturesFilterValues,\n  FirewallPolicyDrafts,\n  FirewallPolicyDeployments,\n  FirewallPolicyRuleCollectionGroupDrafts,\n  IpamPools,\n  StaticCidrs,\n  IpAllocations,\n  IpGroups,\n  LoadBalancers,\n  LoadBalancerBackendAddressPools,\n  LoadBalancerFrontendIPConfigurations,\n  InboundNatRules,\n  LoadBalancerLoadBalancingRules,\n  LoadBalancerOutboundRules,\n  LoadBalancerNetworkInterfaces,\n  LoadBalancerProbes,\n  NatGateways,\n  NetworkInterfaceIPConfigurations,\n  NetworkInterfaceLoadBalancers,\n  NetworkInterfaceTapConfigurations,\n  NetworkManagers,\n  NetworkManagerCommits,\n  NetworkManagerDeploymentStatusOperations,\n  SubscriptionNetworkManagerConnections,\n  ManagementGroupNetworkManagerConnections,\n  ConnectivityConfigurations,\n  NetworkGroups,\n  StaticMembers,\n  NetworkManagerRoutingConfigurations,\n  RoutingRuleCollections,\n  RoutingRules,\n  ScopeConnections,\n  SecurityAdminConfigurations,\n  AdminRuleCollections,\n  AdminRules,\n  SecurityUserConfigurations,\n  SecurityUserRuleCollections,\n  SecurityUserRules,\n  NetworkProfiles,\n  NetworkSecurityGroups,\n  SecurityRules,\n  DefaultSecurityRules,\n  ReachabilityAnalysisIntents,\n  ReachabilityAnalysisRuns,\n  VerifierWorkspaces,\n  NetworkVirtualAppliances,\n  VirtualApplianceSites,\n  VirtualApplianceSkus,\n  InboundSecurityRuleOperations,\n  NetworkWatchers,\n  PacketCaptures,\n  ConnectionMonitors,\n  FlowLogs,\n  Operations,\n  PrivateEndpoints,\n  AvailablePrivateEndpointTypes,\n  PrivateDnsZoneGroups,\n  PrivateLinkServices,\n  PublicIPPrefixes,\n  RouteFilters,\n  RouteFilterRules,\n  RouteTables,\n  Routes,\n  SecurityPartnerProviders,\n  BgpServiceCommunities,\n  ServiceEndpointPolicies,\n  ServiceEndpointPolicyDefinitions,\n  ServiceTags,\n  ServiceTagInformationOperations,\n  Usages,\n  VirtualNetworks,\n  Subnets,\n  ResourceNavigationLinks,\n  ServiceAssociationLinks,\n  VirtualNetworkPeerings,\n  VirtualNetworkGateways,\n  VirtualNetworkGatewayConnections,\n  LocalNetworkGateways,\n  VirtualNetworkGatewayNatRules,\n  VirtualNetworkTaps,\n  VirtualRouters,\n  VirtualRouterPeerings,\n  VirtualWans,\n  VpnSites,\n  VpnSiteLinks,\n  VpnSitesConfiguration,\n  VpnServerConfigurations,\n  ConfigurationPolicyGroups,\n  VirtualHubs,\n  RouteMaps,\n  HubVirtualNetworkConnections,\n  VpnGateways,\n  VpnLinkConnections,\n  VpnConnections,\n  VpnSiteLinkConnections,\n  NatRules,\n  P2SVpnGateways,\n  VpnServerConfigurationsAssociatedWithVirtualWan,\n  VirtualHubRouteTableV2S,\n  ExpressRouteGateways,\n  ExpressRouteConnections,\n  NetworkVirtualApplianceConnections,\n  VirtualHubBgpConnection,\n  VirtualHubBgpConnections,\n  VirtualHubIpConfiguration,\n  HubRouteTables,\n  RoutingIntentOperations,\n  WebApplicationFirewallPolicies,\n} from \"./operationsInterfaces/index.js\";\nimport * as Parameters from \"./models/parameters.js\";\nimport * as Mappers from \"./models/mappers.js\";\nimport {\n  NetworkManagementClientOptionalParams,\n  BastionShareableLink,\n  BastionShareableLinkListRequest,\n  PutBastionShareableLinkNextOptionalParams,\n  PutBastionShareableLinkOptionalParams,\n  PutBastionShareableLinkResponse,\n  GetBastionShareableLinkNextOptionalParams,\n  GetBastionShareableLinkOptionalParams,\n  GetBastionShareableLinkResponse,\n  BastionActiveSession,\n  GetActiveSessionsNextOptionalParams,\n  GetActiveSessionsOptionalParams,\n  GetActiveSessionsResponse,\n  BastionSessionState,\n  SessionIds,\n  DisconnectActiveSessionsNextOptionalParams,\n  DisconnectActiveSessionsOptionalParams,\n  DisconnectActiveSessionsResponse,\n  DeleteBastionShareableLinkOptionalParams,\n  BastionShareableLinkTokenListRequest,\n  DeleteBastionShareableLinkByTokenOptionalParams,\n  DeleteBastionShareableLinkByTokenResponse,\n  CheckDnsNameAvailabilityOptionalParams,\n  CheckDnsNameAvailabilityResponse,\n  ExpressRouteProviderPortOptionalParams,\n  ExpressRouteProviderPortResponse,\n  ActiveConfigurationParameter,\n  ListActiveConnectivityConfigurationsOptionalParams,\n  ListActiveConnectivityConfigurationsResponse,\n  ListActiveSecurityAdminRulesOptionalParams,\n  ListActiveSecurityAdminRulesResponse,\n  QueryRequestOptions,\n  ListNetworkManagerEffectiveConnectivityConfigurationsOptionalParams,\n  ListNetworkManagerEffectiveConnectivityConfigurationsResponse,\n  ListNetworkManagerEffectiveSecurityAdminRulesOptionalParams,\n  ListNetworkManagerEffectiveSecurityAdminRulesResponse,\n  SupportedSecurityProvidersOptionalParams,\n  SupportedSecurityProvidersResponse,\n  VirtualWanVpnProfileParameters,\n  GeneratevirtualwanvpnserverconfigurationvpnprofileOptionalParams,\n  GeneratevirtualwanvpnserverconfigurationvpnprofileResponse,\n  PutBastionShareableLinkNextResponse,\n  GetBastionShareableLinkNextResponse,\n  GetActiveSessionsNextResponse,\n  DisconnectActiveSessionsNextResponse,\n} from \"./models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\nexport class NetworkManagementClient extends coreClient.ServiceClient {\n  $host: string;\n  subscriptionId?: string;\n\n  /**\n   * Initializes a new instance of the NetworkManagementClient class.\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure\n   *                       subscription. The subscription ID forms part of the URI for every service call.\n   * @param options The parameter options\n   */\n  constructor(\n    credentials: coreAuth.TokenCredential,\n    subscriptionId: string,\n    options?: NetworkManagementClientOptionalParams,\n  );\n  constructor(\n    credentials: coreAuth.TokenCredential,\n    options?: NetworkManagementClientOptionalParams,\n  );\n  constructor(\n    credentials: coreAuth.TokenCredential,\n    subscriptionIdOrOptions?: NetworkManagementClientOptionalParams | string,\n    options?: NetworkManagementClientOptionalParams,\n  ) {\n    if (credentials === undefined) {\n      throw new Error(\"'credentials' cannot be null\");\n    }\n\n    let subscriptionId: string | undefined;\n\n    if (typeof subscriptionIdOrOptions === \"string\") {\n      subscriptionId = subscriptionIdOrOptions;\n    } else if (typeof subscriptionIdOrOptions === \"object\") {\n      options = subscriptionIdOrOptions;\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: NetworkManagementClientOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n      credential: credentials,\n    };\n\n    const packageDetails = `azsdk-js-arm-network/33.5.0`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      endpoint:\n        options.endpoint ?? options.baseUri ?? \"https://management.azure.com\",\n    };\n    super(optionsWithDefaults);\n\n    let bearerTokenAuthenticationPolicyFound: boolean = false;\n    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {\n      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] =\n        options.pipeline.getOrderedPolicies();\n      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(\n        (pipelinePolicy) =>\n          pipelinePolicy.name ===\n          coreRestPipeline.bearerTokenAuthenticationPolicyName,\n      );\n    }\n    if (\n      !options ||\n      !options.pipeline ||\n      options.pipeline.getOrderedPolicies().length == 0 ||\n      !bearerTokenAuthenticationPolicyFound\n    ) {\n      this.pipeline.removePolicy({\n        name: coreRestPipeline.bearerTokenAuthenticationPolicyName,\n      });\n      this.pipeline.addPolicy(\n        coreRestPipeline.bearerTokenAuthenticationPolicy({\n          credential: credentials,\n          scopes:\n            optionsWithDefaults.credentialScopes ??\n            `${optionsWithDefaults.endpoint}/.default`,\n          challengeCallbacks: {\n            authorizeRequestOnChallenge:\n              coreClient.authorizeRequestOnClaimChallenge,\n          },\n        }),\n      );\n    }\n    // Parameter assignments\n    this.subscriptionId = subscriptionId;\n\n    // Assigning values to Constant parameters\n    this.$host = options.$host || \"https://management.azure.com\";\n    this.applicationGateways = new ApplicationGatewaysImpl(this);\n    this.applicationGatewayPrivateLinkResources =\n      new ApplicationGatewayPrivateLinkResourcesImpl(this);\n    this.applicationGatewayPrivateEndpointConnections =\n      new ApplicationGatewayPrivateEndpointConnectionsImpl(this);\n    this.applicationGatewayWafDynamicManifestsDefault =\n      new ApplicationGatewayWafDynamicManifestsDefaultImpl(this);\n    this.applicationGatewayWafDynamicManifests =\n      new ApplicationGatewayWafDynamicManifestsImpl(this);\n    this.applicationSecurityGroups = new ApplicationSecurityGroupsImpl(this);\n    this.availableDelegations = new AvailableDelegationsImpl(this);\n    this.availableResourceGroupDelegations =\n      new AvailableResourceGroupDelegationsImpl(this);\n    this.availableServiceAliases = new AvailableServiceAliasesImpl(this);\n    this.azureFirewalls = new AzureFirewallsImpl(this);\n    this.azureFirewallFqdnTags = new AzureFirewallFqdnTagsImpl(this);\n    this.webCategories = new WebCategoriesImpl(this);\n    this.bastionHosts = new BastionHostsImpl(this);\n    this.networkInterfaces = new NetworkInterfacesImpl(this);\n    this.publicIPAddresses = new PublicIPAddressesImpl(this);\n    this.vipSwap = new VipSwapImpl(this);\n    this.customIPPrefixes = new CustomIPPrefixesImpl(this);\n    this.ddosCustomPolicies = new DdosCustomPoliciesImpl(this);\n    this.ddosProtectionPlans = new DdosProtectionPlansImpl(this);\n    this.dscpConfigurationOperations = new DscpConfigurationOperationsImpl(\n      this,\n    );\n    this.availableEndpointServices = new AvailableEndpointServicesImpl(this);\n    this.expressRouteCircuitAuthorizations =\n      new ExpressRouteCircuitAuthorizationsImpl(this);\n    this.expressRouteCircuitPeerings = new ExpressRouteCircuitPeeringsImpl(\n      this,\n    );\n    this.expressRouteCircuitConnections =\n      new ExpressRouteCircuitConnectionsImpl(this);\n    this.peerExpressRouteCircuitConnections =\n      new PeerExpressRouteCircuitConnectionsImpl(this);\n    this.expressRouteCircuits = new ExpressRouteCircuitsImpl(this);\n    this.expressRouteServiceProviders = new ExpressRouteServiceProvidersImpl(\n      this,\n    );\n    this.expressRouteCrossConnections = new ExpressRouteCrossConnectionsImpl(\n      this,\n    );\n    this.expressRouteCrossConnectionPeerings =\n      new ExpressRouteCrossConnectionPeeringsImpl(this);\n    this.expressRoutePortsLocations = new ExpressRoutePortsLocationsImpl(this);\n    this.expressRoutePorts = new ExpressRoutePortsImpl(this);\n    this.expressRouteLinks = new ExpressRouteLinksImpl(this);\n    this.expressRoutePortAuthorizations =\n      new ExpressRoutePortAuthorizationsImpl(this);\n    this.expressRouteProviderPortsLocation =\n      new ExpressRouteProviderPortsLocationImpl(this);\n    this.firewallPolicies = new FirewallPoliciesImpl(this);\n    this.firewallPolicyRuleCollectionGroups =\n      new FirewallPolicyRuleCollectionGroupsImpl(this);\n    this.firewallPolicyIdpsSignatures = new FirewallPolicyIdpsSignaturesImpl(\n      this,\n    );\n    this.firewallPolicyIdpsSignaturesOverrides =\n      new FirewallPolicyIdpsSignaturesOverridesImpl(this);\n    this.firewallPolicyIdpsSignaturesFilterValues =\n      new FirewallPolicyIdpsSignaturesFilterValuesImpl(this);\n    this.firewallPolicyDrafts = new FirewallPolicyDraftsImpl(this);\n    this.firewallPolicyDeployments = new FirewallPolicyDeploymentsImpl(this);\n    this.firewallPolicyRuleCollectionGroupDrafts =\n      new FirewallPolicyRuleCollectionGroupDraftsImpl(this);\n    this.ipamPools = new IpamPoolsImpl(this);\n    this.staticCidrs = new StaticCidrsImpl(this);\n    this.ipAllocations = new IpAllocationsImpl(this);\n    this.ipGroups = new IpGroupsImpl(this);\n    this.loadBalancers = new LoadBalancersImpl(this);\n    this.loadBalancerBackendAddressPools =\n      new LoadBalancerBackendAddressPoolsImpl(this);\n    this.loadBalancerFrontendIPConfigurations =\n      new LoadBalancerFrontendIPConfigurationsImpl(this);\n    this.inboundNatRules = new InboundNatRulesImpl(this);\n    this.loadBalancerLoadBalancingRules =\n      new LoadBalancerLoadBalancingRulesImpl(this);\n    this.loadBalancerOutboundRules = new LoadBalancerOutboundRulesImpl(this);\n    this.loadBalancerNetworkInterfaces = new LoadBalancerNetworkInterfacesImpl(\n      this,\n    );\n    this.loadBalancerProbes = new LoadBalancerProbesImpl(this);\n    this.natGateways = new NatGatewaysImpl(this);\n    this.networkInterfaceIPConfigurations =\n      new NetworkInterfaceIPConfigurationsImpl(this);\n    this.networkInterfaceLoadBalancers = new NetworkInterfaceLoadBalancersImpl(\n      this,\n    );\n    this.networkInterfaceTapConfigurations =\n      new NetworkInterfaceTapConfigurationsImpl(this);\n    this.networkManagers = new NetworkManagersImpl(this);\n    this.networkManagerCommits = new NetworkManagerCommitsImpl(this);\n    this.networkManagerDeploymentStatusOperations =\n      new NetworkManagerDeploymentStatusOperationsImpl(this);\n    this.subscriptionNetworkManagerConnections =\n      new SubscriptionNetworkManagerConnectionsImpl(this);\n    this.managementGroupNetworkManagerConnections =\n      new ManagementGroupNetworkManagerConnectionsImpl(this);\n    this.connectivityConfigurations = new ConnectivityConfigurationsImpl(this);\n    this.networkGroups = new NetworkGroupsImpl(this);\n    this.staticMembers = new StaticMembersImpl(this);\n    this.networkManagerRoutingConfigurations =\n      new NetworkManagerRoutingConfigurationsImpl(this);\n    this.routingRuleCollections = new RoutingRuleCollectionsImpl(this);\n    this.routingRules = new RoutingRulesImpl(this);\n    this.scopeConnections = new ScopeConnectionsImpl(this);\n    this.securityAdminConfigurations = new SecurityAdminConfigurationsImpl(\n      this,\n    );\n    this.adminRuleCollections = new AdminRuleCollectionsImpl(this);\n    this.adminRules = new AdminRulesImpl(this);\n    this.securityUserConfigurations = new SecurityUserConfigurationsImpl(this);\n    this.securityUserRuleCollections = new SecurityUserRuleCollectionsImpl(\n      this,\n    );\n    this.securityUserRules = new SecurityUserRulesImpl(this);\n    this.networkProfiles = new NetworkProfilesImpl(this);\n    this.networkSecurityGroups = new NetworkSecurityGroupsImpl(this);\n    this.securityRules = new SecurityRulesImpl(this);\n    this.defaultSecurityRules = new DefaultSecurityRulesImpl(this);\n    this.reachabilityAnalysisIntents = new ReachabilityAnalysisIntentsImpl(\n      this,\n    );\n    this.reachabilityAnalysisRuns = new ReachabilityAnalysisRunsImpl(this);\n    this.verifierWorkspaces = new VerifierWorkspacesImpl(this);\n    this.networkVirtualAppliances = new NetworkVirtualAppliancesImpl(this);\n    this.virtualApplianceSites = new VirtualApplianceSitesImpl(this);\n    this.virtualApplianceSkus = new VirtualApplianceSkusImpl(this);\n    this.inboundSecurityRuleOperations = new InboundSecurityRuleOperationsImpl(\n      this,\n    );\n    this.networkWatchers = new NetworkWatchersImpl(this);\n    this.packetCaptures = new PacketCapturesImpl(this);\n    this.connectionMonitors = new ConnectionMonitorsImpl(this);\n    this.flowLogs = new FlowLogsImpl(this);\n    this.operations = new OperationsImpl(this);\n    this.privateEndpoints = new PrivateEndpointsImpl(this);\n    this.availablePrivateEndpointTypes = new AvailablePrivateEndpointTypesImpl(\n      this,\n    );\n    this.privateDnsZoneGroups = new PrivateDnsZoneGroupsImpl(this);\n    this.privateLinkServices = new PrivateLinkServicesImpl(this);\n    this.publicIPPrefixes = new PublicIPPrefixesImpl(this);\n    this.routeFilters = new RouteFiltersImpl(this);\n    this.routeFilterRules = new RouteFilterRulesImpl(this);\n    this.routeTables = new RouteTablesImpl(this);\n    this.routes = new RoutesImpl(this);\n    this.securityPartnerProviders = new SecurityPartnerProvidersImpl(this);\n    this.bgpServiceCommunities = new BgpServiceCommunitiesImpl(this);\n    this.serviceEndpointPolicies = new ServiceEndpointPoliciesImpl(this);\n    this.serviceEndpointPolicyDefinitions =\n      new ServiceEndpointPolicyDefinitionsImpl(this);\n    this.serviceTags = new ServiceTagsImpl(this);\n    this.serviceTagInformationOperations =\n      new ServiceTagInformationOperationsImpl(this);\n    this.usages = new UsagesImpl(this);\n    this.virtualNetworks = new VirtualNetworksImpl(this);\n    this.subnets = new SubnetsImpl(this);\n    this.resourceNavigationLinks = new ResourceNavigationLinksImpl(this);\n    this.serviceAssociationLinks = new ServiceAssociationLinksImpl(this);\n    this.virtualNetworkPeerings = new VirtualNetworkPeeringsImpl(this);\n    this.virtualNetworkGateways = new VirtualNetworkGatewaysImpl(this);\n    this.virtualNetworkGatewayConnections =\n      new VirtualNetworkGatewayConnectionsImpl(this);\n    this.localNetworkGateways = new LocalNetworkGatewaysImpl(this);\n    this.virtualNetworkGatewayNatRules = new VirtualNetworkGatewayNatRulesImpl(\n      this,\n    );\n    this.virtualNetworkTaps = new VirtualNetworkTapsImpl(this);\n    this.virtualRouters = new VirtualRoutersImpl(this);\n    this.virtualRouterPeerings = new VirtualRouterPeeringsImpl(this);\n    this.virtualWans = new VirtualWansImpl(this);\n    this.vpnSites = new VpnSitesImpl(this);\n    this.vpnSiteLinks = new VpnSiteLinksImpl(this);\n    this.vpnSitesConfiguration = new VpnSitesConfigurationImpl(this);\n    this.vpnServerConfigurations = new VpnServerConfigurationsImpl(this);\n    this.configurationPolicyGroups = new ConfigurationPolicyGroupsImpl(this);\n    this.virtualHubs = new VirtualHubsImpl(this);\n    this.routeMaps = new RouteMapsImpl(this);\n    this.hubVirtualNetworkConnections = new HubVirtualNetworkConnectionsImpl(\n      this,\n    );\n    this.vpnGateways = new VpnGatewaysImpl(this);\n    this.vpnLinkConnections = new VpnLinkConnectionsImpl(this);\n    this.vpnConnections = new VpnConnectionsImpl(this);\n    this.vpnSiteLinkConnections = new VpnSiteLinkConnectionsImpl(this);\n    this.natRules = new NatRulesImpl(this);\n    this.p2SVpnGateways = new P2SVpnGatewaysImpl(this);\n    this.vpnServerConfigurationsAssociatedWithVirtualWan =\n      new VpnServerConfigurationsAssociatedWithVirtualWanImpl(this);\n    this.virtualHubRouteTableV2S = new VirtualHubRouteTableV2SImpl(this);\n    this.expressRouteGateways = new ExpressRouteGatewaysImpl(this);\n    this.expressRouteConnections = new ExpressRouteConnectionsImpl(this);\n    this.networkVirtualApplianceConnections =\n      new NetworkVirtualApplianceConnectionsImpl(this);\n    this.virtualHubBgpConnection = new VirtualHubBgpConnectionImpl(this);\n    this.virtualHubBgpConnections = new VirtualHubBgpConnectionsImpl(this);\n    this.virtualHubIpConfiguration = new VirtualHubIpConfigurationImpl(this);\n    this.hubRouteTables = new HubRouteTablesImpl(this);\n    this.routingIntentOperations = new RoutingIntentOperationsImpl(this);\n    this.webApplicationFirewallPolicies =\n      new WebApplicationFirewallPoliciesImpl(this);\n  }\n\n  /**\n   * Creates a Bastion Shareable Links for all the VMs specified in the request.\n   * @param resourceGroupName The name of the resource group.\n   * @param bastionHostName The name of the Bastion Host.\n   * @param bslRequest Post request for Create/Delete/Get Bastion Shareable Link endpoints.\n   * @param options The options parameters.\n   */\n  public beginListPutBastionShareableLinkAndWait(\n    resourceGroupName: string,\n    bastionHostName: string,\n    bslRequest: BastionShareableLinkListRequest,\n    options?: PutBastionShareableLinkOptionalParams,\n  ): PagedAsyncIterableIterator<BastionShareableLink> {\n    const iter = this.putBastionShareableLinkPagingAll(\n      resourceGroupName,\n      bastionHostName,\n      bslRequest,\n      options,\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.putBastionShareableLinkPagingPage(\n          resourceGroupName,\n          bastionHostName,\n          bslRequest,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *putBastionShareableLinkPagingPage(\n    resourceGroupName: string,\n    bastionHostName: string,\n    bslRequest: BastionShareableLinkListRequest,\n    options?: PutBastionShareableLinkOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<BastionShareableLink[]> {\n    let result: PutBastionShareableLinkResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      const poller = await this._putBastionShareableLink(\n        resourceGroupName,\n        bastionHostName,\n        bslRequest,\n        options,\n      );\n      result = await poller.pollUntilDone();\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._putBastionShareableLinkNext(\n        resourceGroupName,\n        bastionHostName,\n        bslRequest,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *putBastionShareableLinkPagingAll(\n    resourceGroupName: string,\n    bastionHostName: string,\n    bslRequest: BastionShareableLinkListRequest,\n    options?: PutBastionShareableLinkOptionalParams,\n  ): AsyncIterableIterator<BastionShareableLink> {\n    for await (const page of this.putBastionShareableLinkPagingPage(\n      resourceGroupName,\n      bastionHostName,\n      bslRequest,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Return the Bastion Shareable Links for all the VMs specified in the request.\n   * @param resourceGroupName The name of the resource group.\n   * @param bastionHostName The name of the Bastion Host.\n   * @param bslRequest Post request for Create/Delete/Get Bastion Shareable Link endpoints.\n   * @param options The options parameters.\n   */\n  public listBastionShareableLink(\n    resourceGroupName: string,\n    bastionHostName: string,\n    bslRequest: BastionShareableLinkListRequest,\n    options?: GetBastionShareableLinkOptionalParams,\n  ): PagedAsyncIterableIterator<BastionShareableLink> {\n    const iter = this.getBastionShareableLinkPagingAll(\n      resourceGroupName,\n      bastionHostName,\n      bslRequest,\n      options,\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.getBastionShareableLinkPagingPage(\n          resourceGroupName,\n          bastionHostName,\n          bslRequest,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *getBastionShareableLinkPagingPage(\n    resourceGroupName: string,\n    bastionHostName: string,\n    bslRequest: BastionShareableLinkListRequest,\n    options?: GetBastionShareableLinkOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<BastionShareableLink[]> {\n    let result: GetBastionShareableLinkResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._getBastionShareableLink(\n        resourceGroupName,\n        bastionHostName,\n        bslRequest,\n        options,\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._getBastionShareableLinkNext(\n        resourceGroupName,\n        bastionHostName,\n        bslRequest,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *getBastionShareableLinkPagingAll(\n    resourceGroupName: string,\n    bastionHostName: string,\n    bslRequest: BastionShareableLinkListRequest,\n    options?: GetBastionShareableLinkOptionalParams,\n  ): AsyncIterableIterator<BastionShareableLink> {\n    for await (const page of this.getBastionShareableLinkPagingPage(\n      resourceGroupName,\n      bastionHostName,\n      bslRequest,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Returns the list of currently active sessions on the Bastion.\n   * @param resourceGroupName The name of the resource group.\n   * @param bastionHostName The name of the Bastion Host.\n   * @param options The options parameters.\n   */\n  public beginListActiveSessionsAndWait(\n    resourceGroupName: string,\n    bastionHostName: string,\n    options?: GetActiveSessionsOptionalParams,\n  ): PagedAsyncIterableIterator<BastionActiveSession> {\n    const iter = this.getActiveSessionsPagingAll(\n      resourceGroupName,\n      bastionHostName,\n      options,\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.getActiveSessionsPagingPage(\n          resourceGroupName,\n          bastionHostName,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *getActiveSessionsPagingPage(\n    resourceGroupName: string,\n    bastionHostName: string,\n    options?: GetActiveSessionsOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<BastionActiveSession[]> {\n    let result: GetActiveSessionsResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      const poller = await this._getActiveSessions(\n        resourceGroupName,\n        bastionHostName,\n        options,\n      );\n      result = await poller.pollUntilDone();\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._getActiveSessionsNext(\n        resourceGroupName,\n        bastionHostName,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *getActiveSessionsPagingAll(\n    resourceGroupName: string,\n    bastionHostName: string,\n    options?: GetActiveSessionsOptionalParams,\n  ): AsyncIterableIterator<BastionActiveSession> {\n    for await (const page of this.getActiveSessionsPagingPage(\n      resourceGroupName,\n      bastionHostName,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Returns the list of currently active sessions on the Bastion.\n   * @param resourceGroupName The name of the resource group.\n   * @param bastionHostName The name of the Bastion Host.\n   * @param sessionIds The list of sessionids to disconnect.\n   * @param options The options parameters.\n   */\n  public listDisconnectActiveSessions(\n    resourceGroupName: string,\n    bastionHostName: string,\n    sessionIds: SessionIds,\n    options?: DisconnectActiveSessionsOptionalParams,\n  ): PagedAsyncIterableIterator<BastionSessionState> {\n    const iter = this.disconnectActiveSessionsPagingAll(\n      resourceGroupName,\n      bastionHostName,\n      sessionIds,\n      options,\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.disconnectActiveSessionsPagingPage(\n          resourceGroupName,\n          bastionHostName,\n          sessionIds,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *disconnectActiveSessionsPagingPage(\n    resourceGroupName: string,\n    bastionHostName: string,\n    sessionIds: SessionIds,\n    options?: DisconnectActiveSessionsOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<BastionSessionState[]> {\n    let result: DisconnectActiveSessionsResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._disconnectActiveSessions(\n        resourceGroupName,\n        bastionHostName,\n        sessionIds,\n        options,\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._disconnectActiveSessionsNext(\n        resourceGroupName,\n        bastionHostName,\n        sessionIds,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *disconnectActiveSessionsPagingAll(\n    resourceGroupName: string,\n    bastionHostName: string,\n    sessionIds: SessionIds,\n    options?: DisconnectActiveSessionsOptionalParams,\n  ): AsyncIterableIterator<BastionSessionState> {\n    for await (const page of this.disconnectActiveSessionsPagingPage(\n      resourceGroupName,\n      bastionHostName,\n      sessionIds,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Creates a Bastion Shareable Links for all the VMs specified in the request.\n   * @param resourceGroupName The name of the resource group.\n   * @param bastionHostName The name of the Bastion Host.\n   * @param bslRequest Post request for Create/Delete/Get Bastion Shareable Link endpoints.\n   * @param options The options parameters.\n   */\n  private async _putBastionShareableLink(\n    resourceGroupName: string,\n    bastionHostName: string,\n    bslRequest: BastionShareableLinkListRequest,\n    options?: PutBastionShareableLinkOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<PutBastionShareableLinkResponse>,\n      PutBastionShareableLinkResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<PutBastionShareableLinkResponse> => {\n      return this.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, bastionHostName, bslRequest, options },\n      spec: putBastionShareableLinkOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      PutBastionShareableLinkResponse,\n      OperationState<PutBastionShareableLinkResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes the Bastion Shareable Links for all the VMs specified in the request.\n   * @param resourceGroupName The name of the resource group.\n   * @param bastionHostName The name of the Bastion Host.\n   * @param bslRequest Post request for Create/Delete/Get Bastion Shareable Link endpoints.\n   * @param options The options parameters.\n   */\n  async beginDeleteBastionShareableLink(\n    resourceGroupName: string,\n    bastionHostName: string,\n    bslRequest: BastionShareableLinkListRequest,\n    options?: DeleteBastionShareableLinkOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<void> => {\n      return this.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, bastionHostName, bslRequest, options },\n      spec: deleteBastionShareableLinkOperationSpec,\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes the Bastion Shareable Links for all the VMs specified in the request.\n   * @param resourceGroupName The name of the resource group.\n   * @param bastionHostName The name of the Bastion Host.\n   * @param bslRequest Post request for Create/Delete/Get Bastion Shareable Link endpoints.\n   * @param options The options parameters.\n   */\n  async beginDeleteBastionShareableLinkAndWait(\n    resourceGroupName: string,\n    bastionHostName: string,\n    bslRequest: BastionShareableLinkListRequest,\n    options?: DeleteBastionShareableLinkOptionalParams,\n  ): Promise<void> {\n    const poller = await this.beginDeleteBastionShareableLink(\n      resourceGroupName,\n      bastionHostName,\n      bslRequest,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes the Bastion Shareable Links for all the tokens specified in the request.\n   * @param resourceGroupName The name of the resource group.\n   * @param bastionHostName The name of the Bastion Host.\n   * @param bslTokenRequest Post request for Delete Bastion Shareable Link By Token endpoint.\n   * @param options The options parameters.\n   */\n  async beginDeleteBastionShareableLinkByToken(\n    resourceGroupName: string,\n    bastionHostName: string,\n    bslTokenRequest: BastionShareableLinkTokenListRequest,\n    options?: DeleteBastionShareableLinkByTokenOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<DeleteBastionShareableLinkByTokenResponse>,\n      DeleteBastionShareableLinkByTokenResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<DeleteBastionShareableLinkByTokenResponse> => {\n      return this.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, bastionHostName, bslTokenRequest, options },\n      spec: deleteBastionShareableLinkByTokenOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      DeleteBastionShareableLinkByTokenResponse,\n      OperationState<DeleteBastionShareableLinkByTokenResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes the Bastion Shareable Links for all the tokens specified in the request.\n   * @param resourceGroupName The name of the resource group.\n   * @param bastionHostName The name of the Bastion Host.\n   * @param bslTokenRequest Post request for Delete Bastion Shareable Link By Token endpoint.\n   * @param options The options parameters.\n   */\n  async beginDeleteBastionShareableLinkByTokenAndWait(\n    resourceGroupName: string,\n    bastionHostName: string,\n    bslTokenRequest: BastionShareableLinkTokenListRequest,\n    options?: DeleteBastionShareableLinkByTokenOptionalParams,\n  ): Promise<DeleteBastionShareableLinkByTokenResponse> {\n    const poller = await this.beginDeleteBastionShareableLinkByToken(\n      resourceGroupName,\n      bastionHostName,\n      bslTokenRequest,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Return the Bastion Shareable Links for all the VMs specified in the request.\n   * @param resourceGroupName The name of the resource group.\n   * @param bastionHostName The name of the Bastion Host.\n   * @param bslRequest Post request for Create/Delete/Get Bastion Shareable Link endpoints.\n   * @param options The options parameters.\n   */\n  private _getBastionShareableLink(\n    resourceGroupName: string,\n    bastionHostName: string,\n    bslRequest: BastionShareableLinkListRequest,\n    options?: GetBastionShareableLinkOptionalParams,\n  ): Promise<GetBastionShareableLinkResponse> {\n    return this.sendOperationRequest(\n      { resourceGroupName, bastionHostName, bslRequest, options },\n      getBastionShareableLinkOperationSpec,\n    );\n  }\n\n  /**\n   * Returns the list of currently active sessions on the Bastion.\n   * @param resourceGroupName The name of the resource group.\n   * @param bastionHostName The name of the Bastion Host.\n   * @param options The options parameters.\n   */\n  private async _getActiveSessions(\n    resourceGroupName: string,\n    bastionHostName: string,\n    options?: GetActiveSessionsOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<GetActiveSessionsResponse>,\n      GetActiveSessionsResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<GetActiveSessionsResponse> => {\n      return this.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, bastionHostName, options },\n      spec: getActiveSessionsOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      GetActiveSessionsResponse,\n      OperationState<GetActiveSessionsResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Returns the list of currently active sessions on the Bastion.\n   * @param resourceGroupName The name of the resource group.\n   * @param bastionHostName The name of the Bastion Host.\n   * @param sessionIds The list of sessionids to disconnect.\n   * @param options The options parameters.\n   */\n  private _disconnectActiveSessions(\n    resourceGroupName: string,\n    bastionHostName: string,\n    sessionIds: SessionIds,\n    options?: DisconnectActiveSessionsOptionalParams,\n  ): Promise<DisconnectActiveSessionsResponse> {\n    return this.sendOperationRequest(\n      { resourceGroupName, bastionHostName, sessionIds, options },\n      disconnectActiveSessionsOperationSpec,\n    );\n  }\n\n  /**\n   * Checks whether a domain name in the cloudapp.azure.com zone is available for use.\n   * @param location The location of the domain name.\n   * @param domainNameLabel The domain name to be verified. It must conform to the following regular\n   *                        expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.\n   * @param options The options parameters.\n   */\n  checkDnsNameAvailability(\n    location: string,\n    domainNameLabel: string,\n    options?: CheckDnsNameAvailabilityOptionalParams,\n  ): Promise<CheckDnsNameAvailabilityResponse> {\n    return this.sendOperationRequest(\n      { location, domainNameLabel, options },\n      checkDnsNameAvailabilityOperationSpec,\n    );\n  }\n\n  /**\n   * Retrieves detail of a provider port.\n   * @param providerport The name of the provider port.\n   * @param options The options parameters.\n   */\n  expressRouteProviderPort(\n    providerport: string,\n    options?: ExpressRouteProviderPortOptionalParams,\n  ): Promise<ExpressRouteProviderPortResponse> {\n    return this.sendOperationRequest(\n      { providerport, options },\n      expressRouteProviderPortOperationSpec,\n    );\n  }\n\n  /**\n   * Lists active connectivity configurations in a network manager.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkManagerName The name of the network manager.\n   * @param parameters Active Configuration Parameter.\n   * @param options The options parameters.\n   */\n  listActiveConnectivityConfigurations(\n    resourceGroupName: string,\n    networkManagerName: string,\n    parameters: ActiveConfigurationParameter,\n    options?: ListActiveConnectivityConfigurationsOptionalParams,\n  ): Promise<ListActiveConnectivityConfigurationsResponse> {\n    return this.sendOperationRequest(\n      { resourceGroupName, networkManagerName, parameters, options },\n      listActiveConnectivityConfigurationsOperationSpec,\n    );\n  }\n\n  /**\n   * Lists active security admin rules in a network manager.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkManagerName The name of the network manager.\n   * @param parameters Active Configuration Parameter.\n   * @param options The options parameters.\n   */\n  listActiveSecurityAdminRules(\n    resourceGroupName: string,\n    networkManagerName: string,\n    parameters: ActiveConfigurationParameter,\n    options?: ListActiveSecurityAdminRulesOptionalParams,\n  ): Promise<ListActiveSecurityAdminRulesResponse> {\n    return this.sendOperationRequest(\n      { resourceGroupName, networkManagerName, parameters, options },\n      listActiveSecurityAdminRulesOperationSpec,\n    );\n  }\n\n  /**\n   * List all effective connectivity configurations applied on a virtual network.\n   * @param resourceGroupName The name of the resource group.\n   * @param virtualNetworkName The name of the virtual network.\n   * @param parameters Parameters supplied to list correct page.\n   * @param options The options parameters.\n   */\n  listNetworkManagerEffectiveConnectivityConfigurations(\n    resourceGroupName: string,\n    virtualNetworkName: string,\n    parameters: QueryRequestOptions,\n    options?: ListNetworkManagerEffectiveConnectivityConfigurationsOptionalParams,\n  ): Promise<ListNetworkManagerEffectiveConnectivityConfigurationsResponse> {\n    return this.sendOperationRequest(\n      { resourceGroupName, virtualNetworkName, parameters, options },\n      listNetworkManagerEffectiveConnectivityConfigurationsOperationSpec,\n    );\n  }\n\n  /**\n   * List all effective security admin rules applied on a virtual network.\n   * @param resourceGroupName The name of the resource group.\n   * @param virtualNetworkName The name of the virtual network.\n   * @param parameters Parameters supplied to list correct page.\n   * @param options The options parameters.\n   */\n  listNetworkManagerEffectiveSecurityAdminRules(\n    resourceGroupName: string,\n    virtualNetworkName: string,\n    parameters: QueryRequestOptions,\n    options?: ListNetworkManagerEffectiveSecurityAdminRulesOptionalParams,\n  ): Promise<ListNetworkManagerEffectiveSecurityAdminRulesResponse> {\n    return this.sendOperationRequest(\n      { resourceGroupName, virtualNetworkName, parameters, options },\n      listNetworkManagerEffectiveSecurityAdminRulesOperationSpec,\n    );\n  }\n\n  /**\n   * Gives the supported security providers for the virtual wan.\n   * @param resourceGroupName The resource group name.\n   * @param virtualWANName The name of the VirtualWAN for which supported security providers are needed.\n   * @param options The options parameters.\n   */\n  supportedSecurityProviders(\n    resourceGroupName: string,\n    virtualWANName: string,\n    options?: SupportedSecurityProvidersOptionalParams,\n  ): Promise<SupportedSecurityProvidersResponse> {\n    return this.sendOperationRequest(\n      { resourceGroupName, virtualWANName, options },\n      supportedSecurityProvidersOperationSpec,\n    );\n  }\n\n  /**\n   * Generates a unique VPN profile for P2S clients for VirtualWan and associated VpnServerConfiguration\n   * combination in the specified resource group.\n   * @param resourceGroupName The resource group name.\n   * @param virtualWANName The name of the VirtualWAN whose associated VpnServerConfigurations is needed.\n   * @param vpnClientParams Parameters supplied to the generate VirtualWan VPN profile generation\n   *                        operation.\n   * @param options The options parameters.\n   */\n  async beginGeneratevirtualwanvpnserverconfigurationvpnprofile(\n    resourceGroupName: string,\n    virtualWANName: string,\n    vpnClientParams: VirtualWanVpnProfileParameters,\n    options?: GeneratevirtualwanvpnserverconfigurationvpnprofileOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<GeneratevirtualwanvpnserverconfigurationvpnprofileResponse>,\n      GeneratevirtualwanvpnserverconfigurationvpnprofileResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<GeneratevirtualwanvpnserverconfigurationvpnprofileResponse> => {\n      return this.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, virtualWANName, vpnClientParams, options },\n      spec: generatevirtualwanvpnserverconfigurationvpnprofileOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      GeneratevirtualwanvpnserverconfigurationvpnprofileResponse,\n      OperationState<GeneratevirtualwanvpnserverconfigurationvpnprofileResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Generates a unique VPN profile for P2S clients for VirtualWan and associated VpnServerConfiguration\n   * combination in the specified resource group.\n   * @param resourceGroupName The resource group name.\n   * @param virtualWANName The name of the VirtualWAN whose associated VpnServerConfigurations is needed.\n   * @param vpnClientParams Parameters supplied to the generate VirtualWan VPN profile generation\n   *                        operation.\n   * @param options The options parameters.\n   */\n  async beginGeneratevirtualwanvpnserverconfigurationvpnprofileAndWait(\n    resourceGroupName: string,\n    virtualWANName: string,\n    vpnClientParams: VirtualWanVpnProfileParameters,\n    options?: GeneratevirtualwanvpnserverconfigurationvpnprofileOptionalParams,\n  ): Promise<GeneratevirtualwanvpnserverconfigurationvpnprofileResponse> {\n    const poller =\n      await this.beginGeneratevirtualwanvpnserverconfigurationvpnprofile(\n        resourceGroupName,\n        virtualWANName,\n        vpnClientParams,\n        options,\n      );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * PutBastionShareableLinkNext\n   * @param resourceGroupName The name of the resource group.\n   * @param bastionHostName The name of the Bastion Host.\n   * @param bslRequest Post request for Create/Delete/Get Bastion Shareable Link endpoints.\n   * @param nextLink The nextLink from the previous successful call to the PutBastionShareableLink\n   *                 method.\n   * @param options The options parameters.\n   */\n  private _putBastionShareableLinkNext(\n    resourceGroupName: string,\n    bastionHostName: string,\n    bslRequest: BastionShareableLinkListRequest,\n    nextLink: string,\n    options?: PutBastionShareableLinkNextOptionalParams,\n  ): Promise<PutBastionShareableLinkNextResponse> {\n    return this.sendOperationRequest(\n      { resourceGroupName, bastionHostName, bslRequest, nextLink, options },\n      putBastionShareableLinkNextOperationSpec,\n    );\n  }\n\n  /**\n   * GetBastionShareableLinkNext\n   * @param resourceGroupName The name of the resource group.\n   * @param bastionHostName The name of the Bastion Host.\n   * @param bslRequest Post request for Create/Delete/Get Bastion Shareable Link endpoints.\n   * @param nextLink The nextLink from the previous successful call to the GetBastionShareableLink\n   *                 method.\n   * @param options The options parameters.\n   */\n  private _getBastionShareableLinkNext(\n    resourceGroupName: string,\n    bastionHostName: string,\n    bslRequest: BastionShareableLinkListRequest,\n    nextLink: string,\n    options?: GetBastionShareableLinkNextOptionalParams,\n  ): Promise<GetBastionShareableLinkNextResponse> {\n    return this.sendOperationRequest(\n      { resourceGroupName, bastionHostName, bslRequest, nextLink, options },\n      getBastionShareableLinkNextOperationSpec,\n    );\n  }\n\n  /**\n   * GetActiveSessionsNext\n   * @param resourceGroupName The name of the resource group.\n   * @param bastionHostName The name of the Bastion Host.\n   * @param nextLink The nextLink from the previous successful call to the GetActiveSessions method.\n   * @param options The options parameters.\n   */\n  private _getActiveSessionsNext(\n    resourceGroupName: string,\n    bastionHostName: string,\n    nextLink: string,\n    options?: GetActiveSessionsNextOptionalParams,\n  ): Promise<GetActiveSessionsNextResponse> {\n    return this.sendOperationRequest(\n      { resourceGroupName, bastionHostName, nextLink, options },\n      getActiveSessionsNextOperationSpec,\n    );\n  }\n\n  /**\n   * DisconnectActiveSessionsNext\n   * @param resourceGroupName The name of the resource group.\n   * @param bastionHostName The name of the Bastion Host.\n   * @param sessionIds The list of sessionids to disconnect.\n   * @param nextLink The nextLink from the previous successful call to the DisconnectActiveSessions\n   *                 method.\n   * @param options The options parameters.\n   */\n  private _disconnectActiveSessionsNext(\n    resourceGroupName: string,\n    bastionHostName: string,\n    sessionIds: SessionIds,\n    nextLink: string,\n    options?: DisconnectActiveSessionsNextOptionalParams,\n  ): Promise<DisconnectActiveSessionsNextResponse> {\n    return this.sendOperationRequest(\n      { resourceGroupName, bastionHostName, sessionIds, nextLink, options },\n      disconnectActiveSessionsNextOperationSpec,\n    );\n  }\n\n  applicationGateways: ApplicationGateways;\n  applicationGatewayPrivateLinkResources: ApplicationGatewayPrivateLinkResources;\n  applicationGatewayPrivateEndpointConnections: ApplicationGatewayPrivateEndpointConnections;\n  applicationGatewayWafDynamicManifestsDefault: ApplicationGatewayWafDynamicManifestsDefault;\n  applicationGatewayWafDynamicManifests: ApplicationGatewayWafDynamicManifests;\n  applicationSecurityGroups: ApplicationSecurityGroups;\n  availableDelegations: AvailableDelegations;\n  availableResourceGroupDelegations: AvailableResourceGroupDelegations;\n  availableServiceAliases: AvailableServiceAliases;\n  azureFirewalls: AzureFirewalls;\n  azureFirewallFqdnTags: AzureFirewallFqdnTags;\n  webCategories: WebCategories;\n  bastionHosts: BastionHosts;\n  networkInterfaces: NetworkInterfaces;\n  publicIPAddresses: PublicIPAddresses;\n  vipSwap: VipSwap;\n  customIPPrefixes: CustomIPPrefixes;\n  ddosCustomPolicies: DdosCustomPolicies;\n  ddosProtectionPlans: DdosProtectionPlans;\n  dscpConfigurationOperations: DscpConfigurationOperations;\n  availableEndpointServices: AvailableEndpointServices;\n  expressRouteCircuitAuthorizations: ExpressRouteCircuitAuthorizations;\n  expressRouteCircuitPeerings: ExpressRouteCircuitPeerings;\n  expressRouteCircuitConnections: ExpressRouteCircuitConnections;\n  peerExpressRouteCircuitConnections: PeerExpressRouteCircuitConnections;\n  expressRouteCircuits: ExpressRouteCircuits;\n  expressRouteServiceProviders: ExpressRouteServiceProviders;\n  expressRouteCrossConnections: ExpressRouteCrossConnections;\n  expressRouteCrossConnectionPeerings: ExpressRouteCrossConnectionPeerings;\n  expressRoutePortsLocations: ExpressRoutePortsLocations;\n  expressRoutePorts: ExpressRoutePorts;\n  expressRouteLinks: ExpressRouteLinks;\n  expressRoutePortAuthorizations: ExpressRoutePortAuthorizations;\n  expressRouteProviderPortsLocation: ExpressRouteProviderPortsLocation;\n  firewallPolicies: FirewallPolicies;\n  firewallPolicyRuleCollectionGroups: FirewallPolicyRuleCollectionGroups;\n  firewallPolicyIdpsSignatures: FirewallPolicyIdpsSignatures;\n  firewallPolicyIdpsSignaturesOverrides: FirewallPolicyIdpsSignaturesOverrides;\n  firewallPolicyIdpsSignaturesFilterValues: FirewallPolicyIdpsSignaturesFilterValues;\n  firewallPolicyDrafts: FirewallPolicyDrafts;\n  firewallPolicyDeployments: FirewallPolicyDeployments;\n  firewallPolicyRuleCollectionGroupDrafts: FirewallPolicyRuleCollectionGroupDrafts;\n  ipamPools: IpamPools;\n  staticCidrs: StaticCidrs;\n  ipAllocations: IpAllocations;\n  ipGroups: IpGroups;\n  loadBalancers: LoadBalancers;\n  loadBalancerBackendAddressPools: LoadBalancerBackendAddressPools;\n  loadBalancerFrontendIPConfigurations: LoadBalancerFrontendIPConfigurations;\n  inboundNatRules: InboundNatRules;\n  loadBalancerLoadBalancingRules: LoadBalancerLoadBalancingRules;\n  loadBalancerOutboundRules: LoadBalancerOutboundRules;\n  loadBalancerNetworkInterfaces: LoadBalancerNetworkInterfaces;\n  loadBalancerProbes: LoadBalancerProbes;\n  natGateways: NatGateways;\n  networkInterfaceIPConfigurations: NetworkInterfaceIPConfigurations;\n  networkInterfaceLoadBalancers: NetworkInterfaceLoadBalancers;\n  networkInterfaceTapConfigurations: NetworkInterfaceTapConfigurations;\n  networkManagers: NetworkManagers;\n  networkManagerCommits: NetworkManagerCommits;\n  networkManagerDeploymentStatusOperations: NetworkManagerDeploymentStatusOperations;\n  subscriptionNetworkManagerConnections: SubscriptionNetworkManagerConnections;\n  managementGroupNetworkManagerConnections: ManagementGroupNetworkManagerConnections;\n  connectivityConfigurations: ConnectivityConfigurations;\n  networkGroups: NetworkGroups;\n  staticMembers: StaticMembers;\n  networkManagerRoutingConfigurations: NetworkManagerRoutingConfigurations;\n  routingRuleCollections: RoutingRuleCollections;\n  routingRules: RoutingRules;\n  scopeConnections: ScopeConnections;\n  securityAdminConfigurations: SecurityAdminConfigurations;\n  adminRuleCollections: AdminRuleCollections;\n  adminRules: AdminRules;\n  securityUserConfigurations: SecurityUserConfigurations;\n  securityUserRuleCollections: SecurityUserRuleCollections;\n  securityUserRules: SecurityUserRules;\n  networkProfiles: NetworkProfiles;\n  networkSecurityGroups: NetworkSecurityGroups;\n  securityRules: SecurityRules;\n  defaultSecurityRules: DefaultSecurityRules;\n  reachabilityAnalysisIntents: ReachabilityAnalysisIntents;\n  reachabilityAnalysisRuns: ReachabilityAnalysisRuns;\n  verifierWorkspaces: VerifierWorkspaces;\n  networkVirtualAppliances: NetworkVirtualAppliances;\n  virtualApplianceSites: VirtualApplianceSites;\n  virtualApplianceSkus: VirtualApplianceSkus;\n  inboundSecurityRuleOperations: InboundSecurityRuleOperations;\n  networkWatchers: NetworkWatchers;\n  packetCaptures: PacketCaptures;\n  connectionMonitors: ConnectionMonitors;\n  flowLogs: FlowLogs;\n  operations: Operations;\n  privateEndpoints: PrivateEndpoints;\n  availablePrivateEndpointTypes: AvailablePrivateEndpointTypes;\n  privateDnsZoneGroups: PrivateDnsZoneGroups;\n  privateLinkServices: PrivateLinkServices;\n  publicIPPrefixes: PublicIPPrefixes;\n  routeFilters: RouteFilters;\n  routeFilterRules: RouteFilterRules;\n  routeTables: RouteTables;\n  routes: Routes;\n  securityPartnerProviders: SecurityPartnerProviders;\n  bgpServiceCommunities: BgpServiceCommunities;\n  serviceEndpointPolicies: ServiceEndpointPolicies;\n  serviceEndpointPolicyDefinitions: ServiceEndpointPolicyDefinitions;\n  serviceTags: ServiceTags;\n  serviceTagInformationOperations: ServiceTagInformationOperations;\n  usages: Usages;\n  virtualNetworks: VirtualNetworks;\n  subnets: Subnets;\n  resourceNavigationLinks: ResourceNavigationLinks;\n  serviceAssociationLinks: ServiceAssociationLinks;\n  virtualNetworkPeerings: VirtualNetworkPeerings;\n  virtualNetworkGateways: VirtualNetworkGateways;\n  virtualNetworkGatewayConnections: VirtualNetworkGatewayConnections;\n  localNetworkGateways: LocalNetworkGateways;\n  virtualNetworkGatewayNatRules: VirtualNetworkGatewayNatRules;\n  virtualNetworkTaps: VirtualNetworkTaps;\n  virtualRouters: VirtualRouters;\n  virtualRouterPeerings: VirtualRouterPeerings;\n  virtualWans: VirtualWans;\n  vpnSites: VpnSites;\n  vpnSiteLinks: VpnSiteLinks;\n  vpnSitesConfiguration: VpnSitesConfiguration;\n  vpnServerConfigurations: VpnServerConfigurations;\n  configurationPolicyGroups: ConfigurationPolicyGroups;\n  virtualHubs: VirtualHubs;\n  routeMaps: RouteMaps;\n  hubVirtualNetworkConnections: HubVirtualNetworkConnections;\n  vpnGateways: VpnGateways;\n  vpnLinkConnections: VpnLinkConnections;\n  vpnConnections: VpnConnections;\n  vpnSiteLinkConnections: VpnSiteLinkConnections;\n  natRules: NatRules;\n  p2SVpnGateways: P2SVpnGateways;\n  vpnServerConfigurationsAssociatedWithVirtualWan: VpnServerConfigurationsAssociatedWithVirtualWan;\n  virtualHubRouteTableV2S: VirtualHubRouteTableV2S;\n  expressRouteGateways: ExpressRouteGateways;\n  expressRouteConnections: ExpressRouteConnections;\n  networkVirtualApplianceConnections: NetworkVirtualApplianceConnections;\n  virtualHubBgpConnection: VirtualHubBgpConnection;\n  virtualHubBgpConnections: VirtualHubBgpConnections;\n  virtualHubIpConfiguration: VirtualHubIpConfiguration;\n  hubRouteTables: HubRouteTables;\n  routingIntentOperations: RoutingIntentOperations;\n  webApplicationFirewallPolicies: WebApplicationFirewallPolicies;\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst putBastionShareableLinkOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/bastionHosts/{bastionHostName}/createShareableLinks\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BastionShareableLinkListResult,\n    },\n    201: {\n      bodyMapper: Mappers.BastionShareableLinkListResult,\n    },\n    202: {\n      bodyMapper: Mappers.BastionShareableLinkListResult,\n    },\n    204: {\n      bodyMapper: Mappers.BastionShareableLinkListResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.bslRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.bastionHostName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst deleteBastionShareableLinkOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/bastionHosts/{bastionHostName}/deleteShareableLinks\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.bslRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.bastionHostName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst deleteBastionShareableLinkByTokenOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/bastionHosts/{bastionHostName}/deleteShareableLinksByToken\",\n    httpMethod: \"POST\",\n    responses: {\n      200: {\n        headersMapper:\n          Mappers.NetworkManagementClientDeleteBastionShareableLinkByTokenHeaders,\n      },\n      201: {\n        headersMapper:\n          Mappers.NetworkManagementClientDeleteBastionShareableLinkByTokenHeaders,\n      },\n      202: {\n        headersMapper:\n          Mappers.NetworkManagementClientDeleteBastionShareableLinkByTokenHeaders,\n      },\n      204: {\n        headersMapper:\n          Mappers.NetworkManagementClientDeleteBastionShareableLinkByTokenHeaders,\n      },\n      default: {\n        bodyMapper: Mappers.CloudError,\n      },\n    },\n    requestBody: Parameters.bslTokenRequest,\n    queryParameters: [Parameters.apiVersion],\n    urlParameters: [\n      Parameters.$host,\n      Parameters.resourceGroupName,\n      Parameters.subscriptionId,\n      Parameters.bastionHostName,\n    ],\n    headerParameters: [Parameters.accept, Parameters.contentType],\n    mediaType: \"json\",\n    serializer,\n  };\nconst getBastionShareableLinkOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/bastionHosts/{bastionHostName}/getShareableLinks\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BastionShareableLinkListResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.bslRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.bastionHostName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getActiveSessionsOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/bastionHosts/{bastionHostName}/getActiveSessions\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BastionActiveSessionListResult,\n    },\n    201: {\n      bodyMapper: Mappers.BastionActiveSessionListResult,\n    },\n    202: {\n      bodyMapper: Mappers.BastionActiveSessionListResult,\n    },\n    204: {\n      bodyMapper: Mappers.BastionActiveSessionListResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.bastionHostName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst disconnectActiveSessionsOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/bastionHosts/{bastionHostName}/disconnectActiveSessions\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BastionSessionDeleteResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.sessionIds,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.bastionHostName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst checkDnsNameAvailabilityOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/CheckDnsNameAvailability\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DnsNameAvailabilityResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.domainNameLabel],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.location,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst expressRouteProviderPortOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/providers/Microsoft.Network/expressRouteProviderPorts/{providerport}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ExpressRouteProviderPort,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.providerport,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listActiveConnectivityConfigurationsOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/listActiveConnectivityConfigurations\",\n    httpMethod: \"POST\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.ActiveConnectivityConfigurationsListResult,\n      },\n      default: {\n        bodyMapper: Mappers.CloudError,\n      },\n    },\n    requestBody: Parameters.parameters7,\n    queryParameters: [Parameters.apiVersion, Parameters.top],\n    urlParameters: [\n      Parameters.$host,\n      Parameters.resourceGroupName,\n      Parameters.subscriptionId,\n      Parameters.networkManagerName,\n    ],\n    headerParameters: [Parameters.accept, Parameters.contentType],\n    mediaType: \"json\",\n    serializer,\n  };\nconst listActiveSecurityAdminRulesOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/listActiveSecurityAdminRules\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ActiveSecurityAdminRulesListResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.parameters7,\n  queryParameters: [Parameters.apiVersion, Parameters.top],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.networkManagerName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst listNetworkManagerEffectiveConnectivityConfigurationsOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/listNetworkManagerEffectiveConnectivityConfigurations\",\n    httpMethod: \"POST\",\n    responses: {\n      200: {\n        bodyMapper:\n          Mappers.NetworkManagerEffectiveConnectivityConfigurationListResult,\n      },\n      default: {\n        bodyMapper: Mappers.CloudError,\n      },\n    },\n    requestBody: Parameters.parameters8,\n    queryParameters: [Parameters.apiVersion, Parameters.top],\n    urlParameters: [\n      Parameters.$host,\n      Parameters.resourceGroupName,\n      Parameters.subscriptionId,\n      Parameters.virtualNetworkName,\n    ],\n    headerParameters: [Parameters.accept, Parameters.contentType],\n    mediaType: \"json\",\n    serializer,\n  };\nconst listNetworkManagerEffectiveSecurityAdminRulesOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/listNetworkManagerEffectiveSecurityAdminRules\",\n    httpMethod: \"POST\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.NetworkManagerEffectiveSecurityAdminRulesListResult,\n      },\n      default: {\n        bodyMapper: Mappers.CloudError,\n      },\n    },\n    requestBody: Parameters.parameters8,\n    queryParameters: [Parameters.apiVersion, Parameters.top],\n    urlParameters: [\n      Parameters.$host,\n      Parameters.resourceGroupName,\n      Parameters.subscriptionId,\n      Parameters.virtualNetworkName,\n    ],\n    headerParameters: [Parameters.accept, Parameters.contentType],\n    mediaType: \"json\",\n    serializer,\n  };\nconst supportedSecurityProvidersOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWANName}/supportedSecurityProviders\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.VirtualWanSecurityProviders,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.virtualWANName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst generatevirtualwanvpnserverconfigurationvpnprofileOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWANName}/GenerateVpnProfile\",\n    httpMethod: \"POST\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.VpnProfileResponse,\n      },\n      201: {\n        bodyMapper: Mappers.VpnProfileResponse,\n      },\n      202: {\n        bodyMapper: Mappers.VpnProfileResponse,\n      },\n      204: {\n        bodyMapper: Mappers.VpnProfileResponse,\n      },\n      default: {\n        bodyMapper: Mappers.CloudError,\n      },\n    },\n    requestBody: Parameters.vpnClientParams,\n    queryParameters: [Parameters.apiVersion],\n    urlParameters: [\n      Parameters.$host,\n      Parameters.resourceGroupName,\n      Parameters.subscriptionId,\n      Parameters.virtualWANName,\n    ],\n    headerParameters: [Parameters.accept, Parameters.contentType],\n    mediaType: \"json\",\n    serializer,\n  };\nconst putBastionShareableLinkNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BastionShareableLinkListResult,\n    },\n    202: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.nextLink,\n    Parameters.bastionHostName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getBastionShareableLinkNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BastionShareableLinkListResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.nextLink,\n    Parameters.bastionHostName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getActiveSessionsNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BastionActiveSessionListResult,\n    },\n    202: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.nextLink,\n    Parameters.bastionHostName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst disconnectActiveSessionsNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BastionSessionDeleteResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.nextLink,\n    Parameters.bastionHostName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\n"]}