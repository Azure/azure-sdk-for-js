"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.resourceName = exports.groupName = exports.parameters10 = exports.publicIpAddressName = exports.ipConfigurationName = exports.apiVersion1 = exports.virtualmachineIndex = exports.virtualMachineScaleSetName = exports.parameters9 = exports.networkInterfaceName = exports.roleInstanceName = exports.cloudServiceName = exports.vpnClientParams = exports.virtualWANName = exports.virtualNetworkName = exports.parameters8 = exports.top = exports.networkManagerName = exports.parameters7 = exports.providerport = exports.domainNameLabel = exports.sessionIds = exports.bslTokenRequest = exports.bslRequest = exports.parameters6 = exports.bastionHostName = exports.name = exports.azureFirewallName2 = exports.parameters5 = exports.azureFirewallName1 = exports.parameters4 = exports.azureFirewallName = exports.parameters3 = exports.applicationSecurityGroupName = exports.location = exports.parameters2 = exports.connectionName = exports.nextLink = exports.predefinedPolicyName = exports.probeRequest = exports.expand = exports.parameters1 = exports.parameters = exports.contentType = exports.subscriptionId = exports.apiVersion = exports.applicationGatewayName = exports.resourceGroupName = exports.$host = exports.accept = void 0;
exports.body2 = exports.body1 = exports.poolName = exports.body = exports.sortValue = exports.sortKey = exports.top1 = exports.skip = exports.skipToken = exports.networkManagerName1 = exports.parameters25 = exports.ruleCollectionGroupName1 = exports.firewallPolicyName1 = exports.parameters24 = exports.parameters23 = exports.parameters22 = exports.parameters21 = exports.parameters20 = exports.ruleCollectionGroupName = exports.parameters19 = exports.firewallPolicyName = exports.authorizationParameters1 = exports.linkName = exports.request = exports.parameters18 = exports.expressRoutePortName = exports.locationName = exports.peeringParameters1 = exports.crossConnectionParameters = exports.parameters17 = exports.crossConnectionName = exports.filter = exports.devicePath = exports.parameters16 = exports.expressRouteCircuitConnectionParameters = exports.peeringParameters = exports.peeringName = exports.authorizationParameters = exports.authorizationName = exports.circuitName = exports.dscpConfigurationName = exports.parameters15 = exports.parameters14 = exports.ddosProtectionPlanName = exports.parameters13 = exports.ddosCustomPolicyName = exports.parameters12 = exports.customIpPrefixName = exports.parameters11 = exports.singletonResource = void 0;
exports.routingRule = exports.ruleName = exports.ruleCollection = exports.ruleCollectionName = exports.routingConfiguration = exports.configurationName1 = exports.networkManagerName2 = exports.resourceGroupName1 = exports.parameters40 = exports.staticMemberName = exports.ifMatch = exports.parameters39 = exports.networkGroupName = exports.connectivityConfiguration = exports.configurationName = exports.managementGroupId = exports.networkManagerConnectionName = exports.parameters38 = exports.parameters37 = exports.parameters36 = exports.skipToken1 = exports.parameters35 = exports.force = exports.parameters34 = exports.tapConfigurationParameters = exports.tapConfigurationName = exports.parameters33 = exports.natGatewayName = exports.probeName = exports.outboundRuleName = exports.loadBalancingRuleName1 = exports.loadBalancingRuleName = exports.inboundNatRuleParameters = exports.inboundNatRuleName = exports.frontendIPConfigurationName = exports.parameters32 = exports.backendAddressPoolName = exports.loadBalancerName1 = exports.groupName1 = exports.parameters31 = exports.backendPoolName = exports.parameters30 = exports.parameters29 = exports.parameters28 = exports.loadBalancerName = exports.parameters27 = exports.ipGroupsName = exports.parameters26 = exports.ipAllocationName = exports.staticCidrName = void 0;
exports.migrate = exports.connectionMonitorName = exports.parameters61 = exports.packetCaptureName = exports.parameters60 = exports.parameters59 = exports.parameters58 = exports.parameters57 = exports.parameters56 = exports.parameters55 = exports.parameters54 = exports.parameters53 = exports.parameters52 = exports.parameters51 = exports.parameters50 = exports.parameters49 = exports.parameters48 = exports.networkWatcherName = exports.parameters47 = exports.parameters46 = exports.skuName = exports.parameters45 = exports.siteName = exports.networkVirtualApplianceInstanceIds = exports.parameters44 = exports.networkVirtualApplianceName = exports.body6 = exports.body5 = exports.body4 = exports.reachabilityAnalysisRunName = exports.body3 = exports.reachabilityAnalysisIntentName = exports.workspaceName = exports.defaultSecurityRuleName = exports.securityRuleParameters = exports.securityRuleName = exports.parameters43 = exports.networkSecurityGroupName = exports.parameters42 = exports.networkProfileName = exports.securityUserRule = exports.securityUserRuleCollection = exports.securityUserConfiguration = exports.adminRule = exports.ruleName1 = exports.ruleCollection1 = exports.ruleCollectionName1 = exports.securityAdminConfiguration = exports.scopeConnectionName = exports.parameters41 = void 0;
exports.parameters77 = exports.parameters76 = exports.virtualNetworkGatewayConnectionName = exports.parameters75 = exports.vpnclientIpsecParams = exports.peer1 = exports.peer = exports.parameters74 = exports.gatewayVip = exports.virtualNetworkGatewayName = exports.parameters73 = exports.syncRemoteAddressSpace = exports.virtualNetworkPeeringParameters = exports.virtualNetworkPeeringName = exports.unprepareNetworkPoliciesRequestParameters = exports.prepareNetworkPoliciesRequestParameters = exports.subnetParameters = exports.subnetName = exports.top2 = exports.ipAddress = exports.parameters72 = exports.location1 = exports.tagName = exports.noAddressPrefixes = exports.serviceEndpointPolicyDefinitions = exports.serviceEndpointPolicyDefinitionName = exports.parameters71 = exports.serviceEndpointPolicyName = exports.parameters70 = exports.securityPartnerProviderName = exports.routeParameters = exports.routeName = exports.parameters69 = exports.routeTableName = exports.routeFilterRuleParameters = exports.routeFilterParameters = exports.routeFilterName = exports.parameters68 = exports.publicIpPrefixName = exports.parameters67 = exports.parameters66 = exports.peConnectionName = exports.parameters65 = exports.serviceName = exports.parameters64 = exports.privateDnsZoneGroupName = exports.parameters63 = exports.privateEndpointName = exports.flowLogName = exports.parameters62 = void 0;
exports.vpnConnectionParameters = exports.connectionSharedKeyParameters = exports.linkConnectionName = exports.parameters86 = exports.parameters85 = exports.ipConfigurationId = exports.vpnGatewayParameters1 = exports.vpnGatewayParameters = exports.gatewayName = exports.hubVirtualNetworkConnectionParameters = exports.routeMapParameters = exports.routeMapName = exports.getOutboundRoutesParameters = exports.getInboundRoutesParameters = exports.effectiveRoutesParameters = exports.virtualHubParameters1 = exports.virtualHubParameters = exports.virtualHubName = exports.configurationPolicyGroupName = exports.vpnServerConfigurationPolicyGroupParameters = exports.vpnServerConfigurationParameters1 = exports.vpnServerConfigurationParameters = exports.vpnServerConfigurationName = exports.request2 = exports.vpnSiteLinkName = exports.vpnSiteParameters1 = exports.vpnSiteParameters = exports.vpnSiteName = exports.wANParameters1 = exports.wANParameters = exports.virtualWANName1 = exports.parameters84 = exports.parameters83 = exports.virtualRouterName = exports.tapParameters = exports.parameters82 = exports.tapName = exports.natRuleParameters = exports.natRuleName = exports.localNetworkGatewayName = exports.parameters81 = exports.parameters80 = exports.parameters79 = exports.parameters78 = exports.request1 = exports.stopParameters = exports.failoverTestId = exports.peeringLocation = exports.fetchLatest = exports.typeParam = void 0;
exports.parameters92 = exports.policyName = exports.routingIntentName = exports.routingIntentParameters = exports.routeTableParameters = exports.parameters91 = exports.ipConfigName = exports.hubName = exports.parameters90 = exports.connectionName1 = exports.networkVirtualApplianceName1 = exports.networkVirtualApplianceConnectionParameters = exports.putExpressRouteConnectionParameters = exports.expressRouteGatewayParameters = exports.expressRouteGatewayName = exports.putExpressRouteGatewayParameters = exports.virtualHubRouteTableV2Parameters = exports.p2SVpnGatewayName = exports.request3 = exports.parameters89 = exports.p2SVpnGatewayParameters1 = exports.p2SVpnGatewayParameters = exports.natRuleParameters1 = exports.parameters88 = exports.vpnConnectionName = exports.parameters87 = void 0;
const mappers_js_1 = require("../models/mappers.js");
exports.accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
exports.$host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
exports.resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.applicationGatewayName = {
    parameterPath: "applicationGatewayName",
    mapper: {
        serializedName: "applicationGatewayName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2024-05-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String",
        },
    },
};
exports.subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String",
        },
    },
};
exports.parameters = {
    parameterPath: "parameters",
    mapper: mappers_js_1.ApplicationGateway,
};
exports.parameters1 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.TagsObject,
};
exports.expand = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String",
        },
    },
};
exports.probeRequest = {
    parameterPath: "probeRequest",
    mapper: mappers_js_1.ApplicationGatewayOnDemandProbe,
};
exports.predefinedPolicyName = {
    parameterPath: "predefinedPolicyName",
    mapper: {
        serializedName: "predefinedPolicyName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
exports.connectionName = {
    parameterPath: "connectionName",
    mapper: {
        serializedName: "connectionName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters2 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.ApplicationGatewayPrivateEndpointConnection,
};
exports.location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.applicationSecurityGroupName = {
    parameterPath: "applicationSecurityGroupName",
    mapper: {
        serializedName: "applicationSecurityGroupName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters3 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.ApplicationSecurityGroup,
};
exports.azureFirewallName = {
    parameterPath: "azureFirewallName",
    mapper: {
        serializedName: "azureFirewallName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters4 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.AzureFirewall,
};
exports.azureFirewallName1 = {
    parameterPath: "azureFirewallName",
    mapper: {
        constraints: {
            MaxLength: 56,
            MinLength: 1,
        },
        serializedName: "azureFirewallName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters5 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.FirewallPacketCaptureParameters,
};
exports.azureFirewallName2 = {
    parameterPath: "azureFirewallName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9]"),
            MaxLength: 56,
            MinLength: 1,
        },
        serializedName: "azureFirewallName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.name = {
    parameterPath: "name",
    mapper: {
        serializedName: "name",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.bastionHostName = {
    parameterPath: "bastionHostName",
    mapper: {
        serializedName: "bastionHostName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters6 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.BastionHost,
};
exports.bslRequest = {
    parameterPath: "bslRequest",
    mapper: mappers_js_1.BastionShareableLinkListRequest,
};
exports.bslTokenRequest = {
    parameterPath: "bslTokenRequest",
    mapper: mappers_js_1.BastionShareableLinkTokenListRequest,
};
exports.sessionIds = {
    parameterPath: "sessionIds",
    mapper: mappers_js_1.SessionIds,
};
exports.domainNameLabel = {
    parameterPath: "domainNameLabel",
    mapper: {
        serializedName: "domainNameLabel",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.providerport = {
    parameterPath: "providerport",
    mapper: {
        serializedName: "providerport",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters7 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.ActiveConfigurationParameter,
};
exports.networkManagerName = {
    parameterPath: "networkManagerName",
    mapper: {
        serializedName: "networkManagerName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.top = {
    parameterPath: ["options", "top"],
    mapper: {
        constraints: {
            InclusiveMaximum: 20,
            InclusiveMinimum: 1,
        },
        serializedName: "$top",
        type: {
            name: "Number",
        },
    },
};
exports.parameters8 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.QueryRequestOptions,
};
exports.virtualNetworkName = {
    parameterPath: "virtualNetworkName",
    mapper: {
        serializedName: "virtualNetworkName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.virtualWANName = {
    parameterPath: "virtualWANName",
    mapper: {
        serializedName: "virtualWANName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.vpnClientParams = {
    parameterPath: "vpnClientParams",
    mapper: mappers_js_1.VirtualWanVpnProfileParameters,
};
exports.cloudServiceName = {
    parameterPath: "cloudServiceName",
    mapper: {
        serializedName: "cloudServiceName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.roleInstanceName = {
    parameterPath: "roleInstanceName",
    mapper: {
        serializedName: "roleInstanceName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.networkInterfaceName = {
    parameterPath: "networkInterfaceName",
    mapper: {
        serializedName: "networkInterfaceName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters9 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.NetworkInterface,
};
exports.virtualMachineScaleSetName = {
    parameterPath: "virtualMachineScaleSetName",
    mapper: {
        serializedName: "virtualMachineScaleSetName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.virtualmachineIndex = {
    parameterPath: "virtualmachineIndex",
    mapper: {
        serializedName: "virtualmachineIndex",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.apiVersion1 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2018-10-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String",
        },
    },
};
exports.ipConfigurationName = {
    parameterPath: "ipConfigurationName",
    mapper: {
        serializedName: "ipConfigurationName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.publicIpAddressName = {
    parameterPath: "publicIpAddressName",
    mapper: {
        serializedName: "publicIpAddressName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters10 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.PublicIPAddress,
};
exports.groupName = {
    parameterPath: "groupName",
    mapper: {
        serializedName: "groupName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.resourceName = {
    parameterPath: "resourceName",
    mapper: {
        serializedName: "resourceName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.singletonResource = {
    parameterPath: "singletonResource",
    mapper: {
        defaultValue: "swap",
        isConstant: true,
        serializedName: "singletonResource",
        type: {
            name: "String",
        },
    },
};
exports.parameters11 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.SwapResource,
};
exports.customIpPrefixName = {
    parameterPath: "customIpPrefixName",
    mapper: {
        serializedName: "customIpPrefixName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters12 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.CustomIpPrefix,
};
exports.ddosCustomPolicyName = {
    parameterPath: "ddosCustomPolicyName",
    mapper: {
        serializedName: "ddosCustomPolicyName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters13 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.DdosCustomPolicy,
};
exports.ddosProtectionPlanName = {
    parameterPath: "ddosProtectionPlanName",
    mapper: {
        serializedName: "ddosProtectionPlanName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters14 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.DdosProtectionPlan,
};
exports.parameters15 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.DscpConfiguration,
};
exports.dscpConfigurationName = {
    parameterPath: "dscpConfigurationName",
    mapper: {
        serializedName: "dscpConfigurationName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.circuitName = {
    parameterPath: "circuitName",
    mapper: {
        serializedName: "circuitName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.authorizationName = {
    parameterPath: "authorizationName",
    mapper: {
        serializedName: "authorizationName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.authorizationParameters = {
    parameterPath: "authorizationParameters",
    mapper: mappers_js_1.ExpressRouteCircuitAuthorization,
};
exports.peeringName = {
    parameterPath: "peeringName",
    mapper: {
        serializedName: "peeringName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.peeringParameters = {
    parameterPath: "peeringParameters",
    mapper: mappers_js_1.ExpressRouteCircuitPeering,
};
exports.expressRouteCircuitConnectionParameters = {
    parameterPath: "expressRouteCircuitConnectionParameters",
    mapper: mappers_js_1.ExpressRouteCircuitConnection,
};
exports.parameters16 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.ExpressRouteCircuit,
};
exports.devicePath = {
    parameterPath: "devicePath",
    mapper: {
        serializedName: "devicePath",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String",
        },
    },
};
exports.crossConnectionName = {
    parameterPath: "crossConnectionName",
    mapper: {
        serializedName: "crossConnectionName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters17 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.ExpressRouteCrossConnection,
};
exports.crossConnectionParameters = {
    parameterPath: "crossConnectionParameters",
    mapper: mappers_js_1.TagsObject,
};
exports.peeringParameters1 = {
    parameterPath: "peeringParameters",
    mapper: mappers_js_1.ExpressRouteCrossConnectionPeering,
};
exports.locationName = {
    parameterPath: "locationName",
    mapper: {
        serializedName: "locationName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.expressRoutePortName = {
    parameterPath: "expressRoutePortName",
    mapper: {
        serializedName: "expressRoutePortName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters18 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.ExpressRoutePort,
};
exports.request = {
    parameterPath: "request",
    mapper: mappers_js_1.GenerateExpressRoutePortsLOARequest,
};
exports.linkName = {
    parameterPath: "linkName",
    mapper: {
        serializedName: "linkName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.authorizationParameters1 = {
    parameterPath: "authorizationParameters",
    mapper: mappers_js_1.ExpressRoutePortAuthorization,
};
exports.firewallPolicyName = {
    parameterPath: "firewallPolicyName",
    mapper: {
        serializedName: "firewallPolicyName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters19 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.FirewallPolicy,
};
exports.ruleCollectionGroupName = {
    parameterPath: "ruleCollectionGroupName",
    mapper: {
        serializedName: "ruleCollectionGroupName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters20 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.FirewallPolicyRuleCollectionGroup,
};
exports.parameters21 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.IdpsQueryObject,
};
exports.parameters22 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.SignaturesOverrides,
};
exports.parameters23 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.SignatureOverridesFilterValuesQuery,
};
exports.parameters24 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.FirewallPolicyDraft,
};
exports.firewallPolicyName1 = {
    parameterPath: "firewallPolicyName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[^_\\W][\\w-._]{0,79}(?<![-.])$"),
        },
        serializedName: "firewallPolicyName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.ruleCollectionGroupName1 = {
    parameterPath: "ruleCollectionGroupName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[^_\\W][\\w-._]{0,79}(?<![-.])$"),
        },
        serializedName: "ruleCollectionGroupName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters25 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.FirewallPolicyRuleCollectionGroupDraft,
};
exports.networkManagerName1 = {
    parameterPath: "networkManagerName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[0-9a-zA-Z]([0-9a-zA-Z_.-]{0,62}[0-9a-zA-Z_])?$"),
        },
        serializedName: "networkManagerName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.skipToken = {
    parameterPath: ["options", "skipToken"],
    mapper: {
        serializedName: "skipToken",
        type: {
            name: "String",
        },
    },
};
exports.skip = {
    parameterPath: ["options", "skip"],
    mapper: {
        defaultValue: 0,
        serializedName: "skip",
        type: {
            name: "Number",
        },
    },
};
exports.top1 = {
    parameterPath: ["options", "top"],
    mapper: {
        defaultValue: 50,
        serializedName: "top",
        type: {
            name: "Number",
        },
    },
};
exports.sortKey = {
    parameterPath: ["options", "sortKey"],
    mapper: {
        serializedName: "sortKey",
        type: {
            name: "String",
        },
    },
};
exports.sortValue = {
    parameterPath: ["options", "sortValue"],
    mapper: {
        serializedName: "sortValue",
        type: {
            name: "String",
        },
    },
};
exports.body = {
    parameterPath: "body",
    mapper: mappers_js_1.IpamPool,
};
exports.poolName = {
    parameterPath: "poolName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[0-9a-zA-Z]([0-9a-zA-Z_.-]{0,62}[0-9a-zA-Z_])?$"),
        },
        serializedName: "poolName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.body1 = {
    parameterPath: ["options", "body"],
    mapper: mappers_js_1.IpamPoolUpdate,
};
exports.body2 = {
    parameterPath: ["options", "body"],
    mapper: mappers_js_1.StaticCidr,
};
exports.staticCidrName = {
    parameterPath: "staticCidrName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[0-9a-zA-Z]([0-9a-zA-Z_.-]{0,62}[0-9a-zA-Z_])?$"),
        },
        serializedName: "staticCidrName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.ipAllocationName = {
    parameterPath: "ipAllocationName",
    mapper: {
        serializedName: "ipAllocationName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters26 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.IpAllocation,
};
exports.ipGroupsName = {
    parameterPath: "ipGroupsName",
    mapper: {
        serializedName: "ipGroupsName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters27 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.IpGroup,
};
exports.loadBalancerName = {
    parameterPath: "loadBalancerName",
    mapper: {
        serializedName: "loadBalancerName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters28 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.LoadBalancer,
};
exports.parameters29 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.LoadBalancerVipSwapRequest,
};
exports.parameters30 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.QueryInboundNatRulePortMappingRequest,
};
exports.backendPoolName = {
    parameterPath: "backendPoolName",
    mapper: {
        serializedName: "backendPoolName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters31 = {
    parameterPath: ["options", "parameters"],
    mapper: mappers_js_1.MigrateLoadBalancerToIpBasedRequest,
};
exports.groupName1 = {
    parameterPath: "groupName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-z][a-z0-9]*$"),
        },
        serializedName: "groupName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.loadBalancerName1 = {
    parameterPath: "loadBalancerName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-z][a-z0-9]*$"),
        },
        serializedName: "loadBalancerName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.backendAddressPoolName = {
    parameterPath: "backendAddressPoolName",
    mapper: {
        serializedName: "backendAddressPoolName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters32 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.BackendAddressPool,
};
exports.frontendIPConfigurationName = {
    parameterPath: "frontendIPConfigurationName",
    mapper: {
        serializedName: "frontendIPConfigurationName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.inboundNatRuleName = {
    parameterPath: "inboundNatRuleName",
    mapper: {
        serializedName: "inboundNatRuleName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.inboundNatRuleParameters = {
    parameterPath: "inboundNatRuleParameters",
    mapper: mappers_js_1.InboundNatRule,
};
exports.loadBalancingRuleName = {
    parameterPath: "loadBalancingRuleName",
    mapper: {
        serializedName: "loadBalancingRuleName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.loadBalancingRuleName1 = {
    parameterPath: "loadBalancingRuleName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-z][a-z0-9]*$"),
        },
        serializedName: "loadBalancingRuleName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.outboundRuleName = {
    parameterPath: "outboundRuleName",
    mapper: {
        serializedName: "outboundRuleName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.probeName = {
    parameterPath: "probeName",
    mapper: {
        serializedName: "probeName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.natGatewayName = {
    parameterPath: "natGatewayName",
    mapper: {
        serializedName: "natGatewayName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters33 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.NatGateway,
};
exports.tapConfigurationName = {
    parameterPath: "tapConfigurationName",
    mapper: {
        serializedName: "tapConfigurationName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.tapConfigurationParameters = {
    parameterPath: "tapConfigurationParameters",
    mapper: mappers_js_1.NetworkInterfaceTapConfiguration,
};
exports.parameters34 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.NetworkManager,
};
exports.force = {
    parameterPath: ["options", "force"],
    mapper: {
        serializedName: "force",
        type: {
            name: "Boolean",
        },
    },
};
exports.parameters35 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.PatchObject,
};
exports.skipToken1 = {
    parameterPath: ["options", "skipToken"],
    mapper: {
        serializedName: "$skipToken",
        type: {
            name: "String",
        },
    },
};
exports.parameters36 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.NetworkManagerCommit,
};
exports.parameters37 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.NetworkManagerDeploymentStatusParameter,
};
exports.parameters38 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.NetworkManagerConnection,
};
exports.networkManagerConnectionName = {
    parameterPath: "networkManagerConnectionName",
    mapper: {
        serializedName: "networkManagerConnectionName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.managementGroupId = {
    parameterPath: "managementGroupId",
    mapper: {
        serializedName: "managementGroupId",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.configurationName = {
    parameterPath: "configurationName",
    mapper: {
        serializedName: "configurationName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.connectivityConfiguration = {
    parameterPath: "connectivityConfiguration",
    mapper: mappers_js_1.ConnectivityConfiguration,
};
exports.networkGroupName = {
    parameterPath: "networkGroupName",
    mapper: {
        serializedName: "networkGroupName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters39 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.NetworkGroup,
};
exports.ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String",
        },
    },
};
exports.staticMemberName = {
    parameterPath: "staticMemberName",
    mapper: {
        serializedName: "staticMemberName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters40 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.StaticMember,
};
exports.resourceGroupName1 = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1,
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.networkManagerName2 = {
    parameterPath: "networkManagerName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9_.-]*$"),
        },
        serializedName: "networkManagerName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.configurationName1 = {
    parameterPath: "configurationName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9_.-]*$"),
        },
        serializedName: "configurationName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.routingConfiguration = {
    parameterPath: "routingConfiguration",
    mapper: mappers_js_1.NetworkManagerRoutingConfiguration,
};
exports.ruleCollectionName = {
    parameterPath: "ruleCollectionName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9_.-]*$"),
        },
        serializedName: "ruleCollectionName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.ruleCollection = {
    parameterPath: "ruleCollection",
    mapper: mappers_js_1.RoutingRuleCollection,
};
exports.ruleName = {
    parameterPath: "ruleName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9_.-]*$"),
        },
        serializedName: "ruleName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.routingRule = {
    parameterPath: "routingRule",
    mapper: mappers_js_1.RoutingRule,
};
exports.parameters41 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.ScopeConnection,
};
exports.scopeConnectionName = {
    parameterPath: "scopeConnectionName",
    mapper: {
        serializedName: "scopeConnectionName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.securityAdminConfiguration = {
    parameterPath: "securityAdminConfiguration",
    mapper: mappers_js_1.SecurityAdminConfiguration,
};
exports.ruleCollectionName1 = {
    parameterPath: "ruleCollectionName",
    mapper: {
        serializedName: "ruleCollectionName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.ruleCollection1 = {
    parameterPath: "ruleCollection",
    mapper: mappers_js_1.AdminRuleCollection,
};
exports.ruleName1 = {
    parameterPath: "ruleName",
    mapper: {
        serializedName: "ruleName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.adminRule = {
    parameterPath: "adminRule",
    mapper: mappers_js_1.BaseAdminRule,
};
exports.securityUserConfiguration = {
    parameterPath: "securityUserConfiguration",
    mapper: mappers_js_1.SecurityUserConfiguration,
};
exports.securityUserRuleCollection = {
    parameterPath: "securityUserRuleCollection",
    mapper: mappers_js_1.SecurityUserRuleCollection,
};
exports.securityUserRule = {
    parameterPath: "securityUserRule",
    mapper: mappers_js_1.SecurityUserRule,
};
exports.networkProfileName = {
    parameterPath: "networkProfileName",
    mapper: {
        serializedName: "networkProfileName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters42 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.NetworkProfile,
};
exports.networkSecurityGroupName = {
    parameterPath: "networkSecurityGroupName",
    mapper: {
        serializedName: "networkSecurityGroupName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters43 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.NetworkSecurityGroup,
};
exports.securityRuleName = {
    parameterPath: "securityRuleName",
    mapper: {
        serializedName: "securityRuleName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.securityRuleParameters = {
    parameterPath: "securityRuleParameters",
    mapper: mappers_js_1.SecurityRule,
};
exports.defaultSecurityRuleName = {
    parameterPath: "defaultSecurityRuleName",
    mapper: {
        serializedName: "defaultSecurityRuleName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.workspaceName = {
    parameterPath: "workspaceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[0-9a-zA-Z]([0-9a-zA-Z_.-]{0,62}[0-9a-zA-Z_])?$"),
        },
        serializedName: "workspaceName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.reachabilityAnalysisIntentName = {
    parameterPath: "reachabilityAnalysisIntentName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[0-9a-zA-Z]([0-9a-zA-Z_.-]{0,62}[0-9a-zA-Z_])?$"),
        },
        serializedName: "reachabilityAnalysisIntentName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.body3 = {
    parameterPath: "body",
    mapper: mappers_js_1.ReachabilityAnalysisIntent,
};
exports.reachabilityAnalysisRunName = {
    parameterPath: "reachabilityAnalysisRunName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[0-9a-zA-Z]([0-9a-zA-Z_.-]{0,62}[0-9a-zA-Z_])?$"),
        },
        serializedName: "reachabilityAnalysisRunName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.body4 = {
    parameterPath: "body",
    mapper: mappers_js_1.ReachabilityAnalysisRun,
};
exports.body5 = {
    parameterPath: "body",
    mapper: mappers_js_1.VerifierWorkspace,
};
exports.body6 = {
    parameterPath: ["options", "body"],
    mapper: mappers_js_1.VerifierWorkspaceUpdate,
};
exports.networkVirtualApplianceName = {
    parameterPath: "networkVirtualApplianceName",
    mapper: {
        serializedName: "networkVirtualApplianceName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters44 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.NetworkVirtualAppliance,
};
exports.networkVirtualApplianceInstanceIds = {
    parameterPath: ["options", "networkVirtualApplianceInstanceIds"],
    mapper: mappers_js_1.NetworkVirtualApplianceInstanceIds,
};
exports.siteName = {
    parameterPath: "siteName",
    mapper: {
        serializedName: "siteName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters45 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.VirtualApplianceSite,
};
exports.skuName = {
    parameterPath: "skuName",
    mapper: {
        serializedName: "skuName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters46 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.InboundSecurityRule,
};
exports.parameters47 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.NetworkWatcher,
};
exports.networkWatcherName = {
    parameterPath: "networkWatcherName",
    mapper: {
        serializedName: "networkWatcherName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters48 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.TopologyParameters,
};
exports.parameters49 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.VerificationIPFlowParameters,
};
exports.parameters50 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.NextHopParameters,
};
exports.parameters51 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.SecurityGroupViewParameters,
};
exports.parameters52 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.TroubleshootingParameters,
};
exports.parameters53 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.QueryTroubleshootingParameters,
};
exports.parameters54 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.FlowLogInformation,
};
exports.parameters55 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.FlowLogStatusParameters,
};
exports.parameters56 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.ConnectivityParameters,
};
exports.parameters57 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.AzureReachabilityReportParameters,
};
exports.parameters58 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.AvailableProvidersListParameters,
};
exports.parameters59 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.NetworkConfigurationDiagnosticParameters,
};
exports.parameters60 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.PacketCapture,
};
exports.packetCaptureName = {
    parameterPath: "packetCaptureName",
    mapper: {
        serializedName: "packetCaptureName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters61 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.ConnectionMonitor,
};
exports.connectionMonitorName = {
    parameterPath: "connectionMonitorName",
    mapper: {
        serializedName: "connectionMonitorName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.migrate = {
    parameterPath: ["options", "migrate"],
    mapper: {
        serializedName: "migrate",
        type: {
            name: "String",
        },
    },
};
exports.parameters62 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.FlowLog,
};
exports.flowLogName = {
    parameterPath: "flowLogName",
    mapper: {
        serializedName: "flowLogName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.privateEndpointName = {
    parameterPath: "privateEndpointName",
    mapper: {
        serializedName: "privateEndpointName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters63 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.PrivateEndpoint,
};
exports.privateDnsZoneGroupName = {
    parameterPath: "privateDnsZoneGroupName",
    mapper: {
        serializedName: "privateDnsZoneGroupName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters64 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.PrivateDnsZoneGroup,
};
exports.serviceName = {
    parameterPath: "serviceName",
    mapper: {
        serializedName: "serviceName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters65 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.PrivateLinkService,
};
exports.peConnectionName = {
    parameterPath: "peConnectionName",
    mapper: {
        serializedName: "peConnectionName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters66 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.PrivateEndpointConnection,
};
exports.parameters67 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.CheckPrivateLinkServiceVisibilityRequest,
};
exports.publicIpPrefixName = {
    parameterPath: "publicIpPrefixName",
    mapper: {
        serializedName: "publicIpPrefixName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters68 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.PublicIPPrefix,
};
exports.routeFilterName = {
    parameterPath: "routeFilterName",
    mapper: {
        serializedName: "routeFilterName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.routeFilterParameters = {
    parameterPath: "routeFilterParameters",
    mapper: mappers_js_1.RouteFilter,
};
exports.routeFilterRuleParameters = {
    parameterPath: "routeFilterRuleParameters",
    mapper: mappers_js_1.RouteFilterRule,
};
exports.routeTableName = {
    parameterPath: "routeTableName",
    mapper: {
        serializedName: "routeTableName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters69 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.RouteTable,
};
exports.routeName = {
    parameterPath: "routeName",
    mapper: {
        serializedName: "routeName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.routeParameters = {
    parameterPath: "routeParameters",
    mapper: mappers_js_1.Route,
};
exports.securityPartnerProviderName = {
    parameterPath: "securityPartnerProviderName",
    mapper: {
        serializedName: "securityPartnerProviderName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters70 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.SecurityPartnerProvider,
};
exports.serviceEndpointPolicyName = {
    parameterPath: "serviceEndpointPolicyName",
    mapper: {
        serializedName: "serviceEndpointPolicyName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters71 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.ServiceEndpointPolicy,
};
exports.serviceEndpointPolicyDefinitionName = {
    parameterPath: "serviceEndpointPolicyDefinitionName",
    mapper: {
        serializedName: "serviceEndpointPolicyDefinitionName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.serviceEndpointPolicyDefinitions = {
    parameterPath: "serviceEndpointPolicyDefinitions",
    mapper: mappers_js_1.ServiceEndpointPolicyDefinition,
};
exports.noAddressPrefixes = {
    parameterPath: ["options", "noAddressPrefixes"],
    mapper: {
        serializedName: "noAddressPrefixes",
        type: {
            name: "Boolean",
        },
    },
};
exports.tagName = {
    parameterPath: ["options", "tagName"],
    mapper: {
        serializedName: "tagName",
        type: {
            name: "String",
        },
    },
};
exports.location1 = {
    parameterPath: "location",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._ ]+$"),
        },
        serializedName: "location",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters72 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.VirtualNetwork,
};
exports.ipAddress = {
    parameterPath: "ipAddress",
    mapper: {
        serializedName: "ipAddress",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.top2 = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "top",
        type: {
            name: "Number",
        },
    },
};
exports.subnetName = {
    parameterPath: "subnetName",
    mapper: {
        serializedName: "subnetName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.subnetParameters = {
    parameterPath: "subnetParameters",
    mapper: mappers_js_1.Subnet,
};
exports.prepareNetworkPoliciesRequestParameters = {
    parameterPath: "prepareNetworkPoliciesRequestParameters",
    mapper: mappers_js_1.PrepareNetworkPoliciesRequest,
};
exports.unprepareNetworkPoliciesRequestParameters = {
    parameterPath: "unprepareNetworkPoliciesRequestParameters",
    mapper: mappers_js_1.UnprepareNetworkPoliciesRequest,
};
exports.virtualNetworkPeeringName = {
    parameterPath: "virtualNetworkPeeringName",
    mapper: {
        serializedName: "virtualNetworkPeeringName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.virtualNetworkPeeringParameters = {
    parameterPath: "virtualNetworkPeeringParameters",
    mapper: mappers_js_1.VirtualNetworkPeering,
};
exports.syncRemoteAddressSpace = {
    parameterPath: ["options", "syncRemoteAddressSpace"],
    mapper: {
        serializedName: "syncRemoteAddressSpace",
        type: {
            name: "String",
        },
    },
};
exports.parameters73 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.VirtualNetworkGateway,
};
exports.virtualNetworkGatewayName = {
    parameterPath: "virtualNetworkGatewayName",
    mapper: {
        serializedName: "virtualNetworkGatewayName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.gatewayVip = {
    parameterPath: ["options", "gatewayVip"],
    mapper: {
        serializedName: "gatewayVip",
        type: {
            name: "String",
        },
    },
};
exports.parameters74 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.VpnClientParameters,
};
exports.peer = {
    parameterPath: ["options", "peer"],
    mapper: {
        serializedName: "peer",
        type: {
            name: "String",
        },
    },
};
exports.peer1 = {
    parameterPath: "peer",
    mapper: {
        serializedName: "peer",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.vpnclientIpsecParams = {
    parameterPath: "vpnclientIpsecParams",
    mapper: mappers_js_1.VpnClientIPsecParameters,
};
exports.parameters75 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.VpnDeviceScriptParameters,
};
exports.virtualNetworkGatewayConnectionName = {
    parameterPath: "virtualNetworkGatewayConnectionName",
    mapper: {
        serializedName: "virtualNetworkGatewayConnectionName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters76 = {
    parameterPath: ["options", "parameters"],
    mapper: mappers_js_1.VpnPacketCaptureStartParameters,
};
exports.parameters77 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.VpnPacketCaptureStopParameters,
};
exports.typeParam = {
    parameterPath: "typeParam",
    mapper: {
        serializedName: "type",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.fetchLatest = {
    parameterPath: "fetchLatest",
    mapper: {
        serializedName: "fetchLatest",
        required: true,
        type: {
            name: "Boolean",
        },
    },
};
exports.peeringLocation = {
    parameterPath: "peeringLocation",
    mapper: {
        serializedName: "peeringLocation",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.failoverTestId = {
    parameterPath: "failoverTestId",
    mapper: {
        serializedName: "failoverTestId",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.stopParameters = {
    parameterPath: "stopParameters",
    mapper: mappers_js_1.ExpressRouteFailoverStopApiParameters,
};
exports.request1 = {
    parameterPath: "request",
    mapper: mappers_js_1.P2SVpnConnectionRequest,
};
exports.parameters78 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.VirtualNetworkGatewayConnection,
};
exports.parameters79 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.ConnectionSharedKey,
};
exports.parameters80 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.ConnectionResetSharedKey,
};
exports.parameters81 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.LocalNetworkGateway,
};
exports.localNetworkGatewayName = {
    parameterPath: "localNetworkGatewayName",
    mapper: {
        constraints: {
            MinLength: 1,
        },
        serializedName: "localNetworkGatewayName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.natRuleName = {
    parameterPath: "natRuleName",
    mapper: {
        serializedName: "natRuleName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.natRuleParameters = {
    parameterPath: "natRuleParameters",
    mapper: mappers_js_1.VirtualNetworkGatewayNatRule,
};
exports.tapName = {
    parameterPath: "tapName",
    mapper: {
        serializedName: "tapName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters82 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.VirtualNetworkTap,
};
exports.tapParameters = {
    parameterPath: "tapParameters",
    mapper: mappers_js_1.TagsObject,
};
exports.virtualRouterName = {
    parameterPath: "virtualRouterName",
    mapper: {
        serializedName: "virtualRouterName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters83 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.VirtualRouter,
};
exports.parameters84 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.VirtualRouterPeering,
};
exports.virtualWANName1 = {
    parameterPath: "virtualWANName",
    mapper: {
        serializedName: "VirtualWANName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.wANParameters = {
    parameterPath: "wANParameters",
    mapper: mappers_js_1.VirtualWAN,
};
exports.wANParameters1 = {
    parameterPath: "wANParameters",
    mapper: mappers_js_1.TagsObject,
};
exports.vpnSiteName = {
    parameterPath: "vpnSiteName",
    mapper: {
        serializedName: "vpnSiteName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.vpnSiteParameters = {
    parameterPath: "vpnSiteParameters",
    mapper: mappers_js_1.VpnSite,
};
exports.vpnSiteParameters1 = {
    parameterPath: "vpnSiteParameters",
    mapper: mappers_js_1.TagsObject,
};
exports.vpnSiteLinkName = {
    parameterPath: "vpnSiteLinkName",
    mapper: {
        serializedName: "vpnSiteLinkName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.request2 = {
    parameterPath: "request",
    mapper: mappers_js_1.GetVpnSitesConfigurationRequest,
};
exports.vpnServerConfigurationName = {
    parameterPath: "vpnServerConfigurationName",
    mapper: {
        serializedName: "vpnServerConfigurationName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.vpnServerConfigurationParameters = {
    parameterPath: "vpnServerConfigurationParameters",
    mapper: mappers_js_1.VpnServerConfiguration,
};
exports.vpnServerConfigurationParameters1 = {
    parameterPath: "vpnServerConfigurationParameters",
    mapper: mappers_js_1.TagsObject,
};
exports.vpnServerConfigurationPolicyGroupParameters = {
    parameterPath: "vpnServerConfigurationPolicyGroupParameters",
    mapper: mappers_js_1.VpnServerConfigurationPolicyGroup,
};
exports.configurationPolicyGroupName = {
    parameterPath: "configurationPolicyGroupName",
    mapper: {
        serializedName: "configurationPolicyGroupName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.virtualHubName = {
    parameterPath: "virtualHubName",
    mapper: {
        serializedName: "virtualHubName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.virtualHubParameters = {
    parameterPath: "virtualHubParameters",
    mapper: mappers_js_1.VirtualHub,
};
exports.virtualHubParameters1 = {
    parameterPath: "virtualHubParameters",
    mapper: mappers_js_1.TagsObject,
};
exports.effectiveRoutesParameters = {
    parameterPath: ["options", "effectiveRoutesParameters"],
    mapper: mappers_js_1.EffectiveRoutesParameters,
};
exports.getInboundRoutesParameters = {
    parameterPath: "getInboundRoutesParameters",
    mapper: mappers_js_1.GetInboundRoutesParameters,
};
exports.getOutboundRoutesParameters = {
    parameterPath: "getOutboundRoutesParameters",
    mapper: mappers_js_1.GetOutboundRoutesParameters,
};
exports.routeMapName = {
    parameterPath: "routeMapName",
    mapper: {
        serializedName: "routeMapName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.routeMapParameters = {
    parameterPath: "routeMapParameters",
    mapper: mappers_js_1.RouteMap,
};
exports.hubVirtualNetworkConnectionParameters = {
    parameterPath: "hubVirtualNetworkConnectionParameters",
    mapper: mappers_js_1.HubVirtualNetworkConnection,
};
exports.gatewayName = {
    parameterPath: "gatewayName",
    mapper: {
        serializedName: "gatewayName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.vpnGatewayParameters = {
    parameterPath: "vpnGatewayParameters",
    mapper: mappers_js_1.VpnGateway,
};
exports.vpnGatewayParameters1 = {
    parameterPath: "vpnGatewayParameters",
    mapper: mappers_js_1.TagsObject,
};
exports.ipConfigurationId = {
    parameterPath: ["options", "ipConfigurationId"],
    mapper: {
        serializedName: "ipConfigurationId",
        type: {
            name: "String",
        },
    },
};
exports.parameters85 = {
    parameterPath: ["options", "parameters"],
    mapper: mappers_js_1.VpnGatewayPacketCaptureStartParameters,
};
exports.parameters86 = {
    parameterPath: ["options", "parameters"],
    mapper: mappers_js_1.VpnGatewayPacketCaptureStopParameters,
};
exports.linkConnectionName = {
    parameterPath: "linkConnectionName",
    mapper: {
        serializedName: "linkConnectionName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.connectionSharedKeyParameters = {
    parameterPath: "connectionSharedKeyParameters",
    mapper: mappers_js_1.ConnectionSharedKeyResult,
};
exports.vpnConnectionParameters = {
    parameterPath: "vpnConnectionParameters",
    mapper: mappers_js_1.VpnConnection,
};
exports.parameters87 = {
    parameterPath: ["options", "parameters"],
    mapper: mappers_js_1.VpnConnectionPacketCaptureStartParameters,
};
exports.vpnConnectionName = {
    parameterPath: "vpnConnectionName",
    mapper: {
        serializedName: "vpnConnectionName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters88 = {
    parameterPath: ["options", "parameters"],
    mapper: mappers_js_1.VpnConnectionPacketCaptureStopParameters,
};
exports.natRuleParameters1 = {
    parameterPath: "natRuleParameters",
    mapper: mappers_js_1.VpnGatewayNatRule,
};
exports.p2SVpnGatewayParameters = {
    parameterPath: "p2SVpnGatewayParameters",
    mapper: mappers_js_1.P2SVpnGateway,
};
exports.p2SVpnGatewayParameters1 = {
    parameterPath: "p2SVpnGatewayParameters",
    mapper: mappers_js_1.TagsObject,
};
exports.parameters89 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.P2SVpnProfileParameters,
};
exports.request3 = {
    parameterPath: "request",
    mapper: mappers_js_1.P2SVpnConnectionHealthRequest,
};
exports.p2SVpnGatewayName = {
    parameterPath: "p2SVpnGatewayName",
    mapper: {
        serializedName: "p2sVpnGatewayName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.virtualHubRouteTableV2Parameters = {
    parameterPath: "virtualHubRouteTableV2Parameters",
    mapper: mappers_js_1.VirtualHubRouteTableV2,
};
exports.putExpressRouteGatewayParameters = {
    parameterPath: "putExpressRouteGatewayParameters",
    mapper: mappers_js_1.ExpressRouteGateway,
};
exports.expressRouteGatewayName = {
    parameterPath: "expressRouteGatewayName",
    mapper: {
        serializedName: "expressRouteGatewayName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.expressRouteGatewayParameters = {
    parameterPath: "expressRouteGatewayParameters",
    mapper: mappers_js_1.TagsObject,
};
exports.putExpressRouteConnectionParameters = {
    parameterPath: "putExpressRouteConnectionParameters",
    mapper: mappers_js_1.ExpressRouteConnection,
};
exports.networkVirtualApplianceConnectionParameters = {
    parameterPath: "networkVirtualApplianceConnectionParameters",
    mapper: mappers_js_1.NetworkVirtualApplianceConnection,
};
exports.networkVirtualApplianceName1 = {
    parameterPath: "networkVirtualApplianceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9_]+"),
        },
        serializedName: "networkVirtualApplianceName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.connectionName1 = {
    parameterPath: "connectionName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9_]+"),
        },
        serializedName: "connectionName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters90 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.BgpConnection,
};
exports.hubName = {
    parameterPath: "hubName",
    mapper: {
        serializedName: "hubName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.ipConfigName = {
    parameterPath: "ipConfigName",
    mapper: {
        serializedName: "ipConfigName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters91 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.HubIpConfiguration,
};
exports.routeTableParameters = {
    parameterPath: "routeTableParameters",
    mapper: mappers_js_1.HubRouteTable,
};
exports.routingIntentParameters = {
    parameterPath: "routingIntentParameters",
    mapper: mappers_js_1.RoutingIntent,
};
exports.routingIntentName = {
    parameterPath: "routingIntentName",
    mapper: {
        serializedName: "routingIntentName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.policyName = {
    parameterPath: "policyName",
    mapper: {
        constraints: {
            MaxLength: 128,
        },
        serializedName: "policyName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters92 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.WebApplicationFirewallPolicy,
};
//# sourceMappingURL=parameters.js.map