{"version":3,"file":"expressRouteCircuitAuthorizations.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/expressRouteCircuitAuthorizations.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  ExpressRouteCircuitAuthorization,\n  ExpressRouteCircuitAuthorizationsListOptionalParams,\n  ExpressRouteCircuitAuthorizationsDeleteOptionalParams,\n  ExpressRouteCircuitAuthorizationsGetOptionalParams,\n  ExpressRouteCircuitAuthorizationsGetResponse,\n  ExpressRouteCircuitAuthorizationsCreateOrUpdateOptionalParams,\n  ExpressRouteCircuitAuthorizationsCreateOrUpdateResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a ExpressRouteCircuitAuthorizations. */\nexport interface ExpressRouteCircuitAuthorizations {\n  /**\n   * Gets all authorizations in an express route circuit.\n   * @param resourceGroupName The name of the resource group.\n   * @param circuitName The name of the circuit.\n   * @param options The options parameters.\n   */\n  list(\n    resourceGroupName: string,\n    circuitName: string,\n    options?: ExpressRouteCircuitAuthorizationsListOptionalParams,\n  ): PagedAsyncIterableIterator<ExpressRouteCircuitAuthorization>;\n  /**\n   * Deletes the specified authorization from the specified express route circuit.\n   * @param resourceGroupName The name of the resource group.\n   * @param circuitName The name of the express route circuit.\n   * @param authorizationName The name of the authorization.\n   * @param options The options parameters.\n   */\n  beginDelete(\n    resourceGroupName: string,\n    circuitName: string,\n    authorizationName: string,\n    options?: ExpressRouteCircuitAuthorizationsDeleteOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Deletes the specified authorization from the specified express route circuit.\n   * @param resourceGroupName The name of the resource group.\n   * @param circuitName The name of the express route circuit.\n   * @param authorizationName The name of the authorization.\n   * @param options The options parameters.\n   */\n  beginDeleteAndWait(\n    resourceGroupName: string,\n    circuitName: string,\n    authorizationName: string,\n    options?: ExpressRouteCircuitAuthorizationsDeleteOptionalParams,\n  ): Promise<void>;\n  /**\n   * Gets the specified authorization from the specified express route circuit.\n   * @param resourceGroupName The name of the resource group.\n   * @param circuitName The name of the express route circuit.\n   * @param authorizationName The name of the authorization.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    circuitName: string,\n    authorizationName: string,\n    options?: ExpressRouteCircuitAuthorizationsGetOptionalParams,\n  ): Promise<ExpressRouteCircuitAuthorizationsGetResponse>;\n  /**\n   * Creates or updates an authorization in the specified express route circuit.\n   * @param resourceGroupName The name of the resource group.\n   * @param circuitName The name of the express route circuit.\n   * @param authorizationName The name of the authorization.\n   * @param authorizationParameters Parameters supplied to the create or update express route circuit\n   *                                authorization operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdate(\n    resourceGroupName: string,\n    circuitName: string,\n    authorizationName: string,\n    authorizationParameters: ExpressRouteCircuitAuthorization,\n    options?: ExpressRouteCircuitAuthorizationsCreateOrUpdateOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ExpressRouteCircuitAuthorizationsCreateOrUpdateResponse>,\n      ExpressRouteCircuitAuthorizationsCreateOrUpdateResponse\n    >\n  >;\n  /**\n   * Creates or updates an authorization in the specified express route circuit.\n   * @param resourceGroupName The name of the resource group.\n   * @param circuitName The name of the express route circuit.\n   * @param authorizationName The name of the authorization.\n   * @param authorizationParameters Parameters supplied to the create or update express route circuit\n   *                                authorization operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    circuitName: string,\n    authorizationName: string,\n    authorizationParameters: ExpressRouteCircuitAuthorization,\n    options?: ExpressRouteCircuitAuthorizationsCreateOrUpdateOptionalParams,\n  ): Promise<ExpressRouteCircuitAuthorizationsCreateOrUpdateResponse>;\n}\n"]}