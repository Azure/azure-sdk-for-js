{"version":3,"file":"networkWatchers.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/networkWatchers.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  NetworkWatcher,\n  NetworkWatchersListOptionalParams,\n  NetworkWatchersListAllOptionalParams,\n  NetworkWatchersCreateOrUpdateOptionalParams,\n  NetworkWatchersCreateOrUpdateResponse,\n  NetworkWatchersGetOptionalParams,\n  NetworkWatchersGetResponse,\n  NetworkWatchersDeleteOptionalParams,\n  TagsObject,\n  NetworkWatchersUpdateTagsOptionalParams,\n  NetworkWatchersUpdateTagsResponse,\n  TopologyParameters,\n  NetworkWatchersGetTopologyOptionalParams,\n  NetworkWatchersGetTopologyResponse,\n  VerificationIPFlowParameters,\n  NetworkWatchersVerifyIPFlowOptionalParams,\n  NetworkWatchersVerifyIPFlowResponse,\n  NextHopParameters,\n  NetworkWatchersGetNextHopOptionalParams,\n  NetworkWatchersGetNextHopResponse,\n  SecurityGroupViewParameters,\n  NetworkWatchersGetVMSecurityRulesOptionalParams,\n  NetworkWatchersGetVMSecurityRulesResponse,\n  TroubleshootingParameters,\n  NetworkWatchersGetTroubleshootingOptionalParams,\n  NetworkWatchersGetTroubleshootingResponse,\n  QueryTroubleshootingParameters,\n  NetworkWatchersGetTroubleshootingResultOptionalParams,\n  NetworkWatchersGetTroubleshootingResultResponse,\n  FlowLogInformation,\n  NetworkWatchersSetFlowLogConfigurationOptionalParams,\n  NetworkWatchersSetFlowLogConfigurationResponse,\n  FlowLogStatusParameters,\n  NetworkWatchersGetFlowLogStatusOptionalParams,\n  NetworkWatchersGetFlowLogStatusResponse,\n  ConnectivityParameters,\n  NetworkWatchersCheckConnectivityOptionalParams,\n  NetworkWatchersCheckConnectivityResponse,\n  AzureReachabilityReportParameters,\n  NetworkWatchersGetAzureReachabilityReportOptionalParams,\n  NetworkWatchersGetAzureReachabilityReportResponse,\n  AvailableProvidersListParameters,\n  NetworkWatchersListAvailableProvidersOptionalParams,\n  NetworkWatchersListAvailableProvidersResponse,\n  NetworkConfigurationDiagnosticParameters,\n  NetworkWatchersGetNetworkConfigurationDiagnosticOptionalParams,\n  NetworkWatchersGetNetworkConfigurationDiagnosticResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a NetworkWatchers. */\nexport interface NetworkWatchers {\n  /**\n   * Gets all network watchers by resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param options The options parameters.\n   */\n  list(\n    resourceGroupName: string,\n    options?: NetworkWatchersListOptionalParams,\n  ): PagedAsyncIterableIterator<NetworkWatcher>;\n  /**\n   * Gets all network watchers by subscription.\n   * @param options The options parameters.\n   */\n  listAll(\n    options?: NetworkWatchersListAllOptionalParams,\n  ): PagedAsyncIterableIterator<NetworkWatcher>;\n  /**\n   * Creates or updates a network watcher in the specified resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkWatcherName The name of the network watcher.\n   * @param parameters Parameters that define the network watcher resource.\n   * @param options The options parameters.\n   */\n  createOrUpdate(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    parameters: NetworkWatcher,\n    options?: NetworkWatchersCreateOrUpdateOptionalParams,\n  ): Promise<NetworkWatchersCreateOrUpdateResponse>;\n  /**\n   * Gets the specified network watcher by resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkWatcherName The name of the network watcher.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    options?: NetworkWatchersGetOptionalParams,\n  ): Promise<NetworkWatchersGetResponse>;\n  /**\n   * Deletes the specified network watcher resource.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkWatcherName The name of the network watcher.\n   * @param options The options parameters.\n   */\n  beginDelete(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    options?: NetworkWatchersDeleteOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Deletes the specified network watcher resource.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkWatcherName The name of the network watcher.\n   * @param options The options parameters.\n   */\n  beginDeleteAndWait(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    options?: NetworkWatchersDeleteOptionalParams,\n  ): Promise<void>;\n  /**\n   * Updates a network watcher tags.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkWatcherName The name of the network watcher.\n   * @param parameters Parameters supplied to update network watcher tags.\n   * @param options The options parameters.\n   */\n  updateTags(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    parameters: TagsObject,\n    options?: NetworkWatchersUpdateTagsOptionalParams,\n  ): Promise<NetworkWatchersUpdateTagsResponse>;\n  /**\n   * Gets the current network topology by resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkWatcherName The name of the network watcher.\n   * @param parameters Parameters that define the representation of topology.\n   * @param options The options parameters.\n   */\n  getTopology(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    parameters: TopologyParameters,\n    options?: NetworkWatchersGetTopologyOptionalParams,\n  ): Promise<NetworkWatchersGetTopologyResponse>;\n  /**\n   * Verify IP flow from the specified VM to a location given the currently configured NSG rules.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkWatcherName The name of the network watcher.\n   * @param parameters Parameters that define the IP flow to be verified.\n   * @param options The options parameters.\n   */\n  beginVerifyIPFlow(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    parameters: VerificationIPFlowParameters,\n    options?: NetworkWatchersVerifyIPFlowOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<NetworkWatchersVerifyIPFlowResponse>,\n      NetworkWatchersVerifyIPFlowResponse\n    >\n  >;\n  /**\n   * Verify IP flow from the specified VM to a location given the currently configured NSG rules.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkWatcherName The name of the network watcher.\n   * @param parameters Parameters that define the IP flow to be verified.\n   * @param options The options parameters.\n   */\n  beginVerifyIPFlowAndWait(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    parameters: VerificationIPFlowParameters,\n    options?: NetworkWatchersVerifyIPFlowOptionalParams,\n  ): Promise<NetworkWatchersVerifyIPFlowResponse>;\n  /**\n   * Gets the next hop from the specified VM.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkWatcherName The name of the network watcher.\n   * @param parameters Parameters that define the source and destination endpoint.\n   * @param options The options parameters.\n   */\n  beginGetNextHop(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    parameters: NextHopParameters,\n    options?: NetworkWatchersGetNextHopOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<NetworkWatchersGetNextHopResponse>,\n      NetworkWatchersGetNextHopResponse\n    >\n  >;\n  /**\n   * Gets the next hop from the specified VM.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkWatcherName The name of the network watcher.\n   * @param parameters Parameters that define the source and destination endpoint.\n   * @param options The options parameters.\n   */\n  beginGetNextHopAndWait(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    parameters: NextHopParameters,\n    options?: NetworkWatchersGetNextHopOptionalParams,\n  ): Promise<NetworkWatchersGetNextHopResponse>;\n  /**\n   * Gets the configured and effective security group rules on the specified VM.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkWatcherName The name of the network watcher.\n   * @param parameters Parameters that define the VM to check security groups for.\n   * @param options The options parameters.\n   */\n  beginGetVMSecurityRules(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    parameters: SecurityGroupViewParameters,\n    options?: NetworkWatchersGetVMSecurityRulesOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<NetworkWatchersGetVMSecurityRulesResponse>,\n      NetworkWatchersGetVMSecurityRulesResponse\n    >\n  >;\n  /**\n   * Gets the configured and effective security group rules on the specified VM.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkWatcherName The name of the network watcher.\n   * @param parameters Parameters that define the VM to check security groups for.\n   * @param options The options parameters.\n   */\n  beginGetVMSecurityRulesAndWait(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    parameters: SecurityGroupViewParameters,\n    options?: NetworkWatchersGetVMSecurityRulesOptionalParams,\n  ): Promise<NetworkWatchersGetVMSecurityRulesResponse>;\n  /**\n   * Initiate troubleshooting on a specified resource.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkWatcherName The name of the network watcher resource.\n   * @param parameters Parameters that define the resource to troubleshoot.\n   * @param options The options parameters.\n   */\n  beginGetTroubleshooting(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    parameters: TroubleshootingParameters,\n    options?: NetworkWatchersGetTroubleshootingOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<NetworkWatchersGetTroubleshootingResponse>,\n      NetworkWatchersGetTroubleshootingResponse\n    >\n  >;\n  /**\n   * Initiate troubleshooting on a specified resource.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkWatcherName The name of the network watcher resource.\n   * @param parameters Parameters that define the resource to troubleshoot.\n   * @param options The options parameters.\n   */\n  beginGetTroubleshootingAndWait(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    parameters: TroubleshootingParameters,\n    options?: NetworkWatchersGetTroubleshootingOptionalParams,\n  ): Promise<NetworkWatchersGetTroubleshootingResponse>;\n  /**\n   * Get the last completed troubleshooting result on a specified resource.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkWatcherName The name of the network watcher resource.\n   * @param parameters Parameters that define the resource to query the troubleshooting result.\n   * @param options The options parameters.\n   */\n  beginGetTroubleshootingResult(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    parameters: QueryTroubleshootingParameters,\n    options?: NetworkWatchersGetTroubleshootingResultOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<NetworkWatchersGetTroubleshootingResultResponse>,\n      NetworkWatchersGetTroubleshootingResultResponse\n    >\n  >;\n  /**\n   * Get the last completed troubleshooting result on a specified resource.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkWatcherName The name of the network watcher resource.\n   * @param parameters Parameters that define the resource to query the troubleshooting result.\n   * @param options The options parameters.\n   */\n  beginGetTroubleshootingResultAndWait(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    parameters: QueryTroubleshootingParameters,\n    options?: NetworkWatchersGetTroubleshootingResultOptionalParams,\n  ): Promise<NetworkWatchersGetTroubleshootingResultResponse>;\n  /**\n   * Configures flow log and traffic analytics (optional) on a specified resource.\n   * @param resourceGroupName The name of the network watcher resource group.\n   * @param networkWatcherName The name of the network watcher resource.\n   * @param parameters Parameters that define the configuration of flow log.\n   * @param options The options parameters.\n   */\n  beginSetFlowLogConfiguration(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    parameters: FlowLogInformation,\n    options?: NetworkWatchersSetFlowLogConfigurationOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<NetworkWatchersSetFlowLogConfigurationResponse>,\n      NetworkWatchersSetFlowLogConfigurationResponse\n    >\n  >;\n  /**\n   * Configures flow log and traffic analytics (optional) on a specified resource.\n   * @param resourceGroupName The name of the network watcher resource group.\n   * @param networkWatcherName The name of the network watcher resource.\n   * @param parameters Parameters that define the configuration of flow log.\n   * @param options The options parameters.\n   */\n  beginSetFlowLogConfigurationAndWait(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    parameters: FlowLogInformation,\n    options?: NetworkWatchersSetFlowLogConfigurationOptionalParams,\n  ): Promise<NetworkWatchersSetFlowLogConfigurationResponse>;\n  /**\n   * Queries status of flow log and traffic analytics (optional) on a specified resource.\n   * @param resourceGroupName The name of the network watcher resource group.\n   * @param networkWatcherName The name of the network watcher resource.\n   * @param parameters Parameters that define a resource to query flow log and traffic analytics\n   *                   (optional) status.\n   * @param options The options parameters.\n   */\n  beginGetFlowLogStatus(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    parameters: FlowLogStatusParameters,\n    options?: NetworkWatchersGetFlowLogStatusOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<NetworkWatchersGetFlowLogStatusResponse>,\n      NetworkWatchersGetFlowLogStatusResponse\n    >\n  >;\n  /**\n   * Queries status of flow log and traffic analytics (optional) on a specified resource.\n   * @param resourceGroupName The name of the network watcher resource group.\n   * @param networkWatcherName The name of the network watcher resource.\n   * @param parameters Parameters that define a resource to query flow log and traffic analytics\n   *                   (optional) status.\n   * @param options The options parameters.\n   */\n  beginGetFlowLogStatusAndWait(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    parameters: FlowLogStatusParameters,\n    options?: NetworkWatchersGetFlowLogStatusOptionalParams,\n  ): Promise<NetworkWatchersGetFlowLogStatusResponse>;\n  /**\n   * Verifies the possibility of establishing a direct TCP connection from a virtual machine to a given\n   * endpoint including another VM or an arbitrary remote server.\n   * @param resourceGroupName The name of the network watcher resource group.\n   * @param networkWatcherName The name of the network watcher resource.\n   * @param parameters Parameters that determine how the connectivity check will be performed.\n   * @param options The options parameters.\n   */\n  beginCheckConnectivity(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    parameters: ConnectivityParameters,\n    options?: NetworkWatchersCheckConnectivityOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<NetworkWatchersCheckConnectivityResponse>,\n      NetworkWatchersCheckConnectivityResponse\n    >\n  >;\n  /**\n   * Verifies the possibility of establishing a direct TCP connection from a virtual machine to a given\n   * endpoint including another VM or an arbitrary remote server.\n   * @param resourceGroupName The name of the network watcher resource group.\n   * @param networkWatcherName The name of the network watcher resource.\n   * @param parameters Parameters that determine how the connectivity check will be performed.\n   * @param options The options parameters.\n   */\n  beginCheckConnectivityAndWait(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    parameters: ConnectivityParameters,\n    options?: NetworkWatchersCheckConnectivityOptionalParams,\n  ): Promise<NetworkWatchersCheckConnectivityResponse>;\n  /**\n   * NOTE: This feature is currently in preview and still being tested for stability. Gets the relative\n   * latency score for internet service providers from a specified location to Azure regions.\n   * @param resourceGroupName The name of the network watcher resource group.\n   * @param networkWatcherName The name of the network watcher resource.\n   * @param parameters Parameters that determine Azure reachability report configuration.\n   * @param options The options parameters.\n   */\n  beginGetAzureReachabilityReport(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    parameters: AzureReachabilityReportParameters,\n    options?: NetworkWatchersGetAzureReachabilityReportOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<NetworkWatchersGetAzureReachabilityReportResponse>,\n      NetworkWatchersGetAzureReachabilityReportResponse\n    >\n  >;\n  /**\n   * NOTE: This feature is currently in preview and still being tested for stability. Gets the relative\n   * latency score for internet service providers from a specified location to Azure regions.\n   * @param resourceGroupName The name of the network watcher resource group.\n   * @param networkWatcherName The name of the network watcher resource.\n   * @param parameters Parameters that determine Azure reachability report configuration.\n   * @param options The options parameters.\n   */\n  beginGetAzureReachabilityReportAndWait(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    parameters: AzureReachabilityReportParameters,\n    options?: NetworkWatchersGetAzureReachabilityReportOptionalParams,\n  ): Promise<NetworkWatchersGetAzureReachabilityReportResponse>;\n  /**\n   * NOTE: This feature is currently in preview and still being tested for stability. Lists all available\n   * internet service providers for a specified Azure region.\n   * @param resourceGroupName The name of the network watcher resource group.\n   * @param networkWatcherName The name of the network watcher resource.\n   * @param parameters Parameters that scope the list of available providers.\n   * @param options The options parameters.\n   */\n  beginListAvailableProviders(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    parameters: AvailableProvidersListParameters,\n    options?: NetworkWatchersListAvailableProvidersOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<NetworkWatchersListAvailableProvidersResponse>,\n      NetworkWatchersListAvailableProvidersResponse\n    >\n  >;\n  /**\n   * NOTE: This feature is currently in preview and still being tested for stability. Lists all available\n   * internet service providers for a specified Azure region.\n   * @param resourceGroupName The name of the network watcher resource group.\n   * @param networkWatcherName The name of the network watcher resource.\n   * @param parameters Parameters that scope the list of available providers.\n   * @param options The options parameters.\n   */\n  beginListAvailableProvidersAndWait(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    parameters: AvailableProvidersListParameters,\n    options?: NetworkWatchersListAvailableProvidersOptionalParams,\n  ): Promise<NetworkWatchersListAvailableProvidersResponse>;\n  /**\n   * Gets Network Configuration Diagnostic data to help customers understand and debug network behavior.\n   * It provides detailed information on what security rules were applied to a specified traffic flow and\n   * the result of evaluating these rules. Customers must provide details of a flow like source,\n   * destination, protocol, etc. The API returns whether traffic was allowed or denied, the rules\n   * evaluated for the specified flow and the evaluation results.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkWatcherName The name of the network watcher.\n   * @param parameters Parameters to get network configuration diagnostic.\n   * @param options The options parameters.\n   */\n  beginGetNetworkConfigurationDiagnostic(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    parameters: NetworkConfigurationDiagnosticParameters,\n    options?: NetworkWatchersGetNetworkConfigurationDiagnosticOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<NetworkWatchersGetNetworkConfigurationDiagnosticResponse>,\n      NetworkWatchersGetNetworkConfigurationDiagnosticResponse\n    >\n  >;\n  /**\n   * Gets Network Configuration Diagnostic data to help customers understand and debug network behavior.\n   * It provides detailed information on what security rules were applied to a specified traffic flow and\n   * the result of evaluating these rules. Customers must provide details of a flow like source,\n   * destination, protocol, etc. The API returns whether traffic was allowed or denied, the rules\n   * evaluated for the specified flow and the evaluation results.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkWatcherName The name of the network watcher.\n   * @param parameters Parameters to get network configuration diagnostic.\n   * @param options The options parameters.\n   */\n  beginGetNetworkConfigurationDiagnosticAndWait(\n    resourceGroupName: string,\n    networkWatcherName: string,\n    parameters: NetworkConfigurationDiagnosticParameters,\n    options?: NetworkWatchersGetNetworkConfigurationDiagnosticOptionalParams,\n  ): Promise<NetworkWatchersGetNetworkConfigurationDiagnosticResponse>;\n}\n"]}