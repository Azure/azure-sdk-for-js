{"version":3,"file":"loadBalancerBackendAddressPools.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/loadBalancerBackendAddressPools.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  BackendAddressPool,\n  LoadBalancerBackendAddressPoolsListOptionalParams,\n  LoadBalancerBackendAddressPoolsGetOptionalParams,\n  LoadBalancerBackendAddressPoolsGetResponse,\n  LoadBalancerBackendAddressPoolsCreateOrUpdateOptionalParams,\n  LoadBalancerBackendAddressPoolsCreateOrUpdateResponse,\n  LoadBalancerBackendAddressPoolsDeleteOptionalParams,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a LoadBalancerBackendAddressPools. */\nexport interface LoadBalancerBackendAddressPools {\n  /**\n   * Gets all the load balancer backed address pools.\n   * @param resourceGroupName The name of the resource group.\n   * @param loadBalancerName The name of the load balancer.\n   * @param options The options parameters.\n   */\n  list(\n    resourceGroupName: string,\n    loadBalancerName: string,\n    options?: LoadBalancerBackendAddressPoolsListOptionalParams,\n  ): PagedAsyncIterableIterator<BackendAddressPool>;\n  /**\n   * Gets load balancer backend address pool.\n   * @param resourceGroupName The name of the resource group.\n   * @param loadBalancerName The name of the load balancer.\n   * @param backendAddressPoolName The name of the backend address pool.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    loadBalancerName: string,\n    backendAddressPoolName: string,\n    options?: LoadBalancerBackendAddressPoolsGetOptionalParams,\n  ): Promise<LoadBalancerBackendAddressPoolsGetResponse>;\n  /**\n   * Creates or updates a load balancer backend address pool.\n   * @param resourceGroupName The name of the resource group.\n   * @param loadBalancerName The name of the load balancer.\n   * @param backendAddressPoolName The name of the backend address pool.\n   * @param parameters Parameters supplied to the create or update load balancer backend address pool\n   *                   operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdate(\n    resourceGroupName: string,\n    loadBalancerName: string,\n    backendAddressPoolName: string,\n    parameters: BackendAddressPool,\n    options?: LoadBalancerBackendAddressPoolsCreateOrUpdateOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<LoadBalancerBackendAddressPoolsCreateOrUpdateResponse>,\n      LoadBalancerBackendAddressPoolsCreateOrUpdateResponse\n    >\n  >;\n  /**\n   * Creates or updates a load balancer backend address pool.\n   * @param resourceGroupName The name of the resource group.\n   * @param loadBalancerName The name of the load balancer.\n   * @param backendAddressPoolName The name of the backend address pool.\n   * @param parameters Parameters supplied to the create or update load balancer backend address pool\n   *                   operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    loadBalancerName: string,\n    backendAddressPoolName: string,\n    parameters: BackendAddressPool,\n    options?: LoadBalancerBackendAddressPoolsCreateOrUpdateOptionalParams,\n  ): Promise<LoadBalancerBackendAddressPoolsCreateOrUpdateResponse>;\n  /**\n   * Deletes the specified load balancer backend address pool.\n   * @param resourceGroupName The name of the resource group.\n   * @param loadBalancerName The name of the load balancer.\n   * @param backendAddressPoolName The name of the backend address pool.\n   * @param options The options parameters.\n   */\n  beginDelete(\n    resourceGroupName: string,\n    loadBalancerName: string,\n    backendAddressPoolName: string,\n    options?: LoadBalancerBackendAddressPoolsDeleteOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Deletes the specified load balancer backend address pool.\n   * @param resourceGroupName The name of the resource group.\n   * @param loadBalancerName The name of the load balancer.\n   * @param backendAddressPoolName The name of the backend address pool.\n   * @param options The options parameters.\n   */\n  beginDeleteAndWait(\n    resourceGroupName: string,\n    loadBalancerName: string,\n    backendAddressPoolName: string,\n    options?: LoadBalancerBackendAddressPoolsDeleteOptionalParams,\n  ): Promise<void>;\n}\n"]}