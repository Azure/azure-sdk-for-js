{"version":3,"file":"expressRoutePortAuthorizations.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/expressRoutePortAuthorizations.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  ExpressRoutePortAuthorization,\n  ExpressRoutePortAuthorizationsListOptionalParams,\n  ExpressRoutePortAuthorizationsDeleteOptionalParams,\n  ExpressRoutePortAuthorizationsGetOptionalParams,\n  ExpressRoutePortAuthorizationsGetResponse,\n  ExpressRoutePortAuthorizationsCreateOrUpdateOptionalParams,\n  ExpressRoutePortAuthorizationsCreateOrUpdateResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a ExpressRoutePortAuthorizations. */\nexport interface ExpressRoutePortAuthorizations {\n  /**\n   * Gets all authorizations in an express route port.\n   * @param resourceGroupName The name of the resource group.\n   * @param expressRoutePortName The name of the express route port.\n   * @param options The options parameters.\n   */\n  list(\n    resourceGroupName: string,\n    expressRoutePortName: string,\n    options?: ExpressRoutePortAuthorizationsListOptionalParams,\n  ): PagedAsyncIterableIterator<ExpressRoutePortAuthorization>;\n  /**\n   * Deletes the specified authorization from the specified express route port.\n   * @param resourceGroupName The name of the resource group.\n   * @param expressRoutePortName The name of the express route port.\n   * @param authorizationName The name of the authorization.\n   * @param options The options parameters.\n   */\n  beginDelete(\n    resourceGroupName: string,\n    expressRoutePortName: string,\n    authorizationName: string,\n    options?: ExpressRoutePortAuthorizationsDeleteOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Deletes the specified authorization from the specified express route port.\n   * @param resourceGroupName The name of the resource group.\n   * @param expressRoutePortName The name of the express route port.\n   * @param authorizationName The name of the authorization.\n   * @param options The options parameters.\n   */\n  beginDeleteAndWait(\n    resourceGroupName: string,\n    expressRoutePortName: string,\n    authorizationName: string,\n    options?: ExpressRoutePortAuthorizationsDeleteOptionalParams,\n  ): Promise<void>;\n  /**\n   * Gets the specified authorization from the specified express route port.\n   * @param resourceGroupName The name of the resource group.\n   * @param expressRoutePortName The name of the express route port.\n   * @param authorizationName The name of the authorization.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    expressRoutePortName: string,\n    authorizationName: string,\n    options?: ExpressRoutePortAuthorizationsGetOptionalParams,\n  ): Promise<ExpressRoutePortAuthorizationsGetResponse>;\n  /**\n   * Creates or updates an authorization in the specified express route port.\n   * @param resourceGroupName The name of the resource group.\n   * @param expressRoutePortName The name of the express route port.\n   * @param authorizationName The name of the authorization.\n   * @param authorizationParameters Parameters supplied to the create or update express route port\n   *                                authorization operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdate(\n    resourceGroupName: string,\n    expressRoutePortName: string,\n    authorizationName: string,\n    authorizationParameters: ExpressRoutePortAuthorization,\n    options?: ExpressRoutePortAuthorizationsCreateOrUpdateOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ExpressRoutePortAuthorizationsCreateOrUpdateResponse>,\n      ExpressRoutePortAuthorizationsCreateOrUpdateResponse\n    >\n  >;\n  /**\n   * Creates or updates an authorization in the specified express route port.\n   * @param resourceGroupName The name of the resource group.\n   * @param expressRoutePortName The name of the express route port.\n   * @param authorizationName The name of the authorization.\n   * @param authorizationParameters Parameters supplied to the create or update express route port\n   *                                authorization operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    expressRoutePortName: string,\n    authorizationName: string,\n    authorizationParameters: ExpressRoutePortAuthorization,\n    options?: ExpressRoutePortAuthorizationsCreateOrUpdateOptionalParams,\n  ): Promise<ExpressRoutePortAuthorizationsCreateOrUpdateResponse>;\n}\n"]}