{"version":3,"file":"applicationGateways.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/applicationGateways.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  ApplicationGateway,\n  ApplicationGatewaysListOptionalParams,\n  ApplicationGatewaysListAllOptionalParams,\n  ApplicationGatewaySslPredefinedPolicy,\n  ApplicationGatewaysListAvailableSslPredefinedPoliciesOptionalParams,\n  ApplicationGatewaysDeleteOptionalParams,\n  ApplicationGatewaysGetOptionalParams,\n  ApplicationGatewaysGetResponse,\n  ApplicationGatewaysCreateOrUpdateOptionalParams,\n  ApplicationGatewaysCreateOrUpdateResponse,\n  TagsObject,\n  ApplicationGatewaysUpdateTagsOptionalParams,\n  ApplicationGatewaysUpdateTagsResponse,\n  ApplicationGatewaysStartOptionalParams,\n  ApplicationGatewaysStopOptionalParams,\n  ApplicationGatewaysBackendHealthOptionalParams,\n  ApplicationGatewaysBackendHealthResponse,\n  ApplicationGatewayOnDemandProbe,\n  ApplicationGatewaysBackendHealthOnDemandOptionalParams,\n  ApplicationGatewaysBackendHealthOnDemandResponse,\n  ApplicationGatewaysListAvailableServerVariablesOptionalParams,\n  ApplicationGatewaysListAvailableServerVariablesResponse,\n  ApplicationGatewaysListAvailableRequestHeadersOptionalParams,\n  ApplicationGatewaysListAvailableRequestHeadersResponse,\n  ApplicationGatewaysListAvailableResponseHeadersOptionalParams,\n  ApplicationGatewaysListAvailableResponseHeadersResponse,\n  ApplicationGatewaysListAvailableWafRuleSetsOptionalParams,\n  ApplicationGatewaysListAvailableWafRuleSetsResponse,\n  ApplicationGatewaysListAvailableSslOptionsOptionalParams,\n  ApplicationGatewaysListAvailableSslOptionsResponse,\n  ApplicationGatewaysGetSslPredefinedPolicyOptionalParams,\n  ApplicationGatewaysGetSslPredefinedPolicyResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a ApplicationGateways. */\nexport interface ApplicationGateways {\n  /**\n   * Lists all application gateways in a resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param options The options parameters.\n   */\n  list(\n    resourceGroupName: string,\n    options?: ApplicationGatewaysListOptionalParams,\n  ): PagedAsyncIterableIterator<ApplicationGateway>;\n  /**\n   * Gets all the application gateways in a subscription.\n   * @param options The options parameters.\n   */\n  listAll(\n    options?: ApplicationGatewaysListAllOptionalParams,\n  ): PagedAsyncIterableIterator<ApplicationGateway>;\n  /**\n   * Lists all SSL predefined policies for configuring Ssl policy.\n   * @param options The options parameters.\n   */\n  listAvailableSslPredefinedPolicies(\n    options?: ApplicationGatewaysListAvailableSslPredefinedPoliciesOptionalParams,\n  ): PagedAsyncIterableIterator<ApplicationGatewaySslPredefinedPolicy>;\n  /**\n   * Deletes the specified application gateway.\n   * @param resourceGroupName The name of the resource group.\n   * @param applicationGatewayName The name of the application gateway.\n   * @param options The options parameters.\n   */\n  beginDelete(\n    resourceGroupName: string,\n    applicationGatewayName: string,\n    options?: ApplicationGatewaysDeleteOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Deletes the specified application gateway.\n   * @param resourceGroupName The name of the resource group.\n   * @param applicationGatewayName The name of the application gateway.\n   * @param options The options parameters.\n   */\n  beginDeleteAndWait(\n    resourceGroupName: string,\n    applicationGatewayName: string,\n    options?: ApplicationGatewaysDeleteOptionalParams,\n  ): Promise<void>;\n  /**\n   * Gets the specified application gateway.\n   * @param resourceGroupName The name of the resource group.\n   * @param applicationGatewayName The name of the application gateway.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    applicationGatewayName: string,\n    options?: ApplicationGatewaysGetOptionalParams,\n  ): Promise<ApplicationGatewaysGetResponse>;\n  /**\n   * Creates or updates the specified application gateway.\n   * @param resourceGroupName The name of the resource group.\n   * @param applicationGatewayName The name of the application gateway.\n   * @param parameters Parameters supplied to the create or update application gateway operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdate(\n    resourceGroupName: string,\n    applicationGatewayName: string,\n    parameters: ApplicationGateway,\n    options?: ApplicationGatewaysCreateOrUpdateOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ApplicationGatewaysCreateOrUpdateResponse>,\n      ApplicationGatewaysCreateOrUpdateResponse\n    >\n  >;\n  /**\n   * Creates or updates the specified application gateway.\n   * @param resourceGroupName The name of the resource group.\n   * @param applicationGatewayName The name of the application gateway.\n   * @param parameters Parameters supplied to the create or update application gateway operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    applicationGatewayName: string,\n    parameters: ApplicationGateway,\n    options?: ApplicationGatewaysCreateOrUpdateOptionalParams,\n  ): Promise<ApplicationGatewaysCreateOrUpdateResponse>;\n  /**\n   * Updates the specified application gateway tags.\n   * @param resourceGroupName The name of the resource group.\n   * @param applicationGatewayName The name of the application gateway.\n   * @param parameters Parameters supplied to update application gateway tags.\n   * @param options The options parameters.\n   */\n  updateTags(\n    resourceGroupName: string,\n    applicationGatewayName: string,\n    parameters: TagsObject,\n    options?: ApplicationGatewaysUpdateTagsOptionalParams,\n  ): Promise<ApplicationGatewaysUpdateTagsResponse>;\n  /**\n   * Starts the specified application gateway.\n   * @param resourceGroupName The name of the resource group.\n   * @param applicationGatewayName The name of the application gateway.\n   * @param options The options parameters.\n   */\n  beginStart(\n    resourceGroupName: string,\n    applicationGatewayName: string,\n    options?: ApplicationGatewaysStartOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Starts the specified application gateway.\n   * @param resourceGroupName The name of the resource group.\n   * @param applicationGatewayName The name of the application gateway.\n   * @param options The options parameters.\n   */\n  beginStartAndWait(\n    resourceGroupName: string,\n    applicationGatewayName: string,\n    options?: ApplicationGatewaysStartOptionalParams,\n  ): Promise<void>;\n  /**\n   * Stops the specified application gateway in a resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param applicationGatewayName The name of the application gateway.\n   * @param options The options parameters.\n   */\n  beginStop(\n    resourceGroupName: string,\n    applicationGatewayName: string,\n    options?: ApplicationGatewaysStopOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Stops the specified application gateway in a resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param applicationGatewayName The name of the application gateway.\n   * @param options The options parameters.\n   */\n  beginStopAndWait(\n    resourceGroupName: string,\n    applicationGatewayName: string,\n    options?: ApplicationGatewaysStopOptionalParams,\n  ): Promise<void>;\n  /**\n   * Gets the backend health of the specified application gateway in a resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param applicationGatewayName The name of the application gateway.\n   * @param options The options parameters.\n   */\n  beginBackendHealth(\n    resourceGroupName: string,\n    applicationGatewayName: string,\n    options?: ApplicationGatewaysBackendHealthOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ApplicationGatewaysBackendHealthResponse>,\n      ApplicationGatewaysBackendHealthResponse\n    >\n  >;\n  /**\n   * Gets the backend health of the specified application gateway in a resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param applicationGatewayName The name of the application gateway.\n   * @param options The options parameters.\n   */\n  beginBackendHealthAndWait(\n    resourceGroupName: string,\n    applicationGatewayName: string,\n    options?: ApplicationGatewaysBackendHealthOptionalParams,\n  ): Promise<ApplicationGatewaysBackendHealthResponse>;\n  /**\n   * Gets the backend health for given combination of backend pool and http setting of the specified\n   * application gateway in a resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param applicationGatewayName The name of the application gateway.\n   * @param probeRequest Request body for on-demand test probe operation.\n   * @param options The options parameters.\n   */\n  beginBackendHealthOnDemand(\n    resourceGroupName: string,\n    applicationGatewayName: string,\n    probeRequest: ApplicationGatewayOnDemandProbe,\n    options?: ApplicationGatewaysBackendHealthOnDemandOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ApplicationGatewaysBackendHealthOnDemandResponse>,\n      ApplicationGatewaysBackendHealthOnDemandResponse\n    >\n  >;\n  /**\n   * Gets the backend health for given combination of backend pool and http setting of the specified\n   * application gateway in a resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param applicationGatewayName The name of the application gateway.\n   * @param probeRequest Request body for on-demand test probe operation.\n   * @param options The options parameters.\n   */\n  beginBackendHealthOnDemandAndWait(\n    resourceGroupName: string,\n    applicationGatewayName: string,\n    probeRequest: ApplicationGatewayOnDemandProbe,\n    options?: ApplicationGatewaysBackendHealthOnDemandOptionalParams,\n  ): Promise<ApplicationGatewaysBackendHealthOnDemandResponse>;\n  /**\n   * Lists all available server variables.\n   * @param options The options parameters.\n   */\n  listAvailableServerVariables(\n    options?: ApplicationGatewaysListAvailableServerVariablesOptionalParams,\n  ): Promise<ApplicationGatewaysListAvailableServerVariablesResponse>;\n  /**\n   * Lists all available request headers.\n   * @param options The options parameters.\n   */\n  listAvailableRequestHeaders(\n    options?: ApplicationGatewaysListAvailableRequestHeadersOptionalParams,\n  ): Promise<ApplicationGatewaysListAvailableRequestHeadersResponse>;\n  /**\n   * Lists all available response headers.\n   * @param options The options parameters.\n   */\n  listAvailableResponseHeaders(\n    options?: ApplicationGatewaysListAvailableResponseHeadersOptionalParams,\n  ): Promise<ApplicationGatewaysListAvailableResponseHeadersResponse>;\n  /**\n   * Lists all available web application firewall rule sets.\n   * @param options The options parameters.\n   */\n  listAvailableWafRuleSets(\n    options?: ApplicationGatewaysListAvailableWafRuleSetsOptionalParams,\n  ): Promise<ApplicationGatewaysListAvailableWafRuleSetsResponse>;\n  /**\n   * Lists available Ssl options for configuring Ssl policy.\n   * @param options The options parameters.\n   */\n  listAvailableSslOptions(\n    options?: ApplicationGatewaysListAvailableSslOptionsOptionalParams,\n  ): Promise<ApplicationGatewaysListAvailableSslOptionsResponse>;\n  /**\n   * Gets Ssl predefined policy with the specified policy name.\n   * @param predefinedPolicyName Name of Ssl predefined policy.\n   * @param options The options parameters.\n   */\n  getSslPredefinedPolicy(\n    predefinedPolicyName: string,\n    options?: ApplicationGatewaysGetSslPredefinedPolicyOptionalParams,\n  ): Promise<ApplicationGatewaysGetSslPredefinedPolicyResponse>;\n}\n"]}