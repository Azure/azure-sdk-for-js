{"version":3,"file":"loadBalancers.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/loadBalancers.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  LoadBalancer,\n  LoadBalancersListAllOptionalParams,\n  LoadBalancersListOptionalParams,\n  LoadBalancersDeleteOptionalParams,\n  LoadBalancersGetOptionalParams,\n  LoadBalancersGetResponse,\n  LoadBalancersCreateOrUpdateOptionalParams,\n  LoadBalancersCreateOrUpdateResponse,\n  TagsObject,\n  LoadBalancersUpdateTagsOptionalParams,\n  LoadBalancersUpdateTagsResponse,\n  LoadBalancerVipSwapRequest,\n  LoadBalancersSwapPublicIpAddressesOptionalParams,\n  QueryInboundNatRulePortMappingRequest,\n  LoadBalancersListInboundNatRulePortMappingsOptionalParams,\n  LoadBalancersListInboundNatRulePortMappingsResponse,\n  LoadBalancersMigrateToIpBasedOptionalParams,\n  LoadBalancersMigrateToIpBasedResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a LoadBalancers. */\nexport interface LoadBalancers {\n  /**\n   * Gets all the load balancers in a subscription.\n   * @param options The options parameters.\n   */\n  listAll(\n    options?: LoadBalancersListAllOptionalParams,\n  ): PagedAsyncIterableIterator<LoadBalancer>;\n  /**\n   * Gets all the load balancers in a resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param options The options parameters.\n   */\n  list(\n    resourceGroupName: string,\n    options?: LoadBalancersListOptionalParams,\n  ): PagedAsyncIterableIterator<LoadBalancer>;\n  /**\n   * Deletes the specified load balancer.\n   * @param resourceGroupName The name of the resource group.\n   * @param loadBalancerName The name of the load balancer.\n   * @param options The options parameters.\n   */\n  beginDelete(\n    resourceGroupName: string,\n    loadBalancerName: string,\n    options?: LoadBalancersDeleteOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Deletes the specified load balancer.\n   * @param resourceGroupName The name of the resource group.\n   * @param loadBalancerName The name of the load balancer.\n   * @param options The options parameters.\n   */\n  beginDeleteAndWait(\n    resourceGroupName: string,\n    loadBalancerName: string,\n    options?: LoadBalancersDeleteOptionalParams,\n  ): Promise<void>;\n  /**\n   * Gets the specified load balancer.\n   * @param resourceGroupName The name of the resource group.\n   * @param loadBalancerName The name of the load balancer.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    loadBalancerName: string,\n    options?: LoadBalancersGetOptionalParams,\n  ): Promise<LoadBalancersGetResponse>;\n  /**\n   * Creates or updates a load balancer.\n   * @param resourceGroupName The name of the resource group.\n   * @param loadBalancerName The name of the load balancer.\n   * @param parameters Parameters supplied to the create or update load balancer operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdate(\n    resourceGroupName: string,\n    loadBalancerName: string,\n    parameters: LoadBalancer,\n    options?: LoadBalancersCreateOrUpdateOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<LoadBalancersCreateOrUpdateResponse>,\n      LoadBalancersCreateOrUpdateResponse\n    >\n  >;\n  /**\n   * Creates or updates a load balancer.\n   * @param resourceGroupName The name of the resource group.\n   * @param loadBalancerName The name of the load balancer.\n   * @param parameters Parameters supplied to the create or update load balancer operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    loadBalancerName: string,\n    parameters: LoadBalancer,\n    options?: LoadBalancersCreateOrUpdateOptionalParams,\n  ): Promise<LoadBalancersCreateOrUpdateResponse>;\n  /**\n   * Updates a load balancer tags.\n   * @param resourceGroupName The name of the resource group.\n   * @param loadBalancerName The name of the load balancer.\n   * @param parameters Parameters supplied to update load balancer tags.\n   * @param options The options parameters.\n   */\n  updateTags(\n    resourceGroupName: string,\n    loadBalancerName: string,\n    parameters: TagsObject,\n    options?: LoadBalancersUpdateTagsOptionalParams,\n  ): Promise<LoadBalancersUpdateTagsResponse>;\n  /**\n   * Swaps VIPs between two load balancers.\n   * @param location The region where load balancers are located at.\n   * @param parameters Parameters that define which VIPs should be swapped.\n   * @param options The options parameters.\n   */\n  beginSwapPublicIpAddresses(\n    location: string,\n    parameters: LoadBalancerVipSwapRequest,\n    options?: LoadBalancersSwapPublicIpAddressesOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Swaps VIPs between two load balancers.\n   * @param location The region where load balancers are located at.\n   * @param parameters Parameters that define which VIPs should be swapped.\n   * @param options The options parameters.\n   */\n  beginSwapPublicIpAddressesAndWait(\n    location: string,\n    parameters: LoadBalancerVipSwapRequest,\n    options?: LoadBalancersSwapPublicIpAddressesOptionalParams,\n  ): Promise<void>;\n  /**\n   * List of inbound NAT rule port mappings.\n   * @param groupName The name of the resource group.\n   * @param loadBalancerName The name of the load balancer.\n   * @param backendPoolName The name of the load balancer backend address pool.\n   * @param parameters Query inbound NAT rule port mapping request.\n   * @param options The options parameters.\n   */\n  beginListInboundNatRulePortMappings(\n    groupName: string,\n    loadBalancerName: string,\n    backendPoolName: string,\n    parameters: QueryInboundNatRulePortMappingRequest,\n    options?: LoadBalancersListInboundNatRulePortMappingsOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<LoadBalancersListInboundNatRulePortMappingsResponse>,\n      LoadBalancersListInboundNatRulePortMappingsResponse\n    >\n  >;\n  /**\n   * List of inbound NAT rule port mappings.\n   * @param groupName The name of the resource group.\n   * @param loadBalancerName The name of the load balancer.\n   * @param backendPoolName The name of the load balancer backend address pool.\n   * @param parameters Query inbound NAT rule port mapping request.\n   * @param options The options parameters.\n   */\n  beginListInboundNatRulePortMappingsAndWait(\n    groupName: string,\n    loadBalancerName: string,\n    backendPoolName: string,\n    parameters: QueryInboundNatRulePortMappingRequest,\n    options?: LoadBalancersListInboundNatRulePortMappingsOptionalParams,\n  ): Promise<LoadBalancersListInboundNatRulePortMappingsResponse>;\n  /**\n   * Migrate load balancer to IP Based\n   * @param groupName The name of the resource group.\n   * @param loadBalancerName The name of the load balancer.\n   * @param options The options parameters.\n   */\n  migrateToIpBased(\n    groupName: string,\n    loadBalancerName: string,\n    options?: LoadBalancersMigrateToIpBasedOptionalParams,\n  ): Promise<LoadBalancersMigrateToIpBasedResponse>;\n}\n"]}