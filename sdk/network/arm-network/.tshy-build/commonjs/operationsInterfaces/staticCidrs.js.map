{"version":3,"file":"staticCidrs.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/staticCidrs.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  StaticCidr,\n  StaticCidrsListOptionalParams,\n  StaticCidrsCreateOptionalParams,\n  StaticCidrsCreateResponse,\n  StaticCidrsGetOptionalParams,\n  StaticCidrsGetResponse,\n  StaticCidrsDeleteOptionalParams,\n  StaticCidrsDeleteResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a StaticCidrs. */\nexport interface StaticCidrs {\n  /**\n   * Gets list of Static CIDR resources at Network Manager level.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkManagerName The name of the network manager.\n   * @param poolName Pool resource name.\n   * @param options The options parameters.\n   */\n  list(\n    resourceGroupName: string,\n    networkManagerName: string,\n    poolName: string,\n    options?: StaticCidrsListOptionalParams,\n  ): PagedAsyncIterableIterator<StaticCidr>;\n  /**\n   * Creates/Updates the Static CIDR resource.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkManagerName The name of the network manager.\n   * @param poolName IP Address Manager Pool resource name.\n   * @param staticCidrName Static Cidr allocation name.\n   * @param options The options parameters.\n   */\n  create(\n    resourceGroupName: string,\n    networkManagerName: string,\n    poolName: string,\n    staticCidrName: string,\n    options?: StaticCidrsCreateOptionalParams,\n  ): Promise<StaticCidrsCreateResponse>;\n  /**\n   * Gets the specific Static CIDR resource.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkManagerName The name of the network manager.\n   * @param poolName Pool resource name.\n   * @param staticCidrName StaticCidr resource name to retrieve.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    networkManagerName: string,\n    poolName: string,\n    staticCidrName: string,\n    options?: StaticCidrsGetOptionalParams,\n  ): Promise<StaticCidrsGetResponse>;\n  /**\n   * Delete the Static CIDR resource.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkManagerName The name of the network manager.\n   * @param poolName Pool resource name.\n   * @param staticCidrName StaticCidr resource name to delete.\n   * @param options The options parameters.\n   */\n  beginDelete(\n    resourceGroupName: string,\n    networkManagerName: string,\n    poolName: string,\n    staticCidrName: string,\n    options?: StaticCidrsDeleteOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<StaticCidrsDeleteResponse>,\n      StaticCidrsDeleteResponse\n    >\n  >;\n  /**\n   * Delete the Static CIDR resource.\n   * @param resourceGroupName The name of the resource group.\n   * @param networkManagerName The name of the network manager.\n   * @param poolName Pool resource name.\n   * @param staticCidrName StaticCidr resource name to delete.\n   * @param options The options parameters.\n   */\n  beginDeleteAndWait(\n    resourceGroupName: string,\n    networkManagerName: string,\n    poolName: string,\n    staticCidrName: string,\n    options?: StaticCidrsDeleteOptionalParams,\n  ): Promise<StaticCidrsDeleteResponse>;\n}\n"]}