"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpnSiteLinkConnectionsImpl = void 0;
const tslib_1 = require("tslib");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
/** Class containing VpnSiteLinkConnections operations. */
class VpnSiteLinkConnectionsImpl {
    /**
     * Initialize a new instance of the class VpnSiteLinkConnections class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Retrieves the details of a vpn site link connection.
     * @param resourceGroupName The resource group name of the VpnGateway.
     * @param gatewayName The name of the gateway.
     * @param connectionName The name of the vpn connection.
     * @param linkConnectionName The name of the vpn connection.
     * @param options The options parameters.
     */
    get(resourceGroupName, gatewayName, connectionName, linkConnectionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            gatewayName,
            connectionName,
            linkConnectionName,
            options,
        }, getOperationSpec);
    }
}
exports.VpnSiteLinkConnectionsImpl = VpnSiteLinkConnectionsImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/vpnConnections/{connectionName}/vpnLinkConnections/{linkConnectionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.VpnSiteLinkConnection,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.connectionName,
        Parameters.gatewayName,
        Parameters.linkConnectionName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
//# sourceMappingURL=vpnSiteLinkConnections.js.map