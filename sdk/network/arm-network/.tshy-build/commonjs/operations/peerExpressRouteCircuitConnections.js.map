{"version":3,"file":"peerExpressRouteCircuitConnections.js","sourceRoot":"","sources":["../../../src/operations/peerExpressRouteCircuitConnections.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport { PeerExpressRouteCircuitConnections } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { NetworkManagementClient } from \"../networkManagementClient.js\";\nimport {\n  PeerExpressRouteCircuitConnection,\n  PeerExpressRouteCircuitConnectionsListNextOptionalParams,\n  PeerExpressRouteCircuitConnectionsListOptionalParams,\n  PeerExpressRouteCircuitConnectionsListResponse,\n  PeerExpressRouteCircuitConnectionsGetOptionalParams,\n  PeerExpressRouteCircuitConnectionsGetResponse,\n  PeerExpressRouteCircuitConnectionsListNextResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing PeerExpressRouteCircuitConnections operations. */\nexport class PeerExpressRouteCircuitConnectionsImpl\n  implements PeerExpressRouteCircuitConnections\n{\n  private readonly client: NetworkManagementClient;\n\n  /**\n   * Initialize a new instance of the class PeerExpressRouteCircuitConnections class.\n   * @param client Reference to the service client\n   */\n  constructor(client: NetworkManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Gets all global reach peer connections associated with a private peering in an express route\n   * circuit.\n   * @param resourceGroupName The name of the resource group.\n   * @param circuitName The name of the circuit.\n   * @param peeringName The name of the peering.\n   * @param options The options parameters.\n   */\n  public list(\n    resourceGroupName: string,\n    circuitName: string,\n    peeringName: string,\n    options?: PeerExpressRouteCircuitConnectionsListOptionalParams,\n  ): PagedAsyncIterableIterator<PeerExpressRouteCircuitConnection> {\n    const iter = this.listPagingAll(\n      resourceGroupName,\n      circuitName,\n      peeringName,\n      options,\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(\n          resourceGroupName,\n          circuitName,\n          peeringName,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listPagingPage(\n    resourceGroupName: string,\n    circuitName: string,\n    peeringName: string,\n    options?: PeerExpressRouteCircuitConnectionsListOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<PeerExpressRouteCircuitConnection[]> {\n    let result: PeerExpressRouteCircuitConnectionsListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(\n        resourceGroupName,\n        circuitName,\n        peeringName,\n        options,\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(\n        resourceGroupName,\n        circuitName,\n        peeringName,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    resourceGroupName: string,\n    circuitName: string,\n    peeringName: string,\n    options?: PeerExpressRouteCircuitConnectionsListOptionalParams,\n  ): AsyncIterableIterator<PeerExpressRouteCircuitConnection> {\n    for await (const page of this.listPagingPage(\n      resourceGroupName,\n      circuitName,\n      peeringName,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets the specified Peer Express Route Circuit Connection from the specified express route circuit.\n   * @param resourceGroupName The name of the resource group.\n   * @param circuitName The name of the express route circuit.\n   * @param peeringName The name of the peering.\n   * @param connectionName The name of the peer express route circuit connection.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    circuitName: string,\n    peeringName: string,\n    connectionName: string,\n    options?: PeerExpressRouteCircuitConnectionsGetOptionalParams,\n  ): Promise<PeerExpressRouteCircuitConnectionsGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, circuitName, peeringName, connectionName, options },\n      getOperationSpec,\n    );\n  }\n\n  /**\n   * Gets all global reach peer connections associated with a private peering in an express route\n   * circuit.\n   * @param resourceGroupName The name of the resource group.\n   * @param circuitName The name of the circuit.\n   * @param peeringName The name of the peering.\n   * @param options The options parameters.\n   */\n  private _list(\n    resourceGroupName: string,\n    circuitName: string,\n    peeringName: string,\n    options?: PeerExpressRouteCircuitConnectionsListOptionalParams,\n  ): Promise<PeerExpressRouteCircuitConnectionsListResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, circuitName, peeringName, options },\n      listOperationSpec,\n    );\n  }\n\n  /**\n   * ListNext\n   * @param resourceGroupName The name of the resource group.\n   * @param circuitName The name of the circuit.\n   * @param peeringName The name of the peering.\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    resourceGroupName: string,\n    circuitName: string,\n    peeringName: string,\n    nextLink: string,\n    options?: PeerExpressRouteCircuitConnectionsListNextOptionalParams,\n  ): Promise<PeerExpressRouteCircuitConnectionsListNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, circuitName, peeringName, nextLink, options },\n      listNextOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/peerConnections/{connectionName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PeerExpressRouteCircuitConnection,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.connectionName,\n    Parameters.circuitName,\n    Parameters.peeringName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/peerConnections\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PeerExpressRouteCircuitConnectionListResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.circuitName,\n    Parameters.peeringName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PeerExpressRouteCircuitConnectionListResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.nextLink,\n    Parameters.circuitName,\n    Parameters.peeringName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n"]}