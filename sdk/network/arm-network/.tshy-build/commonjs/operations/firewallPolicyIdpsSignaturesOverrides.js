"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FirewallPolicyIdpsSignaturesOverridesImpl = void 0;
const tslib_1 = require("tslib");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
/** Class containing FirewallPolicyIdpsSignaturesOverrides operations. */
class FirewallPolicyIdpsSignaturesOverridesImpl {
    /**
     * Initialize a new instance of the class FirewallPolicyIdpsSignaturesOverrides class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Will update the status of policy's signature overrides for IDPS
     * @param resourceGroupName The name of the resource group.
     * @param firewallPolicyName The name of the Firewall Policy.
     * @param parameters Will contain all properties of the object to put
     * @param options The options parameters.
     */
    patch(resourceGroupName, firewallPolicyName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, firewallPolicyName, parameters, options }, patchOperationSpec);
    }
    /**
     * Will override/create a new signature overrides for the policy's IDPS
     * @param resourceGroupName The name of the resource group.
     * @param firewallPolicyName The name of the Firewall Policy.
     * @param parameters Will contain all properties of the object to put
     * @param options The options parameters.
     */
    put(resourceGroupName, firewallPolicyName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, firewallPolicyName, parameters, options }, putOperationSpec);
    }
    /**
     * Returns all signatures overrides for a specific policy.
     * @param resourceGroupName The name of the resource group.
     * @param firewallPolicyName The name of the Firewall Policy.
     * @param options The options parameters.
     */
    get(resourceGroupName, firewallPolicyName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, firewallPolicyName, options }, getOperationSpec);
    }
    /**
     * Returns all signatures overrides objects for a specific policy as a list containing a single value.
     * @param resourceGroupName The name of the resource group.
     * @param firewallPolicyName The name of the Firewall Policy.
     * @param options The options parameters.
     */
    list(resourceGroupName, firewallPolicyName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, firewallPolicyName, options }, listOperationSpec);
    }
}
exports.FirewallPolicyIdpsSignaturesOverridesImpl = FirewallPolicyIdpsSignaturesOverridesImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const patchOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}/signatureOverrides/default",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.SignaturesOverrides,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    requestBody: Parameters.parameters22,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.firewallPolicyName,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const putOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}/signatureOverrides/default",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.SignaturesOverrides,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    requestBody: Parameters.parameters22,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.firewallPolicyName,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}/signatureOverrides/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SignaturesOverrides,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.firewallPolicyName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}/signatureOverrides",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SignaturesOverridesList,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.firewallPolicyName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
//# sourceMappingURL=firewallPolicyIdpsSignaturesOverrides.js.map