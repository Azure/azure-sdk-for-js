{"version":3,"file":"p2SVpnGateways.js","sourceRoot":"","sources":["../../../src/operations/p2SVpnGateways.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport { P2SVpnGateways } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { NetworkManagementClient } from \"../networkManagementClient.js\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller,\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl.js\";\nimport {\n  P2SVpnGateway,\n  P2SVpnGatewaysListByResourceGroupNextOptionalParams,\n  P2SVpnGatewaysListByResourceGroupOptionalParams,\n  P2SVpnGatewaysListByResourceGroupResponse,\n  P2SVpnGatewaysListNextOptionalParams,\n  P2SVpnGatewaysListOptionalParams,\n  P2SVpnGatewaysListResponse,\n  P2SVpnGatewaysGetOptionalParams,\n  P2SVpnGatewaysGetResponse,\n  P2SVpnGatewaysCreateOrUpdateOptionalParams,\n  P2SVpnGatewaysCreateOrUpdateResponse,\n  TagsObject,\n  P2SVpnGatewaysUpdateTagsOptionalParams,\n  P2SVpnGatewaysUpdateTagsResponse,\n  P2SVpnGatewaysDeleteOptionalParams,\n  P2SVpnGatewaysResetOptionalParams,\n  P2SVpnGatewaysResetResponse,\n  P2SVpnProfileParameters,\n  P2SVpnGatewaysGenerateVpnProfileOptionalParams,\n  P2SVpnGatewaysGenerateVpnProfileResponse,\n  P2SVpnGatewaysGetP2SVpnConnectionHealthOptionalParams,\n  P2SVpnGatewaysGetP2SVpnConnectionHealthResponse,\n  P2SVpnConnectionHealthRequest,\n  P2SVpnGatewaysGetP2SVpnConnectionHealthDetailedOptionalParams,\n  P2SVpnGatewaysGetP2SVpnConnectionHealthDetailedResponse,\n  P2SVpnConnectionRequest,\n  P2SVpnGatewaysDisconnectP2SVpnConnectionsOptionalParams,\n  P2SVpnGatewaysListByResourceGroupNextResponse,\n  P2SVpnGatewaysListNextResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing P2SVpnGateways operations. */\nexport class P2SVpnGatewaysImpl implements P2SVpnGateways {\n  private readonly client: NetworkManagementClient;\n\n  /**\n   * Initialize a new instance of the class P2SVpnGateways class.\n   * @param client Reference to the service client\n   */\n  constructor(client: NetworkManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists all the P2SVpnGateways in a resource group.\n   * @param resourceGroupName The resource group name of the P2SVpnGateway.\n   * @param options The options parameters.\n   */\n  public listByResourceGroup(\n    resourceGroupName: string,\n    options?: P2SVpnGatewaysListByResourceGroupOptionalParams,\n  ): PagedAsyncIterableIterator<P2SVpnGateway> {\n    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByResourceGroupPagingPage(\n          resourceGroupName,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listByResourceGroupPagingPage(\n    resourceGroupName: string,\n    options?: P2SVpnGatewaysListByResourceGroupOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<P2SVpnGateway[]> {\n    let result: P2SVpnGatewaysListByResourceGroupResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listByResourceGroup(resourceGroupName, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listByResourceGroupNext(\n        resourceGroupName,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listByResourceGroupPagingAll(\n    resourceGroupName: string,\n    options?: P2SVpnGatewaysListByResourceGroupOptionalParams,\n  ): AsyncIterableIterator<P2SVpnGateway> {\n    for await (const page of this.listByResourceGroupPagingPage(\n      resourceGroupName,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists all the P2SVpnGateways in a subscription.\n   * @param options The options parameters.\n   */\n  public list(\n    options?: P2SVpnGatewaysListOptionalParams,\n  ): PagedAsyncIterableIterator<P2SVpnGateway> {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(options, settings);\n      },\n    };\n  }\n\n  private async *listPagingPage(\n    options?: P2SVpnGatewaysListOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<P2SVpnGateway[]> {\n    let result: P2SVpnGatewaysListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    options?: P2SVpnGatewaysListOptionalParams,\n  ): AsyncIterableIterator<P2SVpnGateway> {\n    for await (const page of this.listPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves the details of a virtual wan p2s vpn gateway.\n   * @param resourceGroupName The resource group name of the P2SVpnGateway.\n   * @param gatewayName The name of the gateway.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    gatewayName: string,\n    options?: P2SVpnGatewaysGetOptionalParams,\n  ): Promise<P2SVpnGatewaysGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, gatewayName, options },\n      getOperationSpec,\n    );\n  }\n\n  /**\n   * Creates a virtual wan p2s vpn gateway if it doesn't exist else updates the existing gateway.\n   * @param resourceGroupName The resource group name of the P2SVpnGateway.\n   * @param gatewayName The name of the gateway.\n   * @param p2SVpnGatewayParameters Parameters supplied to create or Update a virtual wan p2s vpn\n   *                                gateway.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdate(\n    resourceGroupName: string,\n    gatewayName: string,\n    p2SVpnGatewayParameters: P2SVpnGateway,\n    options?: P2SVpnGatewaysCreateOrUpdateOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<P2SVpnGatewaysCreateOrUpdateResponse>,\n      P2SVpnGatewaysCreateOrUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<P2SVpnGatewaysCreateOrUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        gatewayName,\n        p2SVpnGatewayParameters,\n        options,\n      },\n      spec: createOrUpdateOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      P2SVpnGatewaysCreateOrUpdateResponse,\n      OperationState<P2SVpnGatewaysCreateOrUpdateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"azure-async-operation\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Creates a virtual wan p2s vpn gateway if it doesn't exist else updates the existing gateway.\n   * @param resourceGroupName The resource group name of the P2SVpnGateway.\n   * @param gatewayName The name of the gateway.\n   * @param p2SVpnGatewayParameters Parameters supplied to create or Update a virtual wan p2s vpn\n   *                                gateway.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    gatewayName: string,\n    p2SVpnGatewayParameters: P2SVpnGateway,\n    options?: P2SVpnGatewaysCreateOrUpdateOptionalParams,\n  ): Promise<P2SVpnGatewaysCreateOrUpdateResponse> {\n    const poller = await this.beginCreateOrUpdate(\n      resourceGroupName,\n      gatewayName,\n      p2SVpnGatewayParameters,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Updates virtual wan p2s vpn gateway tags.\n   * @param resourceGroupName The resource group name of the P2SVpnGateway.\n   * @param gatewayName The name of the gateway.\n   * @param p2SVpnGatewayParameters Parameters supplied to update a virtual wan p2s vpn gateway tags.\n   * @param options The options parameters.\n   */\n  async beginUpdateTags(\n    resourceGroupName: string,\n    gatewayName: string,\n    p2SVpnGatewayParameters: TagsObject,\n    options?: P2SVpnGatewaysUpdateTagsOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<P2SVpnGatewaysUpdateTagsResponse>,\n      P2SVpnGatewaysUpdateTagsResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<P2SVpnGatewaysUpdateTagsResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        gatewayName,\n        p2SVpnGatewayParameters,\n        options,\n      },\n      spec: updateTagsOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      P2SVpnGatewaysUpdateTagsResponse,\n      OperationState<P2SVpnGatewaysUpdateTagsResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"azure-async-operation\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Updates virtual wan p2s vpn gateway tags.\n   * @param resourceGroupName The resource group name of the P2SVpnGateway.\n   * @param gatewayName The name of the gateway.\n   * @param p2SVpnGatewayParameters Parameters supplied to update a virtual wan p2s vpn gateway tags.\n   * @param options The options parameters.\n   */\n  async beginUpdateTagsAndWait(\n    resourceGroupName: string,\n    gatewayName: string,\n    p2SVpnGatewayParameters: TagsObject,\n    options?: P2SVpnGatewaysUpdateTagsOptionalParams,\n  ): Promise<P2SVpnGatewaysUpdateTagsResponse> {\n    const poller = await this.beginUpdateTags(\n      resourceGroupName,\n      gatewayName,\n      p2SVpnGatewayParameters,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes a virtual wan p2s vpn gateway.\n   * @param resourceGroupName The resource group name of the P2SVpnGateway.\n   * @param gatewayName The name of the gateway.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    gatewayName: string,\n    options?: P2SVpnGatewaysDeleteOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, gatewayName, options },\n      spec: deleteOperationSpec,\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes a virtual wan p2s vpn gateway.\n   * @param resourceGroupName The resource group name of the P2SVpnGateway.\n   * @param gatewayName The name of the gateway.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    gatewayName: string,\n    options?: P2SVpnGatewaysDeleteOptionalParams,\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      gatewayName,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Lists all the P2SVpnGateways in a resource group.\n   * @param resourceGroupName The resource group name of the P2SVpnGateway.\n   * @param options The options parameters.\n   */\n  private _listByResourceGroup(\n    resourceGroupName: string,\n    options?: P2SVpnGatewaysListByResourceGroupOptionalParams,\n  ): Promise<P2SVpnGatewaysListByResourceGroupResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, options },\n      listByResourceGroupOperationSpec,\n    );\n  }\n\n  /**\n   * Lists all the P2SVpnGateways in a subscription.\n   * @param options The options parameters.\n   */\n  private _list(\n    options?: P2SVpnGatewaysListOptionalParams,\n  ): Promise<P2SVpnGatewaysListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n\n  /**\n   * Resets the primary of the p2s vpn gateway in the specified resource group.\n   * @param resourceGroupName The resource group name of the P2SVpnGateway.\n   * @param gatewayName The name of the gateway.\n   * @param options The options parameters.\n   */\n  async beginReset(\n    resourceGroupName: string,\n    gatewayName: string,\n    options?: P2SVpnGatewaysResetOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<P2SVpnGatewaysResetResponse>,\n      P2SVpnGatewaysResetResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<P2SVpnGatewaysResetResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, gatewayName, options },\n      spec: resetOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      P2SVpnGatewaysResetResponse,\n      OperationState<P2SVpnGatewaysResetResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Resets the primary of the p2s vpn gateway in the specified resource group.\n   * @param resourceGroupName The resource group name of the P2SVpnGateway.\n   * @param gatewayName The name of the gateway.\n   * @param options The options parameters.\n   */\n  async beginResetAndWait(\n    resourceGroupName: string,\n    gatewayName: string,\n    options?: P2SVpnGatewaysResetOptionalParams,\n  ): Promise<P2SVpnGatewaysResetResponse> {\n    const poller = await this.beginReset(\n      resourceGroupName,\n      gatewayName,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Generates VPN profile for P2S client of the P2SVpnGateway in the specified resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param gatewayName The name of the P2SVpnGateway.\n   * @param parameters Parameters supplied to the generate P2SVpnGateway VPN client package operation.\n   * @param options The options parameters.\n   */\n  async beginGenerateVpnProfile(\n    resourceGroupName: string,\n    gatewayName: string,\n    parameters: P2SVpnProfileParameters,\n    options?: P2SVpnGatewaysGenerateVpnProfileOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<P2SVpnGatewaysGenerateVpnProfileResponse>,\n      P2SVpnGatewaysGenerateVpnProfileResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<P2SVpnGatewaysGenerateVpnProfileResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, gatewayName, parameters, options },\n      spec: generateVpnProfileOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      P2SVpnGatewaysGenerateVpnProfileResponse,\n      OperationState<P2SVpnGatewaysGenerateVpnProfileResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Generates VPN profile for P2S client of the P2SVpnGateway in the specified resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param gatewayName The name of the P2SVpnGateway.\n   * @param parameters Parameters supplied to the generate P2SVpnGateway VPN client package operation.\n   * @param options The options parameters.\n   */\n  async beginGenerateVpnProfileAndWait(\n    resourceGroupName: string,\n    gatewayName: string,\n    parameters: P2SVpnProfileParameters,\n    options?: P2SVpnGatewaysGenerateVpnProfileOptionalParams,\n  ): Promise<P2SVpnGatewaysGenerateVpnProfileResponse> {\n    const poller = await this.beginGenerateVpnProfile(\n      resourceGroupName,\n      gatewayName,\n      parameters,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets the connection health of P2S clients of the virtual wan P2SVpnGateway in the specified resource\n   * group.\n   * @param resourceGroupName The name of the resource group.\n   * @param gatewayName The name of the P2SVpnGateway.\n   * @param options The options parameters.\n   */\n  async beginGetP2SVpnConnectionHealth(\n    resourceGroupName: string,\n    gatewayName: string,\n    options?: P2SVpnGatewaysGetP2SVpnConnectionHealthOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<P2SVpnGatewaysGetP2SVpnConnectionHealthResponse>,\n      P2SVpnGatewaysGetP2SVpnConnectionHealthResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<P2SVpnGatewaysGetP2SVpnConnectionHealthResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, gatewayName, options },\n      spec: getP2SVpnConnectionHealthOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      P2SVpnGatewaysGetP2SVpnConnectionHealthResponse,\n      OperationState<P2SVpnGatewaysGetP2SVpnConnectionHealthResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Gets the connection health of P2S clients of the virtual wan P2SVpnGateway in the specified resource\n   * group.\n   * @param resourceGroupName The name of the resource group.\n   * @param gatewayName The name of the P2SVpnGateway.\n   * @param options The options parameters.\n   */\n  async beginGetP2SVpnConnectionHealthAndWait(\n    resourceGroupName: string,\n    gatewayName: string,\n    options?: P2SVpnGatewaysGetP2SVpnConnectionHealthOptionalParams,\n  ): Promise<P2SVpnGatewaysGetP2SVpnConnectionHealthResponse> {\n    const poller = await this.beginGetP2SVpnConnectionHealth(\n      resourceGroupName,\n      gatewayName,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets the sas url to get the connection health detail of P2S clients of the virtual wan P2SVpnGateway\n   * in the specified resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param gatewayName The name of the P2SVpnGateway.\n   * @param request Request parameters supplied to get p2s vpn connections detailed health.\n   * @param options The options parameters.\n   */\n  async beginGetP2SVpnConnectionHealthDetailed(\n    resourceGroupName: string,\n    gatewayName: string,\n    request: P2SVpnConnectionHealthRequest,\n    options?: P2SVpnGatewaysGetP2SVpnConnectionHealthDetailedOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<P2SVpnGatewaysGetP2SVpnConnectionHealthDetailedResponse>,\n      P2SVpnGatewaysGetP2SVpnConnectionHealthDetailedResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<P2SVpnGatewaysGetP2SVpnConnectionHealthDetailedResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, gatewayName, request, options },\n      spec: getP2SVpnConnectionHealthDetailedOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      P2SVpnGatewaysGetP2SVpnConnectionHealthDetailedResponse,\n      OperationState<P2SVpnGatewaysGetP2SVpnConnectionHealthDetailedResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Gets the sas url to get the connection health detail of P2S clients of the virtual wan P2SVpnGateway\n   * in the specified resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param gatewayName The name of the P2SVpnGateway.\n   * @param request Request parameters supplied to get p2s vpn connections detailed health.\n   * @param options The options parameters.\n   */\n  async beginGetP2SVpnConnectionHealthDetailedAndWait(\n    resourceGroupName: string,\n    gatewayName: string,\n    request: P2SVpnConnectionHealthRequest,\n    options?: P2SVpnGatewaysGetP2SVpnConnectionHealthDetailedOptionalParams,\n  ): Promise<P2SVpnGatewaysGetP2SVpnConnectionHealthDetailedResponse> {\n    const poller = await this.beginGetP2SVpnConnectionHealthDetailed(\n      resourceGroupName,\n      gatewayName,\n      request,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Disconnect P2S vpn connections of the virtual wan P2SVpnGateway in the specified resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param p2SVpnGatewayName The name of the P2S Vpn Gateway.\n   * @param request The parameters are supplied to disconnect p2s vpn connections.\n   * @param options The options parameters.\n   */\n  async beginDisconnectP2SVpnConnections(\n    resourceGroupName: string,\n    p2SVpnGatewayName: string,\n    request: P2SVpnConnectionRequest,\n    options?: P2SVpnGatewaysDisconnectP2SVpnConnectionsOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, p2SVpnGatewayName, request, options },\n      spec: disconnectP2SVpnConnectionsOperationSpec,\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Disconnect P2S vpn connections of the virtual wan P2SVpnGateway in the specified resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param p2SVpnGatewayName The name of the P2S Vpn Gateway.\n   * @param request The parameters are supplied to disconnect p2s vpn connections.\n   * @param options The options parameters.\n   */\n  async beginDisconnectP2SVpnConnectionsAndWait(\n    resourceGroupName: string,\n    p2SVpnGatewayName: string,\n    request: P2SVpnConnectionRequest,\n    options?: P2SVpnGatewaysDisconnectP2SVpnConnectionsOptionalParams,\n  ): Promise<void> {\n    const poller = await this.beginDisconnectP2SVpnConnections(\n      resourceGroupName,\n      p2SVpnGatewayName,\n      request,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * ListByResourceGroupNext\n   * @param resourceGroupName The resource group name of the P2SVpnGateway.\n   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.\n   * @param options The options parameters.\n   */\n  private _listByResourceGroupNext(\n    resourceGroupName: string,\n    nextLink: string,\n    options?: P2SVpnGatewaysListByResourceGroupNextOptionalParams,\n  ): Promise<P2SVpnGatewaysListByResourceGroupNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, nextLink, options },\n      listByResourceGroupNextOperationSpec,\n    );\n  }\n\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    nextLink: string,\n    options?: P2SVpnGatewaysListNextOptionalParams,\n  ): Promise<P2SVpnGatewaysListNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listNextOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/p2svpnGateways/{gatewayName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.P2SVpnGateway,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.gatewayName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/p2svpnGateways/{gatewayName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.P2SVpnGateway,\n    },\n    201: {\n      bodyMapper: Mappers.P2SVpnGateway,\n    },\n    202: {\n      bodyMapper: Mappers.P2SVpnGateway,\n    },\n    204: {\n      bodyMapper: Mappers.P2SVpnGateway,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.p2SVpnGatewayParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.gatewayName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst updateTagsOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/p2svpnGateways/{gatewayName}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.P2SVpnGateway,\n    },\n    201: {\n      bodyMapper: Mappers.P2SVpnGateway,\n    },\n    202: {\n      bodyMapper: Mappers.P2SVpnGateway,\n    },\n    204: {\n      bodyMapper: Mappers.P2SVpnGateway,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.p2SVpnGatewayParameters1,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.gatewayName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/p2svpnGateways/{gatewayName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.gatewayName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listByResourceGroupOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/p2svpnGateways\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListP2SVpnGatewaysResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/providers/Microsoft.Network/p2svpnGateways\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListP2SVpnGatewaysResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst resetOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/p2svpnGateways/{gatewayName}/reset\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.P2SVpnGateway,\n    },\n    201: {\n      bodyMapper: Mappers.P2SVpnGateway,\n    },\n    202: {\n      bodyMapper: Mappers.P2SVpnGateway,\n    },\n    204: {\n      bodyMapper: Mappers.P2SVpnGateway,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.gatewayName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst generateVpnProfileOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/p2svpnGateways/{gatewayName}/generatevpnprofile\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.VpnProfileResponse,\n    },\n    201: {\n      bodyMapper: Mappers.VpnProfileResponse,\n    },\n    202: {\n      bodyMapper: Mappers.VpnProfileResponse,\n    },\n    204: {\n      bodyMapper: Mappers.VpnProfileResponse,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.parameters89,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.gatewayName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getP2SVpnConnectionHealthOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/p2svpnGateways/{gatewayName}/getP2sVpnConnectionHealth\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.P2SVpnGateway,\n    },\n    201: {\n      bodyMapper: Mappers.P2SVpnGateway,\n    },\n    202: {\n      bodyMapper: Mappers.P2SVpnGateway,\n    },\n    204: {\n      bodyMapper: Mappers.P2SVpnGateway,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.gatewayName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getP2SVpnConnectionHealthDetailedOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/p2svpnGateways/{gatewayName}/getP2sVpnConnectionHealthDetailed\",\n    httpMethod: \"POST\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.P2SVpnConnectionHealth,\n      },\n      201: {\n        bodyMapper: Mappers.P2SVpnConnectionHealth,\n      },\n      202: {\n        bodyMapper: Mappers.P2SVpnConnectionHealth,\n      },\n      204: {\n        bodyMapper: Mappers.P2SVpnConnectionHealth,\n      },\n      default: {\n        bodyMapper: Mappers.CloudError,\n      },\n    },\n    requestBody: Parameters.request3,\n    queryParameters: [Parameters.apiVersion],\n    urlParameters: [\n      Parameters.$host,\n      Parameters.resourceGroupName,\n      Parameters.subscriptionId,\n      Parameters.gatewayName,\n    ],\n    headerParameters: [Parameters.accept, Parameters.contentType],\n    mediaType: \"json\",\n    serializer,\n  };\nconst disconnectP2SVpnConnectionsOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/p2svpnGateways/{p2sVpnGatewayName}/disconnectP2sVpnConnections\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.request1,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.p2SVpnGatewayName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListP2SVpnGatewaysResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.nextLink,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListP2SVpnGatewaysResult,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.nextLink,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n"]}