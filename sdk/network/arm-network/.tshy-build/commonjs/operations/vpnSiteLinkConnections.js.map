{"version":3,"file":"vpnSiteLinkConnections.js","sourceRoot":"","sources":["../../../src/operations/vpnSiteLinkConnections.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;;AAGH,uEAAiD;AACjD,sEAAgD;AAChD,4EAAsD;AAOtD,0DAA0D;AAC1D,MAAa,0BAA0B;IAGrC;;;OAGG;IACH,YAAY,MAA+B;QACzC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;;;;;OAOG;IACH,GAAG,CACD,iBAAyB,EACzB,WAAmB,EACnB,cAAsB,EACtB,kBAA0B,EAC1B,OAAiD;QAEjD,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC;YACE,iBAAiB;YACjB,WAAW;YACX,cAAc;YACd,kBAAkB;YAClB,OAAO;SACR,EACD,gBAAgB,CACjB,CAAC;IACJ,CAAC;CACF;AArCD,gEAqCC;AACD,2BAA2B;AAC3B,MAAM,UAAU,GAAG,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;AAE3E,MAAM,gBAAgB,GAA6B;IACjD,IAAI,EAAE,kMAAkM;IACxM,UAAU,EAAE,KAAK;IACjB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,qBAAqB;SAC1C;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,UAAU;SAC/B;KACF;IACD,eAAe,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC;IACxC,aAAa,EAAE;QACb,UAAU,CAAC,KAAK;QAChB,UAAU,CAAC,iBAAiB;QAC5B,UAAU,CAAC,cAAc;QACzB,UAAU,CAAC,cAAc;QACzB,UAAU,CAAC,WAAW;QACtB,UAAU,CAAC,kBAAkB;KAC9B;IACD,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;IACrC,UAAU;CACX,CAAC","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { VpnSiteLinkConnections } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { NetworkManagementClient } from \"../networkManagementClient.js\";\nimport {\n  VpnSiteLinkConnectionsGetOptionalParams,\n  VpnSiteLinkConnectionsGetResponse,\n} from \"../models/index.js\";\n\n/** Class containing VpnSiteLinkConnections operations. */\nexport class VpnSiteLinkConnectionsImpl implements VpnSiteLinkConnections {\n  private readonly client: NetworkManagementClient;\n\n  /**\n   * Initialize a new instance of the class VpnSiteLinkConnections class.\n   * @param client Reference to the service client\n   */\n  constructor(client: NetworkManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Retrieves the details of a vpn site link connection.\n   * @param resourceGroupName The resource group name of the VpnGateway.\n   * @param gatewayName The name of the gateway.\n   * @param connectionName The name of the vpn connection.\n   * @param linkConnectionName The name of the vpn connection.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    gatewayName: string,\n    connectionName: string,\n    linkConnectionName: string,\n    options?: VpnSiteLinkConnectionsGetOptionalParams,\n  ): Promise<VpnSiteLinkConnectionsGetResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        gatewayName,\n        connectionName,\n        linkConnectionName,\n        options,\n      },\n      getOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/vpnConnections/{connectionName}/vpnLinkConnections/{linkConnectionName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.VpnSiteLinkConnection,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId,\n    Parameters.connectionName,\n    Parameters.gatewayName,\n    Parameters.linkConnectionName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n"]}