"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FirewallPolicyIdpsSignaturesFilterValuesImpl = void 0;
const tslib_1 = require("tslib");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
/** Class containing FirewallPolicyIdpsSignaturesFilterValues operations. */
class FirewallPolicyIdpsSignaturesFilterValuesImpl {
    /**
     * Initialize a new instance of the class FirewallPolicyIdpsSignaturesFilterValues class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Retrieves the current filter values for the signatures overrides
     * @param resourceGroupName The name of the resource group.
     * @param firewallPolicyName The name of the Firewall Policy.
     * @param parameters Describes the filter values possibles for a given column
     * @param options The options parameters.
     */
    list(resourceGroupName, firewallPolicyName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, firewallPolicyName, parameters, options }, listOperationSpec);
    }
}
exports.FirewallPolicyIdpsSignaturesFilterValuesImpl = FirewallPolicyIdpsSignaturesFilterValuesImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}/listIdpsFilterOptions",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.SignatureOverridesFilterValuesResponse,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    requestBody: Parameters.parameters23,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.firewallPolicyName,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
//# sourceMappingURL=firewallPolicyIdpsSignaturesFilterValues.js.map