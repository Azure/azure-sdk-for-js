/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const acceptLanguage: coreHttp.OperationParameter = {
  parameterPath: "acceptLanguage",
  mapper: {
    serializedName: "accept-language",
    defaultValue: 'en-US',
    type: {
      name: "String"
    }
  }
};
export const apiVersion0: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "api-version",
    defaultValue: '2019-06-01',
    type: {
      name: "String"
    }
  }
};
export const apiVersion1: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "api-version",
    defaultValue: '2017-03-30',
    type: {
      name: "String"
    }
  }
};
export const applicationGatewayName: coreHttp.OperationURLParameter = {
  parameterPath: "applicationGatewayName",
  mapper: {
    required: true,
    serializedName: "applicationGatewayName",
    type: {
      name: "String"
    }
  }
};
export const applicationSecurityGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "applicationSecurityGroupName",
  mapper: {
    required: true,
    serializedName: "applicationSecurityGroupName",
    type: {
      name: "String"
    }
  }
};
export const authorizationName: coreHttp.OperationURLParameter = {
  parameterPath: "authorizationName",
  mapper: {
    required: true,
    serializedName: "authorizationName",
    type: {
      name: "String"
    }
  }
};
export const azureFirewallName: coreHttp.OperationURLParameter = {
  parameterPath: "azureFirewallName",
  mapper: {
    required: true,
    serializedName: "azureFirewallName",
    type: {
      name: "String"
    }
  }
};
export const backendAddressPoolName: coreHttp.OperationURLParameter = {
  parameterPath: "backendAddressPoolName",
  mapper: {
    required: true,
    serializedName: "backendAddressPoolName",
    type: {
      name: "String"
    }
  }
};
export const bastionHostName: coreHttp.OperationURLParameter = {
  parameterPath: "bastionHostName",
  mapper: {
    required: true,
    serializedName: "bastionHostName",
    type: {
      name: "String"
    }
  }
};
export const circuitName: coreHttp.OperationURLParameter = {
  parameterPath: "circuitName",
  mapper: {
    required: true,
    serializedName: "circuitName",
    type: {
      name: "String"
    }
  }
};
export const connectionMonitorName: coreHttp.OperationURLParameter = {
  parameterPath: "connectionMonitorName",
  mapper: {
    required: true,
    serializedName: "connectionMonitorName",
    type: {
      name: "String"
    }
  }
};
export const connectionName: coreHttp.OperationURLParameter = {
  parameterPath: "connectionName",
  mapper: {
    required: true,
    serializedName: "connectionName",
    type: {
      name: "String"
    }
  }
};
export const crossConnectionName: coreHttp.OperationURLParameter = {
  parameterPath: "crossConnectionName",
  mapper: {
    required: true,
    serializedName: "crossConnectionName",
    type: {
      name: "String"
    }
  }
};
export const ddosCustomPolicyName: coreHttp.OperationURLParameter = {
  parameterPath: "ddosCustomPolicyName",
  mapper: {
    required: true,
    serializedName: "ddosCustomPolicyName",
    type: {
      name: "String"
    }
  }
};
export const ddosProtectionPlanName: coreHttp.OperationURLParameter = {
  parameterPath: "ddosProtectionPlanName",
  mapper: {
    required: true,
    serializedName: "ddosProtectionPlanName",
    type: {
      name: "String"
    }
  }
};
export const defaultSecurityRuleName: coreHttp.OperationURLParameter = {
  parameterPath: "defaultSecurityRuleName",
  mapper: {
    required: true,
    serializedName: "defaultSecurityRuleName",
    type: {
      name: "String"
    }
  }
};
export const devicePath: coreHttp.OperationURLParameter = {
  parameterPath: "devicePath",
  mapper: {
    required: true,
    serializedName: "devicePath",
    type: {
      name: "String"
    }
  }
};
export const domainNameLabel: coreHttp.OperationQueryParameter = {
  parameterPath: "domainNameLabel",
  mapper: {
    required: true,
    serializedName: "domainNameLabel",
    type: {
      name: "String"
    }
  }
};
export const expand: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "expand"
  ],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};
export const expressRouteGatewayName: coreHttp.OperationURLParameter = {
  parameterPath: "expressRouteGatewayName",
  mapper: {
    required: true,
    serializedName: "expressRouteGatewayName",
    type: {
      name: "String"
    }
  }
};
export const expressRoutePortName: coreHttp.OperationURLParameter = {
  parameterPath: "expressRoutePortName",
  mapper: {
    required: true,
    serializedName: "expressRoutePortName",
    type: {
      name: "String"
    }
  }
};
export const frontendIPConfigurationName: coreHttp.OperationURLParameter = {
  parameterPath: "frontendIPConfigurationName",
  mapper: {
    required: true,
    serializedName: "frontendIPConfigurationName",
    type: {
      name: "String"
    }
  }
};
export const gatewayName: coreHttp.OperationURLParameter = {
  parameterPath: "gatewayName",
  mapper: {
    required: true,
    serializedName: "gatewayName",
    type: {
      name: "String"
    }
  }
};
export const gatewayVip: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "gatewayVip"
  ],
  mapper: {
    serializedName: "gatewayVip",
    type: {
      name: "String"
    }
  }
};
export const inboundNatRuleName: coreHttp.OperationURLParameter = {
  parameterPath: "inboundNatRuleName",
  mapper: {
    required: true,
    serializedName: "inboundNatRuleName",
    type: {
      name: "String"
    }
  }
};
export const ipAddress: coreHttp.OperationQueryParameter = {
  parameterPath: "ipAddress",
  mapper: {
    required: true,
    serializedName: "ipAddress",
    type: {
      name: "String"
    }
  }
};
export const ipConfigurationName: coreHttp.OperationURLParameter = {
  parameterPath: "ipConfigurationName",
  mapper: {
    required: true,
    serializedName: "ipConfigurationName",
    type: {
      name: "String"
    }
  }
};
export const linkConnectionName: coreHttp.OperationURLParameter = {
  parameterPath: "linkConnectionName",
  mapper: {
    required: true,
    serializedName: "linkConnectionName",
    type: {
      name: "String"
    }
  }
};
export const linkName: coreHttp.OperationURLParameter = {
  parameterPath: "linkName",
  mapper: {
    required: true,
    serializedName: "linkName",
    type: {
      name: "String"
    }
  }
};
export const loadBalancerName: coreHttp.OperationURLParameter = {
  parameterPath: "loadBalancerName",
  mapper: {
    required: true,
    serializedName: "loadBalancerName",
    type: {
      name: "String"
    }
  }
};
export const loadBalancingRuleName: coreHttp.OperationURLParameter = {
  parameterPath: "loadBalancingRuleName",
  mapper: {
    required: true,
    serializedName: "loadBalancingRuleName",
    type: {
      name: "String"
    }
  }
};
export const localNetworkGatewayName: coreHttp.OperationURLParameter = {
  parameterPath: "localNetworkGatewayName",
  mapper: {
    required: true,
    serializedName: "localNetworkGatewayName",
    constraints: {
      MinLength: 1
    },
    type: {
      name: "String"
    }
  }
};
export const location0: coreHttp.OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    required: true,
    serializedName: "location",
    type: {
      name: "String"
    }
  }
};
export const location1: coreHttp.OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    required: true,
    serializedName: "location",
    constraints: {
      Pattern: /^[-\w\._ ]+$/
    },
    type: {
      name: "String"
    }
  }
};
export const locationName: coreHttp.OperationURLParameter = {
  parameterPath: "locationName",
  mapper: {
    required: true,
    serializedName: "locationName",
    type: {
      name: "String"
    }
  }
};
export const natGatewayName: coreHttp.OperationURLParameter = {
  parameterPath: "natGatewayName",
  mapper: {
    required: true,
    serializedName: "natGatewayName",
    type: {
      name: "String"
    }
  }
};
export const networkInterfaceName: coreHttp.OperationURLParameter = {
  parameterPath: "networkInterfaceName",
  mapper: {
    required: true,
    serializedName: "networkInterfaceName",
    type: {
      name: "String"
    }
  }
};
export const networkProfileName: coreHttp.OperationURLParameter = {
  parameterPath: "networkProfileName",
  mapper: {
    required: true,
    serializedName: "networkProfileName",
    type: {
      name: "String"
    }
  }
};
export const networkSecurityGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "networkSecurityGroupName",
  mapper: {
    required: true,
    serializedName: "networkSecurityGroupName",
    type: {
      name: "String"
    }
  }
};
export const networkWatcherName: coreHttp.OperationURLParameter = {
  parameterPath: "networkWatcherName",
  mapper: {
    required: true,
    serializedName: "networkWatcherName",
    type: {
      name: "String"
    }
  }
};
export const nextPageLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextPageLink",
  mapper: {
    required: true,
    serializedName: "nextLink",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
export const outboundRuleName: coreHttp.OperationURLParameter = {
  parameterPath: "outboundRuleName",
  mapper: {
    required: true,
    serializedName: "outboundRuleName",
    type: {
      name: "String"
    }
  }
};
export const p2SVpnServerConfigurationName: coreHttp.OperationURLParameter = {
  parameterPath: "p2SVpnServerConfigurationName",
  mapper: {
    required: true,
    serializedName: "p2SVpnServerConfigurationName",
    type: {
      name: "String"
    }
  }
};
export const packetCaptureName: coreHttp.OperationURLParameter = {
  parameterPath: "packetCaptureName",
  mapper: {
    required: true,
    serializedName: "packetCaptureName",
    type: {
      name: "String"
    }
  }
};
export const peConnectionName: coreHttp.OperationURLParameter = {
  parameterPath: "peConnectionName",
  mapper: {
    required: true,
    serializedName: "peConnectionName",
    type: {
      name: "String"
    }
  }
};
export const peer0: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "peer"
  ],
  mapper: {
    serializedName: "peer",
    type: {
      name: "String"
    }
  }
};
export const peer1: coreHttp.OperationQueryParameter = {
  parameterPath: "peer",
  mapper: {
    required: true,
    serializedName: "peer",
    type: {
      name: "String"
    }
  }
};
export const peeringName: coreHttp.OperationURLParameter = {
  parameterPath: "peeringName",
  mapper: {
    required: true,
    serializedName: "peeringName",
    type: {
      name: "String"
    }
  }
};
export const policyName: coreHttp.OperationURLParameter = {
  parameterPath: "policyName",
  mapper: {
    required: true,
    serializedName: "policyName",
    constraints: {
      MaxLength: 128
    },
    type: {
      name: "String"
    }
  }
};
export const predefinedPolicyName: coreHttp.OperationURLParameter = {
  parameterPath: "predefinedPolicyName",
  mapper: {
    required: true,
    serializedName: "predefinedPolicyName",
    type: {
      name: "String"
    }
  }
};
export const privateEndpointName: coreHttp.OperationURLParameter = {
  parameterPath: "privateEndpointName",
  mapper: {
    required: true,
    serializedName: "privateEndpointName",
    type: {
      name: "String"
    }
  }
};
export const probeName: coreHttp.OperationURLParameter = {
  parameterPath: "probeName",
  mapper: {
    required: true,
    serializedName: "probeName",
    type: {
      name: "String"
    }
  }
};
export const publicIpAddressName: coreHttp.OperationURLParameter = {
  parameterPath: "publicIpAddressName",
  mapper: {
    required: true,
    serializedName: "publicIpAddressName",
    type: {
      name: "String"
    }
  }
};
export const publicIpPrefixName: coreHttp.OperationURLParameter = {
  parameterPath: "publicIpPrefixName",
  mapper: {
    required: true,
    serializedName: "publicIpPrefixName",
    type: {
      name: "String"
    }
  }
};
export const resourceGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    required: true,
    serializedName: "resourceGroupName",
    type: {
      name: "String"
    }
  }
};
export const routeFilterName: coreHttp.OperationURLParameter = {
  parameterPath: "routeFilterName",
  mapper: {
    required: true,
    serializedName: "routeFilterName",
    type: {
      name: "String"
    }
  }
};
export const routeName: coreHttp.OperationURLParameter = {
  parameterPath: "routeName",
  mapper: {
    required: true,
    serializedName: "routeName",
    type: {
      name: "String"
    }
  }
};
export const routeTableName: coreHttp.OperationURLParameter = {
  parameterPath: "routeTableName",
  mapper: {
    required: true,
    serializedName: "routeTableName",
    type: {
      name: "String"
    }
  }
};
export const ruleName: coreHttp.OperationURLParameter = {
  parameterPath: "ruleName",
  mapper: {
    required: true,
    serializedName: "ruleName",
    type: {
      name: "String"
    }
  }
};
export const securityRuleName: coreHttp.OperationURLParameter = {
  parameterPath: "securityRuleName",
  mapper: {
    required: true,
    serializedName: "securityRuleName",
    type: {
      name: "String"
    }
  }
};
export const serviceEndpointPolicyDefinitionName: coreHttp.OperationURLParameter = {
  parameterPath: "serviceEndpointPolicyDefinitionName",
  mapper: {
    required: true,
    serializedName: "serviceEndpointPolicyDefinitionName",
    type: {
      name: "String"
    }
  }
};
export const serviceEndpointPolicyName: coreHttp.OperationURLParameter = {
  parameterPath: "serviceEndpointPolicyName",
  mapper: {
    required: true,
    serializedName: "serviceEndpointPolicyName",
    type: {
      name: "String"
    }
  }
};
export const serviceName: coreHttp.OperationURLParameter = {
  parameterPath: "serviceName",
  mapper: {
    required: true,
    serializedName: "serviceName",
    type: {
      name: "String"
    }
  }
};
export const subnetName: coreHttp.OperationURLParameter = {
  parameterPath: "subnetName",
  mapper: {
    required: true,
    serializedName: "subnetName",
    type: {
      name: "String"
    }
  }
};
export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    required: true,
    serializedName: "subscriptionId",
    type: {
      name: "String"
    }
  }
};
export const tapConfigurationName: coreHttp.OperationURLParameter = {
  parameterPath: "tapConfigurationName",
  mapper: {
    required: true,
    serializedName: "tapConfigurationName",
    type: {
      name: "String"
    }
  }
};
export const tapName: coreHttp.OperationURLParameter = {
  parameterPath: "tapName",
  mapper: {
    required: true,
    serializedName: "tapName",
    type: {
      name: "String"
    }
  }
};
export const virtualHubName: coreHttp.OperationURLParameter = {
  parameterPath: "virtualHubName",
  mapper: {
    required: true,
    serializedName: "virtualHubName",
    type: {
      name: "String"
    }
  }
};
export const virtualmachineIndex: coreHttp.OperationURLParameter = {
  parameterPath: "virtualmachineIndex",
  mapper: {
    required: true,
    serializedName: "virtualmachineIndex",
    type: {
      name: "String"
    }
  }
};
export const virtualMachineScaleSetName: coreHttp.OperationURLParameter = {
  parameterPath: "virtualMachineScaleSetName",
  mapper: {
    required: true,
    serializedName: "virtualMachineScaleSetName",
    type: {
      name: "String"
    }
  }
};
export const virtualNetworkGatewayConnectionName: coreHttp.OperationURLParameter = {
  parameterPath: "virtualNetworkGatewayConnectionName",
  mapper: {
    required: true,
    serializedName: "virtualNetworkGatewayConnectionName",
    type: {
      name: "String"
    }
  }
};
export const virtualNetworkGatewayName: coreHttp.OperationURLParameter = {
  parameterPath: "virtualNetworkGatewayName",
  mapper: {
    required: true,
    serializedName: "virtualNetworkGatewayName",
    type: {
      name: "String"
    }
  }
};
export const virtualNetworkName: coreHttp.OperationURLParameter = {
  parameterPath: "virtualNetworkName",
  mapper: {
    required: true,
    serializedName: "virtualNetworkName",
    type: {
      name: "String"
    }
  }
};
export const virtualNetworkPeeringName: coreHttp.OperationURLParameter = {
  parameterPath: "virtualNetworkPeeringName",
  mapper: {
    required: true,
    serializedName: "virtualNetworkPeeringName",
    type: {
      name: "String"
    }
  }
};
export const virtualWanName: coreHttp.OperationURLParameter = {
  parameterPath: "virtualWanName",
  mapper: {
    required: true,
    serializedName: "virtualWanName",
    type: {
      name: "String"
    }
  }
};
export const virtualWANName0: coreHttp.OperationURLParameter = {
  parameterPath: "virtualWANName",
  mapper: {
    required: true,
    serializedName: "virtualWANName",
    type: {
      name: "String"
    }
  }
};
export const virtualWANName1: coreHttp.OperationURLParameter = {
  parameterPath: "virtualWANName",
  mapper: {
    required: true,
    serializedName: "VirtualWANName",
    type: {
      name: "String"
    }
  }
};
export const vpnSiteLinkName: coreHttp.OperationURLParameter = {
  parameterPath: "vpnSiteLinkName",
  mapper: {
    required: true,
    serializedName: "vpnSiteLinkName",
    type: {
      name: "String"
    }
  }
};
export const vpnSiteName: coreHttp.OperationURLParameter = {
  parameterPath: "vpnSiteName",
  mapper: {
    required: true,
    serializedName: "vpnSiteName",
    type: {
      name: "String"
    }
  }
};
