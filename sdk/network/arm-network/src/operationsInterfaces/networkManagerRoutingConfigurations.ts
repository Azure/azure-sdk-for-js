/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  NetworkManagerRoutingConfiguration,
  NetworkManagerRoutingConfigurationsListOptionalParams,
  NetworkManagerRoutingConfigurationsGetOptionalParams,
  NetworkManagerRoutingConfigurationsGetResponse,
  NetworkManagerRoutingConfigurationsCreateOrUpdateOptionalParams,
  NetworkManagerRoutingConfigurationsCreateOrUpdateResponse,
  NetworkManagerRoutingConfigurationsDeleteOptionalParams,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a NetworkManagerRoutingConfigurations. */
export interface NetworkManagerRoutingConfigurations {
  /**
   * Lists all the network manager routing configurations in a network manager, in a paginated format.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkManagerName The name of the network manager.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    networkManagerName: string,
    options?: NetworkManagerRoutingConfigurationsListOptionalParams,
  ): PagedAsyncIterableIterator<NetworkManagerRoutingConfiguration>;
  /**
   * Retrieves a network manager routing configuration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager Routing Configuration.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    networkManagerName: string,
    configurationName: string,
    options?: NetworkManagerRoutingConfigurationsGetOptionalParams,
  ): Promise<NetworkManagerRoutingConfigurationsGetResponse>;
  /**
   * Creates or updates a network manager routing configuration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager Routing Configuration.
   * @param routingConfiguration The routing configuration to create or update
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    networkManagerName: string,
    configurationName: string,
    routingConfiguration: NetworkManagerRoutingConfiguration,
    options?: NetworkManagerRoutingConfigurationsCreateOrUpdateOptionalParams,
  ): Promise<NetworkManagerRoutingConfigurationsCreateOrUpdateResponse>;
  /**
   * Deletes a network manager routing configuration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager Routing Configuration.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    networkManagerName: string,
    configurationName: string,
    options?: NetworkManagerRoutingConfigurationsDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Deletes a network manager routing configuration.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the network manager Routing Configuration.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    networkManagerName: string,
    configurationName: string,
    options?: NetworkManagerRoutingConfigurationsDeleteOptionalParams,
  ): Promise<void>;
}
