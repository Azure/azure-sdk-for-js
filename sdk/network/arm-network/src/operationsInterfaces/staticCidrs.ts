/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  StaticCidr,
  StaticCidrsListOptionalParams,
  StaticCidrsCreateOptionalParams,
  StaticCidrsCreateResponse,
  StaticCidrsGetOptionalParams,
  StaticCidrsGetResponse,
  StaticCidrsDeleteOptionalParams,
  StaticCidrsDeleteResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a StaticCidrs. */
export interface StaticCidrs {
  /**
   * Gets list of Static CIDR resources at Network Manager level.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param poolName Pool resource name.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    options?: StaticCidrsListOptionalParams,
  ): PagedAsyncIterableIterator<StaticCidr>;
  /**
   * Creates/Updates the Static CIDR resource.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param poolName IP Address Manager Pool resource name.
   * @param staticCidrName Static Cidr allocation name.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    staticCidrName: string,
    options?: StaticCidrsCreateOptionalParams,
  ): Promise<StaticCidrsCreateResponse>;
  /**
   * Gets the specific Static CIDR resource.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param poolName Pool resource name.
   * @param staticCidrName StaticCidr resource name to retrieve.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    staticCidrName: string,
    options?: StaticCidrsGetOptionalParams,
  ): Promise<StaticCidrsGetResponse>;
  /**
   * Delete the Static CIDR resource.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param poolName Pool resource name.
   * @param staticCidrName StaticCidr resource name to delete.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    staticCidrName: string,
    options?: StaticCidrsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<StaticCidrsDeleteResponse>,
      StaticCidrsDeleteResponse
    >
  >;
  /**
   * Delete the Static CIDR resource.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param poolName Pool resource name.
   * @param staticCidrName StaticCidr resource name to delete.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    staticCidrName: string,
    options?: StaticCidrsDeleteOptionalParams,
  ): Promise<StaticCidrsDeleteResponse>;
}
