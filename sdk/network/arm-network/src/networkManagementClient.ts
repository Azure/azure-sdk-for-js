/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import * as operations from "./operations";
import { NetworkManagementClientContext } from "./networkManagementClientContext";


class NetworkManagementClient extends NetworkManagementClientContext {
  // Operation groups
  applicationGateways: operations.ApplicationGateways;
  applicationSecurityGroups: operations.ApplicationSecurityGroups;
  availableDelegations: operations.AvailableDelegations;
  availableResourceGroupDelegations: operations.AvailableResourceGroupDelegations;
  availableServiceAliases: operations.AvailableServiceAliases;
  azureFirewalls: operations.AzureFirewalls;
  azureFirewallFqdnTags: operations.AzureFirewallFqdnTags;
  bastionHosts: operations.BastionHosts;
  ddosCustomPolicies: operations.DdosCustomPolicies;
  ddosProtectionPlans: operations.DdosProtectionPlans;
  availableEndpointServices: operations.AvailableEndpointServices;
  expressRouteCircuitAuthorizations: operations.ExpressRouteCircuitAuthorizations;
  expressRouteCircuitPeerings: operations.ExpressRouteCircuitPeerings;
  expressRouteCircuitConnections: operations.ExpressRouteCircuitConnections;
  peerExpressRouteCircuitConnections: operations.PeerExpressRouteCircuitConnections;
  expressRouteCircuits: operations.ExpressRouteCircuits;
  expressRouteServiceProviders: operations.ExpressRouteServiceProviders;
  expressRouteCrossConnections: operations.ExpressRouteCrossConnections;
  expressRouteCrossConnectionPeerings: operations.ExpressRouteCrossConnectionPeerings;
  expressRouteGateways: operations.ExpressRouteGateways;
  expressRouteConnections: operations.ExpressRouteConnections;
  expressRoutePortsLocations: operations.ExpressRoutePortsLocations;
  expressRoutePorts: operations.ExpressRoutePorts;
  expressRouteLinks: operations.ExpressRouteLinks;
  firewallPolicies: operations.FirewallPolicies;
  firewallPolicyRuleGroups: operations.FirewallPolicyRuleGroups;
  ipGroups: operations.IpGroups;
  loadBalancers: operations.LoadBalancers;
  loadBalancerBackendAddressPools: operations.LoadBalancerBackendAddressPools;
  loadBalancerFrontendIPConfigurations: operations.LoadBalancerFrontendIPConfigurations;
  inboundNatRules: operations.InboundNatRules;
  loadBalancerLoadBalancingRules: operations.LoadBalancerLoadBalancingRules;
  loadBalancerOutboundRules: operations.LoadBalancerOutboundRules;
  loadBalancerNetworkInterfaces: operations.LoadBalancerNetworkInterfaces;
  loadBalancerProbes: operations.LoadBalancerProbes;
  natGateways: operations.NatGateways;
  networkInterfaces: operations.NetworkInterfaces;
  networkInterfaceIPConfigurations: operations.NetworkInterfaceIPConfigurations;
  networkInterfaceLoadBalancers: operations.NetworkInterfaceLoadBalancers;
  networkInterfaceTapConfigurations: operations.NetworkInterfaceTapConfigurations;
  networkProfiles: operations.NetworkProfiles;
  networkSecurityGroups: operations.NetworkSecurityGroups;
  securityRules: operations.SecurityRules;
  defaultSecurityRules: operations.DefaultSecurityRules;
  networkVirtualAppliances: operations.NetworkVirtualAppliances;
  networkWatchers: operations.NetworkWatchers;
  packetCaptures: operations.PacketCaptures;
  connectionMonitors: operations.ConnectionMonitors;
  flowLogs: operations.FlowLogs;
  operations: operations.Operations;
  privateEndpoints: operations.PrivateEndpoints;
  availablePrivateEndpointTypes: operations.AvailablePrivateEndpointTypes;
  privateLinkServices: operations.PrivateLinkServices;
  publicIPAddresses: operations.PublicIPAddresses;
  publicIPPrefixes: operations.PublicIPPrefixes;
  routeFilters: operations.RouteFilters;
  routeFilterRules: operations.RouteFilterRules;
  routeTables: operations.RouteTables;
  routes: operations.Routes;
  bgpServiceCommunities: operations.BgpServiceCommunities;
  serviceEndpointPolicies: operations.ServiceEndpointPolicies;
  serviceEndpointPolicyDefinitions: operations.ServiceEndpointPolicyDefinitions;
  serviceTags: operations.ServiceTags;
  usages: operations.Usages;
  virtualNetworks: operations.VirtualNetworks;
  subnets: operations.Subnets;
  resourceNavigationLinks: operations.ResourceNavigationLinks;
  serviceAssociationLinks: operations.ServiceAssociationLinks;
  virtualNetworkPeerings: operations.VirtualNetworkPeerings;
  virtualNetworkGateways: operations.VirtualNetworkGateways;
  virtualNetworkGatewayConnections: operations.VirtualNetworkGatewayConnections;
  localNetworkGateways: operations.LocalNetworkGateways;
  virtualNetworkTaps: operations.VirtualNetworkTaps;
  virtualRouters: operations.VirtualRouters;
  virtualRouterPeerings: operations.VirtualRouterPeerings;
  virtualWans: operations.VirtualWans;
  vpnSites: operations.VpnSites;
  vpnSiteLinks: operations.VpnSiteLinks;
  vpnSitesConfiguration: operations.VpnSitesConfiguration;
  vpnServerConfigurations: operations.VpnServerConfigurations;
  virtualHubs: operations.VirtualHubs;
  hubVirtualNetworkConnections: operations.HubVirtualNetworkConnections;
  vpnGateways: operations.VpnGateways;
  vpnConnections: operations.VpnConnections;
  vpnSiteLinkConnections: operations.VpnSiteLinkConnections;
  vpnLinkConnections: operations.VpnLinkConnections;
  p2sVpnGateways: operations.P2sVpnGateways;
  vpnServerConfigurationsAssociatedWithVirtualWan: operations.VpnServerConfigurationsAssociatedWithVirtualWan;
  virtualHubRouteTableV2s: operations.VirtualHubRouteTableV2s;
  webApplicationFirewallPolicies: operations.WebApplicationFirewallPolicies;

  /**
   * Initializes a new instance of the NetworkManagementClient class.
   * @param credentials Credentials needed for the client to connect to Azure.
   * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure
   * subscription. The subscription ID forms part of the URI for every service call.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, subscriptionId: string, options?: Models.NetworkManagementClientOptions) {
    super(credentials, subscriptionId, options);
    this.applicationGateways = new operations.ApplicationGateways(this);
    this.applicationSecurityGroups = new operations.ApplicationSecurityGroups(this);
    this.availableDelegations = new operations.AvailableDelegations(this);
    this.availableResourceGroupDelegations = new operations.AvailableResourceGroupDelegations(this);
    this.availableServiceAliases = new operations.AvailableServiceAliases(this);
    this.azureFirewalls = new operations.AzureFirewalls(this);
    this.azureFirewallFqdnTags = new operations.AzureFirewallFqdnTags(this);
    this.bastionHosts = new operations.BastionHosts(this);
    this.ddosCustomPolicies = new operations.DdosCustomPolicies(this);
    this.ddosProtectionPlans = new operations.DdosProtectionPlans(this);
    this.availableEndpointServices = new operations.AvailableEndpointServices(this);
    this.expressRouteCircuitAuthorizations = new operations.ExpressRouteCircuitAuthorizations(this);
    this.expressRouteCircuitPeerings = new operations.ExpressRouteCircuitPeerings(this);
    this.expressRouteCircuitConnections = new operations.ExpressRouteCircuitConnections(this);
    this.peerExpressRouteCircuitConnections = new operations.PeerExpressRouteCircuitConnections(this);
    this.expressRouteCircuits = new operations.ExpressRouteCircuits(this);
    this.expressRouteServiceProviders = new operations.ExpressRouteServiceProviders(this);
    this.expressRouteCrossConnections = new operations.ExpressRouteCrossConnections(this);
    this.expressRouteCrossConnectionPeerings = new operations.ExpressRouteCrossConnectionPeerings(this);
    this.expressRouteGateways = new operations.ExpressRouteGateways(this);
    this.expressRouteConnections = new operations.ExpressRouteConnections(this);
    this.expressRoutePortsLocations = new operations.ExpressRoutePortsLocations(this);
    this.expressRoutePorts = new operations.ExpressRoutePorts(this);
    this.expressRouteLinks = new operations.ExpressRouteLinks(this);
    this.firewallPolicies = new operations.FirewallPolicies(this);
    this.firewallPolicyRuleGroups = new operations.FirewallPolicyRuleGroups(this);
    this.ipGroups = new operations.IpGroups(this);
    this.loadBalancers = new operations.LoadBalancers(this);
    this.loadBalancerBackendAddressPools = new operations.LoadBalancerBackendAddressPools(this);
    this.loadBalancerFrontendIPConfigurations = new operations.LoadBalancerFrontendIPConfigurations(this);
    this.inboundNatRules = new operations.InboundNatRules(this);
    this.loadBalancerLoadBalancingRules = new operations.LoadBalancerLoadBalancingRules(this);
    this.loadBalancerOutboundRules = new operations.LoadBalancerOutboundRules(this);
    this.loadBalancerNetworkInterfaces = new operations.LoadBalancerNetworkInterfaces(this);
    this.loadBalancerProbes = new operations.LoadBalancerProbes(this);
    this.natGateways = new operations.NatGateways(this);
    this.networkInterfaces = new operations.NetworkInterfaces(this);
    this.networkInterfaceIPConfigurations = new operations.NetworkInterfaceIPConfigurations(this);
    this.networkInterfaceLoadBalancers = new operations.NetworkInterfaceLoadBalancers(this);
    this.networkInterfaceTapConfigurations = new operations.NetworkInterfaceTapConfigurations(this);
    this.networkProfiles = new operations.NetworkProfiles(this);
    this.networkSecurityGroups = new operations.NetworkSecurityGroups(this);
    this.securityRules = new operations.SecurityRules(this);
    this.defaultSecurityRules = new operations.DefaultSecurityRules(this);
    this.networkVirtualAppliances = new operations.NetworkVirtualAppliances(this);
    this.networkWatchers = new operations.NetworkWatchers(this);
    this.packetCaptures = new operations.PacketCaptures(this);
    this.connectionMonitors = new operations.ConnectionMonitors(this);
    this.flowLogs = new operations.FlowLogs(this);
    this.operations = new operations.Operations(this);
    this.privateEndpoints = new operations.PrivateEndpoints(this);
    this.availablePrivateEndpointTypes = new operations.AvailablePrivateEndpointTypes(this);
    this.privateLinkServices = new operations.PrivateLinkServices(this);
    this.publicIPAddresses = new operations.PublicIPAddresses(this);
    this.publicIPPrefixes = new operations.PublicIPPrefixes(this);
    this.routeFilters = new operations.RouteFilters(this);
    this.routeFilterRules = new operations.RouteFilterRules(this);
    this.routeTables = new operations.RouteTables(this);
    this.routes = new operations.Routes(this);
    this.bgpServiceCommunities = new operations.BgpServiceCommunities(this);
    this.serviceEndpointPolicies = new operations.ServiceEndpointPolicies(this);
    this.serviceEndpointPolicyDefinitions = new operations.ServiceEndpointPolicyDefinitions(this);
    this.serviceTags = new operations.ServiceTags(this);
    this.usages = new operations.Usages(this);
    this.virtualNetworks = new operations.VirtualNetworks(this);
    this.subnets = new operations.Subnets(this);
    this.resourceNavigationLinks = new operations.ResourceNavigationLinks(this);
    this.serviceAssociationLinks = new operations.ServiceAssociationLinks(this);
    this.virtualNetworkPeerings = new operations.VirtualNetworkPeerings(this);
    this.virtualNetworkGateways = new operations.VirtualNetworkGateways(this);
    this.virtualNetworkGatewayConnections = new operations.VirtualNetworkGatewayConnections(this);
    this.localNetworkGateways = new operations.LocalNetworkGateways(this);
    this.virtualNetworkTaps = new operations.VirtualNetworkTaps(this);
    this.virtualRouters = new operations.VirtualRouters(this);
    this.virtualRouterPeerings = new operations.VirtualRouterPeerings(this);
    this.virtualWans = new operations.VirtualWans(this);
    this.vpnSites = new operations.VpnSites(this);
    this.vpnSiteLinks = new operations.VpnSiteLinks(this);
    this.vpnSitesConfiguration = new operations.VpnSitesConfiguration(this);
    this.vpnServerConfigurations = new operations.VpnServerConfigurations(this);
    this.virtualHubs = new operations.VirtualHubs(this);
    this.hubVirtualNetworkConnections = new operations.HubVirtualNetworkConnections(this);
    this.vpnGateways = new operations.VpnGateways(this);
    this.vpnConnections = new operations.VpnConnections(this);
    this.vpnSiteLinkConnections = new operations.VpnSiteLinkConnections(this);
    this.vpnLinkConnections = new operations.VpnLinkConnections(this);
    this.p2sVpnGateways = new operations.P2sVpnGateways(this);
    this.vpnServerConfigurationsAssociatedWithVirtualWan = new operations.VpnServerConfigurationsAssociatedWithVirtualWan(this);
    this.virtualHubRouteTableV2s = new operations.VirtualHubRouteTableV2s(this);
    this.webApplicationFirewallPolicies = new operations.WebApplicationFirewallPolicies(this);
  }

  /**
   * Creates a Bastion Shareable Links for all the VMs specified in the request.
   * @param resourceGroupName The name of the resource group.
   * @param bastionHostName The name of the Bastion Host.
   * @param bslRequest Post request for all the Bastion Shareable Link endpoints.
   * @param [options] The optional parameters
   * @returns Promise<Models.PutBastionShareableLinkResponse>
   */
  putBastionShareableLink(resourceGroupName: string, bastionHostName: string, bslRequest: Models.BastionShareableLinkListRequest, options?: msRest.RequestOptionsBase): Promise<Models.PutBastionShareableLinkResponse> {
    return this.beginPutBastionShareableLink(resourceGroupName,bastionHostName,bslRequest,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.PutBastionShareableLinkResponse>;
  }

  /**
   * Deletes the Bastion Shareable Links for all the VMs specified in the request.
   * @param resourceGroupName The name of the resource group.
   * @param bastionHostName The name of the Bastion Host.
   * @param bslRequest Post request for all the Bastion Shareable Link endpoints.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteBastionShareableLink(resourceGroupName: string, bastionHostName: string, bslRequest: Models.BastionShareableLinkListRequest, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteBastionShareableLink(resourceGroupName,bastionHostName,bslRequest,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Return the Bastion Shareable Links for all the VMs specified in the request.
   * @param resourceGroupName The name of the resource group.
   * @param bastionHostName The name of the Bastion Host.
   * @param bslRequest Post request for all the Bastion Shareable Link endpoints.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetBastionShareableLinkResponse>
   */
  getBastionShareableLink(resourceGroupName: string, bastionHostName: string, bslRequest: Models.BastionShareableLinkListRequest, options?: msRest.RequestOptionsBase): Promise<Models.GetBastionShareableLinkResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param bastionHostName The name of the Bastion Host.
   * @param bslRequest Post request for all the Bastion Shareable Link endpoints.
   * @param callback The callback
   */
  getBastionShareableLink(resourceGroupName: string, bastionHostName: string, bslRequest: Models.BastionShareableLinkListRequest, callback: msRest.ServiceCallback<Models.BastionShareableLinkListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param bastionHostName The name of the Bastion Host.
   * @param bslRequest Post request for all the Bastion Shareable Link endpoints.
   * @param options The optional parameters
   * @param callback The callback
   */
  getBastionShareableLink(resourceGroupName: string, bastionHostName: string, bslRequest: Models.BastionShareableLinkListRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BastionShareableLinkListResult>): void;
  getBastionShareableLink(resourceGroupName: string, bastionHostName: string, bslRequest: Models.BastionShareableLinkListRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BastionShareableLinkListResult>, callback?: msRest.ServiceCallback<Models.BastionShareableLinkListResult>): Promise<Models.GetBastionShareableLinkResponse> {
    return this.sendOperationRequest(
      {
        resourceGroupName,
        bastionHostName,
        bslRequest,
        options
      },
      getBastionShareableLinkOperationSpec,
      callback) as Promise<Models.GetBastionShareableLinkResponse>;
  }

  /**
   * Returns the list of currently active sessions on the Bastion.
   * @param resourceGroupName The name of the resource group.
   * @param bastionHostName The name of the Bastion Host.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetActiveSessionsResponse>
   */
  getActiveSessions(resourceGroupName: string, bastionHostName: string, options?: msRest.RequestOptionsBase): Promise<Models.GetActiveSessionsResponse> {
    return this.beginGetActiveSessions(resourceGroupName,bastionHostName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.GetActiveSessionsResponse>;
  }

  /**
   * Returns the list of currently active sessions on the Bastion.
   * @param resourceGroupName The name of the resource group.
   * @param bastionHostName The name of the Bastion Host.
   * @param sessionIds The list of sessionids to disconnect.
   * @param [options] The optional parameters
   * @returns Promise<Models.DisconnectActiveSessionsResponse>
   */
  disconnectActiveSessions(resourceGroupName: string, bastionHostName: string, sessionIds: Models.SessionIds, options?: msRest.RequestOptionsBase): Promise<Models.DisconnectActiveSessionsResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param bastionHostName The name of the Bastion Host.
   * @param sessionIds The list of sessionids to disconnect.
   * @param callback The callback
   */
  disconnectActiveSessions(resourceGroupName: string, bastionHostName: string, sessionIds: Models.SessionIds, callback: msRest.ServiceCallback<Models.BastionSessionDeleteResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param bastionHostName The name of the Bastion Host.
   * @param sessionIds The list of sessionids to disconnect.
   * @param options The optional parameters
   * @param callback The callback
   */
  disconnectActiveSessions(resourceGroupName: string, bastionHostName: string, sessionIds: Models.SessionIds, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BastionSessionDeleteResult>): void;
  disconnectActiveSessions(resourceGroupName: string, bastionHostName: string, sessionIds: Models.SessionIds, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BastionSessionDeleteResult>, callback?: msRest.ServiceCallback<Models.BastionSessionDeleteResult>): Promise<Models.DisconnectActiveSessionsResponse> {
    return this.sendOperationRequest(
      {
        resourceGroupName,
        bastionHostName,
        sessionIds,
        options
      },
      disconnectActiveSessionsOperationSpec,
      callback) as Promise<Models.DisconnectActiveSessionsResponse>;
  }

  /**
   * Checks whether a domain name in the cloudapp.azure.com zone is available for use.
   * @param location The location of the domain name.
   * @param domainNameLabel The domain name to be verified. It must conform to the following regular
   * expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.
   * @param [options] The optional parameters
   * @returns Promise<Models.CheckDnsNameAvailabilityResponse>
   */
  checkDnsNameAvailability(location: string, domainNameLabel: string, options?: msRest.RequestOptionsBase): Promise<Models.CheckDnsNameAvailabilityResponse>;
  /**
   * @param location The location of the domain name.
   * @param domainNameLabel The domain name to be verified. It must conform to the following regular
   * expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.
   * @param callback The callback
   */
  checkDnsNameAvailability(location: string, domainNameLabel: string, callback: msRest.ServiceCallback<Models.DnsNameAvailabilityResult>): void;
  /**
   * @param location The location of the domain name.
   * @param domainNameLabel The domain name to be verified. It must conform to the following regular
   * expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkDnsNameAvailability(location: string, domainNameLabel: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DnsNameAvailabilityResult>): void;
  checkDnsNameAvailability(location: string, domainNameLabel: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DnsNameAvailabilityResult>, callback?: msRest.ServiceCallback<Models.DnsNameAvailabilityResult>): Promise<Models.CheckDnsNameAvailabilityResponse> {
    return this.sendOperationRequest(
      {
        location,
        domainNameLabel,
        options
      },
      checkDnsNameAvailabilityOperationSpec,
      callback) as Promise<Models.CheckDnsNameAvailabilityResponse>;
  }

  /**
   * Gives the supported security providers for the virtual wan.
   * @param resourceGroupName The resource group name.
   * @param virtualWANName The name of the VirtualWAN for which supported security providers are
   * needed.
   * @param [options] The optional parameters
   * @returns Promise<Models.SupportedSecurityProvidersResponse>
   */
  supportedSecurityProviders(resourceGroupName: string, virtualWANName: string, options?: msRest.RequestOptionsBase): Promise<Models.SupportedSecurityProvidersResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param virtualWANName The name of the VirtualWAN for which supported security providers are
   * needed.
   * @param callback The callback
   */
  supportedSecurityProviders(resourceGroupName: string, virtualWANName: string, callback: msRest.ServiceCallback<Models.VirtualWanSecurityProviders>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param virtualWANName The name of the VirtualWAN for which supported security providers are
   * needed.
   * @param options The optional parameters
   * @param callback The callback
   */
  supportedSecurityProviders(resourceGroupName: string, virtualWANName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VirtualWanSecurityProviders>): void;
  supportedSecurityProviders(resourceGroupName: string, virtualWANName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VirtualWanSecurityProviders>, callback?: msRest.ServiceCallback<Models.VirtualWanSecurityProviders>): Promise<Models.SupportedSecurityProvidersResponse> {
    return this.sendOperationRequest(
      {
        resourceGroupName,
        virtualWANName,
        options
      },
      supportedSecurityProvidersOperationSpec,
      callback) as Promise<Models.SupportedSecurityProvidersResponse>;
  }

  /**
   * Generates a unique VPN profile for P2S clients for VirtualWan and associated
   * VpnServerConfiguration combination in the specified resource group.
   * @param resourceGroupName The resource group name.
   * @param virtualWANName The name of the VirtualWAN whose associated VpnServerConfigurations is
   * needed.
   * @param vpnClientParams Parameters supplied to the generate VirtualWan VPN profile generation
   * operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.GeneratevirtualwanvpnserverconfigurationvpnprofileResponse>
   */
  generatevirtualwanvpnserverconfigurationvpnprofile(resourceGroupName: string, virtualWANName: string, vpnClientParams: Models.VirtualWanVpnProfileParameters, options?: msRest.RequestOptionsBase): Promise<Models.GeneratevirtualwanvpnserverconfigurationvpnprofileResponse> {
    return this.beginGeneratevirtualwanvpnserverconfigurationvpnprofile(resourceGroupName,virtualWANName,vpnClientParams,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.GeneratevirtualwanvpnserverconfigurationvpnprofileResponse>;
  }

  /**
   * Creates a Bastion Shareable Links for all the VMs specified in the request.
   * @param resourceGroupName The name of the resource group.
   * @param bastionHostName The name of the Bastion Host.
   * @param bslRequest Post request for all the Bastion Shareable Link endpoints.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPutBastionShareableLink(resourceGroupName: string, bastionHostName: string, bslRequest: Models.BastionShareableLinkListRequest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.sendLRORequest(
      {
        resourceGroupName,
        bastionHostName,
        bslRequest,
        options
      },
      beginPutBastionShareableLinkOperationSpec,
      options);
  }

  /**
   * Deletes the Bastion Shareable Links for all the VMs specified in the request.
   * @param resourceGroupName The name of the resource group.
   * @param bastionHostName The name of the Bastion Host.
   * @param bslRequest Post request for all the Bastion Shareable Link endpoints.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteBastionShareableLink(resourceGroupName: string, bastionHostName: string, bslRequest: Models.BastionShareableLinkListRequest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.sendLRORequest(
      {
        resourceGroupName,
        bastionHostName,
        bslRequest,
        options
      },
      beginDeleteBastionShareableLinkOperationSpec,
      options);
  }

  /**
   * Returns the list of currently active sessions on the Bastion.
   * @param resourceGroupName The name of the resource group.
   * @param bastionHostName The name of the Bastion Host.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginGetActiveSessions(resourceGroupName: string, bastionHostName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.sendLRORequest(
      {
        resourceGroupName,
        bastionHostName,
        options
      },
      beginGetActiveSessionsOperationSpec,
      options);
  }

  /**
   * Generates a unique VPN profile for P2S clients for VirtualWan and associated
   * VpnServerConfiguration combination in the specified resource group.
   * @param resourceGroupName The resource group name.
   * @param virtualWANName The name of the VirtualWAN whose associated VpnServerConfigurations is
   * needed.
   * @param vpnClientParams Parameters supplied to the generate VirtualWan VPN profile generation
   * operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginGeneratevirtualwanvpnserverconfigurationvpnprofile(resourceGroupName: string, virtualWANName: string, vpnClientParams: Models.VirtualWanVpnProfileParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.sendLRORequest(
      {
        resourceGroupName,
        virtualWANName,
        vpnClientParams,
        options
      },
      beginGeneratevirtualwanvpnserverconfigurationvpnprofileOperationSpec,
      options);
  }

  /**
   * Creates a Bastion Shareable Links for all the VMs specified in the request.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PutBastionShareableLinkNextResponse>
   */
  putBastionShareableLinkNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PutBastionShareableLinkNextResponse> {
    return this.beginPutBastionShareableLinkNext(nextPageLink,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.PutBastionShareableLinkNextResponse>;
  }

  /**
   * Return the Bastion Shareable Links for all the VMs specified in the request.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetBastionShareableLinkNextResponse>
   */
  getBastionShareableLinkNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.GetBastionShareableLinkNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getBastionShareableLinkNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.BastionShareableLinkListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getBastionShareableLinkNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BastionShareableLinkListResult>): void;
  getBastionShareableLinkNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BastionShareableLinkListResult>, callback?: msRest.ServiceCallback<Models.BastionShareableLinkListResult>): Promise<Models.GetBastionShareableLinkNextResponse> {
    return this.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getBastionShareableLinkNextOperationSpec,
      callback) as Promise<Models.GetBastionShareableLinkNextResponse>;
  }

  /**
   * Returns the list of currently active sessions on the Bastion.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetActiveSessionsNextResponse>
   */
  getActiveSessionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.GetActiveSessionsNextResponse> {
    return this.beginGetActiveSessionsNext(nextPageLink,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.GetActiveSessionsNextResponse>;
  }

  /**
   * Returns the list of currently active sessions on the Bastion.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DisconnectActiveSessionsNextResponse>
   */
  disconnectActiveSessionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DisconnectActiveSessionsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  disconnectActiveSessionsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.BastionSessionDeleteResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  disconnectActiveSessionsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BastionSessionDeleteResult>): void;
  disconnectActiveSessionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BastionSessionDeleteResult>, callback?: msRest.ServiceCallback<Models.BastionSessionDeleteResult>): Promise<Models.DisconnectActiveSessionsNextResponse> {
    return this.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      disconnectActiveSessionsNextOperationSpec,
      callback) as Promise<Models.DisconnectActiveSessionsNextResponse>;
  }

  /**
   * Creates a Bastion Shareable Links for all the VMs specified in the request.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPutBastionShareableLinkNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.sendLRORequest(
      {
        nextPageLink,
        options
      },
      beginPutBastionShareableLinkNextOperationSpec,
      options);
  }

  /**
   * Returns the list of currently active sessions on the Bastion.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginGetActiveSessionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.sendLRORequest(
      {
        nextPageLink,
        options
      },
      beginGetActiveSessionsNextOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getBastionShareableLinkOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/bastionHosts/{bastionHostName}/getShareableLinks",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.bastionHostName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "bslRequest",
    mapper: {
      ...Mappers.BastionShareableLinkListRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.BastionShareableLinkListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const disconnectActiveSessionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/bastionHosts/{bastionHostName}/disconnectActiveSessions",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.bastionHostName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "sessionIds",
    mapper: {
      ...Mappers.SessionIds,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.BastionSessionDeleteResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const checkDnsNameAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/CheckDnsNameAvailability",
  urlParameters: [
    Parameters.location0,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.domainNameLabel,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DnsNameAvailabilityResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const supportedSecurityProvidersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWANName}/supportedSecurityProviders",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualWANName0
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualWanSecurityProviders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPutBastionShareableLinkOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/bastionHosts/{bastionHostName}/createShareableLinks",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.bastionHostName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "bslRequest",
    mapper: {
      ...Mappers.BastionShareableLinkListRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.BastionShareableLinkListResult
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteBastionShareableLinkOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/bastionHosts/{bastionHostName}/deleteShareableLinks",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.bastionHostName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "bslRequest",
    mapper: {
      ...Mappers.BastionShareableLinkListRequest,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginGetActiveSessionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/bastionHosts/{bastionHostName}/getActiveSessions",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.bastionHostName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BastionActiveSessionListResult
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginGeneratevirtualwanvpnserverconfigurationvpnprofileOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWANName}/GenerateVpnProfile",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualWANName0
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "vpnClientParams",
    mapper: {
      ...Mappers.VirtualWanVpnProfileParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VpnProfileResponse
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getBastionShareableLinkNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BastionShareableLinkListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const disconnectActiveSessionsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BastionSessionDeleteResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPutBastionShareableLinkNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BastionShareableLinkListResult
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginGetActiveSessionsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BastionActiveSessionListResult
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

export {
  NetworkManagementClient,
  NetworkManagementClientContext,
  Models as NetworkManagementModels,
  Mappers as NetworkManagementMappers
};
export * from "./operations";
