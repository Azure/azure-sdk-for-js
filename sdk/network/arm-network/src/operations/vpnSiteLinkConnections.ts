/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/vpnSiteLinkConnectionsMappers";
import * as Parameters from "../models/parameters";
import { NetworkManagementClientContext } from "../networkManagementClientContext";

/** Class representing a VpnSiteLinkConnections. */
export class VpnSiteLinkConnections {
  private readonly client: NetworkManagementClientContext;

  /**
   * Create a VpnSiteLinkConnections.
   * @param {NetworkManagementClientContext} client Reference to the service client.
   */
  constructor(client: NetworkManagementClientContext) {
    this.client = client;
  }

  /**
   * Retrieves the details of a vpn site link connection.
   * @param resourceGroupName The resource group name of the VpnGateway.
   * @param gatewayName The name of the gateway.
   * @param connectionName The name of the vpn connection.
   * @param linkConnectionName The name of the vpn connection.
   * @param [options] The optional parameters
   * @returns Promise<Models.VpnSiteLinkConnectionsGetResponse>
   */
  get(resourceGroupName: string, gatewayName: string, connectionName: string, linkConnectionName: string, options?: msRest.RequestOptionsBase): Promise<Models.VpnSiteLinkConnectionsGetResponse>;
  /**
   * @param resourceGroupName The resource group name of the VpnGateway.
   * @param gatewayName The name of the gateway.
   * @param connectionName The name of the vpn connection.
   * @param linkConnectionName The name of the vpn connection.
   * @param callback The callback
   */
  get(resourceGroupName: string, gatewayName: string, connectionName: string, linkConnectionName: string, callback: msRest.ServiceCallback<Models.VpnSiteLinkConnection>): void;
  /**
   * @param resourceGroupName The resource group name of the VpnGateway.
   * @param gatewayName The name of the gateway.
   * @param connectionName The name of the vpn connection.
   * @param linkConnectionName The name of the vpn connection.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, gatewayName: string, connectionName: string, linkConnectionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VpnSiteLinkConnection>): void;
  get(resourceGroupName: string, gatewayName: string, connectionName: string, linkConnectionName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VpnSiteLinkConnection>, callback?: msRest.ServiceCallback<Models.VpnSiteLinkConnection>): Promise<Models.VpnSiteLinkConnectionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        gatewayName,
        connectionName,
        linkConnectionName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.VpnSiteLinkConnectionsGetResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/vpnConnections/{connectionName}/vpnLinkConnections/{linkConnectionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.gatewayName,
    Parameters.connectionName,
    Parameters.linkConnectionName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VpnSiteLinkConnection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
