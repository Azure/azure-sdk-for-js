/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/vpnSiteLinksMappers";
import * as Parameters from "../models/parameters";
import { NetworkManagementClientContext } from "../networkManagementClientContext";

/** Class representing a VpnSiteLinks. */
export class VpnSiteLinks {
  private readonly client: NetworkManagementClientContext;

  /**
   * Create a VpnSiteLinks.
   * @param {NetworkManagementClientContext} client Reference to the service client.
   */
  constructor(client: NetworkManagementClientContext) {
    this.client = client;
  }

  /**
   * Retrieves the details of a VPN site link.
   * @param resourceGroupName The resource group name of the VpnSite.
   * @param vpnSiteName The name of the VpnSite.
   * @param vpnSiteLinkName The name of the VpnSiteLink being retrieved.
   * @param [options] The optional parameters
   * @returns Promise<Models.VpnSiteLinksGetResponse>
   */
  get(resourceGroupName: string, vpnSiteName: string, vpnSiteLinkName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.VpnSiteLinksGetResponse>;
  /**
   * @param resourceGroupName The resource group name of the VpnSite.
   * @param vpnSiteName The name of the VpnSite.
   * @param vpnSiteLinkName The name of the VpnSiteLink being retrieved.
   * @param callback The callback
   */
  get(resourceGroupName: string, vpnSiteName: string, vpnSiteLinkName: string, callback: coreHttp.ServiceCallback<Models.VpnSiteLink>): void;
  /**
   * @param resourceGroupName The resource group name of the VpnSite.
   * @param vpnSiteName The name of the VpnSite.
   * @param vpnSiteLinkName The name of the VpnSiteLink being retrieved.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, vpnSiteName: string, vpnSiteLinkName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.VpnSiteLink>): void;
  get(resourceGroupName: string, vpnSiteName: string, vpnSiteLinkName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.VpnSiteLink>, callback?: coreHttp.ServiceCallback<Models.VpnSiteLink>): Promise<Models.VpnSiteLinksGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vpnSiteName,
        vpnSiteLinkName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.VpnSiteLinksGetResponse>;
  }

  /**
   * Lists all the vpnSiteLinks in a resource group for a vpn site.
   * @param resourceGroupName The resource group name of the VpnSite.
   * @param vpnSiteName The name of the VpnSite.
   * @param [options] The optional parameters
   * @returns Promise<Models.VpnSiteLinksListByVpnSiteResponse>
   */
  listByVpnSite(resourceGroupName: string, vpnSiteName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.VpnSiteLinksListByVpnSiteResponse>;
  /**
   * @param resourceGroupName The resource group name of the VpnSite.
   * @param vpnSiteName The name of the VpnSite.
   * @param callback The callback
   */
  listByVpnSite(resourceGroupName: string, vpnSiteName: string, callback: coreHttp.ServiceCallback<Models.ListVpnSiteLinksResult>): void;
  /**
   * @param resourceGroupName The resource group name of the VpnSite.
   * @param vpnSiteName The name of the VpnSite.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByVpnSite(resourceGroupName: string, vpnSiteName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.ListVpnSiteLinksResult>): void;
  listByVpnSite(resourceGroupName: string, vpnSiteName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.ListVpnSiteLinksResult>, callback?: coreHttp.ServiceCallback<Models.ListVpnSiteLinksResult>): Promise<Models.VpnSiteLinksListByVpnSiteResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vpnSiteName,
        options
      },
      listByVpnSiteOperationSpec,
      callback) as Promise<Models.VpnSiteLinksListByVpnSiteResponse>;
  }

  /**
   * Lists all the vpnSiteLinks in a resource group for a vpn site.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.VpnSiteLinksListByVpnSiteNextResponse>
   */
  listByVpnSiteNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase): Promise<Models.VpnSiteLinksListByVpnSiteNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByVpnSiteNext(nextPageLink: string, callback: coreHttp.ServiceCallback<Models.ListVpnSiteLinksResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByVpnSiteNext(nextPageLink: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.ListVpnSiteLinksResult>): void;
  listByVpnSiteNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.ListVpnSiteLinksResult>, callback?: coreHttp.ServiceCallback<Models.ListVpnSiteLinksResult>): Promise<Models.VpnSiteLinksListByVpnSiteNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByVpnSiteNextOperationSpec,
      callback) as Promise<Models.VpnSiteLinksListByVpnSiteNextResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const getOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnSites/{vpnSiteName}/vpnSiteLinks/{vpnSiteLinkName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vpnSiteName,
    Parameters.vpnSiteLinkName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VpnSiteLink
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listByVpnSiteOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnSites/{vpnSiteName}/vpnSiteLinks",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vpnSiteName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListVpnSiteLinksResult
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listByVpnSiteNextOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListVpnSiteLinksResult
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
