/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/connectionMonitorsMappers";
import * as Parameters from "../models/parameters";
import { NetworkManagementClientContext } from "../networkManagementClientContext";

/** Class representing a ConnectionMonitors. */
export class ConnectionMonitors {
  private readonly client: NetworkManagementClientContext;

  /**
   * Create a ConnectionMonitors.
   * @param {NetworkManagementClientContext} client Reference to the service client.
   */
  constructor(client: NetworkManagementClientContext) {
    this.client = client;
  }

  /**
   * Create or update a connection monitor.
   * @param resourceGroupName The name of the resource group containing Network Watcher.
   * @param networkWatcherName The name of the Network Watcher resource.
   * @param connectionMonitorName The name of the connection monitor.
   * @param parameters Parameters that define the operation to create a connection monitor.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectionMonitorsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, parameters: Models.ConnectionMonitor, options?: msRest.RequestOptionsBase): Promise<Models.ConnectionMonitorsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,networkWatcherName,connectionMonitorName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ConnectionMonitorsCreateOrUpdateResponse>;
  }

  /**
   * Gets a connection monitor by name.
   * @param resourceGroupName The name of the resource group containing Network Watcher.
   * @param networkWatcherName The name of the Network Watcher resource.
   * @param connectionMonitorName The name of the connection monitor.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectionMonitorsGetResponse>
   */
  get(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: msRest.RequestOptionsBase): Promise<Models.ConnectionMonitorsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group containing Network Watcher.
   * @param networkWatcherName The name of the Network Watcher resource.
   * @param connectionMonitorName The name of the connection monitor.
   * @param callback The callback
   */
  get(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, callback: msRest.ServiceCallback<Models.ConnectionMonitorResult>): void;
  /**
   * @param resourceGroupName The name of the resource group containing Network Watcher.
   * @param networkWatcherName The name of the Network Watcher resource.
   * @param connectionMonitorName The name of the connection monitor.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionMonitorResult>): void;
  get(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ConnectionMonitorResult>, callback?: msRest.ServiceCallback<Models.ConnectionMonitorResult>): Promise<Models.ConnectionMonitorsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkWatcherName,
        connectionMonitorName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ConnectionMonitorsGetResponse>;
  }

  /**
   * Deletes the specified connection monitor.
   * @param resourceGroupName The name of the resource group containing Network Watcher.
   * @param networkWatcherName The name of the Network Watcher resource.
   * @param connectionMonitorName The name of the connection monitor.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,networkWatcherName,connectionMonitorName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Update tags of the specified connection monitor.
   * @param resourceGroupName The name of the resource group.
   * @param networkWatcherName The name of the network watcher.
   * @param connectionMonitorName The name of the connection monitor.
   * @param parameters Parameters supplied to update connection monitor tags.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectionMonitorsUpdateTagsResponse>
   */
  updateTags(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, parameters: Models.TagsObject, options?: msRest.RequestOptionsBase): Promise<Models.ConnectionMonitorsUpdateTagsResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkWatcherName The name of the network watcher.
   * @param connectionMonitorName The name of the connection monitor.
   * @param parameters Parameters supplied to update connection monitor tags.
   * @param callback The callback
   */
  updateTags(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, parameters: Models.TagsObject, callback: msRest.ServiceCallback<Models.ConnectionMonitorResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkWatcherName The name of the network watcher.
   * @param connectionMonitorName The name of the connection monitor.
   * @param parameters Parameters supplied to update connection monitor tags.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateTags(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, parameters: Models.TagsObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionMonitorResult>): void;
  updateTags(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, parameters: Models.TagsObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ConnectionMonitorResult>, callback?: msRest.ServiceCallback<Models.ConnectionMonitorResult>): Promise<Models.ConnectionMonitorsUpdateTagsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkWatcherName,
        connectionMonitorName,
        parameters,
        options
      },
      updateTagsOperationSpec,
      callback) as Promise<Models.ConnectionMonitorsUpdateTagsResponse>;
  }

  /**
   * Stops the specified connection monitor.
   * @param resourceGroupName The name of the resource group containing Network Watcher.
   * @param networkWatcherName The name of the Network Watcher resource.
   * @param connectionMonitorName The name of the connection monitor.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  stop(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginStop(resourceGroupName,networkWatcherName,connectionMonitorName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Starts the specified connection monitor.
   * @param resourceGroupName The name of the resource group containing Network Watcher.
   * @param networkWatcherName The name of the Network Watcher resource.
   * @param connectionMonitorName The name of the connection monitor.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  start(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginStart(resourceGroupName,networkWatcherName,connectionMonitorName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Query a snapshot of the most recent connection states.
   * @param resourceGroupName The name of the resource group containing Network Watcher.
   * @param networkWatcherName The name of the Network Watcher resource.
   * @param connectionMonitorName The name given to the connection monitor.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectionMonitorsQueryResponse>
   */
  query(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: msRest.RequestOptionsBase): Promise<Models.ConnectionMonitorsQueryResponse> {
    return this.beginQuery(resourceGroupName,networkWatcherName,connectionMonitorName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ConnectionMonitorsQueryResponse>;
  }

  /**
   * Lists all connection monitors for the specified Network Watcher.
   * @param resourceGroupName The name of the resource group containing Network Watcher.
   * @param networkWatcherName The name of the Network Watcher resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectionMonitorsListResponse>
   */
  list(resourceGroupName: string, networkWatcherName: string, options?: msRest.RequestOptionsBase): Promise<Models.ConnectionMonitorsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group containing Network Watcher.
   * @param networkWatcherName The name of the Network Watcher resource.
   * @param callback The callback
   */
  list(resourceGroupName: string, networkWatcherName: string, callback: msRest.ServiceCallback<Models.ConnectionMonitorListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group containing Network Watcher.
   * @param networkWatcherName The name of the Network Watcher resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, networkWatcherName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionMonitorListResult>): void;
  list(resourceGroupName: string, networkWatcherName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ConnectionMonitorListResult>, callback?: msRest.ServiceCallback<Models.ConnectionMonitorListResult>): Promise<Models.ConnectionMonitorsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkWatcherName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.ConnectionMonitorsListResponse>;
  }

  /**
   * Create or update a connection monitor.
   * @param resourceGroupName The name of the resource group containing Network Watcher.
   * @param networkWatcherName The name of the Network Watcher resource.
   * @param connectionMonitorName The name of the connection monitor.
   * @param parameters Parameters that define the operation to create a connection monitor.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, parameters: Models.ConnectionMonitor, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        networkWatcherName,
        connectionMonitorName,
        parameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Deletes the specified connection monitor.
   * @param resourceGroupName The name of the resource group containing Network Watcher.
   * @param networkWatcherName The name of the Network Watcher resource.
   * @param connectionMonitorName The name of the connection monitor.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        networkWatcherName,
        connectionMonitorName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Stops the specified connection monitor.
   * @param resourceGroupName The name of the resource group containing Network Watcher.
   * @param networkWatcherName The name of the Network Watcher resource.
   * @param connectionMonitorName The name of the connection monitor.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginStop(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        networkWatcherName,
        connectionMonitorName,
        options
      },
      beginStopOperationSpec,
      options);
  }

  /**
   * Starts the specified connection monitor.
   * @param resourceGroupName The name of the resource group containing Network Watcher.
   * @param networkWatcherName The name of the Network Watcher resource.
   * @param connectionMonitorName The name of the connection monitor.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginStart(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        networkWatcherName,
        connectionMonitorName,
        options
      },
      beginStartOperationSpec,
      options);
  }

  /**
   * Query a snapshot of the most recent connection states.
   * @param resourceGroupName The name of the resource group containing Network Watcher.
   * @param networkWatcherName The name of the Network Watcher resource.
   * @param connectionMonitorName The name given to the connection monitor.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginQuery(resourceGroupName: string, networkWatcherName: string, connectionMonitorName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        networkWatcherName,
        connectionMonitorName,
        options
      },
      beginQueryOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.connectionMonitorName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionMonitorResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateTagsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.connectionMonitorName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.TagsObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionMonitorResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionMonitorListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.connectionMonitorName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.ConnectionMonitor,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionMonitorResult
    },
    201: {
      bodyMapper: Mappers.ConnectionMonitorResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.connectionMonitorName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginStopOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}/stop",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.connectionMonitorName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginStartOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}/start",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.connectionMonitorName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginQueryOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}/query",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.networkWatcherName,
    Parameters.connectionMonitorName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionMonitorQueryResult
    },
    202: {
      bodyMapper: Mappers.ConnectionMonitorQueryResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
