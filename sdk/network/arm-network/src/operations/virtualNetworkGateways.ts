/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/virtualNetworkGatewaysMappers";
import * as Parameters from "../models/parameters";
import { NetworkManagementClientContext } from "../networkManagementClientContext";

/** Class representing a VirtualNetworkGateways. */
export class VirtualNetworkGateways {
  private readonly client: NetworkManagementClientContext;

  /**
   * Create a VirtualNetworkGateways.
   * @param {NetworkManagementClientContext} client Reference to the service client.
   */
  constructor(client: NetworkManagementClientContext) {
    this.client = client;
  }

  /**
   * Creates or updates a virtual network gateway in the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param parameters Parameters supplied to create or update virtual network gateway operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualNetworkGatewaysCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: Models.VirtualNetworkGateway, options?: msRest.RequestOptionsBase): Promise<Models.VirtualNetworkGatewaysCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,virtualNetworkGatewayName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualNetworkGatewaysCreateOrUpdateResponse>;
  }

  /**
   * Gets the specified virtual network gateway by resource group.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualNetworkGatewaysGetResponse>
   */
  get(resourceGroupName: string, virtualNetworkGatewayName: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualNetworkGatewaysGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param callback The callback
   */
  get(resourceGroupName: string, virtualNetworkGatewayName: string, callback: msRest.ServiceCallback<Models.VirtualNetworkGateway>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, virtualNetworkGatewayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VirtualNetworkGateway>): void;
  get(resourceGroupName: string, virtualNetworkGatewayName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VirtualNetworkGateway>, callback?: msRest.ServiceCallback<Models.VirtualNetworkGateway>): Promise<Models.VirtualNetworkGatewaysGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        virtualNetworkGatewayName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.VirtualNetworkGatewaysGetResponse>;
  }

  /**
   * Deletes the specified virtual network gateway.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, virtualNetworkGatewayName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,virtualNetworkGatewayName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Updates a virtual network gateway tags.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param parameters Parameters supplied to update virtual network gateway tags.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualNetworkGatewaysUpdateTagsResponse>
   */
  updateTags(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: Models.TagsObject, options?: msRest.RequestOptionsBase): Promise<Models.VirtualNetworkGatewaysUpdateTagsResponse> {
    return this.beginUpdateTags(resourceGroupName,virtualNetworkGatewayName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualNetworkGatewaysUpdateTagsResponse>;
  }

  /**
   * Gets all virtual network gateways by resource group.
   * @param resourceGroupName The name of the resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualNetworkGatewaysListResponse>
   */
  list(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualNetworkGatewaysListResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param callback The callback
   */
  list(resourceGroupName: string, callback: msRest.ServiceCallback<Models.VirtualNetworkGatewayListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VirtualNetworkGatewayListResult>): void;
  list(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VirtualNetworkGatewayListResult>, callback?: msRest.ServiceCallback<Models.VirtualNetworkGatewayListResult>): Promise<Models.VirtualNetworkGatewaysListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.VirtualNetworkGatewaysListResponse>;
  }

  /**
   * Gets all the connections in a virtual network gateway.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualNetworkGatewaysListConnectionsResponse>
   */
  listConnections(resourceGroupName: string, virtualNetworkGatewayName: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualNetworkGatewaysListConnectionsResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param callback The callback
   */
  listConnections(resourceGroupName: string, virtualNetworkGatewayName: string, callback: msRest.ServiceCallback<Models.VirtualNetworkGatewayListConnectionsResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param options The optional parameters
   * @param callback The callback
   */
  listConnections(resourceGroupName: string, virtualNetworkGatewayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VirtualNetworkGatewayListConnectionsResult>): void;
  listConnections(resourceGroupName: string, virtualNetworkGatewayName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VirtualNetworkGatewayListConnectionsResult>, callback?: msRest.ServiceCallback<Models.VirtualNetworkGatewayListConnectionsResult>): Promise<Models.VirtualNetworkGatewaysListConnectionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        virtualNetworkGatewayName,
        options
      },
      listConnectionsOperationSpec,
      callback) as Promise<Models.VirtualNetworkGatewaysListConnectionsResponse>;
  }

  /**
   * Resets the primary of the virtual network gateway in the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualNetworkGatewaysResetResponse>
   */
  reset(resourceGroupName: string, virtualNetworkGatewayName: string, options?: Models.VirtualNetworkGatewaysResetOptionalParams): Promise<Models.VirtualNetworkGatewaysResetResponse> {
    return this.beginReset(resourceGroupName,virtualNetworkGatewayName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualNetworkGatewaysResetResponse>;
  }

  /**
   * Resets the VPN client shared key of the virtual network gateway in the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  resetVpnClientSharedKey(resourceGroupName: string, virtualNetworkGatewayName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginResetVpnClientSharedKey(resourceGroupName,virtualNetworkGatewayName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Generates VPN client package for P2S client of the virtual network gateway in the specified
   * resource group.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param parameters Parameters supplied to the generate virtual network gateway VPN client package
   * operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualNetworkGatewaysGeneratevpnclientpackageResponse>
   */
  generatevpnclientpackage(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: Models.VpnClientParameters, options?: msRest.RequestOptionsBase): Promise<Models.VirtualNetworkGatewaysGeneratevpnclientpackageResponse> {
    return this.beginGeneratevpnclientpackage(resourceGroupName,virtualNetworkGatewayName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualNetworkGatewaysGeneratevpnclientpackageResponse>;
  }

  /**
   * Generates VPN profile for P2S client of the virtual network gateway in the specified resource
   * group. Used for IKEV2 and radius based authentication.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param parameters Parameters supplied to the generate virtual network gateway VPN client package
   * operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualNetworkGatewaysGenerateVpnProfileResponse>
   */
  generateVpnProfile(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: Models.VpnClientParameters, options?: msRest.RequestOptionsBase): Promise<Models.VirtualNetworkGatewaysGenerateVpnProfileResponse> {
    return this.beginGenerateVpnProfile(resourceGroupName,virtualNetworkGatewayName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualNetworkGatewaysGenerateVpnProfileResponse>;
  }

  /**
   * Gets pre-generated VPN profile for P2S client of the virtual network gateway in the specified
   * resource group. The profile needs to be generated first using generateVpnProfile.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualNetworkGatewaysGetVpnProfilePackageUrlResponse>
   */
  getVpnProfilePackageUrl(resourceGroupName: string, virtualNetworkGatewayName: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualNetworkGatewaysGetVpnProfilePackageUrlResponse> {
    return this.beginGetVpnProfilePackageUrl(resourceGroupName,virtualNetworkGatewayName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualNetworkGatewaysGetVpnProfilePackageUrlResponse>;
  }

  /**
   * The GetBgpPeerStatus operation retrieves the status of all BGP peers.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualNetworkGatewaysGetBgpPeerStatusResponse>
   */
  getBgpPeerStatus(resourceGroupName: string, virtualNetworkGatewayName: string, options?: Models.VirtualNetworkGatewaysGetBgpPeerStatusOptionalParams): Promise<Models.VirtualNetworkGatewaysGetBgpPeerStatusResponse> {
    return this.beginGetBgpPeerStatus(resourceGroupName,virtualNetworkGatewayName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualNetworkGatewaysGetBgpPeerStatusResponse>;
  }

  /**
   * Gets a xml format representation for supported vpn devices.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualNetworkGatewaysSupportedVpnDevicesResponse>
   */
  supportedVpnDevices(resourceGroupName: string, virtualNetworkGatewayName: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualNetworkGatewaysSupportedVpnDevicesResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param callback The callback
   */
  supportedVpnDevices(resourceGroupName: string, virtualNetworkGatewayName: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param options The optional parameters
   * @param callback The callback
   */
  supportedVpnDevices(resourceGroupName: string, virtualNetworkGatewayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  supportedVpnDevices(resourceGroupName: string, virtualNetworkGatewayName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.VirtualNetworkGatewaysSupportedVpnDevicesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        virtualNetworkGatewayName,
        options
      },
      supportedVpnDevicesOperationSpec,
      callback) as Promise<Models.VirtualNetworkGatewaysSupportedVpnDevicesResponse>;
  }

  /**
   * This operation retrieves a list of routes the virtual network gateway has learned, including
   * routes learned from BGP peers.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualNetworkGatewaysGetLearnedRoutesResponse>
   */
  getLearnedRoutes(resourceGroupName: string, virtualNetworkGatewayName: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualNetworkGatewaysGetLearnedRoutesResponse> {
    return this.beginGetLearnedRoutes(resourceGroupName,virtualNetworkGatewayName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualNetworkGatewaysGetLearnedRoutesResponse>;
  }

  /**
   * This operation retrieves a list of routes the virtual network gateway is advertising to the
   * specified peer.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param peer The IP address of the peer.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualNetworkGatewaysGetAdvertisedRoutesResponse>
   */
  getAdvertisedRoutes(resourceGroupName: string, virtualNetworkGatewayName: string, peer: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualNetworkGatewaysGetAdvertisedRoutesResponse> {
    return this.beginGetAdvertisedRoutes(resourceGroupName,virtualNetworkGatewayName,peer,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualNetworkGatewaysGetAdvertisedRoutesResponse>;
  }

  /**
   * The Set VpnclientIpsecParameters operation sets the vpnclient ipsec policy for P2S client of
   * virtual network gateway in the specified resource group through Network resource provider.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param vpnclientIpsecParams Parameters supplied to the Begin Set vpnclient ipsec parameters of
   * Virtual Network Gateway P2S client operation through Network resource provider.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualNetworkGatewaysSetVpnclientIpsecParametersResponse>
   */
  setVpnclientIpsecParameters(resourceGroupName: string, virtualNetworkGatewayName: string, vpnclientIpsecParams: Models.VpnClientIPsecParameters, options?: msRest.RequestOptionsBase): Promise<Models.VirtualNetworkGatewaysSetVpnclientIpsecParametersResponse> {
    return this.beginSetVpnclientIpsecParameters(resourceGroupName,virtualNetworkGatewayName,vpnclientIpsecParams,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualNetworkGatewaysSetVpnclientIpsecParametersResponse>;
  }

  /**
   * The Get VpnclientIpsecParameters operation retrieves information about the vpnclient ipsec
   * policy for P2S client of virtual network gateway in the specified resource group through Network
   * resource provider.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The virtual network gateway name.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualNetworkGatewaysGetVpnclientIpsecParametersResponse>
   */
  getVpnclientIpsecParameters(resourceGroupName: string, virtualNetworkGatewayName: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualNetworkGatewaysGetVpnclientIpsecParametersResponse> {
    return this.beginGetVpnclientIpsecParameters(resourceGroupName,virtualNetworkGatewayName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualNetworkGatewaysGetVpnclientIpsecParametersResponse>;
  }

  /**
   * Gets a xml format representation for vpn device configuration script.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayConnectionName The name of the virtual network gateway connection
   * for which the configuration script is generated.
   * @param parameters Parameters supplied to the generate vpn device script operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualNetworkGatewaysVpnDeviceConfigurationScriptResponse>
   */
  vpnDeviceConfigurationScript(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: Models.VpnDeviceScriptParameters, options?: msRest.RequestOptionsBase): Promise<Models.VirtualNetworkGatewaysVpnDeviceConfigurationScriptResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayConnectionName The name of the virtual network gateway connection
   * for which the configuration script is generated.
   * @param parameters Parameters supplied to the generate vpn device script operation.
   * @param callback The callback
   */
  vpnDeviceConfigurationScript(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: Models.VpnDeviceScriptParameters, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayConnectionName The name of the virtual network gateway connection
   * for which the configuration script is generated.
   * @param parameters Parameters supplied to the generate vpn device script operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  vpnDeviceConfigurationScript(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: Models.VpnDeviceScriptParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  vpnDeviceConfigurationScript(resourceGroupName: string, virtualNetworkGatewayConnectionName: string, parameters: Models.VpnDeviceScriptParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.VirtualNetworkGatewaysVpnDeviceConfigurationScriptResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        virtualNetworkGatewayConnectionName,
        parameters,
        options
      },
      vpnDeviceConfigurationScriptOperationSpec,
      callback) as Promise<Models.VirtualNetworkGatewaysVpnDeviceConfigurationScriptResponse>;
  }

  /**
   * Starts packet capture on virtual network gateway in the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualNetworkGatewaysStartPacketCaptureResponse>
   */
  startPacketCapture(resourceGroupName: string, virtualNetworkGatewayName: string, options?: Models.VirtualNetworkGatewaysStartPacketCaptureOptionalParams): Promise<Models.VirtualNetworkGatewaysStartPacketCaptureResponse> {
    return this.beginStartPacketCapture(resourceGroupName,virtualNetworkGatewayName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualNetworkGatewaysStartPacketCaptureResponse>;
  }

  /**
   * Stops packet capture on virtual network gateway in the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param parameters Virtual network gateway packet capture parameters supplied to stop packet
   * capture on gateway.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualNetworkGatewaysStopPacketCaptureResponse>
   */
  stopPacketCapture(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: Models.VpnPacketCaptureStopParameters, options?: msRest.RequestOptionsBase): Promise<Models.VirtualNetworkGatewaysStopPacketCaptureResponse> {
    return this.beginStopPacketCapture(resourceGroupName,virtualNetworkGatewayName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualNetworkGatewaysStopPacketCaptureResponse>;
  }

  /**
   * Get VPN client connection health detail per P2S client connection of the virtual network gateway
   * in the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualNetworkGatewaysGetVpnclientConnectionHealthResponse>
   */
  getVpnclientConnectionHealth(resourceGroupName: string, virtualNetworkGatewayName: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualNetworkGatewaysGetVpnclientConnectionHealthResponse> {
    return this.beginGetVpnclientConnectionHealth(resourceGroupName,virtualNetworkGatewayName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualNetworkGatewaysGetVpnclientConnectionHealthResponse>;
  }

  /**
   * Disconnect vpn connections of virtual network gateway in the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param request The parameters are supplied to disconnect vpn connections.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  disconnectVirtualNetworkGatewayVpnConnections(resourceGroupName: string, virtualNetworkGatewayName: string, request: Models.P2SVpnConnectionRequest, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDisconnectVirtualNetworkGatewayVpnConnections(resourceGroupName,virtualNetworkGatewayName,request,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Creates or updates a virtual network gateway in the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param parameters Parameters supplied to create or update virtual network gateway operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: Models.VirtualNetworkGateway, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        virtualNetworkGatewayName,
        parameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Deletes the specified virtual network gateway.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, virtualNetworkGatewayName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        virtualNetworkGatewayName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Updates a virtual network gateway tags.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param parameters Parameters supplied to update virtual network gateway tags.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdateTags(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: Models.TagsObject, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        virtualNetworkGatewayName,
        parameters,
        options
      },
      beginUpdateTagsOperationSpec,
      options);
  }

  /**
   * Resets the primary of the virtual network gateway in the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginReset(resourceGroupName: string, virtualNetworkGatewayName: string, options?: Models.VirtualNetworkGatewaysBeginResetOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        virtualNetworkGatewayName,
        options
      },
      beginResetOperationSpec,
      options);
  }

  /**
   * Resets the VPN client shared key of the virtual network gateway in the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginResetVpnClientSharedKey(resourceGroupName: string, virtualNetworkGatewayName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        virtualNetworkGatewayName,
        options
      },
      beginResetVpnClientSharedKeyOperationSpec,
      options);
  }

  /**
   * Generates VPN client package for P2S client of the virtual network gateway in the specified
   * resource group.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param parameters Parameters supplied to the generate virtual network gateway VPN client package
   * operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginGeneratevpnclientpackage(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: Models.VpnClientParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        virtualNetworkGatewayName,
        parameters,
        options
      },
      beginGeneratevpnclientpackageOperationSpec,
      options);
  }

  /**
   * Generates VPN profile for P2S client of the virtual network gateway in the specified resource
   * group. Used for IKEV2 and radius based authentication.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param parameters Parameters supplied to the generate virtual network gateway VPN client package
   * operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginGenerateVpnProfile(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: Models.VpnClientParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        virtualNetworkGatewayName,
        parameters,
        options
      },
      beginGenerateVpnProfileOperationSpec,
      options);
  }

  /**
   * Gets pre-generated VPN profile for P2S client of the virtual network gateway in the specified
   * resource group. The profile needs to be generated first using generateVpnProfile.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginGetVpnProfilePackageUrl(resourceGroupName: string, virtualNetworkGatewayName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        virtualNetworkGatewayName,
        options
      },
      beginGetVpnProfilePackageUrlOperationSpec,
      options);
  }

  /**
   * The GetBgpPeerStatus operation retrieves the status of all BGP peers.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginGetBgpPeerStatus(resourceGroupName: string, virtualNetworkGatewayName: string, options?: Models.VirtualNetworkGatewaysBeginGetBgpPeerStatusOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        virtualNetworkGatewayName,
        options
      },
      beginGetBgpPeerStatusOperationSpec,
      options);
  }

  /**
   * This operation retrieves a list of routes the virtual network gateway has learned, including
   * routes learned from BGP peers.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginGetLearnedRoutes(resourceGroupName: string, virtualNetworkGatewayName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        virtualNetworkGatewayName,
        options
      },
      beginGetLearnedRoutesOperationSpec,
      options);
  }

  /**
   * This operation retrieves a list of routes the virtual network gateway is advertising to the
   * specified peer.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param peer The IP address of the peer.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginGetAdvertisedRoutes(resourceGroupName: string, virtualNetworkGatewayName: string, peer: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        virtualNetworkGatewayName,
        peer,
        options
      },
      beginGetAdvertisedRoutesOperationSpec,
      options);
  }

  /**
   * The Set VpnclientIpsecParameters operation sets the vpnclient ipsec policy for P2S client of
   * virtual network gateway in the specified resource group through Network resource provider.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param vpnclientIpsecParams Parameters supplied to the Begin Set vpnclient ipsec parameters of
   * Virtual Network Gateway P2S client operation through Network resource provider.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginSetVpnclientIpsecParameters(resourceGroupName: string, virtualNetworkGatewayName: string, vpnclientIpsecParams: Models.VpnClientIPsecParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        virtualNetworkGatewayName,
        vpnclientIpsecParams,
        options
      },
      beginSetVpnclientIpsecParametersOperationSpec,
      options);
  }

  /**
   * The Get VpnclientIpsecParameters operation retrieves information about the vpnclient ipsec
   * policy for P2S client of virtual network gateway in the specified resource group through Network
   * resource provider.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The virtual network gateway name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginGetVpnclientIpsecParameters(resourceGroupName: string, virtualNetworkGatewayName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        virtualNetworkGatewayName,
        options
      },
      beginGetVpnclientIpsecParametersOperationSpec,
      options);
  }

  /**
   * Starts packet capture on virtual network gateway in the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginStartPacketCapture(resourceGroupName: string, virtualNetworkGatewayName: string, options?: Models.VirtualNetworkGatewaysBeginStartPacketCaptureOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        virtualNetworkGatewayName,
        options
      },
      beginStartPacketCaptureOperationSpec,
      options);
  }

  /**
   * Stops packet capture on virtual network gateway in the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param parameters Virtual network gateway packet capture parameters supplied to stop packet
   * capture on gateway.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginStopPacketCapture(resourceGroupName: string, virtualNetworkGatewayName: string, parameters: Models.VpnPacketCaptureStopParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        virtualNetworkGatewayName,
        parameters,
        options
      },
      beginStopPacketCaptureOperationSpec,
      options);
  }

  /**
   * Get VPN client connection health detail per P2S client connection of the virtual network gateway
   * in the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginGetVpnclientConnectionHealth(resourceGroupName: string, virtualNetworkGatewayName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        virtualNetworkGatewayName,
        options
      },
      beginGetVpnclientConnectionHealthOperationSpec,
      options);
  }

  /**
   * Disconnect vpn connections of virtual network gateway in the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param virtualNetworkGatewayName The name of the virtual network gateway.
   * @param request The parameters are supplied to disconnect vpn connections.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDisconnectVirtualNetworkGatewayVpnConnections(resourceGroupName: string, virtualNetworkGatewayName: string, request: Models.P2SVpnConnectionRequest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        virtualNetworkGatewayName,
        request,
        options
      },
      beginDisconnectVirtualNetworkGatewayVpnConnectionsOperationSpec,
      options);
  }

  /**
   * Gets all virtual network gateways by resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualNetworkGatewaysListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualNetworkGatewaysListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.VirtualNetworkGatewayListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VirtualNetworkGatewayListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VirtualNetworkGatewayListResult>, callback?: msRest.ServiceCallback<Models.VirtualNetworkGatewayListResult>): Promise<Models.VirtualNetworkGatewaysListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.VirtualNetworkGatewaysListNextResponse>;
  }

  /**
   * Gets all the connections in a virtual network gateway.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualNetworkGatewaysListConnectionsNextResponse>
   */
  listConnectionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualNetworkGatewaysListConnectionsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listConnectionsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.VirtualNetworkGatewayListConnectionsResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listConnectionsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VirtualNetworkGatewayListConnectionsResult>): void;
  listConnectionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VirtualNetworkGatewayListConnectionsResult>, callback?: msRest.ServiceCallback<Models.VirtualNetworkGatewayListConnectionsResult>): Promise<Models.VirtualNetworkGatewaysListConnectionsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listConnectionsNextOperationSpec,
      callback) as Promise<Models.VirtualNetworkGatewaysListConnectionsNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.virtualNetworkGatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkGateway
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkGatewayListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listConnectionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/connections",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.virtualNetworkGatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkGatewayListConnectionsResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const supportedVpnDevicesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/supportedvpndevices",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.virtualNetworkGatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const vpnDeviceConfigurationScriptOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}/vpndeviceconfigurationscript",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.virtualNetworkGatewayConnectionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.VpnDeviceScriptParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.virtualNetworkGatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.VirtualNetworkGateway,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkGateway
    },
    201: {
      bodyMapper: Mappers.VirtualNetworkGateway
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.virtualNetworkGatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateTagsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.virtualNetworkGatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.TagsObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkGateway
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginResetOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/reset",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.virtualNetworkGatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.gatewayVip,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkGateway
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginResetVpnClientSharedKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/resetvpnclientsharedkey",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.virtualNetworkGatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginGeneratevpnclientpackageOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/generatevpnclientpackage",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.virtualNetworkGatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.VpnClientParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginGenerateVpnProfileOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/generatevpnprofile",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.virtualNetworkGatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.VpnClientParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginGetVpnProfilePackageUrlOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getvpnprofilepackageurl",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.virtualNetworkGatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginGetBgpPeerStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getBgpPeerStatus",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.virtualNetworkGatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.peer0,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BgpPeerStatusListResult
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginGetLearnedRoutesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getLearnedRoutes",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.virtualNetworkGatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GatewayRouteListResult
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginGetAdvertisedRoutesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getAdvertisedRoutes",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.virtualNetworkGatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.peer1,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GatewayRouteListResult
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginSetVpnclientIpsecParametersOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/setvpnclientipsecparameters",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.virtualNetworkGatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "vpnclientIpsecParams",
    mapper: {
      ...Mappers.VpnClientIPsecParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VpnClientIPsecParameters
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginGetVpnclientIpsecParametersOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getvpnclientipsecparameters",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.virtualNetworkGatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VpnClientIPsecParameters
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginStartPacketCaptureOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/startPacketCapture",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.virtualNetworkGatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "parameters"
    ],
    mapper: Mappers.VpnPacketCaptureStartParameters
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    202: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const beginStopPacketCaptureOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/stopPacketCapture",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.virtualNetworkGatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.VpnPacketCaptureStopParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    202: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const beginGetVpnclientConnectionHealthOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getVpnClientConnectionHealth",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.virtualNetworkGatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VpnClientConnectionHealthDetailListResult
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDisconnectVirtualNetworkGatewayVpnConnectionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/disconnectVirtualNetworkGatewayVpnConnections",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualNetworkGatewayName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.P2SVpnConnectionRequest,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkGatewayListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listConnectionsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkGatewayListConnectionsResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
