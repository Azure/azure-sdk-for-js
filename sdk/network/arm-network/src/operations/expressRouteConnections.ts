/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/expressRouteConnectionsMappers";
import * as Parameters from "../models/parameters";
import { NetworkManagementClientContext } from "../networkManagementClientContext";

/** Class representing a ExpressRouteConnections. */
export class ExpressRouteConnections {
  private readonly client: NetworkManagementClientContext;

  /**
   * Create a ExpressRouteConnections.
   * @param {NetworkManagementClientContext} client Reference to the service client.
   */
  constructor(client: NetworkManagementClientContext) {
    this.client = client;
  }

  /**
   * Creates a connection between an ExpressRoute gateway and an ExpressRoute circuit.
   * @param resourceGroupName The name of the resource group.
   * @param expressRouteGatewayName The name of the ExpressRoute gateway.
   * @param connectionName The name of the connection subresource.
   * @param putExpressRouteConnectionParameters Parameters required in an ExpressRouteConnection PUT
   * operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExpressRouteConnectionsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, expressRouteGatewayName: string, connectionName: string, putExpressRouteConnectionParameters: Models.ExpressRouteConnection, options?: msRest.RequestOptionsBase): Promise<Models.ExpressRouteConnectionsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,expressRouteGatewayName,connectionName,putExpressRouteConnectionParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ExpressRouteConnectionsCreateOrUpdateResponse>;
  }

  /**
   * Gets the specified ExpressRouteConnection.
   * @param resourceGroupName The name of the resource group.
   * @param expressRouteGatewayName The name of the ExpressRoute gateway.
   * @param connectionName The name of the ExpressRoute connection.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExpressRouteConnectionsGetResponse>
   */
  get(resourceGroupName: string, expressRouteGatewayName: string, connectionName: string, options?: msRest.RequestOptionsBase): Promise<Models.ExpressRouteConnectionsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param expressRouteGatewayName The name of the ExpressRoute gateway.
   * @param connectionName The name of the ExpressRoute connection.
   * @param callback The callback
   */
  get(resourceGroupName: string, expressRouteGatewayName: string, connectionName: string, callback: msRest.ServiceCallback<Models.ExpressRouteConnection>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param expressRouteGatewayName The name of the ExpressRoute gateway.
   * @param connectionName The name of the ExpressRoute connection.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, expressRouteGatewayName: string, connectionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExpressRouteConnection>): void;
  get(resourceGroupName: string, expressRouteGatewayName: string, connectionName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExpressRouteConnection>, callback?: msRest.ServiceCallback<Models.ExpressRouteConnection>): Promise<Models.ExpressRouteConnectionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        expressRouteGatewayName,
        connectionName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ExpressRouteConnectionsGetResponse>;
  }

  /**
   * Deletes a connection to a ExpressRoute circuit.
   * @param resourceGroupName The name of the resource group.
   * @param expressRouteGatewayName The name of the ExpressRoute gateway.
   * @param connectionName The name of the connection subresource.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, expressRouteGatewayName: string, connectionName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,expressRouteGatewayName,connectionName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Lists ExpressRouteConnections.
   * @param resourceGroupName The name of the resource group.
   * @param expressRouteGatewayName The name of the ExpressRoute gateway.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExpressRouteConnectionsListResponse>
   */
  list(resourceGroupName: string, expressRouteGatewayName: string, options?: msRest.RequestOptionsBase): Promise<Models.ExpressRouteConnectionsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param expressRouteGatewayName The name of the ExpressRoute gateway.
   * @param callback The callback
   */
  list(resourceGroupName: string, expressRouteGatewayName: string, callback: msRest.ServiceCallback<Models.ExpressRouteConnectionList>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param expressRouteGatewayName The name of the ExpressRoute gateway.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, expressRouteGatewayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExpressRouteConnectionList>): void;
  list(resourceGroupName: string, expressRouteGatewayName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExpressRouteConnectionList>, callback?: msRest.ServiceCallback<Models.ExpressRouteConnectionList>): Promise<Models.ExpressRouteConnectionsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        expressRouteGatewayName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.ExpressRouteConnectionsListResponse>;
  }

  /**
   * Creates a connection between an ExpressRoute gateway and an ExpressRoute circuit.
   * @param resourceGroupName The name of the resource group.
   * @param expressRouteGatewayName The name of the ExpressRoute gateway.
   * @param connectionName The name of the connection subresource.
   * @param putExpressRouteConnectionParameters Parameters required in an ExpressRouteConnection PUT
   * operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, expressRouteGatewayName: string, connectionName: string, putExpressRouteConnectionParameters: Models.ExpressRouteConnection, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        expressRouteGatewayName,
        connectionName,
        putExpressRouteConnectionParameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Deletes a connection to a ExpressRoute circuit.
   * @param resourceGroupName The name of the resource group.
   * @param expressRouteGatewayName The name of the ExpressRoute gateway.
   * @param connectionName The name of the connection subresource.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, expressRouteGatewayName: string, connectionName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        expressRouteGatewayName,
        connectionName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteGateways/{expressRouteGatewayName}/expressRouteConnections/{connectionName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.expressRouteGatewayName,
    Parameters.connectionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExpressRouteConnection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteGateways/{expressRouteGatewayName}/expressRouteConnections",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.expressRouteGatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExpressRouteConnectionList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteGateways/{expressRouteGatewayName}/expressRouteConnections/{connectionName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.expressRouteGatewayName,
    Parameters.connectionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "putExpressRouteConnectionParameters",
    mapper: {
      ...Mappers.ExpressRouteConnection,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ExpressRouteConnection
    },
    201: {
      bodyMapper: Mappers.ExpressRouteConnection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteGateways/{expressRouteGatewayName}/expressRouteConnections/{connectionName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.expressRouteGatewayName,
    Parameters.connectionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
