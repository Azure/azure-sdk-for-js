/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { IpamPools } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { NetworkManagementClient } from "../networkManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  IpamPool,
  IpamPoolsListNextOptionalParams,
  IpamPoolsListOptionalParams,
  IpamPoolsListResponse,
  PoolAssociation,
  IpamPoolsListAssociatedResourcesNextOptionalParams,
  IpamPoolsListAssociatedResourcesOptionalParams,
  IpamPoolsListAssociatedResourcesResponse,
  IpamPoolsCreateOptionalParams,
  IpamPoolsCreateResponse,
  IpamPoolsUpdateOptionalParams,
  IpamPoolsUpdateResponse,
  IpamPoolsGetOptionalParams,
  IpamPoolsGetResponse,
  IpamPoolsDeleteOptionalParams,
  IpamPoolsDeleteResponse,
  IpamPoolsGetPoolUsageOptionalParams,
  IpamPoolsGetPoolUsageResponse,
  IpamPoolsListNextResponse,
  IpamPoolsListAssociatedResourcesNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing IpamPools operations. */
export class IpamPoolsImpl implements IpamPools {
  private readonly client: NetworkManagementClient;

  /**
   * Initialize a new instance of the class IpamPools class.
   * @param client Reference to the service client
   */
  constructor(client: NetworkManagementClient) {
    this.client = client;
  }

  /**
   * Gets list of Pool resources at Network Manager level.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    networkManagerName: string,
    options?: IpamPoolsListOptionalParams,
  ): PagedAsyncIterableIterator<IpamPool> {
    const iter = this.listPagingAll(
      resourceGroupName,
      networkManagerName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          networkManagerName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    networkManagerName: string,
    options?: IpamPoolsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<IpamPool[]> {
    let result: IpamPoolsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceGroupName, networkManagerName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        networkManagerName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    networkManagerName: string,
    options?: IpamPoolsListOptionalParams,
  ): AsyncIterableIterator<IpamPool> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      networkManagerName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List Associated Resource in the Pool.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param poolName Pool resource name.
   * @param options The options parameters.
   */
  public listAssociatedResources(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    options?: IpamPoolsListAssociatedResourcesOptionalParams,
  ): PagedAsyncIterableIterator<PoolAssociation> {
    const iter = this.listAssociatedResourcesPagingAll(
      resourceGroupName,
      networkManagerName,
      poolName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listAssociatedResourcesPagingPage(
          resourceGroupName,
          networkManagerName,
          poolName,
          options,
          settings,
        );
      },
    };
  }

  private async *listAssociatedResourcesPagingPage(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    options?: IpamPoolsListAssociatedResourcesOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<PoolAssociation[]> {
    let result: IpamPoolsListAssociatedResourcesResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listAssociatedResources(
        resourceGroupName,
        networkManagerName,
        poolName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listAssociatedResourcesNext(
        resourceGroupName,
        networkManagerName,
        poolName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listAssociatedResourcesPagingAll(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    options?: IpamPoolsListAssociatedResourcesOptionalParams,
  ): AsyncIterableIterator<PoolAssociation> {
    for await (const page of this.listAssociatedResourcesPagingPage(
      resourceGroupName,
      networkManagerName,
      poolName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets list of Pool resources at Network Manager level.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    networkManagerName: string,
    options?: IpamPoolsListOptionalParams,
  ): Promise<IpamPoolsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, networkManagerName, options },
      listOperationSpec,
    );
  }

  /**
   * Creates/Updates the Pool resource.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param poolName IP Address Manager Pool resource name.
   * @param body Pool resource object to create/update.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    body: IpamPool,
    options?: IpamPoolsCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<IpamPoolsCreateResponse>,
      IpamPoolsCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<IpamPoolsCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, networkManagerName, poolName, body, options },
      spec: createOperationSpec,
    });
    const poller = await createHttpPoller<
      IpamPoolsCreateResponse,
      OperationState<IpamPoolsCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates/Updates the Pool resource.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param poolName IP Address Manager Pool resource name.
   * @param body Pool resource object to create/update.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    body: IpamPool,
    options?: IpamPoolsCreateOptionalParams,
  ): Promise<IpamPoolsCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      networkManagerName,
      poolName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates the specific Pool resource.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param poolName IP Address Manager Pool resource name.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    options?: IpamPoolsUpdateOptionalParams,
  ): Promise<IpamPoolsUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, networkManagerName, poolName, options },
      updateOperationSpec,
    );
  }

  /**
   * Gets the specific Pool resource.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param poolName Pool resource name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    options?: IpamPoolsGetOptionalParams,
  ): Promise<IpamPoolsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, networkManagerName, poolName, options },
      getOperationSpec,
    );
  }

  /**
   * Delete the Pool resource.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param poolName Pool resource name.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    options?: IpamPoolsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<IpamPoolsDeleteResponse>,
      IpamPoolsDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<IpamPoolsDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, networkManagerName, poolName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      IpamPoolsDeleteResponse,
      OperationState<IpamPoolsDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete the Pool resource.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param poolName Pool resource name.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    options?: IpamPoolsDeleteOptionalParams,
  ): Promise<IpamPoolsDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      networkManagerName,
      poolName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Get the Pool Usage.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param poolName Pool resource name.
   * @param options The options parameters.
   */
  getPoolUsage(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    options?: IpamPoolsGetPoolUsageOptionalParams,
  ): Promise<IpamPoolsGetPoolUsageResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, networkManagerName, poolName, options },
      getPoolUsageOperationSpec,
    );
  }

  /**
   * List Associated Resource in the Pool.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param poolName Pool resource name.
   * @param options The options parameters.
   */
  private _listAssociatedResources(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    options?: IpamPoolsListAssociatedResourcesOptionalParams,
  ): Promise<IpamPoolsListAssociatedResourcesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, networkManagerName, poolName, options },
      listAssociatedResourcesOperationSpec,
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    networkManagerName: string,
    nextLink: string,
    options?: IpamPoolsListNextOptionalParams,
  ): Promise<IpamPoolsListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, networkManagerName, nextLink, options },
      listNextOperationSpec,
    );
  }

  /**
   * ListAssociatedResourcesNext
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param poolName Pool resource name.
   * @param nextLink The nextLink from the previous successful call to the ListAssociatedResources
   *                 method.
   * @param options The options parameters.
   */
  private _listAssociatedResourcesNext(
    resourceGroupName: string,
    networkManagerName: string,
    poolName: string,
    nextLink: string,
    options?: IpamPoolsListAssociatedResourcesNextOptionalParams,
  ): Promise<IpamPoolsListAssociatedResourcesNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, networkManagerName, poolName, nextLink, options },
      listAssociatedResourcesNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/ipamPools",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IpamPoolList,
    },
    default: {
      bodyMapper: Mappers.CommonErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skipToken,
    Parameters.skip,
    Parameters.top1,
    Parameters.sortKey,
    Parameters.sortValue,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.networkManagerName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/ipamPools/{poolName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.IpamPool,
    },
    201: {
      bodyMapper: Mappers.IpamPool,
    },
    202: {
      bodyMapper: Mappers.IpamPool,
    },
    204: {
      bodyMapper: Mappers.IpamPool,
    },
    default: {
      bodyMapper: Mappers.CommonErrorResponse,
    },
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.networkManagerName1,
    Parameters.poolName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/ipamPools/{poolName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.IpamPool,
    },
    default: {
      bodyMapper: Mappers.CommonErrorResponse,
    },
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.networkManagerName1,
    Parameters.poolName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/ipamPools/{poolName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IpamPool,
    },
    default: {
      bodyMapper: Mappers.CommonErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.networkManagerName1,
    Parameters.poolName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/ipamPools/{poolName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.IpamPoolsDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.IpamPoolsDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.IpamPoolsDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.IpamPoolsDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.CommonErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.networkManagerName1,
    Parameters.poolName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getPoolUsageOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/ipamPools/{poolName}/getPoolUsage",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PoolUsage,
    },
    default: {
      bodyMapper: Mappers.CommonErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.networkManagerName1,
    Parameters.poolName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listAssociatedResourcesOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/ipamPools/{poolName}/listAssociatedResources",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PoolAssociationList,
    },
    default: {
      bodyMapper: Mappers.CommonErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.networkManagerName1,
    Parameters.poolName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IpamPoolList,
    },
    default: {
      bodyMapper: Mappers.CommonErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.networkManagerName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listAssociatedResourcesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PoolAssociationList,
    },
    default: {
      bodyMapper: Mappers.CommonErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.networkManagerName1,
    Parameters.poolName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
