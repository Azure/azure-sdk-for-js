// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import type { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import type { NetworkSecurityPerimeterServiceTags } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import type { NetworkManagementClient } from "../networkManagementClient.js";
import type {
  NspServiceTagsResource,
  NetworkSecurityPerimeterServiceTagsListNextOptionalParams,
  NetworkSecurityPerimeterServiceTagsListOptionalParams,
  NetworkSecurityPerimeterServiceTagsListResponse,
  NetworkSecurityPerimeterServiceTagsListNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing NetworkSecurityPerimeterServiceTags operations. */
export class NetworkSecurityPerimeterServiceTagsImpl
  implements NetworkSecurityPerimeterServiceTags
{
  private readonly client: NetworkManagementClient;

  /**
   * Initialize a new instance of the class NetworkSecurityPerimeterServiceTags class.
   * @param client Reference to the service client
   */
  constructor(client: NetworkManagementClient) {
    this.client = client;
  }

  /**
   * Gets the list of service tags supported by NSP. These service tags can be used to create access
   * rules in NSP.
   * @param location The location of network security perimeter.
   * @param options The options parameters.
   */
  public list(
    location: string,
    options?: NetworkSecurityPerimeterServiceTagsListOptionalParams,
  ): PagedAsyncIterableIterator<NspServiceTagsResource> {
    const iter = this.listPagingAll(location, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(location, options, settings);
      },
    };
  }

  private async *listPagingPage(
    location: string,
    options?: NetworkSecurityPerimeterServiceTagsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<NspServiceTagsResource[]> {
    let result: NetworkSecurityPerimeterServiceTagsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(location, options);
      const page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(location, continuationToken, options);
      continuationToken = result.nextLink;
      const page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    location: string,
    options?: NetworkSecurityPerimeterServiceTagsListOptionalParams,
  ): AsyncIterableIterator<NspServiceTagsResource> {
    for await (const page of this.listPagingPage(location, options)) {
      yield* page;
    }
  }

  /**
   * Gets the list of service tags supported by NSP. These service tags can be used to create access
   * rules in NSP.
   * @param location The location of network security perimeter.
   * @param options The options parameters.
   */
  private _list(
    location: string,
    options?: NetworkSecurityPerimeterServiceTagsListOptionalParams,
  ): Promise<NetworkSecurityPerimeterServiceTagsListResponse> {
    return this.client.sendOperationRequest({ location, options }, listOperationSpec);
  }

  /**
   * ListNext
   * @param location The location of network security perimeter.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    location: string,
    nextLink: string,
    options?: NetworkSecurityPerimeterServiceTagsListNextOptionalParams,
  ): Promise<NetworkSecurityPerimeterServiceTagsListNextResponse> {
    return this.client.sendOperationRequest({ location, nextLink, options }, listNextOperationSpec);
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/nspServiceTags",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NspServiceTagsListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.location],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NspServiceTagsListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.location,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
