/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/vpnConnectionsMappers";
import * as Parameters from "../models/parameters";
import { NetworkManagementClientContext } from "../networkManagementClientContext";

/** Class representing a VpnConnections. */
export class VpnConnections {
  private readonly client: NetworkManagementClientContext;

  /**
   * Create a VpnConnections.
   * @param {NetworkManagementClientContext} client Reference to the service client.
   */
  constructor(client: NetworkManagementClientContext) {
    this.client = client;
  }

  /**
   * Retrieves the details of a vpn connection.
   * @param resourceGroupName The resource group name of the VpnGateway.
   * @param gatewayName The name of the gateway.
   * @param connectionName The name of the vpn connection.
   * @param [options] The optional parameters
   * @returns Promise<Models.VpnConnectionsGetResponse>
   */
  get(resourceGroupName: string, gatewayName: string, connectionName: string, options?: msRest.RequestOptionsBase): Promise<Models.VpnConnectionsGetResponse>;
  /**
   * @param resourceGroupName The resource group name of the VpnGateway.
   * @param gatewayName The name of the gateway.
   * @param connectionName The name of the vpn connection.
   * @param callback The callback
   */
  get(resourceGroupName: string, gatewayName: string, connectionName: string, callback: msRest.ServiceCallback<Models.VpnConnection>): void;
  /**
   * @param resourceGroupName The resource group name of the VpnGateway.
   * @param gatewayName The name of the gateway.
   * @param connectionName The name of the vpn connection.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, gatewayName: string, connectionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VpnConnection>): void;
  get(resourceGroupName: string, gatewayName: string, connectionName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VpnConnection>, callback?: msRest.ServiceCallback<Models.VpnConnection>): Promise<Models.VpnConnectionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        gatewayName,
        connectionName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.VpnConnectionsGetResponse>;
  }

  /**
   * Creates a vpn connection to a scalable vpn gateway if it doesn't exist else updates the existing
   * connection.
   * @param resourceGroupName The resource group name of the VpnGateway.
   * @param gatewayName The name of the gateway.
   * @param connectionName The name of the connection.
   * @param vpnConnectionParameters Parameters supplied to create or Update a VPN Connection.
   * @param [options] The optional parameters
   * @returns Promise<Models.VpnConnectionsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, gatewayName: string, connectionName: string, vpnConnectionParameters: Models.VpnConnection, options?: msRest.RequestOptionsBase): Promise<Models.VpnConnectionsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,gatewayName,connectionName,vpnConnectionParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VpnConnectionsCreateOrUpdateResponse>;
  }

  /**
   * Deletes a vpn connection.
   * @param resourceGroupName The resource group name of the VpnGateway.
   * @param gatewayName The name of the gateway.
   * @param connectionName The name of the connection.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, gatewayName: string, connectionName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,gatewayName,connectionName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Starts packet capture on Vpn connection in the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param gatewayName The name of the gateway.
   * @param vpnConnectionName The name of the vpn connection.
   * @param [options] The optional parameters
   * @returns Promise<Models.VpnConnectionsStartPacketCaptureResponse>
   */
  startPacketCapture(resourceGroupName: string, gatewayName: string, vpnConnectionName: string, options?: Models.VpnConnectionsStartPacketCaptureOptionalParams): Promise<Models.VpnConnectionsStartPacketCaptureResponse> {
    return this.beginStartPacketCapture(resourceGroupName,gatewayName,vpnConnectionName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VpnConnectionsStartPacketCaptureResponse>;
  }

  /**
   * Stops packet capture on Vpn connection in the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param gatewayName The name of the gateway.
   * @param vpnConnectionName The name of the vpn connection.
   * @param [options] The optional parameters
   * @returns Promise<Models.VpnConnectionsStopPacketCaptureResponse>
   */
  stopPacketCapture(resourceGroupName: string, gatewayName: string, vpnConnectionName: string, options?: Models.VpnConnectionsStopPacketCaptureOptionalParams): Promise<Models.VpnConnectionsStopPacketCaptureResponse> {
    return this.beginStopPacketCapture(resourceGroupName,gatewayName,vpnConnectionName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VpnConnectionsStopPacketCaptureResponse>;
  }

  /**
   * Retrieves all vpn connections for a particular virtual wan vpn gateway.
   * @param resourceGroupName The resource group name of the VpnGateway.
   * @param gatewayName The name of the gateway.
   * @param [options] The optional parameters
   * @returns Promise<Models.VpnConnectionsListByVpnGatewayResponse>
   */
  listByVpnGateway(resourceGroupName: string, gatewayName: string, options?: msRest.RequestOptionsBase): Promise<Models.VpnConnectionsListByVpnGatewayResponse>;
  /**
   * @param resourceGroupName The resource group name of the VpnGateway.
   * @param gatewayName The name of the gateway.
   * @param callback The callback
   */
  listByVpnGateway(resourceGroupName: string, gatewayName: string, callback: msRest.ServiceCallback<Models.ListVpnConnectionsResult>): void;
  /**
   * @param resourceGroupName The resource group name of the VpnGateway.
   * @param gatewayName The name of the gateway.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByVpnGateway(resourceGroupName: string, gatewayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListVpnConnectionsResult>): void;
  listByVpnGateway(resourceGroupName: string, gatewayName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ListVpnConnectionsResult>, callback?: msRest.ServiceCallback<Models.ListVpnConnectionsResult>): Promise<Models.VpnConnectionsListByVpnGatewayResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        gatewayName,
        options
      },
      listByVpnGatewayOperationSpec,
      callback) as Promise<Models.VpnConnectionsListByVpnGatewayResponse>;
  }

  /**
   * Creates a vpn connection to a scalable vpn gateway if it doesn't exist else updates the existing
   * connection.
   * @param resourceGroupName The resource group name of the VpnGateway.
   * @param gatewayName The name of the gateway.
   * @param connectionName The name of the connection.
   * @param vpnConnectionParameters Parameters supplied to create or Update a VPN Connection.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, gatewayName: string, connectionName: string, vpnConnectionParameters: Models.VpnConnection, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        gatewayName,
        connectionName,
        vpnConnectionParameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Deletes a vpn connection.
   * @param resourceGroupName The resource group name of the VpnGateway.
   * @param gatewayName The name of the gateway.
   * @param connectionName The name of the connection.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, gatewayName: string, connectionName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        gatewayName,
        connectionName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Starts packet capture on Vpn connection in the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param gatewayName The name of the gateway.
   * @param vpnConnectionName The name of the vpn connection.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginStartPacketCapture(resourceGroupName: string, gatewayName: string, vpnConnectionName: string, options?: Models.VpnConnectionsBeginStartPacketCaptureOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        gatewayName,
        vpnConnectionName,
        options
      },
      beginStartPacketCaptureOperationSpec,
      options);
  }

  /**
   * Stops packet capture on Vpn connection in the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param gatewayName The name of the gateway.
   * @param vpnConnectionName The name of the vpn connection.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginStopPacketCapture(resourceGroupName: string, gatewayName: string, vpnConnectionName: string, options?: Models.VpnConnectionsBeginStopPacketCaptureOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        gatewayName,
        vpnConnectionName,
        options
      },
      beginStopPacketCaptureOperationSpec,
      options);
  }

  /**
   * Retrieves all vpn connections for a particular virtual wan vpn gateway.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.VpnConnectionsListByVpnGatewayNextResponse>
   */
  listByVpnGatewayNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.VpnConnectionsListByVpnGatewayNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByVpnGatewayNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ListVpnConnectionsResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByVpnGatewayNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListVpnConnectionsResult>): void;
  listByVpnGatewayNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ListVpnConnectionsResult>, callback?: msRest.ServiceCallback<Models.ListVpnConnectionsResult>): Promise<Models.VpnConnectionsListByVpnGatewayNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByVpnGatewayNextOperationSpec,
      callback) as Promise<Models.VpnConnectionsListByVpnGatewayNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/vpnConnections/{connectionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.gatewayName,
    Parameters.connectionName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VpnConnection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByVpnGatewayOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/vpnConnections",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.gatewayName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListVpnConnectionsResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/vpnConnections/{connectionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.gatewayName,
    Parameters.connectionName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "vpnConnectionParameters",
    mapper: {
      ...Mappers.VpnConnection,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VpnConnection
    },
    201: {
      bodyMapper: Mappers.VpnConnection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/vpnConnections/{connectionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.gatewayName,
    Parameters.connectionName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginStartPacketCaptureOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/vpnConnections/{vpnConnectionName}/startpacketcapture",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.gatewayName,
    Parameters.vpnConnectionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "parameters"
    ],
    mapper: Mappers.VpnConnectionPacketCaptureStartParameters
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginStopPacketCaptureOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/vpnConnections/{vpnConnectionName}/stoppacketcapture",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.gatewayName,
    Parameters.vpnConnectionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "parameters"
    ],
    mapper: Mappers.VpnConnectionPacketCaptureStopParameters
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByVpnGatewayNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListVpnConnectionsResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
