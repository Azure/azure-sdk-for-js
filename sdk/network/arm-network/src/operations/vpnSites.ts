/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/vpnSitesMappers";
import * as Parameters from "../models/parameters";
import { NetworkManagementClientContext } from "../networkManagementClientContext";

/** Class representing a VpnSites. */
export class VpnSites {
  private readonly client: NetworkManagementClientContext;

  /**
   * Create a VpnSites.
   * @param {NetworkManagementClientContext} client Reference to the service client.
   */
  constructor(client: NetworkManagementClientContext) {
    this.client = client;
  }

  /**
   * Retrieves the details of a VPN site.
   * @param resourceGroupName The resource group name of the VpnSite.
   * @param vpnSiteName The name of the VpnSite being retrieved.
   * @param [options] The optional parameters
   * @returns Promise<Models.VpnSitesGetResponse>
   */
  get(resourceGroupName: string, vpnSiteName: string, options?: msRest.RequestOptionsBase): Promise<Models.VpnSitesGetResponse>;
  /**
   * @param resourceGroupName The resource group name of the VpnSite.
   * @param vpnSiteName The name of the VpnSite being retrieved.
   * @param callback The callback
   */
  get(resourceGroupName: string, vpnSiteName: string, callback: msRest.ServiceCallback<Models.VpnSite>): void;
  /**
   * @param resourceGroupName The resource group name of the VpnSite.
   * @param vpnSiteName The name of the VpnSite being retrieved.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, vpnSiteName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VpnSite>): void;
  get(resourceGroupName: string, vpnSiteName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VpnSite>, callback?: msRest.ServiceCallback<Models.VpnSite>): Promise<Models.VpnSitesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vpnSiteName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.VpnSitesGetResponse>;
  }

  /**
   * Creates a VpnSite resource if it doesn't exist else updates the existing VpnSite.
   * @param resourceGroupName The resource group name of the VpnSite.
   * @param vpnSiteName The name of the VpnSite being created or updated.
   * @param vpnSiteParameters Parameters supplied to create or update VpnSite.
   * @param [options] The optional parameters
   * @returns Promise<Models.VpnSitesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, vpnSiteName: string, vpnSiteParameters: Models.VpnSite, options?: msRest.RequestOptionsBase): Promise<Models.VpnSitesCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,vpnSiteName,vpnSiteParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VpnSitesCreateOrUpdateResponse>;
  }

  /**
   * Updates VpnSite tags.
   * @param resourceGroupName The resource group name of the VpnSite.
   * @param vpnSiteName The name of the VpnSite being updated.
   * @param vpnSiteParameters Parameters supplied to update VpnSite tags.
   * @param [options] The optional parameters
   * @returns Promise<Models.VpnSitesUpdateTagsResponse>
   */
  updateTags(resourceGroupName: string, vpnSiteName: string, vpnSiteParameters: Models.TagsObject, options?: msRest.RequestOptionsBase): Promise<Models.VpnSitesUpdateTagsResponse>;
  /**
   * @param resourceGroupName The resource group name of the VpnSite.
   * @param vpnSiteName The name of the VpnSite being updated.
   * @param vpnSiteParameters Parameters supplied to update VpnSite tags.
   * @param callback The callback
   */
  updateTags(resourceGroupName: string, vpnSiteName: string, vpnSiteParameters: Models.TagsObject, callback: msRest.ServiceCallback<Models.VpnSite>): void;
  /**
   * @param resourceGroupName The resource group name of the VpnSite.
   * @param vpnSiteName The name of the VpnSite being updated.
   * @param vpnSiteParameters Parameters supplied to update VpnSite tags.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateTags(resourceGroupName: string, vpnSiteName: string, vpnSiteParameters: Models.TagsObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VpnSite>): void;
  updateTags(resourceGroupName: string, vpnSiteName: string, vpnSiteParameters: Models.TagsObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VpnSite>, callback?: msRest.ServiceCallback<Models.VpnSite>): Promise<Models.VpnSitesUpdateTagsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vpnSiteName,
        vpnSiteParameters,
        options
      },
      updateTagsOperationSpec,
      callback) as Promise<Models.VpnSitesUpdateTagsResponse>;
  }

  /**
   * Deletes a VpnSite.
   * @param resourceGroupName The resource group name of the VpnSite.
   * @param vpnSiteName The name of the VpnSite being deleted.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, vpnSiteName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,vpnSiteName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Lists all the vpnSites in a resource group.
   * @param resourceGroupName The resource group name of the VpnSite.
   * @param [options] The optional parameters
   * @returns Promise<Models.VpnSitesListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.VpnSitesListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The resource group name of the VpnSite.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.ListVpnSitesResult>): void;
  /**
   * @param resourceGroupName The resource group name of the VpnSite.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListVpnSitesResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ListVpnSitesResult>, callback?: msRest.ServiceCallback<Models.ListVpnSitesResult>): Promise<Models.VpnSitesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.VpnSitesListByResourceGroupResponse>;
  }

  /**
   * Lists all the VpnSites in a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.VpnSitesListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.VpnSitesListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.ListVpnSitesResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListVpnSitesResult>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ListVpnSitesResult>, callback?: msRest.ServiceCallback<Models.ListVpnSitesResult>): Promise<Models.VpnSitesListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.VpnSitesListResponse>;
  }

  /**
   * Creates a VpnSite resource if it doesn't exist else updates the existing VpnSite.
   * @param resourceGroupName The resource group name of the VpnSite.
   * @param vpnSiteName The name of the VpnSite being created or updated.
   * @param vpnSiteParameters Parameters supplied to create or update VpnSite.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, vpnSiteName: string, vpnSiteParameters: Models.VpnSite, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        vpnSiteName,
        vpnSiteParameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Deletes a VpnSite.
   * @param resourceGroupName The resource group name of the VpnSite.
   * @param vpnSiteName The name of the VpnSite being deleted.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, vpnSiteName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        vpnSiteName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Lists all the vpnSites in a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.VpnSitesListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.VpnSitesListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ListVpnSitesResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListVpnSitesResult>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ListVpnSitesResult>, callback?: msRest.ServiceCallback<Models.ListVpnSitesResult>): Promise<Models.VpnSitesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.VpnSitesListByResourceGroupNextResponse>;
  }

  /**
   * Lists all the VpnSites in a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.VpnSitesListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.VpnSitesListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ListVpnSitesResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListVpnSitesResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ListVpnSitesResult>, callback?: msRest.ServiceCallback<Models.ListVpnSitesResult>): Promise<Models.VpnSitesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.VpnSitesListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnSites/{vpnSiteName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vpnSiteName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VpnSite
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateTagsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnSites/{vpnSiteName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vpnSiteName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "vpnSiteParameters",
    mapper: {
      ...Mappers.TagsObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VpnSite
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnSites",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListVpnSitesResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/vpnSites",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListVpnSitesResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnSites/{vpnSiteName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vpnSiteName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "vpnSiteParameters",
    mapper: {
      ...Mappers.VpnSite,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VpnSite
    },
    201: {
      bodyMapper: Mappers.VpnSite
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnSites/{vpnSiteName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vpnSiteName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListVpnSitesResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListVpnSitesResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
