/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/natRulesMappers";
import * as Parameters from "../models/parameters";
import { NetworkManagementClientContext } from "../networkManagementClientContext";

/** Class representing a NatRules. */
export class NatRules {
  private readonly client: NetworkManagementClientContext;

  /**
   * Create a NatRules.
   * @param {NetworkManagementClientContext} client Reference to the service client.
   */
  constructor(client: NetworkManagementClientContext) {
    this.client = client;
  }

  /**
   * Retrieves the details of a nat ruleGet.
   * @param resourceGroupName The resource group name of the VpnGateway.
   * @param gatewayName The name of the gateway.
   * @param natRuleName The name of the nat rule.
   * @param [options] The optional parameters
   * @returns Promise<Models.NatRulesGetResponse>
   */
  get(resourceGroupName: string, gatewayName: string, natRuleName: string, options?: msRest.RequestOptionsBase): Promise<Models.NatRulesGetResponse>;
  /**
   * @param resourceGroupName The resource group name of the VpnGateway.
   * @param gatewayName The name of the gateway.
   * @param natRuleName The name of the nat rule.
   * @param callback The callback
   */
  get(resourceGroupName: string, gatewayName: string, natRuleName: string, callback: msRest.ServiceCallback<Models.VpnGatewayNatRule>): void;
  /**
   * @param resourceGroupName The resource group name of the VpnGateway.
   * @param gatewayName The name of the gateway.
   * @param natRuleName The name of the nat rule.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, gatewayName: string, natRuleName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VpnGatewayNatRule>): void;
  get(resourceGroupName: string, gatewayName: string, natRuleName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VpnGatewayNatRule>, callback?: msRest.ServiceCallback<Models.VpnGatewayNatRule>): Promise<Models.NatRulesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        gatewayName,
        natRuleName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.NatRulesGetResponse>;
  }

  /**
   * Creates a nat rule to a scalable vpn gateway if it doesn't exist else updates the existing nat
   * rules.
   * @param resourceGroupName The resource group name of the VpnGateway.
   * @param gatewayName The name of the gateway.
   * @param natRuleName The name of the nat rule.
   * @param natRuleParameters Parameters supplied to create or Update a Nat Rule.
   * @param [options] The optional parameters
   * @returns Promise<Models.NatRulesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, gatewayName: string, natRuleName: string, natRuleParameters: Models.VpnGatewayNatRule, options?: msRest.RequestOptionsBase): Promise<Models.NatRulesCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,gatewayName,natRuleName,natRuleParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.NatRulesCreateOrUpdateResponse>;
  }

  /**
   * Deletes a nat rule.
   * @param resourceGroupName The resource group name of the VpnGateway.
   * @param gatewayName The name of the gateway.
   * @param natRuleName The name of the nat rule.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, gatewayName: string, natRuleName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,gatewayName,natRuleName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Retrieves all nat rules for a particular virtual wan vpn gateway.
   * @param resourceGroupName The resource group name of the VpnGateway.
   * @param gatewayName The name of the gateway.
   * @param [options] The optional parameters
   * @returns Promise<Models.NatRulesListByVpnGatewayResponse>
   */
  listByVpnGateway(resourceGroupName: string, gatewayName: string, options?: msRest.RequestOptionsBase): Promise<Models.NatRulesListByVpnGatewayResponse>;
  /**
   * @param resourceGroupName The resource group name of the VpnGateway.
   * @param gatewayName The name of the gateway.
   * @param callback The callback
   */
  listByVpnGateway(resourceGroupName: string, gatewayName: string, callback: msRest.ServiceCallback<Models.ListVpnGatewayNatRulesResult>): void;
  /**
   * @param resourceGroupName The resource group name of the VpnGateway.
   * @param gatewayName The name of the gateway.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByVpnGateway(resourceGroupName: string, gatewayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListVpnGatewayNatRulesResult>): void;
  listByVpnGateway(resourceGroupName: string, gatewayName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ListVpnGatewayNatRulesResult>, callback?: msRest.ServiceCallback<Models.ListVpnGatewayNatRulesResult>): Promise<Models.NatRulesListByVpnGatewayResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        gatewayName,
        options
      },
      listByVpnGatewayOperationSpec,
      callback) as Promise<Models.NatRulesListByVpnGatewayResponse>;
  }

  /**
   * Creates a nat rule to a scalable vpn gateway if it doesn't exist else updates the existing nat
   * rules.
   * @param resourceGroupName The resource group name of the VpnGateway.
   * @param gatewayName The name of the gateway.
   * @param natRuleName The name of the nat rule.
   * @param natRuleParameters Parameters supplied to create or Update a Nat Rule.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, gatewayName: string, natRuleName: string, natRuleParameters: Models.VpnGatewayNatRule, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        gatewayName,
        natRuleName,
        natRuleParameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Deletes a nat rule.
   * @param resourceGroupName The resource group name of the VpnGateway.
   * @param gatewayName The name of the gateway.
   * @param natRuleName The name of the nat rule.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, gatewayName: string, natRuleName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        gatewayName,
        natRuleName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Retrieves all nat rules for a particular virtual wan vpn gateway.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.NatRulesListByVpnGatewayNextResponse>
   */
  listByVpnGatewayNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.NatRulesListByVpnGatewayNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByVpnGatewayNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ListVpnGatewayNatRulesResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByVpnGatewayNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListVpnGatewayNatRulesResult>): void;
  listByVpnGatewayNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ListVpnGatewayNatRulesResult>, callback?: msRest.ServiceCallback<Models.ListVpnGatewayNatRulesResult>): Promise<Models.NatRulesListByVpnGatewayNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByVpnGatewayNextOperationSpec,
      callback) as Promise<Models.NatRulesListByVpnGatewayNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/natRules/{natRuleName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.gatewayName,
    Parameters.natRuleName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VpnGatewayNatRule
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByVpnGatewayOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/natRules",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.gatewayName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListVpnGatewayNatRulesResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/natRules/{natRuleName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.gatewayName,
    Parameters.natRuleName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "natRuleParameters",
    mapper: {
      ...Mappers.VpnGatewayNatRule,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VpnGatewayNatRule
    },
    201: {
      bodyMapper: Mappers.VpnGatewayNatRule
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}/natRules/{natRuleName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.gatewayName,
    Parameters.natRuleName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByVpnGatewayNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListVpnGatewayNatRulesResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
