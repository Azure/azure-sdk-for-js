/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/virtualHubBgpConnectionsMappers";
import * as Parameters from "../models/parameters";
import { NetworkManagementClientContext } from "../networkManagementClientContext";

/** Class representing a VirtualHubBgpConnections. */
export class VirtualHubBgpConnections {
  private readonly client: NetworkManagementClientContext;

  /**
   * Create a VirtualHubBgpConnections.
   * @param {NetworkManagementClientContext} client Reference to the service client.
   */
  constructor(client: NetworkManagementClientContext) {
    this.client = client;
  }

  /**
   * Retrieves the details of all VirtualHubBgpConnections.
   * @param resourceGroupName The resource group name of the VirtualHub.
   * @param virtualHubName The name of the VirtualHub.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualHubBgpConnectionsListResponse>
   */
  list(resourceGroupName: string, virtualHubName: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualHubBgpConnectionsListResponse>;
  /**
   * @param resourceGroupName The resource group name of the VirtualHub.
   * @param virtualHubName The name of the VirtualHub.
   * @param callback The callback
   */
  list(resourceGroupName: string, virtualHubName: string, callback: msRest.ServiceCallback<Models.ListVirtualHubBgpConnectionResults>): void;
  /**
   * @param resourceGroupName The resource group name of the VirtualHub.
   * @param virtualHubName The name of the VirtualHub.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, virtualHubName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListVirtualHubBgpConnectionResults>): void;
  list(resourceGroupName: string, virtualHubName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ListVirtualHubBgpConnectionResults>, callback?: msRest.ServiceCallback<Models.ListVirtualHubBgpConnectionResults>): Promise<Models.VirtualHubBgpConnectionsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        virtualHubName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.VirtualHubBgpConnectionsListResponse>;
  }

  /**
   * Retrieves a list of routes the virtual hub bgp connection has learned.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the virtual hub.
   * @param connectionName The name of the virtual hub bgp connection.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualHubBgpConnectionsListLearnedRoutesResponse>
   */
  listLearnedRoutes(resourceGroupName: string, hubName: string, connectionName: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualHubBgpConnectionsListLearnedRoutesResponse> {
    return this.beginListLearnedRoutes(resourceGroupName,hubName,connectionName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualHubBgpConnectionsListLearnedRoutesResponse>;
  }

  /**
   * Retrieves a list of routes the virtual hub bgp connection is advertising to the specified peer.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the virtual hub.
   * @param connectionName The name of the virtual hub bgp connection.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualHubBgpConnectionsListAdvertisedRoutesResponse>
   */
  listAdvertisedRoutes(resourceGroupName: string, hubName: string, connectionName: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualHubBgpConnectionsListAdvertisedRoutesResponse> {
    return this.beginListAdvertisedRoutes(resourceGroupName,hubName,connectionName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualHubBgpConnectionsListAdvertisedRoutesResponse>;
  }

  /**
   * Retrieves a list of routes the virtual hub bgp connection has learned.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the virtual hub.
   * @param connectionName The name of the virtual hub bgp connection.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginListLearnedRoutes(resourceGroupName: string, hubName: string, connectionName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        hubName,
        connectionName,
        options
      },
      beginListLearnedRoutesOperationSpec,
      options);
  }

  /**
   * Retrieves a list of routes the virtual hub bgp connection is advertising to the specified peer.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the virtual hub.
   * @param connectionName The name of the virtual hub bgp connection.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginListAdvertisedRoutes(resourceGroupName: string, hubName: string, connectionName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        hubName,
        connectionName,
        options
      },
      beginListAdvertisedRoutesOperationSpec,
      options);
  }

  /**
   * Retrieves the details of all VirtualHubBgpConnections.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualHubBgpConnectionsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualHubBgpConnectionsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ListVirtualHubBgpConnectionResults>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListVirtualHubBgpConnectionResults>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ListVirtualHubBgpConnectionResults>, callback?: msRest.ServiceCallback<Models.ListVirtualHubBgpConnectionResults>): Promise<Models.VirtualHubBgpConnectionsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.VirtualHubBgpConnectionsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{virtualHubName}/bgpConnections",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualHubName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListVirtualHubBgpConnectionResults
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginListLearnedRoutesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{hubName}/bgpConnections/{connectionName}/learnedRoutes",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.hubName,
    Parameters.connectionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PeerRouteList
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginListAdvertisedRoutesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{hubName}/bgpConnections/{connectionName}/advertisedRoutes",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.hubName,
    Parameters.connectionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PeerRouteList
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListVirtualHubBgpConnectionResults
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
