/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/expressRoutePortsMappers";
import * as Parameters from "../models/parameters";
import { NetworkManagementClientContext } from "../networkManagementClientContext";

/** Class representing a ExpressRoutePorts. */
export class ExpressRoutePorts {
  private readonly client: NetworkManagementClientContext;

  /**
   * Create a ExpressRoutePorts.
   * @param {NetworkManagementClientContext} client Reference to the service client.
   */
  constructor(client: NetworkManagementClientContext) {
    this.client = client;
  }

  /**
   * Deletes the specified ExpressRoutePort resource.
   * @param resourceGroupName The name of the resource group.
   * @param expressRoutePortName The name of the ExpressRoutePort resource.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, expressRoutePortName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,expressRoutePortName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Retrieves the requested ExpressRoutePort resource.
   * @param resourceGroupName The name of the resource group.
   * @param expressRoutePortName The name of ExpressRoutePort.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExpressRoutePortsGetResponse>
   */
  get(resourceGroupName: string, expressRoutePortName: string, options?: msRest.RequestOptionsBase): Promise<Models.ExpressRoutePortsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param expressRoutePortName The name of ExpressRoutePort.
   * @param callback The callback
   */
  get(resourceGroupName: string, expressRoutePortName: string, callback: msRest.ServiceCallback<Models.ExpressRoutePort>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param expressRoutePortName The name of ExpressRoutePort.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, expressRoutePortName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExpressRoutePort>): void;
  get(resourceGroupName: string, expressRoutePortName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExpressRoutePort>, callback?: msRest.ServiceCallback<Models.ExpressRoutePort>): Promise<Models.ExpressRoutePortsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        expressRoutePortName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ExpressRoutePortsGetResponse>;
  }

  /**
   * Creates or updates the specified ExpressRoutePort resource.
   * @param resourceGroupName The name of the resource group.
   * @param expressRoutePortName The name of the ExpressRoutePort resource.
   * @param parameters Parameters supplied to the create ExpressRoutePort operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExpressRoutePortsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, expressRoutePortName: string, parameters: Models.ExpressRoutePort, options?: msRest.RequestOptionsBase): Promise<Models.ExpressRoutePortsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,expressRoutePortName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ExpressRoutePortsCreateOrUpdateResponse>;
  }

  /**
   * Update ExpressRoutePort tags.
   * @param resourceGroupName The name of the resource group.
   * @param expressRoutePortName The name of the ExpressRoutePort resource.
   * @param parameters Parameters supplied to update ExpressRoutePort resource tags.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExpressRoutePortsUpdateTagsResponse>
   */
  updateTags(resourceGroupName: string, expressRoutePortName: string, parameters: Models.TagsObject, options?: msRest.RequestOptionsBase): Promise<Models.ExpressRoutePortsUpdateTagsResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param expressRoutePortName The name of the ExpressRoutePort resource.
   * @param parameters Parameters supplied to update ExpressRoutePort resource tags.
   * @param callback The callback
   */
  updateTags(resourceGroupName: string, expressRoutePortName: string, parameters: Models.TagsObject, callback: msRest.ServiceCallback<Models.ExpressRoutePort>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param expressRoutePortName The name of the ExpressRoutePort resource.
   * @param parameters Parameters supplied to update ExpressRoutePort resource tags.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateTags(resourceGroupName: string, expressRoutePortName: string, parameters: Models.TagsObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExpressRoutePort>): void;
  updateTags(resourceGroupName: string, expressRoutePortName: string, parameters: Models.TagsObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExpressRoutePort>, callback?: msRest.ServiceCallback<Models.ExpressRoutePort>): Promise<Models.ExpressRoutePortsUpdateTagsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        expressRoutePortName,
        parameters,
        options
      },
      updateTagsOperationSpec,
      callback) as Promise<Models.ExpressRoutePortsUpdateTagsResponse>;
  }

  /**
   * List all the ExpressRoutePort resources in the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExpressRoutePortsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.ExpressRoutePortsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.ExpressRoutePortListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExpressRoutePortListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExpressRoutePortListResult>, callback?: msRest.ServiceCallback<Models.ExpressRoutePortListResult>): Promise<Models.ExpressRoutePortsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.ExpressRoutePortsListByResourceGroupResponse>;
  }

  /**
   * List all the ExpressRoutePort resources in the specified subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExpressRoutePortsListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.ExpressRoutePortsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.ExpressRoutePortListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExpressRoutePortListResult>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExpressRoutePortListResult>, callback?: msRest.ServiceCallback<Models.ExpressRoutePortListResult>): Promise<Models.ExpressRoutePortsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.ExpressRoutePortsListResponse>;
  }

  /**
   * Generate a letter of authorization for the requested ExpressRoutePort resource.
   * @param resourceGroupName The name of the resource group.
   * @param expressRoutePortName The name of ExpressRoutePort.
   * @param request Request parameters supplied to generate a letter of authorization.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExpressRoutePortsGenerateLOAResponse>
   */
  generateLOA(resourceGroupName: string, expressRoutePortName: string, request: Models.GenerateExpressRoutePortsLOARequest, options?: msRest.RequestOptionsBase): Promise<Models.ExpressRoutePortsGenerateLOAResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param expressRoutePortName The name of ExpressRoutePort.
   * @param request Request parameters supplied to generate a letter of authorization.
   * @param callback The callback
   */
  generateLOA(resourceGroupName: string, expressRoutePortName: string, request: Models.GenerateExpressRoutePortsLOARequest, callback: msRest.ServiceCallback<Models.GenerateExpressRoutePortsLOAResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param expressRoutePortName The name of ExpressRoutePort.
   * @param request Request parameters supplied to generate a letter of authorization.
   * @param options The optional parameters
   * @param callback The callback
   */
  generateLOA(resourceGroupName: string, expressRoutePortName: string, request: Models.GenerateExpressRoutePortsLOARequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GenerateExpressRoutePortsLOAResult>): void;
  generateLOA(resourceGroupName: string, expressRoutePortName: string, request: Models.GenerateExpressRoutePortsLOARequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GenerateExpressRoutePortsLOAResult>, callback?: msRest.ServiceCallback<Models.GenerateExpressRoutePortsLOAResult>): Promise<Models.ExpressRoutePortsGenerateLOAResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        expressRoutePortName,
        request,
        options
      },
      generateLOAOperationSpec,
      callback) as Promise<Models.ExpressRoutePortsGenerateLOAResponse>;
  }

  /**
   * Deletes the specified ExpressRoutePort resource.
   * @param resourceGroupName The name of the resource group.
   * @param expressRoutePortName The name of the ExpressRoutePort resource.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, expressRoutePortName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        expressRoutePortName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Creates or updates the specified ExpressRoutePort resource.
   * @param resourceGroupName The name of the resource group.
   * @param expressRoutePortName The name of the ExpressRoutePort resource.
   * @param parameters Parameters supplied to the create ExpressRoutePort operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, expressRoutePortName: string, parameters: Models.ExpressRoutePort, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        expressRoutePortName,
        parameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * List all the ExpressRoutePort resources in the specified resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExpressRoutePortsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ExpressRoutePortsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ExpressRoutePortListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExpressRoutePortListResult>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExpressRoutePortListResult>, callback?: msRest.ServiceCallback<Models.ExpressRoutePortListResult>): Promise<Models.ExpressRoutePortsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.ExpressRoutePortsListByResourceGroupNextResponse>;
  }

  /**
   * List all the ExpressRoutePort resources in the specified subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExpressRoutePortsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ExpressRoutePortsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ExpressRoutePortListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExpressRoutePortListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExpressRoutePortListResult>, callback?: msRest.ServiceCallback<Models.ExpressRoutePortListResult>): Promise<Models.ExpressRoutePortsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.ExpressRoutePortsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ExpressRoutePorts/{expressRoutePortName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.expressRoutePortName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExpressRoutePort
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateTagsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ExpressRoutePorts/{expressRoutePortName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.expressRoutePortName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.TagsObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ExpressRoutePort
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ExpressRoutePorts",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExpressRoutePortListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/ExpressRoutePorts",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExpressRoutePortListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const generateLOAOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRoutePorts/{expressRoutePortName}/generateLoa",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.expressRoutePortName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.GenerateExpressRoutePortsLOARequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.GenerateExpressRoutePortsLOAResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ExpressRoutePorts/{expressRoutePortName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.expressRoutePortName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ExpressRoutePorts/{expressRoutePortName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.expressRoutePortName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.ExpressRoutePort,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ExpressRoutePort
    },
    201: {
      bodyMapper: Mappers.ExpressRoutePort
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExpressRoutePortListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExpressRoutePortListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
