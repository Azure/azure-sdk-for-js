/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { NetworkSecurityPerimeters } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { NetworkManagementClient } from "../networkManagementClient.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  NetworkSecurityPerimeter,
  NetworkSecurityPerimetersListBySubscriptionNextOptionalParams,
  NetworkSecurityPerimetersListBySubscriptionOptionalParams,
  NetworkSecurityPerimetersListBySubscriptionResponse,
  NetworkSecurityPerimetersListNextOptionalParams,
  NetworkSecurityPerimetersListOptionalParams,
  NetworkSecurityPerimetersListResponse,
  NetworkSecurityPerimetersGetOptionalParams,
  NetworkSecurityPerimetersGetResponse,
  NetworkSecurityPerimetersCreateOrUpdateOptionalParams,
  NetworkSecurityPerimetersCreateOrUpdateResponse,
  NetworkSecurityPerimetersDeleteOptionalParams,
  UpdateTagsRequest,
  NetworkSecurityPerimetersPatchOptionalParams,
  NetworkSecurityPerimetersPatchResponse,
  NetworkSecurityPerimetersListBySubscriptionNextResponse,
  NetworkSecurityPerimetersListNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing NetworkSecurityPerimeters operations. */
export class NetworkSecurityPerimetersImpl
  implements NetworkSecurityPerimeters
{
  private readonly client: NetworkManagementClient;

  /**
   * Initialize a new instance of the class NetworkSecurityPerimeters class.
   * @param client Reference to the service client
   */
  constructor(client: NetworkManagementClient) {
    this.client = client;
  }

  /**
   * List all network security perimeters in a subscription.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: NetworkSecurityPerimetersListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<NetworkSecurityPerimeter> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: NetworkSecurityPerimetersListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<NetworkSecurityPerimeter[]> {
    let result: NetworkSecurityPerimetersListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: NetworkSecurityPerimetersListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<NetworkSecurityPerimeter> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List network security perimeters in a resource group.
   * @param resourceGroupName The name of the resource group.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    options?: NetworkSecurityPerimetersListOptionalParams,
  ): PagedAsyncIterableIterator<NetworkSecurityPerimeter> {
    const iter = this.listPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(resourceGroupName, options, settings);
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    options?: NetworkSecurityPerimetersListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<NetworkSecurityPerimeter[]> {
    let result: NetworkSecurityPerimetersListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    options?: NetworkSecurityPerimetersListOptionalParams,
  ): AsyncIterableIterator<NetworkSecurityPerimeter> {
    for await (const page of this.listPagingPage(resourceGroupName, options)) {
      yield* page;
    }
  }

  /**
   * Gets the specified network security perimeter by the name.
   * @param resourceGroupName The name of the resource group.
   * @param networkSecurityPerimeterName The name of the network security perimeter.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    networkSecurityPerimeterName: string,
    options?: NetworkSecurityPerimetersGetOptionalParams,
  ): Promise<NetworkSecurityPerimetersGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, networkSecurityPerimeterName, options },
      getOperationSpec,
    );
  }

  /**
   * Creates or updates a Network Security Perimeter.
   * @param resourceGroupName The name of the resource group.
   * @param networkSecurityPerimeterName The name of the network security perimeter.
   * @param parameters Parameter supplied to create or update the network security perimeter.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    networkSecurityPerimeterName: string,
    parameters: NetworkSecurityPerimeter,
    options?: NetworkSecurityPerimetersCreateOrUpdateOptionalParams,
  ): Promise<NetworkSecurityPerimetersCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, networkSecurityPerimeterName, parameters, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Deletes a network security perimeter.
   * @param resourceGroupName The name of the resource group.
   * @param networkSecurityPerimeterName The name of the network security perimeter.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    networkSecurityPerimeterName: string,
    options?: NetworkSecurityPerimetersDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, networkSecurityPerimeterName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes a network security perimeter.
   * @param resourceGroupName The name of the resource group.
   * @param networkSecurityPerimeterName The name of the network security perimeter.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    networkSecurityPerimeterName: string,
    options?: NetworkSecurityPerimetersDeleteOptionalParams,
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      networkSecurityPerimeterName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Patch Tags for a Network Security Perimeter.
   * @param resourceGroupName The name of the resource group.
   * @param networkSecurityPerimeterName The name of the network security perimeter.
   * @param parameters Parameter supplied to the network security perimeter.
   * @param options The options parameters.
   */
  patch(
    resourceGroupName: string,
    networkSecurityPerimeterName: string,
    parameters: UpdateTagsRequest,
    options?: NetworkSecurityPerimetersPatchOptionalParams,
  ): Promise<NetworkSecurityPerimetersPatchResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, networkSecurityPerimeterName, parameters, options },
      patchOperationSpec,
    );
  }

  /**
   * List all network security perimeters in a subscription.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: NetworkSecurityPerimetersListBySubscriptionOptionalParams,
  ): Promise<NetworkSecurityPerimetersListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec,
    );
  }

  /**
   * List network security perimeters in a resource group.
   * @param resourceGroupName The name of the resource group.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    options?: NetworkSecurityPerimetersListOptionalParams,
  ): Promise<NetworkSecurityPerimetersListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listOperationSpec,
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: NetworkSecurityPerimetersListBySubscriptionNextOptionalParams,
  ): Promise<NetworkSecurityPerimetersListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    nextLink: string,
    options?: NetworkSecurityPerimetersListNextOptionalParams,
  ): Promise<NetworkSecurityPerimetersListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityPerimeters/{networkSecurityPerimeterName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkSecurityPerimeter,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.networkSecurityPerimeterName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityPerimeters/{networkSecurityPerimeterName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkSecurityPerimeter,
    },
    201: {
      bodyMapper: Mappers.NetworkSecurityPerimeter,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.parameters44,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.networkSecurityPerimeterName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityPerimeters/{networkSecurityPerimeterName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.forceDeletion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.networkSecurityPerimeterName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const patchOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityPerimeters/{networkSecurityPerimeterName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkSecurityPerimeter,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.parameters45,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.networkSecurityPerimeterName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Network/networkSecurityPerimeters",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkSecurityPerimeterListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skipToken1,
  ],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityPerimeters",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkSecurityPerimeterListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skipToken1,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkSecurityPerimeterListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkSecurityPerimeterListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
