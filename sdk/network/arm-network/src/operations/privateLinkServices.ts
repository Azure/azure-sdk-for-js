/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/privateLinkServicesMappers";
import * as Parameters from "../models/parameters";
import { NetworkManagementClientContext } from "../networkManagementClientContext";

/** Class representing a PrivateLinkServices. */
export class PrivateLinkServices {
  private readonly client: NetworkManagementClientContext;

  /**
   * Create a PrivateLinkServices.
   * @param {NetworkManagementClientContext} client Reference to the service client.
   */
  constructor(client: NetworkManagementClientContext) {
    this.client = client;
  }

  /**
   * Deletes the specified private link service.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the private link service.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, serviceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,serviceName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Gets the specified private link service by resource group.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the private link service.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateLinkServicesGetResponse>
   */
  get(resourceGroupName: string, serviceName: string, options?: Models.PrivateLinkServicesGetOptionalParams): Promise<Models.PrivateLinkServicesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the private link service.
   * @param callback The callback
   */
  get(resourceGroupName: string, serviceName: string, callback: msRest.ServiceCallback<Models.PrivateLinkService>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the private link service.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, serviceName: string, options: Models.PrivateLinkServicesGetOptionalParams, callback: msRest.ServiceCallback<Models.PrivateLinkService>): void;
  get(resourceGroupName: string, serviceName: string, options?: Models.PrivateLinkServicesGetOptionalParams | msRest.ServiceCallback<Models.PrivateLinkService>, callback?: msRest.ServiceCallback<Models.PrivateLinkService>): Promise<Models.PrivateLinkServicesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.PrivateLinkServicesGetResponse>;
  }

  /**
   * Creates or updates an private link service in the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the private link service.
   * @param parameters Parameters supplied to the create or update private link service operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateLinkServicesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, serviceName: string, parameters: Models.PrivateLinkService, options?: msRest.RequestOptionsBase): Promise<Models.PrivateLinkServicesCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,serviceName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.PrivateLinkServicesCreateOrUpdateResponse>;
  }

  /**
   * Gets all private link services in a resource group.
   * @param resourceGroupName The name of the resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateLinkServicesListResponse>
   */
  list(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.PrivateLinkServicesListResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param callback The callback
   */
  list(resourceGroupName: string, callback: msRest.ServiceCallback<Models.PrivateLinkServiceListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrivateLinkServiceListResult>): void;
  list(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PrivateLinkServiceListResult>, callback?: msRest.ServiceCallback<Models.PrivateLinkServiceListResult>): Promise<Models.PrivateLinkServicesListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.PrivateLinkServicesListResponse>;
  }

  /**
   * Gets all private link service in a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateLinkServicesListBySubscriptionResponse>
   */
  listBySubscription(options?: msRest.RequestOptionsBase): Promise<Models.PrivateLinkServicesListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.PrivateLinkServiceListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrivateLinkServiceListResult>): void;
  listBySubscription(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PrivateLinkServiceListResult>, callback?: msRest.ServiceCallback<Models.PrivateLinkServiceListResult>): Promise<Models.PrivateLinkServicesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.PrivateLinkServicesListBySubscriptionResponse>;
  }

  /**
   * Approve or reject private end point connection for a private link service in a subscription.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the private link service.
   * @param peConnectionName The name of the private end point connection.
   * @param parameters Parameters supplied to approve or reject the private end point connection.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateLinkServicesUpdatePrivateEndpointConnectionResponse>
   */
  updatePrivateEndpointConnection(resourceGroupName: string, serviceName: string, peConnectionName: string, parameters: Models.PrivateEndpointConnection, options?: msRest.RequestOptionsBase): Promise<Models.PrivateLinkServicesUpdatePrivateEndpointConnectionResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the private link service.
   * @param peConnectionName The name of the private end point connection.
   * @param parameters Parameters supplied to approve or reject the private end point connection.
   * @param callback The callback
   */
  updatePrivateEndpointConnection(resourceGroupName: string, serviceName: string, peConnectionName: string, parameters: Models.PrivateEndpointConnection, callback: msRest.ServiceCallback<Models.PrivateEndpointConnection>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the private link service.
   * @param peConnectionName The name of the private end point connection.
   * @param parameters Parameters supplied to approve or reject the private end point connection.
   * @param options The optional parameters
   * @param callback The callback
   */
  updatePrivateEndpointConnection(resourceGroupName: string, serviceName: string, peConnectionName: string, parameters: Models.PrivateEndpointConnection, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrivateEndpointConnection>): void;
  updatePrivateEndpointConnection(resourceGroupName: string, serviceName: string, peConnectionName: string, parameters: Models.PrivateEndpointConnection, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PrivateEndpointConnection>, callback?: msRest.ServiceCallback<Models.PrivateEndpointConnection>): Promise<Models.PrivateLinkServicesUpdatePrivateEndpointConnectionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        peConnectionName,
        parameters,
        options
      },
      updatePrivateEndpointConnectionOperationSpec,
      callback) as Promise<Models.PrivateLinkServicesUpdatePrivateEndpointConnectionResponse>;
  }

  /**
   * Delete private end point connection for a private link service in a subscription.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the private link service.
   * @param peConnectionName The name of the private end point connection.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deletePrivateEndpointConnection(resourceGroupName: string, serviceName: string, peConnectionName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeletePrivateEndpointConnection(resourceGroupName,serviceName,peConnectionName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Checks the subscription is visible to private link service
   * @param location The location of the domain name.
   * @param parameters The request body of CheckPrivateLinkService API call.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateLinkServicesCheckPrivateLinkServiceVisibilityResponse>
   */
  checkPrivateLinkServiceVisibility(location: string, parameters: Models.CheckPrivateLinkServiceVisibilityRequest, options?: msRest.RequestOptionsBase): Promise<Models.PrivateLinkServicesCheckPrivateLinkServiceVisibilityResponse>;
  /**
   * @param location The location of the domain name.
   * @param parameters The request body of CheckPrivateLinkService API call.
   * @param callback The callback
   */
  checkPrivateLinkServiceVisibility(location: string, parameters: Models.CheckPrivateLinkServiceVisibilityRequest, callback: msRest.ServiceCallback<Models.PrivateLinkServiceVisibility>): void;
  /**
   * @param location The location of the domain name.
   * @param parameters The request body of CheckPrivateLinkService API call.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkPrivateLinkServiceVisibility(location: string, parameters: Models.CheckPrivateLinkServiceVisibilityRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrivateLinkServiceVisibility>): void;
  checkPrivateLinkServiceVisibility(location: string, parameters: Models.CheckPrivateLinkServiceVisibilityRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PrivateLinkServiceVisibility>, callback?: msRest.ServiceCallback<Models.PrivateLinkServiceVisibility>): Promise<Models.PrivateLinkServicesCheckPrivateLinkServiceVisibilityResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        parameters,
        options
      },
      checkPrivateLinkServiceVisibilityOperationSpec,
      callback) as Promise<Models.PrivateLinkServicesCheckPrivateLinkServiceVisibilityResponse>;
  }

  /**
   * Checks the subscription is visible to private link service
   * @param location The location of the domain name.
   * @param resourceGroupName The name of the resource group.
   * @param parameters The request body of CheckPrivateLinkService API call.
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.PrivateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupResponse>
   */
  checkPrivateLinkServiceVisibilityByResourceGroup(location: string, resourceGroupName: string, parameters: Models.CheckPrivateLinkServiceVisibilityRequest, options?: msRest.RequestOptionsBase): Promise<Models.PrivateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupResponse>;
  /**
   * @param location The location of the domain name.
   * @param resourceGroupName The name of the resource group.
   * @param parameters The request body of CheckPrivateLinkService API call.
   * @param callback The callback
   */
  checkPrivateLinkServiceVisibilityByResourceGroup(location: string, resourceGroupName: string, parameters: Models.CheckPrivateLinkServiceVisibilityRequest, callback: msRest.ServiceCallback<Models.PrivateLinkServiceVisibility>): void;
  /**
   * @param location The location of the domain name.
   * @param resourceGroupName The name of the resource group.
   * @param parameters The request body of CheckPrivateLinkService API call.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkPrivateLinkServiceVisibilityByResourceGroup(location: string, resourceGroupName: string, parameters: Models.CheckPrivateLinkServiceVisibilityRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrivateLinkServiceVisibility>): void;
  checkPrivateLinkServiceVisibilityByResourceGroup(location: string, resourceGroupName: string, parameters: Models.CheckPrivateLinkServiceVisibilityRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PrivateLinkServiceVisibility>, callback?: msRest.ServiceCallback<Models.PrivateLinkServiceVisibility>): Promise<Models.PrivateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        resourceGroupName,
        parameters,
        options
      },
      checkPrivateLinkServiceVisibilityByResourceGroupOperationSpec,
      callback) as Promise<Models.PrivateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupResponse>;
  }

  /**
   * Returns all of the private link service ids that can be linked to a Private Endpoint with auto
   * approved in this subscription in this region.
   * @param location The location of the domain name.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateLinkServicesListAutoApprovedPrivateLinkServicesResponse>
   */
  listAutoApprovedPrivateLinkServices(location: string, options?: msRest.RequestOptionsBase): Promise<Models.PrivateLinkServicesListAutoApprovedPrivateLinkServicesResponse>;
  /**
   * @param location The location of the domain name.
   * @param callback The callback
   */
  listAutoApprovedPrivateLinkServices(location: string, callback: msRest.ServiceCallback<Models.AutoApprovedPrivateLinkServicesResult>): void;
  /**
   * @param location The location of the domain name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAutoApprovedPrivateLinkServices(location: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AutoApprovedPrivateLinkServicesResult>): void;
  listAutoApprovedPrivateLinkServices(location: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AutoApprovedPrivateLinkServicesResult>, callback?: msRest.ServiceCallback<Models.AutoApprovedPrivateLinkServicesResult>): Promise<Models.PrivateLinkServicesListAutoApprovedPrivateLinkServicesResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        options
      },
      listAutoApprovedPrivateLinkServicesOperationSpec,
      callback) as Promise<Models.PrivateLinkServicesListAutoApprovedPrivateLinkServicesResponse>;
  }

  /**
   * Returns all of the private link service ids that can be linked to a Private Endpoint with auto
   * approved in this subscription in this region.
   * @param location The location of the domain name.
   * @param resourceGroupName The name of the resource group.
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.PrivateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupResponse>
   */
  listAutoApprovedPrivateLinkServicesByResourceGroup(location: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.PrivateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupResponse>;
  /**
   * @param location The location of the domain name.
   * @param resourceGroupName The name of the resource group.
   * @param callback The callback
   */
  listAutoApprovedPrivateLinkServicesByResourceGroup(location: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.AutoApprovedPrivateLinkServicesResult>): void;
  /**
   * @param location The location of the domain name.
   * @param resourceGroupName The name of the resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAutoApprovedPrivateLinkServicesByResourceGroup(location: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AutoApprovedPrivateLinkServicesResult>): void;
  listAutoApprovedPrivateLinkServicesByResourceGroup(location: string, resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AutoApprovedPrivateLinkServicesResult>, callback?: msRest.ServiceCallback<Models.AutoApprovedPrivateLinkServicesResult>): Promise<Models.PrivateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        resourceGroupName,
        options
      },
      listAutoApprovedPrivateLinkServicesByResourceGroupOperationSpec,
      callback) as Promise<Models.PrivateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupResponse>;
  }

  /**
   * Deletes the specified private link service.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the private link service.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, serviceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        serviceName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Creates or updates an private link service in the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the private link service.
   * @param parameters Parameters supplied to the create or update private link service operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, serviceName: string, parameters: Models.PrivateLinkService, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        serviceName,
        parameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Delete private end point connection for a private link service in a subscription.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the private link service.
   * @param peConnectionName The name of the private end point connection.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeletePrivateEndpointConnection(resourceGroupName: string, serviceName: string, peConnectionName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        serviceName,
        peConnectionName,
        options
      },
      beginDeletePrivateEndpointConnectionOperationSpec,
      options);
  }

  /**
   * Gets all private link services in a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateLinkServicesListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PrivateLinkServicesListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PrivateLinkServiceListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrivateLinkServiceListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PrivateLinkServiceListResult>, callback?: msRest.ServiceCallback<Models.PrivateLinkServiceListResult>): Promise<Models.PrivateLinkServicesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.PrivateLinkServicesListNextResponse>;
  }

  /**
   * Gets all private link service in a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateLinkServicesListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PrivateLinkServicesListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PrivateLinkServiceListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrivateLinkServiceListResult>): void;
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PrivateLinkServiceListResult>, callback?: msRest.ServiceCallback<Models.PrivateLinkServiceListResult>): Promise<Models.PrivateLinkServicesListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.PrivateLinkServicesListBySubscriptionNextResponse>;
  }

  /**
   * Returns all of the private link service ids that can be linked to a Private Endpoint with auto
   * approved in this subscription in this region.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateLinkServicesListAutoApprovedPrivateLinkServicesNextResponse>
   */
  listAutoApprovedPrivateLinkServicesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PrivateLinkServicesListAutoApprovedPrivateLinkServicesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listAutoApprovedPrivateLinkServicesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.AutoApprovedPrivateLinkServicesResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAutoApprovedPrivateLinkServicesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AutoApprovedPrivateLinkServicesResult>): void;
  listAutoApprovedPrivateLinkServicesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AutoApprovedPrivateLinkServicesResult>, callback?: msRest.ServiceCallback<Models.AutoApprovedPrivateLinkServicesResult>): Promise<Models.PrivateLinkServicesListAutoApprovedPrivateLinkServicesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listAutoApprovedPrivateLinkServicesNextOperationSpec,
      callback) as Promise<Models.PrivateLinkServicesListAutoApprovedPrivateLinkServicesNextResponse>;
  }

  /**
   * Returns all of the private link service ids that can be linked to a Private Endpoint with auto
   * approved in this subscription in this region.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.PrivateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupNextResponse>
   */
  listAutoApprovedPrivateLinkServicesByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PrivateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listAutoApprovedPrivateLinkServicesByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.AutoApprovedPrivateLinkServicesResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAutoApprovedPrivateLinkServicesByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AutoApprovedPrivateLinkServicesResult>): void;
  listAutoApprovedPrivateLinkServicesByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AutoApprovedPrivateLinkServicesResult>, callback?: msRest.ServiceCallback<Models.AutoApprovedPrivateLinkServicesResult>): Promise<Models.PrivateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listAutoApprovedPrivateLinkServicesByResourceGroupNextOperationSpec,
      callback) as Promise<Models.PrivateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateLinkServices/{serviceName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.expand
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PrivateLinkService
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateLinkServices",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PrivateLinkServiceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/privateLinkServices",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PrivateLinkServiceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const updatePrivateEndpointConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateLinkServices/{serviceName}/privateEndpointConnections/{peConnectionName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.peConnectionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.PrivateEndpointConnection,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnection
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const checkPrivateLinkServiceVisibilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/checkPrivateLinkServiceVisibility",
  urlParameters: [
    Parameters.location0,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.CheckPrivateLinkServiceVisibilityRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PrivateLinkServiceVisibility
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const checkPrivateLinkServiceVisibilityByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/locations/{location}/checkPrivateLinkServiceVisibility",
  urlParameters: [
    Parameters.location0,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.CheckPrivateLinkServiceVisibilityRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PrivateLinkServiceVisibility
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAutoApprovedPrivateLinkServicesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/autoApprovedPrivateLinkServices",
  urlParameters: [
    Parameters.location0,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AutoApprovedPrivateLinkServicesResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAutoApprovedPrivateLinkServicesByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/locations/{location}/autoApprovedPrivateLinkServices",
  urlParameters: [
    Parameters.location0,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AutoApprovedPrivateLinkServicesResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateLinkServices/{serviceName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateLinkServices/{serviceName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.PrivateLinkService,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PrivateLinkService
    },
    201: {
      bodyMapper: Mappers.PrivateLinkService
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const beginDeletePrivateEndpointConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateLinkServices/{serviceName}/privateEndpointConnections/{peConnectionName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.peConnectionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PrivateLinkServiceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PrivateLinkServiceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listAutoApprovedPrivateLinkServicesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AutoApprovedPrivateLinkServicesResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAutoApprovedPrivateLinkServicesByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AutoApprovedPrivateLinkServicesResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
