/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { env, Recorder, RecorderStartOptions, isPlaybackMode } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { HelpRP } from "../src/helpRP.js";
import { describe, it, assert, beforeEach, afterEach } from "vitest";

const replaceableVariables: Record<string, string> = {
  AZURE_CLIENT_ID: "azure_client_id",
  AZURE_CLIENT_SECRET: "azure_client_secret",
  AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
  SUBSCRIPTION_ID: "azure_subscription_id",
};

const recorderOptions: RecorderStartOptions = {
  envSetupForPlayback: replaceableVariables,
  removeCentralSanitizers: [
    "AZSDK3493", // .name in the body is not a secret and is listed below in the beforeEach section
    "AZSDK3430", // .id in the body is not a secret and is listed below in the beforeEach section
  ],
};

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("help test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: HelpRP;
  let resourcename: string;
  let scope1: string;

  beforeEach(async (ctx) => {
    recorder = new Recorder(ctx);
    await recorder.start(recorderOptions);
    subscriptionId = env.SUBSCRIPTION_ID || "";
    // This is an example of how the environment variables are used
    const credential = createTestCredential();
    client = new HelpRP(credential, recorder.configureClientOptions({}));
    resourcename = "resourcetest1";
    scope1 =
      "subscriptions/" +
      subscriptionId +
      "/resourceGroups/myjstest/providers/Microsoft.KeyVault/vaults/testkey20230703";
  });

  afterEach(async () => {
    await recorder.stop();
  });

  // I think we could skip this case, because service don't give delete api to detele this resource
  it.skip("diagnostics create test", async function () {
    const options = {
      diagnosticResourceRequest: {
        insights: [
          {
            solutionId: "KeyVaultUnauthorizedNetworkInsight",
          },
        ],
      },
      updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
    };
    const result = await client.diagnostics.beginCreateAndWait(scope1, resourcename, options);
    assert.equal(result.name, resourcename);
  });

  it("selfhelp operation test", async () => {
    const resArray = new Array();
    for await (let item of client.operations.list()) {
      resArray.push(item);
    }
    assert.notEqual(resArray.length, 0);
  });

  it("discoverySolutionNLPSubscriptionScope post test", async () => {
    await client.discoverySolutionNLP.discoverSolutionsBySubscription(subscriptionId, {
      discoverSolutionRequest: { issueSummary: "how to retrieve certs from deleted keyvault." },
    });
  });
});
