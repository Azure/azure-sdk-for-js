/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  Recorder,
  RecorderStartOptions,
  delay,
  isPlaybackMode,
} from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { Context } from "mocha";
import { HelpRP } from "../src/helpRP";

const replaceableVariables: Record<string, string> = {
  AZURE_CLIENT_ID: "azure_client_id",
  AZURE_CLIENT_SECRET: "azure_client_secret",
  AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
  SUBSCRIPTION_ID: "azure_subscription_id"
};

const recorderOptions: RecorderStartOptions = {
  envSetupForPlayback: replaceableVariables
};

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("help test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: HelpRP;
  let location: string;
  let resourceGroup: string;
  let resourcename: string;
  let scope: string;
  let scope1: string;

  beforeEach(async function (this: Context) {
    recorder = new Recorder(this.currentTest);
    await recorder.start(recorderOptions);
    subscriptionId = env.SUBSCRIPTION_ID || '';
    // This is an example of how the environment variables are used
    const credential = createTestCredential();
    client = new HelpRP(credential, recorder.configureClientOptions({}));
    location = "eastus";
    resourceGroup = "czwjstest";
    resourcename = "resourcetest1";
    scope = "subscriptions/" + subscriptionId;
    scope1 = "subscriptions/" + subscriptionId + "/resourceGroups/myjstest/providers/Microsoft.KeyVault/vaults/testkey20230703";
  });

  afterEach(async function () {
    await recorder.stop();
  });

  it("selfhelp checkname test", async function () {
    const res = await client.diagnostics.checkNameAvailability(
      scope,
      {
        checkNameAvailabilityRequest: {
          name: "sampleName",
          // type: "Microsoft.Help/diagnostics"
          type: "diagnostics"
        }
      });
  });

  it("diagnostics create test", async function () {
    const options = {
      diagnosticResourceRequest: {
        insights: [
          {
            solutionId: "KeyVaultUnauthorizedNetworkInsight"
          }
        ]
      }
    }
    const result = await client.diagnostics.beginCreateAndWait(
      scope1,
      resourcename,
      options
    );
    assert.equal(result.name, resourcename);
  });

  it("selfhelp operation test", async function () {
    const resArray = new Array();
    for await (let item of client.operations.list()) {
      resArray.push(item);
    }
    assert.notEqual(resArray.length, 0)
  });

})
