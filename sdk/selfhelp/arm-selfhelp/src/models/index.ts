/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of operations supported by the resource provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results (if there are any).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /** Localized display information for this particular operation. */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** The check availability request body. */
export interface CheckNameAvailabilityRequest {
  /** The name of the resource for which availability needs to be checked. */
  name?: string;
  /** The resource type. */
  type?: string;
}

/** Response for whether the requested resource name is available or not. */
export interface CheckNameAvailabilityResponse {
  /** Returns true or false depending on the availability of the name */
  nameAvailable?: boolean;
  /** Reason for why value is not available. This field is returned if nameAvailable is false. */
  reason?: string;
  /** Gets an error message explaining the 'reason' value with more details. This field is returned iif nameAvailable is false. */
  message?: string;
}

/** Solution Invocation with additional params needed for invocation. */
export interface DiagnosticInvocation {
  /** Solution Id to invoke. */
  solutionId?: string;
  /** Additional parameters required to invoke the solutionId. */
  additionalParameters?: { [propertyName: string]: string };
}

/** Properties returned with in an insight. */
export interface Diagnostic {
  /** Solution Id */
  solutionId?: string;
  /** Denotes the status of the diagnostic resource. */
  status?: Status;
  /** The problems (if any) detected by this insight. */
  insights?: Insight[];
  /** Error definition. */
  error?: ErrorModel;
}

/** Detailed insights(s) obtained via the invocation of an insight diagnostic troubleshooter. */
export interface Insight {
  /** Article id. */
  id?: string;
  /** This insight's title. */
  title?: string;
  /** Detailed result content. */
  results?: string;
  /** Importance level of the insight. */
  importanceLevel?: ImportanceLevel;
}

/** Error definition. */
export interface ErrorModel {
  /**
   * Service specific error code which serves as the substatus for the HTTP error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * Service specific error type which serves as additional context for the error herein.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Description of the error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /** An array of additional nested error response info objects, as described by this contract. */
  details?: ErrorModel[];
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Discovery response. */
export interface DiscoveryResponse {
  /** The list of solution metadata. */
  value?: SolutionMetadataResource[];
  /** The link used to get the next page of solution metadata. */
  nextLink?: string;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** Diagnostic resource */
export interface DiagnosticResource extends ProxyResource {
  /** Global parameters that can be passed to all solutionIds. */
  globalParameters?: { [propertyName: string]: string };
  /** SolutionIds that are needed to be invoked. */
  insights?: DiagnosticInvocation[];
  /**
   * Diagnostic Request Accepted time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly acceptedAt?: string;
  /**
   * Status of diagnostic provisioning.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Array of Diagnostics.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly diagnostics?: Diagnostic[];
}

/** Solution Metadata resource */
export interface SolutionMetadataResource extends ProxyResource {
  /** Solution Id. */
  solutionId?: string;
  /** Solution Type. */
  solutionType?: string;
  /** A detailed description of solution. */
  description?: string;
  /** Required parameters for invoking this particular solution. */
  requiredParameterSets?: string[][];
}

/** Known values of {@link Origin} that the service accepts. */
export enum KnownOrigin {
  /** User */
  User = "user",
  /** System */
  System = "system",
  /** UserSystem */
  UserSystem = "user,system"
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export type Origin = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  /** Internal */
  Internal = "Internal"
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** All Diagnostics in the Batch succeeded. */
  Succeeded = "Succeeded",
  /** Some Diagnostics are still running or failed. */
  PartialComplete = "PartialComplete",
  /** All Diagnostics failed to run. */
  Failed = "Failed",
  /** When Diagnostic request gets canceled. */
  Canceled = "Canceled"
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded**: All Diagnostics in the Batch succeeded. \
 * **PartialComplete**: Some Diagnostics are still running or failed. \
 * **Failed**: All Diagnostics failed to run. \
 * **Canceled**: When Diagnostic request gets canceled.
 */
export type ProvisioningState = string;

/** Known values of {@link Status} that the service accepts. */
export enum KnownStatus {
  /** Diagnostic creation failed. */
  Failed = "Failed",
  /** Request is missing required inputs to run. */
  MissingInputs = "MissingInputs",
  /** Diagnostic is still running. */
  Running = "Running",
  /** Diagnostic creation succeeded. */
  Succeeded = "Succeeded",
  /** Diagnostic was timed out. */
  Timeout = "Timeout"
}

/**
 * Defines values for Status. \
 * {@link KnownStatus} can be used interchangeably with Status,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Failed**: Diagnostic creation failed. \
 * **MissingInputs**: Request is missing required inputs to run. \
 * **Running**: Diagnostic is still running. \
 * **Succeeded**: Diagnostic creation succeeded. \
 * **Timeout**: Diagnostic was timed out.
 */
export type Status = string;

/** Known values of {@link ImportanceLevel} that the service accepts. */
export enum KnownImportanceLevel {
  /** A critical insight has been found after running the diagnostic. */
  Critical = "Critical",
  /** A warning insight has been found after running the diagnostic. */
  Warning = "Warning",
  /** An information insight has been found after running the diagnostic. */
  Information = "Information"
}

/**
 * Defines values for ImportanceLevel. \
 * {@link KnownImportanceLevel} can be used interchangeably with ImportanceLevel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Critical**: A critical insight has been found after running the diagnostic. \
 * **Warning**: A warning insight has been found after running the diagnostic. \
 * **Information**: An information insight has been found after running the diagnostic.
 */
export type ImportanceLevel = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface DiagnosticsCheckNameAvailabilityOptionalParams
  extends coreClient.OperationOptions {
  /** The required parameters for availability check. */
  checkNameAvailabilityRequest?: CheckNameAvailabilityRequest;
}

/** Contains response data for the checkNameAvailability operation. */
export type DiagnosticsCheckNameAvailabilityResponse = CheckNameAvailabilityResponse;

/** Optional parameters. */
export interface DiagnosticsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** The required request body for this insightResource invocation. */
  diagnosticResourceRequest?: DiagnosticResource;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type DiagnosticsCreateResponse = DiagnosticResource;

/** Optional parameters. */
export interface DiagnosticsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DiagnosticsGetResponse = DiagnosticResource;

/** Optional parameters. */
export interface DiscoverySolutionListOptionalParams
  extends coreClient.OperationOptions {
  /** Can be used to filter solutionIds by 'ProblemClassificationId'. The filter supports only 'and' and 'eq' operators. Example: $filter=ProblemClassificationId eq '1ddda5b4-cf6c-4d4f-91ad-bc38ab0e811e' and ProblemClassificationId eq '0a9673c2-7af6-4e19-90d3-4ee2461076d9'. */
  filter?: string;
  /** Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. */
  skiptoken?: string;
}

/** Contains response data for the list operation. */
export type DiscoverySolutionListResponse = DiscoveryResponse;

/** Optional parameters. */
export interface DiscoverySolutionListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type DiscoverySolutionListNextResponse = DiscoveryResponse;

/** Optional parameters. */
export interface HelpRPOptionalParams extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
