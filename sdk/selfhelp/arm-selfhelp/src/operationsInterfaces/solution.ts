/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  SolutionCreateOptionalParams,
  SolutionCreateResponse,
  SolutionGetOptionalParams,
  SolutionGetResponse,
  SolutionUpdateOptionalParams,
  SolutionUpdateResponse
} from "../models";

/** Interface representing a Solution. */
export interface Solution {
  /**
   * Creates a solution for the specific Azure resource or subscription using the triggering criteria
   * ‘solutionId and requiredInputs’ from discovery solutions.<br/> Solutions are a rich, insightful and
   * a centralized self help experience that brings all the relevant content to troubleshoot an Azure
   * issue into a unified experience. Solutions include the following components : Text, Diagnostics ,
   * Troubleshooters, Images , Video tutorials, Tables , custom charts, images , AzureKB, etc, with
   * capabilities to support new solutions types in the future. Each solution type may require one or
   * more ‘requiredParameters’ that are required to execute the individual solution component. In the
   * absence of the ‘requiredParameters’ it is likely that some of the solutions might fail execution,
   * and you might see an empty response. <br/><br/> <b>Note:</b>  <br/>1. ‘requiredInputs’ from
   * Discovery solutions response must be passed via ‘parameters’ in the request body of Solutions API.
   * <br/>2. ‘requiredParameters’ from the Solutions response is the same as ‘ additionalParameters’ in
   * the request for diagnostics <br/>3. ‘requiredParameters’ from the Solutions response is the same as
   * ‘properties.parameters’ in the request for Troubleshooters
   * @param scope This is an extension resource provider and only resource level extension is supported
   *              at the moment.
   * @param solutionResourceName Solution resource Name.
   * @param options The options parameters.
   */
  beginCreate(
    scope: string,
    solutionResourceName: string,
    options?: SolutionCreateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<SolutionCreateResponse>,
      SolutionCreateResponse
    >
  >;
  /**
   * Creates a solution for the specific Azure resource or subscription using the triggering criteria
   * ‘solutionId and requiredInputs’ from discovery solutions.<br/> Solutions are a rich, insightful and
   * a centralized self help experience that brings all the relevant content to troubleshoot an Azure
   * issue into a unified experience. Solutions include the following components : Text, Diagnostics ,
   * Troubleshooters, Images , Video tutorials, Tables , custom charts, images , AzureKB, etc, with
   * capabilities to support new solutions types in the future. Each solution type may require one or
   * more ‘requiredParameters’ that are required to execute the individual solution component. In the
   * absence of the ‘requiredParameters’ it is likely that some of the solutions might fail execution,
   * and you might see an empty response. <br/><br/> <b>Note:</b>  <br/>1. ‘requiredInputs’ from
   * Discovery solutions response must be passed via ‘parameters’ in the request body of Solutions API.
   * <br/>2. ‘requiredParameters’ from the Solutions response is the same as ‘ additionalParameters’ in
   * the request for diagnostics <br/>3. ‘requiredParameters’ from the Solutions response is the same as
   * ‘properties.parameters’ in the request for Troubleshooters
   * @param scope This is an extension resource provider and only resource level extension is supported
   *              at the moment.
   * @param solutionResourceName Solution resource Name.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    scope: string,
    solutionResourceName: string,
    options?: SolutionCreateOptionalParams
  ): Promise<SolutionCreateResponse>;
  /**
   * Get the solution using the applicable solutionResourceName while creating the solution.
   * @param scope This is an extension resource provider and only resource level extension is supported
   *              at the moment.
   * @param solutionResourceName Solution resource Name.
   * @param options The options parameters.
   */
  get(
    scope: string,
    solutionResourceName: string,
    options?: SolutionGetOptionalParams
  ): Promise<SolutionGetResponse>;
  /**
   * Update the requiredInputs or additional information needed to execute the solution
   * @param scope This is an extension resource provider and only resource level extension is supported
   *              at the moment.
   * @param solutionResourceName Solution resource Name.
   * @param options The options parameters.
   */
  beginUpdate(
    scope: string,
    solutionResourceName: string,
    options?: SolutionUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<SolutionUpdateResponse>,
      SolutionUpdateResponse
    >
  >;
  /**
   * Update the requiredInputs or additional information needed to execute the solution
   * @param scope This is an extension resource provider and only resource level extension is supported
   *              at the moment.
   * @param solutionResourceName Solution resource Name.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    scope: string,
    solutionResourceName: string,
    options?: SolutionUpdateOptionalParams
  ): Promise<SolutionUpdateResponse>;
}
