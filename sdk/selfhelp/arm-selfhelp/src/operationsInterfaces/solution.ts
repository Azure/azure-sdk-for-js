/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  SolutionCreateOptionalParams,
  SolutionCreateResponse,
  SolutionGetOptionalParams,
  SolutionGetResponse,
  SolutionUpdateOptionalParams,
  SolutionUpdateResponse,
  SolutionWarmUpOptionalParams,
} from "../models";

/** Interface representing a Solution. */
export interface Solution {
  /**
   * Creates a solution for the specific Azure resource or subscription using the inputs ‘solutionId and
   * requiredInputs’ from discovery solutions. <br/> Azure solutions comprise a comprehensive library of
   * self-help resources that have been thoughtfully curated by Azure engineers to aid customers in
   * resolving typical troubleshooting issues. These solutions encompass: <br/> (1.) Dynamic and
   * context-aware diagnostics, guided troubleshooting wizards, and data visualizations. <br/> (2.) Rich
   * instructional video tutorials and illustrative diagrams and images. <br/> (3.) Thoughtfully
   * assembled textual troubleshooting instructions. <br/> All these components are seamlessly converged
   * into unified solutions tailored to address a specific support problem area.
   * @param scope scope = resourceUri of affected resource.<br/> For example:
   *              /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read
   *
   * @param solutionResourceName Solution resource Name.
   * @param options The options parameters.
   */
  beginCreate(
    scope: string,
    solutionResourceName: string,
    options?: SolutionCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SolutionCreateResponse>,
      SolutionCreateResponse
    >
  >;
  /**
   * Creates a solution for the specific Azure resource or subscription using the inputs ‘solutionId and
   * requiredInputs’ from discovery solutions. <br/> Azure solutions comprise a comprehensive library of
   * self-help resources that have been thoughtfully curated by Azure engineers to aid customers in
   * resolving typical troubleshooting issues. These solutions encompass: <br/> (1.) Dynamic and
   * context-aware diagnostics, guided troubleshooting wizards, and data visualizations. <br/> (2.) Rich
   * instructional video tutorials and illustrative diagrams and images. <br/> (3.) Thoughtfully
   * assembled textual troubleshooting instructions. <br/> All these components are seamlessly converged
   * into unified solutions tailored to address a specific support problem area.
   * @param scope scope = resourceUri of affected resource.<br/> For example:
   *              /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read
   *
   * @param solutionResourceName Solution resource Name.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    scope: string,
    solutionResourceName: string,
    options?: SolutionCreateOptionalParams,
  ): Promise<SolutionCreateResponse>;
  /**
   * Get the solution using the applicable solutionResourceName while creating the solution.
   * @param scope scope = resourceUri of affected resource.<br/> For example:
   *              /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read
   *
   * @param solutionResourceName Solution resource Name.
   * @param options The options parameters.
   */
  get(
    scope: string,
    solutionResourceName: string,
    options?: SolutionGetOptionalParams,
  ): Promise<SolutionGetResponse>;
  /**
   * Update the requiredInputs or additional information needed to execute the solution
   * @param scope scope = resourceUri of affected resource.<br/> For example:
   *              /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read
   *
   * @param solutionResourceName Solution resource Name.
   * @param options The options parameters.
   */
  beginUpdate(
    scope: string,
    solutionResourceName: string,
    options?: SolutionUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SolutionUpdateResponse>,
      SolutionUpdateResponse
    >
  >;
  /**
   * Update the requiredInputs or additional information needed to execute the solution
   * @param scope scope = resourceUri of affected resource.<br/> For example:
   *              /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read
   *
   * @param solutionResourceName Solution resource Name.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    scope: string,
    solutionResourceName: string,
    options?: SolutionUpdateOptionalParams,
  ): Promise<SolutionUpdateResponse>;
  /**
   * Warm up the solution resource by preloading asynchronous diagnostics results into cache
   * @param scope scope = resourceUri of affected resource.<br/> For example:
   *              /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read
   *
   * @param solutionResourceName Solution resource Name.
   * @param options The options parameters.
   */
  warmUp(
    scope: string,
    solutionResourceName: string,
    options?: SolutionWarmUpOptionalParams,
  ): Promise<void>;
}
