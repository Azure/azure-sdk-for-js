/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  DiagnosticsCheckNameAvailabilityOptionalParams,
  DiagnosticsCheckNameAvailabilityResponse,
  DiagnosticsCreateOptionalParams,
  DiagnosticsCreateResponse,
  DiagnosticsGetOptionalParams,
  DiagnosticsGetResponse
} from "../models";

/** Interface representing a Diagnostics. */
export interface Diagnostics {
  /**
   * This API is used to check the uniqueness of a resource name used for a diagnostic check.
   * @param options The options parameters.
   */
  checkNameAvailability(
    options?: DiagnosticsCheckNameAvailabilityOptionalParams
  ): Promise<DiagnosticsCheckNameAvailabilityResponse>;
  /**
   * Diagnostics tells you precisely the root cause of the issue and how to address it. You can get
   * diagnostics once you discover and identify the relevant solution for your Azure issue.<br/><br/> You
   * can create diagnostics using the ‘solutionId’  from Solution Discovery API response and
   * ‘additionalParameters’ <br/><br/> <b>Note: </b>‘requiredParameterSets’ from Solutions Discovery API
   * response must be passed via ‘additionalParameters’ as an input to Diagnostics API
   * @param options The options parameters.
   */
  beginCreate(
    options?: DiagnosticsCreateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<DiagnosticsCreateResponse>,
      DiagnosticsCreateResponse
    >
  >;
  /**
   * Diagnostics tells you precisely the root cause of the issue and how to address it. You can get
   * diagnostics once you discover and identify the relevant solution for your Azure issue.<br/><br/> You
   * can create diagnostics using the ‘solutionId’  from Solution Discovery API response and
   * ‘additionalParameters’ <br/><br/> <b>Note: </b>‘requiredParameterSets’ from Solutions Discovery API
   * response must be passed via ‘additionalParameters’ as an input to Diagnostics API
   * @param options The options parameters.
   */
  beginCreateAndWait(
    options?: DiagnosticsCreateOptionalParams
  ): Promise<DiagnosticsCreateResponse>;
  /**
   * Get the diagnostics using the 'diagnosticsResourceName' you chose while creating the diagnostic.
   * @param options The options parameters.
   */
  get(options?: DiagnosticsGetOptionalParams): Promise<DiagnosticsGetResponse>;
}
