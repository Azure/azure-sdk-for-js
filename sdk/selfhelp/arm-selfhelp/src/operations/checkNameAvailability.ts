/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CheckNameAvailability } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HelpRP } from "../helpRP";
import {
  CheckNameAvailabilityCheckAvailabilityOptionalParams,
  CheckNameAvailabilityCheckAvailabilityResponse,
} from "../models";

/** Class containing CheckNameAvailability operations. */
export class CheckNameAvailabilityImpl implements CheckNameAvailability {
  private readonly client: HelpRP;

  /**
   * Initialize a new instance of the class CheckNameAvailability class.
   * @param client Reference to the service client
   */
  constructor(client: HelpRP) {
    this.client = client;
  }

  /**
   * This API is used to check the uniqueness of a resource name used for a diagnostic, troubleshooter or
   * solutions
   * @param scope scope = resourceUri of affected resource.<br/> For example:
   *              /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read
   *
   * @param options The options parameters.
   */
  checkAvailability(
    scope: string,
    options?: CheckNameAvailabilityCheckAvailabilityOptionalParams,
  ): Promise<CheckNameAvailabilityCheckAvailabilityResponse> {
    return this.client.sendOperationRequest(
      { scope, options },
      checkAvailabilityOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const checkAvailabilityOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Help/checkNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.checkNameAvailabilityRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
