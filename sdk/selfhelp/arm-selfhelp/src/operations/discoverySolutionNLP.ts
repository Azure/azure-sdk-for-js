/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { DiscoverySolutionNLP } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HelpRP } from "../helpRP";
import {
  DiscoverySolutionNLPDiscoverSolutionsOptionalParams,
  DiscoverySolutionNLPDiscoverSolutionsResponse,
  DiscoverySolutionNLPDiscoverSolutionsBySubscriptionOptionalParams,
  DiscoverySolutionNLPDiscoverSolutionsBySubscriptionResponse,
} from "../models";

/** Class containing DiscoverySolutionNLP operations. */
export class DiscoverySolutionNLPImpl implements DiscoverySolutionNLP {
  private readonly client: HelpRP;

  /**
   * Initialize a new instance of the class DiscoverySolutionNLP class.
   * @param client Reference to the service client
   */
  constructor(client: HelpRP) {
    this.client = client;
  }

  /**
   * Search for relevant Azure Diagnostics, Solutions and Troubleshooters using a natural language issue
   * summary.
   * @param options The options parameters.
   */
  discoverSolutions(
    options?: DiscoverySolutionNLPDiscoverSolutionsOptionalParams,
  ): Promise<DiscoverySolutionNLPDiscoverSolutionsResponse> {
    return this.client.sendOperationRequest(
      { options },
      discoverSolutionsOperationSpec,
    );
  }

  /**
   * Search for relevant Azure Diagnostics, Solutions and Troubleshooters using a natural language issue
   * summary and subscription.
   * @param subscriptionId The Azure subscription ID.
   * @param options The options parameters.
   */
  discoverSolutionsBySubscription(
    subscriptionId: string,
    options?: DiscoverySolutionNLPDiscoverSolutionsBySubscriptionOptionalParams,
  ): Promise<DiscoverySolutionNLPDiscoverSolutionsBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, options },
      discoverSolutionsBySubscriptionOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const discoverSolutionsOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Help/discoverSolutions",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DiscoveryNlpResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.discoverSolutionRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const discoverSolutionsBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Help/discoverSolutions",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DiscoveryNlpResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.discoverSolutionRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
