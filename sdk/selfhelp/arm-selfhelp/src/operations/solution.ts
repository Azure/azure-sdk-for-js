/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Solution } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HelpRP } from "../helpRP";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  SolutionCreateOptionalParams,
  SolutionCreateResponse,
  SolutionGetOptionalParams,
  SolutionGetResponse,
  SolutionUpdateOptionalParams,
  SolutionUpdateResponse,
  SolutionWarmUpOptionalParams,
} from "../models";

/** Class containing Solution operations. */
export class SolutionImpl implements Solution {
  private readonly client: HelpRP;

  /**
   * Initialize a new instance of the class Solution class.
   * @param client Reference to the service client
   */
  constructor(client: HelpRP) {
    this.client = client;
  }

  /**
   * Creates a solution for the specific Azure resource or subscription using the inputs ‘solutionId and
   * requiredInputs’ from discovery solutions. <br/> Azure solutions comprise a comprehensive library of
   * self-help resources that have been thoughtfully curated by Azure engineers to aid customers in
   * resolving typical troubleshooting issues. These solutions encompass: <br/> (1.) Dynamic and
   * context-aware diagnostics, guided troubleshooting wizards, and data visualizations. <br/> (2.) Rich
   * instructional video tutorials and illustrative diagrams and images. <br/> (3.) Thoughtfully
   * assembled textual troubleshooting instructions. <br/> All these components are seamlessly converged
   * into unified solutions tailored to address a specific support problem area.
   * @param scope scope = resourceUri of affected resource.<br/> For example:
   *              /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read
   *
   * @param solutionResourceName Solution resource Name.
   * @param options The options parameters.
   */
  async beginCreate(
    scope: string,
    solutionResourceName: string,
    options?: SolutionCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SolutionCreateResponse>,
      SolutionCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SolutionCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { scope, solutionResourceName, options },
      spec: createOperationSpec,
    });
    const poller = await createHttpPoller<
      SolutionCreateResponse,
      OperationState<SolutionCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates a solution for the specific Azure resource or subscription using the inputs ‘solutionId and
   * requiredInputs’ from discovery solutions. <br/> Azure solutions comprise a comprehensive library of
   * self-help resources that have been thoughtfully curated by Azure engineers to aid customers in
   * resolving typical troubleshooting issues. These solutions encompass: <br/> (1.) Dynamic and
   * context-aware diagnostics, guided troubleshooting wizards, and data visualizations. <br/> (2.) Rich
   * instructional video tutorials and illustrative diagrams and images. <br/> (3.) Thoughtfully
   * assembled textual troubleshooting instructions. <br/> All these components are seamlessly converged
   * into unified solutions tailored to address a specific support problem area.
   * @param scope scope = resourceUri of affected resource.<br/> For example:
   *              /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read
   *
   * @param solutionResourceName Solution resource Name.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    scope: string,
    solutionResourceName: string,
    options?: SolutionCreateOptionalParams,
  ): Promise<SolutionCreateResponse> {
    const poller = await this.beginCreate(scope, solutionResourceName, options);
    return poller.pollUntilDone();
  }

  /**
   * Get the solution using the applicable solutionResourceName while creating the solution.
   * @param scope scope = resourceUri of affected resource.<br/> For example:
   *              /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read
   *
   * @param solutionResourceName Solution resource Name.
   * @param options The options parameters.
   */
  get(
    scope: string,
    solutionResourceName: string,
    options?: SolutionGetOptionalParams,
  ): Promise<SolutionGetResponse> {
    return this.client.sendOperationRequest(
      { scope, solutionResourceName, options },
      getOperationSpec,
    );
  }

  /**
   * Update the requiredInputs or additional information needed to execute the solution
   * @param scope scope = resourceUri of affected resource.<br/> For example:
   *              /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read
   *
   * @param solutionResourceName Solution resource Name.
   * @param options The options parameters.
   */
  async beginUpdate(
    scope: string,
    solutionResourceName: string,
    options?: SolutionUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SolutionUpdateResponse>,
      SolutionUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SolutionUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { scope, solutionResourceName, options },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      SolutionUpdateResponse,
      OperationState<SolutionUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update the requiredInputs or additional information needed to execute the solution
   * @param scope scope = resourceUri of affected resource.<br/> For example:
   *              /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read
   *
   * @param solutionResourceName Solution resource Name.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    scope: string,
    solutionResourceName: string,
    options?: SolutionUpdateOptionalParams,
  ): Promise<SolutionUpdateResponse> {
    const poller = await this.beginUpdate(scope, solutionResourceName, options);
    return poller.pollUntilDone();
  }

  /**
   * Warm up the solution resource by preloading asynchronous diagnostics results into cache
   * @param scope scope = resourceUri of affected resource.<br/> For example:
   *              /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read
   *
   * @param solutionResourceName Solution resource Name.
   * @param options The options parameters.
   */
  warmUp(
    scope: string,
    solutionResourceName: string,
    options?: SolutionWarmUpOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { scope, solutionResourceName, options },
      warmUpOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SolutionResource,
    },
    201: {
      bodyMapper: Mappers.SolutionResource,
    },
    202: {
      bodyMapper: Mappers.SolutionResource,
    },
    204: {
      bodyMapper: Mappers.SolutionResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.solutionRequestBody,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.solutionResourceName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SolutionResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.solutionResourceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SolutionResource,
      headersMapper: Mappers.SolutionUpdateHeaders,
    },
    201: {
      bodyMapper: Mappers.SolutionResource,
      headersMapper: Mappers.SolutionUpdateHeaders,
    },
    202: {
      bodyMapper: Mappers.SolutionResource,
      headersMapper: Mappers.SolutionUpdateHeaders,
    },
    204: {
      bodyMapper: Mappers.SolutionResource,
      headersMapper: Mappers.SolutionUpdateHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.solutionPatchRequestBody,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.solutionResourceName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const warmUpOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}/warmup",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.solutionWarmUpRequestBody,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.solutionResourceName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
