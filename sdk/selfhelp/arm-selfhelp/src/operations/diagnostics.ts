/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Diagnostics } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HelpRP } from "../helpRP";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  DiagnosticsCreateOptionalParams,
  DiagnosticsCreateResponse,
  DiagnosticsGetOptionalParams,
  DiagnosticsGetResponse
} from "../models";

/** Class containing Diagnostics operations. */
export class DiagnosticsImpl implements Diagnostics {
  private readonly client: HelpRP;

  /**
   * Initialize a new instance of the class Diagnostics class.
   * @param client Reference to the service client
   */
  constructor(client: HelpRP) {
    this.client = client;
  }

  /**
   * Creates a diagnostic for the specific resource using solutionId and requiredInputs* from discovery
   * solutions. <br/>Diagnostics are powerful solutions that access product resources or other relevant
   * data and provide the root cause of the issue and the steps to address the issue.<br/><br/> <b>Note:
   * </b> ‘requiredInputs’ from Discovery solutions response must be passed via ‘additionalParameters’ as
   * an input to Diagnostics API.
   * @param scope scope = resourceUri of affected resource.<br/> For example:
   *              /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read
   *
   * @param diagnosticsResourceName Unique resource name for insight resources
   * @param options The options parameters.
   */
  async beginCreate(
    scope: string,
    diagnosticsResourceName: string,
    options?: DiagnosticsCreateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<DiagnosticsCreateResponse>,
      DiagnosticsCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DiagnosticsCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { scope, diagnosticsResourceName, options },
      spec: createOperationSpec
    });
    const poller = await createHttpPoller<
      DiagnosticsCreateResponse,
      OperationState<DiagnosticsCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates a diagnostic for the specific resource using solutionId and requiredInputs* from discovery
   * solutions. <br/>Diagnostics are powerful solutions that access product resources or other relevant
   * data and provide the root cause of the issue and the steps to address the issue.<br/><br/> <b>Note:
   * </b> ‘requiredInputs’ from Discovery solutions response must be passed via ‘additionalParameters’ as
   * an input to Diagnostics API.
   * @param scope scope = resourceUri of affected resource.<br/> For example:
   *              /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read
   *
   * @param diagnosticsResourceName Unique resource name for insight resources
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    scope: string,
    diagnosticsResourceName: string,
    options?: DiagnosticsCreateOptionalParams
  ): Promise<DiagnosticsCreateResponse> {
    const poller = await this.beginCreate(
      scope,
      diagnosticsResourceName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Get the diagnostics using the 'diagnosticsResourceName' you chose while creating the diagnostic.
   * @param scope scope = resourceUri of affected resource.<br/> For example:
   *              /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read
   *
   * @param diagnosticsResourceName Unique resource name for insight resources
   * @param options The options parameters.
   */
  get(
    scope: string,
    diagnosticsResourceName: string,
    options?: DiagnosticsGetOptionalParams
  ): Promise<DiagnosticsGetResponse> {
    return this.client.sendOperationRequest(
      { scope, diagnosticsResourceName, options },
      getOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Help/diagnostics/{diagnosticsResourceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticResource
    },
    201: {
      bodyMapper: Mappers.DiagnosticResource
    },
    202: {
      bodyMapper: Mappers.DiagnosticResource
    },
    204: {
      bodyMapper: Mappers.DiagnosticResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.diagnosticResourceRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.diagnosticsResourceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Help/diagnostics/{diagnosticsResourceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.diagnosticsResourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
