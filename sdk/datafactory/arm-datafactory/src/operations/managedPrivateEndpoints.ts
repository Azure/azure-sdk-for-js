/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/managedPrivateEndpointsMappers";
import * as Parameters from "../models/parameters";
import { DataFactoryManagementClientContext } from "../dataFactoryManagementClientContext";

/** Class representing a ManagedPrivateEndpoints. */
export class ManagedPrivateEndpoints {
  private readonly client: DataFactoryManagementClientContext;

  /**
   * Create a ManagedPrivateEndpoints.
   * @param {DataFactoryManagementClientContext} client Reference to the service client.
   */
  constructor(client: DataFactoryManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists managed private endpoints.
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param managedVirtualNetworkName Managed virtual network name
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagedPrivateEndpointsListByFactoryResponse>
   */
  listByFactory(resourceGroupName: string, factoryName: string, managedVirtualNetworkName: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagedPrivateEndpointsListByFactoryResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param managedVirtualNetworkName Managed virtual network name
   * @param callback The callback
   */
  listByFactory(resourceGroupName: string, factoryName: string, managedVirtualNetworkName: string, callback: msRest.ServiceCallback<Models.ManagedPrivateEndpointListResponse>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param managedVirtualNetworkName Managed virtual network name
   * @param options The optional parameters
   * @param callback The callback
   */
  listByFactory(resourceGroupName: string, factoryName: string, managedVirtualNetworkName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagedPrivateEndpointListResponse>): void;
  listByFactory(resourceGroupName: string, factoryName: string, managedVirtualNetworkName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagedPrivateEndpointListResponse>, callback?: msRest.ServiceCallback<Models.ManagedPrivateEndpointListResponse>): Promise<Models.ManagedPrivateEndpointsListByFactoryResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        factoryName,
        managedVirtualNetworkName,
        options
      },
      listByFactoryOperationSpec,
      callback) as Promise<Models.ManagedPrivateEndpointsListByFactoryResponse>;
  }

  /**
   * Creates or updates a managed private endpoint.
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param managedVirtualNetworkName Managed virtual network name
   * @param managedPrivateEndpointName Managed private endpoint name
   * @param managedPrivateEndpoint Managed private endpoint resource definition.
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagedPrivateEndpointsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, factoryName: string, managedVirtualNetworkName: string, managedPrivateEndpointName: string, managedPrivateEndpoint: Models.ManagedPrivateEndpointResource, options?: Models.ManagedPrivateEndpointsCreateOrUpdateOptionalParams): Promise<Models.ManagedPrivateEndpointsCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param managedVirtualNetworkName Managed virtual network name
   * @param managedPrivateEndpointName Managed private endpoint name
   * @param managedPrivateEndpoint Managed private endpoint resource definition.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, factoryName: string, managedVirtualNetworkName: string, managedPrivateEndpointName: string, managedPrivateEndpoint: Models.ManagedPrivateEndpointResource, callback: msRest.ServiceCallback<Models.ManagedPrivateEndpointResource>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param managedVirtualNetworkName Managed virtual network name
   * @param managedPrivateEndpointName Managed private endpoint name
   * @param managedPrivateEndpoint Managed private endpoint resource definition.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, factoryName: string, managedVirtualNetworkName: string, managedPrivateEndpointName: string, managedPrivateEndpoint: Models.ManagedPrivateEndpointResource, options: Models.ManagedPrivateEndpointsCreateOrUpdateOptionalParams, callback: msRest.ServiceCallback<Models.ManagedPrivateEndpointResource>): void;
  createOrUpdate(resourceGroupName: string, factoryName: string, managedVirtualNetworkName: string, managedPrivateEndpointName: string, managedPrivateEndpoint: Models.ManagedPrivateEndpointResource, options?: Models.ManagedPrivateEndpointsCreateOrUpdateOptionalParams | msRest.ServiceCallback<Models.ManagedPrivateEndpointResource>, callback?: msRest.ServiceCallback<Models.ManagedPrivateEndpointResource>): Promise<Models.ManagedPrivateEndpointsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        factoryName,
        managedVirtualNetworkName,
        managedPrivateEndpointName,
        managedPrivateEndpoint,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.ManagedPrivateEndpointsCreateOrUpdateResponse>;
  }

  /**
   * Gets a managed private endpoint.
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param managedVirtualNetworkName Managed virtual network name
   * @param managedPrivateEndpointName Managed private endpoint name
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagedPrivateEndpointsGetResponse>
   */
  get(resourceGroupName: string, factoryName: string, managedVirtualNetworkName: string, managedPrivateEndpointName: string, options?: Models.ManagedPrivateEndpointsGetOptionalParams): Promise<Models.ManagedPrivateEndpointsGetResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param managedVirtualNetworkName Managed virtual network name
   * @param managedPrivateEndpointName Managed private endpoint name
   * @param callback The callback
   */
  get(resourceGroupName: string, factoryName: string, managedVirtualNetworkName: string, managedPrivateEndpointName: string, callback: msRest.ServiceCallback<Models.ManagedPrivateEndpointResource>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param managedVirtualNetworkName Managed virtual network name
   * @param managedPrivateEndpointName Managed private endpoint name
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, factoryName: string, managedVirtualNetworkName: string, managedPrivateEndpointName: string, options: Models.ManagedPrivateEndpointsGetOptionalParams, callback: msRest.ServiceCallback<Models.ManagedPrivateEndpointResource>): void;
  get(resourceGroupName: string, factoryName: string, managedVirtualNetworkName: string, managedPrivateEndpointName: string, options?: Models.ManagedPrivateEndpointsGetOptionalParams | msRest.ServiceCallback<Models.ManagedPrivateEndpointResource>, callback?: msRest.ServiceCallback<Models.ManagedPrivateEndpointResource>): Promise<Models.ManagedPrivateEndpointsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        factoryName,
        managedVirtualNetworkName,
        managedPrivateEndpointName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ManagedPrivateEndpointsGetResponse>;
  }

  /**
   * Deletes a managed private endpoint.
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param managedVirtualNetworkName Managed virtual network name
   * @param managedPrivateEndpointName Managed private endpoint name
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, factoryName: string, managedVirtualNetworkName: string, managedPrivateEndpointName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param managedVirtualNetworkName Managed virtual network name
   * @param managedPrivateEndpointName Managed private endpoint name
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, factoryName: string, managedVirtualNetworkName: string, managedPrivateEndpointName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param managedVirtualNetworkName Managed virtual network name
   * @param managedPrivateEndpointName Managed private endpoint name
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, factoryName: string, managedVirtualNetworkName: string, managedPrivateEndpointName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, factoryName: string, managedVirtualNetworkName: string, managedPrivateEndpointName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        factoryName,
        managedVirtualNetworkName,
        managedPrivateEndpointName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Lists managed private endpoints.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagedPrivateEndpointsListByFactoryNextResponse>
   */
  listByFactoryNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagedPrivateEndpointsListByFactoryNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByFactoryNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ManagedPrivateEndpointListResponse>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByFactoryNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagedPrivateEndpointListResponse>): void;
  listByFactoryNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagedPrivateEndpointListResponse>, callback?: msRest.ServiceCallback<Models.ManagedPrivateEndpointListResponse>): Promise<Models.ManagedPrivateEndpointsListByFactoryNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByFactoryNextOperationSpec,
      callback) as Promise<Models.ManagedPrivateEndpointsListByFactoryNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByFactoryOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/managedVirtualNetworks/{managedVirtualNetworkName}/managedPrivateEndpoints",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.factoryName,
    Parameters.managedVirtualNetworkName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedPrivateEndpointListResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/managedVirtualNetworks/{managedVirtualNetworkName}/managedPrivateEndpoints/{managedPrivateEndpointName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.factoryName,
    Parameters.managedVirtualNetworkName,
    Parameters.managedPrivateEndpointName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "managedPrivateEndpoint",
    mapper: {
      ...Mappers.ManagedPrivateEndpointResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ManagedPrivateEndpointResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/managedVirtualNetworks/{managedVirtualNetworkName}/managedPrivateEndpoints/{managedPrivateEndpointName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.factoryName,
    Parameters.managedVirtualNetworkName,
    Parameters.managedPrivateEndpointName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifNoneMatch,
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedPrivateEndpointResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/managedVirtualNetworks/{managedVirtualNetworkName}/managedPrivateEndpoints/{managedPrivateEndpointName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.factoryName,
    Parameters.managedVirtualNetworkName,
    Parameters.managedPrivateEndpointName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByFactoryNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedPrivateEndpointListResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
