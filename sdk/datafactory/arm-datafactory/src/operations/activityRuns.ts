/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/activityRunsMappers";
import * as Parameters from "../models/parameters";
import { DataFactoryManagementClientContext } from "../dataFactoryManagementClientContext";

/** Class representing a ActivityRuns. */
export class ActivityRuns {
  private readonly client: DataFactoryManagementClientContext;

  /**
   * Create a ActivityRuns.
   * @param {DataFactoryManagementClientContext} client Reference to the service client.
   */
  constructor(client: DataFactoryManagementClientContext) {
    this.client = client;
  }

  /**
   * Query activity runs based on input filter conditions.
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param runId The pipeline run identifier.
   * @param filterParameters Parameters to filter the activity runs.
   * @param [options] The optional parameters
   * @returns Promise<Models.ActivityRunsQueryByPipelineRunResponse>
   */
  queryByPipelineRun(resourceGroupName: string, factoryName: string, runId: string, filterParameters: Models.RunFilterParameters, options?: msRest.RequestOptionsBase): Promise<Models.ActivityRunsQueryByPipelineRunResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param runId The pipeline run identifier.
   * @param filterParameters Parameters to filter the activity runs.
   * @param callback The callback
   */
  queryByPipelineRun(resourceGroupName: string, factoryName: string, runId: string, filterParameters: Models.RunFilterParameters, callback: msRest.ServiceCallback<Models.ActivityRunsQueryResponse>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param runId The pipeline run identifier.
   * @param filterParameters Parameters to filter the activity runs.
   * @param options The optional parameters
   * @param callback The callback
   */
  queryByPipelineRun(resourceGroupName: string, factoryName: string, runId: string, filterParameters: Models.RunFilterParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ActivityRunsQueryResponse>): void;
  queryByPipelineRun(resourceGroupName: string, factoryName: string, runId: string, filterParameters: Models.RunFilterParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ActivityRunsQueryResponse>, callback?: msRest.ServiceCallback<Models.ActivityRunsQueryResponse>): Promise<Models.ActivityRunsQueryByPipelineRunResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        factoryName,
        runId,
        filterParameters,
        options
      },
      queryByPipelineRunOperationSpec,
      callback) as Promise<Models.ActivityRunsQueryByPipelineRunResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const queryByPipelineRunOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelineruns/{runId}/queryActivityruns",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.factoryName,
    Parameters.runId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "filterParameters",
    mapper: {
      ...Mappers.RunFilterParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ActivityRunsQueryResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
