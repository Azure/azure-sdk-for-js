/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ChangeDataCapture } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DataFactoryManagementClient } from "../dataFactoryManagementClient";
import {
  ChangeDataCaptureResource,
  ChangeDataCaptureListByFactoryNextOptionalParams,
  ChangeDataCaptureListByFactoryOptionalParams,
  ChangeDataCaptureListByFactoryResponse,
  ChangeDataCaptureCreateOrUpdateOptionalParams,
  ChangeDataCaptureCreateOrUpdateResponse,
  ChangeDataCaptureGetOptionalParams,
  ChangeDataCaptureGetResponse,
  ChangeDataCaptureDeleteOptionalParams,
  ChangeDataCaptureStartOptionalParams,
  ChangeDataCaptureStopOptionalParams,
  ChangeDataCaptureStatusOptionalParams,
  ChangeDataCaptureStatusResponse,
  ChangeDataCaptureListByFactoryNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ChangeDataCapture operations. */
export class ChangeDataCaptureImpl implements ChangeDataCapture {
  private readonly client: DataFactoryManagementClient;

  /**
   * Initialize a new instance of the class ChangeDataCapture class.
   * @param client Reference to the service client
   */
  constructor(client: DataFactoryManagementClient) {
    this.client = client;
  }

  /**
   * Lists all resources of type change data capture.
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param options The options parameters.
   */
  public listByFactory(
    resourceGroupName: string,
    factoryName: string,
    options?: ChangeDataCaptureListByFactoryOptionalParams,
  ): PagedAsyncIterableIterator<ChangeDataCaptureResource> {
    const iter = this.listByFactoryPagingAll(
      resourceGroupName,
      factoryName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByFactoryPagingPage(
          resourceGroupName,
          factoryName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByFactoryPagingPage(
    resourceGroupName: string,
    factoryName: string,
    options?: ChangeDataCaptureListByFactoryOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ChangeDataCaptureResource[]> {
    let result: ChangeDataCaptureListByFactoryResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByFactory(
        resourceGroupName,
        factoryName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByFactoryNext(
        resourceGroupName,
        factoryName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByFactoryPagingAll(
    resourceGroupName: string,
    factoryName: string,
    options?: ChangeDataCaptureListByFactoryOptionalParams,
  ): AsyncIterableIterator<ChangeDataCaptureResource> {
    for await (const page of this.listByFactoryPagingPage(
      resourceGroupName,
      factoryName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists all resources of type change data capture.
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param options The options parameters.
   */
  private _listByFactory(
    resourceGroupName: string,
    factoryName: string,
    options?: ChangeDataCaptureListByFactoryOptionalParams,
  ): Promise<ChangeDataCaptureListByFactoryResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, factoryName, options },
      listByFactoryOperationSpec,
    );
  }

  /**
   * Creates or updates a change data capture resource.
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param changeDataCaptureName The change data capture name.
   * @param changeDataCapture Change data capture resource definition.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    factoryName: string,
    changeDataCaptureName: string,
    changeDataCapture: ChangeDataCaptureResource,
    options?: ChangeDataCaptureCreateOrUpdateOptionalParams,
  ): Promise<ChangeDataCaptureCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        factoryName,
        changeDataCaptureName,
        changeDataCapture,
        options,
      },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Gets a change data capture.
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param changeDataCaptureName The change data capture name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    factoryName: string,
    changeDataCaptureName: string,
    options?: ChangeDataCaptureGetOptionalParams,
  ): Promise<ChangeDataCaptureGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, factoryName, changeDataCaptureName, options },
      getOperationSpec,
    );
  }

  /**
   * Deletes a change data capture.
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param changeDataCaptureName The change data capture name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    factoryName: string,
    changeDataCaptureName: string,
    options?: ChangeDataCaptureDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, factoryName, changeDataCaptureName, options },
      deleteOperationSpec,
    );
  }

  /**
   * Starts a change data capture.
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param changeDataCaptureName The change data capture name.
   * @param options The options parameters.
   */
  start(
    resourceGroupName: string,
    factoryName: string,
    changeDataCaptureName: string,
    options?: ChangeDataCaptureStartOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, factoryName, changeDataCaptureName, options },
      startOperationSpec,
    );
  }

  /**
   * Stops a change data capture.
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param changeDataCaptureName The change data capture name.
   * @param options The options parameters.
   */
  stop(
    resourceGroupName: string,
    factoryName: string,
    changeDataCaptureName: string,
    options?: ChangeDataCaptureStopOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, factoryName, changeDataCaptureName, options },
      stopOperationSpec,
    );
  }

  /**
   * Gets the current status for the change data capture resource.
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param changeDataCaptureName The change data capture name.
   * @param options The options parameters.
   */
  status(
    resourceGroupName: string,
    factoryName: string,
    changeDataCaptureName: string,
    options?: ChangeDataCaptureStatusOptionalParams,
  ): Promise<ChangeDataCaptureStatusResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, factoryName, changeDataCaptureName, options },
      statusOperationSpec,
    );
  }

  /**
   * ListByFactoryNext
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param nextLink The nextLink from the previous successful call to the ListByFactory method.
   * @param options The options parameters.
   */
  private _listByFactoryNext(
    resourceGroupName: string,
    factoryName: string,
    nextLink: string,
    options?: ChangeDataCaptureListByFactoryNextOptionalParams,
  ): Promise<ChangeDataCaptureListByFactoryNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, factoryName, nextLink, options },
      listByFactoryNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByFactoryOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/adfcdcs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ChangeDataCaptureListResponse,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.factoryName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/adfcdcs/{changeDataCaptureName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ChangeDataCaptureResource,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.changeDataCapture,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.factoryName,
    Parameters.changeDataCaptureName,
  ],
  headerParameters: [
    Parameters.accept,
    Parameters.contentType,
    Parameters.ifMatch,
  ],
  mediaType: "json",
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/adfcdcs/{changeDataCaptureName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ChangeDataCaptureResource,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.factoryName,
    Parameters.changeDataCaptureName,
  ],
  headerParameters: [Parameters.accept, Parameters.ifNoneMatch],
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/adfcdcs/{changeDataCaptureName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.factoryName,
    Parameters.changeDataCaptureName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const startOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/adfcdcs/{changeDataCaptureName}/start",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.factoryName,
    Parameters.changeDataCaptureName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const stopOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/adfcdcs/{changeDataCaptureName}/stop",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.factoryName,
    Parameters.changeDataCaptureName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const statusOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/adfcdcs/{changeDataCaptureName}/status",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } },
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.factoryName,
    Parameters.changeDataCaptureName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByFactoryNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ChangeDataCaptureListResponse,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.factoryName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
