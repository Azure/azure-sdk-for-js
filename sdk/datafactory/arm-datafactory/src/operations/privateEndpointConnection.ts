/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/privateEndpointConnectionMappers";
import * as Parameters from "../models/parameters";
import { DataFactoryManagementClientContext } from "../dataFactoryManagementClientContext";

/** Class representing a PrivateEndpointConnection. */
export class PrivateEndpointConnection {
  private readonly client: DataFactoryManagementClientContext;

  /**
   * Create a PrivateEndpointConnection.
   * @param {DataFactoryManagementClientContext} client Reference to the service client.
   */
  constructor(client: DataFactoryManagementClientContext) {
    this.client = client;
  }

  /**
   * Approves or rejects a private endpoint connection
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param privateEndpointConnectionName The private endpoint connection name.
   * @param privateEndpointWrapper
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateEndpointConnectionCreateOrUpdateResponse>
   */
  createOrUpdate(
    resourceGroupName: string,
    factoryName: string,
    privateEndpointConnectionName: string,
    privateEndpointWrapper: Models.PrivateLinkConnectionApprovalRequestResource,
    options?: Models.PrivateEndpointConnectionCreateOrUpdateOptionalParams
  ): Promise<Models.PrivateEndpointConnectionCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param privateEndpointConnectionName The private endpoint connection name.
   * @param privateEndpointWrapper
   * @param callback The callback
   */
  createOrUpdate(
    resourceGroupName: string,
    factoryName: string,
    privateEndpointConnectionName: string,
    privateEndpointWrapper: Models.PrivateLinkConnectionApprovalRequestResource,
    callback: msRest.ServiceCallback<Models.PrivateEndpointConnectionResource>
  ): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param privateEndpointConnectionName The private endpoint connection name.
   * @param privateEndpointWrapper
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(
    resourceGroupName: string,
    factoryName: string,
    privateEndpointConnectionName: string,
    privateEndpointWrapper: Models.PrivateLinkConnectionApprovalRequestResource,
    options: Models.PrivateEndpointConnectionCreateOrUpdateOptionalParams,
    callback: msRest.ServiceCallback<Models.PrivateEndpointConnectionResource>
  ): void;
  createOrUpdate(
    resourceGroupName: string,
    factoryName: string,
    privateEndpointConnectionName: string,
    privateEndpointWrapper: Models.PrivateLinkConnectionApprovalRequestResource,
    options?:
      | Models.PrivateEndpointConnectionCreateOrUpdateOptionalParams
      | msRest.ServiceCallback<Models.PrivateEndpointConnectionResource>,
    callback?: msRest.ServiceCallback<Models.PrivateEndpointConnectionResource>
  ): Promise<Models.PrivateEndpointConnectionCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        factoryName,
        privateEndpointConnectionName,
        privateEndpointWrapper,
        options
      },
      createOrUpdateOperationSpec,
      callback
    ) as Promise<Models.PrivateEndpointConnectionCreateOrUpdateResponse>;
  }

  /**
   * Gets a private endpoint connection
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param privateEndpointConnectionName The private endpoint connection name.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateEndpointConnectionGetResponse>
   */
  get(
    resourceGroupName: string,
    factoryName: string,
    privateEndpointConnectionName: string,
    options?: Models.PrivateEndpointConnectionGetOptionalParams
  ): Promise<Models.PrivateEndpointConnectionGetResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param privateEndpointConnectionName The private endpoint connection name.
   * @param callback The callback
   */
  get(
    resourceGroupName: string,
    factoryName: string,
    privateEndpointConnectionName: string,
    callback: msRest.ServiceCallback<Models.PrivateEndpointConnectionResource>
  ): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param privateEndpointConnectionName The private endpoint connection name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(
    resourceGroupName: string,
    factoryName: string,
    privateEndpointConnectionName: string,
    options: Models.PrivateEndpointConnectionGetOptionalParams,
    callback: msRest.ServiceCallback<Models.PrivateEndpointConnectionResource>
  ): void;
  get(
    resourceGroupName: string,
    factoryName: string,
    privateEndpointConnectionName: string,
    options?:
      | Models.PrivateEndpointConnectionGetOptionalParams
      | msRest.ServiceCallback<Models.PrivateEndpointConnectionResource>,
    callback?: msRest.ServiceCallback<Models.PrivateEndpointConnectionResource>
  ): Promise<Models.PrivateEndpointConnectionGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        factoryName,
        privateEndpointConnectionName,
        options
      },
      getOperationSpec,
      callback
    ) as Promise<Models.PrivateEndpointConnectionGetResponse>;
  }

  /**
   * Deletes a private endpoint connection
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param privateEndpointConnectionName The private endpoint connection name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(
    resourceGroupName: string,
    factoryName: string,
    privateEndpointConnectionName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param privateEndpointConnectionName The private endpoint connection name.
   * @param callback The callback
   */
  deleteMethod(
    resourceGroupName: string,
    factoryName: string,
    privateEndpointConnectionName: string,
    callback: msRest.ServiceCallback<void>
  ): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param factoryName The factory name.
   * @param privateEndpointConnectionName The private endpoint connection name.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(
    resourceGroupName: string,
    factoryName: string,
    privateEndpointConnectionName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<void>
  ): void;
  deleteMethod(
    resourceGroupName: string,
    factoryName: string,
    privateEndpointConnectionName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>,
    callback?: msRest.ServiceCallback<void>
  ): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        factoryName,
        privateEndpointConnectionName,
        options
      },
      deleteMethodOperationSpec,
      callback
    );
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/privateEndpointConnections/{privateEndpointConnectionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.factoryName,
    Parameters.privateEndpointConnectionName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.ifMatch, Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "privateEndpointWrapper",
    mapper: {
      ...Mappers.PrivateLinkConnectionApprovalRequestResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnectionResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/privateEndpointConnections/{privateEndpointConnectionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.factoryName,
    Parameters.privateEndpointConnectionName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.ifNoneMatch, Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnectionResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/privateEndpointConnections/{privateEndpointConnectionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.factoryName,
    Parameters.privateEndpointConnectionName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
