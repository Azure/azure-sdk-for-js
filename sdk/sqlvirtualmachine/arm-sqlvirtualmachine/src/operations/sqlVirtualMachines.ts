/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SqlVirtualMachines } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SqlVirtualMachineManagementClient } from "../sqlVirtualMachineManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  SqlVirtualMachine,
  SqlVirtualMachinesListBySqlVmGroupNextOptionalParams,
  SqlVirtualMachinesListBySqlVmGroupOptionalParams,
  SqlVirtualMachinesListNextOptionalParams,
  SqlVirtualMachinesListOptionalParams,
  SqlVirtualMachinesListByResourceGroupNextOptionalParams,
  SqlVirtualMachinesListByResourceGroupOptionalParams,
  SqlVirtualMachinesListBySqlVmGroupResponse,
  SqlVirtualMachinesListResponse,
  SqlVirtualMachinesStartAssessmentOptionalParams,
  SqlVirtualMachinesRedeployOptionalParams,
  SqlVirtualMachinesGetOptionalParams,
  SqlVirtualMachinesGetResponse,
  SqlVirtualMachinesCreateOrUpdateOptionalParams,
  SqlVirtualMachinesCreateOrUpdateResponse,
  SqlVirtualMachinesDeleteOptionalParams,
  SqlVirtualMachineUpdate,
  SqlVirtualMachinesUpdateOptionalParams,
  SqlVirtualMachinesUpdateResponse,
  SqlVirtualMachinesListByResourceGroupResponse,
  SqlVirtualMachinesListBySqlVmGroupNextResponse,
  SqlVirtualMachinesListNextResponse,
  SqlVirtualMachinesListByResourceGroupNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SqlVirtualMachines operations. */
export class SqlVirtualMachinesImpl implements SqlVirtualMachines {
  private readonly client: SqlVirtualMachineManagementClient;

  /**
   * Initialize a new instance of the class SqlVirtualMachines class.
   * @param client Reference to the service client
   */
  constructor(client: SqlVirtualMachineManagementClient) {
    this.client = client;
  }

  /**
   * Gets the list of sql virtual machines in a SQL virtual machine group.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
   * @param options The options parameters.
   */
  public listBySqlVmGroup(
    resourceGroupName: string,
    sqlVirtualMachineGroupName: string,
    options?: SqlVirtualMachinesListBySqlVmGroupOptionalParams
  ): PagedAsyncIterableIterator<SqlVirtualMachine> {
    const iter = this.listBySqlVmGroupPagingAll(
      resourceGroupName,
      sqlVirtualMachineGroupName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySqlVmGroupPagingPage(
          resourceGroupName,
          sqlVirtualMachineGroupName,
          options
        );
      }
    };
  }

  private async *listBySqlVmGroupPagingPage(
    resourceGroupName: string,
    sqlVirtualMachineGroupName: string,
    options?: SqlVirtualMachinesListBySqlVmGroupOptionalParams
  ): AsyncIterableIterator<SqlVirtualMachine[]> {
    let result = await this._listBySqlVmGroup(
      resourceGroupName,
      sqlVirtualMachineGroupName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySqlVmGroupNext(
        resourceGroupName,
        sqlVirtualMachineGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySqlVmGroupPagingAll(
    resourceGroupName: string,
    sqlVirtualMachineGroupName: string,
    options?: SqlVirtualMachinesListBySqlVmGroupOptionalParams
  ): AsyncIterableIterator<SqlVirtualMachine> {
    for await (const page of this.listBySqlVmGroupPagingPage(
      resourceGroupName,
      sqlVirtualMachineGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets all SQL virtual machines in a subscription.
   * @param options The options parameters.
   */
  public list(
    options?: SqlVirtualMachinesListOptionalParams
  ): PagedAsyncIterableIterator<SqlVirtualMachine> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(options);
      }
    };
  }

  private async *listPagingPage(
    options?: SqlVirtualMachinesListOptionalParams
  ): AsyncIterableIterator<SqlVirtualMachine[]> {
    let result = await this._list(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    options?: SqlVirtualMachinesListOptionalParams
  ): AsyncIterableIterator<SqlVirtualMachine> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets all SQL virtual machines in a resource group.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: SqlVirtualMachinesListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<SqlVirtualMachine> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage(resourceGroupName, options);
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: SqlVirtualMachinesListByResourceGroupOptionalParams
  ): AsyncIterableIterator<SqlVirtualMachine[]> {
    let result = await this._listByResourceGroup(resourceGroupName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: SqlVirtualMachinesListByResourceGroupOptionalParams
  ): AsyncIterableIterator<SqlVirtualMachine> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets the list of sql virtual machines in a SQL virtual machine group.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
   * @param options The options parameters.
   */
  private _listBySqlVmGroup(
    resourceGroupName: string,
    sqlVirtualMachineGroupName: string,
    options?: SqlVirtualMachinesListBySqlVmGroupOptionalParams
  ): Promise<SqlVirtualMachinesListBySqlVmGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sqlVirtualMachineGroupName, options },
      listBySqlVmGroupOperationSpec
    );
  }

  /**
   * Gets all SQL virtual machines in a subscription.
   * @param options The options parameters.
   */
  private _list(
    options?: SqlVirtualMachinesListOptionalParams
  ): Promise<SqlVirtualMachinesListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Starts Assessment on SQL virtual machine.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param sqlVirtualMachineName Name of the SQL virtual machine.
   * @param options The options parameters.
   */
  async beginStartAssessment(
    resourceGroupName: string,
    sqlVirtualMachineName: string,
    options?: SqlVirtualMachinesStartAssessmentOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, sqlVirtualMachineName, options },
      startAssessmentOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Starts Assessment on SQL virtual machine.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param sqlVirtualMachineName Name of the SQL virtual machine.
   * @param options The options parameters.
   */
  async beginStartAssessmentAndWait(
    resourceGroupName: string,
    sqlVirtualMachineName: string,
    options?: SqlVirtualMachinesStartAssessmentOptionalParams
  ): Promise<void> {
    const poller = await this.beginStartAssessment(
      resourceGroupName,
      sqlVirtualMachineName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Uninstalls and reinstalls the SQL Iaas Extension.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param sqlVirtualMachineName Name of the SQL virtual machine.
   * @param options The options parameters.
   */
  async beginRedeploy(
    resourceGroupName: string,
    sqlVirtualMachineName: string,
    options?: SqlVirtualMachinesRedeployOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, sqlVirtualMachineName, options },
      redeployOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Uninstalls and reinstalls the SQL Iaas Extension.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param sqlVirtualMachineName Name of the SQL virtual machine.
   * @param options The options parameters.
   */
  async beginRedeployAndWait(
    resourceGroupName: string,
    sqlVirtualMachineName: string,
    options?: SqlVirtualMachinesRedeployOptionalParams
  ): Promise<void> {
    const poller = await this.beginRedeploy(
      resourceGroupName,
      sqlVirtualMachineName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets a SQL virtual machine.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param sqlVirtualMachineName Name of the SQL virtual machine.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    sqlVirtualMachineName: string,
    options?: SqlVirtualMachinesGetOptionalParams
  ): Promise<SqlVirtualMachinesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sqlVirtualMachineName, options },
      getOperationSpec
    );
  }

  /**
   * Creates or updates a SQL virtual machine.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param sqlVirtualMachineName Name of the SQL virtual machine.
   * @param parameters The SQL virtual machine.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    sqlVirtualMachineName: string,
    parameters: SqlVirtualMachine,
    options?: SqlVirtualMachinesCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<SqlVirtualMachinesCreateOrUpdateResponse>,
      SqlVirtualMachinesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<SqlVirtualMachinesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, sqlVirtualMachineName, parameters, options },
      createOrUpdateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates or updates a SQL virtual machine.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param sqlVirtualMachineName Name of the SQL virtual machine.
   * @param parameters The SQL virtual machine.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    sqlVirtualMachineName: string,
    parameters: SqlVirtualMachine,
    options?: SqlVirtualMachinesCreateOrUpdateOptionalParams
  ): Promise<SqlVirtualMachinesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      sqlVirtualMachineName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes a SQL virtual machine.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param sqlVirtualMachineName Name of the SQL virtual machine.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    sqlVirtualMachineName: string,
    options?: SqlVirtualMachinesDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, sqlVirtualMachineName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes a SQL virtual machine.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param sqlVirtualMachineName Name of the SQL virtual machine.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    sqlVirtualMachineName: string,
    options?: SqlVirtualMachinesDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      sqlVirtualMachineName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates a SQL virtual machine.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param sqlVirtualMachineName Name of the SQL virtual machine.
   * @param parameters The SQL virtual machine.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    sqlVirtualMachineName: string,
    parameters: SqlVirtualMachineUpdate,
    options?: SqlVirtualMachinesUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<SqlVirtualMachinesUpdateResponse>,
      SqlVirtualMachinesUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<SqlVirtualMachinesUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, sqlVirtualMachineName, parameters, options },
      updateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates a SQL virtual machine.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param sqlVirtualMachineName Name of the SQL virtual machine.
   * @param parameters The SQL virtual machine.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    sqlVirtualMachineName: string,
    parameters: SqlVirtualMachineUpdate,
    options?: SqlVirtualMachinesUpdateOptionalParams
  ): Promise<SqlVirtualMachinesUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      sqlVirtualMachineName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets all SQL virtual machines in a resource group.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: SqlVirtualMachinesListByResourceGroupOptionalParams
  ): Promise<SqlVirtualMachinesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * ListBySqlVmGroupNext
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
   * @param nextLink The nextLink from the previous successful call to the ListBySqlVmGroup method.
   * @param options The options parameters.
   */
  private _listBySqlVmGroupNext(
    resourceGroupName: string,
    sqlVirtualMachineGroupName: string,
    nextLink: string,
    options?: SqlVirtualMachinesListBySqlVmGroupNextOptionalParams
  ): Promise<SqlVirtualMachinesListBySqlVmGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sqlVirtualMachineGroupName, nextLink, options },
      listBySqlVmGroupNextOperationSpec
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: SqlVirtualMachinesListNextOptionalParams
  ): Promise<SqlVirtualMachinesListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: SqlVirtualMachinesListByResourceGroupNextOptionalParams
  ): Promise<SqlVirtualMachinesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySqlVmGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}/sqlVirtualMachines",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlVirtualMachineListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.sqlVirtualMachineGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlVirtualMachineListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const startAssessmentOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}/startAssessment",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.sqlVirtualMachineName
  ],
  serializer
};
const redeployOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}/redeploy",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.sqlVirtualMachineName
  ],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlVirtualMachine
    },
    default: {}
  },
  queryParameters: [Parameters.expand, Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.sqlVirtualMachineName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SqlVirtualMachine
    },
    201: {
      bodyMapper: Mappers.SqlVirtualMachine
    },
    202: {
      bodyMapper: Mappers.SqlVirtualMachine
    },
    204: {
      bodyMapper: Mappers.SqlVirtualMachine
    },
    default: {}
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.sqlVirtualMachineName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.sqlVirtualMachineName
  ],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SqlVirtualMachine
    },
    201: {
      bodyMapper: Mappers.SqlVirtualMachine
    },
    202: {
      bodyMapper: Mappers.SqlVirtualMachine
    },
    204: {
      bodyMapper: Mappers.SqlVirtualMachine
    },
    default: {}
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.sqlVirtualMachineName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlVirtualMachineListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySqlVmGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlVirtualMachineListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.sqlVirtualMachineGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlVirtualMachineListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlVirtualMachineListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
