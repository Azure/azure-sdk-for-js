/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/defaultAccountsMappers";
import * as Parameters from "../models/parameters";
import { PurviewManagementClientContext } from "../purviewManagementClientContext";

/** Class representing a DefaultAccounts. */
export class DefaultAccounts {
  private readonly client: PurviewManagementClientContext;

  /**
   * Create a DefaultAccounts.
   * @param {PurviewManagementClientContext} client Reference to the service client.
   */
  constructor(client: PurviewManagementClientContext) {
    this.client = client;
  }

  /**
   * Get the default account for the scope.
   * @summary Gets the default account information set for the scope.
   * @param scopeTenantId The tenant ID.
   * @param scopeType The scope for the default account. Possible values include: 'Tenant',
   * 'Subscription'
   * @param [options] The optional parameters
   * @returns Promise<Models.DefaultAccountsGetResponse>
   */
  get(scopeTenantId: string, scopeType: Models.ScopeType, options?: Models.DefaultAccountsGetOptionalParams): Promise<Models.DefaultAccountsGetResponse>;
  /**
   * @param scopeTenantId The tenant ID.
   * @param scopeType The scope for the default account. Possible values include: 'Tenant',
   * 'Subscription'
   * @param callback The callback
   */
  get(scopeTenantId: string, scopeType: Models.ScopeType, callback: msRest.ServiceCallback<Models.DefaultAccountPayload>): void;
  /**
   * @param scopeTenantId The tenant ID.
   * @param scopeType The scope for the default account. Possible values include: 'Tenant',
   * 'Subscription'
   * @param options The optional parameters
   * @param callback The callback
   */
  get(scopeTenantId: string, scopeType: Models.ScopeType, options: Models.DefaultAccountsGetOptionalParams, callback: msRest.ServiceCallback<Models.DefaultAccountPayload>): void;
  get(scopeTenantId: string, scopeType: Models.ScopeType, options?: Models.DefaultAccountsGetOptionalParams | msRest.ServiceCallback<Models.DefaultAccountPayload>, callback?: msRest.ServiceCallback<Models.DefaultAccountPayload>): Promise<Models.DefaultAccountsGetResponse> {
    return this.client.sendOperationRequest(
      {
        scopeTenantId,
        scopeType,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.DefaultAccountsGetResponse>;
  }

  /**
   * Sets the default account for the scope.
   * @summary Sets the default account for the scope.
   * @param defaultAccountPayload The payload containing the default account information and the
   * scope.
   * @param [options] The optional parameters
   * @returns Promise<Models.DefaultAccountsSetResponse>
   */
  set(defaultAccountPayload: Models.DefaultAccountPayload, options?: msRest.RequestOptionsBase): Promise<Models.DefaultAccountsSetResponse>;
  /**
   * @param defaultAccountPayload The payload containing the default account information and the
   * scope.
   * @param callback The callback
   */
  set(defaultAccountPayload: Models.DefaultAccountPayload, callback: msRest.ServiceCallback<Models.DefaultAccountPayload>): void;
  /**
   * @param defaultAccountPayload The payload containing the default account information and the
   * scope.
   * @param options The optional parameters
   * @param callback The callback
   */
  set(defaultAccountPayload: Models.DefaultAccountPayload, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DefaultAccountPayload>): void;
  set(defaultAccountPayload: Models.DefaultAccountPayload, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DefaultAccountPayload>, callback?: msRest.ServiceCallback<Models.DefaultAccountPayload>): Promise<Models.DefaultAccountsSetResponse> {
    return this.client.sendOperationRequest(
      {
        defaultAccountPayload,
        options
      },
      setOperationSpec,
      callback) as Promise<Models.DefaultAccountsSetResponse>;
  }

  /**
   * Removes the default account from the scope.
   * @summary Removes the default account from the scope.
   * @param scopeTenantId The tenant ID.
   * @param scopeType The scope for the default account. Possible values include: 'Tenant',
   * 'Subscription'
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  remove(scopeTenantId: string, scopeType: Models.ScopeType, options?: Models.DefaultAccountsRemoveOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param scopeTenantId The tenant ID.
   * @param scopeType The scope for the default account. Possible values include: 'Tenant',
   * 'Subscription'
   * @param callback The callback
   */
  remove(scopeTenantId: string, scopeType: Models.ScopeType, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scopeTenantId The tenant ID.
   * @param scopeType The scope for the default account. Possible values include: 'Tenant',
   * 'Subscription'
   * @param options The optional parameters
   * @param callback The callback
   */
  remove(scopeTenantId: string, scopeType: Models.ScopeType, options: Models.DefaultAccountsRemoveOptionalParams, callback: msRest.ServiceCallback<void>): void;
  remove(scopeTenantId: string, scopeType: Models.ScopeType, options?: Models.DefaultAccountsRemoveOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        scopeTenantId,
        scopeType,
        options
      },
      removeOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Purview/getDefaultAccount",
  queryParameters: [
    Parameters.scopeTenantId,
    Parameters.scopeType,
    Parameters.scope,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DefaultAccountPayload
    },
    default: {
      bodyMapper: Mappers.ErrorResponseModel
    }
  },
  serializer
};

const setOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Purview/setDefaultAccount",
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "defaultAccountPayload",
    mapper: {
      ...Mappers.DefaultAccountPayload,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DefaultAccountPayload
    },
    default: {
      bodyMapper: Mappers.ErrorResponseModel
    }
  },
  serializer
};

const removeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Purview/removeDefaultAccount",
  queryParameters: [
    Parameters.scopeTenantId,
    Parameters.scopeType,
    Parameters.scope,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponseModel
    }
  },
  serializer
};
