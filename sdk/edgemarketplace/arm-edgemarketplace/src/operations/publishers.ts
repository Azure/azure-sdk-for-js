/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Publishers } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { EdgeMarketplaceClient } from "../edgeMarketplaceClient";
import {
  Publisher,
  PublishersListNextOptionalParams,
  PublishersListOptionalParams,
  PublishersListResponse,
  PublishersListBySubscriptionNextOptionalParams,
  PublishersListBySubscriptionOptionalParams,
  PublishersListBySubscriptionResponse,
  PublishersGetOptionalParams,
  PublishersGetResponse,
  PublishersListNextResponse,
  PublishersListBySubscriptionNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Publishers operations. */
export class PublishersImpl implements Publishers {
  private readonly client: EdgeMarketplaceClient;

  /**
   * Initialize a new instance of the class Publishers class.
   * @param client Reference to the service client
   */
  constructor(client: EdgeMarketplaceClient) {
    this.client = client;
  }

  /**
   * List Publisher resources by parent
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param options The options parameters.
   */
  public list(
    resourceUri: string,
    options?: PublishersListOptionalParams,
  ): PagedAsyncIterableIterator<Publisher> {
    const iter = this.listPagingAll(resourceUri, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(resourceUri, options, settings);
      },
    };
  }

  private async *listPagingPage(
    resourceUri: string,
    options?: PublishersListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Publisher[]> {
    let result: PublishersListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceUri, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(resourceUri, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceUri: string,
    options?: PublishersListOptionalParams,
  ): AsyncIterableIterator<Publisher> {
    for await (const page of this.listPagingPage(resourceUri, options)) {
      yield* page;
    }
  }

  /**
   * List Publisher resources in subscription
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: PublishersListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<Publisher> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: PublishersListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Publisher[]> {
    let result: PublishersListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: PublishersListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<Publisher> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List Publisher resources by parent
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param options The options parameters.
   */
  private _list(
    resourceUri: string,
    options?: PublishersListOptionalParams,
  ): Promise<PublishersListResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, options },
      listOperationSpec,
    );
  }

  /**
   * List Publisher resources in subscription
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: PublishersListBySubscriptionOptionalParams,
  ): Promise<PublishersListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec,
    );
  }

  /**
   * Get a Publisher
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param publisherName Name of the publisher
   * @param options The options parameters.
   */
  get(
    resourceUri: string,
    publisherName: string,
    options?: PublishersGetOptionalParams,
  ): Promise<PublishersGetResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, publisherName, options },
      getOperationSpec,
    );
  }

  /**
   * ListNext
   * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceUri: string,
    nextLink: string,
    options?: PublishersListNextOptionalParams,
  ): Promise<PublishersListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, nextLink, options },
      listNextOperationSpec,
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: PublishersListBySubscriptionNextOptionalParams,
  ): Promise<PublishersListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.EdgeMarketplace/publishers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PublisherListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.maxpagesize,
    Parameters.filter,
    Parameters.skipToken,
  ],
  urlParameters: [Parameters.$host, Parameters.resourceUri],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.EdgeMarketplace/publishers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PublisherListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.maxpagesize,
    Parameters.filter,
    Parameters.skipToken,
  ],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.EdgeMarketplace/publishers/{publisherName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Publisher,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.publisherName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PublisherListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceUri,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PublisherListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
