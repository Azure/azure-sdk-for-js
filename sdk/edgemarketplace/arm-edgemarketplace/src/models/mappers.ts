/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const PublisherListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PublisherListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Publisher",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PublisherProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PublisherProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay",
        },
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OfferListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OfferListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Offer",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OfferProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OfferProperties",
    modelProperties: {
      contentVersion: {
        serializedName: "contentVersion",
        type: {
          name: "String",
        },
      },
      contentUrl: {
        serializedName: "contentUrl",
        type: {
          name: "String",
        },
      },
      offerContent: {
        serializedName: "offerContent",
        type: {
          name: "Composite",
          className: "OfferContent",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String",
        },
      },
      marketplaceSkus: {
        serializedName: "marketplaceSkus",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MarketplaceSku",
            },
          },
        },
      },
    },
  },
};

export const OfferContent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OfferContent",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        required: true,
        type: {
          name: "String",
        },
      },
      summary: {
        serializedName: "summary",
        type: {
          name: "String",
        },
      },
      longSummary: {
        serializedName: "longSummary",
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        type: {
          name: "String",
        },
      },
      offerId: {
        serializedName: "offerId",
        required: true,
        type: {
          name: "String",
        },
      },
      offerType: {
        serializedName: "offerType",
        type: {
          name: "String",
        },
      },
      supportUri: {
        serializedName: "supportUri",
        type: {
          name: "String",
        },
      },
      popularity: {
        serializedName: "popularity",
        type: {
          name: "Number",
        },
      },
      offerPublisher: {
        serializedName: "offerPublisher",
        type: {
          name: "Composite",
          className: "OfferPublisher",
        },
      },
      availability: {
        serializedName: "availability",
        type: {
          name: "String",
        },
      },
      releaseType: {
        serializedName: "releaseType",
        type: {
          name: "String",
        },
      },
      iconFileUris: {
        serializedName: "iconFileUris",
        type: {
          name: "Composite",
          className: "IconFileUris",
        },
      },
      termsAndConditions: {
        serializedName: "termsAndConditions",
        type: {
          name: "Composite",
          className: "TermsAndConditions",
        },
      },
      categoryIds: {
        serializedName: "categoryIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      operatingSystems: {
        serializedName: "operatingSystems",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const OfferPublisher: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OfferPublisher",
    modelProperties: {
      publisherId: {
        serializedName: "publisherId",
        required: true,
        type: {
          name: "String",
        },
      },
      publisherDisplayName: {
        serializedName: "publisherDisplayName",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const IconFileUris: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IconFileUris",
    modelProperties: {
      small: {
        serializedName: "small",
        type: {
          name: "String",
        },
      },
      medium: {
        serializedName: "medium",
        type: {
          name: "String",
        },
      },
      wide: {
        serializedName: "wide",
        type: {
          name: "String",
        },
      },
      large: {
        serializedName: "large",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TermsAndConditions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TermsAndConditions",
    modelProperties: {
      legalTermsUri: {
        serializedName: "legalTermsUri",
        type: {
          name: "String",
        },
      },
      legalTermsType: {
        serializedName: "legalTermsType",
        type: {
          name: "String",
        },
      },
      privacyPolicyUri: {
        serializedName: "privacyPolicyUri",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const MarketplaceSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MarketplaceSku",
    modelProperties: {
      catalogPlanId: {
        serializedName: "catalogPlanId",
        required: true,
        type: {
          name: "String",
        },
      },
      marketplaceSkuId: {
        serializedName: "marketplaceSkuId",
        required: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String",
        },
      },
      summary: {
        serializedName: "summary",
        type: {
          name: "String",
        },
      },
      longSummary: {
        serializedName: "longSummary",
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        type: {
          name: "String",
        },
      },
      generation: {
        serializedName: "generation",
        type: {
          name: "String",
        },
      },
      displayRank: {
        serializedName: "displayRank",
        type: {
          name: "Number",
        },
      },
      operatingSystem: {
        serializedName: "operatingSystem",
        type: {
          name: "Composite",
          className: "SkuOperatingSystem",
        },
      },
      marketplaceSkuVersions: {
        serializedName: "marketplaceSkuVersions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MarketplaceSkuVersion",
            },
          },
        },
      },
    },
  },
};

export const SkuOperatingSystem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuOperatingSystem",
    modelProperties: {
      family: {
        serializedName: "family",
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const MarketplaceSkuVersion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MarketplaceSkuVersion",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      sizeOnDiskInMb: {
        serializedName: "sizeOnDiskInMb",
        type: {
          name: "Number",
        },
      },
      minimumDownloadSizeInMb: {
        serializedName: "minimumDownloadSizeInMb",
        type: {
          name: "Number",
        },
      },
      stageName: {
        serializedName: "stageName",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AccessTokenRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessTokenRequest",
    modelProperties: {
      publisherName: {
        serializedName: "publisherName",
        type: {
          name: "String",
        },
      },
      edgeMarketPlaceRegion: {
        serializedName: "edgeMarketPlaceRegion",
        required: true,
        type: {
          name: "String",
        },
      },
      egeMarketPlaceResourceId: {
        serializedName: "egeMarketPlaceResourceId",
        type: {
          name: "String",
        },
      },
      hypervGeneration: {
        serializedName: "hypervGeneration",
        type: {
          name: "String",
        },
      },
      marketPlaceSku: {
        serializedName: "marketPlaceSku",
        type: {
          name: "String",
        },
      },
      marketPlaceSkuVersion: {
        serializedName: "marketPlaceSkuVersion",
        type: {
          name: "String",
        },
      },
      deviceSku: {
        serializedName: "deviceSku",
        type: {
          name: "String",
        },
      },
      deviceVersion: {
        serializedName: "deviceVersion",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DiskAccessToken: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskAccessToken",
    modelProperties: {
      diskId: {
        serializedName: "diskId",
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "status",
        type: {
          name: "String",
        },
      },
      accessToken: {
        serializedName: "accessToken",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AccessTokenReadRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessTokenReadRequest",
    modelProperties: {
      requestId: {
        serializedName: "requestId",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
    },
  },
};

export const Publisher: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Publisher",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PublisherProperties",
        },
      },
    },
  },
};

export const Offer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Offer",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "OfferProperties",
        },
      },
    },
  },
};

export const OffersGenerateAccessTokenHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OffersGenerateAccessTokenHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};
