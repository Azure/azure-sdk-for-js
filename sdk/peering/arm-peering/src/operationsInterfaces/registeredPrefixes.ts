/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  PeeringRegisteredPrefix,
  RegisteredPrefixesListByPeeringOptionalParams,
  RegisteredPrefixesGetOptionalParams,
  RegisteredPrefixesGetResponse,
  RegisteredPrefixesCreateOrUpdateOptionalParams,
  RegisteredPrefixesCreateOrUpdateResponse,
  RegisteredPrefixesDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a RegisteredPrefixes. */
export interface RegisteredPrefixes {
  /**
   * Lists all registered prefixes under the given subscription, resource group and peering.
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param options The options parameters.
   */
  listByPeering(
    resourceGroupName: string,
    peeringName: string,
    options?: RegisteredPrefixesListByPeeringOptionalParams
  ): PagedAsyncIterableIterator<PeeringRegisteredPrefix>;
  /**
   * Gets an existing registered prefix with the specified name under the given subscription, resource
   * group and peering.
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param registeredPrefixName The name of the registered prefix.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    peeringName: string,
    registeredPrefixName: string,
    options?: RegisteredPrefixesGetOptionalParams
  ): Promise<RegisteredPrefixesGetResponse>;
  /**
   * Creates a new registered prefix with the specified name under the given subscription, resource group
   * and peering.
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param registeredPrefixName The name of the registered prefix.
   * @param registeredPrefix The properties needed to create a registered prefix.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    peeringName: string,
    registeredPrefixName: string,
    registeredPrefix: PeeringRegisteredPrefix,
    options?: RegisteredPrefixesCreateOrUpdateOptionalParams
  ): Promise<RegisteredPrefixesCreateOrUpdateResponse>;
  /**
   * Deletes an existing registered prefix with the specified name under the given subscription, resource
   * group and peering.
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param registeredPrefixName The name of the registered prefix.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    peeringName: string,
    registeredPrefixName: string,
    options?: RegisteredPrefixesDeleteOptionalParams
  ): Promise<void>;
}
