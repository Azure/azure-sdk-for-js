/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  PeeringService,
  PeeringServicesListByResourceGroupOptionalParams,
  PeeringServicesListBySubscriptionOptionalParams,
  PeeringServicesGetOptionalParams,
  PeeringServicesGetResponse,
  PeeringServicesCreateOrUpdateOptionalParams,
  PeeringServicesCreateOrUpdateResponse,
  PeeringServicesDeleteOptionalParams,
  ResourceTags,
  PeeringServicesUpdateOptionalParams,
  PeeringServicesUpdateResponse,
  PeeringServicesInitializeConnectionMonitorOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a PeeringServices. */
export interface PeeringServices {
  /**
   * Lists all of the peering services under the given subscription and resource group.
   * @param resourceGroupName The name of the resource group.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: PeeringServicesListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<PeeringService>;
  /**
   * Lists all of the peerings under the given subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: PeeringServicesListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<PeeringService>;
  /**
   * Gets an existing peering service with the specified name under the given subscription and resource
   * group.
   * @param resourceGroupName The name of the resource group.
   * @param peeringServiceName The name of the peering.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    peeringServiceName: string,
    options?: PeeringServicesGetOptionalParams
  ): Promise<PeeringServicesGetResponse>;
  /**
   * Creates a new peering service or updates an existing peering with the specified name under the given
   * subscription and resource group.
   * @param resourceGroupName The name of the resource group.
   * @param peeringServiceName The name of the peering service.
   * @param peeringService The properties needed to create or update a peering service.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    peeringServiceName: string,
    peeringService: PeeringService,
    options?: PeeringServicesCreateOrUpdateOptionalParams
  ): Promise<PeeringServicesCreateOrUpdateResponse>;
  /**
   * Deletes an existing peering service with the specified name under the given subscription and
   * resource group.
   * @param resourceGroupName The name of the resource group.
   * @param peeringServiceName The name of the peering service.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    peeringServiceName: string,
    options?: PeeringServicesDeleteOptionalParams
  ): Promise<void>;
  /**
   * Updates tags for a peering service with the specified name under the given subscription and resource
   * group.
   * @param resourceGroupName The name of the resource group.
   * @param peeringServiceName The name of the peering service.
   * @param tags The resource tags.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    peeringServiceName: string,
    tags: ResourceTags,
    options?: PeeringServicesUpdateOptionalParams
  ): Promise<PeeringServicesUpdateResponse>;
  /**
   * Initialize Peering Service for Connection Monitor functionality
   * @param options The options parameters.
   */
  initializeConnectionMonitor(
    options?: PeeringServicesInitializeConnectionMonitorOptionalParams
  ): Promise<void>;
}
