/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import * as operations from "./operations";
import { PeeringManagementClientContext } from "./peeringManagementClientContext";


class PeeringManagementClient extends PeeringManagementClientContext {
  // Operation groups
  cdnPeeringPrefixes: operations.CdnPeeringPrefixes;
  legacyPeerings: operations.LegacyPeerings;
  operations: operations.Operations;
  peerAsns: operations.PeerAsns;
  peeringLocations: operations.PeeringLocations;
  registeredAsns: operations.RegisteredAsns;
  registeredPrefixes: operations.RegisteredPrefixes;
  peerings: operations.Peerings;
  receivedRoutes: operations.ReceivedRoutes;
  peeringServiceCountries: operations.PeeringServiceCountries;
  peeringServiceLocations: operations.PeeringServiceLocations;
  prefixes: operations.Prefixes;
  peeringServiceProviders: operations.PeeringServiceProviders;
  peeringServices: operations.PeeringServices;

  /**
   * Initializes a new instance of the PeeringManagementClient class.
   * @param credentials Credentials needed for the client to connect to Azure.
   * @param subscriptionId The Azure subscription ID.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, subscriptionId: string, options?: Models.PeeringManagementClientOptions) {
    super(credentials, subscriptionId, options);
    this.cdnPeeringPrefixes = new operations.CdnPeeringPrefixes(this);
    this.legacyPeerings = new operations.LegacyPeerings(this);
    this.operations = new operations.Operations(this);
    this.peerAsns = new operations.PeerAsns(this);
    this.peeringLocations = new operations.PeeringLocations(this);
    this.registeredAsns = new operations.RegisteredAsns(this);
    this.registeredPrefixes = new operations.RegisteredPrefixes(this);
    this.peerings = new operations.Peerings(this);
    this.receivedRoutes = new operations.ReceivedRoutes(this);
    this.peeringServiceCountries = new operations.PeeringServiceCountries(this);
    this.peeringServiceLocations = new operations.PeeringServiceLocations(this);
    this.prefixes = new operations.Prefixes(this);
    this.peeringServiceProviders = new operations.PeeringServiceProviders(this);
    this.peeringServices = new operations.PeeringServices(this);
  }

  /**
   * Checks if the peering service provider is present within 1000 miles of customer's location
   * @param [options] The optional parameters
   * @returns Promise<Models.CheckServiceProviderAvailabilityResponse>
   */
  checkServiceProviderAvailability(options?: Models.PeeringManagementClientCheckServiceProviderAvailabilityOptionalParams): Promise<Models.CheckServiceProviderAvailabilityResponse>;
  /**
   * @param callback The callback
   */
  checkServiceProviderAvailability(callback: msRest.ServiceCallback<Models.CheckServiceProviderAvailabilityOKResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  checkServiceProviderAvailability(options: Models.PeeringManagementClientCheckServiceProviderAvailabilityOptionalParams, callback: msRest.ServiceCallback<Models.CheckServiceProviderAvailabilityOKResponse>): void;
  checkServiceProviderAvailability(options?: Models.PeeringManagementClientCheckServiceProviderAvailabilityOptionalParams | msRest.ServiceCallback<Models.CheckServiceProviderAvailabilityOKResponse>, callback?: msRest.ServiceCallback<Models.CheckServiceProviderAvailabilityOKResponse>): Promise<Models.CheckServiceProviderAvailabilityResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      checkServiceProviderAvailabilityOperationSpec,
      callback) as Promise<Models.CheckServiceProviderAvailabilityResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const checkServiceProviderAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Peering/CheckServiceProviderAvailability",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      peeringServiceLocation: [
        "options",
        "peeringServiceLocation"
      ],
      peeringServiceProvider: [
        "options",
        "peeringServiceProvider"
      ]
    },
    mapper: {
      ...Mappers.CheckServiceProviderAvailabilityInput,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

export {
  PeeringManagementClient,
  PeeringManagementClientContext,
  Models as PeeringManagementModels,
  Mappers as PeeringManagementMappers
};
export * from "./operations";
