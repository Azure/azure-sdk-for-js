/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import {
  LegacyPeeringsImpl,
  OperationsImpl,
  PeerAsnsImpl,
  PeeringLocationsImpl,
  PeeringsImpl,
  PeeringServiceLocationsImpl,
  PeeringServicePrefixesImpl,
  PrefixesImpl,
  PeeringServiceProvidersImpl,
  PeeringServicesImpl
} from "./operations";
import {
  LegacyPeerings,
  Operations,
  PeerAsns,
  PeeringLocations,
  Peerings,
  PeeringServiceLocations,
  PeeringServicePrefixes,
  Prefixes,
  PeeringServiceProviders,
  PeeringServices
} from "./operationsInterfaces";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import {
  PeeringManagementClientOptionalParams,
  CheckServiceProviderAvailabilityInput,
  CheckServiceProviderAvailabilityOptionalParams,
  CheckServiceProviderAvailabilityResponse
} from "./models";

export class PeeringManagementClient extends coreClient.ServiceClient {
  $host: string;
  subscriptionId: string;
  apiVersion: string;

  /**
   * Initializes a new instance of the PeeringManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The Azure subscription ID.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: PeeringManagementClientOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: PeeringManagementClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-peering/2.0.0-beta.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    if (!options.credentialScopes) {
      options.credentialScopes = ["https://management.azure.com/.default"];
    }
    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      baseUri: options.endpoint || "https://management.azure.com"
    };
    super(optionsWithDefaults);
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2019-08-01-preview";
    this.legacyPeerings = new LegacyPeeringsImpl(this);
    this.operations = new OperationsImpl(this);
    this.peerAsns = new PeerAsnsImpl(this);
    this.peeringLocations = new PeeringLocationsImpl(this);
    this.peerings = new PeeringsImpl(this);
    this.peeringServiceLocations = new PeeringServiceLocationsImpl(this);
    this.peeringServicePrefixes = new PeeringServicePrefixesImpl(this);
    this.prefixes = new PrefixesImpl(this);
    this.peeringServiceProviders = new PeeringServiceProvidersImpl(this);
    this.peeringServices = new PeeringServicesImpl(this);
  }

  /**
   * Checks if the peering service provider is present within 1000 miles of customer's location
   * @param checkServiceProviderAvailabilityInput The CheckServiceProviderAvailabilityInput
   *                                                          indicating customer location and service provider.
   * @param options The options parameters.
   */
  checkServiceProviderAvailability(
    checkServiceProviderAvailabilityInput: CheckServiceProviderAvailabilityInput,
    options?: CheckServiceProviderAvailabilityOptionalParams
  ): Promise<CheckServiceProviderAvailabilityResponse> {
    return this.sendOperationRequest(
      { checkServiceProviderAvailabilityInput, options },
      checkServiceProviderAvailabilityOperationSpec
    );
  }

  legacyPeerings: LegacyPeerings;
  operations: Operations;
  peerAsns: PeerAsns;
  peeringLocations: PeeringLocations;
  peerings: Peerings;
  peeringServiceLocations: PeeringServiceLocations;
  peeringServicePrefixes: PeeringServicePrefixes;
  prefixes: Prefixes;
  peeringServiceProviders: PeeringServiceProviders;
  peeringServices: PeeringServices;
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const checkServiceProviderAvailabilityOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Peering/CheckServiceProviderAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.checkServiceProviderAvailabilityInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
