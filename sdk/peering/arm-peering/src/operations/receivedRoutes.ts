/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/receivedRoutesMappers";
import * as Parameters from "../models/parameters";
import { PeeringManagementClientContext } from "../peeringManagementClientContext";

/** Class representing a ReceivedRoutes. */
export class ReceivedRoutes {
  private readonly client: PeeringManagementClientContext;

  /**
   * Create a ReceivedRoutes.
   * @param {PeeringManagementClientContext} client Reference to the service client.
   */
  constructor(client: PeeringManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists the prefixes received over the specified peering under the given subscription and resource
   * group.
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReceivedRoutesListByPeeringResponse>
   */
  listByPeering(resourceGroupName: string, peeringName: string, options?: Models.ReceivedRoutesListByPeeringOptionalParams): Promise<Models.ReceivedRoutesListByPeeringResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param callback The callback
   */
  listByPeering(resourceGroupName: string, peeringName: string, callback: msRest.ServiceCallback<Models.PeeringReceivedRouteListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByPeering(resourceGroupName: string, peeringName: string, options: Models.ReceivedRoutesListByPeeringOptionalParams, callback: msRest.ServiceCallback<Models.PeeringReceivedRouteListResult>): void;
  listByPeering(resourceGroupName: string, peeringName: string, options?: Models.ReceivedRoutesListByPeeringOptionalParams | msRest.ServiceCallback<Models.PeeringReceivedRouteListResult>, callback?: msRest.ServiceCallback<Models.PeeringReceivedRouteListResult>): Promise<Models.ReceivedRoutesListByPeeringResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        peeringName,
        options
      },
      listByPeeringOperationSpec,
      callback) as Promise<Models.ReceivedRoutesListByPeeringResponse>;
  }

  /**
   * Lists the prefixes received over the specified peering under the given subscription and resource
   * group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReceivedRoutesListByPeeringNextResponse>
   */
  listByPeeringNext(nextPageLink: string, options?: Models.ReceivedRoutesListByPeeringNextOptionalParams): Promise<Models.ReceivedRoutesListByPeeringNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByPeeringNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PeeringReceivedRouteListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByPeeringNext(nextPageLink: string, options: Models.ReceivedRoutesListByPeeringNextOptionalParams, callback: msRest.ServiceCallback<Models.PeeringReceivedRouteListResult>): void;
  listByPeeringNext(nextPageLink: string, options?: Models.ReceivedRoutesListByPeeringNextOptionalParams | msRest.ServiceCallback<Models.PeeringReceivedRouteListResult>, callback?: msRest.ServiceCallback<Models.PeeringReceivedRouteListResult>): Promise<Models.ReceivedRoutesListByPeeringNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByPeeringNextOperationSpec,
      callback) as Promise<Models.ReceivedRoutesListByPeeringNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByPeeringOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/receivedRoutes",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.peeringName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.prefix,
    Parameters.asPath,
    Parameters.originAsValidationState,
    Parameters.rpkiValidationState,
    Parameters.skipToken,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PeeringReceivedRouteListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByPeeringNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.prefix,
    Parameters.asPath,
    Parameters.originAsValidationState,
    Parameters.rpkiValidationState,
    Parameters.skipToken,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PeeringReceivedRouteListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
