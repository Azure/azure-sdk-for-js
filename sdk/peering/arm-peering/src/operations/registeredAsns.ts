/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/registeredAsnsMappers";
import * as Parameters from "../models/parameters";
import { PeeringManagementClientContext } from "../peeringManagementClientContext";

/** Class representing a RegisteredAsns. */
export class RegisteredAsns {
  private readonly client: PeeringManagementClientContext;

  /**
   * Create a RegisteredAsns.
   * @param {PeeringManagementClientContext} client Reference to the service client.
   */
  constructor(client: PeeringManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets an existing registered ASN with the specified name under the given subscription, resource
   * group and peering.
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param registeredAsnName The name of the registered ASN.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegisteredAsnsGetResponse>
   */
  get(resourceGroupName: string, peeringName: string, registeredAsnName: string, options?: msRest.RequestOptionsBase): Promise<Models.RegisteredAsnsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param registeredAsnName The name of the registered ASN.
   * @param callback The callback
   */
  get(resourceGroupName: string, peeringName: string, registeredAsnName: string, callback: msRest.ServiceCallback<Models.PeeringRegisteredAsn>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param registeredAsnName The name of the registered ASN.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, peeringName: string, registeredAsnName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PeeringRegisteredAsn>): void;
  get(resourceGroupName: string, peeringName: string, registeredAsnName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PeeringRegisteredAsn>, callback?: msRest.ServiceCallback<Models.PeeringRegisteredAsn>): Promise<Models.RegisteredAsnsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        peeringName,
        registeredAsnName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.RegisteredAsnsGetResponse>;
  }

  /**
   * Creates a new registered ASN with the specified name under the given subscription, resource
   * group and peering.
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param registeredAsnName The name of the ASN.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegisteredAsnsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, peeringName: string, registeredAsnName: string, options?: Models.RegisteredAsnsCreateOrUpdateOptionalParams): Promise<Models.RegisteredAsnsCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param registeredAsnName The name of the ASN.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, peeringName: string, registeredAsnName: string, callback: msRest.ServiceCallback<Models.PeeringRegisteredAsn>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param registeredAsnName The name of the ASN.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, peeringName: string, registeredAsnName: string, options: Models.RegisteredAsnsCreateOrUpdateOptionalParams, callback: msRest.ServiceCallback<Models.PeeringRegisteredAsn>): void;
  createOrUpdate(resourceGroupName: string, peeringName: string, registeredAsnName: string, options?: Models.RegisteredAsnsCreateOrUpdateOptionalParams | msRest.ServiceCallback<Models.PeeringRegisteredAsn>, callback?: msRest.ServiceCallback<Models.PeeringRegisteredAsn>): Promise<Models.RegisteredAsnsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        peeringName,
        registeredAsnName,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.RegisteredAsnsCreateOrUpdateResponse>;
  }

  /**
   * Deletes an existing registered ASN with the specified name under the given subscription,
   * resource group and peering.
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param registeredAsnName The name of the registered ASN.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, peeringName: string, registeredAsnName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param registeredAsnName The name of the registered ASN.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, peeringName: string, registeredAsnName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param registeredAsnName The name of the registered ASN.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, peeringName: string, registeredAsnName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, peeringName: string, registeredAsnName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        peeringName,
        registeredAsnName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Lists all registered ASNs under the given subscription, resource group and peering.
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegisteredAsnsListByPeeringResponse>
   */
  listByPeering(resourceGroupName: string, peeringName: string, options?: msRest.RequestOptionsBase): Promise<Models.RegisteredAsnsListByPeeringResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param callback The callback
   */
  listByPeering(resourceGroupName: string, peeringName: string, callback: msRest.ServiceCallback<Models.PeeringRegisteredAsnListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByPeering(resourceGroupName: string, peeringName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PeeringRegisteredAsnListResult>): void;
  listByPeering(resourceGroupName: string, peeringName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PeeringRegisteredAsnListResult>, callback?: msRest.ServiceCallback<Models.PeeringRegisteredAsnListResult>): Promise<Models.RegisteredAsnsListByPeeringResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        peeringName,
        options
      },
      listByPeeringOperationSpec,
      callback) as Promise<Models.RegisteredAsnsListByPeeringResponse>;
  }

  /**
   * Lists all registered ASNs under the given subscription, resource group and peering.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegisteredAsnsListByPeeringNextResponse>
   */
  listByPeeringNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.RegisteredAsnsListByPeeringNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByPeeringNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PeeringRegisteredAsnListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByPeeringNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PeeringRegisteredAsnListResult>): void;
  listByPeeringNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PeeringRegisteredAsnListResult>, callback?: msRest.ServiceCallback<Models.PeeringRegisteredAsnListResult>): Promise<Models.RegisteredAsnsListByPeeringNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByPeeringNextOperationSpec,
      callback) as Promise<Models.RegisteredAsnsListByPeeringNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredAsns/{registeredAsnName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.peeringName,
    Parameters.registeredAsnName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PeeringRegisteredAsn
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredAsns/{registeredAsnName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.peeringName,
    Parameters.registeredAsnName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      asn: [
        "options",
        "asn"
      ]
    },
    mapper: {
      ...Mappers.PeeringRegisteredAsn,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PeeringRegisteredAsn
    },
    201: {
      bodyMapper: Mappers.PeeringRegisteredAsn
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredAsns/{registeredAsnName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.peeringName,
    Parameters.registeredAsnName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByPeeringOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredAsns",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.peeringName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PeeringRegisteredAsnListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByPeeringNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PeeringRegisteredAsnListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
