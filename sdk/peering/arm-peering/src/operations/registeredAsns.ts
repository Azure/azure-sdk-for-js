/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { RegisteredAsns } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PeeringManagementClient } from "../peeringManagementClient";
import {
  PeeringRegisteredAsn,
  RegisteredAsnsListByPeeringNextOptionalParams,
  RegisteredAsnsListByPeeringOptionalParams,
  RegisteredAsnsGetOptionalParams,
  RegisteredAsnsGetResponse,
  RegisteredAsnsCreateOrUpdateOptionalParams,
  RegisteredAsnsCreateOrUpdateResponse,
  RegisteredAsnsDeleteOptionalParams,
  RegisteredAsnsListByPeeringResponse,
  RegisteredAsnsListByPeeringNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing RegisteredAsns operations. */
export class RegisteredAsnsImpl implements RegisteredAsns {
  private readonly client: PeeringManagementClient;

  /**
   * Initialize a new instance of the class RegisteredAsns class.
   * @param client Reference to the service client
   */
  constructor(client: PeeringManagementClient) {
    this.client = client;
  }

  /**
   * Lists all registered ASNs under the given subscription, resource group and peering.
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param options The options parameters.
   */
  public listByPeering(
    resourceGroupName: string,
    peeringName: string,
    options?: RegisteredAsnsListByPeeringOptionalParams
  ): PagedAsyncIterableIterator<PeeringRegisteredAsn> {
    const iter = this.listByPeeringPagingAll(
      resourceGroupName,
      peeringName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByPeeringPagingPage(
          resourceGroupName,
          peeringName,
          options
        );
      }
    };
  }

  private async *listByPeeringPagingPage(
    resourceGroupName: string,
    peeringName: string,
    options?: RegisteredAsnsListByPeeringOptionalParams
  ): AsyncIterableIterator<PeeringRegisteredAsn[]> {
    let result = await this._listByPeering(
      resourceGroupName,
      peeringName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByPeeringNext(
        resourceGroupName,
        peeringName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByPeeringPagingAll(
    resourceGroupName: string,
    peeringName: string,
    options?: RegisteredAsnsListByPeeringOptionalParams
  ): AsyncIterableIterator<PeeringRegisteredAsn> {
    for await (const page of this.listByPeeringPagingPage(
      resourceGroupName,
      peeringName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets an existing registered ASN with the specified name under the given subscription, resource group
   * and peering.
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param registeredAsnName The name of the registered ASN.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    peeringName: string,
    registeredAsnName: string,
    options?: RegisteredAsnsGetOptionalParams
  ): Promise<RegisteredAsnsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, peeringName, registeredAsnName, options },
      getOperationSpec
    );
  }

  /**
   * Creates a new registered ASN with the specified name under the given subscription, resource group
   * and peering.
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param registeredAsnName The name of the ASN.
   * @param registeredAsn The properties needed to create a registered ASN.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    peeringName: string,
    registeredAsnName: string,
    registeredAsn: PeeringRegisteredAsn,
    options?: RegisteredAsnsCreateOrUpdateOptionalParams
  ): Promise<RegisteredAsnsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        peeringName,
        registeredAsnName,
        registeredAsn,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Deletes an existing registered ASN with the specified name under the given subscription, resource
   * group and peering.
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param registeredAsnName The name of the registered ASN.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    peeringName: string,
    registeredAsnName: string,
    options?: RegisteredAsnsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, peeringName, registeredAsnName, options },
      deleteOperationSpec
    );
  }

  /**
   * Lists all registered ASNs under the given subscription, resource group and peering.
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param options The options parameters.
   */
  private _listByPeering(
    resourceGroupName: string,
    peeringName: string,
    options?: RegisteredAsnsListByPeeringOptionalParams
  ): Promise<RegisteredAsnsListByPeeringResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, peeringName, options },
      listByPeeringOperationSpec
    );
  }

  /**
   * ListByPeeringNext
   * @param resourceGroupName The name of the resource group.
   * @param peeringName The name of the peering.
   * @param nextLink The nextLink from the previous successful call to the ListByPeering method.
   * @param options The options parameters.
   */
  private _listByPeeringNext(
    resourceGroupName: string,
    peeringName: string,
    nextLink: string,
    options?: RegisteredAsnsListByPeeringNextOptionalParams
  ): Promise<RegisteredAsnsListByPeeringNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, peeringName, nextLink, options },
      listByPeeringNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredAsns/{registeredAsnName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PeeringRegisteredAsn
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.peeringName,
    Parameters.registeredAsnName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredAsns/{registeredAsnName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PeeringRegisteredAsn
    },
    201: {
      bodyMapper: Mappers.PeeringRegisteredAsn
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.registeredAsn,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.peeringName,
    Parameters.registeredAsnName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredAsns/{registeredAsnName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.peeringName,
    Parameters.registeredAsnName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByPeeringOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredAsns",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PeeringRegisteredAsnListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.peeringName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByPeeringNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PeeringRegisteredAsnListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.peeringName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
