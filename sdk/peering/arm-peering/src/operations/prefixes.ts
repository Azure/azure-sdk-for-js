/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Prefixes } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PeeringManagementClient } from "../peeringManagementClient";
import {
  PeeringServicePrefix,
  PrefixesListByPeeringServiceNextOptionalParams,
  PrefixesListByPeeringServiceOptionalParams,
  PrefixesListByPeeringServiceResponse,
  PrefixesListByPeeringServiceNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Prefixes operations. */
export class PrefixesImpl implements Prefixes {
  private readonly client: PeeringManagementClient;

  /**
   * Initialize a new instance of the class Prefixes class.
   * @param client Reference to the service client
   */
  constructor(client: PeeringManagementClient) {
    this.client = client;
  }

  /**
   * Lists the peerings prefix in the resource group.
   * @param resourceGroupName The resource group name.
   * @param peeringServiceName The peering service name.
   * @param options The options parameters.
   */
  public listByPeeringService(
    resourceGroupName: string,
    peeringServiceName: string,
    options?: PrefixesListByPeeringServiceOptionalParams
  ): PagedAsyncIterableIterator<PeeringServicePrefix> {
    const iter = this.listByPeeringServicePagingAll(
      resourceGroupName,
      peeringServiceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByPeeringServicePagingPage(
          resourceGroupName,
          peeringServiceName,
          options
        );
      }
    };
  }

  private async *listByPeeringServicePagingPage(
    resourceGroupName: string,
    peeringServiceName: string,
    options?: PrefixesListByPeeringServiceOptionalParams
  ): AsyncIterableIterator<PeeringServicePrefix[]> {
    let result = await this._listByPeeringService(
      resourceGroupName,
      peeringServiceName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByPeeringServiceNext(
        resourceGroupName,
        peeringServiceName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByPeeringServicePagingAll(
    resourceGroupName: string,
    peeringServiceName: string,
    options?: PrefixesListByPeeringServiceOptionalParams
  ): AsyncIterableIterator<PeeringServicePrefix> {
    for await (const page of this.listByPeeringServicePagingPage(
      resourceGroupName,
      peeringServiceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the peerings prefix in the resource group.
   * @param resourceGroupName The resource group name.
   * @param peeringServiceName The peering service name.
   * @param options The options parameters.
   */
  private _listByPeeringService(
    resourceGroupName: string,
    peeringServiceName: string,
    options?: PrefixesListByPeeringServiceOptionalParams
  ): Promise<PrefixesListByPeeringServiceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, peeringServiceName, options },
      listByPeeringServiceOperationSpec
    );
  }

  /**
   * ListByPeeringServiceNext
   * @param resourceGroupName The resource group name.
   * @param peeringServiceName The peering service name.
   * @param nextLink The nextLink from the previous successful call to the ListByPeeringService method.
   * @param options The options parameters.
   */
  private _listByPeeringServiceNext(
    resourceGroupName: string,
    peeringServiceName: string,
    nextLink: string,
    options?: PrefixesListByPeeringServiceNextOptionalParams
  ): Promise<PrefixesListByPeeringServiceNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, peeringServiceName, nextLink, options },
      listByPeeringServiceNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByPeeringServiceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PeeringServicePrefixListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.peeringServiceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByPeeringServiceNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PeeringServicePrefixListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.peeringServiceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
