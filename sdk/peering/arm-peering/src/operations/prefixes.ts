/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/prefixesMappers";
import * as Parameters from "../models/parameters";
import { PeeringManagementClientContext } from "../peeringManagementClientContext";

/** Class representing a Prefixes. */
export class Prefixes {
  private readonly client: PeeringManagementClientContext;

  /**
   * Create a Prefixes.
   * @param {PeeringManagementClientContext} client Reference to the service client.
   */
  constructor(client: PeeringManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets an existing prefix with the specified name under the given subscription, resource group and
   * peering service.
   * @param resourceGroupName The name of the resource group.
   * @param peeringServiceName The name of the peering service.
   * @param prefixName The name of the prefix.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrefixesGetResponse>
   */
  get(resourceGroupName: string, peeringServiceName: string, prefixName: string, options?: Models.PrefixesGetOptionalParams): Promise<Models.PrefixesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param peeringServiceName The name of the peering service.
   * @param prefixName The name of the prefix.
   * @param callback The callback
   */
  get(resourceGroupName: string, peeringServiceName: string, prefixName: string, callback: msRest.ServiceCallback<Models.PeeringServicePrefix>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param peeringServiceName The name of the peering service.
   * @param prefixName The name of the prefix.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, peeringServiceName: string, prefixName: string, options: Models.PrefixesGetOptionalParams, callback: msRest.ServiceCallback<Models.PeeringServicePrefix>): void;
  get(resourceGroupName: string, peeringServiceName: string, prefixName: string, options?: Models.PrefixesGetOptionalParams | msRest.ServiceCallback<Models.PeeringServicePrefix>, callback?: msRest.ServiceCallback<Models.PeeringServicePrefix>): Promise<Models.PrefixesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        peeringServiceName,
        prefixName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.PrefixesGetResponse>;
  }

  /**
   * Creates a new prefix with the specified name under the given subscription, resource group and
   * peering service.
   * @param resourceGroupName The name of the resource group.
   * @param peeringServiceName The name of the peering service.
   * @param prefixName The name of the prefix.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrefixesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, peeringServiceName: string, prefixName: string, options?: Models.PrefixesCreateOrUpdateOptionalParams): Promise<Models.PrefixesCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param peeringServiceName The name of the peering service.
   * @param prefixName The name of the prefix.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, peeringServiceName: string, prefixName: string, callback: msRest.ServiceCallback<Models.PeeringServicePrefix>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param peeringServiceName The name of the peering service.
   * @param prefixName The name of the prefix.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, peeringServiceName: string, prefixName: string, options: Models.PrefixesCreateOrUpdateOptionalParams, callback: msRest.ServiceCallback<Models.PeeringServicePrefix>): void;
  createOrUpdate(resourceGroupName: string, peeringServiceName: string, prefixName: string, options?: Models.PrefixesCreateOrUpdateOptionalParams | msRest.ServiceCallback<Models.PeeringServicePrefix>, callback?: msRest.ServiceCallback<Models.PeeringServicePrefix>): Promise<Models.PrefixesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        peeringServiceName,
        prefixName,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.PrefixesCreateOrUpdateResponse>;
  }

  /**
   * Deletes an existing prefix with the specified name under the given subscription, resource group
   * and peering service.
   * @param resourceGroupName The name of the resource group.
   * @param peeringServiceName The name of the peering service.
   * @param prefixName The name of the prefix.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, peeringServiceName: string, prefixName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param peeringServiceName The name of the peering service.
   * @param prefixName The name of the prefix.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, peeringServiceName: string, prefixName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param peeringServiceName The name of the peering service.
   * @param prefixName The name of the prefix.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, peeringServiceName: string, prefixName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, peeringServiceName: string, prefixName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        peeringServiceName,
        prefixName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Lists all prefixes under the given subscription, resource group and peering service.
   * @param resourceGroupName The name of the resource group.
   * @param peeringServiceName The name of the peering service.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrefixesListByPeeringServiceResponse>
   */
  listByPeeringService(resourceGroupName: string, peeringServiceName: string, options?: Models.PrefixesListByPeeringServiceOptionalParams): Promise<Models.PrefixesListByPeeringServiceResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param peeringServiceName The name of the peering service.
   * @param callback The callback
   */
  listByPeeringService(resourceGroupName: string, peeringServiceName: string, callback: msRest.ServiceCallback<Models.PeeringServicePrefixListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param peeringServiceName The name of the peering service.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByPeeringService(resourceGroupName: string, peeringServiceName: string, options: Models.PrefixesListByPeeringServiceOptionalParams, callback: msRest.ServiceCallback<Models.PeeringServicePrefixListResult>): void;
  listByPeeringService(resourceGroupName: string, peeringServiceName: string, options?: Models.PrefixesListByPeeringServiceOptionalParams | msRest.ServiceCallback<Models.PeeringServicePrefixListResult>, callback?: msRest.ServiceCallback<Models.PeeringServicePrefixListResult>): Promise<Models.PrefixesListByPeeringServiceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        peeringServiceName,
        options
      },
      listByPeeringServiceOperationSpec,
      callback) as Promise<Models.PrefixesListByPeeringServiceResponse>;
  }

  /**
   * Lists all prefixes under the given subscription, resource group and peering service.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrefixesListByPeeringServiceNextResponse>
   */
  listByPeeringServiceNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PrefixesListByPeeringServiceNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByPeeringServiceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PeeringServicePrefixListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByPeeringServiceNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PeeringServicePrefixListResult>): void;
  listByPeeringServiceNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PeeringServicePrefixListResult>, callback?: msRest.ServiceCallback<Models.PeeringServicePrefixListResult>): Promise<Models.PrefixesListByPeeringServiceNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByPeeringServiceNextOperationSpec,
      callback) as Promise<Models.PrefixesListByPeeringServiceNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes/{prefixName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.peeringServiceName,
    Parameters.prefixName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PeeringServicePrefix
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes/{prefixName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.peeringServiceName,
    Parameters.prefixName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      prefix: [
        "options",
        "prefix"
      ],
      peeringServicePrefixKey: [
        "options",
        "peeringServicePrefixKey"
      ]
    },
    mapper: {
      ...Mappers.PeeringServicePrefix,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PeeringServicePrefix
    },
    201: {
      bodyMapper: Mappers.PeeringServicePrefix
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes/{prefixName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.peeringServiceName,
    Parameters.prefixName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByPeeringServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.peeringServiceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PeeringServicePrefixListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByPeeringServiceNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PeeringServicePrefixListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
