/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PeeringServicePrefixes } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PeeringManagementClient } from "../peeringManagementClient";
import {
  PeeringServicePrefixesGetOptionalParams,
  PeeringServicePrefixesGetResponse,
  PeeringServicePrefix,
  PeeringServicePrefixesCreateOrUpdateOptionalParams,
  PeeringServicePrefixesCreateOrUpdateResponse,
  PeeringServicePrefixesDeleteOptionalParams
} from "../models";

/** Class containing PeeringServicePrefixes operations. */
export class PeeringServicePrefixesImpl implements PeeringServicePrefixes {
  private readonly client: PeeringManagementClient;

  /**
   * Initialize a new instance of the class PeeringServicePrefixes class.
   * @param client Reference to the service client
   */
  constructor(client: PeeringManagementClient) {
    this.client = client;
  }

  /**
   * Gets the peering service prefix.
   * @param resourceGroupName The resource group name.
   * @param peeringServiceName The peering service name.
   * @param prefixName The prefix name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    peeringServiceName: string,
    prefixName: string,
    options?: PeeringServicePrefixesGetOptionalParams
  ): Promise<PeeringServicePrefixesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, peeringServiceName, prefixName, options },
      getOperationSpec
    );
  }

  /**
   * Creates or updates the peering prefix.
   * @param resourceGroupName The resource group name.
   * @param peeringServiceName The peering service name.
   * @param prefixName The prefix name
   * @param peeringServicePrefix The IP prefix for an peering
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    peeringServiceName: string,
    prefixName: string,
    peeringServicePrefix: PeeringServicePrefix,
    options?: PeeringServicePrefixesCreateOrUpdateOptionalParams
  ): Promise<PeeringServicePrefixesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        peeringServiceName,
        prefixName,
        peeringServicePrefix,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * removes the peering prefix.
   * @param resourceGroupName The resource group name.
   * @param peeringServiceName The peering service name.
   * @param prefixName The prefix name
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    peeringServiceName: string,
    prefixName: string,
    options?: PeeringServicePrefixesDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, peeringServiceName, prefixName, options },
      deleteOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes/{prefixName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PeeringServicePrefix
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.peeringServiceName,
    Parameters.prefixName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes/{prefixName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PeeringServicePrefix
    },
    201: {
      bodyMapper: Mappers.PeeringServicePrefix
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.peeringServicePrefix,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.peeringServiceName,
    Parameters.prefixName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes/{prefixName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.peeringServiceName,
    Parameters.prefixName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
