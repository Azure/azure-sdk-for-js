/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/peeringServicePrefixesMappers";
import * as Parameters from "../models/parameters";
import { PeeringManagementClientContext } from "../peeringManagementClientContext";

/** Class representing a PeeringServicePrefixes. */
export class PeeringServicePrefixes {
  private readonly client: PeeringManagementClientContext;

  /**
   * Create a PeeringServicePrefixes.
   * @param {PeeringManagementClientContext} client Reference to the service client.
   */
  constructor(client: PeeringManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets the peering service prefix.
   * @param resourceGroupName The resource group name.
   * @param peeringServiceName The peering service name.
   * @param prefixName The prefix name.
   * @param [options] The optional parameters
   * @returns Promise<Models.PeeringServicePrefixesGetResponse>
   */
  get(resourceGroupName: string, peeringServiceName: string, prefixName: string, options?: msRest.RequestOptionsBase): Promise<Models.PeeringServicePrefixesGetResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param peeringServiceName The peering service name.
   * @param prefixName The prefix name.
   * @param callback The callback
   */
  get(resourceGroupName: string, peeringServiceName: string, prefixName: string, callback: msRest.ServiceCallback<Models.PeeringServicePrefix>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param peeringServiceName The peering service name.
   * @param prefixName The prefix name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, peeringServiceName: string, prefixName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PeeringServicePrefix>): void;
  get(resourceGroupName: string, peeringServiceName: string, prefixName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PeeringServicePrefix>, callback?: msRest.ServiceCallback<Models.PeeringServicePrefix>): Promise<Models.PeeringServicePrefixesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        peeringServiceName,
        prefixName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.PeeringServicePrefixesGetResponse>;
  }

  /**
   * Creates or updates the peering prefix.
   * @param resourceGroupName The resource group name.
   * @param peeringServiceName The peering service name.
   * @param prefixName The prefix name
   * @param peeringServicePrefix The IP prefix for an peering
   * @param [options] The optional parameters
   * @returns Promise<Models.PeeringServicePrefixesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, peeringServiceName: string, prefixName: string, peeringServicePrefix: Models.PeeringServicePrefix, options?: msRest.RequestOptionsBase): Promise<Models.PeeringServicePrefixesCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param peeringServiceName The peering service name.
   * @param prefixName The prefix name
   * @param peeringServicePrefix The IP prefix for an peering
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, peeringServiceName: string, prefixName: string, peeringServicePrefix: Models.PeeringServicePrefix, callback: msRest.ServiceCallback<Models.PeeringServicePrefix>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param peeringServiceName The peering service name.
   * @param prefixName The prefix name
   * @param peeringServicePrefix The IP prefix for an peering
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, peeringServiceName: string, prefixName: string, peeringServicePrefix: Models.PeeringServicePrefix, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PeeringServicePrefix>): void;
  createOrUpdate(resourceGroupName: string, peeringServiceName: string, prefixName: string, peeringServicePrefix: Models.PeeringServicePrefix, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PeeringServicePrefix>, callback?: msRest.ServiceCallback<Models.PeeringServicePrefix>): Promise<Models.PeeringServicePrefixesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        peeringServiceName,
        prefixName,
        peeringServicePrefix,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.PeeringServicePrefixesCreateOrUpdateResponse>;
  }

  /**
   * removes the peering prefix.
   * @param resourceGroupName The resource group name.
   * @param peeringServiceName The peering service name.
   * @param prefixName The prefix name
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, peeringServiceName: string, prefixName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param peeringServiceName The peering service name.
   * @param prefixName The prefix name
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, peeringServiceName: string, prefixName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param peeringServiceName The peering service name.
   * @param prefixName The prefix name
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, peeringServiceName: string, prefixName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, peeringServiceName: string, prefixName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        peeringServiceName,
        prefixName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes/{prefixName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.peeringServiceName,
    Parameters.prefixName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PeeringServicePrefix
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes/{prefixName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.peeringServiceName,
    Parameters.prefixName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "peeringServicePrefix",
    mapper: {
      ...Mappers.PeeringServicePrefix,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PeeringServicePrefix
    },
    201: {
      bodyMapper: Mappers.PeeringServicePrefix
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes/{prefixName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.peeringServiceName,
    Parameters.prefixName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
