/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { LookingGlass } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PeeringManagementClient } from "../peeringManagementClient";
import {
  LookingGlassCommand,
  LookingGlassSourceType,
  LookingGlassInvokeOptionalParams,
  LookingGlassInvokeResponse
} from "../models";

/** Class containing LookingGlass operations. */
export class LookingGlassImpl implements LookingGlass {
  private readonly client: PeeringManagementClient;

  /**
   * Initialize a new instance of the class LookingGlass class.
   * @param client Reference to the service client
   */
  constructor(client: PeeringManagementClient) {
    this.client = client;
  }

  /**
   * Run looking glass functionality
   * @param command The command to be executed: ping, traceroute, bgpRoute.
   * @param sourceType The type of the source: Edge site or Azure Region.
   * @param sourceLocation The location of the source.
   * @param destinationIP The IP address of the destination.
   * @param options The options parameters.
   */
  invoke(
    command: LookingGlassCommand,
    sourceType: LookingGlassSourceType,
    sourceLocation: string,
    destinationIP: string,
    options?: LookingGlassInvokeOptionalParams
  ): Promise<LookingGlassInvokeResponse> {
    return this.client.sendOperationRequest(
      { command, sourceType, sourceLocation, destinationIP, options },
      invokeOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const invokeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Peering/lookingGlass",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.LookingGlassOutput
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.command,
    Parameters.sourceType,
    Parameters.sourceLocation,
    Parameters.destinationIP
  ],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
