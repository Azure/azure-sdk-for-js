/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** The paginated list of CDN peering prefixes. */
export interface CdnPeeringPrefixListResult {
  /** The list of CDN peering prefixes. */
  value?: CdnPeeringPrefix[];
  /** The link to fetch the next page of CDN peering prefixes. */
  nextLink?: string;
}

/** The ARM resource class. */
export interface Resource {
  /**
   * The name of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The ID of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** The error response that indicates why an operation has failed. */
export interface ErrorResponse {
  /** The error detail that describes why an operation has failed. */
  error?: ErrorDetail;
}

/** The error detail that describes why an operation has failed. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
}

/** Class for CheckServiceProviderAvailabilityInput */
export interface CheckServiceProviderAvailabilityInput {
  /** Gets or sets the peering service location. */
  peeringServiceLocation?: string;
  /** Gets or sets the peering service provider. */
  peeringServiceProvider?: string;
}

/** The paginated list of peerings. */
export interface PeeringListResult {
  /** The list of peerings. */
  value?: Peering[];
  /** The link to fetch the next page of peerings. */
  nextLink?: string;
}

/** The SKU that defines the tier and kind of the peering. */
export interface PeeringSku {
  /** The name of the peering SKU. */
  name?: string;
  /**
   * The tier of the peering SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tier?: Tier;
  /**
   * The family of the peering SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly family?: Family;
  /**
   * The size of the peering SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly size?: Size;
}

/** The properties that define a direct peering. */
export interface PeeringPropertiesDirect {
  /** The set of connections that constitute a direct peering. */
  connections?: DirectConnection[];
  /**
   * The flag that indicates whether or not the peering is used for peering service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly useForPeeringService?: boolean;
  /** The reference of the peer ASN. */
  peerAsn?: SubResource;
  /** The type of direct peering. */
  directPeeringType?: DirectPeeringType;
}

/** The properties that define a direct connection. */
export interface DirectConnection {
  /** The bandwidth of the connection. */
  bandwidthInMbps?: number;
  /**
   * The bandwidth that is actually provisioned.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisionedBandwidthInMbps?: number;
  /** The field indicating if Microsoft provides session ip addresses. */
  sessionAddressProvider?: SessionAddressProvider;
  /** The flag that indicates whether or not the connection is used for peering service. */
  useForPeeringService?: boolean;
  /**
   * The ID used within Microsoft's peering provisioning system to track the connection
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly microsoftTrackingId?: string;
  /** The PeeringDB.com ID of the facility at which the connection has to be set up. */
  peeringDBFacilityId?: number;
  /**
   * The state of the connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connectionState?: ConnectionState;
  /** The BGP session associated with the connection. */
  bgpSession?: BgpSession;
  /** The unique identifier (GUID) for the connection. */
  connectionIdentifier?: string;
  /**
   * The error message related to the connection state, if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorMessage?: string;
}

/** The properties that define a BGP session. */
export interface BgpSession {
  /** The IPv4 prefix that contains both ends' IPv4 addresses. */
  sessionPrefixV4?: string;
  /** The IPv6 prefix that contains both ends' IPv6 addresses. */
  sessionPrefixV6?: string;
  /** The IPv4 session address on Microsoft's end. */
  microsoftSessionIPv4Address?: string;
  /** The IPv6 session address on Microsoft's end. */
  microsoftSessionIPv6Address?: string;
  /** The IPv4 session address on peer's end. */
  peerSessionIPv4Address?: string;
  /** The IPv6 session address on peer's end. */
  peerSessionIPv6Address?: string;
  /**
   * The state of the IPv4 session.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sessionStateV4?: SessionStateV4;
  /**
   * The state of the IPv6 session.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sessionStateV6?: SessionStateV6;
  /** The maximum number of prefixes advertised over the IPv4 session. */
  maxPrefixesAdvertisedV4?: number;
  /** The maximum number of prefixes advertised over the IPv6 session. */
  maxPrefixesAdvertisedV6?: number;
  /** The MD5 authentication key of the session. */
  md5AuthenticationKey?: string;
}

/** The sub resource. */
export interface SubResource {
  /** The identifier of the referenced resource. */
  id?: string;
}

/** The properties that define an exchange peering. */
export interface PeeringPropertiesExchange {
  /** The set of connections that constitute an exchange peering. */
  connections?: ExchangeConnection[];
  /** The reference of the peer ASN. */
  peerAsn?: SubResource;
}

/** The properties that define an exchange connection. */
export interface ExchangeConnection {
  /** The PeeringDB.com ID of the facility at which the connection has to be set up. */
  peeringDBFacilityId?: number;
  /**
   * The state of the connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connectionState?: ConnectionState;
  /** The BGP session associated with the connection. */
  bgpSession?: BgpSession;
  /** The unique identifier (GUID) for the connection. */
  connectionIdentifier?: string;
  /**
   * The error message related to the connection state, if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorMessage?: string;
}

/** Looking glass output model */
export interface LookingGlassOutput {
  /** Invoked command */
  command?: Command;
  /** Output of the command */
  output?: string;
}

/** The paginated list of peering API operations. */
export interface OperationListResult {
  /** The list of peering API operations. */
  value?: Operation[];
  /** The link to fetch the next page of peering API operations. */
  nextLink?: string;
}

/** The peering API operation. */
export interface Operation {
  /**
   * The name of the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The information related to the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly display?: OperationDisplayInfo;
  /**
   * The flag that indicates whether the operation applies to data plane.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /**
   * Service specification payload.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serviceSpecification?: ServiceSpecification;
}

/** The information related to the operation. */
export interface OperationDisplayInfo {
  /**
   * The name of the resource provider.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The name of the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The description of the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** Service specification payload. */
export interface ServiceSpecification {
  /**
   * Specifications of the Metrics for Azure Monitoring.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly metricSpecifications?: MetricSpecification[];
}

/** Specifications of the Metrics for Azure Monitoring. */
export interface MetricSpecification {
  /**
   * Name of the metric.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Localized friendly display name of the metric.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly displayName?: string;
  /**
   * Localized friendly description of the metric.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly displayDescription?: string;
  /**
   * Unit that makes sense for the metric.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly unit?: string;
  /**
   * Aggregation type will be set to one of the values: Average, Minimum, Maximum, Total, Count.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly aggregationType?: string;
  /**
   * Supported time grain types for the metric.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly supportedTimeGrainTypes?: string[];
  /**
   * Dimensions of the metric.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dimensions?: MetricDimension[];
}

/** Dimensions of the metric. */
export interface MetricDimension {
  /**
   * Name of the dimension.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Localized friendly display name of the dimension.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly displayName?: string;
}

/** The contact detail class. */
export interface ContactDetail {
  /** The role of the contact. */
  role?: Role;
  /** The e-mail address of the contact. */
  email?: string;
  /** The phone number of the contact. */
  phone?: string;
}

/** The paginated list of peer ASNs. */
export interface PeerAsnListResult {
  /** The list of peer ASNs. */
  value?: PeerAsn[];
  /** The link to fetch the next page of peer ASNs. */
  nextLink?: string;
}

/** The paginated list of peering locations. */
export interface PeeringLocationListResult {
  /** The list of peering locations. */
  value?: PeeringLocation[];
  /** The link to fetch the next page of peering locations. */
  nextLink?: string;
}

/** The properties that define a direct peering location. */
export interface PeeringLocationPropertiesDirect {
  /** The list of direct peering facilities at the peering location. */
  peeringFacilities?: DirectPeeringFacility[];
  /** The list of bandwidth offers available at the peering location. */
  bandwidthOffers?: PeeringBandwidthOffer[];
}

/** The properties that define a direct peering facility. */
export interface DirectPeeringFacility {
  /** The address of the direct peering facility. */
  address?: string;
  /** The type of the direct peering. */
  directPeeringType?: DirectPeeringType;
  /** The PeeringDB.com ID of the facility. */
  peeringDBFacilityId?: number;
  /** The PeeringDB.com URL of the facility. */
  peeringDBFacilityLink?: string;
}

/** The properties that define a peering bandwidth offer. */
export interface PeeringBandwidthOffer {
  /** The name of the bandwidth offer. */
  offerName?: string;
  /** The value of the bandwidth offer in Mbps. */
  valueInMbps?: number;
}

/** The properties that define an exchange peering location. */
export interface PeeringLocationPropertiesExchange {
  /** The list of exchange peering facilities at the peering location. */
  peeringFacilities?: ExchangePeeringFacility[];
}

/** The properties that define an exchange peering facility. */
export interface ExchangePeeringFacility {
  /** The name of the exchange peering facility. */
  exchangeName?: string;
  /** The bandwidth of the connection between Microsoft and the exchange peering facility. */
  bandwidthInMbps?: number;
  /** The IPv4 address of Microsoft at the exchange peering facility. */
  microsoftIPv4Address?: string;
  /** The IPv6 address of Microsoft at the exchange peering facility. */
  microsoftIPv6Address?: string;
  /** The IPv4 prefixes associated with the exchange peering facility. */
  facilityIPv4Prefix?: string;
  /** The IPv6 prefixes associated with the exchange peering facility. */
  facilityIPv6Prefix?: string;
  /** The PeeringDB.com ID of the facility. */
  peeringDBFacilityId?: number;
  /** The PeeringDB.com URL of the facility. */
  peeringDBFacilityLink?: string;
}

/** The paginated list of peering registered ASNs. */
export interface PeeringRegisteredAsnListResult {
  /** The list of peering registered ASNs. */
  value?: PeeringRegisteredAsn[];
  /** The link to fetch the next page of peering registered ASNs. */
  nextLink?: string;
}

/** The paginated list of peering registered prefixes. */
export interface PeeringRegisteredPrefixListResult {
  /** The list of peering registered prefixes. */
  value?: PeeringRegisteredPrefix[];
  /** The link to fetch the next page of peering registered prefixes. */
  nextLink?: string;
}

/** The resource tags. */
export interface ResourceTags {
  /** Gets or sets the tags, a dictionary of descriptors arm object */
  tags?: { [propertyName: string]: string };
}

/** The paginated list of received routes for the peering. */
export interface PeeringReceivedRouteListResult {
  /** The list of received routes for the peering. */
  value?: PeeringReceivedRoute[];
  /** The link to fetch the next page of received routes for the peering. */
  nextLink?: string;
}

/** The properties that define a received route. */
export interface PeeringReceivedRoute {
  /**
   * The prefix.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly prefix?: string;
  /**
   * The next hop for the prefix.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextHop?: string;
  /**
   * The AS path for the prefix.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly asPath?: string;
  /**
   * The origin AS change information for the prefix.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly originAsValidationState?: string;
  /**
   * The RPKI validation state for the prefix and origin AS that's listed in the AS path.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly rpkiValidationState?: string;
  /**
   * The authority which holds the Route Origin Authorization record for the prefix, if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly trustAnchor?: string;
  /**
   * The received timestamp associated with the prefix.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly receivedTimestamp?: string;
}

/** The paginated list of [T]. */
export interface ConnectionMonitorTestListResult {
  /** The list of [T]. */
  value?: ConnectionMonitorTest[];
  /** The link to fetch the next page of [T]. */
  nextLink?: string;
}

/** The paginated list of peering service countries. */
export interface PeeringServiceCountryListResult {
  /** The list of peering service countries. */
  value?: PeeringServiceCountry[];
  /** The link to fetch the next page of peering service countries. */
  nextLink?: string;
}

/** The paginated list of peering service locations. */
export interface PeeringServiceLocationListResult {
  /** The list of peering service locations. */
  value?: PeeringServiceLocation[];
  /** The link to fetch the next page of peering service locations. */
  nextLink?: string;
}

/** The details of the event associated with a prefix. */
export interface PeeringServicePrefixEvent {
  /**
   * The timestamp of the event associated with a prefix.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly eventTimestamp?: Date;
  /**
   * The type of the event associated with a prefix.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly eventType?: string;
  /**
   * The summary of the event associated with a prefix.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly eventSummary?: string;
  /**
   * The level of the event associated with a prefix.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly eventLevel?: string;
  /**
   * The description of the event associated with a prefix.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly eventDescription?: string;
}

/** The paginated list of peering service prefixes. */
export interface PeeringServicePrefixListResult {
  /** The list of peering service prefixes. */
  value?: PeeringServicePrefix[];
  /** The link to fetch the next page of peering service prefixes. */
  nextLink?: string;
}

/** The paginated list of peering service providers. */
export interface PeeringServiceProviderListResult {
  /** The list of peering service providers. */
  value?: PeeringServiceProvider[];
  /** The link to fetch the next page of peering service providers. */
  nextLink?: string;
}

/** The SKU that defines the type of the peering service. */
export interface PeeringServiceSku {
  /** The name of the peering service SKU. */
  name?: string;
}

/** The properties that define a Log Analytics Workspace. */
export interface LogAnalyticsWorkspaceProperties {
  /**
   * The Workspace ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly workspaceID?: string;
  /**
   * The Workspace Key.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly key?: string;
  /**
   * The list of connected agents.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connectedAgents?: string[];
}

/** The paginated list of peering services. */
export interface PeeringServiceListResult {
  /** The list of peering services. */
  value?: PeeringService[];
  /** The link to fetch the next page of peering services. */
  nextLink?: string;
}

/** The CDN peering prefix */
export type CdnPeeringPrefix = Resource & {
  /**
   * The prefix.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly prefix?: string;
  /**
   * The Azure region.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly azureRegion?: string;
  /**
   * The Azure service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly azureService?: string;
  /**
   * The flag that indicates whether or not this is the primary region.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isPrimaryRegion?: boolean;
  /**
   * The BGP Community
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly bgpCommunity?: string;
};

/** Peering is a logical representation of a set of connections to the Microsoft Cloud Edge at a location. */
export type Peering = Resource & {
  /** The SKU that defines the tier and kind of the peering. */
  sku: PeeringSku;
  /** The kind of the peering. */
  kind: Kind;
  /** The location of the resource. */
  location: string;
  /** The resource tags. */
  tags?: { [propertyName: string]: string };
  /** The properties that define a direct peering. */
  direct?: PeeringPropertiesDirect;
  /** The properties that define an exchange peering. */
  exchange?: PeeringPropertiesExchange;
  /** The location of the peering. */
  peeringLocation?: string;
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
};

/** The essential information related to the peer's ASN. */
export type PeerAsn = Resource & {
  /** The Autonomous System Number (ASN) of the peer. */
  peerAsn?: number;
  /** The contact details of the peer. */
  peerContactDetail?: ContactDetail[];
  /** The name of the peer. */
  peerName?: string;
  /**
   * The validation state of the ASN associated with the peer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationState?: ValidationState;
  /**
   * The error message for the validation state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorMessage?: string;
};

/** Peering location is where connectivity could be established to the Microsoft Cloud Edge. */
export type PeeringLocation = Resource & {
  /** The kind of peering that the peering location supports. */
  kind?: Kind;
  /** The properties that define a direct peering location. */
  direct?: PeeringLocationPropertiesDirect;
  /** The properties that define an exchange peering location. */
  exchange?: PeeringLocationPropertiesExchange;
  /** The name of the peering location. */
  peeringLocation?: string;
  /** The country in which the peering location exists. */
  country?: string;
  /** The Azure region associated with the peering location. */
  azureRegion?: string;
};

/** The customer's ASN that is registered by the peering service provider. */
export type PeeringRegisteredAsn = Resource & {
  /** The customer's ASN from which traffic originates. */
  asn?: number;
  /**
   * The peering service prefix key that is to be shared with the customer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly peeringServicePrefixKey?: string;
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
};

/** The customer's prefix that is registered by the peering service provider. */
export type PeeringRegisteredPrefix = Resource & {
  /** The customer's prefix from which traffic originates. */
  prefix?: string;
  /**
   * The prefix validation state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly prefixValidationState?: PrefixValidationState;
  /**
   * The peering service prefix key that is to be shared with the customer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly peeringServicePrefixKey?: string;
  /**
   * The error message associated with the validation state, if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorMessage?: string;
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
};

/** The Connection Monitor Test class. */
export type ConnectionMonitorTest = Resource & {
  /** The Connection Monitor test source agent */
  sourceAgent?: string;
  /** The Connection Monitor test destination */
  destination?: string;
  /** The Connection Monitor test destination port */
  destinationPort?: number;
  /** The Connection Monitor test frequency in seconds */
  testFrequencyInSec?: number;
  /**
   * The flag that indicates if the Connection Monitor test is successful or not.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isTestSuccessful?: boolean;
  /**
   * The path representing the Connection Monitor test.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly path?: string[];
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
};

/** The peering service country. */
export type PeeringServiceCountry = Resource & {};

/** The peering service location. */
export type PeeringServiceLocation = Resource & {
  /** Country of the customer */
  country?: string;
  /** State of the customer */
  state?: string;
  /** Azure region for the location */
  azureRegion?: string;
};

/** The peering service prefix class. */
export type PeeringServicePrefix = Resource & {
  /** The prefix from which your traffic originates. */
  prefix?: string;
  /**
   * The prefix validation state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly prefixValidationState?: PrefixValidationState;
  /**
   * The prefix learned type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly learnedType?: LearnedType;
  /**
   * The error message for validation state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorMessage?: string;
  /**
   * The list of events for peering service prefix
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly events?: PeeringServicePrefixEvent[];
  /** The peering service prefix key */
  peeringServicePrefixKey?: string;
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
};

/** PeeringService provider */
export type PeeringServiceProvider = Resource & {
  /** The name of the service provider. */
  serviceProviderName?: string;
  /** The list of locations at which the service provider peers with Microsoft. */
  peeringLocations?: string[];
};

/** Peering Service */
export type PeeringService = Resource & {
  /** The SKU that defines the type of the peering service. */
  sku?: PeeringServiceSku;
  /** The location of the resource. */
  location: string;
  /** The resource tags. */
  tags?: { [propertyName: string]: string };
  /** The location (state/province) of the customer. */
  peeringServiceLocation?: string;
  /** The name of the service provider. */
  peeringServiceProvider?: string;
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** The primary peering (Microsoft/service provider) location to be used for customer traffic. */
  providerPrimaryPeeringLocation?: string;
  /** The backup peering (Microsoft/service provider) location to be used for customer traffic. */
  providerBackupPeeringLocation?: string;
  /** The Log Analytics Workspace Properties */
  logAnalyticsWorkspaceProperties?: LogAnalyticsWorkspaceProperties;
};

/** Known values of {@link Enum0} that the service accepts. */
export enum KnownEnum0 {
  Available = "Available",
  Unavailable = "Unavailable"
}

/**
 * Defines values for Enum0. \
 * {@link KnownEnum0} can be used interchangeably with Enum0,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Available** \
 * **Unavailable**
 */
export type Enum0 = string;

/** Known values of {@link LegacyPeeringsKind} that the service accepts. */
export enum KnownLegacyPeeringsKind {
  Direct = "Direct",
  Exchange = "Exchange"
}

/**
 * Defines values for LegacyPeeringsKind. \
 * {@link KnownLegacyPeeringsKind} can be used interchangeably with LegacyPeeringsKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **Exchange**
 */
export type LegacyPeeringsKind = string;

/** Known values of {@link Tier} that the service accepts. */
export enum KnownTier {
  Basic = "Basic",
  Premium = "Premium"
}

/**
 * Defines values for Tier. \
 * {@link KnownTier} can be used interchangeably with Tier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **Premium**
 */
export type Tier = string;

/** Known values of {@link Family} that the service accepts. */
export enum KnownFamily {
  Direct = "Direct",
  Exchange = "Exchange"
}

/**
 * Defines values for Family. \
 * {@link KnownFamily} can be used interchangeably with Family,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **Exchange**
 */
export type Family = string;

/** Known values of {@link Size} that the service accepts. */
export enum KnownSize {
  Free = "Free",
  Metered = "Metered",
  Unlimited = "Unlimited"
}

/**
 * Defines values for Size. \
 * {@link KnownSize} can be used interchangeably with Size,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Free** \
 * **Metered** \
 * **Unlimited**
 */
export type Size = string;

/** Known values of {@link Kind} that the service accepts. */
export enum KnownKind {
  Direct = "Direct",
  Exchange = "Exchange"
}

/**
 * Defines values for Kind. \
 * {@link KnownKind} can be used interchangeably with Kind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **Exchange**
 */
export type Kind = string;

/** Known values of {@link SessionAddressProvider} that the service accepts. */
export enum KnownSessionAddressProvider {
  Microsoft = "Microsoft",
  Peer = "Peer"
}

/**
 * Defines values for SessionAddressProvider. \
 * {@link KnownSessionAddressProvider} can be used interchangeably with SessionAddressProvider,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Microsoft** \
 * **Peer**
 */
export type SessionAddressProvider = string;

/** Known values of {@link ConnectionState} that the service accepts. */
export enum KnownConnectionState {
  None = "None",
  PendingApproval = "PendingApproval",
  Approved = "Approved",
  ProvisioningStarted = "ProvisioningStarted",
  ProvisioningFailed = "ProvisioningFailed",
  ProvisioningCompleted = "ProvisioningCompleted",
  Validating = "Validating",
  Active = "Active"
}

/**
 * Defines values for ConnectionState. \
 * {@link KnownConnectionState} can be used interchangeably with ConnectionState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **PendingApproval** \
 * **Approved** \
 * **ProvisioningStarted** \
 * **ProvisioningFailed** \
 * **ProvisioningCompleted** \
 * **Validating** \
 * **Active**
 */
export type ConnectionState = string;

/** Known values of {@link SessionStateV4} that the service accepts. */
export enum KnownSessionStateV4 {
  None = "None",
  Idle = "Idle",
  Connect = "Connect",
  Active = "Active",
  OpenSent = "OpenSent",
  OpenConfirm = "OpenConfirm",
  OpenReceived = "OpenReceived",
  Established = "Established",
  PendingAdd = "PendingAdd",
  PendingUpdate = "PendingUpdate",
  PendingRemove = "PendingRemove"
}

/**
 * Defines values for SessionStateV4. \
 * {@link KnownSessionStateV4} can be used interchangeably with SessionStateV4,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Idle** \
 * **Connect** \
 * **Active** \
 * **OpenSent** \
 * **OpenConfirm** \
 * **OpenReceived** \
 * **Established** \
 * **PendingAdd** \
 * **PendingUpdate** \
 * **PendingRemove**
 */
export type SessionStateV4 = string;

/** Known values of {@link SessionStateV6} that the service accepts. */
export enum KnownSessionStateV6 {
  None = "None",
  Idle = "Idle",
  Connect = "Connect",
  Active = "Active",
  OpenSent = "OpenSent",
  OpenConfirm = "OpenConfirm",
  OpenReceived = "OpenReceived",
  Established = "Established",
  PendingAdd = "PendingAdd",
  PendingUpdate = "PendingUpdate",
  PendingRemove = "PendingRemove"
}

/**
 * Defines values for SessionStateV6. \
 * {@link KnownSessionStateV6} can be used interchangeably with SessionStateV6,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Idle** \
 * **Connect** \
 * **Active** \
 * **OpenSent** \
 * **OpenConfirm** \
 * **OpenReceived** \
 * **Established** \
 * **PendingAdd** \
 * **PendingUpdate** \
 * **PendingRemove**
 */
export type SessionStateV6 = string;

/** Known values of {@link DirectPeeringType} that the service accepts. */
export enum KnownDirectPeeringType {
  Edge = "Edge",
  Transit = "Transit",
  Cdn = "Cdn",
  Internal = "Internal",
  Ix = "Ix",
  IxRs = "IxRs",
  Voice = "Voice"
}

/**
 * Defines values for DirectPeeringType. \
 * {@link KnownDirectPeeringType} can be used interchangeably with DirectPeeringType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Edge** \
 * **Transit** \
 * **Cdn** \
 * **Internal** \
 * **Ix** \
 * **IxRs** \
 * **Voice**
 */
export type DirectPeeringType = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  Succeeded = "Succeeded",
  Updating = "Updating",
  Deleting = "Deleting",
  Failed = "Failed"
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Updating** \
 * **Deleting** \
 * **Failed**
 */
export type ProvisioningState = string;

/** Known values of {@link LookingGlassCommand} that the service accepts. */
export enum KnownLookingGlassCommand {
  Traceroute = "Traceroute",
  Ping = "Ping",
  BgpRoute = "BgpRoute"
}

/**
 * Defines values for LookingGlassCommand. \
 * {@link KnownLookingGlassCommand} can be used interchangeably with LookingGlassCommand,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Traceroute** \
 * **Ping** \
 * **BgpRoute**
 */
export type LookingGlassCommand = string;

/** Known values of {@link LookingGlassSourceType} that the service accepts. */
export enum KnownLookingGlassSourceType {
  EdgeSite = "EdgeSite",
  AzureRegion = "AzureRegion"
}

/**
 * Defines values for LookingGlassSourceType. \
 * {@link KnownLookingGlassSourceType} can be used interchangeably with LookingGlassSourceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EdgeSite** \
 * **AzureRegion**
 */
export type LookingGlassSourceType = string;

/** Known values of {@link Command} that the service accepts. */
export enum KnownCommand {
  Traceroute = "Traceroute",
  Ping = "Ping",
  BgpRoute = "BgpRoute"
}

/**
 * Defines values for Command. \
 * {@link KnownCommand} can be used interchangeably with Command,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Traceroute** \
 * **Ping** \
 * **BgpRoute**
 */
export type Command = string;

/** Known values of {@link Role} that the service accepts. */
export enum KnownRole {
  Noc = "Noc",
  Policy = "Policy",
  Technical = "Technical",
  Service = "Service",
  Escalation = "Escalation",
  Other = "Other"
}

/**
 * Defines values for Role. \
 * {@link KnownRole} can be used interchangeably with Role,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Noc** \
 * **Policy** \
 * **Technical** \
 * **Service** \
 * **Escalation** \
 * **Other**
 */
export type Role = string;

/** Known values of {@link ValidationState} that the service accepts. */
export enum KnownValidationState {
  None = "None",
  Pending = "Pending",
  Approved = "Approved",
  Failed = "Failed"
}

/**
 * Defines values for ValidationState. \
 * {@link KnownValidationState} can be used interchangeably with ValidationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Pending** \
 * **Approved** \
 * **Failed**
 */
export type ValidationState = string;

/** Known values of {@link PeeringLocationsKind} that the service accepts. */
export enum KnownPeeringLocationsKind {
  Direct = "Direct",
  Exchange = "Exchange"
}

/**
 * Defines values for PeeringLocationsKind. \
 * {@link KnownPeeringLocationsKind} can be used interchangeably with PeeringLocationsKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **Exchange**
 */
export type PeeringLocationsKind = string;

/** Known values of {@link PeeringLocationsDirectPeeringType} that the service accepts. */
export enum KnownPeeringLocationsDirectPeeringType {
  Edge = "Edge",
  Transit = "Transit",
  Cdn = "Cdn",
  Internal = "Internal",
  Ix = "Ix",
  IxRs = "IxRs",
  Voice = "Voice"
}

/**
 * Defines values for PeeringLocationsDirectPeeringType. \
 * {@link KnownPeeringLocationsDirectPeeringType} can be used interchangeably with PeeringLocationsDirectPeeringType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Edge** \
 * **Transit** \
 * **Cdn** \
 * **Internal** \
 * **Ix** \
 * **IxRs** \
 * **Voice**
 */
export type PeeringLocationsDirectPeeringType = string;

/** Known values of {@link PrefixValidationState} that the service accepts. */
export enum KnownPrefixValidationState {
  None = "None",
  Invalid = "Invalid",
  Verified = "Verified",
  Failed = "Failed",
  Pending = "Pending",
  Warning = "Warning",
  Unknown = "Unknown"
}

/**
 * Defines values for PrefixValidationState. \
 * {@link KnownPrefixValidationState} can be used interchangeably with PrefixValidationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Invalid** \
 * **Verified** \
 * **Failed** \
 * **Pending** \
 * **Warning** \
 * **Unknown**
 */
export type PrefixValidationState = string;

/** Known values of {@link LearnedType} that the service accepts. */
export enum KnownLearnedType {
  None = "None",
  ViaServiceProvider = "ViaServiceProvider",
  ViaSession = "ViaSession"
}

/**
 * Defines values for LearnedType. \
 * {@link KnownLearnedType} can be used interchangeably with LearnedType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **ViaServiceProvider** \
 * **ViaSession**
 */
export type LearnedType = string;

/** Optional parameters. */
export interface CdnPeeringPrefixesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type CdnPeeringPrefixesListResponse = CdnPeeringPrefixListResult;

/** Optional parameters. */
export interface CdnPeeringPrefixesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type CdnPeeringPrefixesListNextResponse = CdnPeeringPrefixListResult;

/** Optional parameters. */
export interface CheckServiceProviderAvailabilityOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkServiceProviderAvailability operation. */
export type CheckServiceProviderAvailabilityResponse = {
  /** The parsed response body. */
  body: Enum0;
};

/** Optional parameters. */
export interface LegacyPeeringsListOptionalParams
  extends coreClient.OperationOptions {
  /** The ASN number associated with a legacy peering. */
  asn?: number;
}

/** Contains response data for the list operation. */
export type LegacyPeeringsListResponse = PeeringListResult;

/** Optional parameters. */
export interface LegacyPeeringsListNextOptionalParams
  extends coreClient.OperationOptions {
  /** The ASN number associated with a legacy peering. */
  asn?: number;
}

/** Contains response data for the listNext operation. */
export type LegacyPeeringsListNextResponse = PeeringListResult;

/** Optional parameters. */
export interface LookingGlassInvokeOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the invoke operation. */
export type LookingGlassInvokeResponse = LookingGlassOutput;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface PeerAsnsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PeerAsnsGetResponse = PeerAsn;

/** Optional parameters. */
export interface PeerAsnsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type PeerAsnsCreateOrUpdateResponse = PeerAsn;

/** Optional parameters. */
export interface PeerAsnsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface PeerAsnsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type PeerAsnsListBySubscriptionResponse = PeerAsnListResult;

/** Optional parameters. */
export interface PeerAsnsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type PeerAsnsListBySubscriptionNextResponse = PeerAsnListResult;

/** Optional parameters. */
export interface PeeringLocationsListOptionalParams
  extends coreClient.OperationOptions {
  /** The type of direct peering. */
  directPeeringType?: PeeringLocationsDirectPeeringType;
}

/** Contains response data for the list operation. */
export type PeeringLocationsListResponse = PeeringLocationListResult;

/** Optional parameters. */
export interface PeeringLocationsListNextOptionalParams
  extends coreClient.OperationOptions {
  /** The type of direct peering. */
  directPeeringType?: PeeringLocationsDirectPeeringType;
}

/** Contains response data for the listNext operation. */
export type PeeringLocationsListNextResponse = PeeringLocationListResult;

/** Optional parameters. */
export interface RegisteredAsnsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RegisteredAsnsGetResponse = PeeringRegisteredAsn;

/** Optional parameters. */
export interface RegisteredAsnsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type RegisteredAsnsCreateOrUpdateResponse = PeeringRegisteredAsn;

/** Optional parameters. */
export interface RegisteredAsnsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface RegisteredAsnsListByPeeringOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPeering operation. */
export type RegisteredAsnsListByPeeringResponse = PeeringRegisteredAsnListResult;

/** Optional parameters. */
export interface RegisteredAsnsListByPeeringNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPeeringNext operation. */
export type RegisteredAsnsListByPeeringNextResponse = PeeringRegisteredAsnListResult;

/** Optional parameters. */
export interface RegisteredPrefixesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RegisteredPrefixesGetResponse = PeeringRegisteredPrefix;

/** Optional parameters. */
export interface RegisteredPrefixesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type RegisteredPrefixesCreateOrUpdateResponse = PeeringRegisteredPrefix;

/** Optional parameters. */
export interface RegisteredPrefixesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface RegisteredPrefixesListByPeeringOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPeering operation. */
export type RegisteredPrefixesListByPeeringResponse = PeeringRegisteredPrefixListResult;

/** Optional parameters. */
export interface RegisteredPrefixesListByPeeringNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPeeringNext operation. */
export type RegisteredPrefixesListByPeeringNextResponse = PeeringRegisteredPrefixListResult;

/** Optional parameters. */
export interface PeeringsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PeeringsGetResponse = Peering;

/** Optional parameters. */
export interface PeeringsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type PeeringsCreateOrUpdateResponse = Peering;

/** Optional parameters. */
export interface PeeringsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface PeeringsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type PeeringsUpdateResponse = Peering;

/** Optional parameters. */
export interface PeeringsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type PeeringsListByResourceGroupResponse = PeeringListResult;

/** Optional parameters. */
export interface PeeringsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type PeeringsListBySubscriptionResponse = PeeringListResult;

/** Optional parameters. */
export interface PeeringsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type PeeringsListByResourceGroupNextResponse = PeeringListResult;

/** Optional parameters. */
export interface PeeringsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type PeeringsListBySubscriptionNextResponse = PeeringListResult;

/** Optional parameters. */
export interface ReceivedRoutesListByPeeringOptionalParams
  extends coreClient.OperationOptions {
  /** The optional prefix that can be used to filter the routes. */
  prefix?: string;
  /** The optional AS path that can be used to filter the routes. */
  asPath?: string;
  /** The optional origin AS validation state that can be used to filter the routes. */
  originAsValidationState?: string;
  /** The optional RPKI validation state that can be used to filter the routes. */
  rpkiValidationState?: string;
  /** The optional page continuation token that is used in the event of paginated result. */
  skipToken?: string;
}

/** Contains response data for the listByPeering operation. */
export type ReceivedRoutesListByPeeringResponse = PeeringReceivedRouteListResult;

/** Optional parameters. */
export interface ReceivedRoutesListByPeeringNextOptionalParams
  extends coreClient.OperationOptions {
  /** The optional prefix that can be used to filter the routes. */
  prefix?: string;
  /** The optional AS path that can be used to filter the routes. */
  asPath?: string;
  /** The optional origin AS validation state that can be used to filter the routes. */
  originAsValidationState?: string;
  /** The optional RPKI validation state that can be used to filter the routes. */
  rpkiValidationState?: string;
  /** The optional page continuation token that is used in the event of paginated result. */
  skipToken?: string;
}

/** Contains response data for the listByPeeringNext operation. */
export type ReceivedRoutesListByPeeringNextResponse = PeeringReceivedRouteListResult;

/** Optional parameters. */
export interface ConnectionMonitorTestsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ConnectionMonitorTestsGetResponse = ConnectionMonitorTest;

/** Optional parameters. */
export interface ConnectionMonitorTestsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ConnectionMonitorTestsCreateOrUpdateResponse = ConnectionMonitorTest;

/** Optional parameters. */
export interface ConnectionMonitorTestsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ConnectionMonitorTestsListByPeeringServiceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPeeringService operation. */
export type ConnectionMonitorTestsListByPeeringServiceResponse = ConnectionMonitorTestListResult;

/** Optional parameters. */
export interface ConnectionMonitorTestsListByPeeringServiceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPeeringServiceNext operation. */
export type ConnectionMonitorTestsListByPeeringServiceNextResponse = ConnectionMonitorTestListResult;

/** Optional parameters. */
export interface PeeringServiceCountriesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type PeeringServiceCountriesListResponse = PeeringServiceCountryListResult;

/** Optional parameters. */
export interface PeeringServiceCountriesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type PeeringServiceCountriesListNextResponse = PeeringServiceCountryListResult;

/** Optional parameters. */
export interface PeeringServiceLocationsListOptionalParams
  extends coreClient.OperationOptions {
  /** The country of interest, in which the locations are to be present. */
  country?: string;
}

/** Contains response data for the list operation. */
export type PeeringServiceLocationsListResponse = PeeringServiceLocationListResult;

/** Optional parameters. */
export interface PeeringServiceLocationsListNextOptionalParams
  extends coreClient.OperationOptions {
  /** The country of interest, in which the locations are to be present. */
  country?: string;
}

/** Contains response data for the listNext operation. */
export type PeeringServiceLocationsListNextResponse = PeeringServiceLocationListResult;

/** Optional parameters. */
export interface PrefixesGetOptionalParams extends coreClient.OperationOptions {
  /** The properties to be expanded. */
  expand?: string;
}

/** Contains response data for the get operation. */
export type PrefixesGetResponse = PeeringServicePrefix;

/** Optional parameters. */
export interface PrefixesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type PrefixesCreateOrUpdateResponse = PeeringServicePrefix;

/** Optional parameters. */
export interface PrefixesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface PrefixesListByPeeringServiceOptionalParams
  extends coreClient.OperationOptions {
  /** The properties to be expanded. */
  expand?: string;
}

/** Contains response data for the listByPeeringService operation. */
export type PrefixesListByPeeringServiceResponse = PeeringServicePrefixListResult;

/** Optional parameters. */
export interface PrefixesListByPeeringServiceNextOptionalParams
  extends coreClient.OperationOptions {
  /** The properties to be expanded. */
  expand?: string;
}

/** Contains response data for the listByPeeringServiceNext operation. */
export type PrefixesListByPeeringServiceNextResponse = PeeringServicePrefixListResult;

/** Optional parameters. */
export interface PeeringServiceProvidersListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type PeeringServiceProvidersListResponse = PeeringServiceProviderListResult;

/** Optional parameters. */
export interface PeeringServiceProvidersListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type PeeringServiceProvidersListNextResponse = PeeringServiceProviderListResult;

/** Optional parameters. */
export interface PeeringServicesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PeeringServicesGetResponse = PeeringService;

/** Optional parameters. */
export interface PeeringServicesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type PeeringServicesCreateOrUpdateResponse = PeeringService;

/** Optional parameters. */
export interface PeeringServicesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface PeeringServicesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type PeeringServicesUpdateResponse = PeeringService;

/** Optional parameters. */
export interface PeeringServicesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type PeeringServicesListByResourceGroupResponse = PeeringServiceListResult;

/** Optional parameters. */
export interface PeeringServicesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type PeeringServicesListBySubscriptionResponse = PeeringServiceListResult;

/** Optional parameters. */
export interface PeeringServicesInitializeConnectionMonitorOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface PeeringServicesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type PeeringServicesListByResourceGroupNextResponse = PeeringServiceListResult;

/** Optional parameters. */
export interface PeeringServicesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type PeeringServicesListBySubscriptionNextResponse = PeeringServiceListResult;

/** Optional parameters. */
export interface PeeringManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
