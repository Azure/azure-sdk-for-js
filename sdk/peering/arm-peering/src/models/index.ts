/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Class for CheckServiceProviderAvailabilityInput */
export interface CheckServiceProviderAvailabilityInput {
  /** Gets or sets the PeeringServiceLocation */
  peeringServiceLocation?: string;
  /** Gets or sets the PeeringServiceProvider */
  peeringServiceProvider?: string;
}

/** The error response that indicates why an operation has failed. */
export interface ErrorResponse {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
}

/** The paginated list of peerings. */
export interface PeeringListResult {
  /** The list of peerings. */
  value?: Peering[];
  /** The link to fetch the next page of peerings. */
  nextLink?: string;
}

/** The SKU that defines the tier and kind of the peering. */
export interface PeeringSku {
  /** The name of the peering SKU. */
  name?: Name;
  /** The tier of the peering SKU. */
  tier?: Tier;
  /** The family of the peering SKU. */
  family?: Family;
  /** The size of the peering SKU. */
  size?: Size;
}

/** The properties that define a direct peering. */
export interface PeeringPropertiesDirect {
  /** The set of connections that constitute a direct peering. */
  connections?: DirectConnection[];
  /** The flag that indicates whether or not the peering is used for peering service. */
  useForPeeringService?: boolean;
  /** The reference of the peer ASN. */
  peerAsn?: SubResource;
  /** The type of direct peering. */
  directPeeringType?: DirectPeeringType;
}

/** The properties that define a direct connection. */
export interface DirectConnection {
  /** The bandwidth of the connection. */
  bandwidthInMbps?: number;
  /** The bandwidth that is actually provisioned. */
  provisionedBandwidthInMbps?: number;
  /** The field indicating if Microsoft provides session ip addresses. */
  sessionAddressProvider?: SessionAddressProvider;
  /** The flag that indicates whether or not the connection is used for peering service. */
  useForPeeringService?: boolean;
  /** The PeeringDB.com ID of the facility at which the connection has to be set up. */
  peeringDBFacilityId?: number;
  /**
   * The state of the connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connectionState?: ConnectionState;
  /** The BGP session associated with the connection. */
  bgpSession?: BgpSession;
  /** The unique identifier (GUID) for the connection. */
  connectionIdentifier?: string;
}

/** The properties that define a BGP session. */
export interface BgpSession {
  /** The IPv4 prefix that contains both ends' IPv4 addresses. */
  sessionPrefixV4?: string;
  /** The IPv6 prefix that contains both ends' IPv6 addresses. */
  sessionPrefixV6?: string;
  /**
   * The IPv4 session address on Microsoft's end.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly microsoftSessionIPv4Address?: string;
  /**
   * The IPv6 session address on Microsoft's end.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly microsoftSessionIPv6Address?: string;
  /** The IPv4 session address on peer's end. */
  peerSessionIPv4Address?: string;
  /** The IPv6 session address on peer's end. */
  peerSessionIPv6Address?: string;
  /**
   * The state of the IPv4 session.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sessionStateV4?: SessionStateV4;
  /**
   * The state of the IPv6 session.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sessionStateV6?: SessionStateV6;
  /** The maximum number of prefixes advertised over the IPv4 session. */
  maxPrefixesAdvertisedV4?: number;
  /** The maximum number of prefixes advertised over the IPv6 session. */
  maxPrefixesAdvertisedV6?: number;
  /** The MD5 authentication key of the session. */
  md5AuthenticationKey?: string;
}

/** The sub resource. */
export interface SubResource {
  /** The identifier of the referenced resource. */
  id?: string;
}

/** The properties that define an exchange peering. */
export interface PeeringPropertiesExchange {
  /** The set of connections that constitute an exchange peering. */
  connections?: ExchangeConnection[];
  /** The reference of the peer ASN. */
  peerAsn?: SubResource;
}

/** The properties that define an exchange connection. */
export interface ExchangeConnection {
  /** The PeeringDB.com ID of the facility at which the connection has to be set up. */
  peeringDBFacilityId?: number;
  /**
   * The state of the connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connectionState?: ConnectionState;
  /** The BGP session associated with the connection. */
  bgpSession?: BgpSession;
  /** The unique identifier (GUID) for the connection. */
  connectionIdentifier?: string;
}

/** The ARM resource class. */
export interface Resource {
  /**
   * The name of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The ID of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** The paginated list of peering API operations. */
export interface OperationListResult {
  /** The list of peering API operations. */
  value?: Operation[];
  /** The link to fetch the next page of peering API operations. */
  nextLink?: string;
}

/** The peering API operation. */
export interface Operation {
  /**
   * The name of the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The information related to the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly display?: OperationDisplayInfo;
  /**
   * The flag that indicates whether the operation applies to data plane.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
}

/** The information related to the operation. */
export interface OperationDisplayInfo {
  /**
   * The name of the resource provider.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The name of the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The description of the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** The contact information of the peer. */
export interface ContactInfo {
  /** The list of email addresses. */
  emails?: string[];
  /** The list of contact numbers. */
  phone?: string[];
}

/** The paginated list of peer ASNs. */
export interface PeerAsnListResult {
  /** The list of peer ASNs. */
  value?: PeerAsn[];
  /** The link to fetch the next page of peer ASNs. */
  nextLink?: string;
}

/** The paginated list of peering locations. */
export interface PeeringLocationListResult {
  /** The list of peering locations. */
  value?: PeeringLocation[];
  /** The link to fetch the next page of peering locations. */
  nextLink?: string;
}

/** The properties that define a direct peering location. */
export interface PeeringLocationPropertiesDirect {
  /** The list of direct peering facilities at the peering location. */
  peeringFacilities?: DirectPeeringFacility[];
  /** The list of bandwidth offers available at the peering location. */
  bandwidthOffers?: PeeringBandwidthOffer[];
}

/** The properties that define a direct peering facility. */
export interface DirectPeeringFacility {
  /** The address of the direct peering facility. */
  address?: string;
  /** The type of the direct peering. */
  directPeeringType?: DirectPeeringType;
  /** The PeeringDB.com ID of the facility. */
  peeringDBFacilityId?: number;
  /** The PeeringDB.com URL of the facility. */
  peeringDBFacilityLink?: string;
}

/** The properties that define a peering bandwidth offer. */
export interface PeeringBandwidthOffer {
  /** The name of the bandwidth offer. */
  offerName?: string;
  /** The value of the bandwidth offer in Mbps. */
  valueInMbps?: number;
}

/** The properties that define an exchange peering location. */
export interface PeeringLocationPropertiesExchange {
  /** The list of exchange peering facilities at the peering location. */
  peeringFacilities?: ExchangePeeringFacility[];
}

/** The properties that define an exchange peering facility. */
export interface ExchangePeeringFacility {
  /** The name of the exchange peering facility. */
  exchangeName?: string;
  /** The bandwidth of the connection between Microsoft and the exchange peering facility. */
  bandwidthInMbps?: number;
  /** The IPv4 address of Microsoft at the exchange peering facility. */
  microsoftIPv4Address?: string;
  /** The IPv6 address of Microsoft at the exchange peering facility. */
  microsoftIPv6Address?: string;
  /** The IPv4 prefixes associated with the exchange peering facility. */
  facilityIPv4Prefix?: string;
  /** The IPv6 prefixes associated with the exchange peering facility. */
  facilityIPv6Prefix?: string;
  /** The PeeringDB.com ID of the facility. */
  peeringDBFacilityId?: number;
  /** The PeeringDB.com URL of the facility. */
  peeringDBFacilityLink?: string;
}

/** The resource tags. */
export interface ResourceTags {
  /** Gets or sets the tags, a dictionary of descriptors arm object */
  tags?: { [propertyName: string]: string };
}

/** The paginated list of peering service locations. */
export interface PeeringServiceLocationListResult {
  /** The list of peering service locations. */
  value?: PeeringServiceLocation[];
  /** The link to fetch the next page of peering service locations. */
  nextLink?: string;
}

/** The paginated list of [T]. */
export interface PeeringServicePrefixListResult {
  /** The list of [T]. */
  value?: PeeringServicePrefix[];
  /** The link to fetch the next page of [T]. */
  nextLink?: string;
}

/** The paginated list of peering service providers. */
export interface PeeringServiceProviderListResult {
  /** The list of peering service providers. */
  value?: PeeringServiceProvider[];
  /** The link to fetch the next page of peering service providers. */
  nextLink?: string;
}

/** The paginated list of peering services. */
export interface PeeringServiceListResult {
  /** The list of peering services. */
  value?: PeeringService[];
  /** The link to fetch the next page of peering services. */
  nextLink?: string;
}

/** Peering is a logical representation of a set of connections to the Microsoft Cloud Edge at a location. */
export type Peering = Resource & {
  /** The SKU that defines the tier and kind of the peering. */
  sku: PeeringSku;
  /** The kind of the peering. */
  kind: Kind;
  /** The location of the resource. */
  location: string;
  /** The resource tags. */
  tags?: { [propertyName: string]: string };
  /** The properties that define a direct peering. */
  direct?: PeeringPropertiesDirect;
  /** The properties that define an exchange peering. */
  exchange?: PeeringPropertiesExchange;
  /** The location of the peering. */
  peeringLocation?: string;
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
};

/** The essential information related to the peer's ASN. */
export type PeerAsn = Resource & {
  /** The Autonomous System Number (ASN) of the peer. */
  peerAsn?: number;
  /** The contact information of the peer. */
  peerContactInfo?: ContactInfo;
  /** The name of the peer. */
  peerName?: string;
  /** The validation state of the ASN associated with the peer. */
  validationState?: ValidationState;
};

/** Peering location is where connectivity could be established to the Microsoft Cloud Edge. */
export type PeeringLocation = Resource & {
  /** The kind of peering that the peering location supports. */
  kind?: Kind;
  /** The properties that define a direct peering location. */
  direct?: PeeringLocationPropertiesDirect;
  /** The properties that define an exchange peering location. */
  exchange?: PeeringLocationPropertiesExchange;
  /** The name of the peering location. */
  peeringLocation?: string;
  /** The country in which the peering location exists. */
  country?: string;
  /** The Azure region associated with the peering location. */
  azureRegion?: string;
};

/** PeeringService location */
export type PeeringServiceLocation = Resource & {
  /** Country of the customer */
  country?: string;
  /** State of the customer */
  state?: string;
  /** Azure region for the location */
  azureRegion?: string;
};

/** The peering service prefix class. */
export type PeeringServicePrefix = Resource & {
  /** Valid route prefix */
  prefix?: string;
  /** The prefix validation state */
  prefixValidationState?: PrefixValidationState;
  /** The prefix learned type */
  learnedType?: LearnedType;
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
};

/** PeeringService provider */
export type PeeringServiceProvider = Resource & {
  /** The name of the service provider. */
  serviceProviderName?: string;
};

/** Peering Service */
export type PeeringService = Resource & {
  /** The location of the resource. */
  location: string;
  /** The resource tags. */
  tags?: { [propertyName: string]: string };
  /** The PeeringServiceLocation of the Customer. */
  peeringServiceLocation?: string;
  /** The MAPS Provider Name. */
  peeringServiceProvider?: string;
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
};

/** Known values of {@link Enum0} that the service accepts. */
export enum KnownEnum0 {
  Available = "Available",
  UnAvailable = "UnAvailable"
}

/**
 * Defines values for Enum0. \
 * {@link KnownEnum0} can be used interchangeably with Enum0,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Available** \
 * **UnAvailable**
 */
export type Enum0 = string;

/** Known values of {@link Enum1} that the service accepts. */
export enum KnownEnum1 {
  Direct = "Direct",
  Exchange = "Exchange"
}

/**
 * Defines values for Enum1. \
 * {@link KnownEnum1} can be used interchangeably with Enum1,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **Exchange**
 */
export type Enum1 = string;

/** Known values of {@link Name} that the service accepts. */
export enum KnownName {
  BasicExchangeFree = "Basic_Exchange_Free",
  BasicDirectFree = "Basic_Direct_Free",
  PremiumDirectFree = "Premium_Direct_Free",
  PremiumExchangeMetered = "Premium_Exchange_Metered",
  PremiumDirectMetered = "Premium_Direct_Metered",
  PremiumDirectUnlimited = "Premium_Direct_Unlimited"
}

/**
 * Defines values for Name. \
 * {@link KnownName} can be used interchangeably with Name,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic_Exchange_Free** \
 * **Basic_Direct_Free** \
 * **Premium_Direct_Free** \
 * **Premium_Exchange_Metered** \
 * **Premium_Direct_Metered** \
 * **Premium_Direct_Unlimited**
 */
export type Name = string;

/** Known values of {@link Tier} that the service accepts. */
export enum KnownTier {
  Basic = "Basic",
  Premium = "Premium"
}

/**
 * Defines values for Tier. \
 * {@link KnownTier} can be used interchangeably with Tier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **Premium**
 */
export type Tier = string;

/** Known values of {@link Family} that the service accepts. */
export enum KnownFamily {
  Direct = "Direct",
  Exchange = "Exchange"
}

/**
 * Defines values for Family. \
 * {@link KnownFamily} can be used interchangeably with Family,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **Exchange**
 */
export type Family = string;

/** Known values of {@link Size} that the service accepts. */
export enum KnownSize {
  Free = "Free",
  Metered = "Metered",
  Unlimited = "Unlimited"
}

/**
 * Defines values for Size. \
 * {@link KnownSize} can be used interchangeably with Size,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Free** \
 * **Metered** \
 * **Unlimited**
 */
export type Size = string;

/** Known values of {@link Kind} that the service accepts. */
export enum KnownKind {
  Direct = "Direct",
  Exchange = "Exchange"
}

/**
 * Defines values for Kind. \
 * {@link KnownKind} can be used interchangeably with Kind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **Exchange**
 */
export type Kind = string;

/** Known values of {@link SessionAddressProvider} that the service accepts. */
export enum KnownSessionAddressProvider {
  Microsoft = "Microsoft",
  Peer = "Peer"
}

/**
 * Defines values for SessionAddressProvider. \
 * {@link KnownSessionAddressProvider} can be used interchangeably with SessionAddressProvider,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Microsoft** \
 * **Peer**
 */
export type SessionAddressProvider = string;

/** Known values of {@link ConnectionState} that the service accepts. */
export enum KnownConnectionState {
  None = "None",
  PendingApproval = "PendingApproval",
  Approved = "Approved",
  ProvisioningStarted = "ProvisioningStarted",
  ProvisioningFailed = "ProvisioningFailed",
  ProvisioningCompleted = "ProvisioningCompleted",
  Validating = "Validating",
  Active = "Active"
}

/**
 * Defines values for ConnectionState. \
 * {@link KnownConnectionState} can be used interchangeably with ConnectionState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **PendingApproval** \
 * **Approved** \
 * **ProvisioningStarted** \
 * **ProvisioningFailed** \
 * **ProvisioningCompleted** \
 * **Validating** \
 * **Active**
 */
export type ConnectionState = string;

/** Known values of {@link SessionStateV4} that the service accepts. */
export enum KnownSessionStateV4 {
  None = "None",
  Idle = "Idle",
  Connect = "Connect",
  Active = "Active",
  OpenSent = "OpenSent",
  OpenConfirm = "OpenConfirm",
  OpenReceived = "OpenReceived",
  Established = "Established",
  PendingAdd = "PendingAdd",
  PendingUpdate = "PendingUpdate",
  PendingRemove = "PendingRemove"
}

/**
 * Defines values for SessionStateV4. \
 * {@link KnownSessionStateV4} can be used interchangeably with SessionStateV4,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Idle** \
 * **Connect** \
 * **Active** \
 * **OpenSent** \
 * **OpenConfirm** \
 * **OpenReceived** \
 * **Established** \
 * **PendingAdd** \
 * **PendingUpdate** \
 * **PendingRemove**
 */
export type SessionStateV4 = string;

/** Known values of {@link SessionStateV6} that the service accepts. */
export enum KnownSessionStateV6 {
  None = "None",
  Idle = "Idle",
  Connect = "Connect",
  Active = "Active",
  OpenSent = "OpenSent",
  OpenConfirm = "OpenConfirm",
  OpenReceived = "OpenReceived",
  Established = "Established",
  PendingAdd = "PendingAdd",
  PendingUpdate = "PendingUpdate",
  PendingRemove = "PendingRemove"
}

/**
 * Defines values for SessionStateV6. \
 * {@link KnownSessionStateV6} can be used interchangeably with SessionStateV6,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Idle** \
 * **Connect** \
 * **Active** \
 * **OpenSent** \
 * **OpenConfirm** \
 * **OpenReceived** \
 * **Established** \
 * **PendingAdd** \
 * **PendingUpdate** \
 * **PendingRemove**
 */
export type SessionStateV6 = string;

/** Known values of {@link DirectPeeringType} that the service accepts. */
export enum KnownDirectPeeringType {
  Edge = "Edge",
  Transit = "Transit",
  Cdn = "Cdn",
  Internal = "Internal"
}

/**
 * Defines values for DirectPeeringType. \
 * {@link KnownDirectPeeringType} can be used interchangeably with DirectPeeringType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Edge** \
 * **Transit** \
 * **Cdn** \
 * **Internal**
 */
export type DirectPeeringType = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  Succeeded = "Succeeded",
  Updating = "Updating",
  Deleting = "Deleting",
  Failed = "Failed"
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Updating** \
 * **Deleting** \
 * **Failed**
 */
export type ProvisioningState = string;

/** Known values of {@link ValidationState} that the service accepts. */
export enum KnownValidationState {
  None = "None",
  Pending = "Pending",
  Approved = "Approved",
  Failed = "Failed"
}

/**
 * Defines values for ValidationState. \
 * {@link KnownValidationState} can be used interchangeably with ValidationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Pending** \
 * **Approved** \
 * **Failed**
 */
export type ValidationState = string;

/** Known values of {@link Enum14} that the service accepts. */
export enum KnownEnum14 {
  Direct = "Direct",
  Exchange = "Exchange"
}

/**
 * Defines values for Enum14. \
 * {@link KnownEnum14} can be used interchangeably with Enum14,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **Exchange**
 */
export type Enum14 = string;

/** Known values of {@link Enum15} that the service accepts. */
export enum KnownEnum15 {
  Edge = "Edge",
  Transit = "Transit",
  Cdn = "Cdn",
  Internal = "Internal"
}

/**
 * Defines values for Enum15. \
 * {@link KnownEnum15} can be used interchangeably with Enum15,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Edge** \
 * **Transit** \
 * **Cdn** \
 * **Internal**
 */
export type Enum15 = string;

/** Known values of {@link PrefixValidationState} that the service accepts. */
export enum KnownPrefixValidationState {
  None = "None",
  Invalid = "Invalid",
  Verified = "Verified",
  Failed = "Failed",
  Pending = "Pending",
  Unknown = "Unknown"
}

/**
 * Defines values for PrefixValidationState. \
 * {@link KnownPrefixValidationState} can be used interchangeably with PrefixValidationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Invalid** \
 * **Verified** \
 * **Failed** \
 * **Pending** \
 * **Unknown**
 */
export type PrefixValidationState = string;

/** Known values of {@link LearnedType} that the service accepts. */
export enum KnownLearnedType {
  None = "None",
  ViaPartner = "ViaPartner",
  ViaSession = "ViaSession"
}

/**
 * Defines values for LearnedType. \
 * {@link KnownLearnedType} can be used interchangeably with LearnedType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **ViaPartner** \
 * **ViaSession**
 */
export type LearnedType = string;

/** Optional parameters. */
export interface CheckServiceProviderAvailabilityOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkServiceProviderAvailability operation. */
export type CheckServiceProviderAvailabilityResponse = {
  /** The parsed response body. */
  body: Enum0;
};

/** Optional parameters. */
export interface LegacyPeeringsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type LegacyPeeringsListResponse = PeeringListResult;

/** Optional parameters. */
export interface LegacyPeeringsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type LegacyPeeringsListNextResponse = PeeringListResult;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface PeerAsnsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PeerAsnsGetResponse = PeerAsn;

/** Optional parameters. */
export interface PeerAsnsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type PeerAsnsCreateOrUpdateResponse = PeerAsn;

/** Optional parameters. */
export interface PeerAsnsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface PeerAsnsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type PeerAsnsListBySubscriptionResponse = PeerAsnListResult;

/** Optional parameters. */
export interface PeerAsnsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type PeerAsnsListBySubscriptionNextResponse = PeerAsnListResult;

/** Optional parameters. */
export interface PeeringLocationsListOptionalParams
  extends coreClient.OperationOptions {
  /** The type of direct peering. */
  directPeeringType?: Enum15;
}

/** Contains response data for the list operation. */
export type PeeringLocationsListResponse = PeeringLocationListResult;

/** Optional parameters. */
export interface PeeringLocationsListNextOptionalParams
  extends coreClient.OperationOptions {
  /** The type of direct peering. */
  directPeeringType?: Enum15;
}

/** Contains response data for the listNext operation. */
export type PeeringLocationsListNextResponse = PeeringLocationListResult;

/** Optional parameters. */
export interface PeeringsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PeeringsGetResponse = Peering;

/** Optional parameters. */
export interface PeeringsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type PeeringsCreateOrUpdateResponse = Peering;

/** Optional parameters. */
export interface PeeringsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface PeeringsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type PeeringsUpdateResponse = Peering;

/** Optional parameters. */
export interface PeeringsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type PeeringsListByResourceGroupResponse = PeeringListResult;

/** Optional parameters. */
export interface PeeringsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type PeeringsListBySubscriptionResponse = PeeringListResult;

/** Optional parameters. */
export interface PeeringsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type PeeringsListByResourceGroupNextResponse = PeeringListResult;

/** Optional parameters. */
export interface PeeringsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type PeeringsListBySubscriptionNextResponse = PeeringListResult;

/** Optional parameters. */
export interface PeeringServiceLocationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type PeeringServiceLocationsListResponse = PeeringServiceLocationListResult;

/** Optional parameters. */
export interface PeeringServiceLocationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type PeeringServiceLocationsListNextResponse = PeeringServiceLocationListResult;

/** Optional parameters. */
export interface PeeringServicePrefixesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PeeringServicePrefixesGetResponse = PeeringServicePrefix;

/** Optional parameters. */
export interface PeeringServicePrefixesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type PeeringServicePrefixesCreateOrUpdateResponse = PeeringServicePrefix;

/** Optional parameters. */
export interface PeeringServicePrefixesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface PrefixesListByPeeringServiceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPeeringService operation. */
export type PrefixesListByPeeringServiceResponse = PeeringServicePrefixListResult;

/** Optional parameters. */
export interface PrefixesListByPeeringServiceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPeeringServiceNext operation. */
export type PrefixesListByPeeringServiceNextResponse = PeeringServicePrefixListResult;

/** Optional parameters. */
export interface PeeringServiceProvidersListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type PeeringServiceProvidersListResponse = PeeringServiceProviderListResult;

/** Optional parameters. */
export interface PeeringServiceProvidersListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type PeeringServiceProvidersListNextResponse = PeeringServiceProviderListResult;

/** Optional parameters. */
export interface PeeringServicesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PeeringServicesGetResponse = PeeringService;

/** Optional parameters. */
export interface PeeringServicesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type PeeringServicesCreateOrUpdateResponse = PeeringService;

/** Optional parameters. */
export interface PeeringServicesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface PeeringServicesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type PeeringServicesUpdateResponse = PeeringService;

/** Optional parameters. */
export interface PeeringServicesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type PeeringServicesListByResourceGroupResponse = PeeringServiceListResult;

/** Optional parameters. */
export interface PeeringServicesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type PeeringServicesListBySubscriptionResponse = PeeringServiceListResult;

/** Optional parameters. */
export interface PeeringServicesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type PeeringServicesListByResourceGroupNextResponse = PeeringServiceListResult;

/** Optional parameters. */
export interface PeeringServicesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type PeeringServicesListBySubscriptionNextResponse = PeeringServiceListResult;

/** Optional parameters. */
export interface PeeringManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
