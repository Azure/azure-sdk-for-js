/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * Class for CheckServiceProviderAvailabilityInput
 */
export interface CheckServiceProviderAvailabilityInput {
  /**
   * Gets or sets the PeeringServiceLocation
   */
  peeringServiceLocation?: string;
  /**
   * Gets or sets the PeeringServiceProvider
   */
  peeringServiceProvider?: string;
}

/**
 * The SKU that defines the tier and kind of the peering.
 */
export interface PeeringSku {
  /**
   * The name of the peering SKU. Possible values include: 'Basic_Exchange_Free',
   * 'Basic_Direct_Free', 'Premium_Direct_Free', 'Premium_Exchange_Metered',
   * 'Premium_Direct_Metered', 'Premium_Direct_Unlimited'
   */
  name?: Name;
  /**
   * The tier of the peering SKU. Possible values include: 'Basic', 'Premium'
   */
  tier?: Tier;
  /**
   * The family of the peering SKU. Possible values include: 'Direct', 'Exchange'
   */
  family?: Family;
  /**
   * The size of the peering SKU. Possible values include: 'Free', 'Metered', 'Unlimited'
   */
  size?: Size;
}

/**
 * The properties that define a BGP session.
 */
export interface BgpSession {
  /**
   * The IPv4 prefix that contains both ends' IPv4 addresses.
   */
  sessionPrefixV4?: string;
  /**
   * The IPv6 prefix that contains both ends' IPv6 addresses.
   */
  sessionPrefixV6?: string;
  /**
   * The IPv4 session address on Microsoft's end.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly microsoftSessionIPv4Address?: string;
  /**
   * The IPv6 session address on Microsoft's end.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly microsoftSessionIPv6Address?: string;
  /**
   * The IPv4 session address on peer's end.
   */
  peerSessionIPv4Address?: string;
  /**
   * The IPv6 session address on peer's end.
   */
  peerSessionIPv6Address?: string;
  /**
   * The state of the IPv4 session. Possible values include: 'None', 'Idle', 'Connect', 'Active',
   * 'OpenSent', 'OpenConfirm', 'OpenReceived', 'Established', 'PendingAdd', 'PendingUpdate',
   * 'PendingRemove'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sessionStateV4?: SessionStateV4;
  /**
   * The state of the IPv6 session. Possible values include: 'None', 'Idle', 'Connect', 'Active',
   * 'OpenSent', 'OpenConfirm', 'OpenReceived', 'Established', 'PendingAdd', 'PendingUpdate',
   * 'PendingRemove'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sessionStateV6?: SessionStateV6;
  /**
   * The maximum number of prefixes advertised over the IPv4 session.
   */
  maxPrefixesAdvertisedV4?: number;
  /**
   * The maximum number of prefixes advertised over the IPv6 session.
   */
  maxPrefixesAdvertisedV6?: number;
  /**
   * The MD5 authentication key of the session.
   */
  md5AuthenticationKey?: string;
}

/**
 * The properties that define a direct connection.
 */
export interface DirectConnection {
  /**
   * The bandwidth of the connection.
   */
  bandwidthInMbps?: number;
  /**
   * The bandwidth that is actually provisioned.
   */
  provisionedBandwidthInMbps?: number;
  /**
   * The field indicating if Microsoft provides session ip addresses. Possible values include:
   * 'Microsoft', 'Peer'
   */
  sessionAddressProvider?: SessionAddressProvider;
  /**
   * The flag that indicates whether or not the connection is used for peering service.
   */
  useForPeeringService?: boolean;
  /**
   * The PeeringDB.com ID of the facility at which the connection has to be set up.
   */
  peeringDBFacilityId?: number;
  /**
   * The state of the connection. Possible values include: 'None', 'PendingApproval', 'Approved',
   * 'ProvisioningStarted', 'ProvisioningFailed', 'ProvisioningCompleted', 'Validating', 'Active'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly connectionState?: ConnectionState;
  /**
   * The BGP session associated with the connection.
   */
  bgpSession?: BgpSession;
  /**
   * The unique identifier (GUID) for the connection.
   */
  connectionIdentifier?: string;
}

/**
 * The sub resource.
 */
export interface SubResource {
  /**
   * The identifier of the referenced resource.
   */
  id?: string;
}

/**
 * The properties that define a direct peering.
 */
export interface PeeringPropertiesDirect {
  /**
   * The set of connections that constitute a direct peering.
   */
  connections?: DirectConnection[];
  /**
   * The flag that indicates whether or not the peering is used for peering service.
   */
  useForPeeringService?: boolean;
  /**
   * The reference of the peer ASN.
   */
  peerAsn?: SubResource;
  /**
   * The type of direct peering. Possible values include: 'Edge', 'Transit', 'Cdn', 'Internal'
   */
  directPeeringType?: DirectPeeringType;
}

/**
 * The properties that define an exchange connection.
 */
export interface ExchangeConnection {
  /**
   * The PeeringDB.com ID of the facility at which the connection has to be set up.
   */
  peeringDBFacilityId?: number;
  /**
   * The state of the connection. Possible values include: 'None', 'PendingApproval', 'Approved',
   * 'ProvisioningStarted', 'ProvisioningFailed', 'ProvisioningCompleted', 'Validating', 'Active'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly connectionState?: ConnectionState;
  /**
   * The BGP session associated with the connection.
   */
  bgpSession?: BgpSession;
  /**
   * The unique identifier (GUID) for the connection.
   */
  connectionIdentifier?: string;
}

/**
 * The properties that define an exchange peering.
 */
export interface PeeringPropertiesExchange {
  /**
   * The set of connections that constitute an exchange peering.
   */
  connections?: ExchangeConnection[];
  /**
   * The reference of the peer ASN.
   */
  peerAsn?: SubResource;
}

/**
 * The ARM resource class.
 */
export interface Resource extends BaseResource {
  /**
   * The name of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The ID of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The type of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * Peering is a logical representation of a set of connections to the Microsoft Cloud Edge at a
 * location.
 */
export interface Peering extends Resource {
  /**
   * The SKU that defines the tier and kind of the peering.
   */
  sku: PeeringSku;
  /**
   * The kind of the peering. Possible values include: 'Direct', 'Exchange'
   */
  kind: Kind;
  /**
   * The properties that define a direct peering.
   */
  direct?: PeeringPropertiesDirect;
  /**
   * The properties that define an exchange peering.
   */
  exchange?: PeeringPropertiesExchange;
  /**
   * The location of the peering.
   */
  peeringLocation?: string;
  /**
   * The provisioning state of the resource. Possible values include: 'Succeeded', 'Updating',
   * 'Deleting', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The location of the resource.
   */
  location: string;
  /**
   * The resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The information related to the operation.
 */
export interface OperationDisplayInfo {
  /**
   * The name of the resource provider.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provider?: string;
  /**
   * The type of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resource?: string;
  /**
   * The name of the operation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly operation?: string;
  /**
   * The description of the operation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly description?: string;
}

/**
 * The peering API operation.
 */
export interface Operation {
  /**
   * The name of the operation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The information related to the operation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly display?: OperationDisplayInfo;
  /**
   * The flag that indicates whether the operation applies to data plane.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isDataAction?: boolean;
}

/**
 * The contact information of the peer.
 */
export interface ContactInfo {
  /**
   * The list of email addresses.
   */
  emails?: string[];
  /**
   * The list of contact numbers.
   */
  phone?: string[];
}

/**
 * The essential information related to the peer's ASN.
 */
export interface PeerAsn extends Resource {
  /**
   * The Autonomous System Number (ASN) of the peer.
   */
  peerAsn?: number;
  /**
   * The contact information of the peer.
   */
  peerContactInfo?: ContactInfo;
  /**
   * The name of the peer.
   */
  peerName?: string;
  /**
   * The validation state of the ASN associated with the peer. Possible values include: 'None',
   * 'Pending', 'Approved', 'Failed'
   */
  validationState?: ValidationState;
}

/**
 * The properties that define a direct peering facility.
 */
export interface DirectPeeringFacility {
  /**
   * The address of the direct peering facility.
   */
  address?: string;
  /**
   * The type of the direct peering. Possible values include: 'Edge', 'Transit', 'Cdn', 'Internal'
   */
  directPeeringType?: DirectPeeringType;
  /**
   * The PeeringDB.com ID of the facility.
   */
  peeringDBFacilityId?: number;
  /**
   * The PeeringDB.com URL of the facility.
   */
  peeringDBFacilityLink?: string;
}

/**
 * The properties that define a peering bandwidth offer.
 */
export interface PeeringBandwidthOffer {
  /**
   * The name of the bandwidth offer.
   */
  offerName?: string;
  /**
   * The value of the bandwidth offer in Mbps.
   */
  valueInMbps?: number;
}

/**
 * The properties that define a direct peering location.
 */
export interface PeeringLocationPropertiesDirect {
  /**
   * The list of direct peering facilities at the peering location.
   */
  peeringFacilities?: DirectPeeringFacility[];
  /**
   * The list of bandwidth offers available at the peering location.
   */
  bandwidthOffers?: PeeringBandwidthOffer[];
}

/**
 * The properties that define an exchange peering facility.
 */
export interface ExchangePeeringFacility {
  /**
   * The name of the exchange peering facility.
   */
  exchangeName?: string;
  /**
   * The bandwidth of the connection between Microsoft and the exchange peering facility.
   */
  bandwidthInMbps?: number;
  /**
   * The IPv4 address of Microsoft at the exchange peering facility.
   */
  microsoftIPv4Address?: string;
  /**
   * The IPv6 address of Microsoft at the exchange peering facility.
   */
  microsoftIPv6Address?: string;
  /**
   * The IPv4 prefixes associated with the exchange peering facility.
   */
  facilityIPv4Prefix?: string;
  /**
   * The IPv6 prefixes associated with the exchange peering facility.
   */
  facilityIPv6Prefix?: string;
  /**
   * The PeeringDB.com ID of the facility.
   */
  peeringDBFacilityId?: number;
  /**
   * The PeeringDB.com URL of the facility.
   */
  peeringDBFacilityLink?: string;
}

/**
 * The properties that define an exchange peering location.
 */
export interface PeeringLocationPropertiesExchange {
  /**
   * The list of exchange peering facilities at the peering location.
   */
  peeringFacilities?: ExchangePeeringFacility[];
}

/**
 * Peering location is where connectivity could be established to the Microsoft Cloud Edge.
 */
export interface PeeringLocation extends Resource {
  /**
   * The kind of peering that the peering location supports. Possible values include: 'Direct',
   * 'Exchange'
   */
  kind?: Kind;
  /**
   * The properties that define a direct peering location.
   */
  direct?: PeeringLocationPropertiesDirect;
  /**
   * The properties that define an exchange peering location.
   */
  exchange?: PeeringLocationPropertiesExchange;
  /**
   * The name of the peering location.
   */
  peeringLocation?: string;
  /**
   * The country in which the peering location exists.
   */
  country?: string;
  /**
   * The Azure region associated with the peering location.
   */
  azureRegion?: string;
}

/**
 * The resource tags.
 */
export interface ResourceTags {
  /**
   * Gets or sets the tags, a dictionary of descriptors arm object
   */
  tags?: { [propertyName: string]: string };
}

/**
 * PeeringService location
 */
export interface PeeringServiceLocation extends Resource {
  /**
   * Country of the customer
   */
  country?: string;
  /**
   * State of the customer
   */
  state?: string;
  /**
   * Azure region for the location
   */
  azureRegion?: string;
}

/**
 * The peering service prefix class.
 */
export interface PeeringServicePrefix extends Resource {
  /**
   * Valid route prefix
   */
  prefix?: string;
  /**
   * The prefix validation state. Possible values include: 'None', 'Invalid', 'Verified', 'Failed',
   * 'Pending', 'Unknown'
   */
  prefixValidationState?: PrefixValidationState;
  /**
   * The prefix learned type. Possible values include: 'None', 'ViaPartner', 'ViaSession'
   */
  learnedType?: LearnedType;
  /**
   * The provisioning state of the resource. Possible values include: 'Succeeded', 'Updating',
   * 'Deleting', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
}

/**
 * PeeringService provider
 */
export interface PeeringServiceProvider extends Resource {
  /**
   * The name of the service provider.
   */
  serviceProviderName?: string;
}

/**
 * Peering Service
 */
export interface PeeringService extends Resource {
  /**
   * The PeeringServiceLocation of the Customer.
   */
  peeringServiceLocation?: string;
  /**
   * The MAPS Provider Name.
   */
  peeringServiceProvider?: string;
  /**
   * The provisioning state of the resource. Possible values include: 'Succeeded', 'Updating',
   * 'Deleting', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The location of the resource.
   */
  location: string;
  /**
   * The resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The error response that indicates why an operation has failed.
 */
export interface ErrorResponse {
  /**
   * The error code.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly code?: string;
  /**
   * The error message.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
}

/**
 * Optional Parameters.
 */
export interface PeeringManagementClientCheckServiceProviderAvailabilityOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Gets or sets the PeeringServiceLocation
   */
  peeringServiceLocation?: string;
  /**
   * Gets or sets the PeeringServiceProvider
   */
  peeringServiceProvider?: string;
}

/**
 * Optional Parameters.
 */
export interface PeeringLocationsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The type of direct peering. Possible values include: 'Edge', 'Transit', 'Cdn', 'Internal'
   */
  directPeeringType?: DirectPeeringType1;
}

/**
 * Optional Parameters.
 */
export interface PeeringsUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Gets or sets the tags, a dictionary of descriptors arm object
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Optional Parameters.
 */
export interface PeeringServicesUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Gets or sets the tags, a dictionary of descriptors arm object
   */
  tags?: { [propertyName: string]: string };
}

/**
 * An interface representing PeeringManagementClientOptions.
 */
export interface PeeringManagementClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * @interface
 * The paginated list of peerings.
 * @extends Array<Peering>
 */
export interface PeeringListResult extends Array<Peering> {
  /**
   * The link to fetch the next page of peerings.
   */
  nextLink?: string;
}

/**
 * @interface
 * The paginated list of peering API operations.
 * @extends Array<Operation>
 */
export interface OperationListResult extends Array<Operation> {
  /**
   * The link to fetch the next page of peering API operations.
   */
  nextLink?: string;
}

/**
 * @interface
 * The paginated list of peer ASNs.
 * @extends Array<PeerAsn>
 */
export interface PeerAsnListResult extends Array<PeerAsn> {
  /**
   * The link to fetch the next page of peer ASNs.
   */
  nextLink?: string;
}

/**
 * @interface
 * The paginated list of peering locations.
 * @extends Array<PeeringLocation>
 */
export interface PeeringLocationListResult extends Array<PeeringLocation> {
  /**
   * The link to fetch the next page of peering locations.
   */
  nextLink?: string;
}

/**
 * @interface
 * The paginated list of peering service locations.
 * @extends Array<PeeringServiceLocation>
 */
export interface PeeringServiceLocationListResult extends Array<PeeringServiceLocation> {
  /**
   * The link to fetch the next page of peering service locations.
   */
  nextLink?: string;
}

/**
 * @interface
 * The paginated list of [T].
 * @extends Array<PeeringServicePrefix>
 */
export interface PeeringServicePrefixListResult extends Array<PeeringServicePrefix> {
  /**
   * The link to fetch the next page of [T].
   */
  nextLink?: string;
}

/**
 * @interface
 * The paginated list of peering service providers.
 * @extends Array<PeeringServiceProvider>
 */
export interface PeeringServiceProviderListResult extends Array<PeeringServiceProvider> {
  /**
   * The link to fetch the next page of peering service providers.
   */
  nextLink?: string;
}

/**
 * @interface
 * The paginated list of peering services.
 * @extends Array<PeeringService>
 */
export interface PeeringServiceListResult extends Array<PeeringService> {
  /**
   * The link to fetch the next page of peering services.
   */
  nextLink?: string;
}

/**
 * Defines values for Name.
 * Possible values include: 'Basic_Exchange_Free', 'Basic_Direct_Free', 'Premium_Direct_Free',
 * 'Premium_Exchange_Metered', 'Premium_Direct_Metered', 'Premium_Direct_Unlimited'
 * @readonly
 * @enum {string}
 */
export type Name = 'Basic_Exchange_Free' | 'Basic_Direct_Free' | 'Premium_Direct_Free' | 'Premium_Exchange_Metered' | 'Premium_Direct_Metered' | 'Premium_Direct_Unlimited';

/**
 * Defines values for Tier.
 * Possible values include: 'Basic', 'Premium'
 * @readonly
 * @enum {string}
 */
export type Tier = 'Basic' | 'Premium';

/**
 * Defines values for Family.
 * Possible values include: 'Direct', 'Exchange'
 * @readonly
 * @enum {string}
 */
export type Family = 'Direct' | 'Exchange';

/**
 * Defines values for Size.
 * Possible values include: 'Free', 'Metered', 'Unlimited'
 * @readonly
 * @enum {string}
 */
export type Size = 'Free' | 'Metered' | 'Unlimited';

/**
 * Defines values for Kind.
 * Possible values include: 'Direct', 'Exchange'
 * @readonly
 * @enum {string}
 */
export type Kind = 'Direct' | 'Exchange';

/**
 * Defines values for SessionAddressProvider.
 * Possible values include: 'Microsoft', 'Peer'
 * @readonly
 * @enum {string}
 */
export type SessionAddressProvider = 'Microsoft' | 'Peer';

/**
 * Defines values for ConnectionState.
 * Possible values include: 'None', 'PendingApproval', 'Approved', 'ProvisioningStarted',
 * 'ProvisioningFailed', 'ProvisioningCompleted', 'Validating', 'Active'
 * @readonly
 * @enum {string}
 */
export type ConnectionState = 'None' | 'PendingApproval' | 'Approved' | 'ProvisioningStarted' | 'ProvisioningFailed' | 'ProvisioningCompleted' | 'Validating' | 'Active';

/**
 * Defines values for SessionStateV4.
 * Possible values include: 'None', 'Idle', 'Connect', 'Active', 'OpenSent', 'OpenConfirm',
 * 'OpenReceived', 'Established', 'PendingAdd', 'PendingUpdate', 'PendingRemove'
 * @readonly
 * @enum {string}
 */
export type SessionStateV4 = 'None' | 'Idle' | 'Connect' | 'Active' | 'OpenSent' | 'OpenConfirm' | 'OpenReceived' | 'Established' | 'PendingAdd' | 'PendingUpdate' | 'PendingRemove';

/**
 * Defines values for SessionStateV6.
 * Possible values include: 'None', 'Idle', 'Connect', 'Active', 'OpenSent', 'OpenConfirm',
 * 'OpenReceived', 'Established', 'PendingAdd', 'PendingUpdate', 'PendingRemove'
 * @readonly
 * @enum {string}
 */
export type SessionStateV6 = 'None' | 'Idle' | 'Connect' | 'Active' | 'OpenSent' | 'OpenConfirm' | 'OpenReceived' | 'Established' | 'PendingAdd' | 'PendingUpdate' | 'PendingRemove';

/**
 * Defines values for DirectPeeringType.
 * Possible values include: 'Edge', 'Transit', 'Cdn', 'Internal'
 * @readonly
 * @enum {string}
 */
export type DirectPeeringType = 'Edge' | 'Transit' | 'Cdn' | 'Internal';

/**
 * Defines values for ProvisioningState.
 * Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
 * @readonly
 * @enum {string}
 */
export type ProvisioningState = 'Succeeded' | 'Updating' | 'Deleting' | 'Failed';

/**
 * Defines values for ValidationState.
 * Possible values include: 'None', 'Pending', 'Approved', 'Failed'
 * @readonly
 * @enum {string}
 */
export type ValidationState = 'None' | 'Pending' | 'Approved' | 'Failed';

/**
 * Defines values for PrefixValidationState.
 * Possible values include: 'None', 'Invalid', 'Verified', 'Failed', 'Pending', 'Unknown'
 * @readonly
 * @enum {string}
 */
export type PrefixValidationState = 'None' | 'Invalid' | 'Verified' | 'Failed' | 'Pending' | 'Unknown';

/**
 * Defines values for LearnedType.
 * Possible values include: 'None', 'ViaPartner', 'ViaSession'
 * @readonly
 * @enum {string}
 */
export type LearnedType = 'None' | 'ViaPartner' | 'ViaSession';

/**
 * Defines values for DirectPeeringType1.
 * Possible values include: 'Edge', 'Transit', 'Cdn', 'Internal'
 * @readonly
 * @enum {string}
 */
export type DirectPeeringType1 = 'Edge' | 'Transit' | 'Cdn' | 'Internal';

/**
 * Defines values for CheckServiceProviderAvailabilityOKResponse.
 * Possible values include: 'Available', 'UnAvailable'
 * @readonly
 * @enum {string}
 */
export type CheckServiceProviderAvailabilityOKResponse = 'Available' | 'UnAvailable';

/**
 * Defines values for Kind1.
 * Possible values include: 'Direct', 'Exchange'
 * @readonly
 * @enum {string}
 */
export type Kind1 = 'Direct' | 'Exchange';

/**
 * Defines values for Kind2.
 * Possible values include: 'Direct', 'Exchange'
 * @readonly
 * @enum {string}
 */
export type Kind2 = 'Direct' | 'Exchange';

/**
 * Contains response data for the checkServiceProviderAvailability operation.
 */
export type CheckServiceProviderAvailabilityResponse = {
  /**
   * The parsed response body.
   */
  body: CheckServiceProviderAvailabilityOKResponse;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CheckServiceProviderAvailabilityOKResponse;
    };
};

/**
 * Contains response data for the list operation.
 */
export type LegacyPeeringsListResponse = PeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeeringListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type LegacyPeeringsListNextResponse = PeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeeringListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PeerAsnsGetResponse = PeerAsn & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeerAsn;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PeerAsnsCreateOrUpdateResponse = PeerAsn & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeerAsn;
    };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type PeerAsnsListBySubscriptionResponse = PeerAsnListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeerAsnListResult;
    };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type PeerAsnsListBySubscriptionNextResponse = PeerAsnListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeerAsnListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type PeeringLocationsListResponse = PeeringLocationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeeringLocationListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type PeeringLocationsListNextResponse = PeeringLocationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeeringLocationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PeeringsGetResponse = Peering & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Peering;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PeeringsCreateOrUpdateResponse = Peering & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Peering;
    };
};

/**
 * Contains response data for the update operation.
 */
export type PeeringsUpdateResponse = Peering & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Peering;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type PeeringsListByResourceGroupResponse = PeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeeringListResult;
    };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type PeeringsListBySubscriptionResponse = PeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeeringListResult;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type PeeringsListByResourceGroupNextResponse = PeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeeringListResult;
    };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type PeeringsListBySubscriptionNextResponse = PeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeeringListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type PeeringServiceLocationsListResponse = PeeringServiceLocationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeeringServiceLocationListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type PeeringServiceLocationsListNextResponse = PeeringServiceLocationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeeringServiceLocationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PeeringServicePrefixesGetResponse = PeeringServicePrefix & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeeringServicePrefix;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PeeringServicePrefixesCreateOrUpdateResponse = PeeringServicePrefix & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeeringServicePrefix;
    };
};

/**
 * Contains response data for the listByPeeringService operation.
 */
export type PrefixesListByPeeringServiceResponse = PeeringServicePrefixListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeeringServicePrefixListResult;
    };
};

/**
 * Contains response data for the listByPeeringServiceNext operation.
 */
export type PrefixesListByPeeringServiceNextResponse = PeeringServicePrefixListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeeringServicePrefixListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type PeeringServiceProvidersListResponse = PeeringServiceProviderListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeeringServiceProviderListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type PeeringServiceProvidersListNextResponse = PeeringServiceProviderListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeeringServiceProviderListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PeeringServicesGetResponse = PeeringService & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeeringService;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PeeringServicesCreateOrUpdateResponse = PeeringService & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeeringService;
    };
};

/**
 * Contains response data for the update operation.
 */
export type PeeringServicesUpdateResponse = PeeringService & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeeringService;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type PeeringServicesListByResourceGroupResponse = PeeringServiceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeeringServiceListResult;
    };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type PeeringServicesListBySubscriptionResponse = PeeringServiceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeeringServiceListResult;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type PeeringServicesListByResourceGroupNextResponse = PeeringServiceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeeringServiceListResult;
    };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type PeeringServicesListBySubscriptionNextResponse = PeeringServiceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PeeringServiceListResult;
    };
};
