/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  CheckServiceProviderAvailabilityInput as CheckServiceProviderAvailabilityInputMapper,
  PeerAsn as PeerAsnMapper,
  Peering as PeeringMapper,
  ResourceTags as ResourceTagsMapper,
  PeeringServicePrefix as PeeringServicePrefixMapper,
  PeeringService as PeeringServiceMapper
} from "../models/mappers";

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const checkServiceProviderAvailabilityInput: OperationParameter = {
  parameterPath: "checkServiceProviderAvailabilityInput",
  mapper: CheckServiceProviderAvailabilityInputMapper
};

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2019-08-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const peeringLocation: OperationQueryParameter = {
  parameterPath: "peeringLocation",
  mapper: {
    serializedName: "peeringLocation",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const kind: OperationQueryParameter = {
  parameterPath: "kind",
  mapper: {
    serializedName: "kind",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const peerAsnName: OperationURLParameter = {
  parameterPath: "peerAsnName",
  mapper: {
    serializedName: "peerAsnName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const peerAsn: OperationParameter = {
  parameterPath: "peerAsn",
  mapper: PeerAsnMapper
};

export const kind1: OperationQueryParameter = {
  parameterPath: "kind",
  mapper: {
    serializedName: "kind",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const directPeeringType: OperationQueryParameter = {
  parameterPath: ["options", "directPeeringType"],
  mapper: {
    serializedName: "directPeeringType",
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const peeringName: OperationURLParameter = {
  parameterPath: "peeringName",
  mapper: {
    serializedName: "peeringName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const peering: OperationParameter = {
  parameterPath: "peering",
  mapper: PeeringMapper
};

export const tags: OperationParameter = {
  parameterPath: "tags",
  mapper: ResourceTagsMapper
};

export const peeringServiceName: OperationURLParameter = {
  parameterPath: "peeringServiceName",
  mapper: {
    serializedName: "peeringServiceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const prefixName: OperationURLParameter = {
  parameterPath: "prefixName",
  mapper: {
    serializedName: "prefixName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const peeringServicePrefix: OperationParameter = {
  parameterPath: "peeringServicePrefix",
  mapper: PeeringServicePrefixMapper
};

export const peeringService: OperationParameter = {
  parameterPath: "peeringService",
  mapper: PeeringServiceMapper
};
