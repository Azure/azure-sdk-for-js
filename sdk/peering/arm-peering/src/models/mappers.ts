/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const CdnPeeringPrefixListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CdnPeeringPrefixListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CdnPeeringPrefix"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckServiceProviderAvailabilityInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckServiceProviderAvailabilityInput",
    modelProperties: {
      peeringServiceLocation: {
        serializedName: "peeringServiceLocation",
        type: {
          name: "String"
        }
      },
      peeringServiceProvider: {
        serializedName: "peeringServiceProvider",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeeringListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Peering"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeeringSku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "size",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringPropertiesDirect: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeeringPropertiesDirect",
    modelProperties: {
      connections: {
        serializedName: "connections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DirectConnection"
            }
          }
        }
      },
      useForPeeringService: {
        serializedName: "useForPeeringService",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      peerAsn: {
        serializedName: "peerAsn",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      directPeeringType: {
        serializedName: "directPeeringType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DirectConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DirectConnection",
    modelProperties: {
      bandwidthInMbps: {
        serializedName: "bandwidthInMbps",
        type: {
          name: "Number"
        }
      },
      provisionedBandwidthInMbps: {
        serializedName: "provisionedBandwidthInMbps",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      sessionAddressProvider: {
        serializedName: "sessionAddressProvider",
        type: {
          name: "String"
        }
      },
      useForPeeringService: {
        serializedName: "useForPeeringService",
        type: {
          name: "Boolean"
        }
      },
      microsoftTrackingId: {
        serializedName: "microsoftTrackingId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      peeringDBFacilityId: {
        serializedName: "peeringDBFacilityId",
        type: {
          name: "Number"
        }
      },
      connectionState: {
        serializedName: "connectionState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      bgpSession: {
        serializedName: "bgpSession",
        type: {
          name: "Composite",
          className: "BgpSession"
        }
      },
      connectionIdentifier: {
        serializedName: "connectionIdentifier",
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BgpSession: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BgpSession",
    modelProperties: {
      sessionPrefixV4: {
        serializedName: "sessionPrefixV4",
        type: {
          name: "String"
        }
      },
      sessionPrefixV6: {
        serializedName: "sessionPrefixV6",
        type: {
          name: "String"
        }
      },
      microsoftSessionIPv4Address: {
        serializedName: "microsoftSessionIPv4Address",
        type: {
          name: "String"
        }
      },
      microsoftSessionIPv6Address: {
        serializedName: "microsoftSessionIPv6Address",
        type: {
          name: "String"
        }
      },
      peerSessionIPv4Address: {
        serializedName: "peerSessionIPv4Address",
        type: {
          name: "String"
        }
      },
      peerSessionIPv6Address: {
        serializedName: "peerSessionIPv6Address",
        type: {
          name: "String"
        }
      },
      sessionStateV4: {
        serializedName: "sessionStateV4",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sessionStateV6: {
        serializedName: "sessionStateV6",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      maxPrefixesAdvertisedV4: {
        serializedName: "maxPrefixesAdvertisedV4",
        type: {
          name: "Number"
        }
      },
      maxPrefixesAdvertisedV6: {
        serializedName: "maxPrefixesAdvertisedV6",
        type: {
          name: "Number"
        }
      },
      md5AuthenticationKey: {
        serializedName: "md5AuthenticationKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubResource",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringPropertiesExchange: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeeringPropertiesExchange",
    modelProperties: {
      connections: {
        serializedName: "connections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExchangeConnection"
            }
          }
        }
      },
      peerAsn: {
        serializedName: "peerAsn",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      }
    }
  }
};

export const ExchangeConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExchangeConnection",
    modelProperties: {
      peeringDBFacilityId: {
        serializedName: "peeringDBFacilityId",
        type: {
          name: "Number"
        }
      },
      connectionState: {
        serializedName: "connectionState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      bgpSession: {
        serializedName: "bgpSession",
        type: {
          name: "Composite",
          className: "BgpSession"
        }
      },
      connectionIdentifier: {
        serializedName: "connectionIdentifier",
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LookingGlassOutput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LookingGlassOutput",
    modelProperties: {
      command: {
        serializedName: "command",
        type: {
          name: "String"
        }
      },
      output: {
        serializedName: "output",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplayInfo"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      serviceSpecification: {
        serializedName: "properties.serviceSpecification",
        type: {
          name: "Composite",
          className: "ServiceSpecification"
        }
      }
    }
  }
};

export const OperationDisplayInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplayInfo",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceSpecification",
    modelProperties: {
      metricSpecifications: {
        serializedName: "metricSpecifications",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricSpecification"
            }
          }
        }
      }
    }
  }
};

export const MetricSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayDescription: {
        serializedName: "displayDescription",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      aggregationType: {
        serializedName: "aggregationType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      supportedTimeGrainTypes: {
        serializedName: "supportedTimeGrainTypes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      dimensions: {
        serializedName: "dimensions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricDimension"
            }
          }
        }
      }
    }
  }
};

export const MetricDimension: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricDimension",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContactDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContactDetail",
    modelProperties: {
      role: {
        serializedName: "role",
        type: {
          name: "String"
        }
      },
      email: {
        serializedName: "email",
        type: {
          name: "String"
        }
      },
      phone: {
        serializedName: "phone",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeerAsnListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeerAsnListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PeerAsn"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringLocationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeeringLocationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PeeringLocation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringLocationPropertiesDirect: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeeringLocationPropertiesDirect",
    modelProperties: {
      peeringFacilities: {
        serializedName: "peeringFacilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DirectPeeringFacility"
            }
          }
        }
      },
      bandwidthOffers: {
        serializedName: "bandwidthOffers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PeeringBandwidthOffer"
            }
          }
        }
      }
    }
  }
};

export const DirectPeeringFacility: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DirectPeeringFacility",
    modelProperties: {
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      },
      directPeeringType: {
        serializedName: "directPeeringType",
        type: {
          name: "String"
        }
      },
      peeringDBFacilityId: {
        serializedName: "peeringDBFacilityId",
        type: {
          name: "Number"
        }
      },
      peeringDBFacilityLink: {
        serializedName: "peeringDBFacilityLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringBandwidthOffer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeeringBandwidthOffer",
    modelProperties: {
      offerName: {
        serializedName: "offerName",
        type: {
          name: "String"
        }
      },
      valueInMbps: {
        serializedName: "valueInMbps",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PeeringLocationPropertiesExchange: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeeringLocationPropertiesExchange",
    modelProperties: {
      peeringFacilities: {
        serializedName: "peeringFacilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExchangePeeringFacility"
            }
          }
        }
      }
    }
  }
};

export const ExchangePeeringFacility: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExchangePeeringFacility",
    modelProperties: {
      exchangeName: {
        serializedName: "exchangeName",
        type: {
          name: "String"
        }
      },
      bandwidthInMbps: {
        serializedName: "bandwidthInMbps",
        type: {
          name: "Number"
        }
      },
      microsoftIPv4Address: {
        serializedName: "microsoftIPv4Address",
        type: {
          name: "String"
        }
      },
      microsoftIPv6Address: {
        serializedName: "microsoftIPv6Address",
        type: {
          name: "String"
        }
      },
      facilityIPv4Prefix: {
        serializedName: "facilityIPv4Prefix",
        type: {
          name: "String"
        }
      },
      facilityIPv6Prefix: {
        serializedName: "facilityIPv6Prefix",
        type: {
          name: "String"
        }
      },
      peeringDBFacilityId: {
        serializedName: "peeringDBFacilityId",
        type: {
          name: "Number"
        }
      },
      peeringDBFacilityLink: {
        serializedName: "peeringDBFacilityLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringRegisteredAsnListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeeringRegisteredAsnListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PeeringRegisteredAsn"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringRegisteredPrefixListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeeringRegisteredPrefixListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PeeringRegisteredPrefix"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceTags: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceTags",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const PeeringReceivedRouteListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeeringReceivedRouteListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PeeringReceivedRoute"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringReceivedRoute: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeeringReceivedRoute",
    modelProperties: {
      prefix: {
        serializedName: "prefix",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nextHop: {
        serializedName: "nextHop",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      asPath: {
        serializedName: "asPath",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      originAsValidationState: {
        serializedName: "originAsValidationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      rpkiValidationState: {
        serializedName: "rpkiValidationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      trustAnchor: {
        serializedName: "trustAnchor",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      receivedTimestamp: {
        serializedName: "receivedTimestamp",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionMonitorTestListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorTestListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionMonitorTest"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringServiceCountryListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeeringServiceCountryListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PeeringServiceCountry"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringServiceLocationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeeringServiceLocationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PeeringServiceLocation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringServicePrefixEvent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeeringServicePrefixEvent",
    modelProperties: {
      eventTimestamp: {
        serializedName: "eventTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      eventType: {
        serializedName: "eventType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eventSummary: {
        serializedName: "eventSummary",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eventLevel: {
        serializedName: "eventLevel",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eventDescription: {
        serializedName: "eventDescription",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringServicePrefixListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeeringServicePrefixListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PeeringServicePrefix"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringServiceProviderListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeeringServiceProviderListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PeeringServiceProvider"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringServiceSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeeringServiceSku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LogAnalyticsWorkspaceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogAnalyticsWorkspaceProperties",
    modelProperties: {
      workspaceID: {
        serializedName: "workspaceID",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      key: {
        serializedName: "key",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      connectedAgents: {
        serializedName: "connectedAgents",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const PeeringServiceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeeringServiceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PeeringService"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CdnPeeringPrefix: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CdnPeeringPrefix",
    modelProperties: {
      ...Resource.type.modelProperties,
      prefix: {
        serializedName: "properties.prefix",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      azureRegion: {
        serializedName: "properties.azureRegion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      azureService: {
        serializedName: "properties.azureService",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isPrimaryRegion: {
        serializedName: "properties.isPrimaryRegion",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      bgpCommunity: {
        serializedName: "properties.bgpCommunity",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Peering: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Peering",
    modelProperties: {
      ...Resource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "PeeringSku"
        }
      },
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      direct: {
        serializedName: "properties.direct",
        type: {
          name: "Composite",
          className: "PeeringPropertiesDirect"
        }
      },
      exchange: {
        serializedName: "properties.exchange",
        type: {
          name: "Composite",
          className: "PeeringPropertiesExchange"
        }
      },
      peeringLocation: {
        serializedName: "properties.peeringLocation",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeerAsn: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeerAsn",
    modelProperties: {
      ...Resource.type.modelProperties,
      peerAsn: {
        serializedName: "properties.peerAsn",
        type: {
          name: "Number"
        }
      },
      peerContactDetail: {
        serializedName: "properties.peerContactDetail",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContactDetail"
            }
          }
        }
      },
      peerName: {
        serializedName: "properties.peerName",
        type: {
          name: "String"
        }
      },
      validationState: {
        serializedName: "properties.validationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "properties.errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeeringLocation",
    modelProperties: {
      ...Resource.type.modelProperties,
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      direct: {
        serializedName: "properties.direct",
        type: {
          name: "Composite",
          className: "PeeringLocationPropertiesDirect"
        }
      },
      exchange: {
        serializedName: "properties.exchange",
        type: {
          name: "Composite",
          className: "PeeringLocationPropertiesExchange"
        }
      },
      peeringLocation: {
        serializedName: "properties.peeringLocation",
        type: {
          name: "String"
        }
      },
      country: {
        serializedName: "properties.country",
        type: {
          name: "String"
        }
      },
      azureRegion: {
        serializedName: "properties.azureRegion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringRegisteredAsn: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeeringRegisteredAsn",
    modelProperties: {
      ...Resource.type.modelProperties,
      asn: {
        serializedName: "properties.asn",
        type: {
          name: "Number"
        }
      },
      peeringServicePrefixKey: {
        serializedName: "properties.peeringServicePrefixKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringRegisteredPrefix: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeeringRegisteredPrefix",
    modelProperties: {
      ...Resource.type.modelProperties,
      prefix: {
        serializedName: "properties.prefix",
        type: {
          name: "String"
        }
      },
      prefixValidationState: {
        serializedName: "properties.prefixValidationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      peeringServicePrefixKey: {
        serializedName: "properties.peeringServicePrefixKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "properties.errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionMonitorTest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionMonitorTest",
    modelProperties: {
      ...Resource.type.modelProperties,
      sourceAgent: {
        serializedName: "properties.sourceAgent",
        type: {
          name: "String"
        }
      },
      destination: {
        serializedName: "properties.destination",
        type: {
          name: "String"
        }
      },
      destinationPort: {
        serializedName: "properties.destinationPort",
        type: {
          name: "Number"
        }
      },
      testFrequencyInSec: {
        serializedName: "properties.testFrequencyInSec",
        type: {
          name: "Number"
        }
      },
      isTestSuccessful: {
        serializedName: "properties.isTestSuccessful",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      path: {
        serializedName: "properties.path",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringServiceCountry: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeeringServiceCountry",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const PeeringServiceLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeeringServiceLocation",
    modelProperties: {
      ...Resource.type.modelProperties,
      country: {
        serializedName: "properties.country",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      azureRegion: {
        serializedName: "properties.azureRegion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringServicePrefix: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeeringServicePrefix",
    modelProperties: {
      ...Resource.type.modelProperties,
      prefix: {
        serializedName: "properties.prefix",
        type: {
          name: "String"
        }
      },
      prefixValidationState: {
        serializedName: "properties.prefixValidationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      learnedType: {
        serializedName: "properties.learnedType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "properties.errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      events: {
        serializedName: "properties.events",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PeeringServicePrefixEvent"
            }
          }
        }
      },
      peeringServicePrefixKey: {
        serializedName: "properties.peeringServicePrefixKey",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeeringServiceProvider: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeeringServiceProvider",
    modelProperties: {
      ...Resource.type.modelProperties,
      serviceProviderName: {
        serializedName: "properties.serviceProviderName",
        type: {
          name: "String"
        }
      },
      peeringLocations: {
        serializedName: "properties.peeringLocations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const PeeringService: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeeringService",
    modelProperties: {
      ...Resource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "PeeringServiceSku"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      peeringServiceLocation: {
        serializedName: "properties.peeringServiceLocation",
        type: {
          name: "String"
        }
      },
      peeringServiceProvider: {
        serializedName: "properties.peeringServiceProvider",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      providerPrimaryPeeringLocation: {
        serializedName: "properties.providerPrimaryPeeringLocation",
        type: {
          name: "String"
        }
      },
      providerBackupPeeringLocation: {
        serializedName: "properties.providerBackupPeeringLocation",
        type: {
          name: "String"
        }
      },
      logAnalyticsWorkspaceProperties: {
        serializedName: "properties.logAnalyticsWorkspaceProperties",
        type: {
          name: "Composite",
          className: "LogAnalyticsWorkspaceProperties"
        }
      }
    }
  }
};
