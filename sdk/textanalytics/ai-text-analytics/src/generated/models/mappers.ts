/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const AnalyzeAction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalyzeAction",
    uberParent: "AnalyzeAction",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AnalyzeTextTaskResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalyzeTextTaskResult",
    uberParent: "AnalyzeTextTaskResult",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      }
    }
  }
};

export const ErrorModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorModel",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorModel"
            }
          }
        }
      },
      innererror: {
        serializedName: "innererror",
        type: {
          name: "Composite",
          className: "InnerErrorModel"
        }
      }
    }
  }
};

export const InnerErrorModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InnerErrorModel",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      innererror: {
        serializedName: "innererror",
        type: {
          name: "Composite",
          className: "InnerErrorModel"
        }
      }
    }
  }
};

export const AnalyzeTextJobsInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalyzeTextJobsInput",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      analysisInput: {
        serializedName: "analysisInput",
        type: {
          name: "Composite",
          className: "MultiLanguageAnalysisInput"
        }
      },
      tasks: {
        serializedName: "tasks",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AnalyzeBatchAction"
            }
          }
        }
      }
    }
  }
};

export const MultiLanguageAnalysisInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MultiLanguageAnalysisInput",
    modelProperties: {
      documents: {
        serializedName: "documents",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TextDocumentInput"
            }
          }
        }
      }
    }
  }
};

export const TextDocumentInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TextDocumentInput",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      text: {
        serializedName: "text",
        required: true,
        type: {
          name: "String"
        }
      },
      language: {
        serializedName: "language",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaskIdentifier: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskIdentifier",
    modelProperties: {
      taskName: {
        serializedName: "taskName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobState",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      createdDateTime: {
        serializedName: "createdDateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      expirationDateTime: {
        serializedName: "expirationDateTime",
        type: {
          name: "DateTime"
        }
      },
      jobId: {
        serializedName: "jobId",
        required: true,
        type: {
          name: "Uuid"
        }
      },
      lastUpdateDateTime: {
        serializedName: "lastUpdateDateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "notStarted",
            "running",
            "succeeded",
            "partiallySucceeded",
            "failed",
            "cancelled",
            "cancelling"
          ]
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorModel"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TasksState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TasksState",
    modelProperties: {
      tasks: {
        serializedName: "tasks",
        type: {
          name: "Composite",
          className: "TasksStateTasks"
        }
      }
    }
  }
};

export const TasksStateTasks: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TasksStateTasks",
    modelProperties: {
      completed: {
        serializedName: "completed",
        required: true,
        type: {
          name: "Number"
        }
      },
      failed: {
        serializedName: "failed",
        required: true,
        type: {
          name: "Number"
        }
      },
      inProgress: {
        serializedName: "inProgress",
        required: true,
        type: {
          name: "Number"
        }
      },
      total: {
        serializedName: "total",
        required: true,
        type: {
          name: "Number"
        }
      },
      items: {
        serializedName: "items",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AnalyzeTextLROResult"
            }
          }
        }
      }
    }
  }
};

export const TaskState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskState",
    modelProperties: {
      lastUpdateDateTime: {
        serializedName: "lastUpdateDateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "notStarted",
            "running",
            "succeeded",
            "partiallySucceeded",
            "failed",
            "cancelled",
            "cancelling"
          ]
        }
      }
    }
  }
};

export const AnalyzeTextJobStatistics: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalyzeTextJobStatistics",
    modelProperties: {
      statistics: {
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "TextDocumentBatchStatistics"
        }
      }
    }
  }
};

export const TextDocumentBatchStatistics: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TextDocumentBatchStatistics",
    modelProperties: {
      documentCount: {
        serializedName: "documentsCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      validDocumentCount: {
        serializedName: "validDocumentsCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      erroneousDocumentCount: {
        serializedName: "erroneousDocumentsCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      transactionCount: {
        serializedName: "transactionsCount",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const LanguageDetectionAnalysisInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LanguageDetectionAnalysisInput",
    modelProperties: {
      documents: {
        serializedName: "documents",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LanguageDetectionInput"
            }
          }
        }
      }
    }
  }
};

export const LanguageDetectionInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LanguageDetectionInput",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      text: {
        serializedName: "text",
        required: true,
        type: {
          name: "String"
        }
      },
      countryHint: {
        serializedName: "countryHint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ActionCommon: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ActionCommon",
    modelProperties: {
      disableServiceLogs: {
        defaultValue: false,
        serializedName: "loggingOptOut",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const PreBuiltResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PreBuiltResult",
    modelProperties: {
      errors: {
        serializedName: "errors",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentError"
            }
          }
        }
      },
      statistics: {
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "TextDocumentBatchStatistics"
        }
      },
      modelVersion: {
        serializedName: "modelVersion",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DocumentError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentError",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      }
    }
  }
};

export const CustomResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomResult",
    modelProperties: {
      errors: {
        serializedName: "errors",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentError"
            }
          }
        }
      },
      statistics: {
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "TextDocumentBatchStatistics"
        }
      },
      projectName: {
        serializedName: "projectName",
        required: true,
        type: {
          name: "String"
        }
      },
      deploymentName: {
        serializedName: "deploymentName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Entity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Entity",
    modelProperties: {
      text: {
        serializedName: "text",
        required: true,
        type: {
          name: "String"
        }
      },
      category: {
        serializedName: "category",
        required: true,
        type: {
          name: "String"
        }
      },
      subCategory: {
        serializedName: "subcategory",
        type: {
          name: "String"
        }
      },
      offset: {
        serializedName: "offset",
        required: true,
        type: {
          name: "Number"
        }
      },
      length: {
        serializedName: "length",
        required: true,
        type: {
          name: "Number"
        }
      },
      confidenceScore: {
        serializedName: "confidenceScore",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DocumentResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentResult",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      warnings: {
        serializedName: "warnings",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentWarning"
            }
          }
        }
      },
      statistics: {
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "TextDocumentStatistics"
        }
      }
    }
  }
};

export const DocumentWarning: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentWarning",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TextDocumentStatistics: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TextDocumentStatistics",
    modelProperties: {
      characterCount: {
        serializedName: "charactersCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      transactionCount: {
        serializedName: "transactionsCount",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ClassificationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClassificationResult",
    modelProperties: {
      category: {
        serializedName: "category",
        required: true,
        type: {
          name: "String"
        }
      },
      confidenceScore: {
        serializedName: "confidenceScore",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const HealthcareEntity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthcareEntity",
    modelProperties: {
      text: {
        serializedName: "text",
        required: true,
        type: {
          name: "String"
        }
      },
      category: {
        serializedName: "category",
        required: true,
        type: {
          name: "String"
        }
      },
      subcategory: {
        serializedName: "subcategory",
        type: {
          name: "String"
        }
      },
      offset: {
        serializedName: "offset",
        required: true,
        type: {
          name: "Number"
        }
      },
      length: {
        serializedName: "length",
        required: true,
        type: {
          name: "Number"
        }
      },
      confidenceScore: {
        serializedName: "confidenceScore",
        required: true,
        type: {
          name: "Number"
        }
      },
      assertion: {
        serializedName: "assertion",
        type: {
          name: "Composite",
          className: "HealthcareAssertion"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      links: {
        serializedName: "links",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthcareEntityLink"
            }
          }
        }
      }
    }
  }
};

export const HealthcareAssertion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthcareAssertion",
    modelProperties: {
      conditionality: {
        serializedName: "conditionality",
        type: {
          name: "Enum",
          allowedValues: ["hypothetical", "conditional"]
        }
      },
      certainty: {
        serializedName: "certainty",
        type: {
          name: "Enum",
          allowedValues: [
            "positive",
            "positivePossible",
            "neutralPossible",
            "negativePossible",
            "negative"
          ]
        }
      },
      association: {
        serializedName: "association",
        type: {
          name: "Enum",
          allowedValues: ["subject", "other"]
        }
      }
    }
  }
};

export const HealthcareEntityLink: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthcareEntityLink",
    modelProperties: {
      dataSource: {
        serializedName: "dataSource",
        required: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HealthcareRelation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthcareRelation",
    modelProperties: {
      relationType: {
        serializedName: "relationType",
        required: true,
        type: {
          name: "String"
        }
      },
      entities: {
        serializedName: "entities",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthcareRelationEntity"
            }
          }
        }
      }
    }
  }
};

export const HealthcareRelationEntity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthcareRelationEntity",
    modelProperties: {
      ref: {
        serializedName: "ref",
        required: true,
        type: {
          name: "String"
        }
      },
      role: {
        serializedName: "role",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SentimentConfidenceScores: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SentimentConfidenceScores",
    modelProperties: {
      positive: {
        serializedName: "positive",
        required: true,
        type: {
          name: "Number"
        }
      },
      neutral: {
        serializedName: "neutral",
        required: true,
        type: {
          name: "Number"
        }
      },
      negative: {
        serializedName: "negative",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SentenceSentiment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SentenceSentiment",
    modelProperties: {
      text: {
        serializedName: "text",
        required: true,
        type: {
          name: "String"
        }
      },
      sentiment: {
        serializedName: "sentiment",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["positive", "neutral", "negative"]
        }
      },
      confidenceScores: {
        serializedName: "confidenceScores",
        type: {
          name: "Composite",
          className: "SentimentConfidenceScores"
        }
      },
      offset: {
        serializedName: "offset",
        required: true,
        type: {
          name: "Number"
        }
      },
      length: {
        serializedName: "length",
        required: true,
        type: {
          name: "Number"
        }
      },
      targets: {
        serializedName: "targets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SentenceTarget"
            }
          }
        }
      },
      assessments: {
        serializedName: "assessments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SentenceAssessment"
            }
          }
        }
      }
    }
  }
};

export const SentenceTarget: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SentenceTarget",
    modelProperties: {
      sentiment: {
        serializedName: "sentiment",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["positive", "mixed", "negative"]
        }
      },
      confidenceScores: {
        serializedName: "confidenceScores",
        type: {
          name: "Composite",
          className: "TargetConfidenceScores"
        }
      },
      offset: {
        serializedName: "offset",
        required: true,
        type: {
          name: "Number"
        }
      },
      length: {
        serializedName: "length",
        required: true,
        type: {
          name: "Number"
        }
      },
      text: {
        serializedName: "text",
        required: true,
        type: {
          name: "String"
        }
      },
      relations: {
        serializedName: "relations",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TargetRelation"
            }
          }
        }
      }
    }
  }
};

export const TargetConfidenceScores: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TargetConfidenceScores",
    modelProperties: {
      positive: {
        serializedName: "positive",
        required: true,
        type: {
          name: "Number"
        }
      },
      negative: {
        serializedName: "negative",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TargetRelation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TargetRelation",
    modelProperties: {
      relationType: {
        serializedName: "relationType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["assessment", "target"]
        }
      },
      ref: {
        serializedName: "ref",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SentenceAssessment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SentenceAssessment",
    modelProperties: {
      sentiment: {
        serializedName: "sentiment",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["positive", "mixed", "negative"]
        }
      },
      confidenceScores: {
        serializedName: "confidenceScores",
        type: {
          name: "Composite",
          className: "TargetConfidenceScores"
        }
      },
      offset: {
        serializedName: "offset",
        required: true,
        type: {
          name: "Number"
        }
      },
      length: {
        serializedName: "length",
        required: true,
        type: {
          name: "Number"
        }
      },
      text: {
        serializedName: "text",
        required: true,
        type: {
          name: "String"
        }
      },
      isNegated: {
        serializedName: "isNegated",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const LinkedEntity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LinkedEntity",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      matches: {
        serializedName: "matches",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Match"
            }
          }
        }
      },
      language: {
        serializedName: "language",
        required: true,
        type: {
          name: "String"
        }
      },
      dataSourceEntityId: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        required: true,
        type: {
          name: "String"
        }
      },
      dataSource: {
        serializedName: "dataSource",
        required: true,
        type: {
          name: "String"
        }
      },
      bingEntitySearchApiId: {
        serializedName: "bingId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Match: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Match",
    modelProperties: {
      confidenceScore: {
        serializedName: "confidenceScore",
        required: true,
        type: {
          name: "Number"
        }
      },
      text: {
        serializedName: "text",
        required: true,
        type: {
          name: "String"
        }
      },
      offset: {
        serializedName: "offset",
        required: true,
        type: {
          name: "Number"
        }
      },
      length: {
        serializedName: "length",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ExtractedSummarySentence: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtractedSummarySentence",
    modelProperties: {
      text: {
        serializedName: "text",
        required: true,
        type: {
          name: "String"
        }
      },
      rankScore: {
        serializedName: "rankScore",
        required: true,
        type: {
          name: "Number"
        }
      },
      offset: {
        serializedName: "offset",
        required: true,
        type: {
          name: "Number"
        }
      },
      length: {
        serializedName: "length",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DetectedLanguage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DetectedLanguage",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      iso6391Name: {
        serializedName: "iso6391Name",
        required: true,
        type: {
          name: "String"
        }
      },
      confidenceScore: {
        serializedName: "confidenceScore",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Pagination: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Pagination",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobMetadata: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobMetadata",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      createdDateTime: {
        serializedName: "createdDateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      expirationDateTime: {
        serializedName: "expirationDateTime",
        type: {
          name: "DateTime"
        }
      },
      jobId: {
        serializedName: "jobId",
        required: true,
        type: {
          name: "Uuid"
        }
      },
      lastUpdateDateTime: {
        serializedName: "lastUpdateDateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "notStarted",
            "running",
            "succeeded",
            "partiallySucceeded",
            "failed",
            "cancelled",
            "cancelling"
          ]
        }
      }
    }
  }
};

export const JobErrors: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobErrors",
    modelProperties: {
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorModel"
            }
          }
        }
      }
    }
  }
};

export const AnalyzeTextEntityLinkingInput: coreClient.CompositeMapper = {
  serializedName: "EntityLinking",
  type: {
    name: "Composite",
    className: "AnalyzeTextEntityLinkingInput",
    uberParent: "AnalyzeAction",
    polymorphicDiscriminator: AnalyzeAction.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeAction.type.modelProperties,
      analysisInput: {
        serializedName: "analysisInput",
        type: {
          name: "Composite",
          className: "MultiLanguageAnalysisInput"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "EntityLinkingAction"
        }
      }
    }
  }
};

export const AnalyzeTextEntityRecognitionInput: coreClient.CompositeMapper = {
  serializedName: "EntityRecognition",
  type: {
    name: "Composite",
    className: "AnalyzeTextEntityRecognitionInput",
    uberParent: "AnalyzeAction",
    polymorphicDiscriminator: AnalyzeAction.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeAction.type.modelProperties,
      analysisInput: {
        serializedName: "analysisInput",
        type: {
          name: "Composite",
          className: "MultiLanguageAnalysisInput"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "EntityRecognitionAction"
        }
      }
    }
  }
};

export const AnalyzeTextKeyPhraseExtractionInput: coreClient.CompositeMapper = {
  serializedName: "KeyPhraseExtraction",
  type: {
    name: "Composite",
    className: "AnalyzeTextKeyPhraseExtractionInput",
    uberParent: "AnalyzeAction",
    polymorphicDiscriminator: AnalyzeAction.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeAction.type.modelProperties,
      analysisInput: {
        serializedName: "analysisInput",
        type: {
          name: "Composite",
          className: "MultiLanguageAnalysisInput"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "KeyPhraseExtractionAction"
        }
      }
    }
  }
};

export const AnalyzeTextPiiEntitiesRecognitionInput: coreClient.CompositeMapper = {
  serializedName: "PiiEntityRecognition",
  type: {
    name: "Composite",
    className: "AnalyzeTextPiiEntitiesRecognitionInput",
    uberParent: "AnalyzeAction",
    polymorphicDiscriminator: AnalyzeAction.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeAction.type.modelProperties,
      analysisInput: {
        serializedName: "analysisInput",
        type: {
          name: "Composite",
          className: "MultiLanguageAnalysisInput"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "PiiEntityRecognitionAction"
        }
      }
    }
  }
};

export const AnalyzeTextLanguageDetectionInput: coreClient.CompositeMapper = {
  serializedName: "LanguageDetection",
  type: {
    name: "Composite",
    className: "AnalyzeTextLanguageDetectionInput",
    uberParent: "AnalyzeAction",
    polymorphicDiscriminator: AnalyzeAction.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeAction.type.modelProperties,
      analysisInput: {
        serializedName: "analysisInput",
        type: {
          name: "Composite",
          className: "LanguageDetectionAnalysisInput"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "LanguageDetectionAction"
        }
      }
    }
  }
};

export const AnalyzeTextSentimentAnalysisInput: coreClient.CompositeMapper = {
  serializedName: "SentimentAnalysis",
  type: {
    name: "Composite",
    className: "AnalyzeTextSentimentAnalysisInput",
    uberParent: "AnalyzeAction",
    polymorphicDiscriminator: AnalyzeAction.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeAction.type.modelProperties,
      analysisInput: {
        serializedName: "analysisInput",
        type: {
          name: "Composite",
          className: "MultiLanguageAnalysisInput"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "SentimentAnalysisAction"
        }
      }
    }
  }
};

export const SentimentTaskResult: coreClient.CompositeMapper = {
  serializedName: "SentimentAnalysisResults",
  type: {
    name: "Composite",
    className: "SentimentTaskResult",
    uberParent: "AnalyzeTextTaskResult",
    polymorphicDiscriminator:
      AnalyzeTextTaskResult.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeTextTaskResult.type.modelProperties,
      results: {
        serializedName: "results",
        type: {
          name: "Composite",
          className: "SentimentResponse"
        }
      }
    }
  }
};

export const EntitiesTaskResult: coreClient.CompositeMapper = {
  serializedName: "EntityRecognitionResults",
  type: {
    name: "Composite",
    className: "EntitiesTaskResult",
    uberParent: "AnalyzeTextTaskResult",
    polymorphicDiscriminator:
      AnalyzeTextTaskResult.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeTextTaskResult.type.modelProperties,
      results: {
        serializedName: "results",
        type: {
          name: "Composite",
          className: "EntitiesResult"
        }
      }
    }
  }
};

export const EntityLinkingTaskResult: coreClient.CompositeMapper = {
  serializedName: "EntityLinkingResults",
  type: {
    name: "Composite",
    className: "EntityLinkingTaskResult",
    uberParent: "AnalyzeTextTaskResult",
    polymorphicDiscriminator:
      AnalyzeTextTaskResult.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeTextTaskResult.type.modelProperties,
      results: {
        serializedName: "results",
        type: {
          name: "Composite",
          className: "EntityLinkingResult"
        }
      }
    }
  }
};

export const PiiTaskResult: coreClient.CompositeMapper = {
  serializedName: "PiiEntityRecognitionResults",
  type: {
    name: "Composite",
    className: "PiiTaskResult",
    uberParent: "AnalyzeTextTaskResult",
    polymorphicDiscriminator:
      AnalyzeTextTaskResult.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeTextTaskResult.type.modelProperties,
      results: {
        serializedName: "results",
        type: {
          name: "Composite",
          className: "PiiResult"
        }
      }
    }
  }
};

export const KeyPhraseTaskResult: coreClient.CompositeMapper = {
  serializedName: "KeyPhraseExtractionResults",
  type: {
    name: "Composite",
    className: "KeyPhraseTaskResult",
    uberParent: "AnalyzeTextTaskResult",
    polymorphicDiscriminator:
      AnalyzeTextTaskResult.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeTextTaskResult.type.modelProperties,
      results: {
        serializedName: "results",
        type: {
          name: "Composite",
          className: "KeyPhraseResult"
        }
      }
    }
  }
};

export const LanguageDetectionTaskResult: coreClient.CompositeMapper = {
  serializedName: "LanguageDetectionResults",
  type: {
    name: "Composite",
    className: "LanguageDetectionTaskResult",
    uberParent: "AnalyzeTextTaskResult",
    polymorphicDiscriminator:
      AnalyzeTextTaskResult.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeTextTaskResult.type.modelProperties,
      results: {
        serializedName: "results",
        type: {
          name: "Composite",
          className: "LanguageDetectionResult"
        }
      }
    }
  }
};

export const AnalyzeBatchAction: coreClient.CompositeMapper = {
  serializedName: "AnalyzeBatchAction",
  type: {
    name: "Composite",
    className: "AnalyzeBatchAction",
    uberParent: "TaskIdentifier",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...TaskIdentifier.type.modelProperties,
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AnalyzeTextLROResult: coreClient.CompositeMapper = {
  serializedName: "AnalyzeTextLROResult",
  type: {
    name: "Composite",
    className: "AnalyzeTextLROResult",
    uberParent: "TaskState",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...TaskState.type.modelProperties,
      ...TaskIdentifier.type.modelProperties,
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AnalyzeTextJobState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalyzeTextJobState",
    modelProperties: {
      ...JobState.type.modelProperties,
      ...TasksState.type.modelProperties,
      ...AnalyzeTextJobStatistics.type.modelProperties
    }
  }
};

export const ActionPrebuilt: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ActionPrebuilt",
    modelProperties: {
      ...ActionCommon.type.modelProperties,
      modelVersion: {
        defaultValue: "latest",
        serializedName: "modelVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ActionCustom: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ActionCustom",
    modelProperties: {
      ...ActionCommon.type.modelProperties,
      projectName: {
        serializedName: "projectName",
        required: true,
        type: {
          name: "String"
        }
      },
      deploymentName: {
        serializedName: "deploymentName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HealthcareResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthcareResult",
    modelProperties: {
      ...PreBuiltResult.type.modelProperties,
      documents: {
        serializedName: "documents",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthcareResultDocumentsItem"
            }
          }
        }
      }
    }
  }
};

export const SentimentResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SentimentResponse",
    modelProperties: {
      ...PreBuiltResult.type.modelProperties,
      documents: {
        serializedName: "documents",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SentimentResponseDocumentsItem"
            }
          }
        }
      }
    }
  }
};

export const EntitiesResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntitiesResult",
    modelProperties: {
      ...PreBuiltResult.type.modelProperties,
      documents: {
        serializedName: "documents",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntitiesResultDocumentsItem"
            }
          }
        }
      }
    }
  }
};

export const EntityLinkingResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntityLinkingResult",
    modelProperties: {
      ...PreBuiltResult.type.modelProperties,
      documents: {
        serializedName: "documents",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntityLinkingResultDocumentsItem"
            }
          }
        }
      }
    }
  }
};

export const PiiResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PiiResult",
    modelProperties: {
      ...PreBuiltResult.type.modelProperties,
      documents: {
        serializedName: "documents",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PiiResultDocumentsItem"
            }
          }
        }
      }
    }
  }
};

export const ExtractiveSummarizationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtractiveSummarizationResult",
    modelProperties: {
      ...PreBuiltResult.type.modelProperties,
      documents: {
        serializedName: "documents",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExtractiveSummarizationResultDocumentsItem"
            }
          }
        }
      }
    }
  }
};

export const KeyPhraseResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyPhraseResult",
    modelProperties: {
      ...PreBuiltResult.type.modelProperties,
      documents: {
        serializedName: "documents",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KeyPhraseResultDocumentsItem"
            }
          }
        }
      }
    }
  }
};

export const LanguageDetectionResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LanguageDetectionResult",
    modelProperties: {
      ...PreBuiltResult.type.modelProperties,
      documents: {
        serializedName: "documents",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LanguageDetectionDocumentResult"
            }
          }
        }
      }
    }
  }
};

export const CustomEntitiesResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomEntitiesResult",
    modelProperties: {
      ...CustomResult.type.modelProperties,
      documents: {
        serializedName: "documents",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomEntitiesResultDocumentsItem"
            }
          }
        }
      }
    }
  }
};

export const CustomSingleLabelClassificationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomSingleLabelClassificationResult",
    modelProperties: {
      ...CustomResult.type.modelProperties,
      documents: {
        serializedName: "documents",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomSingleLabelClassificationResultDocumentsItem"
            }
          }
        }
      }
    }
  }
};

export const CustomMultiLabelClassificationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomMultiLabelClassificationResult",
    modelProperties: {
      ...CustomResult.type.modelProperties,
      documents: {
        serializedName: "documents",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomMultiLabelClassificationResultDocumentsItem"
            }
          }
        }
      }
    }
  }
};

export const EntitiesDocumentResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntitiesDocumentResult",
    modelProperties: {
      ...DocumentResult.type.modelProperties,
      entities: {
        serializedName: "entities",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Entity"
            }
          }
        }
      }
    }
  }
};

export const SingleClassificationDocumentResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SingleClassificationDocumentResult",
    modelProperties: {
      ...DocumentResult.type.modelProperties,
      class: {
        serializedName: "class",
        type: {
          name: "Composite",
          className: "ClassificationResult"
        }
      }
    }
  }
};

export const MultiClassificationDocumentResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MultiClassificationDocumentResult",
    modelProperties: {
      ...DocumentResult.type.modelProperties,
      class: {
        serializedName: "class",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClassificationResult"
            }
          }
        }
      }
    }
  }
};

export const HealthcareEntitiesDocumentResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthcareEntitiesDocumentResult",
    modelProperties: {
      ...DocumentResult.type.modelProperties,
      entities: {
        serializedName: "entities",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthcareEntity"
            }
          }
        }
      },
      relations: {
        serializedName: "relations",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthcareRelation"
            }
          }
        }
      }
    }
  }
};

export const SentimentDocumentResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SentimentDocumentResult",
    modelProperties: {
      ...DocumentResult.type.modelProperties,
      sentiment: {
        serializedName: "sentiment",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["positive", "neutral", "negative", "mixed"]
        }
      },
      confidenceScores: {
        serializedName: "confidenceScores",
        type: {
          name: "Composite",
          className: "SentimentConfidenceScores"
        }
      },
      sentences: {
        serializedName: "sentences",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SentenceSentiment"
            }
          }
        }
      }
    }
  }
};

export const LinkedEntitiesDocumentResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LinkedEntitiesDocumentResult",
    modelProperties: {
      ...DocumentResult.type.modelProperties,
      entities: {
        serializedName: "entities",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LinkedEntity"
            }
          }
        }
      }
    }
  }
};

export const PiiEntitiesDocumentResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PiiEntitiesDocumentResult",
    modelProperties: {
      ...DocumentResult.type.modelProperties,
      redactedText: {
        serializedName: "redactedText",
        required: true,
        type: {
          name: "String"
        }
      },
      entities: {
        serializedName: "entities",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Entity"
            }
          }
        }
      }
    }
  }
};

export const ExtractedSummaryDocumentResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtractedSummaryDocumentResult",
    modelProperties: {
      ...DocumentResult.type.modelProperties,
      sentences: {
        serializedName: "sentences",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExtractedSummarySentence"
            }
          }
        }
      }
    }
  }
};

export const KeyPhrasesDocumentResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyPhrasesDocumentResult",
    modelProperties: {
      ...DocumentResult.type.modelProperties,
      keyPhrases: {
        serializedName: "keyPhrases",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const LanguageDetectionDocumentResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LanguageDetectionDocumentResult",
    modelProperties: {
      ...DocumentResult.type.modelProperties,
      detectedLanguage: {
        serializedName: "detectedLanguage",
        type: {
          name: "Composite",
          className: "DetectedLanguage"
        }
      }
    }
  }
};

export const CustomEntitiesLROTask: coreClient.CompositeMapper = {
  serializedName: "CustomEntityRecognition",
  type: {
    name: "Composite",
    className: "CustomEntitiesLROTask",
    uberParent: "TaskIdentifier",
    polymorphicDiscriminator: TaskIdentifier.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeBatchAction.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "CustomEntitiesTaskParameters"
        }
      }
    }
  }
};

export const CustomSingleLabelClassificationLROTask: coreClient.CompositeMapper = {
  serializedName: "CustomSingleLabelClassification",
  type: {
    name: "Composite",
    className: "CustomSingleLabelClassificationLROTask",
    uberParent: "TaskIdentifier",
    polymorphicDiscriminator: TaskIdentifier.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeBatchAction.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "CustomSingleLabelClassificationTaskParameters"
        }
      }
    }
  }
};

export const CustomMultiLabelClassificationLROTask: coreClient.CompositeMapper = {
  serializedName: "CustomMultiLabelClassification",
  type: {
    name: "Composite",
    className: "CustomMultiLabelClassificationLROTask",
    uberParent: "TaskIdentifier",
    polymorphicDiscriminator: TaskIdentifier.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeBatchAction.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "CustomMultiLabelClassificationTaskParameters"
        }
      }
    }
  }
};

export const HealthcareLROTask: coreClient.CompositeMapper = {
  serializedName: "Healthcare",
  type: {
    name: "Composite",
    className: "HealthcareLROTask",
    uberParent: "TaskIdentifier",
    polymorphicDiscriminator: TaskIdentifier.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeBatchAction.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "HealthcareAnalysisAction"
        }
      }
    }
  }
};

export const SentimentAnalysisLROTask: coreClient.CompositeMapper = {
  serializedName: "SentimentAnalysis",
  type: {
    name: "Composite",
    className: "SentimentAnalysisLROTask",
    uberParent: "TaskIdentifier",
    polymorphicDiscriminator: TaskIdentifier.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeBatchAction.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "SentimentAnalysisAction"
        }
      }
    }
  }
};

export const EntitiesLROTask: coreClient.CompositeMapper = {
  serializedName: "EntityRecognition",
  type: {
    name: "Composite",
    className: "EntitiesLROTask",
    uberParent: "TaskIdentifier",
    polymorphicDiscriminator: TaskIdentifier.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeBatchAction.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "EntityRecognitionAction"
        }
      }
    }
  }
};

export const EntityLinkingLROTask: coreClient.CompositeMapper = {
  serializedName: "EntityLinking",
  type: {
    name: "Composite",
    className: "EntityLinkingLROTask",
    uberParent: "TaskIdentifier",
    polymorphicDiscriminator: TaskIdentifier.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeBatchAction.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "EntityLinkingAction"
        }
      }
    }
  }
};

export const PiiLROTask: coreClient.CompositeMapper = {
  serializedName: "PiiEntityRecognition",
  type: {
    name: "Composite",
    className: "PiiLROTask",
    uberParent: "TaskIdentifier",
    polymorphicDiscriminator: TaskIdentifier.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeBatchAction.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "PiiEntityRecognitionAction"
        }
      }
    }
  }
};

export const ExtractiveSummarizationLROTask: coreClient.CompositeMapper = {
  serializedName: "ExtractiveSummarization",
  type: {
    name: "Composite",
    className: "ExtractiveSummarizationLROTask",
    uberParent: "TaskIdentifier",
    polymorphicDiscriminator: TaskIdentifier.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeBatchAction.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "ExtractiveSummarizationTaskParameters"
        }
      }
    }
  }
};

export const KeyPhraseLROTask: coreClient.CompositeMapper = {
  serializedName: "KeyPhraseExtraction",
  type: {
    name: "Composite",
    className: "KeyPhraseLROTask",
    uberParent: "TaskIdentifier",
    polymorphicDiscriminator: TaskIdentifier.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeBatchAction.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "KeyPhraseExtractionAction"
        }
      }
    }
  }
};

export const EntityRecognitionLROResult: coreClient.CompositeMapper = {
  serializedName: "EntityRecognitionLROResults",
  type: {
    name: "Composite",
    className: "EntityRecognitionLROResult",
    uberParent: "TaskState",
    polymorphicDiscriminator: TaskState.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeTextLROResult.type.modelProperties,
      results: {
        serializedName: "results",
        type: {
          name: "Composite",
          className: "EntitiesResult"
        }
      }
    }
  }
};

export const CustomEntityRecognitionLROResult: coreClient.CompositeMapper = {
  serializedName: "CustomEntityRecognitionLROResults",
  type: {
    name: "Composite",
    className: "CustomEntityRecognitionLROResult",
    uberParent: "TaskState",
    polymorphicDiscriminator: TaskState.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeTextLROResult.type.modelProperties,
      results: {
        serializedName: "results",
        type: {
          name: "Composite",
          className: "CustomEntitiesResult"
        }
      }
    }
  }
};

export const CustomSingleLabelClassificationLROResult: coreClient.CompositeMapper = {
  serializedName: "CustomSingleLabelClassificationLROResults",
  type: {
    name: "Composite",
    className: "CustomSingleLabelClassificationLROResult",
    uberParent: "TaskState",
    polymorphicDiscriminator: TaskState.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeTextLROResult.type.modelProperties,
      results: {
        serializedName: "results",
        type: {
          name: "Composite",
          className: "CustomSingleLabelClassificationResult"
        }
      }
    }
  }
};

export const CustomMultiLabelClassificationLROResult: coreClient.CompositeMapper = {
  serializedName: "CustomMultiLabelClassificationLROResults",
  type: {
    name: "Composite",
    className: "CustomMultiLabelClassificationLROResult",
    uberParent: "TaskState",
    polymorphicDiscriminator: TaskState.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeTextLROResult.type.modelProperties,
      results: {
        serializedName: "results",
        type: {
          name: "Composite",
          className: "CustomMultiLabelClassificationResult"
        }
      }
    }
  }
};

export const EntityLinkingLROResult: coreClient.CompositeMapper = {
  serializedName: "EntityLinkingLROResults",
  type: {
    name: "Composite",
    className: "EntityLinkingLROResult",
    uberParent: "TaskState",
    polymorphicDiscriminator: TaskState.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeTextLROResult.type.modelProperties,
      results: {
        serializedName: "results",
        type: {
          name: "Composite",
          className: "EntityLinkingResult"
        }
      }
    }
  }
};

export const PiiEntityRecognitionLROResult: coreClient.CompositeMapper = {
  serializedName: "PiiEntityRecognitionLROResults",
  type: {
    name: "Composite",
    className: "PiiEntityRecognitionLROResult",
    uberParent: "TaskState",
    polymorphicDiscriminator: TaskState.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeTextLROResult.type.modelProperties,
      results: {
        serializedName: "results",
        type: {
          name: "Composite",
          className: "PiiResult"
        }
      }
    }
  }
};

export const ExtractiveSummarizationLROResult: coreClient.CompositeMapper = {
  serializedName: "ExtractiveSummarizationLROResults",
  type: {
    name: "Composite",
    className: "ExtractiveSummarizationLROResult",
    uberParent: "TaskState",
    polymorphicDiscriminator: TaskState.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeTextLROResult.type.modelProperties,
      results: {
        serializedName: "results",
        type: {
          name: "Composite",
          className: "ExtractiveSummarizationResult"
        }
      }
    }
  }
};

export const HealthcareLROResult: coreClient.CompositeMapper = {
  serializedName: "HealthcareLROResults",
  type: {
    name: "Composite",
    className: "HealthcareLROResult",
    uberParent: "TaskState",
    polymorphicDiscriminator: TaskState.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeTextLROResult.type.modelProperties,
      results: {
        serializedName: "results",
        type: {
          name: "Composite",
          className: "HealthcareResult"
        }
      }
    }
  }
};

export const SentimentLROResult: coreClient.CompositeMapper = {
  serializedName: "SentimentAnalysisLROResults",
  type: {
    name: "Composite",
    className: "SentimentLROResult",
    uberParent: "TaskState",
    polymorphicDiscriminator: TaskState.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeTextLROResult.type.modelProperties,
      results: {
        serializedName: "results",
        type: {
          name: "Composite",
          className: "SentimentResponse"
        }
      }
    }
  }
};

export const KeyPhraseExtractionLROResult: coreClient.CompositeMapper = {
  serializedName: "KeyPhraseExtractionLROResults",
  type: {
    name: "Composite",
    className: "KeyPhraseExtractionLROResult",
    uberParent: "TaskState",
    polymorphicDiscriminator: TaskState.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalyzeTextLROResult.type.modelProperties,
      results: {
        serializedName: "results",
        type: {
          name: "Composite",
          className: "KeyPhraseResult"
        }
      }
    }
  }
};

export const EntityLinkingAction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntityLinkingAction",
    modelProperties: {
      ...ActionPrebuilt.type.modelProperties,
      stringIndexType: {
        defaultValue: "Utf16CodeUnit",
        serializedName: "stringIndexType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EntityRecognitionAction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntityRecognitionAction",
    modelProperties: {
      ...ActionPrebuilt.type.modelProperties,
      stringIndexType: {
        defaultValue: "Utf16CodeUnit",
        serializedName: "stringIndexType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyPhraseExtractionAction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyPhraseExtractionAction",
    modelProperties: {
      ...ActionPrebuilt.type.modelProperties
    }
  }
};

export const PiiEntityRecognitionAction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PiiEntityRecognitionAction",
    modelProperties: {
      ...ActionPrebuilt.type.modelProperties,
      domainFilter: {
        defaultValue: "none",
        serializedName: "domain",
        type: {
          name: "String"
        }
      },
      categoriesFilter: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "piiCategories",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      stringIndexType: {
        defaultValue: "Utf16CodeUnit",
        serializedName: "stringIndexType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LanguageDetectionAction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LanguageDetectionAction",
    modelProperties: {
      ...ActionPrebuilt.type.modelProperties
    }
  }
};

export const SentimentAnalysisAction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SentimentAnalysisAction",
    modelProperties: {
      ...ActionPrebuilt.type.modelProperties,
      includeOpinionMining: {
        defaultValue: false,
        serializedName: "opinionMining",
        type: {
          name: "Boolean"
        }
      },
      stringIndexType: {
        defaultValue: "Utf16CodeUnit",
        serializedName: "stringIndexType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HealthcareAnalysisAction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthcareAnalysisAction",
    modelProperties: {
      ...ActionPrebuilt.type.modelProperties,
      stringIndexType: {
        defaultValue: "Utf16CodeUnit",
        serializedName: "stringIndexType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExtractiveSummarizationTaskParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtractiveSummarizationTaskParameters",
    modelProperties: {
      ...ActionPrebuilt.type.modelProperties,
      sentenceCount: {
        defaultValue: 3,
        serializedName: "sentenceCount",
        type: {
          name: "Number"
        }
      },
      sortBy: {
        defaultValue: "Offset",
        serializedName: "sortBy",
        type: {
          name: "String"
        }
      },
      stringIndexType: {
        defaultValue: "Utf16CodeUnit",
        serializedName: "stringIndexType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomEntitiesTaskParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomEntitiesTaskParameters",
    modelProperties: {
      ...ActionCustom.type.modelProperties,
      stringIndexType: {
        defaultValue: "Utf16CodeUnit",
        serializedName: "stringIndexType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomSingleLabelClassificationTaskParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomSingleLabelClassificationTaskParameters",
    modelProperties: {
      ...ActionCustom.type.modelProperties
    }
  }
};

export const CustomMultiLabelClassificationTaskParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomMultiLabelClassificationTaskParameters",
    modelProperties: {
      ...ActionCustom.type.modelProperties
    }
  }
};

export const CustomEntitiesResultDocumentsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomEntitiesResultDocumentsItem",
    modelProperties: {
      ...EntitiesDocumentResult.type.modelProperties
    }
  }
};

export const EntitiesResultDocumentsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntitiesResultDocumentsItem",
    modelProperties: {
      ...EntitiesDocumentResult.type.modelProperties
    }
  }
};

export const CustomSingleLabelClassificationResultDocumentsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomSingleLabelClassificationResultDocumentsItem",
    modelProperties: {
      ...SingleClassificationDocumentResult.type.modelProperties
    }
  }
};

export const CustomMultiLabelClassificationResultDocumentsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomMultiLabelClassificationResultDocumentsItem",
    modelProperties: {
      ...MultiClassificationDocumentResult.type.modelProperties
    }
  }
};

export const HealthcareResultDocumentsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthcareResultDocumentsItem",
    modelProperties: {
      ...HealthcareEntitiesDocumentResult.type.modelProperties
    }
  }
};

export const SentimentResponseDocumentsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SentimentResponseDocumentsItem",
    modelProperties: {
      ...SentimentDocumentResult.type.modelProperties
    }
  }
};

export const EntityLinkingResultDocumentsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntityLinkingResultDocumentsItem",
    modelProperties: {
      ...LinkedEntitiesDocumentResult.type.modelProperties
    }
  }
};

export const PiiResultDocumentsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PiiResultDocumentsItem",
    modelProperties: {
      ...PiiEntitiesDocumentResult.type.modelProperties
    }
  }
};

export const ExtractiveSummarizationResultDocumentsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtractiveSummarizationResultDocumentsItem",
    modelProperties: {
      ...ExtractedSummaryDocumentResult.type.modelProperties
    }
  }
};

export const KeyPhraseResultDocumentsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyPhraseResultDocumentsItem",
    modelProperties: {
      ...KeyPhrasesDocumentResult.type.modelProperties
    }
  }
};

export const AnalyzeTextSubmitJobHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalyzeTextSubmitJobHeaders",
    modelProperties: {
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AnalyzeTextCancelJobHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalyzeTextCancelJobHeaders",
    modelProperties: {
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  AnalyzeAction: AnalyzeAction,
  AnalyzeTextTaskResult: AnalyzeTextTaskResult,
  "AnalyzeAction.EntityLinking": AnalyzeTextEntityLinkingInput,
  "AnalyzeAction.EntityRecognition": AnalyzeTextEntityRecognitionInput,
  "AnalyzeAction.KeyPhraseExtraction": AnalyzeTextKeyPhraseExtractionInput,
  "AnalyzeAction.PiiEntityRecognition": AnalyzeTextPiiEntitiesRecognitionInput,
  "AnalyzeAction.LanguageDetection": AnalyzeTextLanguageDetectionInput,
  "AnalyzeAction.SentimentAnalysis": AnalyzeTextSentimentAnalysisInput,
  "AnalyzeTextTaskResult.SentimentAnalysisResults": SentimentTaskResult,
  "AnalyzeTextTaskResult.EntityRecognitionResults": EntitiesTaskResult,
  "AnalyzeTextTaskResult.EntityLinkingResults": EntityLinkingTaskResult,
  "AnalyzeTextTaskResult.PiiEntityRecognitionResults": PiiTaskResult,
  "AnalyzeTextTaskResult.KeyPhraseExtractionResults": KeyPhraseTaskResult,
  "AnalyzeTextTaskResult.LanguageDetectionResults": LanguageDetectionTaskResult,
  "TaskIdentifier.AnalyzeBatchAction": AnalyzeBatchAction,
  "TaskState.AnalyzeTextLROResult": AnalyzeTextLROResult,
  "TaskIdentifier.CustomEntityRecognition": CustomEntitiesLROTask,
  "TaskIdentifier.CustomSingleLabelClassification": CustomSingleLabelClassificationLROTask,
  "TaskIdentifier.CustomMultiLabelClassification": CustomMultiLabelClassificationLROTask,
  "TaskIdentifier.Healthcare": HealthcareLROTask,
  "TaskIdentifier.SentimentAnalysis": SentimentAnalysisLROTask,
  "TaskIdentifier.EntityRecognition": EntitiesLROTask,
  "TaskIdentifier.EntityLinking": EntityLinkingLROTask,
  "TaskIdentifier.PiiEntityRecognition": PiiLROTask,
  "TaskIdentifier.ExtractiveSummarization": ExtractiveSummarizationLROTask,
  "TaskIdentifier.KeyPhraseExtraction": KeyPhraseLROTask,
  "TaskState.EntityRecognitionLROResults": EntityRecognitionLROResult,
  "TaskState.CustomEntityRecognitionLROResults": CustomEntityRecognitionLROResult,
  "TaskState.CustomSingleLabelClassificationLROResults": CustomSingleLabelClassificationLROResult,
  "TaskState.CustomMultiLabelClassificationLROResults": CustomMultiLabelClassificationLROResult,
  "TaskState.EntityLinkingLROResults": EntityLinkingLROResult,
  "TaskState.PiiEntityRecognitionLROResults": PiiEntityRecognitionLROResult,
  "TaskState.ExtractiveSummarizationLROResults": ExtractiveSummarizationLROResult,
  "TaskState.HealthcareLROResults": HealthcareLROResult,
  "TaskState.SentimentAnalysisLROResults": SentimentLROResult,
  "TaskState.KeyPhraseExtractionLROResults": KeyPhraseExtractionLROResult
};
