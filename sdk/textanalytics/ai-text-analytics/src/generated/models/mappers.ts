/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const MultiLanguageBatchInput: coreHttp.CompositeMapper = {
  serializedName: "MultiLanguageBatchInput",
  type: {
    name: "Composite",
    className: "MultiLanguageBatchInput",
    modelProperties: {
      documents: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "MultiLanguageInput" }
          }
        },
        serializedName: "documents",
        required: true
      }
    }
  }
};

export const MultiLanguageInput: coreHttp.CompositeMapper = {
  serializedName: "MultiLanguageInput",
  type: {
    name: "Composite",
    className: "MultiLanguageInput",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id", required: true },
      text: {
        type: { name: "String" },
        serializedName: "text",
        required: true
      },
      language: { type: { name: "String" }, serializedName: "language" }
    }
  }
};

export const EntitiesResult: coreHttp.CompositeMapper = {
  serializedName: "EntitiesResult",
  type: {
    name: "Composite",
    className: "EntitiesResult",
    modelProperties: {
      documents: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DocumentEntities" }
          }
        },
        serializedName: "documents",
        required: true
      },
      errors: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "DocumentError" } }
        },
        serializedName: "errors",
        required: true
      },
      statistics: {
        serializedName: "statistics",
        type: { name: "Composite", className: "TextDocumentBatchStatistics" }
      },
      modelVersion: {
        type: { name: "String" },
        serializedName: "modelVersion",
        required: true
      }
    }
  }
};

export const DocumentEntities: coreHttp.CompositeMapper = {
  serializedName: "DocumentEntities",
  type: {
    name: "Composite",
    className: "DocumentEntities",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id", required: true },
      entities: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Entity" } }
        },
        serializedName: "entities",
        required: true
      },
      statistics: {
        serializedName: "statistics",
        type: { name: "Composite", className: "TextDocumentStatistics" }
      }
    }
  }
};

export const Entity: coreHttp.CompositeMapper = {
  serializedName: "Entity",
  type: {
    name: "Composite",
    className: "Entity",
    modelProperties: {
      text: {
        type: { name: "String" },
        serializedName: "text",
        required: true
      },
      type: {
        type: { name: "String" },
        serializedName: "type",
        required: true
      },
      subtype: { type: { name: "String" }, serializedName: "subtype" },
      offset: {
        type: { name: "Number" },
        serializedName: "offset",
        required: true
      },
      length: {
        type: { name: "Number" },
        serializedName: "length",
        required: true
      },
      score: {
        type: { name: "Number" },
        serializedName: "score",
        required: true
      }
    }
  }
};

export const TextDocumentStatistics: coreHttp.CompositeMapper = {
  serializedName: "TextDocumentStatistics",
  type: {
    name: "Composite",
    className: "TextDocumentStatistics",
    modelProperties: {
      charactersCount: {
        type: { name: "Number" },
        serializedName: "charactersCount",
        required: true
      },
      transactionsCount: {
        type: { name: "Number" },
        serializedName: "transactionsCount",
        required: true
      }
    }
  }
};

export const DocumentError: coreHttp.CompositeMapper = {
  serializedName: "DocumentError",
  type: {
    name: "Composite",
    className: "DocumentError",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id", required: true },
      error: {
        serializedName: "error",
        type: { name: "Composite", className: "TextAnalyticsError" }
      }
    }
  }
};

export const TextAnalyticsError: coreHttp.CompositeMapper = {
  serializedName: "TextAnalyticsError",
  type: {
    name: "Composite",
    className: "TextAnalyticsError",
    modelProperties: {
      code: {
        type: {
          name: "Enum",
          allowedValues: [
            "invalidRequest",
            "invalidArgument",
            "internalServerError",
            "serviceUnavailable"
          ]
        },
        serializedName: "code",
        required: true
      },
      message: {
        type: { name: "String" },
        serializedName: "message",
        required: true
      },
      target: { type: { name: "String" }, serializedName: "target" },
      innerError: {
        serializedName: "innerError",
        type: { name: "Composite", className: "InnerError" }
      },
      details: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TextAnalyticsError" }
          }
        },
        serializedName: "details"
      }
    }
  }
};

export const InnerError: coreHttp.CompositeMapper = {
  serializedName: "InnerError",
  type: {
    name: "Composite",
    className: "InnerError",
    modelProperties: {
      code: {
        type: {
          name: "Enum",
          allowedValues: [
            "invalidParameterValue",
            "invalidRequestBodyFormat",
            "emptyRequest",
            "missingInputRecords",
            "invalidDocument",
            "modelVersionIncorrect",
            "invalidDocumentBatch",
            "unsupportedLanguageCode",
            "invalidCountryHint"
          ]
        },
        serializedName: "code",
        required: true
      },
      message: {
        type: { name: "String" },
        serializedName: "message",
        required: true
      },
      details: {
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, serializedName: "String" }
        },
        serializedName: "details"
      },
      target: { type: { name: "String" }, serializedName: "target" },
      innerError: {
        serializedName: "innerError",
        type: { name: "Composite", className: "InnerError" }
      }
    }
  }
};

export const TextDocumentBatchStatistics: coreHttp.CompositeMapper = {
  serializedName: "TextDocumentBatchStatistics",
  type: {
    name: "Composite",
    className: "TextDocumentBatchStatistics",
    modelProperties: {
      documentsCount: {
        type: { name: "Number" },
        serializedName: "documentsCount",
        required: true
      },
      validDocumentsCount: {
        type: { name: "Number" },
        serializedName: "validDocumentsCount",
        required: true
      },
      erroneousDocumentsCount: {
        type: { name: "Number" },
        serializedName: "erroneousDocumentsCount",
        required: true
      },
      transactionsCount: {
        type: { name: "Number" },
        serializedName: "transactionsCount",
        required: true
      }
    }
  }
};

export const EntityLinkingResult: coreHttp.CompositeMapper = {
  serializedName: "EntityLinkingResult",
  type: {
    name: "Composite",
    className: "EntityLinkingResult",
    modelProperties: {
      documents: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DocumentLinkedEntities" }
          }
        },
        serializedName: "documents",
        required: true
      },
      errors: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "DocumentError" } }
        },
        serializedName: "errors",
        required: true
      },
      statistics: {
        serializedName: "statistics",
        type: { name: "Composite", className: "TextDocumentBatchStatistics" }
      },
      modelVersion: {
        type: { name: "String" },
        serializedName: "modelVersion",
        required: true
      }
    }
  }
};

export const DocumentLinkedEntities: coreHttp.CompositeMapper = {
  serializedName: "DocumentLinkedEntities",
  type: {
    name: "Composite",
    className: "DocumentLinkedEntities",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id", required: true },
      entities: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "LinkedEntity" } }
        },
        serializedName: "entities",
        required: true
      },
      statistics: {
        serializedName: "statistics",
        type: { name: "Composite", className: "TextDocumentStatistics" }
      }
    }
  }
};

export const LinkedEntity: coreHttp.CompositeMapper = {
  serializedName: "LinkedEntity",
  type: {
    name: "Composite",
    className: "LinkedEntity",
    modelProperties: {
      name: {
        type: { name: "String" },
        serializedName: "name",
        required: true
      },
      matches: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Match" } }
        },
        serializedName: "matches",
        required: true
      },
      language: {
        type: { name: "String" },
        serializedName: "language",
        required: true
      },
      id: { type: { name: "String" }, serializedName: "id" },
      url: { type: { name: "String" }, serializedName: "url", required: true },
      dataSource: {
        type: { name: "String" },
        serializedName: "dataSource",
        required: true
      }
    }
  }
};

export const Match: coreHttp.CompositeMapper = {
  serializedName: "Match",
  type: {
    name: "Composite",
    className: "Match",
    modelProperties: {
      score: {
        type: { name: "Number" },
        serializedName: "score",
        required: true
      },
      text: {
        type: { name: "String" },
        serializedName: "text",
        required: true
      },
      offset: {
        type: { name: "Number" },
        serializedName: "offset",
        required: true
      },
      length: {
        type: { name: "Number" },
        serializedName: "length",
        required: true
      }
    }
  }
};

export const KeyPhraseResult: coreHttp.CompositeMapper = {
  serializedName: "KeyPhraseResult",
  type: {
    name: "Composite",
    className: "KeyPhraseResult",
    modelProperties: {
      documents: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DocumentKeyPhrases" }
          }
        },
        serializedName: "documents",
        required: true
      },
      errors: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "DocumentError" } }
        },
        serializedName: "errors",
        required: true
      },
      statistics: {
        serializedName: "statistics",
        type: { name: "Composite", className: "TextDocumentBatchStatistics" }
      },
      modelVersion: {
        type: { name: "String" },
        serializedName: "modelVersion",
        required: true
      }
    }
  }
};

export const DocumentKeyPhrases: coreHttp.CompositeMapper = {
  serializedName: "DocumentKeyPhrases",
  type: {
    name: "Composite",
    className: "DocumentKeyPhrases",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id", required: true },
      keyPhrases: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "DocumentKeyPhrasesItem"
          }
        },
        serializedName: "keyPhrases",
        required: true
      },
      statistics: {
        serializedName: "statistics",
        type: { name: "Composite", className: "TextDocumentStatistics" }
      }
    }
  }
};

export const LanguageBatchInput: coreHttp.CompositeMapper = {
  serializedName: "LanguageBatchInput",
  type: {
    name: "Composite",
    className: "LanguageBatchInput",
    modelProperties: {
      documents: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "LanguageInput" } }
        },
        serializedName: "documents",
        required: true
      }
    }
  }
};

export const LanguageInput: coreHttp.CompositeMapper = {
  serializedName: "LanguageInput",
  type: {
    name: "Composite",
    className: "LanguageInput",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id", required: true },
      text: {
        type: { name: "String" },
        serializedName: "text",
        required: true
      },
      countryHint: { type: { name: "String" }, serializedName: "countryHint" }
    }
  }
};

export const LanguageResult: coreHttp.CompositeMapper = {
  serializedName: "LanguageResult",
  type: {
    name: "Composite",
    className: "LanguageResult",
    modelProperties: {
      documents: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DocumentLanguage" }
          }
        },
        serializedName: "documents",
        required: true
      },
      errors: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "DocumentError" } }
        },
        serializedName: "errors",
        required: true
      },
      statistics: {
        serializedName: "statistics",
        type: { name: "Composite", className: "TextDocumentBatchStatistics" }
      },
      modelVersion: {
        type: { name: "String" },
        serializedName: "modelVersion",
        required: true
      }
    }
  }
};

export const DocumentLanguage: coreHttp.CompositeMapper = {
  serializedName: "DocumentLanguage",
  type: {
    name: "Composite",
    className: "DocumentLanguage",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id", required: true },
      detectedLanguages: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DetectedLanguage" }
          }
        },
        serializedName: "detectedLanguages",
        required: true
      },
      statistics: {
        serializedName: "statistics",
        type: { name: "Composite", className: "TextDocumentStatistics" }
      }
    }
  }
};

export const DetectedLanguage: coreHttp.CompositeMapper = {
  serializedName: "DetectedLanguage",
  type: {
    name: "Composite",
    className: "DetectedLanguage",
    modelProperties: {
      name: {
        type: { name: "String" },
        serializedName: "name",
        required: true
      },
      iso6391Name: {
        type: { name: "String" },
        serializedName: "iso6391Name",
        required: true
      },
      score: {
        type: { name: "Number" },
        serializedName: "score",
        required: true
      }
    }
  }
};

export const SentimentResponse: coreHttp.CompositeMapper = {
  serializedName: "SentimentResponse",
  type: {
    name: "Composite",
    className: "SentimentResponse",
    modelProperties: {
      documents: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "DocumentSentiment" }
          }
        },
        serializedName: "documents",
        required: true
      },
      errors: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "DocumentError" } }
        },
        serializedName: "errors",
        required: true
      },
      statistics: {
        serializedName: "statistics",
        type: { name: "Composite", className: "TextDocumentBatchStatistics" }
      },
      modelVersion: {
        type: { name: "String" },
        serializedName: "modelVersion",
        required: true
      }
    }
  }
};

export const DocumentSentiment: coreHttp.CompositeMapper = {
  serializedName: "DocumentSentiment",
  type: {
    name: "Composite",
    className: "DocumentSentiment",
    modelProperties: {
      id: { type: { name: "String" }, serializedName: "id", required: true },
      sentiment: {
        type: {
          name: "Enum",
          allowedValues: ["positive", "neutral", "negative", "mixed"]
        },
        serializedName: "sentiment",
        required: true
      },
      statistics: {
        serializedName: "statistics",
        type: { name: "Composite", className: "TextDocumentStatistics" }
      },
      documentScores: {
        serializedName: "documentScores",
        type: {
          name: "Composite",
          className: "SentimentConfidenceScorePerLabel"
        }
      },
      sentences: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SentenceSentiment" }
          }
        },
        serializedName: "sentences",
        required: true
      }
    }
  }
};

export const SentimentConfidenceScorePerLabel: coreHttp.CompositeMapper = {
  serializedName: "SentimentConfidenceScorePerLabel",
  type: {
    name: "Composite",
    className: "SentimentConfidenceScorePerLabel",
    modelProperties: {
      positive: {
        type: { name: "Number" },
        serializedName: "positive",
        required: true
      },
      neutral: {
        type: { name: "Number" },
        serializedName: "neutral",
        required: true
      },
      negative: {
        type: { name: "Number" },
        serializedName: "negative",
        required: true
      }
    }
  }
};

export const SentenceSentiment: coreHttp.CompositeMapper = {
  serializedName: "SentenceSentiment",
  type: {
    name: "Composite",
    className: "SentenceSentiment",
    modelProperties: {
      sentiment: {
        type: {
          name: "Enum",
          allowedValues: ["positive", "neutral", "negative"]
        },
        serializedName: "sentiment",
        required: true
      },
      sentenceScores: {
        serializedName: "sentenceScores",
        type: {
          name: "Composite",
          className: "SentimentConfidenceScorePerLabel"
        }
      },
      offset: {
        type: { name: "Number" },
        serializedName: "offset",
        required: true
      },
      length: {
        type: { name: "Number" },
        serializedName: "length",
        required: true
      },
      warnings: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "String" },
            serializedName: "SentenceSentimentWarningsItem"
          }
        },
        serializedName: "warnings"
      }
    }
  }
};
