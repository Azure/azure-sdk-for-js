/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const MultiLanguageBatchInput: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MultiLanguageBatchInput",
    modelProperties: {
      documents: {
        serializedName: "documents",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TextDocumentInput"
            }
          }
        }
      }
    }
  }
};

export const TextDocumentInput: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TextDocumentInput",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      text: {
        serializedName: "text",
        required: true,
        type: {
          name: "String"
        }
      },
      language: {
        serializedName: "language",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobDescriptor: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobDescriptor",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobManifest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobManifest",
    modelProperties: {
      tasks: {
        serializedName: "tasks",
        type: {
          name: "Composite",
          className: "JobManifestTasks"
        }
      }
    }
  }
};

export const JobManifestTasks: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobManifestTasks",
    modelProperties: {
      entityRecognitionTasks: {
        serializedName: "entityRecognitionTasks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntitiesTask"
            }
          }
        }
      },
      entityRecognitionPiiTasks: {
        serializedName: "entityRecognitionPiiTasks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PiiTask"
            }
          }
        }
      },
      keyPhraseExtractionTasks: {
        serializedName: "keyPhraseExtractionTasks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KeyPhrasesTask"
            }
          }
        }
      },
      entityLinkingTasks: {
        serializedName: "entityLinkingTasks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntityLinkingTask"
            }
          }
        }
      }
    }
  }
};

export const EntitiesTask: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntitiesTask",
    modelProperties: {
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "EntitiesTaskParameters"
        }
      }
    }
  }
};

export const EntitiesTaskParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntitiesTaskParameters",
    modelProperties: {
      modelVersion: {
        defaultValue: "latest",
        serializedName: "model-version",
        type: {
          name: "String"
        }
      },
      stringIndexType: {
        serializedName: "stringIndexType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PiiTask: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PiiTask",
    modelProperties: {
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "PiiTaskParameters"
        }
      }
    }
  }
};

export const PiiTaskParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PiiTaskParameters",
    modelProperties: {
      domain: {
        defaultValue: "none",
        serializedName: "domain",
        type: {
          name: "String"
        }
      },
      modelVersion: {
        defaultValue: "latest",
        serializedName: "model-version",
        type: {
          name: "String"
        }
      },
      piiCategories: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "pii-categories",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      stringIndexType: {
        serializedName: "stringIndexType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyPhrasesTask: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyPhrasesTask",
    modelProperties: {
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "KeyPhrasesTaskParameters"
        }
      }
    }
  }
};

export const KeyPhrasesTaskParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyPhrasesTaskParameters",
    modelProperties: {
      modelVersion: {
        defaultValue: "latest",
        serializedName: "model-version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EntityLinkingTask: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntityLinkingTask",
    modelProperties: {
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "EntityLinkingTaskParameters"
        }
      }
    }
  }
};

export const EntityLinkingTaskParameters: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntityLinkingTaskParameters",
    modelProperties: {
      modelVersion: {
        defaultValue: "latest",
        serializedName: "model-version",
        type: {
          name: "String"
        }
      },
      stringIndexType: {
        serializedName: "stringIndexType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "TextAnalyticsError"
        }
      }
    }
  }
};

export const TextAnalyticsError: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TextAnalyticsError",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "InvalidRequest",
            "InvalidArgument",
            "InternalServerError",
            "ServiceUnavailable",
            "NotFound"
          ]
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      innererror: {
        serializedName: "innererror",
        type: {
          name: "Composite",
          className: "InnerError"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TextAnalyticsError"
            }
          }
        }
      }
    }
  }
};

export const InnerError: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InnerError",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      innererror: {
        serializedName: "innererror",
        type: {
          name: "Composite",
          className: "InnerError"
        }
      }
    }
  }
};

export const TextDocumentBatchStatistics: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TextDocumentBatchStatistics",
    modelProperties: {
      documentCount: {
        serializedName: "documentsCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      validDocumentCount: {
        serializedName: "validDocumentsCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      erroneousDocumentCount: {
        serializedName: "erroneousDocumentsCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      transactionCount: {
        serializedName: "transactionsCount",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const JobMetadata: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobMetadata",
    modelProperties: {
      createdDateTime: {
        serializedName: "createdDateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      expirationDateTime: {
        serializedName: "expirationDateTime",
        type: {
          name: "DateTime"
        }
      },
      jobId: {
        serializedName: "jobId",
        required: true,
        type: {
          name: "Uuid"
        }
      },
      lastUpdateDateTime: {
        serializedName: "lastUpdateDateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "notStarted",
            "running",
            "succeeded",
            "failed",
            "rejected",
            "cancelled",
            "cancelling",
            "partiallyCompleted"
          ]
        }
      }
    }
  }
};

export const TasksState: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TasksState",
    modelProperties: {
      tasks: {
        serializedName: "tasks",
        type: {
          name: "Composite",
          className: "TasksStateTasks"
        }
      }
    }
  }
};

export const TasksStateTasks: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TasksStateTasks",
    modelProperties: {
      details: {
        serializedName: "details",
        type: {
          name: "Composite",
          className: "TasksStateTasksDetails"
        }
      },
      completed: {
        serializedName: "completed",
        required: true,
        type: {
          name: "Number"
        }
      },
      failed: {
        serializedName: "failed",
        required: true,
        type: {
          name: "Number"
        }
      },
      inProgress: {
        serializedName: "inProgress",
        required: true,
        type: {
          name: "Number"
        }
      },
      total: {
        serializedName: "total",
        required: true,
        type: {
          name: "Number"
        }
      },
      entityRecognitionTasks: {
        serializedName: "entityRecognitionTasks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TasksStateTasksEntityRecognitionTasksItem"
            }
          }
        }
      },
      entityRecognitionPiiTasks: {
        serializedName: "entityRecognitionPiiTasks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TasksStateTasksEntityRecognitionPiiTasksItem"
            }
          }
        }
      },
      keyPhraseExtractionTasks: {
        serializedName: "keyPhraseExtractionTasks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TasksStateTasksKeyPhraseExtractionTasksItem"
            }
          }
        }
      },
      entityLinkingTasks: {
        serializedName: "entityLinkingTasks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TasksStateTasksEntityLinkingTasksItem"
            }
          }
        }
      }
    }
  }
};

export const TaskState: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskState",
    modelProperties: {
      lastUpdateDateTime: {
        serializedName: "lastUpdateDateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "notStarted",
            "running",
            "succeeded",
            "failed",
            "rejected",
            "cancelled",
            "cancelling",
            "partiallyCompleted"
          ]
        }
      }
    }
  }
};

export const Components15Gvwi3SchemasTasksstatePropertiesTasksPropertiesEntityrecognitiontasksItemsAllof1: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "Components15Gvwi3SchemasTasksstatePropertiesTasksPropertiesEntityrecognitiontasksItemsAllof1",
    modelProperties: {
      results: {
        serializedName: "results",
        type: {
          name: "Composite",
          className: "EntitiesResult"
        }
      }
    }
  }
};

export const EntitiesResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntitiesResult",
    modelProperties: {
      documents: {
        serializedName: "documents",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentEntities"
            }
          }
        }
      },
      errors: {
        serializedName: "errors",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentError"
            }
          }
        }
      },
      statistics: {
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "TextDocumentBatchStatistics"
        }
      },
      modelVersion: {
        serializedName: "modelVersion",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DocumentEntities: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentEntities",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      entities: {
        serializedName: "entities",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Entity"
            }
          }
        }
      },
      warnings: {
        serializedName: "warnings",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TextAnalyticsWarning"
            }
          }
        }
      },
      statistics: {
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "TextDocumentStatistics"
        }
      }
    }
  }
};

export const Entity: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Entity",
    modelProperties: {
      text: {
        serializedName: "text",
        required: true,
        type: {
          name: "String"
        }
      },
      category: {
        serializedName: "category",
        required: true,
        type: {
          name: "String"
        }
      },
      subCategory: {
        serializedName: "subcategory",
        type: {
          name: "String"
        }
      },
      offset: {
        serializedName: "offset",
        required: true,
        type: {
          name: "Number"
        }
      },
      length: {
        serializedName: "length",
        required: true,
        type: {
          name: "Number"
        }
      },
      confidenceScore: {
        serializedName: "confidenceScore",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TextAnalyticsWarning: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TextAnalyticsWarning",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TextDocumentStatistics: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TextDocumentStatistics",
    modelProperties: {
      characterCount: {
        serializedName: "charactersCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      transactionCount: {
        serializedName: "transactionsCount",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DocumentError: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentError",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "TextAnalyticsError"
        }
      }
    }
  }
};

export const Components15X8E9LSchemasTasksstatePropertiesTasksPropertiesEntityrecognitionpiitasksItemsAllof1: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "Components15X8E9LSchemasTasksstatePropertiesTasksPropertiesEntityrecognitionpiitasksItemsAllof1",
    modelProperties: {
      results: {
        serializedName: "results",
        type: {
          name: "Composite",
          className: "PiiResult"
        }
      }
    }
  }
};

export const PiiResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PiiResult",
    modelProperties: {
      documents: {
        serializedName: "documents",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PiiDocumentEntities"
            }
          }
        }
      },
      errors: {
        serializedName: "errors",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentError"
            }
          }
        }
      },
      statistics: {
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "TextDocumentBatchStatistics"
        }
      },
      modelVersion: {
        serializedName: "modelVersion",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PiiDocumentEntities: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PiiDocumentEntities",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      redactedText: {
        serializedName: "redactedText",
        required: true,
        type: {
          name: "String"
        }
      },
      entities: {
        serializedName: "entities",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Entity"
            }
          }
        }
      },
      warnings: {
        serializedName: "warnings",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TextAnalyticsWarning"
            }
          }
        }
      },
      statistics: {
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "TextDocumentStatistics"
        }
      }
    }
  }
};

export const Components1D9IzucSchemasTasksstatePropertiesTasksPropertiesKeyphraseextractiontasksItemsAllof1: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "Components1D9IzucSchemasTasksstatePropertiesTasksPropertiesKeyphraseextractiontasksItemsAllof1",
    modelProperties: {
      results: {
        serializedName: "results",
        type: {
          name: "Composite",
          className: "KeyPhraseResult"
        }
      }
    }
  }
};

export const KeyPhraseResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyPhraseResult",
    modelProperties: {
      documents: {
        serializedName: "documents",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentKeyPhrases"
            }
          }
        }
      },
      errors: {
        serializedName: "errors",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentError"
            }
          }
        }
      },
      statistics: {
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "TextDocumentBatchStatistics"
        }
      },
      modelVersion: {
        serializedName: "modelVersion",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DocumentKeyPhrases: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentKeyPhrases",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      keyPhrases: {
        serializedName: "keyPhrases",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      warnings: {
        serializedName: "warnings",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TextAnalyticsWarning"
            }
          }
        }
      },
      statistics: {
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "TextDocumentStatistics"
        }
      }
    }
  }
};

export const ComponentsIfu7BjSchemasTasksstatePropertiesTasksPropertiesEntitylinkingtasksItemsAllof1: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "ComponentsIfu7BjSchemasTasksstatePropertiesTasksPropertiesEntitylinkingtasksItemsAllof1",
    modelProperties: {
      results: {
        serializedName: "results",
        type: {
          name: "Composite",
          className: "EntityLinkingResult"
        }
      }
    }
  }
};

export const EntityLinkingResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntityLinkingResult",
    modelProperties: {
      documents: {
        serializedName: "documents",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentLinkedEntities"
            }
          }
        }
      },
      errors: {
        serializedName: "errors",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentError"
            }
          }
        }
      },
      statistics: {
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "TextDocumentBatchStatistics"
        }
      },
      modelVersion: {
        serializedName: "modelVersion",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DocumentLinkedEntities: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentLinkedEntities",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      entities: {
        serializedName: "entities",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LinkedEntity"
            }
          }
        }
      },
      warnings: {
        serializedName: "warnings",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TextAnalyticsWarning"
            }
          }
        }
      },
      statistics: {
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "TextDocumentStatistics"
        }
      }
    }
  }
};

export const LinkedEntity: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LinkedEntity",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      matches: {
        serializedName: "matches",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Match"
            }
          }
        }
      },
      language: {
        serializedName: "language",
        required: true,
        type: {
          name: "String"
        }
      },
      dataSourceEntityId: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        required: true,
        type: {
          name: "String"
        }
      },
      dataSource: {
        serializedName: "dataSource",
        required: true,
        type: {
          name: "String"
        }
      },
      bingEntitySearchApiId: {
        serializedName: "bingId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Match: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Match",
    modelProperties: {
      confidenceScore: {
        serializedName: "confidenceScore",
        required: true,
        type: {
          name: "Number"
        }
      },
      text: {
        serializedName: "text",
        required: true,
        type: {
          name: "String"
        }
      },
      offset: {
        serializedName: "offset",
        required: true,
        type: {
          name: "Number"
        }
      },
      length: {
        serializedName: "length",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Pagination: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Pagination",
    modelProperties: {
      nextLink: {
        serializedName: "@nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HealthcareResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthcareResult",
    modelProperties: {
      documents: {
        serializedName: "documents",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentHealthcareEntities"
            }
          }
        }
      },
      errors: {
        serializedName: "errors",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentError"
            }
          }
        }
      },
      statistics: {
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "TextDocumentBatchStatistics"
        }
      },
      modelVersion: {
        serializedName: "modelVersion",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DocumentHealthcareEntities: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentHealthcareEntities",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      entities: {
        serializedName: "entities",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthcareEntity"
            }
          }
        }
      },
      relations: {
        serializedName: "relations",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthcareRelation"
            }
          }
        }
      },
      warnings: {
        serializedName: "warnings",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TextAnalyticsWarning"
            }
          }
        }
      },
      statistics: {
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "TextDocumentStatistics"
        }
      }
    }
  }
};

export const HealthcareAssertion: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthcareAssertion",
    modelProperties: {
      conditionality: {
        serializedName: "conditionality",
        type: {
          name: "Enum",
          allowedValues: ["Hypothetical", "Conditional"]
        }
      },
      certainty: {
        serializedName: "certainty",
        type: {
          name: "Enum",
          allowedValues: [
            "Positive",
            "Positive Possible",
            "Neutral Possible",
            "Negative Possible",
            "Negative"
          ]
        }
      },
      association: {
        serializedName: "association",
        type: {
          name: "Enum",
          allowedValues: ["subject", "other"]
        }
      }
    }
  }
};

export const HealthcareEntityLink: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthcareEntityLink",
    modelProperties: {
      dataSource: {
        serializedName: "dataSource",
        required: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HealthcareRelation: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthcareRelation",
    modelProperties: {
      relationType: {
        serializedName: "relationType",
        required: true,
        type: {
          name: "String"
        }
      },
      entities: {
        serializedName: "entities",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthcareRelationEntity"
            }
          }
        }
      }
    }
  }
};

export const HealthcareRelationEntity: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthcareRelationEntity",
    modelProperties: {
      ref: {
        serializedName: "ref",
        required: true,
        type: {
          name: "String"
        }
      },
      role: {
        serializedName: "role",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LanguageBatchInput: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LanguageBatchInput",
    modelProperties: {
      documents: {
        serializedName: "documents",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DetectLanguageInput"
            }
          }
        }
      }
    }
  }
};

export const DetectLanguageInput: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DetectLanguageInput",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      text: {
        serializedName: "text",
        required: true,
        type: {
          name: "String"
        }
      },
      countryHint: {
        serializedName: "countryHint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LanguageResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LanguageResult",
    modelProperties: {
      documents: {
        serializedName: "documents",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentLanguage"
            }
          }
        }
      },
      errors: {
        serializedName: "errors",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentError"
            }
          }
        }
      },
      statistics: {
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "TextDocumentBatchStatistics"
        }
      },
      modelVersion: {
        serializedName: "modelVersion",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DocumentLanguage: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentLanguage",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      detectedLanguage: {
        serializedName: "detectedLanguage",
        type: {
          name: "Composite",
          className: "DetectedLanguage"
        }
      },
      warnings: {
        serializedName: "warnings",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TextAnalyticsWarning"
            }
          }
        }
      },
      statistics: {
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "TextDocumentStatistics"
        }
      }
    }
  }
};

export const DetectedLanguage: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DetectedLanguage",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      iso6391Name: {
        serializedName: "iso6391Name",
        required: true,
        type: {
          name: "String"
        }
      },
      confidenceScore: {
        serializedName: "confidenceScore",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SentimentResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SentimentResponse",
    modelProperties: {
      documents: {
        serializedName: "documents",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentSentiment"
            }
          }
        }
      },
      errors: {
        serializedName: "errors",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentError"
            }
          }
        }
      },
      statistics: {
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "TextDocumentBatchStatistics"
        }
      },
      modelVersion: {
        serializedName: "modelVersion",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DocumentSentiment: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentSentiment",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      sentiment: {
        serializedName: "sentiment",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["positive", "neutral", "negative", "mixed"]
        }
      },
      statistics: {
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "TextDocumentStatistics"
        }
      },
      confidenceScores: {
        serializedName: "confidenceScores",
        type: {
          name: "Composite",
          className: "SentimentConfidenceScores"
        }
      },
      sentenceSentiments: {
        serializedName: "sentences",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SentenceSentiment"
            }
          }
        }
      },
      warnings: {
        serializedName: "warnings",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TextAnalyticsWarning"
            }
          }
        }
      }
    }
  }
};

export const SentimentConfidenceScores: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SentimentConfidenceScores",
    modelProperties: {
      positive: {
        serializedName: "positive",
        required: true,
        type: {
          name: "Number"
        }
      },
      neutral: {
        serializedName: "neutral",
        required: true,
        type: {
          name: "Number"
        }
      },
      negative: {
        serializedName: "negative",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SentenceSentiment: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SentenceSentiment",
    modelProperties: {
      text: {
        serializedName: "text",
        required: true,
        type: {
          name: "String"
        }
      },
      sentiment: {
        serializedName: "sentiment",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["positive", "neutral", "negative"]
        }
      },
      confidenceScores: {
        serializedName: "confidenceScores",
        type: {
          name: "Composite",
          className: "SentimentConfidenceScores"
        }
      },
      offset: {
        serializedName: "offset",
        required: true,
        type: {
          name: "Number"
        }
      },
      length: {
        serializedName: "length",
        required: true,
        type: {
          name: "Number"
        }
      },
      targets: {
        serializedName: "targets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SentenceTarget"
            }
          }
        }
      },
      assessments: {
        serializedName: "assessments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SentenceAssessment"
            }
          }
        }
      }
    }
  }
};

export const SentenceTarget: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SentenceTarget",
    modelProperties: {
      sentiment: {
        serializedName: "sentiment",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["positive", "mixed", "negative"]
        }
      },
      confidenceScores: {
        serializedName: "confidenceScores",
        type: {
          name: "Composite",
          className: "TargetConfidenceScoreLabel"
        }
      },
      offset: {
        serializedName: "offset",
        required: true,
        type: {
          name: "Number"
        }
      },
      length: {
        serializedName: "length",
        required: true,
        type: {
          name: "Number"
        }
      },
      text: {
        serializedName: "text",
        required: true,
        type: {
          name: "String"
        }
      },
      relations: {
        serializedName: "relations",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TargetRelation"
            }
          }
        }
      }
    }
  }
};

export const TargetConfidenceScoreLabel: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TargetConfidenceScoreLabel",
    modelProperties: {
      positive: {
        serializedName: "positive",
        required: true,
        type: {
          name: "Number"
        }
      },
      negative: {
        serializedName: "negative",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TargetRelation: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TargetRelation",
    modelProperties: {
      relationType: {
        serializedName: "relationType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["assessment", "target"]
        }
      },
      ref: {
        serializedName: "ref",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SentenceAssessment: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SentenceAssessment",
    modelProperties: {
      sentiment: {
        serializedName: "sentiment",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["positive", "mixed", "negative"]
        }
      },
      confidenceScores: {
        serializedName: "confidenceScores",
        type: {
          name: "Composite",
          className: "TargetConfidenceScoreLabel"
        }
      },
      offset: {
        serializedName: "offset",
        required: true,
        type: {
          name: "Number"
        }
      },
      length: {
        serializedName: "length",
        required: true,
        type: {
          name: "Number"
        }
      },
      text: {
        serializedName: "text",
        required: true,
        type: {
          name: "String"
        }
      },
      isNegated: {
        serializedName: "isNegated",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AnalyzeBatchInput: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalyzeBatchInput",
    modelProperties: {
      ...JobDescriptor.type.modelProperties,
      ...JobManifest.type.modelProperties,
      analysisInput: {
        serializedName: "analysisInput",
        type: {
          name: "Composite",
          className: "MultiLanguageBatchInput"
        }
      }
    }
  }
};

export const AnalyzeJobMetadata: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalyzeJobMetadata",
    modelProperties: {
      ...JobMetadata.type.modelProperties,
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HealthcareJobState: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthcareJobState",
    modelProperties: {
      ...JobMetadata.type.modelProperties,
      ...Pagination.type.modelProperties,
      results: {
        serializedName: "results",
        type: {
          name: "Composite",
          className: "HealthcareResult"
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TextAnalyticsError"
            }
          }
        }
      }
    }
  }
};

export const AnalyzeJobState: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalyzeJobState",
    modelProperties: {
      ...AnalyzeJobMetadata.type.modelProperties,
      ...TasksState.type.modelProperties,
      ...Pagination.type.modelProperties,
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TextAnalyticsError"
            }
          }
        }
      },
      statistics: {
        serializedName: "statistics",
        type: {
          name: "Composite",
          className: "TextDocumentBatchStatistics"
        }
      }
    }
  }
};

export const TasksStateTasksDetails: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TasksStateTasksDetails",
    modelProperties: {
      ...TaskState.type.modelProperties
    }
  }
};

export const TasksStateTasksEntityRecognitionTasksItem: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TasksStateTasksEntityRecognitionTasksItem",
    modelProperties: {
      ...TaskState.type.modelProperties,
      ...Components15Gvwi3SchemasTasksstatePropertiesTasksPropertiesEntityrecognitiontasksItemsAllof1
        .type.modelProperties
    }
  }
};

export const TasksStateTasksEntityRecognitionPiiTasksItem: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TasksStateTasksEntityRecognitionPiiTasksItem",
    modelProperties: {
      ...TaskState.type.modelProperties,
      ...Components15X8E9LSchemasTasksstatePropertiesTasksPropertiesEntityrecognitionpiitasksItemsAllof1
        .type.modelProperties
    }
  }
};

export const TasksStateTasksKeyPhraseExtractionTasksItem: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TasksStateTasksKeyPhraseExtractionTasksItem",
    modelProperties: {
      ...TaskState.type.modelProperties,
      ...Components1D9IzucSchemasTasksstatePropertiesTasksPropertiesKeyphraseextractiontasksItemsAllof1
        .type.modelProperties
    }
  }
};

export const TasksStateTasksEntityLinkingTasksItem: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TasksStateTasksEntityLinkingTasksItem",
    modelProperties: {
      ...TaskState.type.modelProperties,
      ...ComponentsIfu7BjSchemasTasksstatePropertiesTasksPropertiesEntitylinkingtasksItemsAllof1
        .type.modelProperties
    }
  }
};

export const HealthcareEntity: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthcareEntity",
    modelProperties: {
      ...Entity.type.modelProperties,
      assertion: {
        serializedName: "assertion",
        type: {
          name: "Composite",
          className: "HealthcareAssertion"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      links: {
        serializedName: "links",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthcareEntityLink"
            }
          }
        }
      }
    }
  }
};

export const GeneratedClientAnalyzeHeaders: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeneratedClientAnalyzeHeaders",
    modelProperties: {
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GeneratedClientCancelHealthJobHeaders: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeneratedClientCancelHealthJobHeaders",
    modelProperties: {
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GeneratedClientHealthHeaders: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeneratedClientHealthHeaders",
    modelProperties: {
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      }
    }
  }
};
