/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Parameters from "./models/parameters";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { TextAnalyticsClientContext } from "./textAnalyticsClientContext";

class TextAnalyticsClient extends TextAnalyticsClientContext {
  /**
   * Initializes a new instance of the TextAnalyticsClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   *                 https://westus.api.cognitive.microsoft.com).
   * @param options The parameter options
   */
  constructor(
    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,
    endpoint: string,
    options?: Models.TextAnalyticsClientOptionalParams
  ) {
    super(credentials, endpoint, options);
  }

  /**
   * The API returns a list of general named entities in a given document. For the list of supported
   * entity types, check <a href="https://aka.ms/taner">Supported Entity Types in Text Analytics API</a>.
   * See the <a href="https://aka.ms/talangs">Supported languages in Text Analytics API</a> for the list
   * of enabled languages.
   * @param options The options parameters.
   */
  entitiesRecognitionGeneral(
    options?: coreHttp.OperationOptions
  ): Promise<Models.TextAnalyticsClientEntitiesRecognitionGeneralResponse> {
    return this.sendOperationRequest(
      { options },
      entitiesRecognitionGeneralOperationSpec
    ) as Promise<Models.TextAnalyticsClientEntitiesRecognitionGeneralResponse>;
  }

  /**
   * The API returns a list of entities with personal information (\"SSN\", \"Bank Account\" etc) in the
   * document. For the list of supported entity types, check <a href="https://aka.ms/tanerpii">Supported
   * Entity Types in Text Analytics API</a>. See the <a href="https://aka.ms/talangs">Supported languages
   * in Text Analytics API</a> for the list of enabled languages.
   *
   * @param options The options parameters.
   */
  entitiesRecognitionPii(
    options?: coreHttp.OperationOptions
  ): Promise<Models.TextAnalyticsClientEntitiesRecognitionPiiResponse> {
    return this.sendOperationRequest(
      { options },
      entitiesRecognitionPiiOperationSpec
    ) as Promise<Models.TextAnalyticsClientEntitiesRecognitionPiiResponse>;
  }

  /**
   * The API returns a list of recognized entities with links to a well-known knowledge base. See the <a
   * href="https://aka.ms/talangs">Supported languages in Text Analytics API</a> for the list of enabled
   * languages.
   * @param options The options parameters.
   */
  entitiesLinking(
    options?: coreHttp.OperationOptions
  ): Promise<Models.TextAnalyticsClientEntitiesLinkingResponse> {
    return this.sendOperationRequest(
      { options },
      entitiesLinkingOperationSpec
    ) as Promise<Models.TextAnalyticsClientEntitiesLinkingResponse>;
  }

  /**
   * The API returns a list of strings denoting the key phrases in the input text. See the <a
   * href="https://aka.ms/talangs">Supported languages in Text Analytics API</a> for the list of enabled
   * languages.
   * @param options The options parameters.
   */
  keyPhrases(
    options?: coreHttp.OperationOptions
  ): Promise<Models.TextAnalyticsClientKeyPhrasesResponse> {
    return this.sendOperationRequest(
      { options },
      keyPhrasesOperationSpec
    ) as Promise<Models.TextAnalyticsClientKeyPhrasesResponse>;
  }

  /**
   * The API returns the detected language and a numeric score between 0 and 1. Scores close to 1
   * indicate 100% certainty that the identified language is true. See the <a
   * href="https://aka.ms/talangs">Supported languages in Text Analytics API</a> for the list of enabled
   * languages.
   * @param options The options parameters.
   */
  languages(
    options?: coreHttp.OperationOptions
  ): Promise<Models.TextAnalyticsClientLanguagesResponse> {
    return this.sendOperationRequest(
      { options },
      languagesOperationSpec
    ) as Promise<Models.TextAnalyticsClientLanguagesResponse>;
  }

  /**
   * The API returns a sentiment prediction, as well as sentiment scores for each sentiment class
   * (Positive, Negative, and Neutral) for the document and each sentence within it. See the <a
   * href="https://aka.ms/talangs">Supported languages in Text Analytics API</a> for the list of enabled
   * languages.
   * @param options The options parameters.
   */
  sentiment(
    options?: coreHttp.OperationOptions
  ): Promise<Models.TextAnalyticsClientSentimentResponse> {
    return this.sendOperationRequest(
      { options },
      sentimentOperationSpec
    ) as Promise<Models.TextAnalyticsClientSentimentResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const entitiesRecognitionGeneralOperationSpec: coreHttp.OperationSpec = {
  path: "/entities/recognition/general",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.EntitiesResult
    },
    default: {
      bodyMapper: Mappers.TextAnalyticsError
    }
  },
  serializer
};
const entitiesRecognitionPiiOperationSpec: coreHttp.OperationSpec = {
  path: "/entities/recognition/pii",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.EntitiesResult
    },
    default: {
      bodyMapper: Mappers.TextAnalyticsError
    }
  },
  serializer
};
const entitiesLinkingOperationSpec: coreHttp.OperationSpec = {
  path: "/entities/linking",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.EntityLinkingResult
    },
    default: {
      bodyMapper: Mappers.TextAnalyticsError
    }
  },
  serializer
};
const keyPhrasesOperationSpec: coreHttp.OperationSpec = {
  path: "/keyPhrases",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.KeyPhraseResult
    },
    default: {
      bodyMapper: Mappers.TextAnalyticsError
    }
  },
  serializer
};
const languagesOperationSpec: coreHttp.OperationSpec = {
  path: "/languages",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.LanguageResult
    },
    default: {
      bodyMapper: Mappers.TextAnalyticsError
    }
  },
  serializer
};
const sentimentOperationSpec: coreHttp.OperationSpec = {
  path: "/sentiment",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SentimentResponse
    },
    default: {
      bodyMapper: Mappers.TextAnalyticsError
    }
  },
  serializer
};

// Operation Specifications

export {
  TextAnalyticsClient,
  TextAnalyticsClientContext,
  Models as TextAnalyticsModels,
  Mappers as TextAnalyticsMappers
};
