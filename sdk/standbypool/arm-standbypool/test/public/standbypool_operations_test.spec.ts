/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { env, Recorder, isPlaybackMode } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert, beforeEach, afterEach, it, describe } from "vitest";
import { createRecorder } from "./utils/recordedClient.js";
import { StandbyPoolManagementClient } from "../../src/standbyPoolManagementClient.js";

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("StandbyPool test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: StandbyPoolManagementClient;
  let resourceGroup: string;

  beforeEach(async (context) => {
    process.env.SystemRoot = process.env.SystemRoot || "C:\\Windows";
    recorder = await createRecorder(context);
    subscriptionId = env.SUBSCRIPTION_ID || "";
    // This is an example of how the environment variables are used
    const credential = createTestCredential();
    client = new StandbyPoolManagementClient(
      credential,
      subscriptionId,
      recorder.configureClientOptions({}),
    );
    resourceGroup = "myjstest";
  });

  afterEach(async function () {
    await recorder.stop();
  });

  it.only("operations list test", async function () {
    const resArray = new Array();
    for await (let item of client.operations.list()) {
      resArray.push(item);
    }
    assert.notEqual(resArray.length, 0);
  });

  it("standbyContainerGroupPools create test", async function () {
    const result = await client.standbyContainerGroupPools.createOrUpdate(
      resourceGroup,
      "pool",
      {
        properties: {
          elasticityProfile: { maxReadyCapacity: 688, refillPolicy: "always" },
          containerGroupProperties: {
            containerGroupProfile: {
              id: "/subscriptions/" + subscriptionId + "/resourceGroups/myjstest/providers/Microsoft.ContainerInstance/containerGroups/testcontainerinstence",
              revision: 1,
            },
            subnetIds: [
              {
                id: "/subscriptions/" + subscriptionId + "/resourceGroups/myjstest/providers/Microsoft.Network/virtualNetworks/testvn/subnets/testSubnet",
              },
            ],
          },
        },
        tags: {},
        location: "West US",
      },
    );
    assert.equal(result.name, "pool")
  });

  it("standbyContainerGroupPools get test", async function () {
    const res = await client.standbyContainerGroupPools.get(
      resourceGroup,
      "pool"
    );
    assert.equal(res.name, "pool");
  });

  it("standbyContainerGroupPools list test", async function () {
    const resArray = new Array();
    for await (let item of client.standbyContainerGroupPools.listByResourceGroup(resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("standbyContainerGroupPools delete test", async function () {
    const resArray = new Array();
    await client.standbyContainerGroupPools.delete(resourceGroup, "pool"
    )
    for await (let item of client.standbyContainerGroupPools.listByResourceGroup(resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });

});
