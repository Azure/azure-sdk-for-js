/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { StandbyVirtualMachines } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { StandbyPoolManagementClient } from "../standbyPoolManagementClient";
import {
  StandbyVirtualMachineResource,
  StandbyVirtualMachinesListByStandbyVirtualMachinePoolResourceNextOptionalParams,
  StandbyVirtualMachinesListByStandbyVirtualMachinePoolResourceOptionalParams,
  StandbyVirtualMachinesListByStandbyVirtualMachinePoolResourceResponse,
  StandbyVirtualMachinesGetOptionalParams,
  StandbyVirtualMachinesGetResponse,
  StandbyVirtualMachinesListByStandbyVirtualMachinePoolResourceNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing StandbyVirtualMachines operations. */
export class StandbyVirtualMachinesImpl implements StandbyVirtualMachines {
  private readonly client: StandbyPoolManagementClient;

  /**
   * Initialize a new instance of the class StandbyVirtualMachines class.
   * @param client Reference to the service client
   */
  constructor(client: StandbyPoolManagementClient) {
    this.client = client;
  }

  /**
   * List StandbyVirtualMachineResource resources by StandbyVirtualMachinePoolResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param standbyVirtualMachinePoolName Name of the standby virtual machine pool
   * @param options The options parameters.
   */
  public listByStandbyVirtualMachinePoolResource(
    resourceGroupName: string,
    standbyVirtualMachinePoolName: string,
    options?: StandbyVirtualMachinesListByStandbyVirtualMachinePoolResourceOptionalParams,
  ): PagedAsyncIterableIterator<StandbyVirtualMachineResource> {
    const iter = this.listByStandbyVirtualMachinePoolResourcePagingAll(
      resourceGroupName,
      standbyVirtualMachinePoolName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByStandbyVirtualMachinePoolResourcePagingPage(
          resourceGroupName,
          standbyVirtualMachinePoolName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByStandbyVirtualMachinePoolResourcePagingPage(
    resourceGroupName: string,
    standbyVirtualMachinePoolName: string,
    options?: StandbyVirtualMachinesListByStandbyVirtualMachinePoolResourceOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<StandbyVirtualMachineResource[]> {
    let result: StandbyVirtualMachinesListByStandbyVirtualMachinePoolResourceResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByStandbyVirtualMachinePoolResource(
        resourceGroupName,
        standbyVirtualMachinePoolName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByStandbyVirtualMachinePoolResourceNext(
        resourceGroupName,
        standbyVirtualMachinePoolName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByStandbyVirtualMachinePoolResourcePagingAll(
    resourceGroupName: string,
    standbyVirtualMachinePoolName: string,
    options?: StandbyVirtualMachinesListByStandbyVirtualMachinePoolResourceOptionalParams,
  ): AsyncIterableIterator<StandbyVirtualMachineResource> {
    for await (const page of this.listByStandbyVirtualMachinePoolResourcePagingPage(
      resourceGroupName,
      standbyVirtualMachinePoolName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List StandbyVirtualMachineResource resources by StandbyVirtualMachinePoolResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param standbyVirtualMachinePoolName Name of the standby virtual machine pool
   * @param options The options parameters.
   */
  private _listByStandbyVirtualMachinePoolResource(
    resourceGroupName: string,
    standbyVirtualMachinePoolName: string,
    options?: StandbyVirtualMachinesListByStandbyVirtualMachinePoolResourceOptionalParams,
  ): Promise<StandbyVirtualMachinesListByStandbyVirtualMachinePoolResourceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, standbyVirtualMachinePoolName, options },
      listByStandbyVirtualMachinePoolResourceOperationSpec,
    );
  }

  /**
   * Get a StandbyVirtualMachineResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param standbyVirtualMachinePoolName Name of the standby virtual machine pool
   * @param standbyVirtualMachineName Name of the standby virtual machine
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    standbyVirtualMachinePoolName: string,
    standbyVirtualMachineName: string,
    options?: StandbyVirtualMachinesGetOptionalParams,
  ): Promise<StandbyVirtualMachinesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        standbyVirtualMachinePoolName,
        standbyVirtualMachineName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * ListByStandbyVirtualMachinePoolResourceNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param standbyVirtualMachinePoolName Name of the standby virtual machine pool
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByStandbyVirtualMachinePoolResource method.
   * @param options The options parameters.
   */
  private _listByStandbyVirtualMachinePoolResourceNext(
    resourceGroupName: string,
    standbyVirtualMachinePoolName: string,
    nextLink: string,
    options?: StandbyVirtualMachinesListByStandbyVirtualMachinePoolResourceNextOptionalParams,
  ): Promise<StandbyVirtualMachinesListByStandbyVirtualMachinePoolResourceNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, standbyVirtualMachinePoolName, nextLink, options },
      listByStandbyVirtualMachinePoolResourceNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByStandbyVirtualMachinePoolResourceOperationSpec: coreClient.OperationSpec =
  {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StandbyPool/standbyVirtualMachinePools/{standbyVirtualMachinePoolName}/standbyVirtualMachines",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: Mappers.StandbyVirtualMachineResourceListResult,
      },
      default: {
        bodyMapper: Mappers.ErrorResponse,
      },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
      Parameters.$host,
      Parameters.subscriptionId,
      Parameters.resourceGroupName,
      Parameters.standbyVirtualMachinePoolName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
  };
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StandbyPool/standbyVirtualMachinePools/{standbyVirtualMachinePoolName}/standbyVirtualMachines/{standbyVirtualMachineName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StandbyVirtualMachineResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.standbyVirtualMachinePoolName,
    Parameters.standbyVirtualMachineName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByStandbyVirtualMachinePoolResourceNextOperationSpec: coreClient.OperationSpec =
  {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: Mappers.StandbyVirtualMachineResourceListResult,
      },
      default: {
        bodyMapper: Mappers.ErrorResponse,
      },
    },
    urlParameters: [
      Parameters.$host,
      Parameters.nextLink,
      Parameters.subscriptionId,
      Parameters.resourceGroupName,
      Parameters.standbyVirtualMachinePoolName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
  };
