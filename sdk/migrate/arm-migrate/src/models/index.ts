/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * Error contract returned when some exception occurs in Rest API.
 */
export interface HealthErrorDetails {
  /**
   * Gets the error ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: number;
  /**
   * Gets the error name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly code?: string;
  /**
   * Gets the error message.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * Gets the possible causes of error.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly possibleCauses?: string;
  /**
   * Gets the recommended action to resolve error.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly recommendedAction?: string;
  /**
   * Gets the error severity.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly severity?: string;
  /**
   * Gets the error summary message.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly summaryMessage?: string;
  /**
   * Gets the message parameters.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly messageParameters?: { [propertyName: string]: string };
}

/**
 * Class for cluster properties.
 */
export interface HyperVClusterProperties {
  /**
   * Gets the timestamp marking Hyper-V cluster creation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdTimestamp?: string;
  /**
   * Gets the timestamp marking last updated on the Hyper-V cluster.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly updatedTimestamp?: string;
  /**
   * Gets or sets the FQDN/IPAddress of the Hyper-V cluster.
   */
  fqdn?: string;
  /**
   * Gets the functional level of the Hyper-V cluster.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly functionalLevel?: number;
  /**
   * Gets the status of the Hyper-V cluster.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: string;
  /**
   * Gets or sets Run as account ID of the Hyper-V cluster.
   */
  runAsAccountId?: string;
  /**
   * Gets or sets list of hosts (FQDN) currently being tracked by the cluster.
   */
  hostFqdnList?: string[];
  /**
   * Gets the errors.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: HealthErrorDetails[];
}

/**
 * Cluster REST Resource.
 */
export interface HyperVCluster {
  /**
   * Gets the relative URL to get this cluster.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Gets or sets the Name of the cluster.
   */
  name?: string;
  /**
   * Handled by resource provider. Type = Microsoft.VMWare/hyperVSites/clusters.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Gets or sets nested properties.
   */
  properties?: HyperVClusterProperties;
}

/**
 * Collection of Hyper-V clusters.
 */
export interface HyperVClusterCollection {
  /**
   * Gets the list of clusters.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: HyperVCluster[];
  /**
   * Gets the value of next link.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Class for host properties.
 */
export interface HyperVHostProperties {
  /**
   * Gets the timestamp marking Hyper-V host creation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdTimestamp?: string;
  /**
   * Gets the timestamp marking last updated on the Hyper-V host.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly updatedTimestamp?: string;
  /**
   * Gets or sets the FQDN/IPAddress of the Hyper-V host.
   */
  fqdn?: string;
  /**
   * Gets or sets the run as account ID of the Hyper-V host.
   */
  runAsAccountId?: string;
  /**
   * Gets the version of the Hyper-V host.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly version?: string;
  /**
   * Gets the errors.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: HealthErrorDetails[];
}

/**
 * Host REST Resource.
 */
export interface HyperVHost {
  /**
   * Gets the relative URL to get this host.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Gets or sets the name of the host.
   */
  name?: string;
  /**
   * Handled by resource provider. Type = Microsoft.OffAzure/hyperVSites/hosts.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Gets or sets nested properties.
   */
  properties?: HyperVHostProperties;
}

/**
 * Collection of Hyper-V hosts.
 */
export interface HyperVHostCollection {
  /**
   * Gets the list of hosts.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: HyperVHost[];
  /**
   * Gets the value of next link.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Error contract returned when some exception occurs in Rest API.
 */
export interface ErrorDetails {
  /**
   * Gets the error code.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly code?: string;
  /**
   * Gets the error message.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * Gets the possible causes of error.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly possibleCauses?: string;
  /**
   * Gets the recommended action to resolve error.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly recommendedAction?: string;
  /**
   * Gets the error severity.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly severity?: string;
  /**
   * Gets a value indicating whether the error originated from a agent or not.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isAgentReportedError?: boolean;
  /**
   * Gets the agent error code.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly agentErrorCode?: string;
  /**
   * Gets the error message from the agent.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly agentErrorMessage?: string;
  /**
   * Gets possible causes for the agent error.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly agentErrorPossibleCauses?: string;
  /**
   * Gets the recommended action for the agent error.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly agentErrorRecommendedAction?: string;
}

/**
 * Class for machine properties.
 */
export interface JobProperties {
  /**
   * Gets or sets the display name of the Job.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly displayName?: string;
  /**
   * Gets the client request Id used in the operation execution context.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly clientRequestId?: string;
  /**
   * Gets the activity Id used in the operation execution context.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly activityId?: string;
  /**
   * Gets the errors.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ErrorDetails[];
}

/**
 * Job REST Resource.
 */
export interface HyperVJob {
  /**
   * Relative URL to get this Sites.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Gets the Name of the Sites.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Handled by resource provider. Type = Microsoft.OffAzure/HyperVSites/Jobs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Gets nested properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly properties?: JobProperties;
  /**
   * Gets operation status.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: string;
  /**
   * Gets operation start time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startTime?: string;
  /**
   * Gets operation end time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endTime?: string;
}

/**
 * Collection of Hyper-V jobs.
 */
export interface HyperVJobCollection {
  /**
   * Gets the list of jobs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: HyperVJob[];
  /**
   * Gets the value of next link.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Second level object returned as part of Machine REST resource.
 */
export interface HyperVDisk {
  /**
   * Id of the disk.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly instanceId?: string;
  /**
   * VHD Id of the disk.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly vhdId?: string;
  /**
   * Bytes allocated for the disk.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly maxSizeInBytes?: number;
  /**
   * Name of the disk.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Type of the disk.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly diskType?: string;
  /**
   * LUN of the disk.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lun?: number;
  /**
   * Path of the disk.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly path?: string;
}

/**
 * Second level object represented in responses as part of Machine REST resource.
 */
export interface HyperVNetworkAdapter {
  /**
   * Network Id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly networkId?: string;
  /**
   * Name of the VM subnet within the virtual network the NIC is attached to.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly subnetName?: string;
  /**
   * Static IP address.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly staticIpAdress?: string;
  /**
   * Mac address of the NIC.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nicType?: string;
  /**
   * NIC Id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nicId?: string;
  /**
   * Mac address of the NIC.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly macAddress?: string;
  /**
   * IP addresses for the machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly ipAddressList?: string[];
  /**
   * Network Name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly networkName?: string;
  /**
   * Type of the IP address.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly ipAddressType?: string;
}

/**
 * Second level object returned as part of Machine REST resource.
 */
export interface OperatingSystem {
  /**
   * Type of the operating system.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly osType?: string;
  /**
   * Name of the operating system.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly osName?: string;
  /**
   * Version of the operating system.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly osVersion?: string;
}

/**
 * Class for machine properties.
 */
export interface HyperVMachineProperties {
  /**
   * Host FQDN/IPAddress.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly hostFqdn?: string;
  /**
   * Host ARM ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly hostId?: string;
  /**
   * Cluster FQDN/IPAddress.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly clusterFqdn?: string;
  /**
   * Cluster ARM ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly clusterId?: string;
  /**
   * Management server type captured as a string representation of the
   * {HyperVMachine.HyperVMachineProperties.ManagementServerType} enumeration.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly managementServerType?: string;
  /**
   * Generation of the virtual machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly generation?: number;
  /**
   * VM version.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly version?: string;
  /**
   * Value indicating whether the VM is highly available. Possible values include: 'Unknown', 'No',
   * 'Yes'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly highAvailability?: HighAvailability;
  /**
   * Max memory of the virtual machine in MB.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly maxMemoryMB?: number;
  /**
   * Firmware of the machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly firmware?: string;
  /**
   * Value indicating whether dynamic memory is enabled for the VM.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isDynamicMemoryEnabled?: boolean;
  /**
   * Disks attached to the machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly disks?: HyperVDisk[];
  /**
   * Network adapters attached to the machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly networkAdapters?: HyperVNetworkAdapter[];
  /**
   * Display name of the machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly displayName?: string;
  /**
   * Number of Processor Cores allocated for the machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly numberOfProcessorCore?: number;
  /**
   * Allocated Memory in MB.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly allocatedMemoryInMB?: number;
  /**
   * Root location of the VM configuration file.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly vmConfigurationFileLocation?: string;
  /**
   * Operating System Details installed on the machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly operatingSystemDetails?: OperatingSystem;
  /**
   * Timestamp marking machine creation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdTimestamp?: string;
  /**
   * Timestamp marking last updated on the machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly updatedTimestamp?: string;
  /**
   * On-premise Instance UUID of the machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly instanceUuid?: string;
  /**
   * Machine power status.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly powerStatus?: string;
  /**
   * Machine BIOS serial number.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly biosSerialNumber?: string;
  /**
   * Machine FQDN.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly vmFqdn?: string;
  /**
   * Value indicating whether VM is deleted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isDeleted?: boolean;
  /**
   * Errors for machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: HealthErrorDetails[];
}

/**
 * Machine REST Resource.
 */
export interface HyperVMachine {
  /**
   * Relative URL to get this Sites.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Gets the Name of the Sites.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Handled by resource provider. Type = Microsoft.OffAzure/HyperVSites/Machines.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Gets nested properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly properties?: HyperVMachineProperties;
}

/**
 * Collection of Hyper-V machines.
 */
export interface HyperVMachineCollection {
  /**
   * Gets the list of machines.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: HyperVMachine[];
  /**
   * Gets the value of next link.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Class for operation status errors.
 */
export interface OperationStatusError {
  /**
   * Gets the error code.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly code?: string;
  /**
   * Gets the error message.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
}

/**
 * Operation status REST resource.
 */
export interface OperationStatus {
  /**
   * Gets the Id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Gets the operation name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Gets the status of the operation. ARM expects the terminal status to be one of
   * Succeeded/ Failed/ Canceled. All other values imply that the operation is still running.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: string;
  /**
   * Gets the start time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startTime?: string;
  /**
   * Gets the start time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endTime?: string;
  /**
   * Gets the error.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly error?: OperationStatusError;
  /**
   * Gets the custom data.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly properties?: any;
}

/**
 * Class for run as account properties.
 */
export interface RunAsAccountProperties {
  /**
   * Display name of the run as account.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly displayName?: string;
  /**
   * Timestamp marking run as account creation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdTimestamp?: string;
  /**
   * Timestamp marking last updated on the run as account.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly updatedTimestamp?: string;
}

/**
 * Run as account REST Resource.
 */
export interface HyperVRunAsAccount {
  /**
   * Relative URL to get this run as account.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Gets the Name of the Sites.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Handled by resource provider. Type = Microsoft.OffAzure/HyperVSites/RunAsAccounts.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Gets nested properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly properties?: RunAsAccountProperties;
}

/**
 * Collection of Hyper-V run as accounts.
 */
export interface HyperVRunAsAccountCollection {
  /**
   * Gets the list of run as accounts.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: HyperVRunAsAccount[];
  /**
   * Gets the value of next link.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Class for site properties.
 */
export interface SiteSpnProperties {
  /**
   * Gets or sets the tenant Id for the service principal with which the on-premise
   * management/data plane components would communicate with our Azure services.
   */
  tenantId?: string;
  /**
   * Gets or sets the application/client Id for the service principal with which the
   * on-premise management/data plane components would communicate with our Azure
   * services.
   */
  applicationId?: string;
  /**
   * Gets or sets the object Id of the service principal with which the on-premise
   * management/data plane components would communicate with our Azure services.
   */
  objectId?: string;
  /**
   * Gets or sets the intended audience for the service principal.
   */
  audience?: string;
  /**
   * Gets or sets the AAD Authority URL which was used to request the token for the
   * service principal.
   */
  aadAuthority?: string;
  /**
   * Gets or sets the raw certificate data for building certificate expiry flows.
   */
  rawCertData?: string;
}

/**
 * Class for site agent properties.
 */
export interface SiteAgentProperties {
  /**
   * Gets the ID of the agent.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Gets the version of the agent.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly version?: string;
  /**
   * Gets the last heartbeat time of the agent in UTC.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastHeartBeatUtc?: Date;
  /**
   * Gets or sets the key vault URI.
   */
  keyVaultUri?: string;
  /**
   * Gets or sets the key vault ARM Id.
   */
  keyVaultId?: string;
}

/**
 * Class for site properties.
 */
export interface SiteProperties {
  /**
   * Gets or sets the service principal identity details used by agent for communication
   * to the service.
   */
  servicePrincipalIdentityDetails?: SiteSpnProperties;
  /**
   * Gets or sets the on-premises agent details.
   */
  agentDetails?: SiteAgentProperties;
  /**
   * Gets the service endpoint.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serviceEndpoint?: string;
  /**
   * Gets or sets the ARM ID of migration hub solution for SDS.
   */
  discoverySolutionId?: string;
  /**
   * Gets or sets the Appliance Name.
   */
  applianceName?: string;
}

/**
 * Site REST Resource.
 */
export interface HyperVSite {
  /**
   * Gets the relative URL to get this Site.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Gets or sets the name of the Hyper-V site.
   */
  name?: string;
  /**
   * Handled by resource provider. Type = Microsoft.OffAzure/HyperVSites.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Gets or sets the eTag for concurrency control.
   */
  eTag?: string;
  /**
   * Gets or sets the Azure location in which Sites is created.
   */
  location?: string;
  /**
   * Gets or sets the nested properties.
   */
  properties?: SiteProperties;
}

/**
 * Hyper-V site usage.
 */
export interface HyperVSiteUsage {
  /**
   * Gets or sets the number of machines discovered in the site.
   */
  machineCount?: number;
  /**
   * Gets or sets the number of run as accounts in the site.
   */
  runAsAccountCount?: number;
  /**
   * Gets or sets the number of hosts part of the site.
   */
  hostCount?: number;
  /**
   * Gets or sets the number of clusters part of the site.
   */
  clusterCount?: number;
}

/**
 * The site health summary model.
 */
export interface SiteHealthSummary {
  /**
   * Gets the appliance name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly applianceName?: string;
  /**
   * Gets the error message.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errorMessage?: string;
  /**
   * Gets the summary message.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly summaryMessage?: string;
  /**
   * Gets the error Id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errorId?: number;
  /**
   * Gets the error code.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errorCode?: string;
  /**
   * Gets or sets the count of affected objects.
   */
  affectedObjectsCount?: number;
  /**
   * Gets or sets the hit count of the error.
   */
  hitCount?: number;
  /**
   * Gets the severity of error.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly severity?: string;
  /**
   * Gets the remediation guidance.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly remediationGuidance?: string;
  /**
   * Gets the affected resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly affectedResourceType?: string;
  /**
   * Gets or sets the affected resources.
   */
  affectedResources?: string[];
}

/**
 * Collection of SiteHealthSummary.
 */
export interface SiteHealthSummaryCollection {
  /**
   * Gets the list of SiteHealthSummary.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: SiteHealthSummary[];
  /**
   * Gets the value of next link.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Job REST Resource.
 */
export interface VMwareJob {
  /**
   * Relative URL to get this Sites.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Gets the Name of the Sites.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Handled by resource provider. Type = Microsoft.OffAzure/VMWareSites/Jobs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Gets nested properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly properties?: JobProperties;
  /**
   * Gets operation status.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: string;
  /**
   * Gets operation start time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startTime?: string;
  /**
   * Gets operation end time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endTime?: string;
}

/**
 * Collection of VMware jobs.
 */
export interface VMwareJobCollection {
  /**
   * Gets the list of jobs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: VMwareJob[];
  /**
   * Gets the value of next link.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Second level object returned as part of Machine REST resource.
 */
export interface VMwareDisk {
  /**
   * Disk UUID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly uuid?: string;
  /**
   * Label of the disk.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly label?: string;
  /**
   * The provisioning policy of the disk.
   * It is Thin or Thick or Unknown for the VMWare VMDK.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly diskProvisioningPolicy?: string;
  /**
   * The scrubbing policy of disks which can be
   * eagerly zeroed or lazily zeroed.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly diskScrubbingPolicy?: string;
  /**
   * Bytes allocated for the disk.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly maxSizeInBytes?: number;
  /**
   * Name of the disk.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Type of the disk.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly diskType?: string;
  /**
   * LUN of the disk.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lun?: number;
  /**
   * Path of the disk.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly path?: string;
}

/**
 * Second level object represented in responses as part of Machine REST resource.
 */
export interface VMwareNetworkAdapter {
  /**
   * Label of the NIC.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly label?: string;
  /**
   * NIC Id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nicId?: string;
  /**
   * Mac address of the NIC.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly macAddress?: string;
  /**
   * IP addresses for the machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly ipAddressList?: string[];
  /**
   * Network Name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly networkName?: string;
  /**
   * Type of the IP address.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly ipAddressType?: string;
}

/**
 * Class for machine properties.
 */
export interface VMwareMachineProperties {
  /**
   * Scope of the data center.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly dataCenterScope?: string;
  /**
   * Firmware of the machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly firmware?: string;
  /**
   * User description of the machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly description?: string;
  /**
   * VCenter FQDN/IPAddress.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly vCenterFQDN?: string;
  /**
   * VCenter ARM ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly vCenterId?: string;
  /**
   * VMware tools status.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly vMwareToolsStatus?: string;
  /**
   * Value indicating whether change tracking is supported.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly changeTrackingSupported?: boolean;
  /**
   * Value indicating whether change tracking is enabled.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly changeTrackingEnabled?: boolean;
  /**
   * Maximum number of snapshots for the VM.
   * Default value is -1.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly maxSnapshots?: number;
  /**
   * Disks attached to the machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly disks?: VMwareDisk[];
  /**
   * Indicates whether the host is in maintenance mode.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly hostInMaintenanceMode?: boolean;
  /**
   * The host name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly hostName?: string;
  /**
   * The host power state.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly hostPowerState?: string;
  /**
   * The host version.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly hostVersion?: string;
  /**
   * Network adapters attached to the machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly networkAdapters?: VMwareNetworkAdapter[];
  /**
   * Display name of the machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly displayName?: string;
  /**
   * Number of Processor Cores allocated for the machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly numberOfProcessorCore?: number;
  /**
   * Allocated Memory in MB.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly allocatedMemoryInMB?: number;
  /**
   * Root location of the VM configuration file.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly vmConfigurationFileLocation?: string;
  /**
   * Operating System Details installed on the machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly operatingSystemDetails?: OperatingSystem;
  /**
   * Timestamp marking machine creation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdTimestamp?: string;
  /**
   * Timestamp marking last updated on the machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly updatedTimestamp?: string;
  /**
   * On-premise Instance UUID of the machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly instanceUuid?: string;
  /**
   * Machine power status.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly powerStatus?: string;
  /**
   * Machine BIOS serial number.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly biosSerialNumber?: string;
  /**
   * Machine FQDN.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly vmFqdn?: string;
  /**
   * Value indicating whether VM is deleted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isDeleted?: boolean;
  /**
   * Errors for machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: HealthErrorDetails[];
}

/**
 * Machine REST Resource.
 */
export interface VMwareMachine {
  /**
   * Relative URL to get this Sites.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Gets the Name of the Sites.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Handled by resource provider. Type = Microsoft.OffAzure/VMWareSites/Machines.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Gets nested properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly properties?: VMwareMachineProperties;
}

/**
 * Collection of VMware machines.
 */
export interface VMwareMachineCollection {
  /**
   * Gets the list of machines.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: VMwareMachine[];
  /**
   * Gets the value of next link.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Run as account REST Resource.
 */
export interface VMwareRunAsAccount {
  /**
   * Relative URL to get this run as account.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Gets the Name of the Run as account.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Handled by resource provider. Type = Microsoft.OffAzure/VMWareSites/RunAsAccounts.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Gets nested properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly properties?: RunAsAccountProperties;
}

/**
 * Collection of VMware run as accounts.
 */
export interface VMwareRunAsAccountCollection {
  /**
   * Gets the list of run as accounts.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: VMwareRunAsAccount[];
  /**
   * Gets the value of next link.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Site REST Resource.
 */
export interface VMwareSite {
  /**
   * Gets the relative URL to get this Site.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Gets or sets the name of the VMware site.
   */
  name?: string;
  /**
   * Handled by resource provider. Type = Microsoft.OffAzure/VMWareSites.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Gets or sets the eTag for concurrency control.
   */
  eTag?: string;
  /**
   * Gets or sets the Azure location in which Sites is created.
   */
  location?: string;
  /**
   * Gets or sets the nested properties.
   */
  properties?: SiteProperties;
}

/**
 * VMware site usage.
 */
export interface VMwareSiteUsage {
  /**
   * Gets or sets the number of machines discovered in the site.
   */
  machineCount?: number;
  /**
   * Gets or sets the number of run as accounts in the site.
   */
  runAsAccountCount?: number;
  /**
   * Gets or sets the number of vCenters part of the site.
   */
  vCenterCount?: number;
}

/**
 * Class for vCenter properties.
 */
export interface VCenterProperties {
  /**
   * Gets the timestamp marking vCenter creation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdTimestamp?: string;
  /**
   * Gets the timestamp marking last updated on the vCenter.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly updatedTimestamp?: string;
  /**
   * Gets or sets the FQDN/IPAddress of the vCenter.
   */
  fqdn?: string;
  /**
   * Gets or sets the port of the vCenter.
   */
  port?: string;
  /**
   * Gets or sets the run as account ID of the vCenter.
   */
  runAsAccountId?: string;
  /**
   * Gets the version of the vCenter.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly version?: string;
  /**
   * Gets the performance statistics enabled on the vCenter.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly perfStatisticsLevel?: string;
  /**
   * Gets the instance UUID of the vCenter.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly instanceUuid?: string;
  /**
   * Gets the errors.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: HealthErrorDetails[];
}

/**
 * VCenter REST Resource.
 */
export interface VCenter {
  /**
   * Gets the relative URL to get this vCenter.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Gets or sets the name of the vCenter.
   */
  name?: string;
  /**
   * Handled by resource provider. Type = Microsoft.OffAzure/VMWareSites/VCenters.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Gets or sets vCenter nested properties.
   */
  properties?: VCenterProperties;
}

/**
 * Collection of vCenter.
 */
export interface VCenterCollection {
  /**
   * Gets the list of vCenter.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: VCenter[];
  /**
   * Gets the value of next link.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Job REST Resource.
 */
export interface ImportJob {
  /**
   * Relative URL to get this Sites.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Gets the Name of the Sites.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Handled by resource provider. Type = Microsoft.OffAzure/VMWareSites/Jobs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Gets nested properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly properties?: JobProperties;
  /**
   * Gets operation status.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: string;
  /**
   * Gets operation start time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startTime?: string;
  /**
   * Gets operation end time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endTime?: string;
}

/**
 * Collection of VMware jobs.
 */
export interface ImportJobCollection {
  /**
   * Gets the list of jobs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: ImportJob[];
  /**
   * Gets the value of next link.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Class representing the imported machine web model.
 */
export interface ImportDisk {
  /**
   * Disk read throughput.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly megabytesPerSecondOfRead?: number;
  /**
   * Disk write throughput.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly megabytesPerSecondOfWrite?: number;
  /**
   * Disk read IOPS.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly numberOfReadOperationsPerSecond?: number;
  /**
   * Disk write IOPS.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly numberOfWriteOperationsPerSecond?: number;
  /**
   * Bytes allocated for the disk.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly maxSizeInBytes?: number;
  /**
   * Name of the disk.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Type of the disk.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly diskType?: string;
  /**
   * LUN of the disk.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lun?: number;
  /**
   * Path of the disk.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly path?: string;
}

/**
 * Class for machine properties.
 */
export interface ImportMachineProperties {
  /**
   * Firmware of the machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly firmware?: string;
  /**
   * VCenter FQDN/IPAddress.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly vCenterFQDN?: string;
  /**
   * Disks attached to the machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly disks?: ImportDisk[];
  /**
   * Display name of the machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly displayName?: string;
  /**
   * Number of Processor Cores allocated for the machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly numberOfProcessorCore?: number;
  /**
   * Allocated Memory in MB.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly allocatedMemoryInMB?: number;
  /**
   * Root location of the VM configuration file.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly vmConfigurationFileLocation?: string;
  /**
   * Operating System Details installed on the machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly operatingSystemDetails?: OperatingSystem;
  /**
   * Timestamp marking machine creation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdTimestamp?: string;
  /**
   * Timestamp marking last updated on the machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly updatedTimestamp?: string;
  /**
   * On-premise Instance UUID of the machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly instanceUuid?: string;
  /**
   * Machine power status.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly powerStatus?: string;
  /**
   * Machine BIOS serial number.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly biosSerialNumber?: string;
  /**
   * Machine FQDN.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly vmFqdn?: string;
  /**
   * Value indicating whether VM is deleted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isDeleted?: boolean;
  /**
   * Errors for machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: HealthErrorDetails[];
}

/**
 * Machine REST Resource.
 */
export interface ImportMachine {
  /**
   * Relative URL to get this Sites.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Gets the Name of the Sites.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Handled by resource provider. Type = Microsoft.OffAzure/ImportSites/Machines.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Gets nested properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly properties?: ImportMachineProperties;
}

/**
 * Collection of Import machines.
 */
export interface ImportMachineCollection {
  /**
   * Gets the list of machines.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: ImportMachine[];
  /**
   * Gets the value of next link.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Class for site properties.
 */
export interface ImportSiteProperties {
  /**
   * Gets the service endpoint.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serviceEndpoint?: string;
  /**
   * Gets or sets the ARM ID of migration hub solution for SDS.
   */
  discoverySolutionId?: string;
}

/**
 * Site REST Resource.
 */
export interface ImportSite {
  /**
   * Gets the relative URL to get this Site.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Gets or sets the name of the Hyper-V site.
   */
  name?: string;
  /**
   * Handled by resource provider. Type = Microsoft.OffAzure/Sites.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Gets or sets the eTag for concurrency control.
   */
  eTag?: string;
  /**
   * Gets or sets the Azure location in which Sites is created.
   */
  location?: string;
  /**
   * Gets or sets the nested properties.
   */
  properties?: ImportSiteProperties;
}

/**
 * Import URI response class.
 */
export interface SasUriResponse {
  /**
   * Gets or sets the operation status ID.
   */
  jobId?: string;
  /**
   * Gets or sets the SAS URI.
   */
  uri?: string;
}

/**
 * Job class for server agent.
 */
export interface ServerJob {
  /**
   * Relative URL to get this Sites.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Gets the Name of the job.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Handled by resource provider. Type = Microsoft.OffAzure/serverSites/Jobs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Gets nested properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly properties?: JobProperties;
  /**
   * Gets operation status.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: string;
  /**
   * Gets operation start time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startTime?: string;
  /**
   * Gets operation end time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endTime?: string;
}

/**
 * Collection of Server jobs.
 */
export interface ServerJobCollection {
  /**
   * Gets the list of jobs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: ServerJob[];
  /**
   * Gets the value of next link.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Run as account REST Resource.
 */
export interface ServerRunAsAccount {
  /**
   * Relative URL to get this run as account.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Gets the Name of the Run as accounts.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Handled by resource provider. Type = Microsoft.OffAzure/serverSites/RunAsAccounts.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Gets nested properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly properties?: RunAsAccountProperties;
}

/**
 * Collection of server run as accounts.
 */
export interface ServerRunAsAccountCollection {
  /**
   * Gets the list of run as accounts.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: ServerRunAsAccount[];
  /**
   * Gets the value of next link.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Class for server properties.
 */
export interface ServerProperties {
  /**
   * Gets the timestamp marking server creation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdTimestamp?: string;
  /**
   * Gets the timestamp marking last updated on the server.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly updatedTimestamp?: string;
  /**
   * Gets or sets the FQDN/IPAddress of the server.
   */
  fqdn?: string;
  /**
   * Gets or sets the run as account ID of the server.
   */
  runAsAccountId?: string;
  /**
   * Gets or sets the unique IP of the server.
   */
  ip?: string[];
  /**
   * Gets or sets the Display name of the machine.
   */
  displayName?: string;
  /**
   * Gets or sets the Number of Processor Cores allocated for the machine.
   */
  numberOfProcessorCore?: number;
  /**
   * Gets or sets the Allocated Memory in MB.
   */
  allocatedMemoryInMB?: number;
  /**
   * Gets or sets the Operating System Details installed on the machine.
   */
  osType?: string;
  /**
   * Gets or sets the Operating System Details installed on the machine.
   */
  osName?: string;
  /**
   * Gets or sets the Operating System Details installed on the machine.
   */
  osVersion?: string;
  /**
   * Gets or sets the Machine power status.
   */
  powerStatus?: string;
  /**
   * Gets or sets the Machine BIOS serial number.
   */
  biosSerialNumber?: string;
  /**
   * Gets or sets the Bytes allocated for the disk.
   */
  diskSize?: number;
  /**
   * Gets or sets the Disk name.
   */
  diskName?: string;
}

/**
 * server REST Resource.
 */
export interface Server {
  /**
   * Gets the relative URL to get this server.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Gets or sets the name of the server.
   */
  name?: string;
  /**
   * Handled by resource provider. Type = Microsoft.OffAzure/serverSites/servers.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Gets or sets nested properties.
   */
  properties?: ServerProperties;
}

/**
 * Collection of servers.
 */
export interface ServerCollection {
  /**
   * Gets the list of servers.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: Server[];
  /**
   * Gets the value of next link.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Site REST Resource.
 */
export interface ServerSite {
  /**
   * Gets the relative URL to get this Site.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Gets or sets the name of the Server site.
   */
  name?: string;
  /**
   * Handled by resource provider. Type = Microsoft.OffAzure/serverSites.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Gets or sets the eTag for concurrency control.
   */
  eTag?: string;
  /**
   * Gets or sets the Azure location in which Sites is created.
   */
  location?: string;
  /**
   * Gets or sets the nested properties.
   */
  properties?: SiteProperties;
}

/**
 * Server site usage.
 */
export interface ServerSiteUsage {
  /**
   * Gets or sets the number of run as accounts in the site.
   */
  runAsAccountCount?: number;
  /**
   * Gets or sets the number of servers part of the site.
   */
  serverCount?: number;
}

/**
 * Optional Parameters.
 */
export interface HyperVClusterGetAllClustersInSiteOptionalParams extends msRest.RequestOptionsBase {
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface HyperVHostGetAllHostsInSiteOptionalParams extends msRest.RequestOptionsBase {
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface HyperVMachinesGetAllMachinesInSiteOptionalParams extends msRest.RequestOptionsBase {
  filter?: string;
  /**
   * Optional parameter for page size.
   */
  pageSize?: number;
  /**
   * Optional parameter for continuation token.
   */
  continuationToken?: string;
  /**
   * Total record count.
   */
  totalRecordCount?: number;
}

/**
 * Optional Parameters.
 */
export interface MachinesGetAllMachinesInSiteOptionalParams extends msRest.RequestOptionsBase {
  filter?: string;
  /**
   * Optional parameter for page size.
   */
  pageSize?: number;
  /**
   * Optional parameter for continuation token.
   */
  continuationToken?: string;
  /**
   * Total record count.
   */
  totalRecordCount?: number;
}

/**
 * Optional Parameters.
 */
export interface VCenterGetAllVCentersInSiteOptionalParams extends msRest.RequestOptionsBase {
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface ImportMachinesGetAllMachinesInSiteAsyncOptionalParams extends msRest.RequestOptionsBase {
  filter?: string;
  /**
   * Optional parameter for page size.
   */
  pageSize?: number;
  /**
   * Optional parameter for continuation token.
   */
  continuationToken?: string;
  /**
   * Total record count.
   */
  totalRecordCount?: number;
}

/**
 * Optional Parameters.
 */
export interface ServersGetAllMachinesInSiteOptionalParams extends msRest.RequestOptionsBase {
  filter?: string;
  /**
   * Optional parameter for page size.
   */
  pageSize?: number;
  /**
   * Optional parameter for continuation token.
   */
  continuationToken?: string;
  /**
   * Total record count.
   */
  totalRecordCount?: number;
}

/**
 * An interface representing MicrosoftAzureFDSWebRoleOptions.
 */
export interface MicrosoftAzureFDSWebRoleOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * Defines headers for PutCluster operation.
 */
export interface HyperVClusterPutClusterHeaders {
  /**
   * Tracking URL for long running operation.
   */
  azureAsyncOperation: string;
}

/**
 * Defines headers for PutHost operation.
 */
export interface HyperVHostPutHostHeaders {
  /**
   * Tracking URL for long running operation.
   */
  azureAsyncOperation: string;
}

/**
 * Defines headers for StopMachine operation.
 */
export interface HyperVMachinesStopMachineHeaders {
  /**
   * Tracking URL for long running operation.
   */
  azureAsyncOperation: string;
}

/**
 * Defines headers for RefreshSite operation.
 */
export interface HyperVSitesRefreshSiteHeaders {
  /**
   * Tracking URL for long running operation.
   */
  azureAsyncOperation: string;
}

/**
 * Defines headers for StopMachine operation.
 */
export interface MachinesStopMachineHeaders {
  /**
   * Tracking URL for long running operation.
   */
  azureAsyncOperation: string;
}

/**
 * Defines headers for StartMachine operation.
 */
export interface MachinesStartMachineHeaders {
  /**
   * Tracking URL for long running operation.
   */
  azureAsyncOperation: string;
}

/**
 * Defines headers for RefreshSite operation.
 */
export interface SitesRefreshSiteHeaders {
  /**
   * Tracking URL for long running operation.
   */
  azureAsyncOperation: string;
}

/**
 * Defines headers for PutVCenter operation.
 */
export interface VCenterPutVCenterHeaders {
  /**
   * Tracking URL for long running operation.
   */
  azureAsyncOperation: string;
}

/**
 * Defines headers for PutMachine operation.
 */
export interface ServersPutMachineHeaders {
  /**
   * Tracking URL for long running operation.
   */
  azureAsyncOperation: string;
}

/**
 * Defines headers for RefreshSite operation.
 */
export interface ServerSitesRefreshSiteHeaders {
  /**
   * Tracking URL for long running operation.
   */
  azureAsyncOperation: string;
}

/**
 * Defines values for HighAvailability.
 * Possible values include: 'Unknown', 'No', 'Yes'
 * @readonly
 * @enum {string}
 */
export type HighAvailability = 'Unknown' | 'No' | 'Yes';

/**
 * Contains response data for the getCluster operation.
 */
export type HyperVClusterGetClusterResponse = HyperVCluster & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HyperVCluster;
    };
};

/**
 * Contains response data for the putCluster operation.
 */
export type HyperVClusterPutClusterResponse = HyperVClusterPutClusterHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: HyperVClusterPutClusterHeaders;
    };
};

/**
 * Contains response data for the getAllClustersInSite operation.
 */
export type HyperVClusterGetAllClustersInSiteResponse = HyperVClusterCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HyperVClusterCollection;
    };
};

/**
 * Contains response data for the getHost operation.
 */
export type HyperVHostGetHostResponse = HyperVHost & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HyperVHost;
    };
};

/**
 * Contains response data for the putHost operation.
 */
export type HyperVHostPutHostResponse = HyperVHostPutHostHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: HyperVHostPutHostHeaders;
    };
};

/**
 * Contains response data for the getAllHostsInSite operation.
 */
export type HyperVHostGetAllHostsInSiteResponse = HyperVHostCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HyperVHostCollection;
    };
};

/**
 * Contains response data for the getJob operation.
 */
export type HyperVJobsGetJobResponse = HyperVJob & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HyperVJob;
    };
};

/**
 * Contains response data for the getAllJobsInSite operation.
 */
export type HyperVJobsGetAllJobsInSiteResponse = HyperVJobCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HyperVJobCollection;
    };
};

/**
 * Contains response data for the getMachine operation.
 */
export type HyperVMachinesGetMachineResponse = HyperVMachine & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HyperVMachine;
    };
};

/**
 * Contains response data for the getAllMachinesInSite operation.
 */
export type HyperVMachinesGetAllMachinesInSiteResponse = HyperVMachineCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HyperVMachineCollection;
    };
};

/**
 * Contains response data for the stopMachine operation.
 */
export type HyperVMachinesStopMachineResponse = HyperVMachinesStopMachineHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: HyperVMachinesStopMachineHeaders;
    };
};

/**
 * Contains response data for the getOperationStatus operation.
 */
export type HyperVOperationsStatusGetOperationStatusResponse = OperationStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationStatus;
    };
};

/**
 * Contains response data for the getRunAsAccount operation.
 */
export type HyperVRunAsAccountsGetRunAsAccountResponse = HyperVRunAsAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HyperVRunAsAccount;
    };
};

/**
 * Contains response data for the getAllRunAsAccountsInSite operation.
 */
export type HyperVRunAsAccountsGetAllRunAsAccountsInSiteResponse = HyperVRunAsAccountCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HyperVRunAsAccountCollection;
    };
};

/**
 * Contains response data for the getSite operation.
 */
export type HyperVSitesGetSiteResponse = HyperVSite & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HyperVSite;
    };
};

/**
 * Contains response data for the putSite operation.
 */
export type HyperVSitesPutSiteResponse = HyperVSite & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HyperVSite;
    };
};

/**
 * Contains response data for the patchSite operation.
 */
export type HyperVSitesPatchSiteResponse = HyperVSite & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HyperVSite;
    };
};

/**
 * Contains response data for the refreshSite operation.
 */
export type HyperVSitesRefreshSiteResponse = HyperVSitesRefreshSiteHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: HyperVSitesRefreshSiteHeaders;
    };
};

/**
 * Contains response data for the getSiteUsage operation.
 */
export type HyperVSitesGetSiteUsageResponse = HyperVSiteUsage & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HyperVSiteUsage;
    };
};

/**
 * Contains response data for the getSiteHealthSummary operation.
 */
export type HyperVSitesGetSiteHealthSummaryResponse = SiteHealthSummaryCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SiteHealthSummaryCollection;
    };
};

/**
 * Contains response data for the getJob operation.
 */
export type JobsGetJobResponse = VMwareJob & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VMwareJob;
    };
};

/**
 * Contains response data for the getAllJobsInSite operation.
 */
export type JobsGetAllJobsInSiteResponse = VMwareJobCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VMwareJobCollection;
    };
};

/**
 * Contains response data for the getMachine operation.
 */
export type MachinesGetMachineResponse = VMwareMachine & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VMwareMachine;
    };
};

/**
 * Contains response data for the getAllMachinesInSite operation.
 */
export type MachinesGetAllMachinesInSiteResponse = VMwareMachineCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VMwareMachineCollection;
    };
};

/**
 * Contains response data for the stopMachine operation.
 */
export type MachinesStopMachineResponse = MachinesStopMachineHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: MachinesStopMachineHeaders;
    };
};

/**
 * Contains response data for the startMachine operation.
 */
export type MachinesStartMachineResponse = MachinesStartMachineHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: MachinesStartMachineHeaders;
    };
};

/**
 * Contains response data for the getRunAsAccount operation.
 */
export type RunAsAccountsGetRunAsAccountResponse = VMwareRunAsAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VMwareRunAsAccount;
    };
};

/**
 * Contains response data for the getAllRunAsAccountsInSite operation.
 */
export type RunAsAccountsGetAllRunAsAccountsInSiteResponse = VMwareRunAsAccountCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VMwareRunAsAccountCollection;
    };
};

/**
 * Contains response data for the getSite operation.
 */
export type SitesGetSiteResponse = VMwareSite & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VMwareSite;
    };
};

/**
 * Contains response data for the putSite operation.
 */
export type SitesPutSiteResponse = VMwareSite & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VMwareSite;
    };
};

/**
 * Contains response data for the patchSite operation.
 */
export type SitesPatchSiteResponse = VMwareSite & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VMwareSite;
    };
};

/**
 * Contains response data for the refreshSite operation.
 */
export type SitesRefreshSiteResponse = SitesRefreshSiteHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: SitesRefreshSiteHeaders;
    };
};

/**
 * Contains response data for the getSiteUsage operation.
 */
export type SitesGetSiteUsageResponse = VMwareSiteUsage & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VMwareSiteUsage;
    };
};

/**
 * Contains response data for the getSiteHealthSummary operation.
 */
export type SitesGetSiteHealthSummaryResponse = SiteHealthSummaryCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SiteHealthSummaryCollection;
    };
};

/**
 * Contains response data for the getVCenter operation.
 */
export type VCenterGetVCenterResponse = VCenter & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VCenter;
    };
};

/**
 * Contains response data for the putVCenter operation.
 */
export type VCenterPutVCenterResponse = VCenterPutVCenterHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: VCenterPutVCenterHeaders;
    };
};

/**
 * Contains response data for the getAllVCentersInSite operation.
 */
export type VCenterGetAllVCentersInSiteResponse = VCenterCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VCenterCollection;
    };
};

/**
 * Contains response data for the getOperationStatus operation.
 */
export type VMwareOperationsStatusGetOperationStatusResponse = OperationStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationStatus;
    };
};

/**
 * Contains response data for the getJob operation.
 */
export type ImportJobsGetJobResponse = ImportJob & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImportJob;
    };
};

/**
 * Contains response data for the getAllJobsInSite operation.
 */
export type ImportJobsGetAllJobsInSiteResponse = ImportJobCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImportJobCollection;
    };
};

/**
 * Contains response data for the getMachineAsync operation.
 */
export type ImportMachinesGetMachineAsyncResponse = ImportMachine & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImportMachine;
    };
};

/**
 * Contains response data for the getAllMachinesInSiteAsync operation.
 */
export type ImportMachinesGetAllMachinesInSiteAsyncResponse = ImportMachineCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImportMachineCollection;
    };
};

/**
 * Contains response data for the getSiteAsync operation.
 */
export type ImportSitesGetSiteAsyncResponse = ImportSite & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImportSite;
    };
};

/**
 * Contains response data for the putSiteAsync operation.
 */
export type ImportSitesPutSiteAsyncResponse = ImportSite & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImportSite;
    };
};

/**
 * Contains response data for the getImportUriAsync operation.
 */
export type ImportSitesGetImportUriAsyncResponse = SasUriResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SasUriResponse;
    };
};

/**
 * Contains response data for the getExportUriAsync operation.
 */
export type ImportSitesGetExportUriAsyncResponse = SasUriResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SasUriResponse;
    };
};

/**
 * Contains response data for the getJob operation.
 */
export type ServerJobsGetJobResponse = ServerJob & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerJob;
    };
};

/**
 * Contains response data for the getAllJobsInSite operation.
 */
export type ServerJobsGetAllJobsInSiteResponse = ServerJobCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerJobCollection;
    };
};

/**
 * Contains response data for the getOperationStatus operation.
 */
export type ServerOperationsStatusGetOperationStatusResponse = OperationStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationStatus;
    };
};

/**
 * Contains response data for the getRunAsAccount operation.
 */
export type ServerRunAsAccountsGetRunAsAccountResponse = ServerRunAsAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerRunAsAccount;
    };
};

/**
 * Contains response data for the getAllRunAsAccountsInSite operation.
 */
export type ServerRunAsAccountsGetAllRunAsAccountsInSiteResponse = ServerRunAsAccountCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerRunAsAccountCollection;
    };
};

/**
 * Contains response data for the getMachine operation.
 */
export type ServersGetMachineResponse = Server & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Server;
    };
};

/**
 * Contains response data for the putMachine operation.
 */
export type ServersPutMachineResponse = ServersPutMachineHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ServersPutMachineHeaders;
    };
};

/**
 * Contains response data for the getAllMachinesInSite operation.
 */
export type ServersGetAllMachinesInSiteResponse = ServerCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerCollection;
    };
};

/**
 * Contains response data for the getSite operation.
 */
export type ServerSitesGetSiteResponse = ServerSite & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerSite;
    };
};

/**
 * Contains response data for the putSite operation.
 */
export type ServerSitesPutSiteResponse = ServerSite & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerSite;
    };
};

/**
 * Contains response data for the refreshSite operation.
 */
export type ServerSitesRefreshSiteResponse = ServerSitesRefreshSiteHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ServerSitesRefreshSiteHeaders;
    };
};

/**
 * Contains response data for the getSiteUsage operation.
 */
export type ServerSitesGetSiteUsageResponse = ServerSiteUsage & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerSiteUsage;
    };
};
