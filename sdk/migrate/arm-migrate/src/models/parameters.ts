/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  Project as ProjectMapper,
  Group as GroupMapper,
  UpdateGroupBody as UpdateGroupBodyMapper,
  Assessment as AssessmentMapper,
  HyperVCollector as HyperVCollectorMapper,
  ServerCollector as ServerCollectorMapper,
  VMwareCollector as VMwareCollectorMapper,
  ImportCollector as ImportCollectorMapper,
  PrivateEndpointConnection as PrivateEndpointConnectionMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2019-10-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const projectName: OperationURLParameter = {
  parameterPath: "projectName",
  mapper: {
    serializedName: "projectName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const project: OperationParameter = {
  parameterPath: ["options", "project"],
  mapper: ProjectMapper
};

export const assessmentOptionsName: OperationURLParameter = {
  parameterPath: "assessmentOptionsName",
  mapper: {
    serializedName: "assessmentOptionsName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const machineName: OperationURLParameter = {
  parameterPath: "machineName",
  mapper: {
    serializedName: "machineName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const groupName: OperationURLParameter = {
  parameterPath: "groupName",
  mapper: {
    serializedName: "groupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const group: OperationParameter = {
  parameterPath: ["options", "group"],
  mapper: GroupMapper
};

export const groupUpdateProperties: OperationParameter = {
  parameterPath: ["options", "groupUpdateProperties"],
  mapper: UpdateGroupBodyMapper
};

export const assessmentName: OperationURLParameter = {
  parameterPath: "assessmentName",
  mapper: {
    serializedName: "assessmentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const assessment: OperationParameter = {
  parameterPath: ["options", "assessment"],
  mapper: AssessmentMapper
};

export const assessedMachineName: OperationURLParameter = {
  parameterPath: "assessedMachineName",
  mapper: {
    serializedName: "assessedMachineName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const hyperVCollectorName: OperationURLParameter = {
  parameterPath: "hyperVCollectorName",
  mapper: {
    serializedName: "hyperVCollectorName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const collectorBody: OperationParameter = {
  parameterPath: ["options", "collectorBody"],
  mapper: HyperVCollectorMapper
};

export const serverCollectorName: OperationURLParameter = {
  parameterPath: "serverCollectorName",
  mapper: {
    serializedName: "serverCollectorName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const collectorBody1: OperationParameter = {
  parameterPath: ["options", "collectorBody"],
  mapper: ServerCollectorMapper
};

export const vmWareCollectorName: OperationURLParameter = {
  parameterPath: "vmWareCollectorName",
  mapper: {
    serializedName: "vmWareCollectorName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const collectorBody2: OperationParameter = {
  parameterPath: ["options", "collectorBody"],
  mapper: VMwareCollectorMapper
};

export const importCollectorName: OperationURLParameter = {
  parameterPath: "importCollectorName",
  mapper: {
    serializedName: "importCollectorName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const collectorBody3: OperationParameter = {
  parameterPath: ["options", "collectorBody"],
  mapper: ImportCollectorMapper
};

export const privateEndpointConnectionName: OperationURLParameter = {
  parameterPath: "privateEndpointConnectionName",
  mapper: {
    serializedName: "privateEndpointConnectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const privateEndpointConnectionBody: OperationParameter = {
  parameterPath: ["options", "privateEndpointConnectionBody"],
  mapper: PrivateEndpointConnectionMapper
};

export const privateLinkResourceName: OperationURLParameter = {
  parameterPath: "privateLinkResourceName",
  mapper: {
    serializedName: "privateLinkResourceName",
    required: true,
    type: {
      name: "String"
    }
  }
};
