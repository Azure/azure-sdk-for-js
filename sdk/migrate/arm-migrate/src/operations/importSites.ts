/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/importSitesMappers";
import * as Parameters from "../models/parameters";
import { MicrosoftAzureFDSWebRoleContext } from "../microsoftAzureFDSWebRoleContext";

/** Class representing a ImportSites. */
export class ImportSites {
  private readonly client: MicrosoftAzureFDSWebRoleContext;

  /**
   * Create a ImportSites.
   * @param {MicrosoftAzureFDSWebRoleContext} client Reference to the service client.
   */
  constructor(client: MicrosoftAzureFDSWebRoleContext) {
    this.client = client;
  }

  /**
   * @summary Method to get a site.
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<Models.ImportSitesGetSiteAsyncResponse>
   */
  getSiteAsync(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<Models.ImportSitesGetSiteAsyncResponse>;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param callback The callback
   */
  getSiteAsync(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, callback: msRest.ServiceCallback<Models.ImportSite>): void;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteAsync(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImportSite>): void;
  getSiteAsync(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ImportSite>, callback?: msRest.ServiceCallback<Models.ImportSite>): Promise<Models.ImportSitesGetSiteAsyncResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        siteName,
        apiVersion,
        options
      },
      getSiteAsyncOperationSpec,
      callback) as Promise<Models.ImportSitesGetSiteAsyncResponse>;
  }

  /**
   * @summary Method to create or update a site.
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param body Body with site details.
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<Models.ImportSitesPutSiteAsyncResponse>
   */
  putSiteAsync(subscriptionId: string, resourceGroupName: string, siteName: string, body: Models.ImportSite, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<Models.ImportSitesPutSiteAsyncResponse>;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param body Body with site details.
   * @param apiVersion
   * @param callback The callback
   */
  putSiteAsync(subscriptionId: string, resourceGroupName: string, siteName: string, body: Models.ImportSite, apiVersion: string, callback: msRest.ServiceCallback<Models.ImportSite>): void;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param body Body with site details.
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  putSiteAsync(subscriptionId: string, resourceGroupName: string, siteName: string, body: Models.ImportSite, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImportSite>): void;
  putSiteAsync(subscriptionId: string, resourceGroupName: string, siteName: string, body: Models.ImportSite, apiVersion: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ImportSite>, callback?: msRest.ServiceCallback<Models.ImportSite>): Promise<Models.ImportSitesPutSiteAsyncResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        siteName,
        body,
        apiVersion,
        options
      },
      putSiteAsyncOperationSpec,
      callback) as Promise<Models.ImportSitesPutSiteAsyncResponse>;
  }

  /**
   * @summary Method to delete a site.
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSiteAsync(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param callback The callback
   */
  deleteSiteAsync(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSiteAsync(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteSiteAsync(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        siteName,
        apiVersion,
        options
      },
      deleteSiteAsyncOperationSpec,
      callback);
  }

  /**
   * @summary Gets the SAS URI for import.
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param body The request body.
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<Models.ImportSitesGetImportUriAsyncResponse>
   */
  getImportUriAsync(subscriptionId: string, resourceGroupName: string, siteName: string, body: Models.SasUriResponse, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<Models.ImportSitesGetImportUriAsyncResponse>;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param body The request body.
   * @param apiVersion
   * @param callback The callback
   */
  getImportUriAsync(subscriptionId: string, resourceGroupName: string, siteName: string, body: Models.SasUriResponse, apiVersion: string, callback: msRest.ServiceCallback<Models.SasUriResponse>): void;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param body The request body.
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  getImportUriAsync(subscriptionId: string, resourceGroupName: string, siteName: string, body: Models.SasUriResponse, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SasUriResponse>): void;
  getImportUriAsync(subscriptionId: string, resourceGroupName: string, siteName: string, body: Models.SasUriResponse, apiVersion: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SasUriResponse>, callback?: msRest.ServiceCallback<Models.SasUriResponse>): Promise<Models.ImportSitesGetImportUriAsyncResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        siteName,
        body,
        apiVersion,
        options
      },
      getImportUriAsyncOperationSpec,
      callback) as Promise<Models.ImportSitesGetImportUriAsyncResponse>;
  }

  /**
   * @summary Gets the SAS URI for import.
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param body The request body.
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<Models.ImportSitesGetExportUriAsyncResponse>
   */
  getExportUriAsync(subscriptionId: string, resourceGroupName: string, siteName: string, body: Models.SasUriResponse, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<Models.ImportSitesGetExportUriAsyncResponse>;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param body The request body.
   * @param apiVersion
   * @param callback The callback
   */
  getExportUriAsync(subscriptionId: string, resourceGroupName: string, siteName: string, body: Models.SasUriResponse, apiVersion: string, callback: msRest.ServiceCallback<Models.SasUriResponse>): void;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param body The request body.
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  getExportUriAsync(subscriptionId: string, resourceGroupName: string, siteName: string, body: Models.SasUriResponse, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SasUriResponse>): void;
  getExportUriAsync(subscriptionId: string, resourceGroupName: string, siteName: string, body: Models.SasUriResponse, apiVersion: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SasUriResponse>, callback?: msRest.ServiceCallback<Models.SasUriResponse>): Promise<Models.ImportSitesGetExportUriAsyncResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        siteName,
        body,
        apiVersion,
        options
      },
      getExportUriAsyncOperationSpec,
      callback) as Promise<Models.ImportSitesGetExportUriAsyncResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getSiteAsyncOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/ImportSites/{siteName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ImportSite
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const putSiteAsyncOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/ImportSites/{siteName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.ImportSite,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ImportSite
    },
    201: {
      bodyMapper: Mappers.ImportSite
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteSiteAsyncOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/ImportSites/{siteName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getImportUriAsyncOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/ImportSites/{siteName}/ImportUri",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.SasUriResponse,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SasUriResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getExportUriAsyncOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/ImportSites/{siteName}/ExportUri",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.SasUriResponse,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SasUriResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
