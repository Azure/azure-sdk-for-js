/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { AssessedMachines } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMigrateV2 } from "../azureMigrateV2";
import {
  AssessedMachine,
  AssessedMachinesListByAssessmentNextOptionalParams,
  AssessedMachinesListByAssessmentOptionalParams,
  AssessedMachinesListByAssessmentResponse,
  AssessedMachinesGetOptionalParams,
  AssessedMachinesGetResponse,
  AssessedMachinesListByAssessmentNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing AssessedMachines operations. */
export class AssessedMachinesImpl implements AssessedMachines {
  private readonly client: AzureMigrateV2;

  /**
   * Initialize a new instance of the class AssessedMachines class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateV2) {
    this.client = client;
  }

  /**
   * Get list of machines that assessed as part of the specified assessment. Returns a json array of
   * objects of type 'assessedMachine' as specified in the Models section.
   *
   * Whenever an assessment is created or updated, it goes under computation. During this phase, the
   * 'status' field of Assessment object reports 'Computing'.
   * During the period when the assessment is under computation, the list of assessed machines is empty
   * and no assessed machines are returned by this call.
   *
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param groupName Unique name of a group within a project.
   * @param assessmentName Unique name of an assessment within a project.
   * @param options The options parameters.
   */
  public listByAssessment(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    assessmentName: string,
    options?: AssessedMachinesListByAssessmentOptionalParams
  ): PagedAsyncIterableIterator<AssessedMachine> {
    const iter = this.listByAssessmentPagingAll(
      resourceGroupName,
      projectName,
      groupName,
      assessmentName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByAssessmentPagingPage(
          resourceGroupName,
          projectName,
          groupName,
          assessmentName,
          options
        );
      }
    };
  }

  private async *listByAssessmentPagingPage(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    assessmentName: string,
    options?: AssessedMachinesListByAssessmentOptionalParams
  ): AsyncIterableIterator<AssessedMachine[]> {
    let result = await this._listByAssessment(
      resourceGroupName,
      projectName,
      groupName,
      assessmentName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByAssessmentNext(
        resourceGroupName,
        projectName,
        groupName,
        assessmentName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByAssessmentPagingAll(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    assessmentName: string,
    options?: AssessedMachinesListByAssessmentOptionalParams
  ): AsyncIterableIterator<AssessedMachine> {
    for await (const page of this.listByAssessmentPagingPage(
      resourceGroupName,
      projectName,
      groupName,
      assessmentName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get list of machines that assessed as part of the specified assessment. Returns a json array of
   * objects of type 'assessedMachine' as specified in the Models section.
   *
   * Whenever an assessment is created or updated, it goes under computation. During this phase, the
   * 'status' field of Assessment object reports 'Computing'.
   * During the period when the assessment is under computation, the list of assessed machines is empty
   * and no assessed machines are returned by this call.
   *
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param groupName Unique name of a group within a project.
   * @param assessmentName Unique name of an assessment within a project.
   * @param options The options parameters.
   */
  private _listByAssessment(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    assessmentName: string,
    options?: AssessedMachinesListByAssessmentOptionalParams
  ): Promise<AssessedMachinesListByAssessmentResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, projectName, groupName, assessmentName, options },
      listByAssessmentOperationSpec
    );
  }

  /**
   * Get an assessed machine with its size & cost estimate that was evaluated in the specified
   * assessment.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param groupName Unique name of a group within a project.
   * @param assessmentName Unique name of an assessment within a project.
   * @param assessedMachineName Unique name of an assessed machine evaluated as part of an assessment.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    assessmentName: string,
    assessedMachineName: string,
    options?: AssessedMachinesGetOptionalParams
  ): Promise<AssessedMachinesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        projectName,
        groupName,
        assessmentName,
        assessedMachineName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * ListByAssessmentNext
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param groupName Unique name of a group within a project.
   * @param assessmentName Unique name of an assessment within a project.
   * @param nextLink The nextLink from the previous successful call to the ListByAssessment method.
   * @param options The options parameters.
   */
  private _listByAssessmentNext(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    assessmentName: string,
    nextLink: string,
    options?: AssessedMachinesListByAssessmentNextOptionalParams
  ): Promise<AssessedMachinesListByAssessmentNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        projectName,
        groupName,
        assessmentName,
        nextLink,
        options
      },
      listByAssessmentNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByAssessmentOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}/assessedMachines",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AssessedMachineResultList,
      headersMapper: Mappers.AssessedMachinesListByAssessmentHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.groupName,
    Parameters.assessmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}/assessedMachines/{assessedMachineName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AssessedMachine,
      headersMapper: Mappers.AssessedMachinesGetHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.groupName,
    Parameters.assessmentName,
    Parameters.assessedMachineName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByAssessmentNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AssessedMachineResultList,
      headersMapper: Mappers.AssessedMachinesListByAssessmentNextHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.nextLink,
    Parameters.groupName,
    Parameters.assessmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
