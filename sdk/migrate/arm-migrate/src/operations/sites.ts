/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/sitesMappers";
import * as Parameters from "../models/parameters";
import { MicrosoftAzureFDSWebRoleContext } from "../microsoftAzureFDSWebRoleContext";

/** Class representing a Sites. */
export class Sites {
  private readonly client: MicrosoftAzureFDSWebRoleContext;

  /**
   * Create a Sites.
   * @param {MicrosoftAzureFDSWebRoleContext} client Reference to the service client.
   */
  constructor(client: MicrosoftAzureFDSWebRoleContext) {
    this.client = client;
  }

  /**
   * @summary Method to get a site.
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteResponse>
   */
  getSite(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteResponse>;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param callback The callback
   */
  getSite(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, callback: msRest.ServiceCallback<Models.VMwareSite>): void;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  getSite(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VMwareSite>): void;
  getSite(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VMwareSite>, callback?: msRest.ServiceCallback<Models.VMwareSite>): Promise<Models.SitesGetSiteResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        siteName,
        apiVersion,
        options
      },
      getSiteOperationSpec,
      callback) as Promise<Models.SitesGetSiteResponse>;
  }

  /**
   * @summary Method to create or update a site.
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param body Body with site details.
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesPutSiteResponse>
   */
  putSite(subscriptionId: string, resourceGroupName: string, siteName: string, body: Models.VMwareSite, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesPutSiteResponse>;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param body Body with site details.
   * @param apiVersion
   * @param callback The callback
   */
  putSite(subscriptionId: string, resourceGroupName: string, siteName: string, body: Models.VMwareSite, apiVersion: string, callback: msRest.ServiceCallback<Models.VMwareSite>): void;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param body Body with site details.
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  putSite(subscriptionId: string, resourceGroupName: string, siteName: string, body: Models.VMwareSite, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VMwareSite>): void;
  putSite(subscriptionId: string, resourceGroupName: string, siteName: string, body: Models.VMwareSite, apiVersion: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VMwareSite>, callback?: msRest.ServiceCallback<Models.VMwareSite>): Promise<Models.SitesPutSiteResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        siteName,
        body,
        apiVersion,
        options
      },
      putSiteOperationSpec,
      callback) as Promise<Models.SitesPutSiteResponse>;
  }

  /**
   * @summary Method to delete a site.
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSite(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param callback The callback
   */
  deleteSite(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSite(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteSite(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        siteName,
        apiVersion,
        options
      },
      deleteSiteOperationSpec,
      callback);
  }

  /**
   * @summary Method to update an existing site.
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param body Body with site details.
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesPatchSiteResponse>
   */
  patchSite(subscriptionId: string, resourceGroupName: string, siteName: string, body: Models.VMwareSite, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesPatchSiteResponse>;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param body Body with site details.
   * @param apiVersion
   * @param callback The callback
   */
  patchSite(subscriptionId: string, resourceGroupName: string, siteName: string, body: Models.VMwareSite, apiVersion: string, callback: msRest.ServiceCallback<Models.VMwareSite>): void;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param body Body with site details.
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  patchSite(subscriptionId: string, resourceGroupName: string, siteName: string, body: Models.VMwareSite, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VMwareSite>): void;
  patchSite(subscriptionId: string, resourceGroupName: string, siteName: string, body: Models.VMwareSite, apiVersion: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VMwareSite>, callback?: msRest.ServiceCallback<Models.VMwareSite>): Promise<Models.SitesPatchSiteResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        siteName,
        body,
        apiVersion,
        options
      },
      patchSiteOperationSpec,
      callback) as Promise<Models.SitesPatchSiteResponse>;
  }

  /**
   * @summary Method to refresh a site.
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesRefreshSiteResponse>
   */
  refreshSite(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesRefreshSiteResponse>;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param callback The callback
   */
  refreshSite(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  refreshSite(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  refreshSite(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.SitesRefreshSiteResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        siteName,
        apiVersion,
        options
      },
      refreshSiteOperationSpec,
      callback) as Promise<Models.SitesRefreshSiteResponse>;
  }

  /**
   * @summary Method to get site usage.
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteUsageResponse>
   */
  getSiteUsage(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteUsageResponse>;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param callback The callback
   */
  getSiteUsage(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, callback: msRest.ServiceCallback<Models.VMwareSiteUsage>): void;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteUsage(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VMwareSiteUsage>): void;
  getSiteUsage(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VMwareSiteUsage>, callback?: msRest.ServiceCallback<Models.VMwareSiteUsage>): Promise<Models.SitesGetSiteUsageResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        siteName,
        apiVersion,
        options
      },
      getSiteUsageOperationSpec,
      callback) as Promise<Models.SitesGetSiteUsageResponse>;
  }

  /**
   * @summary Method to get site health summary.
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteHealthSummaryResponse>
   */
  getSiteHealthSummary(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteHealthSummaryResponse>;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param callback The callback
   */
  getSiteHealthSummary(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, callback: msRest.ServiceCallback<Models.SiteHealthSummaryCollection>): void;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteHealthSummary(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteHealthSummaryCollection>): void;
  getSiteHealthSummary(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteHealthSummaryCollection>, callback?: msRest.ServiceCallback<Models.SiteHealthSummaryCollection>): Promise<Models.SitesGetSiteHealthSummaryResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        siteName,
        apiVersion,
        options
      },
      getSiteHealthSummaryOperationSpec,
      callback) as Promise<Models.SitesGetSiteHealthSummaryResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getSiteOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VMwareSite
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const putSiteOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.VMwareSite,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VMwareSite
    },
    201: {
      bodyMapper: Mappers.VMwareSite
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteSiteOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchSiteOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.VMwareSite,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VMwareSite
    },
    201: {
      bodyMapper: Mappers.VMwareSite
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const refreshSiteOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/refresh",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {
      headersMapper: Mappers.SitesRefreshSiteHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteUsageOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/usage",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VMwareSiteUsage
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteHealthSummaryOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/healthSummary",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteHealthSummaryCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
