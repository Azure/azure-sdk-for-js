/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { Assessments } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMigrateV2 } from "../azureMigrateV2";
import {
  Assessment,
  AssessmentsListByGroupOptionalParams,
  AssessmentsListByGroupResponse,
  AssessmentsListByProjectOptionalParams,
  AssessmentsListByProjectResponse,
  AssessmentsGetOptionalParams,
  AssessmentsGetResponse,
  AssessmentsCreateOptionalParams,
  AssessmentsCreateResponse,
  AssessmentsDeleteOptionalParams,
  AssessmentsDeleteResponse,
  AssessmentsGetReportDownloadUrlOptionalParams,
  AssessmentsGetReportDownloadUrlResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Assessments operations. */
export class AssessmentsImpl implements Assessments {
  private readonly client: AzureMigrateV2;

  /**
   * Initialize a new instance of the class Assessments class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateV2) {
    this.client = client;
  }

  /**
   * Get all assessments created for the specified group.
   *
   * Returns a json array of objects of type 'assessment' as specified in Models section.
   *
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param groupName Unique name of a group within a project.
   * @param options The options parameters.
   */
  public listByGroup(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    options?: AssessmentsListByGroupOptionalParams
  ): PagedAsyncIterableIterator<Assessment> {
    const iter = this.listByGroupPagingAll(
      resourceGroupName,
      projectName,
      groupName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByGroupPagingPage(
          resourceGroupName,
          projectName,
          groupName,
          options,
          settings
        );
      }
    };
  }

  private async *listByGroupPagingPage(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    options?: AssessmentsListByGroupOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<Assessment[]> {
    let result: AssessmentsListByGroupResponse;
    result = await this._listByGroup(
      resourceGroupName,
      projectName,
      groupName,
      options
    );
    yield result.value || [];
  }

  private async *listByGroupPagingAll(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    options?: AssessmentsListByGroupOptionalParams
  ): AsyncIterableIterator<Assessment> {
    for await (const page of this.listByGroupPagingPage(
      resourceGroupName,
      projectName,
      groupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get all assessments created in the project.
   *
   * Returns a json array of objects of type 'assessment' as specified in Models section.
   *
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param options The options parameters.
   */
  public listByProject(
    resourceGroupName: string,
    projectName: string,
    options?: AssessmentsListByProjectOptionalParams
  ): PagedAsyncIterableIterator<Assessment> {
    const iter = this.listByProjectPagingAll(
      resourceGroupName,
      projectName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByProjectPagingPage(
          resourceGroupName,
          projectName,
          options,
          settings
        );
      }
    };
  }

  private async *listByProjectPagingPage(
    resourceGroupName: string,
    projectName: string,
    options?: AssessmentsListByProjectOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<Assessment[]> {
    let result: AssessmentsListByProjectResponse;
    result = await this._listByProject(resourceGroupName, projectName, options);
    yield result.value || [];
  }

  private async *listByProjectPagingAll(
    resourceGroupName: string,
    projectName: string,
    options?: AssessmentsListByProjectOptionalParams
  ): AsyncIterableIterator<Assessment> {
    for await (const page of this.listByProjectPagingPage(
      resourceGroupName,
      projectName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get all assessments created for the specified group.
   *
   * Returns a json array of objects of type 'assessment' as specified in Models section.
   *
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param groupName Unique name of a group within a project.
   * @param options The options parameters.
   */
  private _listByGroup(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    options?: AssessmentsListByGroupOptionalParams
  ): Promise<AssessmentsListByGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, projectName, groupName, options },
      listByGroupOperationSpec
    );
  }

  /**
   * Get all assessments created in the project.
   *
   * Returns a json array of objects of type 'assessment' as specified in Models section.
   *
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param options The options parameters.
   */
  private _listByProject(
    resourceGroupName: string,
    projectName: string,
    options?: AssessmentsListByProjectOptionalParams
  ): Promise<AssessmentsListByProjectResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, projectName, options },
      listByProjectOperationSpec
    );
  }

  /**
   * Get an existing assessment with the specified name. Returns a json object of type 'assessment' as
   * specified in Models section.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param groupName Unique name of a group within a project.
   * @param assessmentName Unique name of an assessment within a project.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    assessmentName: string,
    options?: AssessmentsGetOptionalParams
  ): Promise<AssessmentsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, projectName, groupName, assessmentName, options },
      getOperationSpec
    );
  }

  /**
   * Create a new assessment with the given name and the specified settings. Since name of an assessment
   * in a project is a unique identifier, if an assessment with the name provided already exists, then
   * the existing assessment is updated.
   *
   * Any PUT operation, resulting in either create or update on an assessment, will cause the assessment
   * to go in a "InProgress" state. This will be indicated by the field 'computationState' on the
   * Assessment object. During this time no other PUT operation will be allowed on that assessment
   * object, nor will a Delete operation. Once the computation for the assessment is complete, the field
   * 'computationState' will be updated to 'Ready', and then other PUT or DELETE operations can happen on
   * the assessment.
   *
   * When assessment is under computation, any PUT will lead to a 400 - Bad Request error.
   *
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param groupName Unique name of a group within a project.
   * @param assessmentName Unique name of an assessment within a project.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    assessmentName: string,
    options?: AssessmentsCreateOptionalParams
  ): Promise<AssessmentsCreateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, projectName, groupName, assessmentName, options },
      createOperationSpec
    );
  }

  /**
   * Delete an assessment from the project. The machines remain in the assessment. Deleting a
   * non-existent assessment results in a no-operation.
   *
   * When an assessment is under computation, as indicated by the 'computationState' field, it cannot be
   * deleted. Any such attempt will return a 400 - Bad Request.
   *
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param groupName Unique name of a group within a project.
   * @param assessmentName Unique name of an assessment within a project.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    assessmentName: string,
    options?: AssessmentsDeleteOptionalParams
  ): Promise<AssessmentsDeleteResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, projectName, groupName, assessmentName, options },
      deleteOperationSpec
    );
  }

  /**
   * Get the URL for downloading the assessment in a report format.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param groupName Unique name of a group within a project.
   * @param assessmentName Unique name of an assessment within a project.
   * @param options The options parameters.
   */
  getReportDownloadUrl(
    resourceGroupName: string,
    projectName: string,
    groupName: string,
    assessmentName: string,
    options?: AssessmentsGetReportDownloadUrlOptionalParams
  ): Promise<AssessmentsGetReportDownloadUrlResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, projectName, groupName, assessmentName, options },
      getReportDownloadUrlOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AssessmentResultList,
      headersMapper: Mappers.AssessmentsListByGroupHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.groupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByProjectOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AssessmentResultList,
      headersMapper: Mappers.AssessmentsListByProjectHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Assessment,
      headersMapper: Mappers.AssessmentsGetHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.groupName,
    Parameters.assessmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Assessment,
      headersMapper: Mappers.AssessmentsCreateHeaders
    },
    201: {
      bodyMapper: Mappers.Assessment,
      headersMapper: Mappers.AssessmentsCreateHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.assessment,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.groupName,
    Parameters.assessmentName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.AssessmentsDeleteHeaders
    },
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.groupName,
    Parameters.assessmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getReportDownloadUrlOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}/downloadUrl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DownloadUrl,
      headersMapper: Mappers.AssessmentsGetReportDownloadUrlHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.groupName,
    Parameters.assessmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
