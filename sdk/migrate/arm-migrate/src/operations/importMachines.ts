/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/importMachinesMappers";
import * as Parameters from "../models/parameters";
import { MicrosoftAzureFDSWebRoleContext } from "../microsoftAzureFDSWebRoleContext";

/** Class representing a ImportMachines. */
export class ImportMachines {
  private readonly client: MicrosoftAzureFDSWebRoleContext;

  /**
   * Create a ImportMachines.
   * @param {MicrosoftAzureFDSWebRoleContext} client Reference to the service client.
   */
  constructor(client: MicrosoftAzureFDSWebRoleContext) {
    this.client = client;
  }

  /**
   * @summary Method to get machine.
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param machineName Machine ARM name.
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<Models.ImportMachinesGetMachineAsyncResponse>
   */
  getMachineAsync(subscriptionId: string, resourceGroupName: string, siteName: string, machineName: string, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<Models.ImportMachinesGetMachineAsyncResponse>;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param machineName Machine ARM name.
   * @param apiVersion
   * @param callback The callback
   */
  getMachineAsync(subscriptionId: string, resourceGroupName: string, siteName: string, machineName: string, apiVersion: string, callback: msRest.ServiceCallback<Models.ImportMachine>): void;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param machineName Machine ARM name.
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  getMachineAsync(subscriptionId: string, resourceGroupName: string, siteName: string, machineName: string, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImportMachine>): void;
  getMachineAsync(subscriptionId: string, resourceGroupName: string, siteName: string, machineName: string, apiVersion: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ImportMachine>, callback?: msRest.ServiceCallback<Models.ImportMachine>): Promise<Models.ImportMachinesGetMachineAsyncResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        siteName,
        machineName,
        apiVersion,
        options
      },
      getMachineAsyncOperationSpec,
      callback) as Promise<Models.ImportMachinesGetMachineAsyncResponse>;
  }

  /**
   * @summary Method to delete a site.
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param machineName The machine to be deleted.
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMachineAsync(subscriptionId: string, resourceGroupName: string, siteName: string, machineName: string, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param machineName The machine to be deleted.
   * @param apiVersion
   * @param callback The callback
   */
  deleteMachineAsync(subscriptionId: string, resourceGroupName: string, siteName: string, machineName: string, apiVersion: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param machineName The machine to be deleted.
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMachineAsync(subscriptionId: string, resourceGroupName: string, siteName: string, machineName: string, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMachineAsync(subscriptionId: string, resourceGroupName: string, siteName: string, machineName: string, apiVersion: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        siteName,
        machineName,
        apiVersion,
        options
      },
      deleteMachineAsyncOperationSpec,
      callback);
  }

  /**
   * @summary Method to get machine.
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<Models.ImportMachinesGetAllMachinesInSiteAsyncResponse>
   */
  getAllMachinesInSiteAsync(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options?: Models.ImportMachinesGetAllMachinesInSiteAsyncOptionalParams): Promise<Models.ImportMachinesGetAllMachinesInSiteAsyncResponse>;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param callback The callback
   */
  getAllMachinesInSiteAsync(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, callback: msRest.ServiceCallback<Models.ImportMachineCollection>): void;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllMachinesInSiteAsync(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options: Models.ImportMachinesGetAllMachinesInSiteAsyncOptionalParams, callback: msRest.ServiceCallback<Models.ImportMachineCollection>): void;
  getAllMachinesInSiteAsync(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options?: Models.ImportMachinesGetAllMachinesInSiteAsyncOptionalParams | msRest.ServiceCallback<Models.ImportMachineCollection>, callback?: msRest.ServiceCallback<Models.ImportMachineCollection>): Promise<Models.ImportMachinesGetAllMachinesInSiteAsyncResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        siteName,
        apiVersion,
        options
      },
      getAllMachinesInSiteAsyncOperationSpec,
      callback) as Promise<Models.ImportMachinesGetAllMachinesInSiteAsyncResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getMachineAsyncOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/ImportSites/{siteName}/machines/{machineName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.machineName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ImportMachine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMachineAsyncOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/ImportSites/{siteName}/machines/{machineName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.machineName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAllMachinesInSiteAsyncOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/ImportSites/{siteName}/machines",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.pageSize,
    Parameters.continuationToken,
    Parameters.totalRecordCount
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ImportMachineCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
