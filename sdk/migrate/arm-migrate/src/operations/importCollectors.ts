/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/importCollectorsMappers";
import * as Parameters from "../models/parameters";
import { AzureMigrateV2Context } from "../azureMigrateV2Context";

/** Class representing a ImportCollectors. */
export class ImportCollectors {
  private readonly client: AzureMigrateV2Context;

  /**
   * Create a ImportCollectors.
   * @param {AzureMigrateV2Context} client Reference to the service client.
   */
  constructor(client: AzureMigrateV2Context) {
    this.client = client;
  }

  /**
   * Get a list of Import collector.
   * @summary Get a list of Import collector.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param [options] The optional parameters
   * @returns Promise<Models.ImportCollectorsListByProjectResponse>
   */
  listByProject(resourceGroupName: string, projectName: string, options?: msRest.RequestOptionsBase): Promise<Models.ImportCollectorsListByProjectResponse>;
  /**
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param callback The callback
   */
  listByProject(resourceGroupName: string, projectName: string, callback: msRest.ServiceCallback<Models.ImportCollectorList>): void;
  /**
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByProject(resourceGroupName: string, projectName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImportCollectorList>): void;
  listByProject(resourceGroupName: string, projectName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ImportCollectorList>, callback?: msRest.ServiceCallback<Models.ImportCollectorList>): Promise<Models.ImportCollectorsListByProjectResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        projectName,
        options
      },
      listByProjectOperationSpec,
      callback) as Promise<Models.ImportCollectorsListByProjectResponse>;
  }

  /**
   * Get a Import collector.
   * @summary Get a Import collector.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param importCollectorName Unique name of a Import collector within a project.
   * @param [options] The optional parameters
   * @returns Promise<Models.ImportCollectorsGetResponse>
   */
  get(resourceGroupName: string, projectName: string, importCollectorName: string, options?: msRest.RequestOptionsBase): Promise<Models.ImportCollectorsGetResponse>;
  /**
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param importCollectorName Unique name of a Import collector within a project.
   * @param callback The callback
   */
  get(resourceGroupName: string, projectName: string, importCollectorName: string, callback: msRest.ServiceCallback<Models.ImportCollector>): void;
  /**
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param importCollectorName Unique name of a Import collector within a project.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, projectName: string, importCollectorName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImportCollector>): void;
  get(resourceGroupName: string, projectName: string, importCollectorName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ImportCollector>, callback?: msRest.ServiceCallback<Models.ImportCollector>): Promise<Models.ImportCollectorsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        projectName,
        importCollectorName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ImportCollectorsGetResponse>;
  }

  /**
   * Create or Update Import collector
   * @summary Create or Update Import collector.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param importCollectorName Unique name of a Import collector within a project.
   * @param [options] The optional parameters
   * @returns Promise<Models.ImportCollectorsCreateResponse>
   */
  create(resourceGroupName: string, projectName: string, importCollectorName: string, options?: Models.ImportCollectorsCreateOptionalParams): Promise<Models.ImportCollectorsCreateResponse>;
  /**
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param importCollectorName Unique name of a Import collector within a project.
   * @param callback The callback
   */
  create(resourceGroupName: string, projectName: string, importCollectorName: string, callback: msRest.ServiceCallback<Models.ImportCollector>): void;
  /**
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param importCollectorName Unique name of a Import collector within a project.
   * @param options The optional parameters
   * @param callback The callback
   */
  create(resourceGroupName: string, projectName: string, importCollectorName: string, options: Models.ImportCollectorsCreateOptionalParams, callback: msRest.ServiceCallback<Models.ImportCollector>): void;
  create(resourceGroupName: string, projectName: string, importCollectorName: string, options?: Models.ImportCollectorsCreateOptionalParams | msRest.ServiceCallback<Models.ImportCollector>, callback?: msRest.ServiceCallback<Models.ImportCollector>): Promise<Models.ImportCollectorsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        projectName,
        importCollectorName,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.ImportCollectorsCreateResponse>;
  }

  /**
   * Delete a Import collector from the project.
   * @summary Deletes Import collector from the project.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param importCollectorName Unique name of a Import collector within a project.
   * @param [options] The optional parameters
   * @returns Promise<Models.ImportCollectorsDeleteResponse>
   */
  deleteMethod(resourceGroupName: string, projectName: string, importCollectorName: string, options?: msRest.RequestOptionsBase): Promise<Models.ImportCollectorsDeleteResponse>;
  /**
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param importCollectorName Unique name of a Import collector within a project.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, projectName: string, importCollectorName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param importCollectorName Unique name of a Import collector within a project.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, projectName: string, importCollectorName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, projectName: string, importCollectorName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.ImportCollectorsDeleteResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        projectName,
        importCollectorName,
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.ImportCollectorsDeleteResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByProjectOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/importcollectors",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ImportCollectorList,
      headersMapper: Mappers.ImportCollectorsListByProjectHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.ImportCollectorsListByProjectHeaders
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/importcollectors/{importCollectorName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.importCollectorName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ImportCollector,
      headersMapper: Mappers.ImportCollectorsGetHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.ImportCollectorsGetHeaders
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/importcollectors/{importCollectorName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.importCollectorName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "collectorBody"
    ],
    mapper: Mappers.ImportCollector
  },
  responses: {
    200: {
      bodyMapper: Mappers.ImportCollector,
      headersMapper: Mappers.ImportCollectorsCreateHeaders
    },
    201: {
      bodyMapper: Mappers.ImportCollector,
      headersMapper: Mappers.ImportCollectorsCreateHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.ImportCollectorsCreateHeaders
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/importcollectors/{importCollectorName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.importCollectorName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      headersMapper: Mappers.ImportCollectorsDeleteHeaders
    },
    204: {
      headersMapper: Mappers.ImportCollectorsDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.ImportCollectorsDeleteHeaders
    }
  },
  serializer
};
