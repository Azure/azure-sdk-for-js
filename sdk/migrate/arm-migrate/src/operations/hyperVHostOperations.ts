/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/hyperVHostOperationsMappers";
import * as Parameters from "../models/parameters";
import { MicrosoftAzureFDSWebRoleContext } from "../microsoftAzureFDSWebRoleContext";

/** Class representing a HyperVHostOperations. */
export class HyperVHostOperations {
  private readonly client: MicrosoftAzureFDSWebRoleContext;

  /**
   * Create a HyperVHostOperations.
   * @param {MicrosoftAzureFDSWebRoleContext} client Reference to the service client.
   */
  constructor(client: MicrosoftAzureFDSWebRoleContext) {
    this.client = client;
  }

  /**
   * @summary Method to get a Hyper-V host.
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param hostName Host ARM name.
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<Models.HyperVHostGetHostResponse>
   */
  getHost(subscriptionId: string, resourceGroupName: string, siteName: string, hostName: string, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<Models.HyperVHostGetHostResponse>;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param hostName Host ARM name.
   * @param apiVersion
   * @param callback The callback
   */
  getHost(subscriptionId: string, resourceGroupName: string, siteName: string, hostName: string, apiVersion: string, callback: msRest.ServiceCallback<Models.HyperVHost>): void;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param hostName Host ARM name.
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  getHost(subscriptionId: string, resourceGroupName: string, siteName: string, hostName: string, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HyperVHost>): void;
  getHost(subscriptionId: string, resourceGroupName: string, siteName: string, hostName: string, apiVersion: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HyperVHost>, callback?: msRest.ServiceCallback<Models.HyperVHost>): Promise<Models.HyperVHostGetHostResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        siteName,
        hostName,
        apiVersion,
        options
      },
      getHostOperationSpec,
      callback) as Promise<Models.HyperVHostGetHostResponse>;
  }

  /**
   * @summary Method to create or update a host in site.
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param hostName Host ARM name.
   * @param body Put host body.
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<Models.HyperVHostPutHostResponse>
   */
  putHost(subscriptionId: string, resourceGroupName: string, siteName: string, hostName: string, body: Models.HyperVHost, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<Models.HyperVHostPutHostResponse>;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param hostName Host ARM name.
   * @param body Put host body.
   * @param apiVersion
   * @param callback The callback
   */
  putHost(subscriptionId: string, resourceGroupName: string, siteName: string, hostName: string, body: Models.HyperVHost, apiVersion: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param hostName Host ARM name.
   * @param body Put host body.
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  putHost(subscriptionId: string, resourceGroupName: string, siteName: string, hostName: string, body: Models.HyperVHost, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putHost(subscriptionId: string, resourceGroupName: string, siteName: string, hostName: string, body: Models.HyperVHost, apiVersion: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.HyperVHostPutHostResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        siteName,
        hostName,
        body,
        apiVersion,
        options
      },
      putHostOperationSpec,
      callback) as Promise<Models.HyperVHostPutHostResponse>;
  }

  /**
   * @summary Method to get all hosts in a site.
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<Models.HyperVHostGetAllHostsInSiteResponse>
   */
  getAllHostsInSite(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options?: Models.HyperVHostGetAllHostsInSiteOptionalParams): Promise<Models.HyperVHostGetAllHostsInSiteResponse>;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param callback The callback
   */
  getAllHostsInSite(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, callback: msRest.ServiceCallback<Models.HyperVHostCollection>): void;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllHostsInSite(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options: Models.HyperVHostGetAllHostsInSiteOptionalParams, callback: msRest.ServiceCallback<Models.HyperVHostCollection>): void;
  getAllHostsInSite(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options?: Models.HyperVHostGetAllHostsInSiteOptionalParams | msRest.ServiceCallback<Models.HyperVHostCollection>, callback?: msRest.ServiceCallback<Models.HyperVHostCollection>): Promise<Models.HyperVHostGetAllHostsInSiteResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        siteName,
        apiVersion,
        options
      },
      getAllHostsInSiteOperationSpec,
      callback) as Promise<Models.HyperVHostGetAllHostsInSiteResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getHostOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/HyperVSites/{siteName}/hosts/{hostName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.hostName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HyperVHost
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const putHostOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/HyperVSites/{siteName}/hosts/{hostName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.hostName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.HyperVHost,
      required: true
    }
  },
  responses: {
    202: {
      headersMapper: Mappers.HyperVHostPutHostHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAllHostsInSiteOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/HyperVSites/{siteName}/hosts",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HyperVHostCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
