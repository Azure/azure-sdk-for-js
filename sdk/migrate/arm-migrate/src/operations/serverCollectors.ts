/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/serverCollectorsMappers";
import * as Parameters from "../models/parameters";
import { AzureMigrateV2Context } from "../azureMigrateV2Context";

/** Class representing a ServerCollectors. */
export class ServerCollectors {
  private readonly client: AzureMigrateV2Context;

  /**
   * Create a ServerCollectors.
   * @param {AzureMigrateV2Context} client Reference to the service client.
   */
  constructor(client: AzureMigrateV2Context) {
    this.client = client;
  }

  /**
   * Get a list of Server collector.
   * @summary Get a list of Server collector.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServerCollectorsListByProjectResponse>
   */
  listByProject(resourceGroupName: string, projectName: string, options?: msRest.RequestOptionsBase): Promise<Models.ServerCollectorsListByProjectResponse>;
  /**
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param callback The callback
   */
  listByProject(resourceGroupName: string, projectName: string, callback: msRest.ServiceCallback<Models.ServerCollectorList>): void;
  /**
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByProject(resourceGroupName: string, projectName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServerCollectorList>): void;
  listByProject(resourceGroupName: string, projectName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ServerCollectorList>, callback?: msRest.ServiceCallback<Models.ServerCollectorList>): Promise<Models.ServerCollectorsListByProjectResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        projectName,
        options
      },
      listByProjectOperationSpec,
      callback) as Promise<Models.ServerCollectorsListByProjectResponse>;
  }

  /**
   * Get a Server collector.
   * @summary Get a Server collector.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param serverCollectorName Unique name of a Server collector within a project.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServerCollectorsGetResponse>
   */
  get(resourceGroupName: string, projectName: string, serverCollectorName: string, options?: msRest.RequestOptionsBase): Promise<Models.ServerCollectorsGetResponse>;
  /**
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param serverCollectorName Unique name of a Server collector within a project.
   * @param callback The callback
   */
  get(resourceGroupName: string, projectName: string, serverCollectorName: string, callback: msRest.ServiceCallback<Models.ServerCollector>): void;
  /**
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param serverCollectorName Unique name of a Server collector within a project.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, projectName: string, serverCollectorName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServerCollector>): void;
  get(resourceGroupName: string, projectName: string, serverCollectorName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ServerCollector>, callback?: msRest.ServiceCallback<Models.ServerCollector>): Promise<Models.ServerCollectorsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        projectName,
        serverCollectorName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ServerCollectorsGetResponse>;
  }

  /**
   * Create or Update Server collector
   * @summary Create or Update Server collector.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param serverCollectorName Unique name of a Server collector within a project.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServerCollectorsCreateResponse>
   */
  create(resourceGroupName: string, projectName: string, serverCollectorName: string, options?: Models.ServerCollectorsCreateOptionalParams): Promise<Models.ServerCollectorsCreateResponse>;
  /**
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param serverCollectorName Unique name of a Server collector within a project.
   * @param callback The callback
   */
  create(resourceGroupName: string, projectName: string, serverCollectorName: string, callback: msRest.ServiceCallback<Models.ServerCollector>): void;
  /**
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param serverCollectorName Unique name of a Server collector within a project.
   * @param options The optional parameters
   * @param callback The callback
   */
  create(resourceGroupName: string, projectName: string, serverCollectorName: string, options: Models.ServerCollectorsCreateOptionalParams, callback: msRest.ServiceCallback<Models.ServerCollector>): void;
  create(resourceGroupName: string, projectName: string, serverCollectorName: string, options?: Models.ServerCollectorsCreateOptionalParams | msRest.ServiceCallback<Models.ServerCollector>, callback?: msRest.ServiceCallback<Models.ServerCollector>): Promise<Models.ServerCollectorsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        projectName,
        serverCollectorName,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.ServerCollectorsCreateResponse>;
  }

  /**
   * Delete a Server collector from the project.
   * @summary Deletes Server collector from the project.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param serverCollectorName Unique name of a Server collector within a project.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServerCollectorsDeleteResponse>
   */
  deleteMethod(resourceGroupName: string, projectName: string, serverCollectorName: string, options?: msRest.RequestOptionsBase): Promise<Models.ServerCollectorsDeleteResponse>;
  /**
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param serverCollectorName Unique name of a Server collector within a project.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, projectName: string, serverCollectorName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param serverCollectorName Unique name of a Server collector within a project.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, projectName: string, serverCollectorName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, projectName: string, serverCollectorName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.ServerCollectorsDeleteResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        projectName,
        serverCollectorName,
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.ServerCollectorsDeleteResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByProjectOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/servercollectors",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServerCollectorList,
      headersMapper: Mappers.ServerCollectorsListByProjectHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.ServerCollectorsListByProjectHeaders
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/servercollectors/{serverCollectorName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.serverCollectorName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServerCollector,
      headersMapper: Mappers.ServerCollectorsGetHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.ServerCollectorsGetHeaders
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/servercollectors/{serverCollectorName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.serverCollectorName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "collectorBody"
    ],
    mapper: Mappers.ServerCollector
  },
  responses: {
    200: {
      bodyMapper: Mappers.ServerCollector,
      headersMapper: Mappers.ServerCollectorsCreateHeaders
    },
    201: {
      bodyMapper: Mappers.ServerCollector,
      headersMapper: Mappers.ServerCollectorsCreateHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.ServerCollectorsCreateHeaders
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/servercollectors/{serverCollectorName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.serverCollectorName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      headersMapper: Mappers.ServerCollectorsDeleteHeaders
    },
    204: {
      headersMapper: Mappers.ServerCollectorsDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.ServerCollectorsDeleteHeaders
    }
  },
  serializer
};
