/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { VMwareCollectors } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMigrateV2 } from "../azureMigrateV2";
import {
  VMwareCollector,
  VMwareCollectorsListByProjectOptionalParams,
  VMwareCollectorsListByProjectResponse,
  VMwareCollectorsGetOptionalParams,
  VMwareCollectorsGetResponse,
  VMwareCollectorsCreateOptionalParams,
  VMwareCollectorsCreateResponse,
  VMwareCollectorsDeleteOptionalParams,
  VMwareCollectorsDeleteResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing VMwareCollectors operations. */
export class VMwareCollectorsImpl implements VMwareCollectors {
  private readonly client: AzureMigrateV2;

  /**
   * Initialize a new instance of the class VMwareCollectors class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMigrateV2) {
    this.client = client;
  }

  /**
   * Get a list of VMware collector.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param options The options parameters.
   */
  public listByProject(
    resourceGroupName: string,
    projectName: string,
    options?: VMwareCollectorsListByProjectOptionalParams
  ): PagedAsyncIterableIterator<VMwareCollector> {
    const iter = this.listByProjectPagingAll(
      resourceGroupName,
      projectName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByProjectPagingPage(
          resourceGroupName,
          projectName,
          options
        );
      }
    };
  }

  private async *listByProjectPagingPage(
    resourceGroupName: string,
    projectName: string,
    options?: VMwareCollectorsListByProjectOptionalParams
  ): AsyncIterableIterator<VMwareCollector[]> {
    let result = await this._listByProject(
      resourceGroupName,
      projectName,
      options
    );
    yield result.value || [];
  }

  private async *listByProjectPagingAll(
    resourceGroupName: string,
    projectName: string,
    options?: VMwareCollectorsListByProjectOptionalParams
  ): AsyncIterableIterator<VMwareCollector> {
    for await (const page of this.listByProjectPagingPage(
      resourceGroupName,
      projectName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get a list of VMware collector.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param options The options parameters.
   */
  private _listByProject(
    resourceGroupName: string,
    projectName: string,
    options?: VMwareCollectorsListByProjectOptionalParams
  ): Promise<VMwareCollectorsListByProjectResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, projectName, options },
      listByProjectOperationSpec
    );
  }

  /**
   * Get a VMware collector.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param vmWareCollectorName Unique name of a VMware collector within a project.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    projectName: string,
    vmWareCollectorName: string,
    options?: VMwareCollectorsGetOptionalParams
  ): Promise<VMwareCollectorsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, projectName, vmWareCollectorName, options },
      getOperationSpec
    );
  }

  /**
   * Create or Update VMware collector
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param vmWareCollectorName Unique name of a VMware collector within a project.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    projectName: string,
    vmWareCollectorName: string,
    options?: VMwareCollectorsCreateOptionalParams
  ): Promise<VMwareCollectorsCreateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, projectName, vmWareCollectorName, options },
      createOperationSpec
    );
  }

  /**
   * Delete a VMware collector from the project.
   * @param resourceGroupName Name of the Azure Resource Group that project is part of.
   * @param projectName Name of the Azure Migrate project.
   * @param vmWareCollectorName Unique name of a VMware collector within a project.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    projectName: string,
    vmWareCollectorName: string,
    options?: VMwareCollectorsDeleteOptionalParams
  ): Promise<VMwareCollectorsDeleteResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, projectName, vmWareCollectorName, options },
      deleteOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByProjectOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/vmwarecollectors",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VMwareCollectorList,
      headersMapper: Mappers.VMwareCollectorsListByProjectHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/vmwarecollectors/{vmWareCollectorName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VMwareCollector,
      headersMapper: Mappers.VMwareCollectorsGetHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.vmWareCollectorName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/vmwarecollectors/{vmWareCollectorName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.VMwareCollector,
      headersMapper: Mappers.VMwareCollectorsCreateHeaders
    },
    201: {
      bodyMapper: Mappers.VMwareCollector,
      headersMapper: Mappers.VMwareCollectorsCreateHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.collectorBody2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.vmWareCollectorName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/vmwarecollectors/{vmWareCollectorName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.VMwareCollectorsDeleteHeaders
    },
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.vmWareCollectorName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
