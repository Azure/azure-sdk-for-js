/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/vCenterOperationsMappers";
import * as Parameters from "../models/parameters";
import { MicrosoftAzureFDSWebRoleContext } from "../microsoftAzureFDSWebRoleContext";

/** Class representing a VCenterOperations. */
export class VCenterOperations {
  private readonly client: MicrosoftAzureFDSWebRoleContext;

  /**
   * Create a VCenterOperations.
   * @param {MicrosoftAzureFDSWebRoleContext} client Reference to the service client.
   */
  constructor(client: MicrosoftAzureFDSWebRoleContext) {
    this.client = client;
  }

  /**
   * @summary Method to get a vCenter.
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param vcenterName VCenter ARM name.
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<Models.VCenterGetVCenterResponse>
   */
  getVCenter(subscriptionId: string, resourceGroupName: string, siteName: string, vcenterName: string, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<Models.VCenterGetVCenterResponse>;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param vcenterName VCenter ARM name.
   * @param apiVersion
   * @param callback The callback
   */
  getVCenter(subscriptionId: string, resourceGroupName: string, siteName: string, vcenterName: string, apiVersion: string, callback: msRest.ServiceCallback<Models.VCenter>): void;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param vcenterName VCenter ARM name.
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  getVCenter(subscriptionId: string, resourceGroupName: string, siteName: string, vcenterName: string, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VCenter>): void;
  getVCenter(subscriptionId: string, resourceGroupName: string, siteName: string, vcenterName: string, apiVersion: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VCenter>, callback?: msRest.ServiceCallback<Models.VCenter>): Promise<Models.VCenterGetVCenterResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        siteName,
        vcenterName,
        apiVersion,
        options
      },
      getVCenterOperationSpec,
      callback) as Promise<Models.VCenterGetVCenterResponse>;
  }

  /**
   * @summary Method to create or update a vCenter in site.
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param vcenterName VCenter ARM name.
   * @param body Put vCenter body.
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<Models.VCenterPutVCenterResponse>
   */
  putVCenter(subscriptionId: string, resourceGroupName: string, siteName: string, vcenterName: string, body: Models.VCenter, apiVersion: string, options?: msRest.RequestOptionsBase): Promise<Models.VCenterPutVCenterResponse>;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param vcenterName VCenter ARM name.
   * @param body Put vCenter body.
   * @param apiVersion
   * @param callback The callback
   */
  putVCenter(subscriptionId: string, resourceGroupName: string, siteName: string, vcenterName: string, body: Models.VCenter, apiVersion: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param vcenterName VCenter ARM name.
   * @param body Put vCenter body.
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  putVCenter(subscriptionId: string, resourceGroupName: string, siteName: string, vcenterName: string, body: Models.VCenter, apiVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  putVCenter(subscriptionId: string, resourceGroupName: string, siteName: string, vcenterName: string, body: Models.VCenter, apiVersion: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.VCenterPutVCenterResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        siteName,
        vcenterName,
        body,
        apiVersion,
        options
      },
      putVCenterOperationSpec,
      callback) as Promise<Models.VCenterPutVCenterResponse>;
  }

  /**
   * @summary Method to get all vCenters in a site.
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param [options] The optional parameters
   * @returns Promise<Models.VCenterGetAllVCentersInSiteResponse>
   */
  getAllVCentersInSite(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options?: Models.VCenterGetAllVCentersInSiteOptionalParams): Promise<Models.VCenterGetAllVCentersInSiteResponse>;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param callback The callback
   */
  getAllVCentersInSite(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, callback: msRest.ServiceCallback<Models.VCenterCollection>): void;
  /**
   * @param subscriptionId Subscription Id.
   * @param resourceGroupName Resource group name.
   * @param siteName Site name.
   * @param apiVersion
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllVCentersInSite(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options: Models.VCenterGetAllVCentersInSiteOptionalParams, callback: msRest.ServiceCallback<Models.VCenterCollection>): void;
  getAllVCentersInSite(subscriptionId: string, resourceGroupName: string, siteName: string, apiVersion: string, options?: Models.VCenterGetAllVCentersInSiteOptionalParams | msRest.ServiceCallback<Models.VCenterCollection>, callback?: msRest.ServiceCallback<Models.VCenterCollection>): Promise<Models.VCenterGetAllVCentersInSiteResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        siteName,
        apiVersion,
        options
      },
      getAllVCentersInSiteOperationSpec,
      callback) as Promise<Models.VCenterGetAllVCentersInSiteResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getVCenterOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/vcenters/{vcenterName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.vcenterName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VCenter
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const putVCenterOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/vcenters/{vcenterName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.vcenterName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.VCenter,
      required: true
    }
  },
  responses: {
    202: {
      headersMapper: Mappers.VCenterPutVCenterHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAllVCentersInSiteOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/vcenters",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.siteName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VCenterCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
