/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { NameAvailabilityParameters as NameAvailabilityParametersMapper, WebPubSubResource as WebPubSubResourceMapper, RegenerateKeyParameters as RegenerateKeyParametersMapper, CustomCertificate as CustomCertificateMapper, CustomDomain as CustomDomainMapper, WebPubSubHub as WebPubSubHubMapper, PrivateEndpointConnection as PrivateEndpointConnectionMapper, Replica as ReplicaMapper, SharedPrivateLinkResource as SharedPrivateLinkResourceMapper, } from "../models/mappers.js";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2024-03-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String",
        },
    },
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String",
        },
    },
};
export const parameters = {
    parameterPath: "parameters",
    mapper: NameAvailabilityParametersMapper,
};
export const location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "Uuid",
        },
    },
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1,
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const resourceName = {
    parameterPath: "resourceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]$"),
            MaxLength: 63,
            MinLength: 3,
        },
        serializedName: "resourceName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const parameters1 = {
    parameterPath: "parameters",
    mapper: WebPubSubResourceMapper,
};
export const parameters2 = {
    parameterPath: "parameters",
    mapper: RegenerateKeyParametersMapper,
};
export const replicaName = {
    parameterPath: "replicaName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]$"),
            MaxLength: 63,
            MinLength: 3,
        },
        serializedName: "replicaName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const certificateName = {
    parameterPath: "certificateName",
    mapper: {
        serializedName: "certificateName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const parameters3 = {
    parameterPath: "parameters",
    mapper: CustomCertificateMapper,
};
export const name = {
    parameterPath: "name",
    mapper: {
        serializedName: "name",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const parameters4 = {
    parameterPath: "parameters",
    mapper: CustomDomainMapper,
};
export const hubName = {
    parameterPath: "hubName",
    mapper: {
        serializedName: "hubName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const parameters5 = {
    parameterPath: "parameters",
    mapper: WebPubSubHubMapper,
};
export const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const parameters6 = {
    parameterPath: "parameters",
    mapper: PrivateEndpointConnectionMapper,
};
export const parameters7 = {
    parameterPath: "parameters",
    mapper: ReplicaMapper,
};
export const sharedPrivateLinkResourceName = {
    parameterPath: "sharedPrivateLinkResourceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]$"),
            MaxLength: 63,
            MinLength: 3,
        },
        serializedName: "sharedPrivateLinkResourceName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const parameters8 = {
    parameterPath: "parameters",
    mapper: SharedPrivateLinkResourceMapper,
};
//# sourceMappingURL=parameters.js.map