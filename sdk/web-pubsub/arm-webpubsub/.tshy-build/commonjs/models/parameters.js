"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.parameters8 = exports.sharedPrivateLinkResourceName = exports.parameters7 = exports.parameters6 = exports.privateEndpointConnectionName = exports.parameters5 = exports.hubName = exports.parameters4 = exports.name = exports.parameters3 = exports.certificateName = exports.replicaName = exports.parameters2 = exports.parameters1 = exports.resourceName = exports.resourceGroupName = exports.subscriptionId = exports.location = exports.parameters = exports.contentType = exports.nextLink = exports.apiVersion = exports.$host = exports.accept = void 0;
const mappers_js_1 = require("../models/mappers.js");
exports.accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
exports.$host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
exports.apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2024-03-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String",
        },
    },
};
exports.nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
exports.contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String",
        },
    },
};
exports.parameters = {
    parameterPath: "parameters",
    mapper: mappers_js_1.NameAvailabilityParameters,
};
exports.location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "Uuid",
        },
    },
};
exports.resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1,
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.resourceName = {
    parameterPath: "resourceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]$"),
            MaxLength: 63,
            MinLength: 3,
        },
        serializedName: "resourceName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters1 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.WebPubSubResource,
};
exports.parameters2 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.RegenerateKeyParameters,
};
exports.replicaName = {
    parameterPath: "replicaName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]$"),
            MaxLength: 63,
            MinLength: 3,
        },
        serializedName: "replicaName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.certificateName = {
    parameterPath: "certificateName",
    mapper: {
        serializedName: "certificateName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters3 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.CustomCertificate,
};
exports.name = {
    parameterPath: "name",
    mapper: {
        serializedName: "name",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters4 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.CustomDomain,
};
exports.hubName = {
    parameterPath: "hubName",
    mapper: {
        serializedName: "hubName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters5 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.WebPubSubHub,
};
exports.privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters6 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.PrivateEndpointConnection,
};
exports.parameters7 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.Replica,
};
exports.sharedPrivateLinkResourceName = {
    parameterPath: "sharedPrivateLinkResourceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]$"),
            MaxLength: 63,
            MinLength: 3,
        },
        serializedName: "sharedPrivateLinkResourceName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters8 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.SharedPrivateLinkResource,
};
//# sourceMappingURL=parameters.js.map