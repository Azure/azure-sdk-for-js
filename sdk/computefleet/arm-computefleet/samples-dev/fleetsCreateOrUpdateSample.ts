/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { Fleet, MicrosoftAzureFleet } from "@azure/arm-computefleet";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";

dotenv.config();

/**
 * This sample demonstrates how to Create a Fleet
 *
 * @summary Create a Fleet
 * x-ms-original-file: specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_CreateOrUpdate.json
 */
async function fleetsCreateOrUpdate() {
  const subscriptionId =
    process.env["COMPUTEFLEET_SUBSCRIPTION_ID"] ||
    "1DC2F28C-A625-4B0E-9748-9885A3C9E9EB";
  const resourceGroupName =
    process.env["COMPUTEFLEET_RESOURCE_GROUP"] || "rgazurefleet";
  const fleetName = "testFleet";
  const resource: Fleet = {
    identity: { type: "UserAssigned", userAssignedIdentities: { key9851: {} } },
    location: "westus",
    properties: {
      computeProfile: {
        baseVirtualMachineProfile: {
          applicationProfile: {
            galleryApplications: [
              {
                configurationReference: "ulztmiavpojpbpbddgnuuiimxcpau",
                enableAutomaticUpgrade: true,
                order: 5,
                packageReferenceId: "lfxqiadouhmbovcd",
                tags: "eyrqjbib",
                treatFailureAsDeploymentFailure: true,
              },
            ],
          },
          capacityReservation: { capacityReservationGroup: { id: "groxwd" } },
          diagnosticsProfile: {
            bootDiagnostics: { enabled: true, storageUri: "rzamfwghybpx" },
          },
          extensionProfile: {
            extensionsTimeBudget: "mbhjahtdygwgyszdwjtvlvtgchdwil",
            extensions: [
              {
                name: "bndxuxx",
                properties: {
                  type: "pgjilctjjwaa",
                  autoUpgradeMinorVersion: true,
                  enableAutomaticUpgrade: true,
                  forceUpdateTag: "yhgxw",
                  protectedSettings: {},
                  protectedSettingsFromKeyVault: {
                    secretUrl: "vyhzfkqsqanacgzjthpjoe",
                    sourceVault: { id: "groxwd" },
                  },
                  provisionAfterExtensions: ["nftzosroolbcwmpupujzqwqe"],
                  publisher: "kpxtirxjfprhs",
                  settings: {},
                  suppressFailures: true,
                  typeHandlerVersion: "zevivcoilxmbwlrihhhibq",
                },
              },
            ],
          },
          hardwareProfile: {
            vmSizeProperties: { vCPUsAvailable: 16, vCPUsPerCore: 23 },
          },
          licenseType: "v",
          networkProfile: {
            healthProbe: { id: "cmkfcjhmrwxwqtac" },
            networkApiVersion: "2020-11-01",
            networkInterfaceConfigurations: [
              {
                name: "i",
                properties: {
                  auxiliaryMode: "None",
                  auxiliarySku: "None",
                  deleteOption: "Delete",
                  disableTcpStateTracking: true,
                  dnsSettings: { dnsServers: ["nxmmfolhclsesu"] },
                  enableAcceleratedNetworking: true,
                  enableFpga: true,
                  enableIPForwarding: true,
                  ipConfigurations: [
                    {
                      name: "oezqhkidfhyywlfzwuotilrpbqnjg",
                      properties: {
                        applicationGatewayBackendAddressPools: [
                          { id: "groxwd" },
                        ],
                        applicationSecurityGroups: [{ id: "groxwd" }],
                        loadBalancerBackendAddressPools: [{ id: "groxwd" }],
                        loadBalancerInboundNatPools: [{ id: "groxwd" }],
                        primary: true,
                        privateIPAddressVersion: "IPv4",
                        publicIPAddressConfiguration: {
                          name: "fvpqf",
                          properties: {
                            deleteOption: "Delete",
                            dnsSettings: {
                              domainNameLabel: "ukrddzvmorpmfsczjwtbvp",
                              domainNameLabelScope: "TenantReuse",
                            },
                            idleTimeoutInMinutes: 9,
                            ipTags: [
                              {
                                ipTagType: "sddgsoemnzgqizale",
                                tag: "wufmhrjsakbiaetyara",
                              },
                            ],
                            publicIPAddressVersion: "IPv4",
                            publicIPPrefix: { id: "groxwd" },
                          },
                          sku: { name: "Basic", tier: "Regional" },
                        },
                        subnet: { id: "cmkfcjhmrwxwqtac" },
                      },
                    },
                  ],
                  networkSecurityGroup: { id: "groxwd" },
                  primary: true,
                },
              },
            ],
          },
          osProfile: {
            adminPassword: "adfbrdxpv",
            adminUsername: "nrgzqciiaaxjrqldbmjbqkyhntp",
            allowExtensionOperations: true,
            computerNamePrefix: "o",
            customData: "xjjib",
            linuxConfiguration: {
              disablePasswordAuthentication: true,
              enableVMAgentPlatformUpdates: true,
              patchSettings: {
                assessmentMode: "ImageDefault",
                automaticByPlatformSettings: {
                  bypassPlatformSafetyChecksOnUserSchedule: true,
                  rebootSetting: "Unknown",
                },
                patchMode: "ImageDefault",
              },
              provisionVMAgent: true,
              ssh: {
                publicKeys: [
                  { path: "kmqz", keyData: "kivgsubusvpprwqaqpjcmhsv" },
                ],
              },
            },
            requireGuestProvisionSignal: true,
            secrets: [
              {
                sourceVault: { id: "groxwd" },
                vaultCertificates: [
                  {
                    certificateStore: "nlxrwavpzhueffxsshlun",
                    certificateUrl: "tyldwkzafmnkvpo",
                  },
                ],
              },
            ],
            windowsConfiguration: {
              additionalUnattendContent: [
                {
                  componentName: "Microsoft-Windows-Shell-Setup",
                  content: "bubmqbxjkj",
                  passName: "OobeSystem",
                  settingName: "AutoLogon",
                },
              ],
              enableAutomaticUpdates: true,
              enableVMAgentPlatformUpdates: true,
              patchSettings: {
                assessmentMode: "ImageDefault",
                automaticByPlatformSettings: {
                  bypassPlatformSafetyChecksOnUserSchedule: true,
                  rebootSetting: "Unknown",
                },
                enableHotpatching: true,
                patchMode: "Manual",
              },
              provisionVMAgent: true,
              timeZone: "hlyjiqcfksgrpjrct",
              winRM: {
                listeners: [
                  { certificateUrl: "phwesineizrl", protocol: "Http" },
                ],
              },
            },
          },
          scheduledEventsProfile: {
            osImageNotificationProfile: {
              enable: true,
              notBeforeTimeout: "olbpadmevekyczfokodtfprxti",
            },
            terminateNotificationProfile: {
              enable: true,
              notBeforeTimeout: "iljppmmw",
            },
          },
          securityPostureReference: {
            excludeExtensions: [
              {
                location: "wrqxhbqaebwkzmcdmngyqmhogc",
                properties: {
                  type: "vhrtgbaqdkbrrqxsdiiaqxksmqukl",
                  autoUpgradeMinorVersion: true,
                  enableAutomaticUpgrade: true,
                  forceUpdateTag: "oriasdwawveilgusfrn",
                  instanceView: {
                    name: "ip",
                    type: "woadxvobquacooaujyg",
                    statuses: [
                      {
                        code: "kuehuahsdozupmjrtp",
                        displayStatus: "pomenhgqjoelbxvsqwxxexqxv",
                        level: "Info",
                        message: "jxjjmlwbjylzvrislyyflhnmizhiu",
                        time: new Date("2024-04-29T21:51:44.042Z"),
                      },
                    ],
                    substatuses: [
                      {
                        code: "kuehuahsdozupmjrtp",
                        displayStatus: "pomenhgqjoelbxvsqwxxexqxv",
                        level: "Info",
                        message: "jxjjmlwbjylzvrislyyflhnmizhiu",
                        time: new Date("2024-04-29T21:51:44.042Z"),
                      },
                    ],
                    typeHandlerVersion: "ftkkqxdqiofgsusvxekdcpua",
                  },
                  protectedSettings: {},
                  protectedSettingsFromKeyVault: {
                    secretUrl: "vyhzfkqsqanacgzjthpjoe",
                    sourceVault: { id: "groxwd" },
                  },
                  provisionAfterExtensions: ["lwsfavklrgzuwmyxscskt"],
                  publisher: "rxoajzb",
                  settings: {},
                  suppressFailures: true,
                  typeHandlerVersion: "bvzbiibps",
                },
                tags: { key7356: "apuftleiygpnemfzryiop" },
              },
            ],
            id: "mubredelfbshboaxrsxiajihahaa",
          },
          securityProfile: {
            encryptionAtHost: true,
            encryptionIdentity: { userAssignedIdentityResourceId: "qoersmt" },
            proxyAgentSettings: {
              enabled: true,
              keyIncarnationId: 20,
              mode: "Audit",
            },
            securityType: "TrustedLaunch",
            uefiSettings: { secureBootEnabled: true, vTpmEnabled: true },
          },
          serviceArtifactReference: { id: "qlkeeyskyr" },
          storageProfile: {
            dataDisks: [
              {
                name: "eogiykmdmeikswxmigjws",
                caching: "None",
                createOption: "FromImage",
                deleteOption: "Delete",
                diskIopsReadWrite: 27,
                diskMBpsReadWrite: 2,
                diskSizeGB: 6,
                lun: 14,
                managedDisk: {
                  diskEncryptionSet: { id: "vmatqblzjalbatdepyzqmnd" },
                  securityProfile: {
                    diskEncryptionSet: { id: "vmatqblzjalbatdepyzqmnd" },
                    securityEncryptionType: "VMGuestStateOnly",
                  },
                  storageAccountType: "Standard_LRS",
                },
                writeAcceleratorEnabled: true,
              },
            ],
            diskControllerType: "uzb",
            imageReference: {
              communityGalleryImageId: "vlqe",
              id: "aiunknwgksu",
              offer: "isxgumkarlkomp",
              publisher: "mqxgwbiyjzmxavhbkd",
              sharedGalleryImageId: "kmkgihoxwlawuuhcinfirktdwkmx",
              sku: "eojmppqcrnpmxirtp",
              version: "wvpcqefgtmqdgltiuz",
            },
            osDisk: {
              name: "wfttw",
              caching: "None",
              createOption: "FromImage",
              deleteOption: "Delete",
              diffDiskSettings: { option: "Local", placement: "CacheDisk" },
              diskSizeGB: 14,
              image: { uri: "thqceubivdrjs" },
              managedDisk: {
                diskEncryptionSet: { id: "vmatqblzjalbatdepyzqmnd" },
                securityProfile: {
                  diskEncryptionSet: { id: "vmatqblzjalbatdepyzqmnd" },
                  securityEncryptionType: "VMGuestStateOnly",
                },
                storageAccountType: "Standard_LRS",
              },
              osType: "Windows",
              vhdContainers: ["tkzcwddtinkfpnfklatw"],
              writeAcceleratorEnabled: true,
            },
          },
          userData: "s",
        },
        computeApiVersion: "2023-07-01",
        platformFaultDomainCount: 1,
      },
      regularPriorityProfile: {
        allocationStrategy: "LowestPrice",
        capacity: 20,
        minCapacity: 10,
      },
      spotPriorityProfile: {
        allocationStrategy: "PriceCapacityOptimized",
        capacity: 20,
        evictionPolicy: "Delete",
        maintain: true,
        maxPricePerVM: 0.00865,
        minCapacity: 10,
      },
      vmSizesProfile: [{ name: "Standard_d1_v2", rank: 19225 }],
    },
    tags: { key3518: "luvrnuvsgdpbuofdskkcoqhfh" },
    zones: ["zone1", "zone2"],
  };
  const credential = new DefaultAzureCredential();
  const client = new MicrosoftAzureFleet(credential, subscriptionId);
  const result = await client.fleets.beginCreateOrUpdateAndWait(
    resourceGroupName,
    fleetName,
    resource,
  );
  console.log(result);
}

async function main() {
  fleetsCreateOrUpdate();
}

main().catch(console.error);
