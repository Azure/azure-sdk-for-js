/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { env, Recorder, isPlaybackMode } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert, beforeEach, afterEach, it, describe } from "vitest";
import { createRecorder } from "./utils/recordedClient.js";
import { AzureFleetClient } from "../../src/azureFleetClient.js";

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("AzureFleet test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: AzureFleetClient;
  let location: string;
  let resourceGroup: string;
  let resourcename: string;

  beforeEach(async (context) => {
    process.env.SystemRoot = process.env.SystemRoot || "C:\\Windows";
    recorder = await createRecorder(context);
    subscriptionId = env.SUBSCRIPTION_ID || "";
    // This is an example of how the environment variables are used
    const credential = createTestCredential();
    client = new AzureFleetClient(credential, subscriptionId, recorder.configureClientOptions({}));
    location = "eastus2euap";
    resourceGroup = "myjstest";
    resourcename = "resourcetest";
  });

  afterEach(async function () {
    if (recorder?.recordingId) {
      await recorder.stop();
    }
  });

  // first create a networkSecurityGroups named "testnsg" with eastus2euap on portal
  // second create a virtual network named "czwtestvn" with eastus2euap and config the ip address as 172.16.0.0/16 when creating a vitrual network on portal
  // third create a subnet named "testsub" and before click add button, enable private subnet and link to networkSecurityGroups
  it("fleets create test", async function () {
    const res = await client.fleets.createOrUpdate(
      resourceGroup,
      resourcename,
      {
        location,
        properties: {
          spotPriorityProfile: {
            maxPricePerVM: 1,
            evictionPolicy: "Delete",
            allocationStrategy: "LowestPrice",
            maintain: true,
            capacity: 1,
          },
          vmSizesProfile: [
            {
              name: "Standard_D2s_v3",
            },
            {
              name: "Standard_D4s_v3",
            },
            {
              name: "Standard_E2s_v3",
            },
          ],
          computeProfile: {
            baseVirtualMachineProfile: {
              storageProfile: {
                imageReference: {
                  publisher: "canonical",
                  offer: "0001-com-ubuntu-server-focal",
                  sku: "20_04-lts-gen2",
                  version: "latest",
                },
                osDisk: {
                  createOption: "fromImage",
                  caching: "ReadWrite",
                  osType: "Linux",
                  managedDisk: {
                    storageAccountType: "Premium_LRS",
                  },
                },
              },
              licenseType: "None",
              osProfile: {
                adminUsername: "azureuser",
                adminPassword: "testComputefleet01",
                computerNamePrefix: "testfleet",
              },
              securityProfile: {
                securityType: "TrustedLaunch",
                uefiSettings: {
                  secureBootEnabled: true,
                  vTpmEnabled: false,
                },
              },
              networkProfile: {
                networkApiVersion: "2020-11-01",
                networkInterfaceConfigurations: [
                  {
                    name: "testnsg",
                    properties: {
                      primary: true,
                      enableAcceleratedNetworking: false,
                      networkSecurityGroup: {
                        id:
                          "/subscriptions/" +
                          subscriptionId +
                          "/resourceGroups/myjstest/providers/Microsoft.Network/networkSecurityGroups/testnsg",
                      },
                      ipConfigurations: [
                        {
                          name: "testvn-ipConfig",
                          properties: {
                            primary: true,
                            subnet: {
                              id:
                                "/subscriptions/" +
                                subscriptionId +
                                "/resourceGroups/myjstest/providers/Microsoft.Network/virtualNetworks/czwtestvn/subnets/testsub",
                            },
                          },
                        },
                      ],
                    },
                  },
                ],
              },
            },
            platformFaultDomainCount: 1,
            computeApiVersion: "2023-09-01",
          },
        },
      },
      testPollingOptions,
    );
    assert.equal(res.name, resourcename);
  });

  it("fleets get test", async function () {
    const res = await client.fleets.get(resourceGroup, resourcename);
    assert.equal(res.name, resourcename);
  });

  it("fleets list test", async function () {
    const resArray = new Array();
    for await (let item of client.fleets.listByResourceGroup(resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("fleets delete test", async function () {
    const resArray = new Array();
    await client.fleets.delete(resourceGroup, resourcename);
    for await (let item of client.fleets.listByResourceGroup(resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });

  it("operation list test", async function () {
    const resArray = new Array();
    for await (let item of client.operations.list()) {
      resArray.push(item);
    }
    assert.notEqual(resArray.length, 0);
  });
});
