/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  Recorder,
  isPlaybackMode,
} from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert, beforeEach, afterEach, it, describe } from "vitest";
import { createRecorder } from "./utils/recordedClient.js";
import { AzureFleetClient } from "../../src/azureFleetClient.js";

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("AzureFleet test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: AzureFleetClient;
  let location: string;
  let resourceGroup: string;
  let resourcename: string;

  beforeEach(async (context) => {
    process.env.SystemRoot = process.env.SystemRoot || "C:\\Windows";
    recorder = await createRecorder(context);
    subscriptionId = env.SUBSCRIPTION_ID || '';
    // This is an example of how the environment variables are used
    const credential = createTestCredential();
    client = new AzureFleetClient(credential, subscriptionId, recorder.configureClientOptions({}));
    location = "eastus";
    resourceGroup = "myjstest";
    resourcename = "resourcetest";

  });

  afterEach(async function () {
    if (recorder?.recordingId) {
      await recorder.stop();
    }
  });

  it("fleets create test", async function () {
    const res = await client.fleets.createOrUpdate(
      resourceGroup,
      resourcename,
      {
        location,
        properties: {
          vmSizesProfile: [{
            name: "Standard_DS1_v2"
          }],
          computeProfile: {
            baseVirtualMachineProfile: {

            }
          }
        },
      },
      testPollingOptions);
    assert.equal(res.name, resourcename);
  });

  // it("fleets get test", async function () {
  //   const res = await client.fleets.get(
  //     resourceGroup,
  //     resourcename
  //   );
  //   assert.equal(res.name, resourcename);
  // });

  // it("fleets list test", async function () {
  //   const resArray = new Array();
  //   for await (let item of client.fleets.listByResourceGroup(resourceGroup)) {
  //     resArray.push(item);
  //   }
  //   assert.equal(resArray.length, 1);
  // });

  // it("fleets delete test", async function () {
  //   const resArray = new Array();
  //   const res = await client.fleets.delete(resourceGroup, resourcename
  //   )
  //   for await (let item of client.fleets.listByResourceGroup(resourceGroup)) {
  //     resArray.push(item);
  //   }
  //   assert.equal(resArray.length, 0);
  // });

  it("operation list test", async function () {
    const resArray = new Array();
    for await (let item of client.operations.list()) {
      resArray.push(item);
    }
    assert.notEqual(resArray.length, 0);
  });
})
