/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/** The key create parameters. */
export interface KeyCreateParameters {
  /** The type of key to create. For valid values, see JsonWebKeyType. */
  kty: JsonWebKeyType;
  /** The key size in bits. For example: 2048, 3072, or 4096 for RSA. */
  keySize?: number;
  /** The public exponent for a RSA key. */
  publicExponent?: number;
  keyOps?: JsonWebKeyOperation[];
  /** The attributes of a key managed by the key vault service. */
  keyAttributes?: KeyAttributes;
  /** Application specific metadata in the form of key-value pairs. */
  tags?: { [propertyName: string]: string };
  /** Elliptic curve name. For valid values, see JsonWebKeyCurveName. */
  curve?: JsonWebKeyCurveName;
}

/** The object attributes managed by the KeyVault service. */
export interface Attributes {
  /** Determines whether the object is enabled. */
  enabled?: boolean;
  /** Not before date in UTC. */
  notBefore?: Date;
  /** Expiry date in UTC. */
  expires?: Date;
  /**
   * Creation time in UTC.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly created?: Date;
  /**
   * Last updated time in UTC.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly updated?: Date;
}

/** A KeyBundle consisting of a WebKey plus its attributes. */
export interface KeyBundle {
  /** The Json web key. */
  key?: JsonWebKey;
  /** The key management attributes. */
  attributes?: KeyAttributes;
  /** Application specific metadata in the form of key-value pairs. */
  tags?: { [propertyName: string]: string };
  /**
   * True if the key's lifetime is managed by key vault. If this is a key backing a certificate, then managed will be true.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly managed?: boolean;
}

/** As of http://tools.ietf.org/html/draft-ietf-jose-json-web-key-18 */
export interface JsonWebKey {
  /** Key identifier. */
  kid?: string;
  /** JsonWebKey Key Type (kty), as defined in https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-40. */
  kty?: JsonWebKeyType;
  keyOps?: string[];
  /** RSA modulus. */
  n?: Uint8Array;
  /** RSA public exponent. */
  e?: Uint8Array;
  /** RSA private exponent, or the D component of an EC private key. */
  d?: Uint8Array;
  /** RSA private key parameter. */
  dp?: Uint8Array;
  /** RSA private key parameter. */
  dq?: Uint8Array;
  /** RSA private key parameter. */
  qi?: Uint8Array;
  /** RSA secret prime. */
  p?: Uint8Array;
  /** RSA secret prime, with p < q. */
  q?: Uint8Array;
  /** Symmetric key. */
  k?: Uint8Array;
  /** Protected Key, used with 'Bring Your Own Key'. */
  t?: Uint8Array;
  /** Elliptic curve name. For valid values, see JsonWebKeyCurveName. */
  crv?: JsonWebKeyCurveName;
  /** X component of an EC public key. */
  x?: Uint8Array;
  /** Y component of an EC public key. */
  y?: Uint8Array;
}

/** The key vault error exception. */
export interface KeyVaultError {
  /**
   * The key vault server error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: ErrorModel | null;
}

/** The key vault server error. */
export interface ErrorModel {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The key vault server error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly innerError?: ErrorModel | null;
}

/** The key import parameters. */
export interface KeyImportParameters {
  /** Whether to import as a hardware key (HSM) or software key. */
  hsm?: boolean;
  /** The Json web key */
  key: JsonWebKey;
  /** The key management attributes. */
  keyAttributes?: KeyAttributes;
  /** Application specific metadata in the form of key-value pairs. */
  tags?: { [propertyName: string]: string };
}

/** The key update parameters. */
export interface KeyUpdateParameters {
  /** Json web key operations. For more information on possible key operations, see JsonWebKeyOperation. */
  keyOps?: JsonWebKeyOperation[];
  /** The attributes of a key managed by the key vault service. */
  keyAttributes?: KeyAttributes;
  /** Application specific metadata in the form of key-value pairs. */
  tags?: { [propertyName: string]: string };
}

/** The key list result. */
export interface KeyListResult {
  /**
   * A response message containing a list of keys in the key vault along with a link to the next page of keys.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: KeyItem[];
  /**
   * The URL to get the next set of keys.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The key item containing key metadata. */
export interface KeyItem {
  /** Key identifier. */
  kid?: string;
  /** The key management attributes. */
  attributes?: KeyAttributes;
  /** Application specific metadata in the form of key-value pairs. */
  tags?: { [propertyName: string]: string };
  /**
   * True if the key's lifetime is managed by key vault. If this is a key backing a certificate, then managed will be true.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly managed?: boolean;
}

/** The backup key result, containing the backup blob. */
export interface BackupKeyResult {
  /**
   * The backup blob containing the backed up key.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Uint8Array;
}

/** The key restore parameters. */
export interface KeyRestoreParameters {
  /** The backup blob associated with a key bundle. */
  keyBundleBackup: Uint8Array;
}

/** The key operations parameters. */
export interface KeyOperationsParameters {
  /** algorithm identifier */
  algorithm: JsonWebKeyEncryptionAlgorithm;
  value: Uint8Array;
  /** Initialization vector for symmetric algorithms. */
  iv?: Uint8Array;
  /** Additional data to authenticate but not encrypt/decrypt when using authenticated crypto algorithms. */
  additionalAuthenticatedData?: Uint8Array;
  /** The tag to authenticate when performing decryption with an authenticated algorithm. */
  authenticationTag?: Uint8Array;
}

/** The key operation result. */
export interface KeyOperationResult {
  /**
   * Key identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly kid?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly result?: Uint8Array;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly iv?: Uint8Array;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly authenticationTag?: Uint8Array;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly additionalAuthenticatedData?: Uint8Array;
}

/** The key operations parameters. */
export interface KeySignParameters {
  /** The signing/verification algorithm identifier. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm. */
  algorithm: JsonWebKeySignatureAlgorithm;
  value: Uint8Array;
}

/** The key verify parameters. */
export interface KeyVerifyParameters {
  /** The signing/verification algorithm. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm. */
  algorithm: JsonWebKeySignatureAlgorithm;
  /** The digest used for signing. */
  digest: Uint8Array;
  /** The signature to be verified. */
  signature: Uint8Array;
}

/** The key verify result. */
export interface KeyVerifyResult {
  /**
   * True if the signature is verified, otherwise false.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: boolean;
}

/** A list of keys that have been deleted in this vault. */
export interface DeletedKeyListResult {
  /**
   * A response message containing a list of deleted keys in the vault along with a link to the next page of deleted keys
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: DeletedKeyItem[];
  /**
   * The URL to get the next set of deleted keys.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Properties of the key pair backing a certificate. */
export interface KeyProperties {
  /** Not supported in this version. Indicates if the private key can be exported. */
  exportable?: boolean;
  /** The type of key pair to be used for the certificate. */
  keyType?: JsonWebKeyType;
  /** The key size in bits. For example: 2048, 3072, or 4096 for RSA. */
  keySize?: number;
  /** Indicates if the same key pair will be used on certificate renewal. */
  reuseKey?: boolean;
  /** Elliptic curve name. For valid values, see JsonWebKeyCurveName. */
  curve?: JsonWebKeyCurveName;
}

/** The attributes of a key managed by the key vault service. */
export type KeyAttributes = Attributes & {
  /**
   * softDelete data retention days. Value should be >=7 and <=90 when softDelete enabled, otherwise 0.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly recoverableDays?: number;
  /**
   * Reflects the deletion recovery level currently in effect for keys in the current vault. If it contains 'Purgeable' the key can be permanently deleted by a privileged user; otherwise, only the system can purge the key, at the end of the retention interval.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly recoveryLevel?: DeletionRecoveryLevel;
};

/** A DeletedKeyBundle consisting of a WebKey plus its Attributes and deletion info */
export type DeletedKeyBundle = KeyBundle & {
  /** The url of the recovery object, used to identify and recover the deleted key. */
  recoveryId?: string;
  /**
   * The time when the key is scheduled to be purged, in UTC
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the key was deleted, in UTC
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deletedDate?: Date;
};

/** The deleted key item containing the deleted key metadata and information about deletion. */
export type DeletedKeyItem = KeyItem & {
  /** The url of the recovery object, used to identify and recover the deleted key. */
  recoveryId?: string;
  /**
   * The time when the key is scheduled to be purged, in UTC
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the key was deleted, in UTC
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deletedDate?: Date;
};

/** Known values of {@link ApiVersion72} that the service accepts. */
export const enum KnownApiVersion72 {
  /** Api Version '7.2' */
  Seven2 = "7.2"
}

/**
 * Defines values for ApiVersion72. \
 * {@link KnownApiVersion72} can be used interchangeably with ApiVersion72,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **7.2**: Api Version '7.2'
 */
export type ApiVersion72 = string;

/** Known values of {@link JsonWebKeyType} that the service accepts. */
export const enum KnownJsonWebKeyType {
  /** Elliptic Curve. */
  EC = "EC",
  /** Elliptic Curve with a private key which is not exportable from the HSM. */
  ECHSM = "EC-HSM",
  /** RSA (https://tools.ietf.org/html/rfc3447) */
  RSA = "RSA",
  /** RSA with a private key which is not exportable from the HSM. */
  RSAHSM = "RSA-HSM",
  /** Octet sequence (used to represent symmetric keys) */
  Oct = "oct",
  /** Octet sequence (used to represent symmetric keys) which is not exportable from the HSM. */
  OctHSM = "oct-HSM"
}

/**
 * Defines values for JsonWebKeyType. \
 * {@link KnownJsonWebKeyType} can be used interchangeably with JsonWebKeyType,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **EC**: Elliptic Curve. \
 * **EC-HSM**: Elliptic Curve with a private key which is not exportable from the HSM. \
 * **RSA**: RSA (https://tools.ietf.org/html/rfc3447) \
 * **RSA-HSM**: RSA with a private key which is not exportable from the HSM. \
 * **oct**: Octet sequence (used to represent symmetric keys) \
 * **oct-HSM**: Octet sequence (used to represent symmetric keys) which is not exportable from the HSM.
 */
export type JsonWebKeyType = string;

/** Known values of {@link JsonWebKeyOperation} that the service accepts. */
export const enum KnownJsonWebKeyOperation {
  /** Key operation - encrypt */
  Encrypt = "encrypt",
  /** Key operation - decrypt */
  Decrypt = "decrypt",
  /** Key operation - sign */
  Sign = "sign",
  /** Key operation - verify */
  Verify = "verify",
  /** Key operation - wrapKey */
  WrapKey = "wrapKey",
  /** Key operation - unwrapKey */
  UnwrapKey = "unwrapKey",
  /** Key operation - import */
  Import = "import"
}

/**
 * Defines values for JsonWebKeyOperation. \
 * {@link KnownJsonWebKeyOperation} can be used interchangeably with JsonWebKeyOperation,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **encrypt** \
 * **decrypt** \
 * **sign** \
 * **verify** \
 * **wrapKey** \
 * **unwrapKey** \
 * **import**
 */
export type JsonWebKeyOperation = string;

/** Known values of {@link DeletionRecoveryLevel} that the service accepts. */
export const enum KnownDeletionRecoveryLevel {
  /** Denotes a vault state in which deletion is an irreversible operation, without the possibility for recovery. This level corresponds to no protection being available against a Delete operation; the data is irretrievably lost upon accepting a Delete operation at the entity level or higher (vault, resource group, subscription etc.) */
  Purgeable = "Purgeable",
  /** Denotes a vault state in which deletion is recoverable, and which also permits immediate and permanent deletion (i.e. purge). This level guarantees the recoverability of the deleted entity during the retention interval (90 days), unless a Purge operation is requested, or the subscription is cancelled. System wil permanently delete it after 90 days, if not recovered */
  RecoverablePurgeable = "Recoverable+Purgeable",
  /** Denotes a vault state in which deletion is recoverable without the possibility for immediate and permanent deletion (i.e. purge). This level guarantees the recoverability of the deleted entity during the retention interval(90 days) and while the subscription is still available. System wil permanently delete it after 90 days, if not recovered */
  Recoverable = "Recoverable",
  /** Denotes a vault and subscription state in which deletion is recoverable within retention interval (90 days), immediate and permanent deletion (i.e. purge) is not permitted, and in which the subscription itself  cannot be permanently canceled. System wil permanently delete it after 90 days, if not recovered */
  RecoverableProtectedSubscription = "Recoverable+ProtectedSubscription",
  /** Denotes a vault state in which deletion is recoverable, and which also permits immediate and permanent deletion (i.e. purge when 7<= SoftDeleteRetentionInDays < 90). This level guarantees the recoverability of the deleted entity during the retention interval, unless a Purge operation is requested, or the subscription is cancelled. */
  CustomizedRecoverablePurgeable = "CustomizedRecoverable+Purgeable",
  /** Denotes a vault state in which deletion is recoverable without the possibility for immediate and permanent deletion (i.e. purge when 7<= SoftDeleteRetentionInDays < 90).This level guarantees the recoverability of the deleted entity during the retention interval and while the subscription is still available. */
  CustomizedRecoverable = "CustomizedRecoverable",
  /** Denotes a vault and subscription state in which deletion is recoverable, immediate and permanent deletion (i.e. purge) is not permitted, and in which the subscription itself cannot be permanently canceled when 7<= SoftDeleteRetentionInDays < 90. This level guarantees the recoverability of the deleted entity during the retention interval, and also reflects the fact that the subscription itself cannot be cancelled. */
  CustomizedRecoverableProtectedSubscription = "CustomizedRecoverable+ProtectedSubscription"
}

/**
 * Defines values for DeletionRecoveryLevel. \
 * {@link KnownDeletionRecoveryLevel} can be used interchangeably with DeletionRecoveryLevel,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Purgeable**: Denotes a vault state in which deletion is an irreversible operation, without the possibility for recovery. This level corresponds to no protection being available against a Delete operation; the data is irretrievably lost upon accepting a Delete operation at the entity level or higher (vault, resource group, subscription etc.) \
 * **Recoverable+Purgeable**: Denotes a vault state in which deletion is recoverable, and which also permits immediate and permanent deletion (i.e. purge). This level guarantees the recoverability of the deleted entity during the retention interval (90 days), unless a Purge operation is requested, or the subscription is cancelled. System wil permanently delete it after 90 days, if not recovered \
 * **Recoverable**: Denotes a vault state in which deletion is recoverable without the possibility for immediate and permanent deletion (i.e. purge). This level guarantees the recoverability of the deleted entity during the retention interval(90 days) and while the subscription is still available. System wil permanently delete it after 90 days, if not recovered \
 * **Recoverable+ProtectedSubscription**: Denotes a vault and subscription state in which deletion is recoverable within retention interval (90 days), immediate and permanent deletion (i.e. purge) is not permitted, and in which the subscription itself  cannot be permanently canceled. System wil permanently delete it after 90 days, if not recovered \
 * **CustomizedRecoverable+Purgeable**: Denotes a vault state in which deletion is recoverable, and which also permits immediate and permanent deletion (i.e. purge when 7<= SoftDeleteRetentionInDays < 90). This level guarantees the recoverability of the deleted entity during the retention interval, unless a Purge operation is requested, or the subscription is cancelled. \
 * **CustomizedRecoverable**: Denotes a vault state in which deletion is recoverable without the possibility for immediate and permanent deletion (i.e. purge when 7<= SoftDeleteRetentionInDays < 90).This level guarantees the recoverability of the deleted entity during the retention interval and while the subscription is still available. \
 * **CustomizedRecoverable+ProtectedSubscription**: Denotes a vault and subscription state in which deletion is recoverable, immediate and permanent deletion (i.e. purge) is not permitted, and in which the subscription itself cannot be permanently canceled when 7<= SoftDeleteRetentionInDays < 90. This level guarantees the recoverability of the deleted entity during the retention interval, and also reflects the fact that the subscription itself cannot be cancelled.
 */
export type DeletionRecoveryLevel = string;

/** Known values of {@link JsonWebKeyCurveName} that the service accepts. */
export const enum KnownJsonWebKeyCurveName {
  /** The NIST P-256 elliptic curve, AKA SECG curve SECP256R1. */
  P256 = "P-256",
  /** The NIST P-384 elliptic curve, AKA SECG curve SECP384R1. */
  P384 = "P-384",
  /** The NIST P-521 elliptic curve, AKA SECG curve SECP521R1. */
  P521 = "P-521",
  /** The SECG SECP256K1 elliptic curve. */
  P256K = "P-256K"
}

/**
 * Defines values for JsonWebKeyCurveName. \
 * {@link KnownJsonWebKeyCurveName} can be used interchangeably with JsonWebKeyCurveName,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **P-256**: The NIST P-256 elliptic curve, AKA SECG curve SECP256R1. \
 * **P-384**: The NIST P-384 elliptic curve, AKA SECG curve SECP384R1. \
 * **P-521**: The NIST P-521 elliptic curve, AKA SECG curve SECP521R1. \
 * **P-256K**: The SECG SECP256K1 elliptic curve.
 */
export type JsonWebKeyCurveName = string;

/** Known values of {@link JsonWebKeyEncryptionAlgorithm} that the service accepts. */
export const enum KnownJsonWebKeyEncryptionAlgorithm {
  /** Encryption Algorithm - RSA-OAEP */
  RSAOaep = "RSA-OAEP",
  /** Encryption Algorithm - RSA-OAEP-256 */
  RSAOaep256 = "RSA-OAEP-256",
  /** Encryption Algorithm - RSA1_5 */
  RSA15 = "RSA1_5",
  /** Encryption Algorithm - A128GCM */
  A128GCM = "A128GCM",
  /** Encryption Algorithm - A192GCM */
  A192GCM = "A192GCM",
  /** Encryption Algorithm - A256GCM */
  A256GCM = "A256GCM",
  /** Encryption Algorithm - A128KW */
  A128KW = "A128KW",
  /** Encryption Algorithm - A192KW */
  A192KW = "A192KW",
  /** Encryption Algorithm - A256KW */
  A256KW = "A256KW",
  /** Encryption Algorithm - A128CBC */
  A128CBC = "A128CBC",
  /** Encryption Algorithm - A192CBC */
  A192CBC = "A192CBC",
  /** Encryption Algorithm - A256CBC */
  A256CBC = "A256CBC",
  /** Encryption Algorithm - A128CBCPAD */
  A128Cbcpad = "A128CBCPAD",
  /** Encryption Algorithm - A192CBCPAD */
  A192Cbcpad = "A192CBCPAD",
  /** Encryption Algorithm - A256CBCPAD */
  A256Cbcpad = "A256CBCPAD"
}

/**
 * Defines values for JsonWebKeyEncryptionAlgorithm. \
 * {@link KnownJsonWebKeyEncryptionAlgorithm} can be used interchangeably with JsonWebKeyEncryptionAlgorithm,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **RSA-OAEP** \
 * **RSA-OAEP-256** \
 * **RSA1_5** \
 * **A128GCM** \
 * **A192GCM** \
 * **A256GCM** \
 * **A128KW** \
 * **A192KW** \
 * **A256KW** \
 * **A128CBC** \
 * **A192CBC** \
 * **A256CBC** \
 * **A128CBCPAD** \
 * **A192CBCPAD** \
 * **A256CBCPAD**
 */
export type JsonWebKeyEncryptionAlgorithm = string;

/** Known values of {@link JsonWebKeySignatureAlgorithm} that the service accepts. */
export const enum KnownJsonWebKeySignatureAlgorithm {
  /** RSASSA-PSS using SHA-256 and MGF1 with SHA-256, as described in https://tools.ietf.org/html/rfc7518 */
  PS256 = "PS256",
  /** RSASSA-PSS using SHA-384 and MGF1 with SHA-384, as described in https://tools.ietf.org/html/rfc7518 */
  PS384 = "PS384",
  /** RSASSA-PSS using SHA-512 and MGF1 with SHA-512, as described in https://tools.ietf.org/html/rfc7518 */
  PS512 = "PS512",
  /** RSASSA-PKCS1-v1_5 using SHA-256, as described in https://tools.ietf.org/html/rfc7518 */
  RS256 = "RS256",
  /** RSASSA-PKCS1-v1_5 using SHA-384, as described in https://tools.ietf.org/html/rfc7518 */
  RS384 = "RS384",
  /** RSASSA-PKCS1-v1_5 using SHA-512, as described in https://tools.ietf.org/html/rfc7518 */
  RS512 = "RS512",
  /** Reserved */
  Rsnull = "RSNULL",
  /** ECDSA using P-256 and SHA-256, as described in https://tools.ietf.org/html/rfc7518. */
  ES256 = "ES256",
  /** ECDSA using P-384 and SHA-384, as described in https://tools.ietf.org/html/rfc7518 */
  ES384 = "ES384",
  /** ECDSA using P-521 and SHA-512, as described in https://tools.ietf.org/html/rfc7518 */
  ES512 = "ES512",
  /** ECDSA using P-256K and SHA-256, as described in https://tools.ietf.org/html/rfc7518 */
  ES256K = "ES256K"
}

/**
 * Defines values for JsonWebKeySignatureAlgorithm. \
 * {@link KnownJsonWebKeySignatureAlgorithm} can be used interchangeably with JsonWebKeySignatureAlgorithm,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **PS256**: RSASSA-PSS using SHA-256 and MGF1 with SHA-256, as described in https://tools.ietf.org/html/rfc7518 \
 * **PS384**: RSASSA-PSS using SHA-384 and MGF1 with SHA-384, as described in https://tools.ietf.org/html/rfc7518 \
 * **PS512**: RSASSA-PSS using SHA-512 and MGF1 with SHA-512, as described in https://tools.ietf.org/html/rfc7518 \
 * **RS256**: RSASSA-PKCS1-v1_5 using SHA-256, as described in https://tools.ietf.org/html/rfc7518 \
 * **RS384**: RSASSA-PKCS1-v1_5 using SHA-384, as described in https://tools.ietf.org/html/rfc7518 \
 * **RS512**: RSASSA-PKCS1-v1_5 using SHA-512, as described in https://tools.ietf.org/html/rfc7518 \
 * **RSNULL**: Reserved \
 * **ES256**: ECDSA using P-256 and SHA-256, as described in https://tools.ietf.org/html/rfc7518. \
 * **ES384**: ECDSA using P-384 and SHA-384, as described in https://tools.ietf.org/html/rfc7518 \
 * **ES512**: ECDSA using P-521 and SHA-512, as described in https://tools.ietf.org/html/rfc7518 \
 * **ES256K**: ECDSA using P-256K and SHA-256, as described in https://tools.ietf.org/html/rfc7518
 */
export type JsonWebKeySignatureAlgorithm = string;

/** Optional parameters. */
export interface KeyVaultClientCreateKeyOptionalParams
  extends coreHttp.OperationOptions {
  /** The key size in bits. For example: 2048, 3072, or 4096 for RSA. */
  keySize?: number;
  /** The public exponent for a RSA key. */
  publicExponent?: number;
  /** Array of JsonWebKeyOperation */
  keyOps?: JsonWebKeyOperation[];
  /** The attributes of a key managed by the key vault service. */
  keyAttributes?: KeyAttributes;
  /** Application specific metadata in the form of key-value pairs. */
  tags?: { [propertyName: string]: string };
  /** Elliptic curve name. For valid values, see JsonWebKeyCurveName. */
  curve?: JsonWebKeyCurveName;
}

/** Contains response data for the createKey operation. */
export type KeyVaultClientCreateKeyResponse = KeyBundle & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: KeyBundle;
  };
};

/** Optional parameters. */
export interface KeyVaultClientImportKeyOptionalParams
  extends coreHttp.OperationOptions {
  /** Whether to import as a hardware key (HSM) or software key. */
  hsm?: boolean;
  /** The key management attributes. */
  keyAttributes?: KeyAttributes;
  /** Application specific metadata in the form of key-value pairs. */
  tags?: { [propertyName: string]: string };
}

/** Contains response data for the importKey operation. */
export type KeyVaultClientImportKeyResponse = KeyBundle & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: KeyBundle;
  };
};

/** Contains response data for the deleteKey operation. */
export type KeyVaultClientDeleteKeyResponse = DeletedKeyBundle & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: DeletedKeyBundle;
  };
};

/** Optional parameters. */
export interface KeyVaultClientUpdateKeyOptionalParams
  extends coreHttp.OperationOptions {
  /** Json web key operations. For more information on possible key operations, see JsonWebKeyOperation. */
  keyOps?: JsonWebKeyOperation[];
  /** The attributes of a key managed by the key vault service. */
  keyAttributes?: KeyAttributes;
  /** Application specific metadata in the form of key-value pairs. */
  tags?: { [propertyName: string]: string };
}

/** Contains response data for the updateKey operation. */
export type KeyVaultClientUpdateKeyResponse = KeyBundle & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: KeyBundle;
  };
};

/** Contains response data for the getKey operation. */
export type KeyVaultClientGetKeyResponse = KeyBundle & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: KeyBundle;
  };
};

/** Optional parameters. */
export interface KeyVaultClientGetKeyVersionsOptionalParams
  extends coreHttp.OperationOptions {
  /** Maximum number of results to return in a page. If not specified the service will return up to 25 results. */
  maxresults?: number;
}

/** Contains response data for the getKeyVersions operation. */
export type KeyVaultClientGetKeyVersionsResponse = KeyListResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: KeyListResult;
  };
};

/** Optional parameters. */
export interface KeyVaultClientGetKeysOptionalParams
  extends coreHttp.OperationOptions {
  /** Maximum number of results to return in a page. If not specified the service will return up to 25 results. */
  maxresults?: number;
}

/** Contains response data for the getKeys operation. */
export type KeyVaultClientGetKeysResponse = KeyListResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: KeyListResult;
  };
};

/** Contains response data for the backupKey operation. */
export type KeyVaultClientBackupKeyResponse = BackupKeyResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: BackupKeyResult;
  };
};

/** Contains response data for the restoreKey operation. */
export type KeyVaultClientRestoreKeyResponse = KeyBundle & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: KeyBundle;
  };
};

/** Optional parameters. */
export interface KeyVaultClientEncryptOptionalParams
  extends coreHttp.OperationOptions {
  /** Initialization vector for symmetric algorithms. */
  iv?: Uint8Array;
  /** Additional data to authenticate but not encrypt/decrypt when using authenticated crypto algorithms. */
  additionalAuthenticatedData?: Uint8Array;
  /** The tag to authenticate when performing decryption with an authenticated algorithm. */
  authenticationTag?: Uint8Array;
}

/** Contains response data for the encrypt operation. */
export type KeyVaultClientEncryptResponse = KeyOperationResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: KeyOperationResult;
  };
};

/** Optional parameters. */
export interface KeyVaultClientDecryptOptionalParams
  extends coreHttp.OperationOptions {
  /** Initialization vector for symmetric algorithms. */
  iv?: Uint8Array;
  /** Additional data to authenticate but not encrypt/decrypt when using authenticated crypto algorithms. */
  additionalAuthenticatedData?: Uint8Array;
  /** The tag to authenticate when performing decryption with an authenticated algorithm. */
  authenticationTag?: Uint8Array;
}

/** Contains response data for the decrypt operation. */
export type KeyVaultClientDecryptResponse = KeyOperationResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: KeyOperationResult;
  };
};

/** Contains response data for the sign operation. */
export type KeyVaultClientSignResponse = KeyOperationResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: KeyOperationResult;
  };
};

/** Contains response data for the verify operation. */
export type KeyVaultClientVerifyResponse = KeyVerifyResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: KeyVerifyResult;
  };
};

/** Optional parameters. */
export interface KeyVaultClientWrapKeyOptionalParams
  extends coreHttp.OperationOptions {
  /** Initialization vector for symmetric algorithms. */
  iv?: Uint8Array;
  /** Additional data to authenticate but not encrypt/decrypt when using authenticated crypto algorithms. */
  additionalAuthenticatedData?: Uint8Array;
  /** The tag to authenticate when performing decryption with an authenticated algorithm. */
  authenticationTag?: Uint8Array;
}

/** Contains response data for the wrapKey operation. */
export type KeyVaultClientWrapKeyResponse = KeyOperationResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: KeyOperationResult;
  };
};

/** Optional parameters. */
export interface KeyVaultClientUnwrapKeyOptionalParams
  extends coreHttp.OperationOptions {
  /** Initialization vector for symmetric algorithms. */
  iv?: Uint8Array;
  /** Additional data to authenticate but not encrypt/decrypt when using authenticated crypto algorithms. */
  additionalAuthenticatedData?: Uint8Array;
  /** The tag to authenticate when performing decryption with an authenticated algorithm. */
  authenticationTag?: Uint8Array;
}

/** Contains response data for the unwrapKey operation. */
export type KeyVaultClientUnwrapKeyResponse = KeyOperationResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: KeyOperationResult;
  };
};

/** Optional parameters. */
export interface KeyVaultClientGetDeletedKeysOptionalParams
  extends coreHttp.OperationOptions {
  /** Maximum number of results to return in a page. If not specified the service will return up to 25 results. */
  maxresults?: number;
}

/** Contains response data for the getDeletedKeys operation. */
export type KeyVaultClientGetDeletedKeysResponse = DeletedKeyListResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: DeletedKeyListResult;
  };
};

/** Contains response data for the getDeletedKey operation. */
export type KeyVaultClientGetDeletedKeyResponse = DeletedKeyBundle & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: DeletedKeyBundle;
  };
};

/** Contains response data for the recoverDeletedKey operation. */
export type KeyVaultClientRecoverDeletedKeyResponse = KeyBundle & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: KeyBundle;
  };
};

/** Optional parameters. */
export interface KeyVaultClientGetKeyVersionsNextOptionalParams
  extends coreHttp.OperationOptions {
  /** Maximum number of results to return in a page. If not specified the service will return up to 25 results. */
  maxresults?: number;
}

/** Contains response data for the getKeyVersionsNext operation. */
export type KeyVaultClientGetKeyVersionsNextResponse = KeyListResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: KeyListResult;
  };
};

/** Optional parameters. */
export interface KeyVaultClientGetKeysNextOptionalParams
  extends coreHttp.OperationOptions {
  /** Maximum number of results to return in a page. If not specified the service will return up to 25 results. */
  maxresults?: number;
}

/** Contains response data for the getKeysNext operation. */
export type KeyVaultClientGetKeysNextResponse = KeyListResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: KeyListResult;
  };
};

/** Optional parameters. */
export interface KeyVaultClientGetDeletedKeysNextOptionalParams
  extends coreHttp.OperationOptions {
  /** Maximum number of results to return in a page. If not specified the service will return up to 25 results. */
  maxresults?: number;
}

/** Contains response data for the getDeletedKeysNext operation. */
export type KeyVaultClientGetDeletedKeysNextResponse = DeletedKeyListResult & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: DeletedKeyListResult;
  };
};

/** Optional parameters. */
export interface KeyVaultClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /** Overrides client endpoint. */
  endpoint?: string;
}
