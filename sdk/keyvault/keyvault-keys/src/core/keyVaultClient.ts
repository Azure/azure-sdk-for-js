/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { KeyVaultClientContext } from "./keyVaultClientContext";

class KeyVaultClient extends KeyVaultClientContext {
  /**
   * Initializes a new instance of the KeyVaultClient class.
   * @param apiVersion Client API version.
   * @param [options] The parameter options
   */
  constructor(apiVersion: string, options?: coreHttp.ServiceClientOptions) {
    super(apiVersion, options);
  }

  /**
   * The create key operation can be used to create any key type in Azure Key Vault. If the named key
   * already exists, Azure Key Vault creates a new version of the key. It requires the keys/create
   * permission.
   * @summary Creates a new key, stores it, then returns key parameters and attributes to the client.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name for the new key. The system will generate the version name for the new
   * key.
   * @param kty The type of key to create. For valid values, see JsonWebKeyType. Possible values
   * include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateKeyResponse>
   */
  createKey(vaultBaseUrl: string, keyName: string, kty: Models.JsonWebKeyType, options?: Models.KeyVaultClientCreateKeyOptionalParams): Promise<Models.CreateKeyResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name for the new key. The system will generate the version name for the new
   * key.
   * @param kty The type of key to create. For valid values, see JsonWebKeyType. Possible values
   * include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'
   * @param callback The callback
   */
  createKey(vaultBaseUrl: string, keyName: string, kty: Models.JsonWebKeyType, callback: coreHttp.ServiceCallback<Models.KeyBundle>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name for the new key. The system will generate the version name for the new
   * key.
   * @param kty The type of key to create. For valid values, see JsonWebKeyType. Possible values
   * include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'
   * @param options The optional parameters
   * @param callback The callback
   */
  createKey(vaultBaseUrl: string, keyName: string, kty: Models.JsonWebKeyType, options: Models.KeyVaultClientCreateKeyOptionalParams, callback: coreHttp.ServiceCallback<Models.KeyBundle>): void;
  createKey(vaultBaseUrl: string, keyName: string, kty: Models.JsonWebKeyType, options?: Models.KeyVaultClientCreateKeyOptionalParams | coreHttp.ServiceCallback<Models.KeyBundle>, callback?: coreHttp.ServiceCallback<Models.KeyBundle>): Promise<Models.CreateKeyResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        keyName,
        kty,
        options
      },
      createKeyOperationSpec,
      callback) as Promise<Models.CreateKeyResponse>;
  }

  /**
   * The import key operation may be used to import any key type into an Azure Key Vault. If the
   * named key already exists, Azure Key Vault creates a new version of the key. This operation
   * requires the keys/import permission.
   * @summary Imports an externally created key, stores it, and returns key parameters and attributes
   * to the client.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName Name for the imported key.
   * @param key The Json web key
   * @param [options] The optional parameters
   * @returns Promise<Models.ImportKeyResponse>
   */
  importKey(vaultBaseUrl: string, keyName: string, key: Models.JsonWebKey, options?: Models.KeyVaultClientImportKeyOptionalParams): Promise<Models.ImportKeyResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName Name for the imported key.
   * @param key The Json web key
   * @param callback The callback
   */
  importKey(vaultBaseUrl: string, keyName: string, key: Models.JsonWebKey, callback: coreHttp.ServiceCallback<Models.KeyBundle>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName Name for the imported key.
   * @param key The Json web key
   * @param options The optional parameters
   * @param callback The callback
   */
  importKey(vaultBaseUrl: string, keyName: string, key: Models.JsonWebKey, options: Models.KeyVaultClientImportKeyOptionalParams, callback: coreHttp.ServiceCallback<Models.KeyBundle>): void;
  importKey(vaultBaseUrl: string, keyName: string, key: Models.JsonWebKey, options?: Models.KeyVaultClientImportKeyOptionalParams | coreHttp.ServiceCallback<Models.KeyBundle>, callback?: coreHttp.ServiceCallback<Models.KeyBundle>): Promise<Models.ImportKeyResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        keyName,
        key,
        options
      },
      importKeyOperationSpec,
      callback) as Promise<Models.ImportKeyResponse>;
  }

  /**
   * The delete key operation cannot be used to remove individual versions of a key. This operation
   * removes the cryptographic material associated with the key, which means the key is not usable
   * for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the
   * keys/delete permission.
   * @summary Deletes a key of any type from storage in Azure Key Vault.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key to delete.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteKeyResponse>
   */
  deleteKey(vaultBaseUrl: string, keyName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DeleteKeyResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key to delete.
   * @param callback The callback
   */
  deleteKey(vaultBaseUrl: string, keyName: string, callback: coreHttp.ServiceCallback<Models.DeletedKeyBundle>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteKey(vaultBaseUrl: string, keyName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.DeletedKeyBundle>): void;
  deleteKey(vaultBaseUrl: string, keyName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeletedKeyBundle>, callback?: coreHttp.ServiceCallback<Models.DeletedKeyBundle>): Promise<Models.DeleteKeyResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        keyName,
        options
      },
      deleteKeyOperationSpec,
      callback) as Promise<Models.DeleteKeyResponse>;
  }

  /**
   * In order to perform this operation, the key must already exist in the Key Vault. Note: The
   * cryptographic material of a key itself cannot be changed. This operation requires the
   * keys/update permission.
   * @summary The update key operation changes specified attributes of a stored key and can be
   * applied to any key type and key version stored in Azure Key Vault.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of key to update.
   * @param keyVersion The version of the key to update.
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateKeyResponse>
   */
  updateKey(vaultBaseUrl: string, keyName: string, keyVersion: string, options?: Models.KeyVaultClientUpdateKeyOptionalParams): Promise<Models.UpdateKeyResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of key to update.
   * @param keyVersion The version of the key to update.
   * @param callback The callback
   */
  updateKey(vaultBaseUrl: string, keyName: string, keyVersion: string, callback: coreHttp.ServiceCallback<Models.KeyBundle>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of key to update.
   * @param keyVersion The version of the key to update.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateKey(vaultBaseUrl: string, keyName: string, keyVersion: string, options: Models.KeyVaultClientUpdateKeyOptionalParams, callback: coreHttp.ServiceCallback<Models.KeyBundle>): void;
  updateKey(vaultBaseUrl: string, keyName: string, keyVersion: string, options?: Models.KeyVaultClientUpdateKeyOptionalParams | coreHttp.ServiceCallback<Models.KeyBundle>, callback?: coreHttp.ServiceCallback<Models.KeyBundle>): Promise<Models.UpdateKeyResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        keyName,
        keyVersion,
        options
      },
      updateKeyOperationSpec,
      callback) as Promise<Models.UpdateKeyResponse>;
  }

  /**
   * The get key operation is applicable to all key types. If the requested key is symmetric, then no
   * key material is released in the response. This operation requires the keys/get permission.
   * @summary Gets the public part of a stored key.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key to get.
   * @param keyVersion Adding the version parameter retrieves a specific version of a key. This URI
   * fragment is optional. If not specified, the latest version of the key is returned.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetKeyResponse>
   */
  getKey(vaultBaseUrl: string, keyName: string, keyVersion: string, options?: coreHttp.RequestOptionsBase): Promise<Models.GetKeyResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key to get.
   * @param keyVersion Adding the version parameter retrieves a specific version of a key. This URI
   * fragment is optional. If not specified, the latest version of the key is returned.
   * @param callback The callback
   */
  getKey(vaultBaseUrl: string, keyName: string, keyVersion: string, callback: coreHttp.ServiceCallback<Models.KeyBundle>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key to get.
   * @param keyVersion Adding the version parameter retrieves a specific version of a key. This URI
   * fragment is optional. If not specified, the latest version of the key is returned.
   * @param options The optional parameters
   * @param callback The callback
   */
  getKey(vaultBaseUrl: string, keyName: string, keyVersion: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.KeyBundle>): void;
  getKey(vaultBaseUrl: string, keyName: string, keyVersion: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyBundle>, callback?: coreHttp.ServiceCallback<Models.KeyBundle>): Promise<Models.GetKeyResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        keyName,
        keyVersion,
        options
      },
      getKeyOperationSpec,
      callback) as Promise<Models.GetKeyResponse>;
  }

  /**
   * The full key identifier, attributes, and tags are provided in the response. This operation
   * requires the keys/list permission.
   * @summary Retrieves a list of individual key versions with the same key name.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetKeyVersionsResponse>
   */
  getKeyVersions(vaultBaseUrl: string, keyName: string, options?: Models.KeyVaultClientGetKeyVersionsOptionalParams): Promise<Models.GetKeyVersionsResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param callback The callback
   */
  getKeyVersions(vaultBaseUrl: string, keyName: string, callback: coreHttp.ServiceCallback<Models.KeyListResult>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param options The optional parameters
   * @param callback The callback
   */
  getKeyVersions(vaultBaseUrl: string, keyName: string, options: Models.KeyVaultClientGetKeyVersionsOptionalParams, callback: coreHttp.ServiceCallback<Models.KeyListResult>): void;
  getKeyVersions(vaultBaseUrl: string, keyName: string, options?: Models.KeyVaultClientGetKeyVersionsOptionalParams | coreHttp.ServiceCallback<Models.KeyListResult>, callback?: coreHttp.ServiceCallback<Models.KeyListResult>): Promise<Models.GetKeyVersionsResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        keyName,
        options
      },
      getKeyVersionsOperationSpec,
      callback) as Promise<Models.GetKeyVersionsResponse>;
  }

  /**
   * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public
   * part of a stored key. The LIST operation is applicable to all key types, however only the base
   * key identifier, attributes, and tags are provided in the response. Individual versions of a key
   * are not listed in the response. This operation requires the keys/list permission.
   * @summary List keys in the specified vault.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetKeysResponse>
   */
  getKeys(vaultBaseUrl: string, options?: Models.KeyVaultClientGetKeysOptionalParams): Promise<Models.GetKeysResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param callback The callback
   */
  getKeys(vaultBaseUrl: string, callback: coreHttp.ServiceCallback<Models.KeyListResult>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The optional parameters
   * @param callback The callback
   */
  getKeys(vaultBaseUrl: string, options: Models.KeyVaultClientGetKeysOptionalParams, callback: coreHttp.ServiceCallback<Models.KeyListResult>): void;
  getKeys(vaultBaseUrl: string, options?: Models.KeyVaultClientGetKeysOptionalParams | coreHttp.ServiceCallback<Models.KeyListResult>, callback?: coreHttp.ServiceCallback<Models.KeyListResult>): Promise<Models.GetKeysResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        options
      },
      getKeysOperationSpec,
      callback) as Promise<Models.GetKeysResponse>;
  }

  /**
   * The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this
   * operation does NOT return key material in a form that can be used outside the Azure Key Vault
   * system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key
   * Vault itself. The intent of this operation is to allow a client to GENERATE a key in one Azure
   * Key Vault instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance.
   * The BACKUP operation may be used to export, in protected form, any key type from Azure Key
   * Vault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed
   * within geographical boundaries only; meaning that a BACKUP from one geographical area cannot be
   * restored to another geographical area. For example, a backup from the US geographical area
   * cannot be restored in an EU geographical area. This operation requires the key/backup
   * permission.
   * @summary Requests that a backup of the specified key be downloaded to the client.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param [options] The optional parameters
   * @returns Promise<Models.BackupKeyResponse>
   */
  backupKey(vaultBaseUrl: string, keyName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.BackupKeyResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param callback The callback
   */
  backupKey(vaultBaseUrl: string, keyName: string, callback: coreHttp.ServiceCallback<Models.BackupKeyResult>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param options The optional parameters
   * @param callback The callback
   */
  backupKey(vaultBaseUrl: string, keyName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.BackupKeyResult>): void;
  backupKey(vaultBaseUrl: string, keyName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.BackupKeyResult>, callback?: coreHttp.ServiceCallback<Models.BackupKeyResult>): Promise<Models.BackupKeyResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        keyName,
        options
      },
      backupKeyOperationSpec,
      callback) as Promise<Models.BackupKeyResponse>;
  }

  /**
   * Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier,
   * attributes and access control policies. The RESTORE operation may be used to import a previously
   * backed up key. Individual versions of a key cannot be restored. The key is restored in its
   * entirety with the same key name as it had when it was backed up. If the key name is not
   * available in the target Key Vault, the RESTORE operation will be rejected. While the key name is
   * retained during restore, the final key identifier will change if the key is restored to a
   * different vault. Restore will restore all versions and preserve version identifiers. The RESTORE
   * operation is subject to security constraints: The target Key Vault must be owned by the same
   * Microsoft Azure Subscription as the source Key Vault The user must have RESTORE permission in
   * the target Key Vault. This operation requires the keys/restore permission.
   * @summary Restores a backed up key to a vault.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyBundleBackup The backup blob associated with a key bundle.
   * @param [options] The optional parameters
   * @returns Promise<Models.RestoreKeyResponse>
   */
  restoreKey(vaultBaseUrl: string, keyBundleBackup: Uint8Array, options?: coreHttp.RequestOptionsBase): Promise<Models.RestoreKeyResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyBundleBackup The backup blob associated with a key bundle.
   * @param callback The callback
   */
  restoreKey(vaultBaseUrl: string, keyBundleBackup: Uint8Array, callback: coreHttp.ServiceCallback<Models.KeyBundle>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyBundleBackup The backup blob associated with a key bundle.
   * @param options The optional parameters
   * @param callback The callback
   */
  restoreKey(vaultBaseUrl: string, keyBundleBackup: Uint8Array, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.KeyBundle>): void;
  restoreKey(vaultBaseUrl: string, keyBundleBackup: Uint8Array, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyBundle>, callback?: coreHttp.ServiceCallback<Models.KeyBundle>): Promise<Models.RestoreKeyResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        keyBundleBackup,
        options
      },
      restoreKeyOperationSpec,
      callback) as Promise<Models.RestoreKeyResponse>;
  }

  /**
   * The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is
   * stored in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data,
   * the size of which is dependent on the target key and the encryption algorithm to be used. The
   * ENCRYPT operation is only strictly necessary for symmetric keys stored in Azure Key Vault since
   * protection with an asymmetric key can be performed using public portion of the key. This
   * operation is supported for asymmetric keys as a convenience for callers that have a
   * key-reference but do not have access to the public key material. This operation requires the
   * keys/encrypt permission.
   * @summary Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key
   * vault.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param keyVersion The version of the key.
   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',
   * 'RSA1_5'
   * @param value
   * @param [options] The optional parameters
   * @returns Promise<Models.EncryptResponse>
   */
  encrypt(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: Models.JsonWebKeyEncryptionAlgorithm, value: Uint8Array, options?: coreHttp.RequestOptionsBase): Promise<Models.EncryptResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param keyVersion The version of the key.
   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',
   * 'RSA1_5'
   * @param value
   * @param callback The callback
   */
  encrypt(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: Models.JsonWebKeyEncryptionAlgorithm, value: Uint8Array, callback: coreHttp.ServiceCallback<Models.KeyOperationResult>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param keyVersion The version of the key.
   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',
   * 'RSA1_5'
   * @param value
   * @param options The optional parameters
   * @param callback The callback
   */
  encrypt(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: Models.JsonWebKeyEncryptionAlgorithm, value: Uint8Array, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.KeyOperationResult>): void;
  encrypt(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: Models.JsonWebKeyEncryptionAlgorithm, value: Uint8Array, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyOperationResult>, callback?: coreHttp.ServiceCallback<Models.KeyOperationResult>): Promise<Models.EncryptResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        keyName,
        keyVersion,
        algorithm,
        value,
        options
      },
      encryptOperationSpec,
      callback) as Promise<Models.EncryptResponse>;
  }

  /**
   * The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key
   * and specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single
   * block of data may be decrypted, the size of this block is dependent on the target key and the
   * algorithm to be used. The DECRYPT operation applies to asymmetric and symmetric keys stored in
   * Azure Key Vault since it uses the private portion of the key. This operation requires the
   * keys/decrypt permission.
   * @summary Decrypts a single block of encrypted data.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param keyVersion The version of the key.
   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',
   * 'RSA1_5'
   * @param value
   * @param [options] The optional parameters
   * @returns Promise<Models.DecryptResponse>
   */
  decrypt(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: Models.JsonWebKeyEncryptionAlgorithm, value: Uint8Array, options?: coreHttp.RequestOptionsBase): Promise<Models.DecryptResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param keyVersion The version of the key.
   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',
   * 'RSA1_5'
   * @param value
   * @param callback The callback
   */
  decrypt(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: Models.JsonWebKeyEncryptionAlgorithm, value: Uint8Array, callback: coreHttp.ServiceCallback<Models.KeyOperationResult>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param keyVersion The version of the key.
   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',
   * 'RSA1_5'
   * @param value
   * @param options The optional parameters
   * @param callback The callback
   */
  decrypt(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: Models.JsonWebKeyEncryptionAlgorithm, value: Uint8Array, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.KeyOperationResult>): void;
  decrypt(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: Models.JsonWebKeyEncryptionAlgorithm, value: Uint8Array, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyOperationResult>, callback?: coreHttp.ServiceCallback<Models.KeyOperationResult>): Promise<Models.DecryptResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        keyName,
        keyVersion,
        algorithm,
        value,
        options
      },
      decryptOperationSpec,
      callback) as Promise<Models.DecryptResponse>;
  }

  /**
   * The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault
   * since this operation uses the private portion of the key. This operation requires the keys/sign
   * permission.
   * @summary Creates a signature from a digest using the specified key.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param keyVersion The version of the key.
   * @param algorithm The signing/verification algorithm identifier. For more information on possible
   * algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384',
   * 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'
   * @param value
   * @param [options] The optional parameters
   * @returns Promise<Models.SignResponse>
   */
  sign(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: Models.JsonWebKeySignatureAlgorithm, value: Uint8Array, options?: coreHttp.RequestOptionsBase): Promise<Models.SignResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param keyVersion The version of the key.
   * @param algorithm The signing/verification algorithm identifier. For more information on possible
   * algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384',
   * 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'
   * @param value
   * @param callback The callback
   */
  sign(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: Models.JsonWebKeySignatureAlgorithm, value: Uint8Array, callback: coreHttp.ServiceCallback<Models.KeyOperationResult>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param keyVersion The version of the key.
   * @param algorithm The signing/verification algorithm identifier. For more information on possible
   * algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384',
   * 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'
   * @param value
   * @param options The optional parameters
   * @param callback The callback
   */
  sign(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: Models.JsonWebKeySignatureAlgorithm, value: Uint8Array, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.KeyOperationResult>): void;
  sign(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: Models.JsonWebKeySignatureAlgorithm, value: Uint8Array, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyOperationResult>, callback?: coreHttp.ServiceCallback<Models.KeyOperationResult>): Promise<Models.SignResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        keyName,
        keyVersion,
        algorithm,
        value,
        options
      },
      signOperationSpec,
      callback) as Promise<Models.SignResponse>;
  }

  /**
   * The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not
   * strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification
   * can be performed using the public portion of the key but this operation is supported as a
   * convenience for callers that only have a key-reference and not the public portion of the key.
   * This operation requires the keys/verify permission.
   * @summary Verifies a signature using a specified key.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param keyVersion The version of the key.
   * @param algorithm The signing/verification algorithm. For more information on possible algorithm
   * types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512',
   * 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'
   * @param digest The digest used for signing.
   * @param signature The signature to be verified.
   * @param [options] The optional parameters
   * @returns Promise<Models.VerifyResponse>
   */
  verify(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: Models.JsonWebKeySignatureAlgorithm, digest: Uint8Array, signature: Uint8Array, options?: coreHttp.RequestOptionsBase): Promise<Models.VerifyResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param keyVersion The version of the key.
   * @param algorithm The signing/verification algorithm. For more information on possible algorithm
   * types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512',
   * 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'
   * @param digest The digest used for signing.
   * @param signature The signature to be verified.
   * @param callback The callback
   */
  verify(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: Models.JsonWebKeySignatureAlgorithm, digest: Uint8Array, signature: Uint8Array, callback: coreHttp.ServiceCallback<Models.KeyVerifyResult>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param keyVersion The version of the key.
   * @param algorithm The signing/verification algorithm. For more information on possible algorithm
   * types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512',
   * 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'
   * @param digest The digest used for signing.
   * @param signature The signature to be verified.
   * @param options The optional parameters
   * @param callback The callback
   */
  verify(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: Models.JsonWebKeySignatureAlgorithm, digest: Uint8Array, signature: Uint8Array, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.KeyVerifyResult>): void;
  verify(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: Models.JsonWebKeySignatureAlgorithm, digest: Uint8Array, signature: Uint8Array, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyVerifyResult>, callback?: coreHttp.ServiceCallback<Models.KeyVerifyResult>): Promise<Models.VerifyResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        keyName,
        keyVersion,
        algorithm,
        digest,
        signature,
        options
      },
      verifyOperationSpec,
      callback) as Promise<Models.VerifyResponse>;
  }

  /**
   * The WRAP operation supports encryption of a symmetric key using a key encryption key that has
   * previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for
   * symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be
   * performed using the public portion of the key. This operation is supported for asymmetric keys
   * as a convenience for callers that have a key-reference but do not have access to the public key
   * material. This operation requires the keys/wrapKey permission.
   * @summary Wraps a symmetric key using a specified key.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param keyVersion The version of the key.
   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',
   * 'RSA1_5'
   * @param value
   * @param [options] The optional parameters
   * @returns Promise<Models.WrapKeyResponse>
   */
  wrapKey(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: Models.JsonWebKeyEncryptionAlgorithm, value: Uint8Array, options?: coreHttp.RequestOptionsBase): Promise<Models.WrapKeyResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param keyVersion The version of the key.
   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',
   * 'RSA1_5'
   * @param value
   * @param callback The callback
   */
  wrapKey(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: Models.JsonWebKeyEncryptionAlgorithm, value: Uint8Array, callback: coreHttp.ServiceCallback<Models.KeyOperationResult>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param keyVersion The version of the key.
   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',
   * 'RSA1_5'
   * @param value
   * @param options The optional parameters
   * @param callback The callback
   */
  wrapKey(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: Models.JsonWebKeyEncryptionAlgorithm, value: Uint8Array, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.KeyOperationResult>): void;
  wrapKey(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: Models.JsonWebKeyEncryptionAlgorithm, value: Uint8Array, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyOperationResult>, callback?: coreHttp.ServiceCallback<Models.KeyOperationResult>): Promise<Models.WrapKeyResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        keyName,
        keyVersion,
        algorithm,
        value,
        options
      },
      wrapKeyOperationSpec,
      callback) as Promise<Models.WrapKeyResponse>;
  }

  /**
   * The UNWRAP operation supports decryption of a symmetric key using the target key encryption key.
   * This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric
   * and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This
   * operation requires the keys/unwrapKey permission.
   * @summary Unwraps a symmetric key using the specified key that was initially used for wrapping
   * that key.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param keyVersion The version of the key.
   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',
   * 'RSA1_5'
   * @param value
   * @param [options] The optional parameters
   * @returns Promise<Models.UnwrapKeyResponse>
   */
  unwrapKey(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: Models.JsonWebKeyEncryptionAlgorithm, value: Uint8Array, options?: coreHttp.RequestOptionsBase): Promise<Models.UnwrapKeyResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param keyVersion The version of the key.
   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',
   * 'RSA1_5'
   * @param value
   * @param callback The callback
   */
  unwrapKey(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: Models.JsonWebKeyEncryptionAlgorithm, value: Uint8Array, callback: coreHttp.ServiceCallback<Models.KeyOperationResult>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param keyVersion The version of the key.
   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',
   * 'RSA1_5'
   * @param value
   * @param options The optional parameters
   * @param callback The callback
   */
  unwrapKey(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: Models.JsonWebKeyEncryptionAlgorithm, value: Uint8Array, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.KeyOperationResult>): void;
  unwrapKey(vaultBaseUrl: string, keyName: string, keyVersion: string, algorithm: Models.JsonWebKeyEncryptionAlgorithm, value: Uint8Array, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyOperationResult>, callback?: coreHttp.ServiceCallback<Models.KeyOperationResult>): Promise<Models.UnwrapKeyResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        keyName,
        keyVersion,
        algorithm,
        value,
        options
      },
      unwrapKeyOperationSpec,
      callback) as Promise<Models.UnwrapKeyResponse>;
  }

  /**
   * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public
   * part of a deleted key. This operation includes deletion-specific information. The Get Deleted
   * Keys operation is applicable for vaults enabled for soft-delete. While the operation can be
   * invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault.
   * This operation requires the keys/list permission.
   * @summary Lists the deleted keys in the specified vault.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDeletedKeysResponse>
   */
  getDeletedKeys(vaultBaseUrl: string, options?: Models.KeyVaultClientGetDeletedKeysOptionalParams): Promise<Models.GetDeletedKeysResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param callback The callback
   */
  getDeletedKeys(vaultBaseUrl: string, callback: coreHttp.ServiceCallback<Models.DeletedKeyListResult>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeletedKeys(vaultBaseUrl: string, options: Models.KeyVaultClientGetDeletedKeysOptionalParams, callback: coreHttp.ServiceCallback<Models.DeletedKeyListResult>): void;
  getDeletedKeys(vaultBaseUrl: string, options?: Models.KeyVaultClientGetDeletedKeysOptionalParams | coreHttp.ServiceCallback<Models.DeletedKeyListResult>, callback?: coreHttp.ServiceCallback<Models.DeletedKeyListResult>): Promise<Models.GetDeletedKeysResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        options
      },
      getDeletedKeysOperationSpec,
      callback) as Promise<Models.GetDeletedKeysResponse>;
  }

  /**
   * The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation
   * can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled
   * vault. This operation requires the keys/get permission.
   * @summary Gets the public part of a deleted key.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDeletedKeyResponse>
   */
  getDeletedKey(vaultBaseUrl: string, keyName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.GetDeletedKeyResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param callback The callback
   */
  getDeletedKey(vaultBaseUrl: string, keyName: string, callback: coreHttp.ServiceCallback<Models.DeletedKeyBundle>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeletedKey(vaultBaseUrl: string, keyName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.DeletedKeyBundle>): void;
  getDeletedKey(vaultBaseUrl: string, keyName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeletedKeyBundle>, callback?: coreHttp.ServiceCallback<Models.DeletedKeyBundle>): Promise<Models.GetDeletedKeyResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        keyName,
        options
      },
      getDeletedKeyOperationSpec,
      callback) as Promise<Models.GetDeletedKeyResponse>;
  }

  /**
   * The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the
   * operation can be invoked on any vault, it will return an error if invoked on a non soft-delete
   * enabled vault. This operation requires the keys/purge permission.
   * @summary Permanently deletes the specified key.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  purgeDeletedKey(vaultBaseUrl: string, keyName: string, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key
   * @param callback The callback
   */
  purgeDeletedKey(vaultBaseUrl: string, keyName: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key
   * @param options The optional parameters
   * @param callback The callback
   */
  purgeDeletedKey(vaultBaseUrl: string, keyName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  purgeDeletedKey(vaultBaseUrl: string, keyName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        keyName,
        options
      },
      purgeDeletedKeyOperationSpec,
      callback);
  }

  /**
   * The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults.
   * It recovers the deleted key back to its latest version under /keys. An attempt to recover an
   * non-deleted key will return an error. Consider this the inverse of the delete operation on
   * soft-delete enabled vaults. This operation requires the keys/recover permission.
   * @summary Recovers the deleted key to its latest version.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the deleted key.
   * @param [options] The optional parameters
   * @returns Promise<Models.RecoverDeletedKeyResponse>
   */
  recoverDeletedKey(vaultBaseUrl: string, keyName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.RecoverDeletedKeyResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the deleted key.
   * @param callback The callback
   */
  recoverDeletedKey(vaultBaseUrl: string, keyName: string, callback: coreHttp.ServiceCallback<Models.KeyBundle>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the deleted key.
   * @param options The optional parameters
   * @param callback The callback
   */
  recoverDeletedKey(vaultBaseUrl: string, keyName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.KeyBundle>): void;
  recoverDeletedKey(vaultBaseUrl: string, keyName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyBundle>, callback?: coreHttp.ServiceCallback<Models.KeyBundle>): Promise<Models.RecoverDeletedKeyResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        keyName,
        options
      },
      recoverDeletedKeyOperationSpec,
      callback) as Promise<Models.RecoverDeletedKeyResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const createKeyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "keys/{key-name}/create",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.keyName0
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: {
      kty: "kty",
      keySize: [
        "options",
        "keySize"
      ],
      keyOps: [
        "options",
        "keyOps"
      ],
      keyAttributes: [
        "options",
        "keyAttributes"
      ],
      tags: [
        "options",
        "tags"
      ],
      curve: [
        "options",
        "curve"
      ]
    },
    mapper: {
      ...Mappers.KeyCreateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.KeyBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const importKeyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "keys/{key-name}",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.keyName0
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: {
      hsm: [
        "options",
        "hsm"
      ],
      key: "key",
      keyAttributes: [
        "options",
        "keyAttributes"
      ],
      tags: [
        "options",
        "tags"
      ]
    },
    mapper: {
      ...Mappers.KeyImportParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.KeyBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const deleteKeyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "keys/{key-name}",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.keyName1
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeletedKeyBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const updateKeyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PATCH",
  path: "keys/{key-name}/{key-version}",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.keyName1,
    Parameters.keyVersion
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: {
      keyOps: [
        "options",
        "keyOps"
      ],
      keyAttributes: [
        "options",
        "keyAttributes"
      ],
      tags: [
        "options",
        "tags"
      ]
    },
    mapper: {
      ...Mappers.KeyUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.KeyBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const getKeyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "keys/{key-name}/{key-version}",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.keyName1,
    Parameters.keyVersion
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.KeyBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const getKeyVersionsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "keys/{key-name}/versions",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.keyName1
  ],
  queryParameters: [
    Parameters.maxresults,
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.KeyListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const getKeysOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "keys",
  urlParameters: [
    Parameters.vaultBaseUrl
  ],
  queryParameters: [
    Parameters.maxresults,
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.KeyListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const backupKeyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "keys/{key-name}/backup",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.keyName1
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupKeyResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const restoreKeyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "keys/restore",
  urlParameters: [
    Parameters.vaultBaseUrl
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: {
      keyBundleBackup: "keyBundleBackup"
    },
    mapper: {
      ...Mappers.KeyRestoreParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.KeyBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const encryptOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "keys/{key-name}/{key-version}/encrypt",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.keyName1,
    Parameters.keyVersion
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: {
      algorithm: "algorithm",
      value: "value"
    },
    mapper: {
      ...Mappers.KeyOperationsParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.KeyOperationResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const decryptOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "keys/{key-name}/{key-version}/decrypt",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.keyName1,
    Parameters.keyVersion
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: {
      algorithm: "algorithm",
      value: "value"
    },
    mapper: {
      ...Mappers.KeyOperationsParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.KeyOperationResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const signOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "keys/{key-name}/{key-version}/sign",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.keyName1,
    Parameters.keyVersion
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: {
      algorithm: "algorithm",
      value: "value"
    },
    mapper: {
      ...Mappers.KeySignParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.KeyOperationResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const verifyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "keys/{key-name}/{key-version}/verify",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.keyName1,
    Parameters.keyVersion
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: {
      algorithm: "algorithm",
      digest: "digest",
      signature: "signature"
    },
    mapper: {
      ...Mappers.KeyVerifyParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.KeyVerifyResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const wrapKeyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "keys/{key-name}/{key-version}/wrapkey",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.keyName1,
    Parameters.keyVersion
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: {
      algorithm: "algorithm",
      value: "value"
    },
    mapper: {
      ...Mappers.KeyOperationsParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.KeyOperationResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const unwrapKeyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "keys/{key-name}/{key-version}/unwrapkey",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.keyName1,
    Parameters.keyVersion
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: {
      algorithm: "algorithm",
      value: "value"
    },
    mapper: {
      ...Mappers.KeyOperationsParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.KeyOperationResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const getDeletedKeysOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "deletedkeys",
  urlParameters: [
    Parameters.vaultBaseUrl
  ],
  queryParameters: [
    Parameters.maxresults,
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeletedKeyListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const getDeletedKeyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "deletedkeys/{key-name}",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.keyName1
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeletedKeyBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const purgeDeletedKeyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "deletedkeys/{key-name}",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.keyName1
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const recoverDeletedKeyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "deletedkeys/{key-name}/recover",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.keyName1
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.KeyBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

export {
  KeyVaultClient,
  KeyVaultClientContext,
  Models as KeyVaultModels,
  Mappers as KeyVaultMappers
};
