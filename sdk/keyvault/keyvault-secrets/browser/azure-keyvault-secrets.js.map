{"version":3,"file":"azure-keyvault-secrets.js","sources":["../../../../common/temp/node_modules/.pnpm/registry.npmjs.org/tslib/1.10.0/node_modules/tslib/tslib.es6.js","../../../core/core-http/lib/httpHeaders.ts","../../../core/core-http/lib/util/base64.browser.ts","../../../../common/temp/node_modules/.pnpm/registry.npmjs.org/uuid/3.4.0/node_modules/uuid/lib/rng-browser.js","../../../../common/temp/node_modules/.pnpm/registry.npmjs.org/uuid/3.4.0/node_modules/uuid/lib/bytesToUuid.js","../../../../common/temp/node_modules/.pnpm/registry.npmjs.org/uuid/3.4.0/node_modules/uuid/v4.js","../../../core/core-http/lib/util/constants.ts","../../../core/core-http/lib/util/utils.ts","../../../core/core-http/lib/serializer.ts","../../../core/core-http/lib/webResource.ts","../../../core/abort-controller/src/AbortSignal.ts","../../../core/abort-controller/src/AbortController.ts","../../../core/core-http/lib/util/inspect.browser.ts","../../../core/core-http/lib/url.ts","../../../core/core-http/lib/util/sanitizer.ts","../../../core/core-http/lib/restError.ts","../../../core/core-http/lib/xhrHttpClient.ts","../../../core/core-http/lib/httpPipelineLogLevel.ts","../../../core/core-http/lib/operationOptions.ts","../../../core/core-auth/src/tokenCredential.ts","../../../core/core-http/lib/policies/requestPolicy.ts","../../../core/logger/src/log.browser.ts","../../../core/logger/src/debug.ts","../../../core/logger/src/logger.ts","../../../core/core-http/lib/log.ts","../../../core/core-http/lib/policies/logPolicy.ts","../../../core/core-http/lib/operationParameter.ts","../../../core/core-http/lib/operationSpec.ts","../../../core/core-http/lib/util/xml.browser.ts","../../../core/core-http/lib/policies/deserializationPolicy.ts","../../../core/core-http/lib/policies/exponentialRetryPolicy.ts","../../../core/core-http/lib/policies/generateClientRequestIdPolicy.ts","../../../core/core-http/lib/policies/msRestUserAgentPolicy.browser.ts","../../../core/core-http/lib/policies/userAgentPolicy.ts","../../../core/core-http/lib/policies/redirectPolicy.ts","../../../core/core-http/lib/policies/rpRegistrationPolicy.ts","../../../core/core-http/lib/credentials/accessTokenCache.ts","../../../core/core-http/lib/policies/bearerTokenAuthenticationPolicy.ts","../../../core/core-http/lib/policies/systemErrorRetryPolicy.ts","../../../core/core-http/lib/queryCollectionFormat.ts","../../../core/core-http/lib/policies/throttlingRetryPolicy.ts","../../../core/core-http/lib/policies/signingPolicy.ts","../../../core/core-http/lib/policies/keepAlivePolicy.ts","../../../../common/temp/node_modules/.pnpm/registry.npmjs.org/@azure/core-tracing/1.0.0-preview.7/node_modules/@azure/core-tracing/lib/tracers/noop/noOpSpan.ts","../../../../common/temp/node_modules/.pnpm/registry.npmjs.org/@azure/core-tracing/1.0.0-preview.7/node_modules/@azure/core-tracing/lib/tracers/noop/noOpBinaryFormat.ts","../../../../common/temp/node_modules/.pnpm/registry.npmjs.org/@azure/core-tracing/1.0.0-preview.7/node_modules/@azure/core-tracing/lib/tracers/noop/noOpHttpTextFormat.ts","../../../../common/temp/node_modules/.pnpm/registry.npmjs.org/@azure/core-tracing/1.0.0-preview.7/node_modules/@azure/core-tracing/lib/tracers/noop/noOpTracer.ts","../../../../common/temp/node_modules/.pnpm/registry.npmjs.org/@azure/core-tracing/1.0.0-preview.7/node_modules/@azure/core-tracing/lib/utils/global.browser.ts","../../../../common/temp/node_modules/.pnpm/registry.npmjs.org/@azure/core-tracing/1.0.0-preview.7/node_modules/@azure/core-tracing/lib/utils/cache.ts","../../../../common/temp/node_modules/.pnpm/registry.npmjs.org/@azure/core-tracing/1.0.0-preview.7/node_modules/@azure/core-tracing/lib/tracerProxy.ts","../../../../common/temp/node_modules/.pnpm/registry.npmjs.org/@opentelemetry/types/0.2.0/node_modules/@opentelemetry/types/build/src/distributed_context/EntryValue.js","../../../../common/temp/node_modules/.pnpm/registry.npmjs.org/@opentelemetry/types/0.2.0/node_modules/@opentelemetry/types/build/src/metrics/Metric.js","../../../../common/temp/node_modules/.pnpm/registry.npmjs.org/@opentelemetry/types/0.2.0/node_modules/@opentelemetry/types/build/src/trace/span_kind.js","../../../../common/temp/node_modules/.pnpm/registry.npmjs.org/@opentelemetry/types/0.2.0/node_modules/@opentelemetry/types/build/src/trace/status.js","../../../../common/temp/node_modules/.pnpm/registry.npmjs.org/@opentelemetry/types/0.2.0/node_modules/@opentelemetry/types/build/src/trace/trace_flags.js","../../../../common/temp/node_modules/.pnpm/registry.npmjs.org/@opentelemetry/types/0.2.0/node_modules/@opentelemetry/types/build/src/index.js","../../../../common/temp/node_modules/.pnpm/registry.npmjs.org/@azure/core-tracing/1.0.0-preview.7/node_modules/@azure/core-tracing/lib/utils/traceParentHeader.ts","../../../core/core-http/lib/policies/tracingPolicy.ts","../../../core/core-http/lib/serviceClient.ts","../src/log.ts","../../../core/core-asynciterator-polyfill/src/index.ts","../../../core/core-paging/dist-esm/index.js","../src/core/models/mappers.ts","../src/core/models/parameters.ts","../src/core/keyVaultClientContext.ts","../src/core/keyVaultClient.ts","../src/core/utils/constants.ts","../src/core/challengeBasedAuthenticationPolicy.ts","../../../core/core-lro/src/poller.ts","../src/lro/delete/operation.ts","../src/lro/delete/poller.ts","../src/lro/recover/operation.ts","../src/lro/recover/poller.ts","../../../../common/temp/node_modules/.pnpm/registry.npmjs.org/punycode/1.3.2/node_modules/punycode/punycode.js","../../../../common/temp/node_modules/.pnpm/registry.npmjs.org/url/0.11.0/node_modules/url/util.js","../../../../common/temp/node_modules/.pnpm/registry.npmjs.org/querystring/0.2.0/node_modules/querystring/decode.js","../../../../common/temp/node_modules/.pnpm/registry.npmjs.org/querystring/0.2.0/node_modules/querystring/encode.js","../../../../common/temp/node_modules/.pnpm/registry.npmjs.org/querystring/0.2.0/node_modules/querystring/index.js","../../../../common/temp/node_modules/.pnpm/registry.npmjs.org/url/0.11.0/node_modules/url/url.js","../src/core/utils.ts","../src/index.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * A collection of HttpHeaders that can be sent with a HTTP request.\n */\nfunction getHeaderKey(headerName: string) {\n  return headerName.toLowerCase();\n}\n\n/**\n * An individual header within a HttpHeaders collection.\n */\nexport interface HttpHeader {\n  /**\n   * The name of the header.\n   */\n  name: string;\n\n  /**\n   * The value of the header.\n   */\n  value: string;\n}\n\n/**\n * A HttpHeaders collection represented as a simple JSON object.\n */\nexport type RawHttpHeaders = { [headerName: string]: string };\n\n/**\n * A collection of HTTP header key/value pairs.\n */\nexport class HttpHeaders {\n  private readonly _headersMap: { [headerKey: string]: HttpHeader };\n\n  constructor(rawHeaders?: RawHttpHeaders) {\n    this._headersMap = {};\n    if (rawHeaders) {\n      for (const headerName in rawHeaders) {\n        this.set(headerName, rawHeaders[headerName]);\n      }\n    }\n  }\n\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param headerName The name of the header to set. This value is case-insensitive.\n   * @param headerValue The value of the header to set.\n   */\n  public set(headerName: string, headerValue: string | number): void {\n    this._headersMap[getHeaderKey(headerName)] = {\n      name: headerName,\n      value: headerValue.toString()\n    };\n  }\n\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param headerName The name of the header.\n   */\n  public get(headerName: string): string | undefined {\n    const header: HttpHeader = this._headersMap[getHeaderKey(headerName)];\n    return !header ? undefined : header.value;\n  }\n\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   */\n  public contains(headerName: string): boolean {\n    return !!this._headersMap[getHeaderKey(headerName)];\n  }\n\n  /**\n   * Remove the header with the provided headerName. Return whether or not the header existed and\n   * was removed.\n   * @param headerName The name of the header to remove.\n   */\n  public remove(headerName: string): boolean {\n    const result: boolean = this.contains(headerName);\n    delete this._headersMap[getHeaderKey(headerName)];\n    return result;\n  }\n\n  /**\n   * Get the headers that are contained this collection as an object.\n   */\n  public rawHeaders(): RawHttpHeaders {\n    const result: RawHttpHeaders = {};\n    for (const headerKey in this._headersMap) {\n      const header: HttpHeader = this._headersMap[headerKey];\n      result[header.name.toLowerCase()] = header.value;\n    }\n    return result;\n  }\n\n  /**\n   * Get the headers that are contained in this collection as an array.\n   */\n  public headersArray(): HttpHeader[] {\n    const headers: HttpHeader[] = [];\n    for (const headerKey in this._headersMap) {\n      headers.push(this._headersMap[headerKey]);\n    }\n    return headers;\n  }\n\n  /**\n   * Get the header names that are contained in this collection.\n   */\n  public headerNames(): string[] {\n    const headerNames: string[] = [];\n    const headers: HttpHeader[] = this.headersArray();\n    for (let i = 0; i < headers.length; ++i) {\n      headerNames.push(headers[i].name);\n    }\n    return headerNames;\n  }\n\n  /**\n   * Get the header names that are contained in this collection.\n   */\n  public headerValues(): string[] {\n    const headerValues: string[] = [];\n    const headers: HttpHeader[] = this.headersArray();\n    for (let i = 0; i < headers.length; ++i) {\n      headerValues.push(headers[i].value);\n    }\n    return headerValues;\n  }\n\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   */\n  public toJson(): RawHttpHeaders {\n    return this.rawHeaders();\n  }\n\n  /**\n   * Get the string representation of this HTTP header collection.\n   */\n  public toString(): string {\n    return JSON.stringify(this.toJson());\n  }\n\n  /**\n   * Create a deep clone/copy of this HttpHeaders collection.\n   */\n  public clone(): HttpHeaders {\n    return new HttpHeaders(this.rawHeaders());\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Encodes a string in base64 format.\n * @param value the string to encode\n */\nexport function encodeString(value: string): string {\n  return btoa(value);\n}\n\n/**\n * Encodes a byte array in base64 format.\n * @param value the Uint8Aray to encode\n */\nexport function encodeByteArray(value: Uint8Array): string {\n  let str = \"\";\n  for (let i = 0; i < value.length; i++) {\n    str += String.fromCharCode(value[i]);\n  }\n  return btoa(str);\n}\n\n/**\n * Decodes a base64 string into a byte array.\n * @param value the base64 string to decode\n */\nexport function decodeString(value: string): Uint8Array {\n  const byteString = atob(value);\n  const arr = new Uint8Array(byteString.length);\n  for (let i = 0; i < byteString.length; i++) {\n    arr[i] = byteString.charCodeAt(i);\n  }\n  return arr;\n}\n","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]]\n  ]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nexport const Constants = {\n  /**\n   * The core-http version\n   * @const\n   * @type {string}\n   */\n  coreHttpVersion: \"1.0.4\",\n\n  /**\n   * Specifies HTTP.\n   *\n   * @const\n   * @type {string}\n   */\n  HTTP: \"http:\",\n\n  /**\n   * Specifies HTTPS.\n   *\n   * @const\n   * @type {string}\n   */\n  HTTPS: \"https:\",\n\n  /**\n   * Specifies HTTP Proxy.\n   *\n   * @const\n   * @type {string}\n   */\n  HTTP_PROXY: \"HTTP_PROXY\",\n\n  /**\n   * Specifies HTTPS Proxy.\n   *\n   * @const\n   * @type {string}\n   */\n  HTTPS_PROXY: \"HTTPS_PROXY\",\n\n  HttpConstants: {\n    /**\n     * Http Verbs\n     *\n     * @const\n     * @enum {string}\n     */\n    HttpVerbs: {\n      PUT: \"PUT\",\n      GET: \"GET\",\n      DELETE: \"DELETE\",\n      POST: \"POST\",\n      MERGE: \"MERGE\",\n      HEAD: \"HEAD\",\n      PATCH: \"PATCH\"\n    },\n\n    StatusCodes: {\n      TooManyRequests: 429\n    }\n  },\n\n  /**\n   * Defines constants for use with HTTP headers.\n   */\n  HeaderConstants: {\n    /**\n     * The Authorization header.\n     *\n     * @const\n     * @type {string}\n     */\n    AUTHORIZATION: \"authorization\",\n\n    AUTHORIZATION_SCHEME: \"Bearer\",\n\n    /**\n     * The Retry-After response-header field can be used with a 503 (Service\n     * Unavailable) or 349 (Too Many Requests) responses to indicate how long\n     * the service is expected to be unavailable to the requesting client.\n     *\n     * @const\n     * @type {string}\n     */\n    RETRY_AFTER: \"Retry-After\",\n\n    /**\n     * The UserAgent header.\n     *\n     * @const\n     * @type {string}\n     */\n    USER_AGENT: \"User-Agent\"\n  }\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport uuidv4 from \"uuid/v4\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { RestError } from \"../restError\";\nimport { WebResource } from \"../webResource\";\nimport { Constants } from \"./constants\";\n\nconst validUuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/gi;\n\n/**\n * A constant that indicates whether the environment is node.js or browser based.\n */\nexport const isNode =\n  typeof process !== \"undefined\" &&\n  !!process.version &&\n  !!process.versions &&\n  !!process.versions.node;\n\n/**\n * Checks if a parsed URL is HTTPS\n *\n * @param {object} urlToCheck The url to check\n * @return {boolean} True if the URL is HTTPS; false otherwise.\n */\nexport function urlIsHTTPS(urlToCheck: { protocol: string }): boolean {\n  return urlToCheck.protocol.toLowerCase() === Constants.HTTPS;\n}\n\n/**\n * Encodes an URI.\n *\n * @param {string} uri The URI to be encoded.\n * @return {string} The encoded URI.\n */\nexport function encodeUri(uri: string): string {\n  return encodeURIComponent(uri)\n    .replace(/!/g, \"%21\")\n    .replace(/\"/g, \"%27\")\n    .replace(/\\(/g, \"%28\")\n    .replace(/\\)/g, \"%29\")\n    .replace(/\\*/g, \"%2A\");\n}\n\n/**\n * Returns a stripped version of the Http Response which only contains body,\n * headers and the status.\n *\n * @param {HttpOperationResponse} response The Http Response\n *\n * @return {object} The stripped version of Http Response.\n */\nexport function stripResponse(response: HttpOperationResponse): any {\n  const strippedResponse: any = {};\n  strippedResponse.body = response.bodyAsText;\n  strippedResponse.headers = response.headers;\n  strippedResponse.status = response.status;\n  return strippedResponse;\n}\n\n/**\n * Returns a stripped version of the Http Request that does not contain the\n * Authorization header.\n *\n * @param {WebResource} request The Http Request object\n *\n * @return {WebResource} The stripped version of Http Request.\n */\nexport function stripRequest(request: WebResource): WebResource {\n  const strippedRequest = request.clone();\n  if (strippedRequest.headers) {\n    strippedRequest.headers.remove(\"authorization\");\n  }\n  return strippedRequest;\n}\n\n/**\n * Validates the given uuid as a string\n *\n * @param {string} uuid The uuid as a string that needs to be validated\n *\n * @return {boolean} True if the uuid is valid; false otherwise.\n */\nexport function isValidUuid(uuid: string): boolean {\n  return validUuidRegex.test(uuid);\n}\n\n/**\n * Generated UUID\n *\n * @return {string} RFC4122 v4 UUID.\n */\nexport function generateUuid(): string {\n  return uuidv4();\n}\n\n/**\n * Executes an array of promises sequentially. Inspiration of this method is here:\n * https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html. An awesome blog on promises!\n *\n * @param {Array} promiseFactories An array of promise factories(A function that return a promise)\n *\n * @param {any} [kickstart] Input to the first promise that is used to kickstart the promise chain.\n * If not provided then the promise chain starts with undefined.\n *\n * @return A chain of resolved or rejected promises\n */\nexport function executePromisesSequentially(promiseFactories: Array<any>, kickstart: any) {\n  let result = Promise.resolve(kickstart);\n  promiseFactories.forEach((promiseFactory) => {\n    result = result.then(promiseFactory);\n  });\n  return result;\n}\n\n/**\n * A wrapper for setTimeout that resolves a promise after t milliseconds.\n * @param {number} t The number of milliseconds to be delayed.\n * @param {T} value The value to be resolved with after a timeout of t milliseconds.\n * @returns {Promise<T>} Resolved promise\n */\nexport function delay<T>(t: number, value?: T): Promise<T> {\n  return new Promise((resolve) => setTimeout(() => resolve(value), t));\n}\n\n/**\n * Service callback that is returned for REST requests initiated by the service client.\n */\nexport interface ServiceCallback<TResult> {\n  /**\n   * A method that will be invoked as a callback to a service function.\n   * @param {Error | RestError | null} err The error occurred if any, while executing the request; otherwise null.\n   * @param {TResult} [result] The deserialized response body if an error did not occur.\n   * @param {WebResource} [request] The raw/actual request sent to the server if an error did not occur.\n   * @param {HttpOperationResponse} [response] The raw/actual response from the server if an error did not occur.\n   */\n  (\n    err: Error | RestError | null,\n    result?: TResult,\n    request?: WebResource,\n    response?: HttpOperationResponse\n  ): void;\n}\n\n/**\n * Converts a Promise to a callback.\n * @param {Promise<any>} promise The Promise to be converted to a callback\n * @returns {Function} A function that takes the callback (cb: Function): void\n * @deprecated generated code should instead depend on responseToBody\n */\nexport function promiseToCallback(promise: Promise<any>): Function {\n  if (typeof promise.then !== \"function\") {\n    throw new Error(\"The provided input is not a Promise.\");\n  }\n  return (cb: Function): void => {\n    promise.then(\n      (data: any) => {\n        cb(undefined, data);\n      },\n      (err: Error) => {\n        cb(err);\n      }\n    );\n  };\n}\n\n/**\n * Converts a Promise to a service callback.\n * @param {Promise<HttpOperationResponse>} promise - The Promise of HttpOperationResponse to be converted to a service callback\n * @returns {Function} A function that takes the service callback (cb: ServiceCallback<T>): void\n */\nexport function promiseToServiceCallback<T>(promise: Promise<HttpOperationResponse>): Function {\n  if (typeof promise.then !== \"function\") {\n    throw new Error(\"The provided input is not a Promise.\");\n  }\n  return (cb: ServiceCallback<T>): void => {\n    promise.then(\n      (data: HttpOperationResponse) => {\n        process.nextTick(cb, undefined, data.parsedBody as T, data.request, data);\n      },\n      (err: Error) => {\n        process.nextTick(cb, err);\n      }\n    );\n  };\n}\n\nexport function prepareXMLRootList(obj: any, elementName: string) {\n  if (!Array.isArray(obj)) {\n    obj = [obj];\n  }\n  return { [elementName]: obj };\n}\n\n/**\n * Applies the properties on the prototype of sourceCtors to the prototype of targetCtor\n * @param {object} targetCtor The target object on which the properties need to be applied.\n * @param {Array<object>} sourceCtors An array of source objects from which the properties need to be taken.\n */\nexport function applyMixins(targetCtor: any, sourceCtors: any[]): void {\n  sourceCtors.forEach((sourceCtors) => {\n    Object.getOwnPropertyNames(sourceCtors.prototype).forEach((name) => {\n      targetCtor.prototype[name] = sourceCtors.prototype[name];\n    });\n  });\n}\n\nconst validateISODuration = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\n/**\n * Indicates whether the given string is in ISO 8601 format.\n * @param {string} value The value to be validated for ISO 8601 duration format.\n * @return {boolean} `true` if valid, `false` otherwise.\n */\nexport function isDuration(value: string): boolean {\n  return validateISODuration.test(value);\n}\n\n/**\n * Replace all of the instances of searchValue in value with the provided replaceValue.\n * @param {string | undefined} value The value to search and replace in.\n * @param {string} searchValue The value to search for in the value argument.\n * @param {string} replaceValue The value to replace searchValue with in the value argument.\n * @returns {string | undefined} The value where each instance of searchValue was replaced with replacedValue.\n */\nexport function replaceAll(\n  value: string | undefined,\n  searchValue: string,\n  replaceValue: string\n): string | undefined {\n  return !value || !searchValue ? value : value.split(searchValue).join(replaceValue || \"\");\n}\n\n/**\n * Determines whether the given entity is a basic/primitive type\n * (string, number, boolean, null, undefined).\n * @param {any} value Any entity\n * @return {boolean} - true is it is primitive type, false otherwise.\n */\nexport function isPrimitiveType(value: any): boolean {\n  return (typeof value !== \"object\" && typeof value !== \"function\") || value === null;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport * as base64 from \"./util/base64\";\nimport * as utils from \"./util/utils\";\n\nexport class Serializer {\n  constructor(\n    public readonly modelMappers: { [key: string]: any } = {},\n    public readonly isXML?: boolean\n  ) {}\n\n  validateConstraints(mapper: Mapper, value: any, objectName: string): void {\n    const failValidation = (constraintName: keyof MapperConstraints, constraintValue: any) => {\n      throw new Error(\n        `\"${objectName}\" with value \"${value}\" should satisfy the constraint \"${constraintName}\": ${constraintValue}.`\n      );\n    };\n    if (mapper.constraints && value != undefined) {\n      const {\n        ExclusiveMaximum,\n        ExclusiveMinimum,\n        InclusiveMaximum,\n        InclusiveMinimum,\n        MaxItems,\n        MaxLength,\n        MinItems,\n        MinLength,\n        MultipleOf,\n        Pattern,\n        UniqueItems\n      } = mapper.constraints;\n      if (ExclusiveMaximum != undefined && value >= ExclusiveMaximum) {\n        failValidation(\"ExclusiveMaximum\", ExclusiveMaximum);\n      }\n      if (ExclusiveMinimum != undefined && value <= ExclusiveMinimum) {\n        failValidation(\"ExclusiveMinimum\", ExclusiveMinimum);\n      }\n      if (InclusiveMaximum != undefined && value > InclusiveMaximum) {\n        failValidation(\"InclusiveMaximum\", InclusiveMaximum);\n      }\n      if (InclusiveMinimum != undefined && value < InclusiveMinimum) {\n        failValidation(\"InclusiveMinimum\", InclusiveMinimum);\n      }\n      if (MaxItems != undefined && value.length > MaxItems) {\n        failValidation(\"MaxItems\", MaxItems);\n      }\n      if (MaxLength != undefined && value.length > MaxLength) {\n        failValidation(\"MaxLength\", MaxLength);\n      }\n      if (MinItems != undefined && value.length < MinItems) {\n        failValidation(\"MinItems\", MinItems);\n      }\n      if (MinLength != undefined && value.length < MinLength) {\n        failValidation(\"MinLength\", MinLength);\n      }\n      if (MultipleOf != undefined && value % MultipleOf !== 0) {\n        failValidation(\"MultipleOf\", MultipleOf);\n      }\n      if (Pattern) {\n        const pattern: RegExp = typeof Pattern === \"string\" ? new RegExp(Pattern) : Pattern;\n        if (typeof value !== \"string\" || value.match(pattern) === null) {\n          failValidation(\"Pattern\", Pattern);\n        }\n      }\n      if (\n        UniqueItems &&\n        value.some((item: any, i: number, ar: Array<any>) => ar.indexOf(item) !== i)\n      ) {\n        failValidation(\"UniqueItems\", UniqueItems);\n      }\n    }\n  }\n\n  /**\n   * Serialize the given object based on its metadata defined in the mapper\n   *\n   * @param {Mapper} mapper The mapper which defines the metadata of the serializable object\n   *\n   * @param {object|string|Array|number|boolean|Date|stream} object A valid Javascript object to be serialized\n   *\n   * @param {string} objectName Name of the serialized object\n   *\n   * @returns {object|string|Array|number|boolean|Date|stream} A valid serialized Javascript object\n   */\n  serialize(mapper: Mapper, object: any, objectName?: string): any {\n    let payload: any = {};\n    const mapperType = mapper.type.name as string;\n    if (!objectName) {\n      objectName = mapper.serializedName!;\n    }\n    if (mapperType.match(/^Sequence$/gi) !== null) {\n      payload = [];\n    }\n\n    if (mapper.isConstant) {\n      object = mapper.defaultValue;\n    }\n\n    // This table of allowed values should help explain\n    // the mapper.required and mapper.nullable properties.\n    // X means \"neither undefined or null are allowed\".\n    //           || required\n    //           || true      | false\n    //  nullable || ==========================\n    //      true || null      | undefined/null\n    //     false || X         | undefined\n    // undefined || X         | undefined/null\n\n    const { required, nullable } = mapper;\n\n    if (required && nullable && object === undefined) {\n      throw new Error(`${objectName} cannot be undefined.`);\n    }\n    if (required && !nullable && object == undefined) {\n      throw new Error(`${objectName} cannot be null or undefined.`);\n    }\n    if (!required && nullable === false && object === null) {\n      throw new Error(`${objectName} cannot be null.`);\n    }\n\n    if (object == undefined) {\n      payload = object;\n    } else {\n      // Validate Constraints if any\n      this.validateConstraints(mapper, object, objectName);\n      if (mapperType.match(/^any$/gi) !== null) {\n        payload = object;\n      } else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/gi) !== null) {\n        payload = serializeBasicTypes(mapperType, objectName, object);\n      } else if (mapperType.match(/^Enum$/gi) !== null) {\n        const enumMapper: EnumMapper = mapper as EnumMapper;\n        payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);\n      } else if (\n        mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/gi) !== null\n      ) {\n        payload = serializeDateTypes(mapperType, object, objectName);\n      } else if (mapperType.match(/^ByteArray$/gi) !== null) {\n        payload = serializeByteArrayType(objectName, object);\n      } else if (mapperType.match(/^Base64Url$/gi) !== null) {\n        payload = serializeBase64UrlType(objectName, object);\n      } else if (mapperType.match(/^Sequence$/gi) !== null) {\n        payload = serializeSequenceType(this, mapper as SequenceMapper, object, objectName);\n      } else if (mapperType.match(/^Dictionary$/gi) !== null) {\n        payload = serializeDictionaryType(this, mapper as DictionaryMapper, object, objectName);\n      } else if (mapperType.match(/^Composite$/gi) !== null) {\n        payload = serializeCompositeType(this, mapper as CompositeMapper, object, objectName);\n      }\n    }\n    return payload;\n  }\n\n  /**\n   * Deserialize the given object based on its metadata defined in the mapper\n   *\n   * @param {object} mapper The mapper which defines the metadata of the serializable object\n   *\n   * @param {object|string|Array|number|boolean|Date|stream} responseBody A valid Javascript entity to be deserialized\n   *\n   * @param {string} objectName Name of the deserialized object\n   *\n   * @returns {object|string|Array|number|boolean|Date|stream} A valid deserialized Javascript object\n   */\n  deserialize(mapper: Mapper, responseBody: any, objectName: string): any {\n    if (responseBody == undefined) {\n      if (this.isXML && mapper.type.name === \"Sequence\" && !mapper.xmlIsWrapped) {\n        // Edge case for empty XML non-wrapped lists. xml2js can't distinguish\n        // between the list being empty versus being missing,\n        // so let's do the more user-friendly thing and return an empty list.\n        responseBody = [];\n      }\n      // specifically check for undefined as default value can be a falsey value `0, \"\", false, null`\n      if (mapper.defaultValue !== undefined) {\n        responseBody = mapper.defaultValue;\n      }\n      return responseBody;\n    }\n\n    let payload: any;\n    const mapperType = mapper.type.name;\n    if (!objectName) {\n      objectName = mapper.serializedName!;\n    }\n\n    if (mapperType.match(/^Composite$/gi) !== null) {\n      payload = deserializeCompositeType(this, mapper as CompositeMapper, responseBody, objectName);\n    } else {\n      if (this.isXML) {\n        /**\n         * If the mapper specifies this as a non-composite type value but the responseBody contains\n         * both header (\"$\") and body (\"_\") properties, then just reduce the responseBody value to\n         * the body (\"_\") property.\n         */\n        if (responseBody[\"$\"] != undefined && responseBody[\"_\"] != undefined) {\n          responseBody = responseBody[\"_\"];\n        }\n      }\n\n      if (mapperType.match(/^Number$/gi) !== null) {\n        payload = parseFloat(responseBody);\n        if (isNaN(payload)) {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^Boolean$/gi) !== null) {\n        if (responseBody === \"true\") {\n          payload = true;\n        } else if (responseBody === \"false\") {\n          payload = false;\n        } else {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/gi) !== null) {\n        payload = responseBody;\n      } else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/gi) !== null) {\n        payload = new Date(responseBody);\n      } else if (mapperType.match(/^UnixTime$/gi) !== null) {\n        payload = unixTimeToDate(responseBody);\n      } else if (mapperType.match(/^ByteArray$/gi) !== null) {\n        payload = base64.decodeString(responseBody);\n      } else if (mapperType.match(/^Base64Url$/gi) !== null) {\n        payload = base64UrlToByteArray(responseBody);\n      } else if (mapperType.match(/^Sequence$/gi) !== null) {\n        payload = deserializeSequenceType(this, mapper as SequenceMapper, responseBody, objectName);\n      } else if (mapperType.match(/^Dictionary$/gi) !== null) {\n        payload = deserializeDictionaryType(\n          this,\n          mapper as DictionaryMapper,\n          responseBody,\n          objectName\n        );\n      }\n    }\n\n    if (mapper.isConstant) {\n      payload = mapper.defaultValue;\n    }\n\n    return payload;\n  }\n}\n\nfunction trimEnd(str: string, ch: string) {\n  let len = str.length;\n  while (len - 1 >= 0 && str[len - 1] === ch) {\n    --len;\n  }\n  return str.substr(0, len);\n}\n\nfunction bufferToBase64Url(buffer: any): string | undefined {\n  if (!buffer) {\n    return undefined;\n  }\n  if (!(buffer instanceof Uint8Array)) {\n    throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);\n  }\n  // Uint8Array to Base64.\n  const str = base64.encodeByteArray(buffer);\n  // Base64 to Base64Url.\n  return trimEnd(str, \"=\")\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\");\n}\n\nfunction base64UrlToByteArray(str: string): Uint8Array | undefined {\n  if (!str) {\n    return undefined;\n  }\n  if (str && typeof str.valueOf() !== \"string\") {\n    throw new Error(\"Please provide an input of type string for converting to Uint8Array\");\n  }\n  // Base64Url to Base64.\n  str = str.replace(/\\-/g, \"+\").replace(/\\_/g, \"/\");\n  // Base64 to Uint8Array.\n  return base64.decodeString(str);\n}\n\nfunction splitSerializeName(prop: string | undefined): string[] {\n  const classes: string[] = [];\n  let partialclass = \"\";\n  if (prop) {\n    const subwords = prop.split(\".\");\n\n    for (const item of subwords) {\n      if (item.charAt(item.length - 1) === \"\\\\\") {\n        partialclass += item.substr(0, item.length - 1) + \".\";\n      } else {\n        partialclass += item;\n        classes.push(partialclass);\n        partialclass = \"\";\n      }\n    }\n  }\n\n  return classes;\n}\n\nfunction dateToUnixTime(d: string | Date): number | undefined {\n  if (!d) {\n    return undefined;\n  }\n\n  if (typeof d.valueOf() === \"string\") {\n    d = new Date(d as string);\n  }\n  return Math.floor((d as Date).getTime() / 1000);\n}\n\nfunction unixTimeToDate(n: number): Date | undefined {\n  if (!n) {\n    return undefined;\n  }\n  return new Date(n * 1000);\n}\n\nfunction serializeBasicTypes(typeName: string, objectName: string, value: any): any {\n  if (value !== null && value !== undefined) {\n    if (typeName.match(/^Number$/gi) !== null) {\n      if (typeof value !== \"number\") {\n        throw new Error(`${objectName} with value ${value} must be of type number.`);\n      }\n    } else if (typeName.match(/^String$/gi) !== null) {\n      if (typeof value.valueOf() !== \"string\") {\n        throw new Error(`${objectName} with value \"${value}\" must be of type string.`);\n      }\n    } else if (typeName.match(/^Uuid$/gi) !== null) {\n      if (!(typeof value.valueOf() === \"string\" && utils.isValidUuid(value))) {\n        throw new Error(\n          `${objectName} with value \"${value}\" must be of type string and a valid uuid.`\n        );\n      }\n    } else if (typeName.match(/^Boolean$/gi) !== null) {\n      if (typeof value !== \"boolean\") {\n        throw new Error(`${objectName} with value ${value} must be of type boolean.`);\n      }\n    } else if (typeName.match(/^Stream$/gi) !== null) {\n      const objectType = typeof value;\n      if (\n        objectType !== \"string\" &&\n        objectType !== \"function\" &&\n        !(value instanceof ArrayBuffer) &&\n        !ArrayBuffer.isView(value) &&\n        !(typeof Blob === \"function\" && value instanceof Blob)\n      ) {\n        throw new Error(\n          `${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, or a function returning NodeJS.ReadableStream.`\n        );\n      }\n    }\n  }\n  return value;\n}\n\nfunction serializeEnumType(objectName: string, allowedValues: Array<any>, value: any): any {\n  if (!allowedValues) {\n    throw new Error(\n      `Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`\n    );\n  }\n  const isPresent = allowedValues.some((item) => {\n    if (typeof item.valueOf() === \"string\") {\n      return item.toLowerCase() === value.toLowerCase();\n    }\n    return item === value;\n  });\n  if (!isPresent) {\n    throw new Error(\n      `${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(\n        allowedValues\n      )}.`\n    );\n  }\n  return value;\n}\n\nfunction serializeByteArrayType(objectName: string, value: any): any {\n  if (value != undefined) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    value = base64.encodeByteArray(value);\n  }\n  return value;\n}\n\nfunction serializeBase64UrlType(objectName: string, value: any): any {\n  if (value != undefined) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    value = bufferToBase64Url(value);\n  }\n  return value;\n}\n\nfunction serializeDateTypes(typeName: string, value: any, objectName: string) {\n  if (value != undefined) {\n    if (typeName.match(/^Date$/gi) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value =\n        value instanceof Date\n          ? value.toISOString().substring(0, 10)\n          : new Date(value).toISOString().substring(0, 10);\n    } else if (typeName.match(/^DateTime$/gi) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();\n    } else if (typeName.match(/^DateTimeRfc1123$/gi) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);\n      }\n      value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();\n    } else if (typeName.match(/^UnixTime$/gi) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(\n          `${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format ` +\n            `for it to be serialized in UnixTime/Epoch format.`\n        );\n      }\n      value = dateToUnixTime(value);\n    } else if (typeName.match(/^TimeSpan$/gi) !== null) {\n      if (!utils.isDuration(value)) {\n        throw new Error(\n          `${objectName} must be a string in ISO 8601 format. Instead was \"${value}\".`\n        );\n      }\n      value = value;\n    }\n  }\n  return value;\n}\n\nfunction serializeSequenceType(\n  serializer: Serializer,\n  mapper: SequenceMapper,\n  object: any,\n  objectName: string\n) {\n  if (!Array.isArray(object)) {\n    throw new Error(`${objectName} must be of type Array.`);\n  }\n  const elementType = mapper.type.element;\n  if (!elementType || typeof elementType !== \"object\") {\n    throw new Error(\n      `element\" metadata for an Array must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}.`\n    );\n  }\n  const tempArray = [];\n  for (let i = 0; i < object.length; i++) {\n    tempArray[i] = serializer.serialize(elementType, object[i], objectName);\n  }\n  return tempArray;\n}\n\nfunction serializeDictionaryType(\n  serializer: Serializer,\n  mapper: DictionaryMapper,\n  object: any,\n  objectName: string\n) {\n  if (typeof object !== \"object\") {\n    throw new Error(`${objectName} must be of type object.`);\n  }\n  const valueType = mapper.type.value;\n  if (!valueType || typeof valueType !== \"object\") {\n    throw new Error(\n      `\"value\" metadata for a Dictionary must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}.`\n    );\n  }\n  const tempDictionary: { [key: string]: any } = {};\n  for (const key of Object.keys(object)) {\n    tempDictionary[key] = serializer.serialize(valueType, object[key], objectName + \".\" + key);\n  }\n  return tempDictionary;\n}\n\n/**\n * Resolves a composite mapper's modelProperties.\n * @param serializer the serializer containing the entire set of mappers\n * @param mapper the composite mapper to resolve\n */\nfunction resolveModelProperties(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  objectName: string\n): { [propertyName: string]: Mapper } {\n  let modelProps = mapper.type.modelProperties;\n  if (!modelProps) {\n    const className = mapper.type.className;\n    if (!className) {\n      throw new Error(\n        `Class name for model \"${objectName}\" is not provided in the mapper \"${JSON.stringify(\n          mapper,\n          undefined,\n          2\n        )}\".`\n      );\n    }\n\n    const modelMapper = serializer.modelMappers[className];\n    if (!modelMapper) {\n      throw new Error(`mapper() cannot be null or undefined for model \"${className}\".`);\n    }\n    modelProps = modelMapper.type.modelProperties;\n    if (!modelProps) {\n      throw new Error(\n        `modelProperties cannot be null or undefined in the ` +\n          `mapper \"${JSON.stringify(\n            modelMapper\n          )}\" of type \"${className}\" for object \"${objectName}\".`\n      );\n    }\n  }\n\n  return modelProps;\n}\n\nfunction serializeCompositeType(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  object: any,\n  objectName: string\n) {\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, object, \"clientName\");\n  }\n\n  if (object != undefined) {\n    const payload: any = {};\n    const modelProps = resolveModelProperties(serializer, mapper, objectName);\n    for (const key of Object.keys(modelProps)) {\n      const propertyMapper = modelProps[key];\n      if (propertyMapper.readOnly) {\n        continue;\n      }\n\n      let propName: string | undefined;\n      let parentObject: any = payload;\n      if (serializer.isXML) {\n        if (propertyMapper.xmlIsWrapped) {\n          propName = propertyMapper.xmlName;\n        } else {\n          propName = propertyMapper.xmlElementName || propertyMapper.xmlName;\n        }\n      } else {\n        const paths = splitSerializeName(propertyMapper.serializedName!);\n        propName = paths.pop();\n\n        for (const pathName of paths) {\n          const childObject = parentObject[pathName];\n          if (childObject == undefined && object[key] != undefined) {\n            parentObject[pathName] = {};\n          }\n          parentObject = parentObject[pathName];\n        }\n      }\n\n      if (parentObject != undefined) {\n        const propertyObjectName =\n          propertyMapper.serializedName !== \"\"\n            ? objectName + \".\" + propertyMapper.serializedName\n            : objectName;\n\n        let toSerialize = object[key];\n        const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n        if (\n          polymorphicDiscriminator &&\n          polymorphicDiscriminator.clientName === key &&\n          toSerialize == undefined\n        ) {\n          toSerialize = mapper.serializedName;\n        }\n\n        const serializedValue = serializer.serialize(\n          propertyMapper,\n          toSerialize,\n          propertyObjectName\n        );\n        if (serializedValue !== undefined && propName != undefined) {\n          if (propertyMapper.xmlIsAttribute) {\n            // $ is the key attributes are kept under in xml2js.\n            // This keeps things simple while preventing name collision\n            // with names in user documents.\n            parentObject.$ = parentObject.$ || {};\n            parentObject.$[propName] = serializedValue;\n          } else if (propertyMapper.xmlIsWrapped) {\n            parentObject[propName] = { [propertyMapper.xmlElementName!]: serializedValue };\n          } else {\n            parentObject[propName] = serializedValue;\n          }\n        }\n      }\n    }\n\n    const additionalPropertiesMapper = mapper.type.additionalProperties;\n    if (additionalPropertiesMapper) {\n      const propNames = Object.keys(modelProps);\n      for (const clientPropName in object) {\n        const isAdditionalProperty = propNames.every((pn) => pn !== clientPropName);\n        if (isAdditionalProperty) {\n          payload[clientPropName] = serializer.serialize(\n            additionalPropertiesMapper,\n            object[clientPropName],\n            objectName + '[\"' + clientPropName + '\"]'\n          );\n        }\n      }\n    }\n\n    return payload;\n  }\n  return object;\n}\n\nfunction isSpecialXmlProperty(propertyName: string): boolean {\n  return [\"$\", \"_\"].includes(propertyName);\n}\n\nfunction deserializeCompositeType(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  responseBody: any,\n  objectName: string\n): any {\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, responseBody, \"serializedName\");\n  }\n\n  const modelProps = resolveModelProperties(serializer, mapper, objectName);\n  let instance: { [key: string]: any } = {};\n  const handledPropertyNames: string[] = [];\n\n  for (const key of Object.keys(modelProps)) {\n    const propertyMapper = modelProps[key];\n    const paths = splitSerializeName(modelProps[key].serializedName!);\n    handledPropertyNames.push(paths[0]);\n    const { serializedName, xmlName, xmlElementName } = propertyMapper;\n    let propertyObjectName = objectName;\n    if (serializedName !== \"\" && serializedName !== undefined) {\n      propertyObjectName = objectName + \".\" + serializedName;\n    }\n\n    const headerCollectionPrefix = (propertyMapper as DictionaryMapper).headerCollectionPrefix;\n    if (headerCollectionPrefix) {\n      const dictionary: any = {};\n      for (const headerKey of Object.keys(responseBody)) {\n        if (headerKey.startsWith(headerCollectionPrefix)) {\n          dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(\n            (propertyMapper as DictionaryMapper).type.value,\n            responseBody[headerKey],\n            propertyObjectName\n          );\n        }\n\n        handledPropertyNames.push(headerKey);\n      }\n      instance[key] = dictionary;\n    } else if (serializer.isXML) {\n      if (propertyMapper.xmlIsAttribute && responseBody.$) {\n        instance[key] = serializer.deserialize(\n          propertyMapper,\n          responseBody.$[xmlName!],\n          propertyObjectName\n        );\n      } else {\n        const propertyName = xmlElementName || xmlName || serializedName;\n        let unwrappedProperty = responseBody[propertyName!];\n        if (propertyMapper.xmlIsWrapped) {\n          unwrappedProperty = responseBody[xmlName!];\n          unwrappedProperty = unwrappedProperty && unwrappedProperty[xmlElementName!];\n\n          const isEmptyWrappedList = unwrappedProperty === undefined;\n          if (isEmptyWrappedList) {\n            unwrappedProperty = [];\n          }\n        }\n        instance[key] = serializer.deserialize(\n          propertyMapper,\n          unwrappedProperty,\n          propertyObjectName\n        );\n      }\n    } else {\n      // deserialize the property if it is present in the provided responseBody instance\n      let propertyInstance;\n      let res = responseBody;\n      // traversing the object step by step.\n      for (const item of paths) {\n        if (!res) break;\n        res = res[item];\n      }\n      propertyInstance = res;\n      const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;\n      // checking that the model property name (key)(ex: \"fishtype\") and the\n      // clientName of the polymorphicDiscriminator {metadata} (ex: \"fishtype\")\n      // instead of the serializedName of the polymorphicDiscriminator (ex: \"fish.type\")\n      // is a better approach. The generator is not consistent with escaping '\\.' in the\n      // serializedName of the property (ex: \"fish\\.type\") that is marked as polymorphic discriminator\n      // and the serializedName of the metadata polymorphicDiscriminator (ex: \"fish.type\"). However,\n      // the clientName transformation of the polymorphicDiscriminator (ex: \"fishtype\") and\n      // the transformation of model property name (ex: \"fishtype\") is done consistently.\n      // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.\n      if (\n        polymorphicDiscriminator &&\n        key === polymorphicDiscriminator.clientName &&\n        propertyInstance == undefined\n      ) {\n        propertyInstance = mapper.serializedName;\n      }\n\n      let serializedValue;\n      // paging\n      if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === \"\") {\n        propertyInstance = responseBody[key];\n        instance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName);\n      } else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {\n        serializedValue = serializer.deserialize(\n          propertyMapper,\n          propertyInstance,\n          propertyObjectName\n        );\n        instance[key] = serializedValue;\n      }\n    }\n  }\n\n  const additionalPropertiesMapper = mapper.type.additionalProperties;\n  if (additionalPropertiesMapper) {\n    const isAdditionalProperty = (responsePropName: string) => {\n      for (const clientPropName in modelProps) {\n        const paths = splitSerializeName(modelProps[clientPropName].serializedName);\n        if (paths[0] === responsePropName) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    for (const responsePropName in responseBody) {\n      if (isAdditionalProperty(responsePropName)) {\n        instance[responsePropName] = serializer.deserialize(\n          additionalPropertiesMapper,\n          responseBody[responsePropName],\n          objectName + '[\"' + responsePropName + '\"]'\n        );\n      }\n    }\n  } else if (responseBody) {\n    for (const key of Object.keys(responseBody)) {\n      if (\n        instance[key] === undefined &&\n        !handledPropertyNames.includes(key) &&\n        !isSpecialXmlProperty(key)\n      ) {\n        instance[key] = responseBody[key];\n      }\n    }\n  }\n\n  return instance;\n}\n\nfunction deserializeDictionaryType(\n  serializer: Serializer,\n  mapper: DictionaryMapper,\n  responseBody: any,\n  objectName: string\n): any {\n  /*jshint validthis: true */\n  const value = mapper.type.value;\n  if (!value || typeof value !== \"object\") {\n    throw new Error(\n      `\"value\" metadata for a Dictionary must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}`\n    );\n  }\n  if (responseBody) {\n    const tempDictionary: { [key: string]: any } = {};\n    for (const key of Object.keys(responseBody)) {\n      tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName);\n    }\n    return tempDictionary;\n  }\n  return responseBody;\n}\n\nfunction deserializeSequenceType(\n  serializer: Serializer,\n  mapper: SequenceMapper,\n  responseBody: any,\n  objectName: string\n): any {\n  /*jshint validthis: true */\n  const element = mapper.type.element;\n  if (!element || typeof element !== \"object\") {\n    throw new Error(\n      `element\" metadata for an Array must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}`\n    );\n  }\n  if (responseBody) {\n    if (!Array.isArray(responseBody)) {\n      // xml2js will interpret a single element array as just the element, so force it to be an array\n      responseBody = [responseBody];\n    }\n\n    const tempArray = [];\n    for (let i = 0; i < responseBody.length; i++) {\n      tempArray[i] = serializer.deserialize(element, responseBody[i], `${objectName}[${i}]`);\n    }\n    return tempArray;\n  }\n  return responseBody;\n}\n\nfunction getPolymorphicMapper(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  object: any,\n  polymorphicPropertyName: \"clientName\" | \"serializedName\"\n): CompositeMapper {\n  const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n  if (polymorphicDiscriminator) {\n    const discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];\n    if (discriminatorName != undefined) {\n      const discriminatorValue = object[discriminatorName];\n      if (discriminatorValue != undefined) {\n        const typeName = mapper.type.uberParent || mapper.type.className;\n        const indexDiscriminator =\n          discriminatorValue === typeName\n            ? discriminatorValue\n            : typeName + \".\" + discriminatorValue;\n        const polymorphicMapper = serializer.modelMappers.discriminators[indexDiscriminator];\n        if (polymorphicMapper) {\n          mapper = polymorphicMapper;\n        }\n      }\n    }\n  }\n  return mapper;\n}\n\nfunction getPolymorphicDiscriminatorRecursively(\n  serializer: Serializer,\n  mapper: CompositeMapper\n): PolymorphicDiscriminator | undefined {\n  return (\n    mapper.type.polymorphicDiscriminator ||\n    getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) ||\n    getPolymorphicDiscriminatorSafely(serializer, mapper.type.className)\n  );\n}\n\nfunction getPolymorphicDiscriminatorSafely(serializer: Serializer, typeName?: string) {\n  return (\n    typeName &&\n    serializer.modelMappers[typeName] &&\n    serializer.modelMappers[typeName].type.polymorphicDiscriminator\n  );\n}\n\nexport interface MapperConstraints {\n  InclusiveMaximum?: number;\n  ExclusiveMaximum?: number;\n  InclusiveMinimum?: number;\n  ExclusiveMinimum?: number;\n  MaxLength?: number;\n  MinLength?: number;\n  Pattern?: RegExp;\n  MaxItems?: number;\n  MinItems?: number;\n  UniqueItems?: true;\n  MultipleOf?: number;\n}\n\nexport type MapperType =\n  | SimpleMapperType\n  | CompositeMapperType\n  | SequenceMapperType\n  | DictionaryMapperType\n  | EnumMapperType;\n\nexport interface SimpleMapperType {\n  name:\n    | \"Base64Url\"\n    | \"Boolean\"\n    | \"ByteArray\"\n    | \"Date\"\n    | \"DateTime\"\n    | \"DateTimeRfc1123\"\n    | \"Object\"\n    | \"Stream\"\n    | \"String\"\n    | \"TimeSpan\"\n    | \"UnixTime\"\n    | \"Uuid\"\n    | \"Number\"\n    | \"any\";\n}\n\nexport interface CompositeMapperType {\n  name: \"Composite\";\n\n  // Only one of the two below properties should be present.\n  // Use className to reference another type definition,\n  // and use modelProperties/additionalProperties when the reference to the other type has been resolved.\n  className?: string;\n\n  modelProperties?: { [propertyName: string]: Mapper };\n  additionalProperties?: Mapper;\n\n  uberParent?: string;\n  polymorphicDiscriminator?: PolymorphicDiscriminator;\n}\n\nexport interface SequenceMapperType {\n  name: \"Sequence\";\n  element: Mapper;\n}\n\nexport interface DictionaryMapperType {\n  name: \"Dictionary\";\n  value: Mapper;\n}\n\nexport interface EnumMapperType {\n  name: \"Enum\";\n  allowedValues: any[];\n}\n\nexport interface BaseMapper {\n  xmlName?: string;\n  xmlIsAttribute?: boolean;\n  xmlElementName?: string;\n  xmlIsWrapped?: boolean;\n  readOnly?: boolean;\n  isConstant?: boolean;\n  required?: boolean;\n  nullable?: boolean;\n  serializedName?: string;\n  type: MapperType;\n  defaultValue?: any;\n  constraints?: MapperConstraints;\n}\n\nexport type Mapper = BaseMapper | CompositeMapper | SequenceMapper | DictionaryMapper | EnumMapper;\n\nexport interface PolymorphicDiscriminator {\n  serializedName: string;\n  clientName: string;\n  [key: string]: string;\n}\n\nexport interface CompositeMapper extends BaseMapper {\n  type: CompositeMapperType;\n}\n\nexport interface SequenceMapper extends BaseMapper {\n  type: SequenceMapperType;\n}\n\nexport interface DictionaryMapper extends BaseMapper {\n  type: DictionaryMapperType;\n  headerCollectionPrefix?: string;\n}\n\nexport interface EnumMapper extends BaseMapper {\n  type: EnumMapperType;\n}\n\nexport interface UrlParameterValue {\n  value: string;\n  skipUrlEncoding: boolean;\n}\n\n// TODO: why is this here?\nexport function serializeObject(toSerialize: any): any {\n  if (toSerialize == undefined) return undefined;\n  if (toSerialize instanceof Uint8Array) {\n    toSerialize = base64.encodeByteArray(toSerialize);\n    return toSerialize;\n  } else if (toSerialize instanceof Date) {\n    return toSerialize.toISOString();\n  } else if (Array.isArray(toSerialize)) {\n    const array = [];\n    for (let i = 0; i < toSerialize.length; i++) {\n      array.push(serializeObject(toSerialize[i]));\n    }\n    return array;\n  } else if (typeof toSerialize === \"object\") {\n    const dictionary: { [key: string]: any } = {};\n    for (const property in toSerialize) {\n      dictionary[property] = serializeObject(toSerialize[property]);\n    }\n    return dictionary;\n  }\n  return toSerialize;\n}\n\n/**\n * Utility function to create a K:V from a list of strings\n */\nfunction strEnum<T extends string>(o: Array<T>): { [K in T]: K } {\n  const result: any = {};\n  for (const key of o) {\n    result[key] = key;\n  }\n  return result;\n}\n\nexport const MapperType = strEnum([\n  \"Base64Url\",\n  \"Boolean\",\n  \"ByteArray\",\n  \"Composite\",\n  \"Date\",\n  \"DateTime\",\n  \"DateTimeRfc1123\",\n  \"Dictionary\",\n  \"Enum\",\n  \"Number\",\n  \"Object\",\n  \"Sequence\",\n  \"String\",\n  \"Stream\",\n  \"TimeSpan\",\n  \"UnixTime\"\n]);\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpHeaders } from \"./httpHeaders\";\nimport { OperationSpec } from \"./operationSpec\";\nimport { Mapper, Serializer } from \"./serializer\";\nimport { generateUuid } from \"./util/utils\";\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\nimport { OperationResponse } from \"./operationResponse\";\nimport { ProxySettings } from \"./serviceClient\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { SpanOptions } from \"@opentelemetry/types\";\n\nexport type HttpMethods =\n  | \"GET\"\n  | \"PUT\"\n  | \"POST\"\n  | \"DELETE\"\n  | \"PATCH\"\n  | \"HEAD\"\n  | \"OPTIONS\"\n  | \"TRACE\";\nexport type HttpRequestBody =\n  | Blob\n  | string\n  | ArrayBuffer\n  | ArrayBufferView\n  | (() => NodeJS.ReadableStream);\n\n/**\n * Fired in response to upload or download progress.\n */\nexport type TransferProgressEvent = {\n  /**\n   * The number of bytes loaded so far.\n   */\n  loadedBytes: number;\n};\n\n/**\n * Creates a new WebResource object.\n *\n * This class provides an abstraction over a REST call by being library / implementation agnostic and wrapping the necessary\n * properties to initiate a request.\n *\n * @constructor\n */\nexport class WebResource {\n  url: string;\n  method: HttpMethods;\n  body?: any;\n  headers: HttpHeaders;\n  /**\n   * Whether or not the body of the HttpOperationResponse should be treated as a stream.\n   */\n  streamResponseBody?: boolean;\n  /**\n   * Whether or not the HttpOperationResponse should be deserialized. If this is undefined, then the\n   * HttpOperationResponse should be deserialized.\n   */\n  shouldDeserialize?: boolean | ((response: HttpOperationResponse) => boolean);\n  /**\n   * A function that returns the proper OperationResponse for the given OperationSpec and\n   * HttpOperationResponse combination. If this is undefined, then a simple status code lookup will\n   * be used.\n   */\n  operationResponseGetter?: (\n    operationSpec: OperationSpec,\n    response: HttpOperationResponse\n  ) => undefined | OperationResponse;\n  formData?: any;\n  query?: { [key: string]: any };\n  operationSpec?: OperationSpec;\n  withCredentials: boolean;\n  timeout: number;\n  proxySettings?: ProxySettings;\n  keepAlive?: boolean;\n  requestId: string;\n\n  abortSignal?: AbortSignalLike;\n\n  /** Callback which fires upon upload progress. */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /** Callback which fires upon download progress. */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Options used to create a span when tracing is enabled.\n   */\n  spanOptions?: SpanOptions;\n\n  constructor(\n    url?: string,\n    method?: HttpMethods,\n    body?: any,\n    query?: { [key: string]: any },\n    headers?: { [key: string]: any } | HttpHeaders,\n    streamResponseBody?: boolean,\n    withCredentials?: boolean,\n    abortSignal?: AbortSignalLike,\n    timeout?: number,\n    onUploadProgress?: (progress: TransferProgressEvent) => void,\n    onDownloadProgress?: (progress: TransferProgressEvent) => void,\n    proxySettings?: ProxySettings,\n    keepAlive?: boolean\n  ) {\n    this.streamResponseBody = streamResponseBody;\n    this.url = url || \"\";\n    this.method = method || \"GET\";\n    this.headers = headers instanceof HttpHeaders ? headers : new HttpHeaders(headers);\n    this.body = body;\n    this.query = query;\n    this.formData = undefined;\n    this.withCredentials = withCredentials || false;\n    this.abortSignal = abortSignal;\n    this.timeout = timeout || 0;\n    this.onUploadProgress = onUploadProgress;\n    this.onDownloadProgress = onDownloadProgress;\n    this.proxySettings = proxySettings;\n    this.keepAlive = keepAlive;\n    this.requestId = this.headers.get(\"x-ms-client-request-id\") || generateUuid();\n  }\n\n  /**\n   * Validates that the required properties such as method, url, headers[\"Content-Type\"],\n   * headers[\"accept-language\"] are defined. It will throw an error if one of the above\n   * mentioned properties are not defined.\n   */\n  validateRequestProperties(): void {\n    if (!this.method) {\n      throw new Error(\"WebResource.method is required.\");\n    }\n    if (!this.url) {\n      throw new Error(\"WebResource.url is required.\");\n    }\n  }\n\n  /**\n   * Prepares the request.\n   * @param {RequestPrepareOptions} options Options to provide for preparing the request.\n   * @returns {WebResource} Returns the prepared WebResource (HTTP Request) object that needs to be given to the request pipeline.\n   */\n  prepare(options: RequestPrepareOptions): WebResource {\n    if (!options) {\n      throw new Error(\"options object is required\");\n    }\n\n    if (options.method == undefined || typeof options.method.valueOf() !== \"string\") {\n      throw new Error(\"options.method must be a string.\");\n    }\n\n    if (options.url && options.pathTemplate) {\n      throw new Error(\n        \"options.url and options.pathTemplate are mutually exclusive. Please provide exactly one of them.\"\n      );\n    }\n\n    if (\n      (options.pathTemplate == undefined || typeof options.pathTemplate.valueOf() !== \"string\") &&\n      (options.url == undefined || typeof options.url.valueOf() !== \"string\")\n    ) {\n      throw new Error(\"Please provide exactly one of options.pathTemplate or options.url.\");\n    }\n\n    // set the url if it is provided.\n    if (options.url) {\n      if (typeof options.url !== \"string\") {\n        throw new Error('options.url must be of type \"string\".');\n      }\n      this.url = options.url;\n    }\n\n    // set the method\n    if (options.method) {\n      const validMethods = [\"GET\", \"PUT\", \"HEAD\", \"DELETE\", \"OPTIONS\", \"POST\", \"PATCH\", \"TRACE\"];\n      if (validMethods.indexOf(options.method.toUpperCase()) === -1) {\n        throw new Error(\n          'The provided method \"' +\n            options.method +\n            '\" is invalid. Supported HTTP methods are: ' +\n            JSON.stringify(validMethods)\n        );\n      }\n    }\n    this.method = options.method.toUpperCase() as HttpMethods;\n\n    // construct the url if path template is provided\n    if (options.pathTemplate) {\n      const { pathTemplate, pathParameters } = options;\n      if (typeof pathTemplate !== \"string\") {\n        throw new Error('options.pathTemplate must be of type \"string\".');\n      }\n      if (!options.baseUrl) {\n        options.baseUrl = \"https://management.azure.com\";\n      }\n      const baseUrl = options.baseUrl;\n      let url =\n        baseUrl +\n        (baseUrl.endsWith(\"/\") ? \"\" : \"/\") +\n        (pathTemplate.startsWith(\"/\") ? pathTemplate.slice(1) : pathTemplate);\n      const segments = url.match(/({\\w*\\s*\\w*})/gi);\n      if (segments && segments.length) {\n        if (!pathParameters) {\n          throw new Error(\n            `pathTemplate: ${pathTemplate} has been provided. Hence, options.pathParameters must also be provided.`\n          );\n        }\n        segments.forEach(function(item) {\n          const pathParamName = item.slice(1, -1);\n          const pathParam = (pathParameters as { [key: string]: any })[pathParamName];\n          if (\n            pathParam === null ||\n            pathParam === undefined ||\n            !(typeof pathParam === \"string\" || typeof pathParam === \"object\")\n          ) {\n            const stringifiedPathParameters = JSON.stringify(pathParameters, undefined, 2);\n            throw new Error(\n              `pathTemplate: ${pathTemplate} contains the path parameter ${pathParamName}` +\n                ` however, it is not present in parameters: ${stringifiedPathParameters}.` +\n                `The value of the path parameter can either be a \"string\" of the form { ${pathParamName}: \"some sample value\" } or ` +\n                `it can be an \"object\" of the form { \"${pathParamName}\": { value: \"some sample value\", skipUrlEncoding: true } }.`\n            );\n          }\n\n          if (typeof pathParam.valueOf() === \"string\") {\n            url = url.replace(item, encodeURIComponent(pathParam));\n          }\n\n          if (typeof pathParam.valueOf() === \"object\") {\n            if (!pathParam.value) {\n              throw new Error(\n                `options.pathParameters[${pathParamName}] is of type \"object\" but it does not contain a \"value\" property.`\n              );\n            }\n            if (pathParam.skipUrlEncoding) {\n              url = url.replace(item, pathParam.value);\n            } else {\n              url = url.replace(item, encodeURIComponent(pathParam.value));\n            }\n          }\n        });\n      }\n      this.url = url;\n    }\n\n    // append query parameters to the url if they are provided. They can be provided with pathTemplate or url option.\n    if (options.queryParameters) {\n      const queryParameters = options.queryParameters;\n      if (typeof queryParameters !== \"object\") {\n        throw new Error(\n          `options.queryParameters must be of type object. It should be a JSON object ` +\n            `of \"query-parameter-name\" as the key and the \"query-parameter-value\" as the value. ` +\n            `The \"query-parameter-value\" may be fo type \"string\" or an \"object\" of the form { value: \"query-parameter-value\", skipUrlEncoding: true }.`\n        );\n      }\n      // append question mark if it is not present in the url\n      if (this.url && this.url.indexOf(\"?\") === -1) {\n        this.url += \"?\";\n      }\n      // construct queryString\n      const queryParams = [];\n      // We need to populate this.query as a dictionary if the request is being used for Sway's validateRequest().\n      this.query = {};\n      for (const queryParamName in queryParameters) {\n        const queryParam: any = queryParameters[queryParamName];\n        if (queryParam) {\n          if (typeof queryParam === \"string\") {\n            queryParams.push(queryParamName + \"=\" + encodeURIComponent(queryParam));\n            this.query[queryParamName] = encodeURIComponent(queryParam);\n          } else if (typeof queryParam === \"object\") {\n            if (!queryParam.value) {\n              throw new Error(\n                `options.queryParameters[${queryParamName}] is of type \"object\" but it does not contain a \"value\" property.`\n              );\n            }\n            if (queryParam.skipUrlEncoding) {\n              queryParams.push(queryParamName + \"=\" + queryParam.value);\n              this.query[queryParamName] = queryParam.value;\n            } else {\n              queryParams.push(queryParamName + \"=\" + encodeURIComponent(queryParam.value));\n              this.query[queryParamName] = encodeURIComponent(queryParam.value);\n            }\n          }\n        }\n      } // end-of-for\n      // append the queryString\n      this.url += queryParams.join(\"&\");\n    }\n\n    // add headers to the request if they are provided\n    if (options.headers) {\n      const headers = options.headers;\n      for (const headerName of Object.keys(options.headers)) {\n        this.headers.set(headerName, headers[headerName]);\n      }\n    }\n    // ensure accept-language is set correctly\n    if (!this.headers.get(\"accept-language\")) {\n      this.headers.set(\"accept-language\", \"en-US\");\n    }\n    // ensure the request-id is set correctly\n    if (!this.headers.get(\"x-ms-client-request-id\") && !options.disableClientRequestId) {\n      this.headers.set(\"x-ms-client-request-id\", this.requestId);\n    }\n\n    // default\n    if (!this.headers.get(\"Content-Type\")) {\n      this.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n    }\n\n    // set the request body. request.js automatically sets the Content-Length request header, so we need not set it explicilty\n    this.body = options.body;\n    if (options.body != undefined) {\n      // body as a stream special case. set the body as-is and check for some special request headers specific to sending a stream.\n      if (options.bodyIsStream) {\n        if (!this.headers.get(\"Transfer-Encoding\")) {\n          this.headers.set(\"Transfer-Encoding\", \"chunked\");\n        }\n        if (this.headers.get(\"Content-Type\") !== \"application/octet-stream\") {\n          this.headers.set(\"Content-Type\", \"application/octet-stream\");\n        }\n      } else {\n        if (options.serializationMapper) {\n          this.body = new Serializer(options.mappers).serialize(\n            options.serializationMapper,\n            options.body,\n            \"requestBody\"\n          );\n        }\n        if (!options.disableJsonStringifyOnBody) {\n          this.body = JSON.stringify(options.body);\n        }\n      }\n    }\n\n    if (options.spanOptions) {\n      this.spanOptions = options.spanOptions;\n    }\n\n    this.abortSignal = options.abortSignal;\n    this.onDownloadProgress = options.onDownloadProgress;\n    this.onUploadProgress = options.onUploadProgress;\n\n    return this;\n  }\n\n  /**\n   * Clone this WebResource HTTP request object.\n   * @returns {WebResource} The clone of this WebResource HTTP request object.\n   */\n  clone(): WebResource {\n    const result = new WebResource(\n      this.url,\n      this.method,\n      this.body,\n      this.query,\n      this.headers && this.headers.clone(),\n      this.streamResponseBody,\n      this.withCredentials,\n      this.abortSignal,\n      this.timeout,\n      this.onUploadProgress,\n      this.onDownloadProgress,\n      this.proxySettings,\n      this.keepAlive\n    );\n\n    if (this.formData) {\n      result.formData = this.formData;\n    }\n\n    if (this.operationSpec) {\n      result.operationSpec = this.operationSpec;\n    }\n\n    if (this.shouldDeserialize) {\n      result.shouldDeserialize = this.shouldDeserialize;\n    }\n\n    if (this.operationResponseGetter) {\n      result.operationResponseGetter = this.operationResponseGetter;\n    }\n\n    return result;\n  }\n}\n\nexport interface RequestPrepareOptions {\n  /**\n   * The HTTP request method. Valid values are \"GET\", \"PUT\", \"HEAD\", \"DELETE\", \"OPTIONS\", \"POST\",\n   * or \"PATCH\".\n   */\n  method: HttpMethods;\n  /**\n   * The request url. It may or may not have query parameters in it. Either provide the \"url\" or\n   * provide the \"pathTemplate\" in the options object. Both the options are mutually exclusive.\n   */\n  url?: string;\n  /**\n   * A dictionary of query parameters to be appended to the url, where\n   * the \"key\" is the \"query-parameter-name\" and the \"value\" is the \"query-parameter-value\".\n   * The \"query-parameter-value\" can be of type \"string\" or it can be of type \"object\".\n   * The \"object\" format should be used when you want to skip url encoding. While using the object format,\n   * the object must have a property named value which provides the \"query-parameter-value\".\n   * Example:\n   *    - query-parameter-value in \"object\" format: { \"query-parameter-name\": { value: \"query-parameter-value\", skipUrlEncoding: true } }\n   *    - query-parameter-value in \"string\" format: { \"query-parameter-name\": \"query-parameter-value\"}.\n   * Note: \"If options.url already has some query parameters, then the value provided in options.queryParameters will be appended to the url.\n   */\n  queryParameters?: { [key: string]: any | ParameterValue };\n  /**\n   * The path template of the request url. Either provide the \"url\" or provide the \"pathTemplate\" in\n   * the options object. Both the options are mutually exclusive.\n   * Example: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}\"\n   */\n  pathTemplate?: string;\n  /**\n   * The base url of the request. Default value is: \"https://management.azure.com\". This is\n   * applicable only with pathTemplate. If you are providing options.url then it is expected that\n   * you provide the complete url.\n   */\n  baseUrl?: string;\n  /**\n   * A dictionary of path parameters that need to be replaced with actual values in the pathTemplate.\n   * Here the key is the \"path-parameter-name\" and the value is the \"path-parameter-value\".\n   * The \"path-parameter-value\" can be of type \"string\"  or it can be of type \"object\".\n   * The \"object\" format should be used when you want to skip url encoding. While using the object format,\n   * the object must have a property named value which provides the \"path-parameter-value\".\n   * Example:\n   *    - path-parameter-value in \"object\" format: { \"path-parameter-name\": { value: \"path-parameter-value\", skipUrlEncoding: true } }\n   *    - path-parameter-value in \"string\" format: { \"path-parameter-name\": \"path-parameter-value\" }.\n   */\n  pathParameters?: { [key: string]: any | ParameterValue };\n  formData?: { [key: string]: any };\n  /**\n   * A dictionary of request headers that need to be applied to the request.\n   * Here the key is the \"header-name\" and the value is the \"header-value\". The header-value MUST be of type string.\n   *  - ContentType must be provided with the key name as \"Content-Type\". Default value \"application/json; charset=utf-8\".\n   *  - \"Transfer-Encoding\" is set to \"chunked\" by default if \"options.bodyIsStream\" is set to true.\n   *  - \"Content-Type\" is set to \"application/octet-stream\" by default if \"options.bodyIsStream\" is set to true.\n   *  - \"accept-language\" by default is set to \"en-US\"\n   *  - \"x-ms-client-request-id\" by default is set to a new Guid. To not generate a guid for the request, please set options.disableClientRequestId to true\n   */\n  headers?: { [key: string]: any };\n  /**\n   * When set to true, instructs the client to not set \"x-ms-client-request-id\" header to a new Guid().\n   */\n  disableClientRequestId?: boolean;\n  /**\n   * The request body. It can be of any type. This value will be serialized if it is not a stream.\n   */\n  body?: any;\n  /**\n   * Provides information on how to serialize the request body.\n   */\n  serializationMapper?: Mapper;\n  /**\n   * A dictionary of mappers that may be used while [de]serialization.\n   */\n  mappers?: { [x: string]: any };\n  /**\n   * Provides information on how to deserialize the response body.\n   */\n  deserializationMapper?: object;\n  /**\n   * Indicates whether this method should JSON.stringify() the request body. Default value: false.\n   */\n  disableJsonStringifyOnBody?: boolean;\n  /**\n   * Indicates whether the request body is a stream (useful for file upload scenarios).\n   */\n  bodyIsStream?: boolean;\n  abortSignal?: AbortSignalLike;\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n  spanOptions?: SpanOptions;\n}\n\n/**\n * The Parameter value provided for path or query parameters in RequestPrepareOptions\n */\nexport interface ParameterValue {\n  value: any;\n  skipUrlEncoding: boolean;\n  [key: string]: any;\n}\n\n/**\n * Describes the base structure of the options object that will be used in every operation.\n */\nexport interface RequestOptionsBase {\n  /**\n   * @property {object} [customHeaders] User defined custom request headers that\n   * will be applied before the request is sent.\n   */\n  customHeaders?: { [key: string]: string };\n\n  /**\n   * The signal which can be used to abort requests.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * The number of milliseconds a request can take before automatically being terminated.\n   * If the request is terminated, an `AbortError` is thrown.\n   */\n  timeout?: number;\n\n  /**\n   * Callback which fires upon upload progress.\n   */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Callback which fires upon download progress.\n   */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Options used to create a span when tracing is enabled.\n   */\n  spanOptions?: SpanOptions;\n\n  [key: string]: any;\n}\n","/// <reference path=\"./shims-public.d.ts\" />\ntype AbortEventListener = (this: AbortSignalLike, ev?: any) => any;\n\nconst listenersMap = new WeakMap<AbortSignal, AbortEventListener[]>();\nconst abortedMap = new WeakMap<AbortSignal, boolean>();\n\n/**\n * Allows the request to be aborted upon firing of the \"abort\" event.\n * Compatible with the browser built-in AbortSignal and common polyfills.\n */\nexport interface AbortSignalLike {\n  /**\n   * Indicates if the signal has already been aborted.\n   */\n  readonly aborted: boolean;\n  /**\n   * Add new \"abort\" event listener, only support \"abort\" event.\n   */\n  addEventListener(\n    type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any,\n    options?: any\n  ): void;\n  /**\n   * Remove \"abort\" event listener, only support \"abort\" event.\n   */\n  removeEventListener(\n    type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any,\n    options?: any\n  ): void;\n}\n\n/**\n * An aborter instance implements AbortSignal interface, can abort HTTP requests.\n *\n * - Call AbortSignal.none to create a new AbortSignal instance that cannot be cancelled.\n * Use `AbortSignal.none` when you are required to pass a cancellation token but the operation\n * cannot or will not ever be cancelled.\n *\n * @example\n * // Abort without timeout\n * await doAsyncWork(AbortSignal.none);\n *\n * @export\n * @class AbortSignal\n * @implements {AbortSignalLike}\n */\nexport class AbortSignal implements AbortSignalLike {\n  constructor() {\n    listenersMap.set(this, []);\n    abortedMap.set(this, false);\n  }\n\n  /**\n   * Status of whether aborted or not.\n   *\n   * @readonly\n   * @type {boolean}\n   * @memberof AbortSignal\n   */\n  public get aborted(): boolean {\n    if (!abortedMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    return abortedMap.get(this)!;\n  }\n\n  /**\n   * Creates a new AbortSignal instance that will never be aborted.\n   *\n   * @readonly\n   * @static\n   * @type {AbortSignal}\n   * @memberof AbortSignal\n   */\n  public static get none(): AbortSignal {\n    return new AbortSignal();\n  }\n\n  /**\n   * onabort event listener.\n   *\n   * @memberof AbortSignal\n   */\n  public onabort: ((ev?: Event) => any) | null = null;\n\n  /**\n   * Added new \"abort\" event listener, only support \"abort\" event.\n   *\n   * @param {\"abort\"} _type Only support \"abort\" event\n   * @param {(this: AbortSignalLike, ev: any) => any} listener\n   * @memberof AbortSignal\n   */\n  public addEventListener(\n    // tslint:disable-next-line:variable-name\n    _type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any\n  ): void {\n    if (!listenersMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    const listeners = listenersMap.get(this)!;\n    listeners.push(listener);\n  }\n\n  /**\n   * Remove \"abort\" event listener, only support \"abort\" event.\n   *\n   * @param {\"abort\"} _type Only support \"abort\" event\n   * @param {(this: AbortSignalLike, ev: any) => any} listener\n   * @memberof AbortSignal\n   */\n  public removeEventListener(\n    // tslint:disable-next-line:variable-name\n    _type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any\n  ): void {\n    if (!listenersMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    const listeners = listenersMap.get(this)!;\n\n    const index = listeners.indexOf(listener);\n    if (index > -1) {\n      listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Dispatches a synthetic event to the AbortSignal.\n   */\n  dispatchEvent(_event: Event): boolean {\n    throw new Error(\n      \"This is a stub dispatchEvent implementation that should not be used.  It only exists for type-checking purposes.\"\n    );\n  }\n}\n\n/**\n * Helper to trigger an abort event immediately, the onabort and all abort event listeners will be triggered.\n * Will try to trigger abort event for all linked AbortSignal nodes.\n *\n * - If there is a timeout, the timer will be cancelled.\n * - If aborted is true, nothing will happen.\n *\n * @returns\n * @internal\n */\nexport function abortSignal(signal: AbortSignal) {\n  if (signal.aborted) {\n    return;\n  }\n\n  if (signal.onabort) {\n    signal.onabort.call(signal);\n  }\n\n  const listeners = listenersMap.get(signal)!;\n  if (listeners) {\n    listeners.forEach((listener) => {\n      listener.call(signal, { type: \"abort\" });\n    });\n  }\n\n  abortedMap.set(signal, true);\n}\n","import { AbortSignal, abortSignal, AbortSignalLike } from \"./AbortSignal\";\n\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n */\nexport class AbortError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = \"AbortError\";\n  }\n}\n\n/**\n * An AbortController provides an AbortSignal and the associated controls to signal\n * that an asynchronous operation should be aborted.\n *\n * @example\n * // Abort an operation when another event fires\n * const controller = new AbortController();\n * const signal = controller.signal;\n * doAsyncWork(signal);\n * button.addEventListener('click', () => controller.abort());\n *\n * @example\n * // Share aborter cross multiple operations in 30s\n * // Upload the same data to 2 different data centers at the same time,\n * // abort another when any of them is finished\n * const controller = AbortController.withTimeout(30 * 1000);\n * doAsyncWork(controller.signal).then(controller.abort);\n * doAsyncWork(controller.signal).then(controller.abort);\n *\n * @example\n * // Cascaded aborting\n * // All operations can't take more than 30 seconds\n * const aborter = Aborter.timeout(30 * 1000);\n *\n * // Following 2 operations can't take more than 25 seconds\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n *\n * @export\n * @class AbortController\n * @implements {AbortSignalLike}\n */\nexport class AbortController {\n  private _signal: AbortSignal;\n\n  /**\n   * @param {AbortSignalLike[]} [parentSignals] The AbortSignals that will signal aborted on the AbortSignal associated with this controller.\n   * @constructor\n   */\n  constructor(parentSignals?: AbortSignalLike[]);\n  /**\n   * @param {...AbortSignalLike} parentSignals The AbortSignals that will signal aborted on the AbortSignal associated with this controller.\n   * @constructor\n   */\n  constructor(...parentSignals: AbortSignalLike[]);\n  constructor(parentSignals?: any) {\n    this._signal = new AbortSignal();\n\n    if (!parentSignals) {\n      return;\n    }\n    // coerce parentSignals into an array\n    if (!Array.isArray(parentSignals)) {\n      parentSignals = arguments;\n    }\n    for (const parentSignal of parentSignals) {\n      // if the parent signal has already had abort() called,\n      // then call abort on this signal as well.\n      if (parentSignal.aborted) {\n        this.abort();\n      } else {\n        // when the parent signal aborts, this signal should as well.\n        parentSignal.addEventListener(\"abort\", () => {\n          this.abort();\n        });\n      }\n    }\n  }\n\n  /**\n   * The AbortSignal associated with this controller that will signal aborted\n   * when the abort method is called on this controller.\n   *\n   * @readonly\n   * @type {AbortSignal}\n   * @memberof AbortController\n   */\n  public get signal() {\n    return this._signal;\n  }\n\n  /**\n   * Signal that any operations passed this controller's associated abort signal\n   * to cancel any remaining work and throw an `AbortError`.\n   *\n   * @memberof AbortController\n   */\n  abort() {\n    abortSignal(this._signal);\n  }\n\n  /**\n   * Creates a new AbortSignal instance that will abort after the provided ms.\n   *\n   * @static\n   * @params {number} ms Elapsed time in milliseconds to trigger an abort.\n   * @returns {AbortSignal}\n   */\n  public static timeout(ms: number): AbortSignal {\n    const signal = new AbortSignal();\n    const timer = setTimeout(abortSignal, ms, signal);\n    // Prevent the active Timer from keeping the Node.js event loop active.\n    if (typeof timer.unref === \"function\") {\n      timer.unref();\n    }\n    return signal;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nexport const custom = {};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { replaceAll } from \"./util/utils\";\n\ntype URLQueryParseState = \"ParameterName\" | \"ParameterValue\" | \"Invalid\";\n\n/**\n * A class that handles the query portion of a URLBuilder.\n */\nexport class URLQuery {\n  private readonly _rawQuery: { [queryParameterName: string]: string | string[] } = {};\n\n  /**\n   * Get whether or not there any query parameters in this URLQuery.\n   */\n  public any(): boolean {\n    return Object.keys(this._rawQuery).length > 0;\n  }\n\n  /**\n   * Get the keys of the query string.\n   */\n  public keys(): string[] {\n    return Object.keys(this._rawQuery);\n  }\n\n  /**\n   * Set a query parameter with the provided name and value. If the parameterValue is undefined or\n   * empty, then this will attempt to remove an existing query parameter with the provided\n   * parameterName.\n   */\n  public set(parameterName: string, parameterValue: any): void {\n    if (parameterName) {\n      if (parameterValue != undefined) {\n        const newValue = Array.isArray(parameterValue) ? parameterValue : parameterValue.toString();\n        this._rawQuery[parameterName] = newValue;\n      } else {\n        delete this._rawQuery[parameterName];\n      }\n    }\n  }\n\n  /**\n   * Get the value of the query parameter with the provided name. If no parameter exists with the\n   * provided parameter name, then undefined will be returned.\n   */\n  public get(parameterName: string): string | string[] | undefined {\n    return parameterName ? this._rawQuery[parameterName] : undefined;\n  }\n\n  /**\n   * Get the string representation of this query. The return value will not start with a \"?\".\n   */\n  public toString(): string {\n    let result = \"\";\n    for (const parameterName in this._rawQuery) {\n      if (result) {\n        result += \"&\";\n      }\n      const parameterValue = this._rawQuery[parameterName];\n      if (Array.isArray(parameterValue)) {\n        const parameterStrings = [];\n        for (const parameterValueElement of parameterValue) {\n          parameterStrings.push(`${parameterName}=${parameterValueElement}`);\n        }\n        result += parameterStrings.join(\"&\");\n      } else {\n        result += `${parameterName}=${parameterValue}`;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Parse a URLQuery from the provided text.\n   */\n  public static parse(text: string): URLQuery {\n    const result = new URLQuery();\n\n    if (text) {\n      if (text.startsWith(\"?\")) {\n        text = text.substring(1);\n      }\n\n      let currentState: URLQueryParseState = \"ParameterName\";\n\n      let parameterName = \"\";\n      let parameterValue = \"\";\n      for (let i = 0; i < text.length; ++i) {\n        const currentCharacter: string = text[i];\n        switch (currentState) {\n          case \"ParameterName\":\n            switch (currentCharacter) {\n              case \"=\":\n                currentState = \"ParameterValue\";\n                break;\n\n              case \"&\":\n                parameterName = \"\";\n                parameterValue = \"\";\n                break;\n\n              default:\n                parameterName += currentCharacter;\n                break;\n            }\n            break;\n\n          case \"ParameterValue\":\n            switch (currentCharacter) {\n              case \"=\":\n                parameterName = \"\";\n                parameterValue = \"\";\n                currentState = \"Invalid\";\n                break;\n\n              case \"&\":\n                result.set(parameterName, parameterValue);\n                parameterName = \"\";\n                parameterValue = \"\";\n                currentState = \"ParameterName\";\n                break;\n\n              default:\n                parameterValue += currentCharacter;\n                break;\n            }\n            break;\n\n          case \"Invalid\":\n            if (currentCharacter === \"&\") {\n              currentState = \"ParameterName\";\n            }\n            break;\n\n          default:\n            throw new Error(\"Unrecognized URLQuery parse state: \" + currentState);\n        }\n      }\n      if (currentState === \"ParameterValue\") {\n        result.set(parameterName, parameterValue);\n      }\n    }\n\n    return result;\n  }\n}\n\n/**\n * A class that handles creating, modifying, and parsing URLs.\n */\nexport class URLBuilder {\n  private _scheme: string | undefined;\n  private _host: string | undefined;\n  private _port: string | undefined;\n  private _path: string | undefined;\n  private _query: URLQuery | undefined;\n\n  /**\n   * Set the scheme/protocol for this URL. If the provided scheme contains other parts of a URL\n   * (such as a host, port, path, or query), those parts will be added to this URL as well.\n   */\n  public setScheme(scheme: string | undefined): void {\n    if (!scheme) {\n      this._scheme = undefined;\n    } else {\n      this.set(scheme, \"SCHEME\");\n    }\n  }\n\n  /**\n   * Get the scheme that has been set in this URL.\n   */\n  public getScheme(): string | undefined {\n    return this._scheme;\n  }\n\n  /**\n   * Set the host for this URL. If the provided host contains other parts of a URL (such as a\n   * port, path, or query), those parts will be added to this URL as well.\n   */\n  public setHost(host: string | undefined): void {\n    if (!host) {\n      this._host = undefined;\n    } else {\n      this.set(host, \"SCHEME_OR_HOST\");\n    }\n  }\n\n  /**\n   * Get the host that has been set in this URL.\n   */\n  public getHost(): string | undefined {\n    return this._host;\n  }\n\n  /**\n   * Set the port for this URL. If the provided port contains other parts of a URL (such as a\n   * path or query), those parts will be added to this URL as well.\n   */\n  public setPort(port: number | string | undefined): void {\n    if (port == undefined || port === \"\") {\n      this._port = undefined;\n    } else {\n      this.set(port.toString(), \"PORT\");\n    }\n  }\n\n  /**\n   * Get the port that has been set in this URL.\n   */\n  public getPort(): string | undefined {\n    return this._port;\n  }\n\n  /**\n   * Set the path for this URL. If the provided path contains a query, then it will be added to\n   * this URL as well.\n   */\n  public setPath(path: string | undefined): void {\n    if (!path) {\n      this._path = undefined;\n    } else {\n      if (path.indexOf(\"://\") !== -1) {\n        this.set(path, \"SCHEME\");\n      } else {\n        this.set(path, \"PATH\");\n      }\n    }\n  }\n\n  /**\n   * Append the provided path to this URL's existing path. If the provided path contains a query,\n   * then it will be added to this URL as well.\n   */\n  public appendPath(path: string | undefined): void {\n    if (path) {\n      let currentPath: string | undefined = this.getPath();\n      if (currentPath) {\n        if (!currentPath.endsWith(\"/\")) {\n          currentPath += \"/\";\n        }\n\n        if (path.startsWith(\"/\")) {\n          path = path.substring(1);\n        }\n\n        path = currentPath + path;\n      }\n      this.set(path, \"PATH\");\n    }\n  }\n\n  /**\n   * Get the path that has been set in this URL.\n   */\n  public getPath(): string | undefined {\n    return this._path;\n  }\n\n  /**\n   * Set the query in this URL.\n   */\n  public setQuery(query: string | undefined): void {\n    if (!query) {\n      this._query = undefined;\n    } else {\n      this._query = URLQuery.parse(query);\n    }\n  }\n\n  /**\n   * Set a query parameter with the provided name and value in this URL's query. If the provided\n   * query parameter value is undefined or empty, then the query parameter will be removed if it\n   * existed.\n   */\n  public setQueryParameter(queryParameterName: string, queryParameterValue: any): void {\n    if (queryParameterName) {\n      if (!this._query) {\n        this._query = new URLQuery();\n      }\n      this._query.set(queryParameterName, queryParameterValue);\n    }\n  }\n\n  /**\n   * Get the value of the query parameter with the provided query parameter name. If no query\n   * parameter exists with the provided name, then undefined will be returned.\n   */\n  public getQueryParameterValue(queryParameterName: string): string | string[] | undefined {\n    return this._query ? this._query.get(queryParameterName) : undefined;\n  }\n\n  /**\n   * Get the query in this URL.\n   */\n  public getQuery(): string | undefined {\n    return this._query ? this._query.toString() : undefined;\n  }\n\n  /**\n   * Set the parts of this URL by parsing the provided text using the provided startState.\n   */\n  private set(text: string, startState: URLTokenizerState): void {\n    const tokenizer = new URLTokenizer(text, startState);\n\n    while (tokenizer.next()) {\n      const token: URLToken | undefined = tokenizer.current();\n      if (token) {\n        switch (token.type) {\n          case \"SCHEME\":\n            this._scheme = token.text || undefined;\n            break;\n\n          case \"HOST\":\n            this._host = token.text || undefined;\n            break;\n\n          case \"PORT\":\n            this._port = token.text || undefined;\n            break;\n\n          case \"PATH\":\n            const tokenPath: string | undefined = token.text || undefined;\n            if (!this._path || this._path === \"/\" || tokenPath !== \"/\") {\n              this._path = tokenPath;\n            }\n            break;\n\n          case \"QUERY\":\n            this._query = URLQuery.parse(token.text);\n            break;\n\n          default:\n            throw new Error(`Unrecognized URLTokenType: ${token.type}`);\n        }\n      }\n    }\n  }\n\n  public toString(): string {\n    let result = \"\";\n\n    if (this._scheme) {\n      result += `${this._scheme}://`;\n    }\n\n    if (this._host) {\n      result += this._host;\n    }\n\n    if (this._port) {\n      result += `:${this._port}`;\n    }\n\n    if (this._path) {\n      if (!this._path.startsWith(\"/\")) {\n        result += \"/\";\n      }\n      result += this._path;\n    }\n\n    if (this._query && this._query.any()) {\n      result += `?${this._query.toString()}`;\n    }\n\n    return result;\n  }\n\n  /**\n   * If the provided searchValue is found in this URLBuilder, then replace it with the provided\n   * replaceValue.\n   */\n  public replaceAll(searchValue: string, replaceValue: string): void {\n    if (searchValue) {\n      this.setScheme(replaceAll(this.getScheme(), searchValue, replaceValue));\n      this.setHost(replaceAll(this.getHost(), searchValue, replaceValue));\n      this.setPort(replaceAll(this.getPort(), searchValue, replaceValue));\n      this.setPath(replaceAll(this.getPath(), searchValue, replaceValue));\n      this.setQuery(replaceAll(this.getQuery(), searchValue, replaceValue));\n    }\n  }\n\n  public static parse(text: string): URLBuilder {\n    const result = new URLBuilder();\n    result.set(text, \"SCHEME_OR_HOST\");\n    return result;\n  }\n}\n\ntype URLTokenizerState = \"SCHEME\" | \"SCHEME_OR_HOST\" | \"HOST\" | \"PORT\" | \"PATH\" | \"QUERY\" | \"DONE\";\n\ntype URLTokenType = \"SCHEME\" | \"HOST\" | \"PORT\" | \"PATH\" | \"QUERY\";\n\nexport class URLToken {\n  public constructor(public readonly text: string, public readonly type: URLTokenType) {}\n\n  public static scheme(text: string): URLToken {\n    return new URLToken(text, \"SCHEME\");\n  }\n\n  public static host(text: string): URLToken {\n    return new URLToken(text, \"HOST\");\n  }\n\n  public static port(text: string): URLToken {\n    return new URLToken(text, \"PORT\");\n  }\n\n  public static path(text: string): URLToken {\n    return new URLToken(text, \"PATH\");\n  }\n\n  public static query(text: string): URLToken {\n    return new URLToken(text, \"QUERY\");\n  }\n}\n\n/**\n * Get whether or not the provided character (single character string) is an alphanumeric (letter or\n * digit) character.\n */\nexport function isAlphaNumericCharacter(character: string): boolean {\n  const characterCode: number = character.charCodeAt(0);\n  return (\n    (48 /* '0' */ <= characterCode && characterCode <= 57) /* '9' */ ||\n    (65 /* 'A' */ <= characterCode && characterCode <= 90) /* 'Z' */ ||\n    (97 /* 'a' */ <= characterCode && characterCode <= 122) /* 'z' */\n  );\n}\n\n/**\n * A class that tokenizes URL strings.\n */\nexport class URLTokenizer {\n  readonly _textLength: number;\n  _currentState: URLTokenizerState;\n  _currentIndex: number;\n  _currentToken: URLToken | undefined;\n\n  public constructor(readonly _text: string, state?: URLTokenizerState) {\n    this._textLength = _text ? _text.length : 0;\n    this._currentState = state != undefined ? state : \"SCHEME_OR_HOST\";\n    this._currentIndex = 0;\n  }\n\n  /**\n   * Get the current URLToken this URLTokenizer is pointing at, or undefined if the URLTokenizer\n   * hasn't started or has finished tokenizing.\n   */\n  public current(): URLToken | undefined {\n    return this._currentToken;\n  }\n\n  /**\n   * Advance to the next URLToken and return whether or not a URLToken was found.\n   */\n  public next(): boolean {\n    if (!hasCurrentCharacter(this)) {\n      this._currentToken = undefined;\n    } else {\n      switch (this._currentState) {\n        case \"SCHEME\":\n          nextScheme(this);\n          break;\n\n        case \"SCHEME_OR_HOST\":\n          nextSchemeOrHost(this);\n          break;\n\n        case \"HOST\":\n          nextHost(this);\n          break;\n\n        case \"PORT\":\n          nextPort(this);\n          break;\n\n        case \"PATH\":\n          nextPath(this);\n          break;\n\n        case \"QUERY\":\n          nextQuery(this);\n          break;\n\n        default:\n          throw new Error(`Unrecognized URLTokenizerState: ${this._currentState}`);\n      }\n    }\n    return !!this._currentToken;\n  }\n}\n\n/**\n * Read the remaining characters from this Tokenizer's character stream.\n */\nfunction readRemaining(tokenizer: URLTokenizer): string {\n  let result = \"\";\n  if (tokenizer._currentIndex < tokenizer._textLength) {\n    result = tokenizer._text.substring(tokenizer._currentIndex);\n    tokenizer._currentIndex = tokenizer._textLength;\n  }\n  return result;\n}\n\n/**\n * Whether or not this URLTokenizer has a current character.\n */\nfunction hasCurrentCharacter(tokenizer: URLTokenizer): boolean {\n  return tokenizer._currentIndex < tokenizer._textLength;\n}\n\n/**\n * Get the character in the text string at the current index.\n */\nfunction getCurrentCharacter(tokenizer: URLTokenizer): string {\n  return tokenizer._text[tokenizer._currentIndex];\n}\n\n/**\n * Advance to the character in text that is \"step\" characters ahead. If no step value is provided,\n * then step will default to 1.\n */\nfunction nextCharacter(tokenizer: URLTokenizer, step?: number): void {\n  if (hasCurrentCharacter(tokenizer)) {\n    if (!step) {\n      step = 1;\n    }\n    tokenizer._currentIndex += step;\n  }\n}\n\n/**\n * Starting with the current character, peek \"charactersToPeek\" number of characters ahead in this\n * Tokenizer's stream of characters.\n */\nfunction peekCharacters(tokenizer: URLTokenizer, charactersToPeek: number): string {\n  let endIndex: number = tokenizer._currentIndex + charactersToPeek;\n  if (tokenizer._textLength < endIndex) {\n    endIndex = tokenizer._textLength;\n  }\n  return tokenizer._text.substring(tokenizer._currentIndex, endIndex);\n}\n\n/**\n * Read characters from this Tokenizer until the end of the stream or until the provided condition\n * is false when provided the current character.\n */\nfunction readWhile(tokenizer: URLTokenizer, condition: (character: string) => boolean): string {\n  let result = \"\";\n\n  while (hasCurrentCharacter(tokenizer)) {\n    const currentCharacter: string = getCurrentCharacter(tokenizer);\n    if (!condition(currentCharacter)) {\n      break;\n    } else {\n      result += currentCharacter;\n      nextCharacter(tokenizer);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Read characters from this Tokenizer until a non-alphanumeric character or the end of the\n * character stream is reached.\n */\nfunction readWhileLetterOrDigit(tokenizer: URLTokenizer): string {\n  return readWhile(tokenizer, (character: string) => isAlphaNumericCharacter(character));\n}\n\n/**\n * Read characters from this Tokenizer until one of the provided terminating characters is read or\n * the end of the character stream is reached.\n */\nfunction readUntilCharacter(tokenizer: URLTokenizer, ...terminatingCharacters: string[]): string {\n  return readWhile(\n    tokenizer,\n    (character: string) => terminatingCharacters.indexOf(character) === -1\n  );\n}\n\nfunction nextScheme(tokenizer: URLTokenizer): void {\n  const scheme: string = readWhileLetterOrDigit(tokenizer);\n  tokenizer._currentToken = URLToken.scheme(scheme);\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"HOST\";\n  }\n}\n\nfunction nextSchemeOrHost(tokenizer: URLTokenizer): void {\n  const schemeOrHost: string = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    if (peekCharacters(tokenizer, 3) === \"://\") {\n      tokenizer._currentToken = URLToken.scheme(schemeOrHost);\n      tokenizer._currentState = \"HOST\";\n    } else {\n      tokenizer._currentToken = URLToken.host(schemeOrHost);\n      tokenizer._currentState = \"PORT\";\n    }\n  } else {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n    if (getCurrentCharacter(tokenizer) === \"/\") {\n      tokenizer._currentState = \"PATH\";\n    } else {\n      tokenizer._currentState = \"QUERY\";\n    }\n  }\n}\n\nfunction nextHost(tokenizer: URLTokenizer): void {\n  if (peekCharacters(tokenizer, 3) === \"://\") {\n    nextCharacter(tokenizer, 3);\n  }\n\n  const host: string = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n  tokenizer._currentToken = URLToken.host(host);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    tokenizer._currentState = \"PORT\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextPort(tokenizer: URLTokenizer): void {\n  if (getCurrentCharacter(tokenizer) === \":\") {\n    nextCharacter(tokenizer);\n  }\n\n  const port: string = readUntilCharacter(tokenizer, \"/\", \"?\");\n  tokenizer._currentToken = URLToken.port(port);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextPath(tokenizer: URLTokenizer): void {\n  const path: string = readUntilCharacter(tokenizer, \"?\");\n  tokenizer._currentToken = URLToken.path(path);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextQuery(tokenizer: URLTokenizer): void {\n  if (getCurrentCharacter(tokenizer) === \"?\") {\n    nextCharacter(tokenizer);\n  }\n\n  const query: string = readRemaining(tokenizer);\n  tokenizer._currentToken = URLToken.query(query);\n  tokenizer._currentState = \"DONE\";\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { URLBuilder, URLQuery } from \"../url\";\n\nexport interface SanitizerOptions {\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   */\n  allowedHeaderNames?: string[];\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   */\n  allowedQueryParameters?: string[];\n}\n\nconst RedactedString = \"REDACTED\";\n\nconst defaultAllowedHeaderNames = [\n  \"x-ms-client-request-id\",\n  \"x-ms-return-client-request-id\",\n  \"x-ms-useragent\",\n  \"traceparent\",\n\n  \"Accept\",\n  \"Cache-Control\",\n  \"Connection\",\n  \"Content-Length\",\n  \"Content-Type\",\n  \"Date\",\n  \"ETag\",\n  \"Expires\",\n  \"If-Match\",\n  \"If-Modified-Since\",\n  \"If-None-Match\",\n  \"If-Unmodified-Since\",\n  \"Last-Modified\",\n  \"Pragma\",\n  \"Request-Id\",\n  \"Retry-After\",\n  \"Server\",\n  \"Transfer-Encoding\",\n  \"User-Agent\"\n];\n\nconst defaultAllowedQueryParameters: string[] = [\"api-version\"];\n\nexport class Sanitizer {\n  public allowedHeaderNames: Set<string>;\n  public allowedQueryParameters: Set<string>;\n\n  constructor({ allowedHeaderNames = [], allowedQueryParameters = [] }: SanitizerOptions = {}) {\n    allowedHeaderNames = Array.isArray(allowedHeaderNames)\n      ? defaultAllowedHeaderNames.concat(allowedHeaderNames)\n      : defaultAllowedHeaderNames;\n\n    allowedQueryParameters = Array.isArray(allowedQueryParameters)\n      ? defaultAllowedQueryParameters.concat(allowedQueryParameters)\n      : defaultAllowedQueryParameters;\n\n    this.allowedHeaderNames = new Set(allowedHeaderNames.map((n) => n.toLowerCase()));\n    this.allowedQueryParameters = new Set(allowedQueryParameters.map((p) => p.toLowerCase()));\n  }\n\n  public sanitize(obj: object) {\n    return JSON.stringify(obj, this.replacer.bind(this), 2);\n  }\n\n  private replacer(key: string, value: unknown) {\n    if (key === \"_headersMap\") {\n      return this.sanitizeHeaders(key, value as {});\n    } else if (key === \"url\") {\n      return this.sanitizeUrl(value as string);\n    } else if (key === \"query\") {\n      return this.sanitizeQuery(value as {});\n    } else if (key === \"body\") {\n      // Don't log the request body\n      return undefined;\n    } else if (key === \"response\") {\n      // Don't log response again\n      return undefined;\n    } else if (key === \"operationSpec\") {\n      // When using sendOperationRequest, the request carries a massive\n      // field with the autorest spec. No need to log it.\n      return undefined;\n    }\n\n    return value;\n  }\n\n  private sanitizeHeaders(_: string, value: { [s: string]: any }) {\n    return this.sanitizeObject(value, this.allowedHeaderNames, (v, k) => v[k].value);\n  }\n\n  private sanitizeQuery(value: { [s: string]: string }) {\n    return this.sanitizeObject(value, this.allowedQueryParameters, (v, k) => v[k]);\n  }\n\n  private sanitizeObject(\n    value: { [s: string]: any },\n    allowedKeys: Set<string>,\n    accessor: (value: any, key: string) => any\n  ) {\n    if (typeof value !== \"object\" || value === null) {\n      return value;\n    }\n\n    const sanitized: { [s: string]: string } = {};\n\n    for (const k of Object.keys(value)) {\n      if (allowedKeys.has(k.toLowerCase())) {\n        sanitized[k] = accessor(value, k);\n      } else {\n        sanitized[k] = RedactedString;\n      }\n    }\n\n    return sanitized;\n  }\n\n  private sanitizeUrl(value: string): string {\n    if (typeof value !== \"string\" || value === null) {\n      return value;\n    }\n\n    const urlBuilder = URLBuilder.parse(value);\n    const queryString = urlBuilder.getQuery();\n\n    if (!queryString) {\n      return value;\n    }\n\n    const query = URLQuery.parse(queryString);\n    for (const k of query.keys()) {\n      if (!this.allowedQueryParameters.has(k.toLowerCase())) {\n        query.set(k, RedactedString);\n      }\n    }\n\n    urlBuilder.setQuery(query.toString());\n    return urlBuilder.toString();\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\nimport { WebResource } from \"./webResource\";\nimport { custom } from \"./util/inspect\";\nimport { Sanitizer } from \"./util/sanitizer\";\n\nconst errorSanitizer = new Sanitizer();\n\nexport class RestError extends Error {\n  static readonly REQUEST_SEND_ERROR: string = \"REQUEST_SEND_ERROR\";\n  static readonly PARSE_ERROR: string = \"PARSE_ERROR\";\n\n  code?: string;\n  statusCode?: number;\n  request?: WebResource;\n  response?: HttpOperationResponse;\n  details?: unknown;\n  constructor(\n    message: string,\n    code?: string,\n    statusCode?: number,\n    request?: WebResource,\n    response?: HttpOperationResponse\n  ) {\n    super(message);\n    this.code = code;\n    this.statusCode = statusCode;\n    this.request = request;\n    this.response = response;\n\n    Object.setPrototypeOf(this, RestError.prototype);\n  }\n\n  /**\n   * Logging method for util.inspect in Node\n   */\n  [custom](): string {\n    return errorSanitizer.sanitize(this);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AbortError } from \"@azure/abort-controller\";\nimport { HttpClient } from \"./httpClient\";\nimport { HttpHeaders } from \"./httpHeaders\";\nimport { WebResource, TransferProgressEvent } from \"./webResource\";\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\nimport { RestError } from \"./restError\";\n\n/**\n * A HttpClient implementation that uses XMLHttpRequest to send HTTP requests.\n */\nexport class XhrHttpClient implements HttpClient {\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    const xhr = new XMLHttpRequest();\n\n    if (request.proxySettings) {\n      throw new Error(\"HTTP proxy is not supported in browser environment\");\n    }\n\n    const abortSignal = request.abortSignal;\n    if (abortSignal) {\n      if (abortSignal.aborted) {\n        return Promise.reject(new AbortError(\"The operation was aborted.\"));\n      }\n\n      const listener = () => {\n        xhr.abort();\n      };\n      abortSignal.addEventListener(\"abort\", listener);\n      xhr.addEventListener(\"readystatechange\", () => {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          abortSignal.removeEventListener(\"abort\", listener);\n        }\n      });\n    }\n\n    addProgressListener(xhr.upload, request.onUploadProgress);\n    addProgressListener(xhr, request.onDownloadProgress);\n\n    if (request.formData) {\n      const formData = request.formData;\n      const requestForm = new FormData();\n      const appendFormValue = (key: string, value: any) => {\n        if (value && value.hasOwnProperty(\"value\") && value.hasOwnProperty(\"options\")) {\n          requestForm.append(key, value.value, value.options);\n        } else {\n          requestForm.append(key, value);\n        }\n      };\n      for (const formKey of Object.keys(formData)) {\n        const formValue = formData[formKey];\n        if (Array.isArray(formValue)) {\n          for (let j = 0; j < formValue.length; j++) {\n            appendFormValue(formKey, formValue[j]);\n          }\n        } else {\n          appendFormValue(formKey, formValue);\n        }\n      }\n\n      request.body = requestForm;\n      request.formData = undefined;\n      const contentType = request.headers.get(\"Content-Type\");\n      if (contentType && contentType.indexOf(\"multipart/form-data\") !== -1) {\n        // browser will automatically apply a suitable content-type header\n        request.headers.remove(\"Content-Type\");\n      }\n    }\n\n    xhr.open(request.method, request.url);\n    xhr.timeout = request.timeout;\n    xhr.withCredentials = request.withCredentials;\n    for (const header of request.headers.headersArray()) {\n      xhr.setRequestHeader(header.name, header.value);\n    }\n    xhr.responseType = request.streamResponseBody ? \"blob\" : \"text\";\n\n    // tslint:disable-next-line:no-null-keyword\n    xhr.send(request.body === undefined ? null : request.body);\n\n    if (request.streamResponseBody) {\n      return new Promise((resolve, reject) => {\n        xhr.addEventListener(\"readystatechange\", () => {\n          // Resolve as soon as headers are loaded\n          if (xhr.readyState === XMLHttpRequest.HEADERS_RECEIVED) {\n            const blobBody = new Promise<Blob>((resolve, reject) => {\n              xhr.addEventListener(\"load\", () => {\n                resolve(xhr.response);\n              });\n              rejectOnTerminalEvent(request, xhr, reject);\n            });\n            resolve({\n              request,\n              status: xhr.status,\n              headers: parseHeaders(xhr),\n              blobBody\n            });\n          }\n        });\n        rejectOnTerminalEvent(request, xhr, reject);\n      });\n    } else {\n      return new Promise(function(resolve, reject) {\n        xhr.addEventListener(\"load\", () =>\n          resolve({\n            request,\n            status: xhr.status,\n            headers: parseHeaders(xhr),\n            bodyAsText: xhr.responseText\n          })\n        );\n        rejectOnTerminalEvent(request, xhr, reject);\n      });\n    }\n  }\n}\n\nfunction addProgressListener(\n  xhr: XMLHttpRequestEventTarget,\n  listener?: (progress: TransferProgressEvent) => void\n) {\n  if (listener) {\n    xhr.addEventListener(\"progress\", (rawEvent) =>\n      listener({\n        loadedBytes: rawEvent.loaded\n      })\n    );\n  }\n}\n\n// exported locally for testing\nexport function parseHeaders(xhr: XMLHttpRequest) {\n  const responseHeaders = new HttpHeaders();\n  const headerLines = xhr\n    .getAllResponseHeaders()\n    .trim()\n    .split(/[\\r\\n]+/);\n  for (const line of headerLines) {\n    const index = line.indexOf(\":\");\n    const headerName = line.slice(0, index);\n    const headerValue = line.slice(index + 2);\n    responseHeaders.set(headerName, headerValue);\n  }\n  return responseHeaders;\n}\n\nfunction rejectOnTerminalEvent(\n  request: WebResource,\n  xhr: XMLHttpRequest,\n  reject: (err: any) => void\n) {\n  xhr.addEventListener(\"error\", () =>\n    reject(\n      new RestError(\n        `Failed to send request to ${request.url}`,\n        RestError.REQUEST_SEND_ERROR,\n        undefined,\n        request\n      )\n    )\n  );\n  const abortError = new AbortError(\"The operation was aborted.\");\n  xhr.addEventListener(\"abort\", () => reject(abortError));\n  xhr.addEventListener(\"timeout\", () => reject(abortError));\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * The different levels of logs that can be used with the HttpPipelineLogger.\n */\nexport enum HttpPipelineLogLevel {\n  /**\n   * A log level that indicates that no logs will be logged.\n   */\n  OFF,\n\n  /**\n   * An error log.\n   */\n  ERROR,\n\n  /**\n   * A warning log.\n   */\n  WARNING,\n\n  /**\n   * An information log.\n   */\n  INFO\n}\n","import { AbortSignalLike } from \"@azure/abort-controller\";\nimport { SpanOptions } from \"@opentelemetry/types\";\nimport { TransferProgressEvent, RequestOptionsBase } from \"./webResource\";\n\n/**\n * The base options type for all operations.\n */\nexport interface OperationOptions {\n  /**\n   * The signal which can be used to abort requests.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Options used when creating and sending HTTP requests for this operation.\n   */\n  requestOptions?: OperationRequestOptions;\n  /**\n   * Options used when tracing is enabled.\n   */\n  tracingOptions?: OperationTracingOptions;\n}\n\nexport interface OperationTracingOptions {\n  /**\n   * OpenTelemetry SpanOptions used to create a span when tracing is enabled.\n   */\n  spanOptions?: SpanOptions;\n}\n\nexport interface OperationRequestOptions {\n  /**\n   * @property {object} [customHeaders] User defined custom request headers that\n   * will be applied before the request is sent.\n   */\n  customHeaders?: { [key: string]: string };\n\n  /**\n   * The number of milliseconds a request can take before automatically being terminated.\n   */\n  timeout?: number;\n\n  /**\n   * Callback which fires upon upload progress.\n   */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Callback which fires upon download progress.\n   */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n}\n\n/**\n * Converts an OperationOptions to a RequestOptionsBase\n *\n * @param opts OperationOptions object to convert to RequestOptionsBase\n */\nexport function operationOptionsToRequestOptionsBase<T extends OperationOptions>(\n  opts: T\n): RequestOptionsBase {\n  const { requestOptions, tracingOptions, ...additionalOptions } = opts;\n\n  let result: RequestOptionsBase = additionalOptions;\n\n  if (requestOptions) {\n    result = { ...result, ...requestOptions };\n  }\n\n  if (tracingOptions) {\n    result.spanOptions = tracingOptions.spanOptions;\n  }\n\n  return result;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { OperationOptions } from \"./operationOptions\";\n\n/**\n * Represents a credential capable of providing an authentication token.\n */\nexport interface TokenCredential {\n  /**\n   * Gets the token provided by this credential.\n   *\n   * @param scopes The list of scopes for which the token will have access.\n   * @param options The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  getToken(scopes: string | string[], options?: GetTokenOptions): Promise<AccessToken | null>;\n}\n\n/**\n * Defines options for TokenCredential.getToken.\n */\nexport interface GetTokenOptions extends OperationOptions {}\n\n/**\n * Represents an access token with an expiration time.\n */\nexport interface AccessToken {\n  /**\n   * The access token returned by the authentication service.\n   */\n  token: string;\n\n  /**\n   * The access token's expiration timestamp in milliseconds, UNIX epoch time.\n   */\n  expiresOnTimestamp: number;\n}\n\n/**\n * Tests an object to determine whether it implements TokenCredential.\n *\n * @param credential The assumed TokenCredential to be tested.\n */\nexport function isTokenCredential(credential: any): credential is TokenCredential {\n  // Check for an object with a 'getToken' function and possibly with\n  // a 'signRequest' function.  We do this check to make sure that\n  // a ServiceClientCredentials implementor (like TokenClientCredentials\n  // in ms-rest-nodeauth) doesn't get mistaken for a TokenCredential if\n  // it doesn't actually implement TokenCredential also.\n  return (\n    credential &&\n    typeof credential.getToken === \"function\" &&\n    (credential.signRequest === undefined || credential.getToken.length > 0)\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { HttpPipelineLogger } from \"../httpPipelineLogger\";\nimport { HttpPipelineLogLevel } from \"../httpPipelineLogLevel\";\nimport { WebResource } from \"../webResource\";\n\n/**\n * Creates a new RequestPolicy per-request that uses the provided nextPolicy.\n */\nexport type RequestPolicyFactory = {\n  create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): RequestPolicy;\n};\n\nexport interface RequestPolicy {\n  sendRequest(httpRequest: WebResource): Promise<HttpOperationResponse>;\n}\n\nexport abstract class BaseRequestPolicy implements RequestPolicy {\n  protected constructor(\n    readonly _nextPolicy: RequestPolicy,\n    readonly _options: RequestPolicyOptions\n  ) {}\n\n  public abstract sendRequest(webResource: WebResource): Promise<HttpOperationResponse>;\n\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  public shouldLog(logLevel: HttpPipelineLogLevel): boolean {\n    return this._options.shouldLog(logLevel);\n  }\n\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meat the logger's threshold, then nothing will be logged.\n   * @param logLevel The log level of this log.\n   * @param message The message of this log.\n   */\n  public log(logLevel: HttpPipelineLogLevel, message: string): void {\n    this._options.log(logLevel, message);\n  }\n}\n\n/**\n * Optional properties that can be used when creating a RequestPolicy.\n */\nexport class RequestPolicyOptions {\n  constructor(private _logger?: HttpPipelineLogger) {}\n\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  public shouldLog(logLevel: HttpPipelineLogLevel): boolean {\n    return (\n      !!this._logger &&\n      logLevel !== HttpPipelineLogLevel.OFF &&\n      logLevel <= this._logger.minimumLogLevel\n    );\n  }\n\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meat the logger's threshold, then nothing will be logged.\n   * @param logLevel The log level of this log.\n   * @param message The message of this log.\n   */\n  public log(logLevel: HttpPipelineLogLevel, message: string): void {\n    if (this._logger && this.shouldLog(logLevel)) {\n      this._logger.log(logLevel, message);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst logFunction = console.debug || console.log;\nexport function log(...args: any[]) {\n  logFunction(...args);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { log } from \"./log\";\n\n/**\n * A simple mechanism for enabling logging.\n * Intended to mimic the publicly available `debug` package.\n */\nexport interface Debug {\n  /**\n   * Creates a new logger with the given namespace.\n   */\n  (namespace: string): Debugger;\n  /**\n   * The default log method (defaults to console)\n   */\n  log: (...args: any[]) => void;\n  /**\n   * Enables a particular set of namespaces.\n   * To enable multiple separate them with commas, e.g. \"info,debug\".\n   * Supports wildcards, e.g. \"azure:*\"\n   * Supports skip syntax, e.g. \"azure:*,-azure:storage:*\" will enable\n   * everything under azure except for things under azure:storage.\n   */\n  enable: (namespaces: string) => void;\n  /**\n   * Checks if a particular namespace is enabled.\n   */\n  enabled: (namespace: string) => boolean;\n  /**\n   * Disables all logging, returns what was previously enabled.\n   */\n  disable: () => string;\n}\n\n/**\n * A log function that can be dynamically enabled and redirected.\n */\nexport interface Debugger {\n  /**\n   * Logs the given arguments to the `log` method.\n   */\n  (...args: any[]): void;\n  /**\n   * True if this logger is active and logging.\n   */\n  enabled: boolean;\n  /**\n   * Used to cleanup/remove this logger.\n   */\n  destroy: () => boolean;\n  /**\n   * The current log method. Can be overridden to redirect output.\n   */\n  log: (...args: any[]) => void;\n  /**\n   * The namespace of this logger.\n   */\n  namespace: string;\n  /**\n   * Extends this logger with a child namespace.\n   * Namespaces are separated with a ':' character.\n   */\n  extend: (namespace: string) => Debugger;\n}\n\nconst debugEnvVariable =\n  (typeof process !== \"undefined\" && process.env && process.env.DEBUG) || undefined;\n\nlet enabledString: string | undefined;\nlet enabledNamespaces: RegExp[] = [];\nlet skippedNamespaces: RegExp[] = [];\nconst debuggers: Debugger[] = [];\n\nif (debugEnvVariable) {\n  enable(debugEnvVariable);\n}\n\nfunction enable(namespaces: string): void {\n  enabledString = namespaces;\n  enabledNamespaces = [];\n  skippedNamespaces = [];\n  const wildcard = /\\*/g;\n  const namespaceList = namespaces.split(\",\").map((ns) => ns.trim().replace(wildcard, \".*?\"));\n  for (const ns of namespaceList) {\n    if (ns.startsWith(\"-\")) {\n      skippedNamespaces.push(new RegExp(`^${ns.substr(1)}$`));\n    } else {\n      enabledNamespaces.push(new RegExp(`^${ns}$`));\n    }\n  }\n  for (const instance of debuggers) {\n    instance.enabled = enabled(instance.namespace);\n  }\n}\n\nfunction enabled(namespace: string): boolean {\n  if (namespace.endsWith(\"*\")) {\n    return true;\n  }\n\n  for (const skipped of skippedNamespaces) {\n    if (skipped.test(namespace)) {\n      return false;\n    }\n  }\n  for (const enabled of enabledNamespaces) {\n    if (enabled.test(namespace)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction disable(): string {\n  const result = enabledString || \"\";\n  enable(\"\");\n  return result;\n}\n\nfunction createDebugger(namespace: string): Debugger {\n  function debug(...args: any[]) {\n    if (!newDebugger.enabled) {\n      return;\n    }\n    if (args.length > 0) {\n      args[0] = `${namespace} ${args[0]}`;\n    }\n    newDebugger.log(...args);\n  }\n\n  const newDebugger: Debugger = Object.assign(debug, {\n    enabled: enabled(namespace),\n    destroy,\n    log: debugObj.log,\n    namespace,\n    extend\n  });\n\n  debuggers.push(newDebugger);\n\n  return newDebugger;\n}\n\nfunction destroy(this: Debugger): boolean {\n  const index = debuggers.indexOf(this);\n  if (index >= 0) {\n    debuggers.splice(index, 1);\n    return true;\n  }\n  return false;\n}\n\nfunction extend(this: Debugger, namespace: string): Debugger {\n  const newDebugger = createDebugger(`${this.namespace}:${namespace}`);\n  newDebugger.log = this.log;\n  return newDebugger;\n}\n\nconst debugObj: Debug = Object.assign(\n  (namespace: string): Debugger => {\n    return createDebugger(namespace);\n  },\n  {\n    enable,\n    enabled,\n    disable,\n    log\n  }\n);\n\nexport default debugObj;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport debug, { Debugger } from \"./debug\";\nexport { Debugger } from \"./debug\";\n\nconst registeredLoggers = new Set<AzureDebugger>();\nconst logLevelFromEnv =\n  (typeof process !== \"undefined\" && process.env && process.env.AZURE_LOG_LEVEL) || undefined;\n\nlet azureLogLevel: AzureLogLevel | undefined;\n\n/**\n * The AzureLogger provides a mechanism for overriding where logs are output to.\n * By default, logs are sent to stderr.\n * Override the `log` method to redirect logs to another location.\n */\nexport const AzureLogger: AzureClientLogger = debug(\"azure\");\nAzureLogger.log = (...args) => {\n  debug.log(...args);\n};\n\n/**\n * The log levels supported by the logger.\n * The log levels in order of most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */\nexport type AzureLogLevel = \"verbose\" | \"info\" | \"warning\" | \"error\";\nconst AZURE_LOG_LEVELS = [\"verbose\", \"info\", \"warning\", \"error\"];\n\ntype AzureDebugger = Debugger & { level: AzureLogLevel };\n\n/**\n * An AzureClientLogger is a function that can log to an appropriate severity level.\n */\nexport type AzureClientLogger = Debugger;\n\nif (logLevelFromEnv) {\n  // avoid calling setLogLevel because we don't want a mis-set environment variable to crash\n  if (isAzureLogLevel(logLevelFromEnv)) {\n    setLogLevel(logLevelFromEnv);\n  } else {\n    console.error(\n      `AZURE_LOG_LEVEL set to unknown log level '${logLevelFromEnv}'; logging is not enabled. Acceptable values: ${AZURE_LOG_LEVELS.join(\n        \", \"\n      )}.`\n    );\n  }\n}\n\n/**\n * Immediately enables logging at the specified log level.\n * @param level The log level to enable for logging.\n * Options from most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */\nexport function setLogLevel(level?: AzureLogLevel) {\n  if (level && !isAzureLogLevel(level)) {\n    throw new Error(\n      `Unknown log level '${level}'. Acceptable values: ${AZURE_LOG_LEVELS.join(\",\")}`\n    );\n  }\n  azureLogLevel = level;\n\n  const enabledNamespaces = [];\n  for (const logger of registeredLoggers) {\n    if (shouldEnable(logger)) {\n      enabledNamespaces.push(logger.namespace);\n    }\n  }\n\n  debug.enable(enabledNamespaces.join(\",\"));\n}\n\n/**\n * Retrieves the currently specified log level.\n */\nexport function getLogLevel() {\n  return azureLogLevel;\n}\n\nconst levelMap = {\n  verbose: 400,\n  info: 300,\n  warning: 200,\n  error: 100\n};\n\n/**\n * Defines the methods available on the SDK-facing logger.\n */\nexport interface AzureLogger {\n  /**\n   * Used for failures the program is unlikely to recover from,\n   * such as Out of Memory.\n   */\n  error: Debugger;\n  /**\n   * Used when a function fails to perform its intended task.\n   * Usually this means the function will throw an exception.\n   * Not used for self-healing events (e.g. automatic retry)\n   */\n  warning: Debugger;\n  /**\n   * Used when a function operates normally.\n   */\n  info: Debugger;\n  /**\n   * Used for detailed trbouleshooting scenarios. This is\n   * intended for use by developers / system administrators\n   * for diagnosing specific failures.\n   */\n  verbose: Debugger;\n}\n\n/**\n * Creates a logger for use by the Azure SDKs that inherits from `AzureLogger`.\n * @param namespace The name of the SDK package.\n * @ignore\n */\nexport function createClientLogger(namespace: string): AzureLogger {\n  const clientRootLogger: AzureClientLogger = AzureLogger.extend(namespace);\n  patchLogMethod(AzureLogger, clientRootLogger);\n  return {\n    error: createLogger(clientRootLogger, \"error\"),\n    warning: createLogger(clientRootLogger, \"warning\"),\n    info: createLogger(clientRootLogger, \"info\"),\n    verbose: createLogger(clientRootLogger, \"verbose\")\n  };\n}\n\nfunction patchLogMethod(parent: AzureClientLogger, child: AzureClientLogger | AzureDebugger): void {\n  child.log = (...args) => {\n    parent.log(...args);\n  };\n}\n\nfunction createLogger(parent: AzureClientLogger, level: AzureLogLevel): AzureDebugger {\n  const logger: AzureDebugger = Object.assign(parent.extend(level), {\n    level\n  });\n\n  patchLogMethod(parent, logger);\n\n  if (shouldEnable(logger)) {\n    const enabledNamespaces = debug.disable();\n    debug.enable(enabledNamespaces + \",\" + logger.namespace);\n  }\n\n  registeredLoggers.add(logger);\n\n  return logger;\n}\n\nfunction shouldEnable(logger: AzureDebugger) {\n  if (azureLogLevel && levelMap[logger.level] <= levelMap[azureLogLevel]) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction isAzureLogLevel(logLevel: string): logLevel is AzureLogLevel {\n  return AZURE_LOG_LEVELS.includes(logLevel as any);\n}\n","import { createClientLogger } from \"@azure/logger\";\nexport const logger = createClientLogger(\"core-http\");\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResource } from \"../webResource\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"./requestPolicy\";\nimport { Debugger } from \"@azure/logger\";\nimport { logger as coreLogger } from \"../log\";\nimport { Sanitizer } from \"../util/sanitizer\";\n\nexport interface LogPolicyOptions {\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   */\n  allowedHeaderNames?: string[];\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   */\n  allowedQueryParameters?: string[];\n\n  /**\n   * The Debugger (logger) instance to use for writing pipeline logs.\n   */\n  logger?: Debugger;\n}\n\nexport function logPolicy(loggingOptions: LogPolicyOptions = {}): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new LogPolicy(nextPolicy, options, loggingOptions);\n    }\n  };\n}\n\nexport class LogPolicy extends BaseRequestPolicy {\n  logger: Debugger;\n  sanitizer: Sanitizer;\n\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   * @deprecated Pass these into the constructor instead.\n   */\n  public get allowedHeaderNames(): Set<string> {\n    return this.sanitizer.allowedHeaderNames;\n  }\n\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   * @deprecated Pass these into the constructor instead.\n   */\n  public set allowedHeaderNames(allowedHeaderNames: Set<string>) {\n    this.sanitizer.allowedHeaderNames = allowedHeaderNames;\n  }\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   * @deprecated Pass these into the constructor instead.\n   */\n  public get allowedQueryParameters(): Set<string> {\n    return this.sanitizer.allowedQueryParameters;\n  }\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   * @deprecated Pass these into the constructor instead.\n   */\n  public set allowedQueryParameters(allowedQueryParameters: Set<string>) {\n    this.sanitizer.allowedQueryParameters = allowedQueryParameters;\n  }\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    {\n      logger = coreLogger.info,\n      allowedHeaderNames = [],\n      allowedQueryParameters = []\n    }: LogPolicyOptions = {}\n  ) {\n    super(nextPolicy, options);\n    this.logger = logger;\n    this.sanitizer = new Sanitizer({ allowedHeaderNames, allowedQueryParameters });\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (!this.logger.enabled) return this._nextPolicy.sendRequest(request);\n\n    this.logRequest(request);\n    return this._nextPolicy.sendRequest(request).then((response) => this.logResponse(response));\n  }\n\n  private logRequest(request: WebResource) {\n    this.logger(`Request: ${this.sanitizer.sanitize(request)}`);\n  }\n\n  private logResponse(response: HttpOperationResponse): HttpOperationResponse {\n    this.logger(`Response status code: ${response.status}`);\n    this.logger(`Headers: ${this.sanitizer.sanitize(response.headers)}`);\n    return response;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { QueryCollectionFormat } from \"./queryCollectionFormat\";\nimport { Mapper } from \"./serializer\";\n\nexport type ParameterPath = string | string[] | { [propertyName: string]: ParameterPath };\n\n/**\n * A common interface that all Operation parameter's extend.\n */\nexport interface OperationParameter {\n  /**\n   * The path to this parameter's value in OperationArguments or the object that contains paths for\n   * each property's value in OperationArguments.\n   */\n  parameterPath: ParameterPath;\n\n  /**\n   * The mapper that defines how to validate and serialize this parameter's value.\n   */\n  mapper: Mapper;\n}\n\n/**\n * A parameter for an operation that will be substituted into the operation's request URL.\n */\nexport interface OperationURLParameter extends OperationParameter {\n  /**\n   * Whether or not to skip encoding the URL parameter's value before adding it to the URL.\n   */\n  skipEncoding?: boolean;\n}\n\n/**\n * A parameter for an operation that will be added as a query parameter to the operation's HTTP\n * request.\n */\nexport interface OperationQueryParameter extends OperationParameter {\n  /**\n   * Whether or not to skip encoding the query parameter's value before adding it to the URL.\n   */\n  skipEncoding?: boolean;\n\n  /**\n   * If this query parameter's value is a collection, what type of format should the value be\n   * converted to.\n   */\n  collectionFormat?: QueryCollectionFormat;\n}\n\n/**\n * Get the path to this parameter's value as a dotted string (a.b.c).\n * @param parameter The parameter to get the path string for.\n * @returns The path to this parameter's value as a dotted string.\n */\nexport function getPathStringFromParameter(parameter: OperationParameter): string {\n  return getPathStringFromParameterPath(parameter.parameterPath, parameter.mapper);\n}\n\nexport function getPathStringFromParameterPath(\n  parameterPath: ParameterPath,\n  mapper: Mapper\n): string {\n  let result: string;\n  if (typeof parameterPath === \"string\") {\n    result = parameterPath;\n  } else if (Array.isArray(parameterPath)) {\n    result = parameterPath.join(\".\");\n  } else {\n    result = mapper.serializedName!;\n  }\n  return result;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport {\n  OperationParameter,\n  OperationQueryParameter,\n  OperationURLParameter\n} from \"./operationParameter\";\nimport { OperationResponse } from \"./operationResponse\";\nimport { MapperType, Serializer } from \"./serializer\";\nimport { HttpMethods } from \"./webResource\";\n\n/**\n * A specification that defines an operation.\n */\nexport interface OperationSpec {\n  /**\n   * The serializer to use in this operation.\n   */\n  readonly serializer: Serializer;\n\n  /**\n   * The HTTP method that should be used by requests for this operation.\n   */\n  readonly httpMethod: HttpMethods;\n\n  /**\n   * The URL that was provided in the service's specification. This will still have all of the URL\n   * template variables in it. If this is not provided when the OperationSpec is created, then it\n   * will be populated by a \"baseUri\" property on the ServiceClient.\n   */\n  readonly baseUrl?: string;\n\n  /**\n   * The fixed path for this operation's URL. This will still have all of the URL template variables\n   * in it.\n   */\n  readonly path?: string;\n\n  /**\n   * The content type of the request body. This value will be used as the \"Content-Type\" header if\n   * it is provided.\n   */\n  readonly contentType?: string;\n\n  /**\n   * The parameter that will be used to construct the HTTP request's body.\n   */\n  readonly requestBody?: OperationParameter;\n\n  /**\n   * Whether or not this operation uses XML request and response bodies.\n   */\n  readonly isXML?: boolean;\n\n  /**\n   * The parameters to the operation method that will be substituted into the constructed URL.\n   */\n  readonly urlParameters?: ReadonlyArray<OperationURLParameter>;\n\n  /**\n   * The parameters to the operation method that will be added to the constructed URL's query.\n   */\n  readonly queryParameters?: ReadonlyArray<OperationQueryParameter>;\n\n  /**\n   * The parameters to the operation method that will be converted to headers on the operation's\n   * HTTP request.\n   */\n  readonly headerParameters?: ReadonlyArray<OperationParameter>;\n\n  /**\n   * The parameters to the operation method that will be used to create a formdata body for the\n   * operation's HTTP request.\n   */\n  readonly formDataParameters?: ReadonlyArray<OperationParameter>;\n\n  /**\n   * The different types of responses that this operation can return based on what status code is\n   * returned.\n   */\n  readonly responses: { [responseCode: string]: OperationResponse };\n}\n\nexport function isStreamOperation(operationSpec: OperationSpec): boolean {\n  let result = false;\n  for (const statusCode in operationSpec.responses) {\n    const operationResponse: OperationResponse = operationSpec.responses[statusCode];\n    if (\n      operationResponse.bodyMapper &&\n      operationResponse.bodyMapper.type.name === MapperType.Stream\n    ) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n// tslint:disable-next-line:no-null-keyword\nconst doc = document.implementation.createDocument(null, null, null);\n\nconst parser = new DOMParser();\nexport function parseXML(str: string, opts?: { includeRoot?: boolean }): Promise<any> {\n  try {\n    const dom = parser.parseFromString(str, \"application/xml\");\n    throwIfError(dom);\n\n    let obj;\n    if (opts && opts.includeRoot) {\n      obj = domToObject(dom);\n    } else {\n      obj = domToObject(dom.childNodes[0]);\n    }\n\n    return Promise.resolve(obj);\n  } catch (err) {\n    return Promise.reject(err);\n  }\n}\n\nlet errorNS = \"\";\ntry {\n  errorNS = parser.parseFromString(\"INVALID\", \"text/xml\").getElementsByTagName(\"parsererror\")[0]\n    .namespaceURI!;\n} catch (ignored) {\n  // Most browsers will return a document containing <parsererror>, but IE will throw.\n}\n\nfunction throwIfError(dom: Document) {\n  if (errorNS) {\n    const parserErrors = dom.getElementsByTagNameNS(errorNS, \"parsererror\");\n    if (parserErrors.length) {\n      throw new Error(parserErrors.item(0)!.innerHTML);\n    }\n  }\n}\n\nfunction isElement(node: Node): node is Element {\n  return !!(node as Element).attributes;\n}\n\n/**\n * Get the Element-typed version of the provided Node if the provided node is an element with\n * attributes. If it isn't, then undefined is returned.\n */\nfunction asElementWithAttributes(node: Node): Element | undefined {\n  return isElement(node) && node.hasAttributes() ? node : undefined;\n}\n\nfunction domToObject(node: Node): any {\n  let result: any = {};\n\n  const childNodeCount: number = node.childNodes.length;\n\n  const firstChildNode: Node = node.childNodes[0];\n  const onlyChildTextValue: string | undefined =\n    (firstChildNode &&\n      childNodeCount === 1 &&\n      firstChildNode.nodeType === Node.TEXT_NODE &&\n      firstChildNode.nodeValue) ||\n    undefined;\n\n  const elementWithAttributes: Element | undefined = asElementWithAttributes(node);\n  if (elementWithAttributes) {\n    result[\"$\"] = {};\n\n    for (let i = 0; i < elementWithAttributes.attributes.length; i++) {\n      const attr = elementWithAttributes.attributes[i];\n      result[\"$\"][attr.nodeName] = attr.nodeValue;\n    }\n\n    if (onlyChildTextValue) {\n      result[\"_\"] = onlyChildTextValue;\n    }\n  } else if (childNodeCount === 0) {\n    result = \"\";\n  } else if (onlyChildTextValue) {\n    result = onlyChildTextValue;\n  }\n\n  if (!onlyChildTextValue) {\n    for (let i = 0; i < childNodeCount; i++) {\n      const child = node.childNodes[i];\n      // Ignore leading/trailing whitespace nodes\n      if (child.nodeType !== Node.TEXT_NODE) {\n        const childObject: any = domToObject(child);\n        if (!result[child.nodeName]) {\n          result[child.nodeName] = childObject;\n        } else if (Array.isArray(result[child.nodeName])) {\n          result[child.nodeName].push(childObject);\n        } else {\n          result[child.nodeName] = [result[child.nodeName], childObject];\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\nconst serializer = new XMLSerializer();\n\nexport function stringifyXML(content: any, opts?: { rootName?: string }): string {\n  const rootName = (opts && opts.rootName) || \"root\";\n  const dom = buildNode(content, rootName)[0];\n  return (\n    '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + serializer.serializeToString(dom)\n  );\n}\n\nfunction buildAttributes(attrs: { [key: string]: { toString(): string } }): Attr[] {\n  const result = [];\n  for (const key of Object.keys(attrs)) {\n    const attr = doc.createAttribute(key);\n    attr.value = attrs[key].toString();\n    result.push(attr);\n  }\n  return result;\n}\n\nfunction buildNode(obj: any, elementName: string): Node[] {\n  if (\n    obj == undefined ||\n    typeof obj === \"string\" ||\n    typeof obj === \"number\" ||\n    typeof obj === \"boolean\"\n  ) {\n    const elem = doc.createElement(elementName);\n    elem.textContent = obj == undefined ? \"\" : obj.toString();\n    return [elem];\n  } else if (Array.isArray(obj)) {\n    const result = [];\n    for (const arrayElem of obj) {\n      for (const child of buildNode(arrayElem, elementName)) {\n        result.push(child);\n      }\n    }\n    return result;\n  } else if (typeof obj === \"object\") {\n    const elem = doc.createElement(elementName);\n    for (const key of Object.keys(obj)) {\n      if (key === \"$\") {\n        for (const attr of buildAttributes(obj[key])) {\n          elem.attributes.setNamedItem(attr);\n        }\n      } else if (key === \"_\") {\n        elem.textContent = obj[key].toString();\n      } else {\n        for (const child of buildNode(obj[key], key)) {\n          elem.appendChild(child);\n        }\n      }\n    }\n    return [elem];\n  } else {\n    throw new Error(`Illegal value passed to buildObject: ${obj}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { OperationResponse } from \"../operationResponse\";\nimport { OperationSpec, isStreamOperation } from \"../operationSpec\";\nimport { RestError } from \"../restError\";\nimport { MapperType } from \"../serializer\";\nimport { parseXML } from \"../util/xml\";\nimport { WebResource } from \"../webResource\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"./requestPolicy\";\n\n/**\n * Options to configure API response deserialization.\n */\nexport interface DeserializationOptions {\n  /**\n   * Configures the expected content types for the deserialization of\n   * JSON and XML response bodies.\n   */\n  expectedContentTypes: DeserializationContentTypes;\n}\n\n/**\n * The content-types that will indicate that an operation response should be deserialized in a\n * particular way.\n */\nexport interface DeserializationContentTypes {\n  /**\n   * The content-types that indicate that an operation response should be deserialized as JSON.\n   * Defaults to [ \"application/json\", \"text/json\" ].\n   */\n  json?: string[];\n\n  /**\n   * The content-types that indicate that an operation response should be deserialized as XML.\n   * Defaults to [ \"application/xml\", \"application/atom+xml\" ].\n   */\n  xml?: string[];\n}\n\n/**\n * Create a new serialization RequestPolicyCreator that will serialized HTTP request bodies as they\n * pass through the HTTP pipeline.\n */\nexport function deserializationPolicy(\n  deserializationContentTypes?: DeserializationContentTypes\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new DeserializationPolicy(nextPolicy, deserializationContentTypes, options);\n    }\n  };\n}\n\nexport const defaultJsonContentTypes = [\"application/json\", \"text/json\", \"text/plain\"];\nexport const defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\n\nexport const DefaultDeserializationOptions: DeserializationOptions = {\n  expectedContentTypes: {\n    json: defaultJsonContentTypes,\n    xml: defaultXmlContentTypes\n  }\n};\n\n/**\n * A RequestPolicy that will deserialize HTTP response bodies and headers as they pass through the\n * HTTP pipeline.\n */\nexport class DeserializationPolicy extends BaseRequestPolicy {\n  public readonly jsonContentTypes: string[];\n  public readonly xmlContentTypes: string[];\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    deserializationContentTypes: DeserializationContentTypes | undefined,\n    options: RequestPolicyOptions\n  ) {\n    super(nextPolicy, options);\n\n    this.jsonContentTypes =\n      (deserializationContentTypes && deserializationContentTypes.json) || defaultJsonContentTypes;\n    this.xmlContentTypes =\n      (deserializationContentTypes && deserializationContentTypes.xml) || defaultXmlContentTypes;\n  }\n\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request)\n      .then((response: HttpOperationResponse) =>\n        deserializeResponseBody(this.jsonContentTypes, this.xmlContentTypes, response)\n      );\n  }\n}\n\nfunction getOperationResponse(\n  parsedResponse: HttpOperationResponse\n): undefined | OperationResponse {\n  let result: OperationResponse | undefined;\n  const request: WebResource = parsedResponse.request;\n  const operationSpec: OperationSpec | undefined = request.operationSpec;\n  if (operationSpec) {\n    const operationResponseGetter:\n      | undefined\n      | ((\n          operationSpec: OperationSpec,\n          response: HttpOperationResponse\n        ) => undefined | OperationResponse) = request.operationResponseGetter;\n    if (!operationResponseGetter) {\n      result = operationSpec.responses[parsedResponse.status];\n    } else {\n      result = operationResponseGetter(operationSpec, parsedResponse);\n    }\n  }\n  return result;\n}\n\nfunction shouldDeserializeResponse(parsedResponse: HttpOperationResponse): boolean {\n  const shouldDeserialize: undefined | boolean | ((response: HttpOperationResponse) => boolean) =\n    parsedResponse.request.shouldDeserialize;\n  let result: boolean;\n  if (shouldDeserialize === undefined) {\n    result = true;\n  } else if (typeof shouldDeserialize === \"boolean\") {\n    result = shouldDeserialize;\n  } else {\n    result = shouldDeserialize(parsedResponse);\n  }\n  return result;\n}\n\nexport function deserializeResponseBody(\n  jsonContentTypes: string[],\n  xmlContentTypes: string[],\n  response: HttpOperationResponse\n): Promise<HttpOperationResponse> {\n  return parse(jsonContentTypes, xmlContentTypes, response).then((parsedResponse) => {\n    if (!shouldDeserializeResponse(parsedResponse)) {\n      return parsedResponse;\n    }\n\n    const operationSpec = parsedResponse.request.operationSpec;\n    if (!operationSpec || !operationSpec.responses) {\n      return parsedResponse;\n    }\n\n    const responseSpec = getOperationResponse(parsedResponse);\n    const expectedStatusCodes = Object.keys(operationSpec.responses);\n    const hasNoExpectedStatusCodes =\n      expectedStatusCodes.length === 0 ||\n      (expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\");\n    const isExpectedStatusCode: boolean = hasNoExpectedStatusCodes\n      ? 200 <= parsedResponse.status && parsedResponse.status < 300\n      : !!responseSpec;\n\n    // There is no operation response spec for current status code.\n    // So, treat it as an error case and use the default response spec to deserialize the response.\n    if (!isExpectedStatusCode) {\n      const defaultResponseSpec = operationSpec.responses.default;\n      if (!defaultResponseSpec) {\n        return parsedResponse;\n      }\n\n      const defaultBodyMapper = defaultResponseSpec.bodyMapper;\n      const defaultHeadersMapper = defaultResponseSpec.headersMapper;\n\n      const initialErrorMessage = isStreamOperation(operationSpec)\n        ? `Unexpected status code: ${parsedResponse.status}`\n        : (parsedResponse.bodyAsText as string);\n\n      const error = new RestError(\n        initialErrorMessage,\n        undefined,\n        parsedResponse.status,\n        parsedResponse.request,\n        parsedResponse\n      );\n\n      try {\n        // If error response has a body, try to extract error code & message from it\n        // Then try to deserialize it using default body mapper\n        if (parsedResponse.parsedBody) {\n          const parsedBody = parsedResponse.parsedBody;\n          const internalError: any = parsedBody.error || parsedBody;\n          error.code = internalError.code;\n          if (internalError.message) {\n            error.message = internalError.message;\n          }\n\n          if (defaultBodyMapper) {\n            let valueToDeserialize: any = parsedBody;\n            if (operationSpec.isXML && defaultBodyMapper.type.name === MapperType.Sequence) {\n              valueToDeserialize =\n                typeof parsedBody === \"object\" ? parsedBody[defaultBodyMapper.xmlElementName!] : [];\n            }\n            error.response!.parsedBody = operationSpec.serializer.deserialize(\n              defaultBodyMapper,\n              valueToDeserialize,\n              \"error.response.parsedBody\"\n            );\n          }\n        }\n\n        // If error response has headers, try to deserialize it using default header mapper\n        if (parsedResponse.headers && defaultHeadersMapper) {\n          error.response!.parsedHeaders = operationSpec.serializer.deserialize(\n            defaultHeadersMapper,\n            parsedResponse.headers.rawHeaders(),\n            \"operationRes.parsedHeaders\"\n          );\n        }\n      } catch (defaultError) {\n        error.message = `Error \\\"${defaultError.message}\\\" occurred in deserializing the responseBody - \\\"${parsedResponse.bodyAsText}\\\" for the default response.`;\n      }\n      return Promise.reject(error);\n    }\n\n    // An operation response spec does exist for current status code, so\n    // use it to deserialize the response.\n    if (responseSpec) {\n      if (responseSpec.bodyMapper) {\n        let valueToDeserialize: any = parsedResponse.parsedBody;\n        if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperType.Sequence) {\n          valueToDeserialize =\n            typeof valueToDeserialize === \"object\"\n              ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName!]\n              : [];\n        }\n        try {\n          parsedResponse.parsedBody = operationSpec.serializer.deserialize(\n            responseSpec.bodyMapper,\n            valueToDeserialize,\n            \"operationRes.parsedBody\"\n          );\n        } catch (error) {\n          const restError = new RestError(\n            `Error ${error} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`,\n            undefined,\n            parsedResponse.status,\n            parsedResponse.request,\n            parsedResponse\n          );\n          return Promise.reject(restError);\n        }\n      } else if (operationSpec.httpMethod === \"HEAD\") {\n        // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n        parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n      }\n\n      if (responseSpec.headersMapper) {\n        parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(\n          responseSpec.headersMapper,\n          parsedResponse.headers.rawHeaders(),\n          \"operationRes.parsedHeaders\"\n        );\n      }\n    }\n\n    return parsedResponse;\n  });\n}\n\nfunction parse(\n  jsonContentTypes: string[],\n  xmlContentTypes: string[],\n  operationResponse: HttpOperationResponse\n): Promise<HttpOperationResponse> {\n  const errorHandler = (err: Error & { code: string }) => {\n    const msg = `Error \"${err}\" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;\n    const errCode = err.code || RestError.PARSE_ERROR;\n    const e = new RestError(\n      msg,\n      errCode,\n      operationResponse.status,\n      operationResponse.request,\n      operationResponse\n    );\n    return Promise.reject(e);\n  };\n\n  if (!operationResponse.request.streamResponseBody && operationResponse.bodyAsText) {\n    const text = operationResponse.bodyAsText;\n    const contentType: string = operationResponse.headers.get(\"Content-Type\") || \"\";\n    const contentComponents: string[] = !contentType\n      ? []\n      : contentType.split(\";\").map((component) => component.toLowerCase());\n    if (\n      contentComponents.length === 0 ||\n      contentComponents.some((component) => jsonContentTypes.indexOf(component) !== -1)\n    ) {\n      return new Promise<HttpOperationResponse>((resolve) => {\n        operationResponse.parsedBody = JSON.parse(text);\n        resolve(operationResponse);\n      }).catch(errorHandler);\n    } else if (contentComponents.some((component) => xmlContentTypes.indexOf(component) !== -1)) {\n      return parseXML(text)\n        .then((body) => {\n          operationResponse.parsedBody = body;\n          return operationResponse;\n        })\n        .catch(errorHandler);\n    }\n  }\n\n  return Promise.resolve(operationResponse);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport * as utils from \"../util/utils\";\nimport { WebResource } from \"../webResource\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"./requestPolicy\";\nimport { RestError } from \"../restError\";\nimport { logger } from \"../log\";\n\nexport interface RetryData {\n  retryCount: number;\n  retryInterval: number;\n  error?: RetryError;\n}\n\nexport interface RetryError extends Error {\n  message: string;\n  code?: string;\n  innerError?: RetryError;\n}\n\nexport function exponentialRetryPolicy(\n  retryCount?: number,\n  retryInterval?: number,\n  maxRetryInterval?: number\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new ExponentialRetryPolicy(\n        nextPolicy,\n        options,\n        retryCount,\n        retryInterval,\n        maxRetryInterval\n      );\n    }\n  };\n}\n\nconst DEFAULT_CLIENT_RETRY_INTERVAL = 1000 * 30;\nconst DEFAULT_CLIENT_RETRY_COUNT = 3;\nconst DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 90;\n\n/**\n * Describes the Retry Mode type. Currently supporting only Exponential.\n * @enum RetryMode\n */\nexport enum RetryMode {\n  Exponential\n}\n\n/**\n * Options that control how to retry failed requests.\n */\nexport interface RetryOptions {\n  /**\n   * The maximum number of retry attempts.  Defaults to 3.\n   */\n  maxRetries?: number;\n\n  /**\n   * The amount of delay in milliseconds between retry attempts. Defaults to 30000\n   * (30 seconds). The delay increases exponentially with each retry up to a maximum\n   * specified by maxRetryDelayInMs.\n   */\n  retryDelayInMs?: number;\n\n  /**\n   * The maximum delay in milliseconds allowed before retrying an operation. Defaults\n   * to 90000 (90 seconds).\n   */\n  maxRetryDelayInMs?: number;\n\n  /**\n   * Currently supporting only Exponential mode.\n   */\n  mode?: RetryMode;\n}\n\nexport const DefaultRetryOptions: RetryOptions = {\n  maxRetries: DEFAULT_CLIENT_RETRY_COUNT,\n  retryDelayInMs: DEFAULT_CLIENT_RETRY_INTERVAL,\n  maxRetryDelayInMs: DEFAULT_CLIENT_MAX_RETRY_INTERVAL\n}\n\n/**\n * @class\n * Instantiates a new \"ExponentialRetryPolicyFilter\" instance.\n */\nexport class ExponentialRetryPolicy extends BaseRequestPolicy {\n  /**\n   * The client retry count.\n   */\n  retryCount: number;\n  /**\n   * The client retry interval in milliseconds.\n   */\n  retryInterval: number;\n  /**\n   * The maximum retry interval in milliseconds.\n   */\n  maxRetryInterval: number;\n\n  /**\n   * @constructor\n   * @param {RequestPolicy} nextPolicy The next RequestPolicy in the pipeline chain.\n   * @param {RequestPolicyOptions} options The options for this RequestPolicy.\n   * @param {number} [retryCount]        The client retry count.\n   * @param {number} [retryInterval]     The client retry interval, in milliseconds.\n   * @param {number} [minRetryInterval]  The minimum retry interval, in milliseconds.\n   * @param {number} [maxRetryInterval]  The maximum retry interval, in milliseconds.\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    retryCount?: number,\n    retryInterval?: number,\n    maxRetryInterval?: number\n  ) {\n    super(nextPolicy, options);\n    function isNumber(n: any): n is number {\n      return typeof n === \"number\";\n    }\n    this.retryCount = isNumber(retryCount) ? retryCount : DEFAULT_CLIENT_RETRY_COUNT;\n    this.retryInterval = isNumber(retryInterval) ? retryInterval : DEFAULT_CLIENT_RETRY_INTERVAL;\n    this.maxRetryInterval = isNumber(maxRetryInterval)\n      ? maxRetryInterval\n      : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request.clone())\n      .then((response) => retry(this, request, response))\n      .catch((error) => retry(this, request, error.response, undefined, error));\n  }\n}\n\n/**\n * Determines if the operation should be retried and how long to wait until the next retry.\n *\n * @param {ExponentialRetryPolicy} policy The ExponentialRetryPolicy that this function is being called against.\n * @param {number} statusCode The HTTP status code.\n * @param {RetryData} retryData  The retry data.\n * @return {boolean} True if the operation qualifies for a retry; false otherwise.\n */\nfunction shouldRetry(\n  policy: ExponentialRetryPolicy,\n  statusCode: number | undefined,\n  retryData: RetryData\n): boolean {\n  if (\n    statusCode == undefined ||\n    (statusCode < 500 && statusCode !== 408) ||\n    statusCode === 501 ||\n    statusCode === 505\n  ) {\n    return false;\n  }\n\n  let currentCount: number;\n  if (!retryData) {\n    throw new Error(\"retryData for the ExponentialRetryPolicyFilter cannot be null.\");\n  } else {\n    currentCount = retryData && retryData.retryCount;\n  }\n\n  return currentCount < policy.retryCount;\n}\n\n/**\n * Updates the retry data for the next attempt.\n *\n * @param {ExponentialRetryPolicy} policy The ExponentialRetryPolicy that this function is being called against.\n * @param {RetryData} retryData  The retry data.\n * @param {RetryError} [err] The operation\"s error, if any.\n */\nfunction updateRetryData(\n  policy: ExponentialRetryPolicy,\n  retryData?: RetryData,\n  err?: RetryError\n): RetryData {\n  if (!retryData) {\n    retryData = {\n      retryCount: 0,\n      retryInterval: 0\n    };\n  }\n\n  if (err) {\n    if (retryData.error) {\n      err.innerError = retryData.error;\n    }\n\n    retryData.error = err;\n  }\n\n  // Adjust retry count\n  retryData.retryCount++;\n\n  // Adjust retry interval\n  let incrementDelta = Math.pow(2, retryData.retryCount) - 1;\n  const boundedRandDelta =\n    policy.retryInterval * 0.8 +\n    Math.floor(Math.random() * (policy.retryInterval * 1.2 - policy.retryInterval * 0.8));\n  incrementDelta *= boundedRandDelta;\n\n  retryData.retryInterval = Math.min(\n    incrementDelta,\n    policy.maxRetryInterval\n  );\n\n  return retryData;\n}\n\nfunction retry(\n  policy: ExponentialRetryPolicy,\n  request: WebResource,\n  response?: HttpOperationResponse,\n  retryData?: RetryData,\n  requestError?: RetryError\n): Promise<HttpOperationResponse> {\n  retryData = updateRetryData(policy, retryData, requestError);\n  const isAborted: boolean | undefined = request.abortSignal && request.abortSignal.aborted;\n  if (!isAborted && shouldRetry(policy, response && response.status, retryData)) {\n    logger.info(`Retrying request in ${retryData.retryInterval}`);\n    return utils\n      .delay(retryData.retryInterval)\n      .then(() => policy._nextPolicy.sendRequest(request.clone()))\n      .then((res) => retry(policy, request, res, retryData, undefined))\n      .catch((err) => retry(policy, request, response, retryData, err));\n  } else if (isAborted || requestError || !response) {\n    // If the operation failed in the end, return all errors instead of just the last one\n    const err =\n      retryData.error ||\n      new RestError(\n        \"Failed to send the request.\",\n        RestError.REQUEST_SEND_ERROR,\n        response && response.status,\n        response && response.request,\n        response\n      );\n    return Promise.reject(err);\n  } else {\n    return Promise.resolve(response);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResource } from \"../webResource\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"./requestPolicy\";\n\nexport function generateClientRequestIdPolicy(\n  requestIdHeaderName = \"x-ms-client-request-id\"\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new GenerateClientRequestIdPolicy(nextPolicy, options, requestIdHeaderName);\n    }\n  };\n}\n\nexport class GenerateClientRequestIdPolicy extends BaseRequestPolicy {\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    private _requestIdHeaderName: string\n  ) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (!request.headers.contains(this._requestIdHeaderName)) {\n      request.headers.set(this._requestIdHeaderName, request.requestId);\n    }\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/*\n * NOTE: When moving this file, please update \"browser\" section in package.json\n * and \"plugins\" section in webpack.testconfig.ts.\n */\n\nimport { TelemetryInfo } from \"./userAgentPolicy\";\n\ninterface NavigatorEx extends Navigator {\n  // oscpu is not yet standards-compliant, but can not be undefined in TypeScript 3.6.2\n  readonly oscpu: string;\n}\n\nexport function getDefaultUserAgentKey(): string {\n  return \"x-ms-command-name\";\n}\n\nexport function getPlatformSpecificData(): TelemetryInfo[] {\n  const navigator = window.navigator as NavigatorEx;\n  const osInfo = {\n    key: \"OS\",\n    value: (navigator.oscpu || navigator.platform).replace(\" \", \"\")\n  };\n\n  return [osInfo];\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpHeaders } from \"../httpHeaders\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { Constants } from \"../util/constants\";\nimport { WebResource } from \"../webResource\";\nimport { getDefaultUserAgentKey, getPlatformSpecificData } from \"./msRestUserAgentPolicy\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"./requestPolicy\";\n\nexport type TelemetryInfo = { key?: string; value?: string };\n\n/**\n * Options for adding user agent details to outgoing requests.\n */\nexport interface UserAgentOptions {\n  /*\n   * String prefix to add to the user agent for outgoing requests.\n   * Defaults to an empty string.\n   */\n  userAgentPrefix?: string;\n}\n\nfunction getRuntimeInfo(): TelemetryInfo[] {\n  const msRestRuntime = {\n    key: \"core-http\",\n    value: Constants.coreHttpVersion\n  };\n\n  return [msRestRuntime];\n}\n\nfunction getUserAgentString(\n  telemetryInfo: TelemetryInfo[],\n  keySeparator = \" \",\n  valueSeparator = \"/\"\n): string {\n  return telemetryInfo\n    .map((info) => {\n      const value = info.value ? `${valueSeparator}${info.value}` : \"\";\n      return `${info.key}${value}`;\n    })\n    .join(keySeparator);\n}\n\nexport const getDefaultUserAgentHeaderName = getDefaultUserAgentKey;\n\nexport function getDefaultUserAgentValue(): string {\n  const runtimeInfo = getRuntimeInfo();\n  const platformSpecificData = getPlatformSpecificData();\n  const userAgent = getUserAgentString(runtimeInfo.concat(platformSpecificData));\n  return userAgent;\n}\n\nexport function userAgentPolicy(userAgentData?: TelemetryInfo): RequestPolicyFactory {\n  const key: string =\n    !userAgentData || userAgentData.key == undefined ? getDefaultUserAgentKey() : userAgentData.key;\n  const value: string =\n    !userAgentData || userAgentData.value == undefined\n      ? getDefaultUserAgentValue()\n      : userAgentData.value;\n\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new UserAgentPolicy(nextPolicy, options, key, value);\n    }\n  };\n}\n\nexport class UserAgentPolicy extends BaseRequestPolicy {\n  constructor(\n    readonly _nextPolicy: RequestPolicy,\n    readonly _options: RequestPolicyOptions,\n    protected headerKey: string,\n    protected headerValue: string\n  ) {\n    super(_nextPolicy, _options);\n  }\n\n  sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    this.addUserAgentHeader(request);\n    return this._nextPolicy.sendRequest(request);\n  }\n\n  addUserAgentHeader(request: WebResource): void {\n    if (!request.headers) {\n      request.headers = new HttpHeaders();\n    }\n\n    if (!request.headers.get(this.headerKey) && this.headerValue) {\n      request.headers.set(this.headerKey, this.headerValue);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { URLBuilder } from \"../url\";\nimport { WebResource } from \"../webResource\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"./requestPolicy\";\n\n/**\n * Options for how redirect responses are handled.\n */\nexport interface RedirectOptions {\n  /*\n   * When true, redirect responses are followed.  Defaults to true.\n   */\n  handleRedirects: boolean;\n\n  /*\n   * The maximum number of times the redirect URL will be tried before\n   * failing.  Defaults to 20.\n   */\n  maxRetries?: number;\n}\n\nexport const DefaultRedirectOptions: RedirectOptions = {\n  handleRedirects: true,\n  maxRetries: 20\n}\n\nexport function redirectPolicy(maximumRetries = 20): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new RedirectPolicy(nextPolicy, options, maximumRetries);\n    }\n  };\n}\n\nexport class RedirectPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, readonly maxRetries = 20) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request)\n      .then((response) => handleRedirect(this, response, 0));\n  }\n}\n\nfunction handleRedirect(\n  policy: RedirectPolicy,\n  response: HttpOperationResponse,\n  currentRetries: number\n): Promise<HttpOperationResponse> {\n  const { request, status } = response;\n  const locationHeader = response.headers.get(\"location\");\n  if (\n    locationHeader &&\n    (status === 300 || status === 307 || (status === 303 && request.method === \"POST\")) &&\n    (!policy.maxRetries || currentRetries < policy.maxRetries)\n  ) {\n    const builder = URLBuilder.parse(request.url);\n    builder.setPath(locationHeader);\n    request.url = builder.toString();\n\n    // POST request with Status code 303 should be converted into a\n    // redirected GET request if the redirect url is present in the location header\n    if (status === 303) {\n      request.method = \"GET\";\n    }\n\n    return policy._nextPolicy\n      .sendRequest(request)\n      .then((res) => handleRedirect(policy, res, currentRetries + 1));\n  }\n\n  return Promise.resolve(response);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport * as utils from \"../util/utils\";\nimport { WebResource } from \"../webResource\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"./requestPolicy\";\n\nexport function rpRegistrationPolicy(retryTimeout = 30): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);\n    }\n  };\n}\n\nexport class RPRegistrationPolicy extends BaseRequestPolicy {\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    readonly _retryTimeout = 30\n  ) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request.clone())\n      .then((response) => registerIfNeeded(this, request, response));\n  }\n}\n\nfunction registerIfNeeded(\n  policy: RPRegistrationPolicy,\n  request: WebResource,\n  response: HttpOperationResponse\n): Promise<HttpOperationResponse> {\n  if (response.status === 409) {\n    const rpName = checkRPNotRegisteredError(response.bodyAsText as string);\n    if (rpName) {\n      const urlPrefix = extractSubscriptionUrl(request.url);\n      return (\n        registerRP(policy, urlPrefix, rpName, request)\n          // Autoregistration of ${provider} failed for some reason. We will not return this error\n          // instead will return the initial response with 409 status code back to the user.\n          // do nothing here as we are returning the original response at the end of this method.\n          .catch(() => false)\n          .then((registrationStatus) => {\n            if (registrationStatus) {\n              // Retry the original request. We have to change the x-ms-client-request-id\n              // otherwise Azure endpoint will return the initial 409 (cached) response.\n              request.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n              return policy._nextPolicy.sendRequest(request.clone());\n            }\n            return response;\n          })\n      );\n    }\n  }\n\n  return Promise.resolve(response);\n}\n\n/**\n * Reuses the headers of the original request and url (if specified).\n * @param {WebResource} originalRequest The original request\n * @param {boolean} reuseUrlToo Should the url from the original request be reused as well. Default false.\n * @returns {object} A new request object with desired headers.\n */\nfunction getRequestEssentials(originalRequest: WebResource, reuseUrlToo = false): WebResource {\n  const reqOptions: WebResource = originalRequest.clone();\n  if (reuseUrlToo) {\n    reqOptions.url = originalRequest.url;\n  }\n\n  // We have to change the x-ms-client-request-id otherwise Azure endpoint\n  // will return the initial 409 (cached) response.\n  reqOptions.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n\n  // Set content-type to application/json\n  reqOptions.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n\n  return reqOptions;\n}\n\n/**\n * Validates the error code and message associated with 409 response status code. If it matches to that of\n * RP not registered then it returns the name of the RP else returns undefined.\n * @param {string} body The response body received after making the original request.\n * @returns {string} The name of the RP if condition is satisfied else undefined.\n */\nfunction checkRPNotRegisteredError(body: string): string {\n  let result, responseBody;\n  if (body) {\n    try {\n      responseBody = JSON.parse(body);\n    } catch (err) {\n      // do nothing;\n    }\n    if (\n      responseBody &&\n      responseBody.error &&\n      responseBody.error.message &&\n      responseBody.error.code &&\n      responseBody.error.code === \"MissingSubscriptionRegistration\"\n    ) {\n      const matchRes = responseBody.error.message.match(/.*'(.*)'/i);\n      if (matchRes) {\n        result = matchRes.pop();\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * Extracts the first part of the URL, just after subscription:\n * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param {string} url The original request url\n * @returns {string} The url prefix as explained above.\n */\nfunction extractSubscriptionUrl(url: string): string {\n  let result;\n  const matchRes = url.match(/.*\\/subscriptions\\/[a-f0-9-]+\\//gi);\n  if (matchRes && matchRes[0]) {\n    result = matchRes[0];\n  } else {\n    throw new Error(`Unable to extract subscriptionId from the given url - ${url}.`);\n  }\n  return result;\n}\n\n/**\n * Registers the given provider.\n * @param {RPRegistrationPolicy} policy The RPRegistrationPolicy this function is being called against.\n * @param {string} urlPrefix https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param {string} provider The provider name to be registered.\n * @param {WebResource} originalRequest The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @param {registrationCallback} callback The callback that handles the RP registration\n */\nfunction registerRP(\n  policy: RPRegistrationPolicy,\n  urlPrefix: string,\n  provider: string,\n  originalRequest: WebResource\n): Promise<boolean> {\n  const postUrl = `${urlPrefix}providers/${provider}/register?api-version=2016-02-01`;\n  const getUrl = `${urlPrefix}providers/${provider}?api-version=2016-02-01`;\n  const reqOptions = getRequestEssentials(originalRequest);\n  reqOptions.method = \"POST\";\n  reqOptions.url = postUrl;\n\n  return policy._nextPolicy.sendRequest(reqOptions).then((response) => {\n    if (response.status !== 200) {\n      throw new Error(`Autoregistration of ${provider} failed. Please try registering manually.`);\n    }\n    return getRegistrationStatus(policy, getUrl, originalRequest);\n  });\n}\n\n/**\n * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.\n * Polling will happen till the registrationState property of the response body is \"Registered\".\n * @param {RPRegistrationPolicy} policy The RPRegistrationPolicy this function is being called against.\n * @param {string} url The request url for polling\n * @param {WebResource} originalRequest The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @returns {Promise<boolean>} True if RP Registration is successful.\n */\nfunction getRegistrationStatus(\n  policy: RPRegistrationPolicy,\n  url: string,\n  originalRequest: WebResource\n): Promise<boolean> {\n  const reqOptions: any = getRequestEssentials(originalRequest);\n  reqOptions.url = url;\n  reqOptions.method = \"GET\";\n\n  return policy._nextPolicy.sendRequest(reqOptions).then((res) => {\n    const obj = res.parsedBody as any;\n    if (res.parsedBody && obj.registrationState && obj.registrationState === \"Registered\") {\n      return true;\n    } else {\n      return utils\n        .delay(policy._retryTimeout * 1000)\n        .then(() => getRegistrationStatus(policy, url, originalRequest));\n    }\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AccessToken } from \"@azure/core-auth\";\n\n/**\n * Defines the default token refresh buffer duration.\n */\nexport const TokenRefreshBufferMs = 2 * 60 * 1000; // 2 Minutes\n\n/**\n * Provides a cache for an AccessToken that was that\n * was returned from a TokenCredential.\n */\nexport interface AccessTokenCache {\n  /**\n   * Sets the cached token.\n   *\n   * @param The {@link AccessToken} to be cached or null to\n   *        clear the cached token.\n   */\n  setCachedToken(accessToken: AccessToken | undefined): void;\n\n  /**\n   * Returns the cached {@link AccessToken} or undefined if nothing is cached.\n   */\n  getCachedToken(): AccessToken | undefined;\n}\n\n/**\n * Provides an {@link AccessTokenCache} implementation which clears\n * the cached {@link AccessToken}'s after the expiresOnTimestamp has\n * passed.\n */\nexport class ExpiringAccessTokenCache implements AccessTokenCache {\n  private tokenRefreshBufferMs: number;\n  private cachedToken?: AccessToken = undefined;\n\n  /**\n   * Constructs an instance of {@link ExpiringAccessTokenCache} with\n   * an optional expiration buffer time.\n   */\n  constructor(tokenRefreshBufferMs: number = TokenRefreshBufferMs) {\n    this.tokenRefreshBufferMs = tokenRefreshBufferMs;\n  }\n\n  setCachedToken(accessToken: AccessToken | undefined): void {\n    this.cachedToken = accessToken;\n  }\n\n  getCachedToken(): AccessToken | undefined {\n    if (\n      this.cachedToken &&\n      Date.now() + this.tokenRefreshBufferMs >= this.cachedToken.expiresOnTimestamp\n    ) {\n      this.cachedToken = undefined;\n    }\n\n    return this.cachedToken;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { TokenCredential, GetTokenOptions } from \"@azure/core-auth\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyOptions,\n  RequestPolicyFactory\n} from \"../policies/requestPolicy\";\nimport { Constants } from \"../util/constants\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { HttpHeaders } from \"../httpHeaders\";\nimport { WebResource } from \"../webResource\";\nimport { AccessTokenCache, ExpiringAccessTokenCache } from \"../credentials/accessTokenCache\";\n\n/**\n * Creates a new BearerTokenAuthenticationPolicy factory.\n *\n * @param credential The TokenCredential implementation that can supply the bearer token.\n * @param scopes The scopes for which the bearer token applies.\n */\nexport function bearerTokenAuthenticationPolicy(\n  credential: TokenCredential,\n  scopes: string | string[]\n): RequestPolicyFactory {\n  const tokenCache: AccessTokenCache = new ExpiringAccessTokenCache();\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new BearerTokenAuthenticationPolicy(\n        nextPolicy,\n        options,\n        credential,\n        scopes,\n        tokenCache\n      );\n    }\n  };\n}\n\n/**\n *\n * Provides a RequestPolicy that can request a token from a TokenCredential\n * implementation and then apply it to the Authorization header of a request\n * as a Bearer token.\n *\n */\nexport class BearerTokenAuthenticationPolicy extends BaseRequestPolicy {\n  /**\n   * Creates a new BearerTokenAuthenticationPolicy object.\n   *\n   * @param nextPolicy The next RequestPolicy in the request pipeline.\n   * @param options Options for this RequestPolicy.\n   * @param credential The TokenCredential implementation that can supply the bearer token.\n   * @param scopes The scopes for which the bearer token applies.\n   * @param tokenCache The cache for the most recent AccessToken returned from the TokenCredential.\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    private credential: TokenCredential,\n    private scopes: string | string[],\n    private tokenCache: AccessTokenCache\n  ) {\n    super(nextPolicy, options);\n  }\n\n  /**\n   * Applies the Bearer token to the request through the Authorization header.\n   * @param webResource\n   */\n  public async sendRequest(webResource: WebResource): Promise<HttpOperationResponse> {\n    if (!webResource.headers) webResource.headers = new HttpHeaders();\n    const token = await this.getToken({\n      abortSignal: webResource.abortSignal,\n      tracingOptions: {\n        spanOptions: webResource.spanOptions\n      }\n    });\n    webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, `Bearer ${token}`);\n    return this._nextPolicy.sendRequest(webResource);\n  }\n\n  private async getToken(options: GetTokenOptions): Promise<string | undefined> {\n    let accessToken = this.tokenCache.getCachedToken();\n    if (accessToken === undefined) {\n      accessToken = (await this.credential.getToken(this.scopes, options)) || undefined;\n      this.tokenCache.setCachedToken(accessToken);\n    }\n\n    return accessToken ? accessToken.token : undefined;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport * as utils from \"../util/utils\";\nimport { WebResource } from \"../webResource\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"./requestPolicy\";\n\nexport interface RetryData {\n  retryCount: number;\n  retryInterval: number;\n  error?: RetryError;\n}\n\nexport interface RetryError extends Error {\n  message: string;\n  code?: string;\n  innerError?: RetryError;\n}\n\nexport function systemErrorRetryPolicy(\n  retryCount?: number,\n  retryInterval?: number,\n  minRetryInterval?: number,\n  maxRetryInterval?: number\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new SystemErrorRetryPolicy(\n        nextPolicy,\n        options,\n        retryCount,\n        retryInterval,\n        minRetryInterval,\n        maxRetryInterval\n      );\n    }\n  };\n}\n\n/**\n * @class\n * Instantiates a new \"ExponentialRetryPolicyFilter\" instance.\n *\n * @constructor\n * @param {number} retryCount        The client retry count.\n * @param {number} retryInterval     The client retry interval, in milliseconds.\n * @param {number} minRetryInterval  The minimum retry interval, in milliseconds.\n * @param {number} maxRetryInterval  The maximum retry interval, in milliseconds.\n */\nexport class SystemErrorRetryPolicy extends BaseRequestPolicy {\n  retryCount: number;\n  retryInterval: number;\n  minRetryInterval: number;\n  maxRetryInterval: number;\n  DEFAULT_CLIENT_RETRY_INTERVAL = 1000 * 30;\n  DEFAULT_CLIENT_RETRY_COUNT = 3;\n  DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 90;\n  DEFAULT_CLIENT_MIN_RETRY_INTERVAL = 1000 * 3;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    retryCount?: number,\n    retryInterval?: number,\n    minRetryInterval?: number,\n    maxRetryInterval?: number\n  ) {\n    super(nextPolicy, options);\n    this.retryCount = typeof retryCount === \"number\" ? retryCount : this.DEFAULT_CLIENT_RETRY_COUNT;\n    this.retryInterval =\n      typeof retryInterval === \"number\" ? retryInterval : this.DEFAULT_CLIENT_RETRY_INTERVAL;\n    this.minRetryInterval =\n      typeof minRetryInterval === \"number\"\n        ? minRetryInterval\n        : this.DEFAULT_CLIENT_MIN_RETRY_INTERVAL;\n    this.maxRetryInterval =\n      typeof maxRetryInterval === \"number\"\n        ? maxRetryInterval\n        : this.DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request.clone())\n      .then((response) => retry(this, request, response));\n  }\n}\n\n/**\n * Determines if the operation should be retried and how long to wait until the next retry.\n *\n * @param {number} statusCode The HTTP status code.\n * @param {RetryData} retryData  The retry data.\n * @return {boolean} True if the operation qualifies for a retry; false otherwise.\n */\nfunction shouldRetry(policy: SystemErrorRetryPolicy, retryData: RetryData): boolean {\n  let currentCount;\n  if (!retryData) {\n    throw new Error(\"retryData for the SystemErrorRetryPolicyFilter cannot be null.\");\n  } else {\n    currentCount = retryData && retryData.retryCount;\n  }\n  return currentCount < policy.retryCount;\n}\n\n/**\n * Updates the retry data for the next attempt.\n *\n * @param {RetryData} retryData  The retry data.\n * @param {object} err        The operation\"s error, if any.\n */\nfunction updateRetryData(\n  policy: SystemErrorRetryPolicy,\n  retryData?: RetryData,\n  err?: RetryError\n): RetryData {\n  if (!retryData) {\n    retryData = {\n      retryCount: 0,\n      retryInterval: 0\n    };\n  }\n\n  if (err) {\n    if (retryData.error) {\n      err.innerError = retryData.error;\n    }\n\n    retryData.error = err;\n  }\n\n  // Adjust retry count\n  retryData.retryCount++;\n\n  // Adjust retry interval\n  let incrementDelta = Math.pow(2, retryData.retryCount) - 1;\n  const boundedRandDelta =\n    policy.retryInterval * 0.8 +\n    Math.floor(Math.random() * (policy.retryInterval * 1.2 - policy.retryInterval * 0.8));\n  incrementDelta *= boundedRandDelta;\n\n  retryData.retryInterval = Math.min(\n    policy.minRetryInterval + incrementDelta,\n    policy.maxRetryInterval\n  );\n\n  return retryData;\n}\n\nfunction retry(\n  policy: SystemErrorRetryPolicy,\n  request: WebResource,\n  operationResponse: HttpOperationResponse,\n  retryData?: RetryData,\n  err?: RetryError\n): Promise<HttpOperationResponse> {\n  retryData = updateRetryData(policy, retryData, err);\n  if (\n    err &&\n    err.code &&\n    shouldRetry(policy, retryData) &&\n    (err.code === \"ETIMEDOUT\" ||\n      err.code === \"ESOCKETTIMEDOUT\" ||\n      err.code === \"ECONNREFUSED\" ||\n      err.code === \"ECONNRESET\" ||\n      err.code === \"ENOENT\")\n  ) {\n    // If previous operation ended with an error and the policy allows a retry, do that\n    return utils\n      .delay(retryData.retryInterval)\n      .then(() => policy._nextPolicy.sendRequest(request.clone()))\n      .then((res) => retry(policy, request, res, retryData, err))\n      .catch((err) => retry(policy, request, operationResponse, retryData, err));\n  } else {\n    if (err != undefined) {\n      // If the operation failed in the end, return all errors instead of just the last one\n      err = retryData.error;\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationResponse);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * The format that will be used to join an array of values together for a query parameter value.\n */\nexport enum QueryCollectionFormat {\n  Csv = \",\",\n  Ssv = \" \",\n  Tsv = \"\\t\",\n  Pipes = \"|\",\n  Multi = \"Multi\"\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyOptions,\n  RequestPolicyFactory\n} from \"./requestPolicy\";\nimport { WebResource } from \"../webResource\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { Constants } from \"../util/constants\";\nimport { delay } from \"../util/utils\";\n\ntype ResponseHandler = (\n  httpRequest: WebResource,\n  response: HttpOperationResponse\n) => Promise<HttpOperationResponse>;\nconst StatusCodes = Constants.HttpConstants.StatusCodes;\n\nexport function throttlingRetryPolicy(): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new ThrottlingRetryPolicy(nextPolicy, options);\n    }\n  };\n}\n\n/**\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n */\nexport class ThrottlingRetryPolicy extends BaseRequestPolicy {\n  private _handleResponse: ResponseHandler;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    _handleResponse?: ResponseHandler\n  ) {\n    super(nextPolicy, options);\n    this._handleResponse = _handleResponse || this._defaultResponseHandler;\n  }\n\n  public async sendRequest(httpRequest: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(httpRequest.clone()).then((response) => {\n      if (response.status !== StatusCodes.TooManyRequests) {\n        return response;\n      } else {\n        return this._handleResponse(httpRequest, response);\n      }\n    });\n  }\n\n  private async _defaultResponseHandler(\n    httpRequest: WebResource,\n    httpResponse: HttpOperationResponse\n  ): Promise<HttpOperationResponse> {\n    const retryAfterHeader: string | undefined = httpResponse.headers.get(\n      Constants.HeaderConstants.RETRY_AFTER\n    );\n\n    if (retryAfterHeader) {\n      const delayInMs: number | undefined = ThrottlingRetryPolicy.parseRetryAfterHeader(\n        retryAfterHeader\n      );\n      if (delayInMs) {\n        return delay(delayInMs).then((_: any) => this._nextPolicy.sendRequest(httpRequest));\n      }\n    }\n\n    return httpResponse;\n  }\n\n  public static parseRetryAfterHeader(headerValue: string): number | undefined {\n    const retryAfterInSeconds = Number(headerValue);\n    if (Number.isNaN(retryAfterInSeconds)) {\n      return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);\n    } else {\n      return retryAfterInSeconds * 1000;\n    }\n  }\n\n  public static parseDateRetryAfterHeader(headerValue: string): number | undefined {\n    try {\n      const now: number = Date.now();\n      const date: number = Date.parse(headerValue);\n      const diff = date - now;\n\n      return Number.isNaN(diff) ? undefined : diff;\n    } catch (error) {\n      return undefined;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { ServiceClientCredentials } from \"../credentials/serviceClientCredentials\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResource } from \"../webResource\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicy,\n  RequestPolicyOptions\n} from \"./requestPolicy\";\n\nexport function signingPolicy(\n  authenticationProvider: ServiceClientCredentials\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new SigningPolicy(nextPolicy, options, authenticationProvider);\n    }\n  };\n}\n\nexport class SigningPolicy extends BaseRequestPolicy {\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    public authenticationProvider: ServiceClientCredentials\n  ) {\n    super(nextPolicy, options);\n  }\n\n  signRequest(request: WebResource): Promise<WebResource> {\n    return this.authenticationProvider.signRequest(request);\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this.signRequest(request).then((nextRequest) =>\n      this._nextPolicy.sendRequest(nextRequest)\n    );\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyOptions } from './requestPolicy';\nimport { WebResource } from '../webResource';\nimport { HttpOperationResponse } from '../httpOperationResponse';\n\n/**\n * Options for how HTTP connections should be maintained for future\n * requests.\n */\nexport interface KeepAliveOptions {\n  /*\n   * When true, connections will be kept alive for multiple requests.\n   * Defaults to true.\n   */\n  enable: boolean;\n}\n\nexport const DefaultKeepAliveOptions: KeepAliveOptions = {\n  enable: true\n}\n\nexport function keepAlivePolicy(keepAliveOptions?: KeepAliveOptions) {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new KeepAlivePolicy(nextPolicy, options, keepAliveOptions || DefaultKeepAliveOptions);\n    }\n  };\n}\n\n/**\n * KeepAlivePolicy is a policy used to control keep alive settings for every request.\n */\nexport class KeepAlivePolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of KeepAlivePolicy.\n   *\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @param {KeepAliveOptions} [keepAliveOptions]\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    private readonly keepAliveOptions: KeepAliveOptions\n  ) {\n    super(nextPolicy, options);\n  }\n\n  /**\n   * Sends out request.\n   *\n   * @param {WebResource} request\n   * @returns {Promise<HttpOperationResponse>}\n   * @memberof KeepAlivePolicy\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    request.keepAlive = this.keepAliveOptions.enable;\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { Span, SpanContext, Attributes, Status } from \"@opentelemetry/types\";\n\n/**\n * A no-op implementation of Span that can safely be used without side-effects.\n */\nexport class NoOpSpan implements Span {\n  /**\n   * Returns the SpanContext associated with this Span.\n   */\n  context(): SpanContext {\n    return {\n      spanId: \"\",\n      traceId: \"\"\n    };\n  }\n\n  /**\n   * Marks the end of Span execution.\n   * @param _endTime The time to use as the Span's end time. Defaults to\n   * the current time.\n   */\n  end(_endTime?: number): void {\n    /* Noop */\n  }\n\n  /**\n   * Sets an attribute on the Span\n   * @param _key the attribute key\n   * @param _value the attribute value\n   */\n  setAttribute(_key: string, _value: unknown): this {\n    return this;\n  }\n\n  /**\n   * Sets attributes on the Span\n   * @param _attributes the attributes to add\n   */\n  setAttributes(_attributes: Attributes): this {\n    return this;\n  }\n\n  /**\n   * Adds an event to the Span\n   * @param _name The name of the event\n   * @param _attributes The associated attributes to add for this event\n   */\n  addEvent(_name: string, _attributes?: Attributes): this {\n    return this;\n  }\n\n  /**\n   * Sets a status on the span. Overrides the default of CanonicalCode.OK.\n   * @param _status The status to set.\n   */\n  setStatus(_status: Status): this {\n    return this;\n  }\n\n  /**\n   * Updates the name of the Span\n   * @param _name the new Span name\n   */\n  updateName(_name: string): this {\n    return this;\n  }\n\n  /**\n   * Returns whether this span will be recorded\n   */\n  isRecording(): boolean {\n    return false;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { BinaryFormat, SpanContext } from \"@opentelemetry/types\";\n\n/**\n * A no-op implementation of BinaryFormat to be used when tracing is disabled.\n */\nexport class NoOpBinaryFormat implements BinaryFormat {\n  /** Serialize the given SpanContext to a buffer */\n  toBytes(_spanContext: SpanContext): ArrayBuffer {\n    return new ArrayBuffer(0);\n  }\n\n  /** \n   * Deserialize a SpanContext from binary encoding. \n   * Returns null if the buffer does not contain a valid SpanContext.\n   */\n  fromBytes(_buffer: ArrayBuffer): SpanContext | null {\n    return null;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { HttpTextFormat, SpanContext } from \"@opentelemetry/types\";\n\n/**\n * A no-op implementation of HttpTextFormat to be used when tracing is disabled.\n */\nexport class NoOpHttpTextFormat implements HttpTextFormat {\n  /**\n   * Injects the given SpanContext for transmitting to a remote server.\n   * @param _spanContext The SpanContext to transmit\n   * @param _format The format of the carrier\n   * @param _carrier The carrier to propagate through, e.g. an HTTP request\n   */\n  inject(_spanContext: SpanContext, _format: string, _carrier: unknown): void {}\n  /**\n   * Returns a SpanContext intance extracted from the carrier.\n   * @param _format the format of the carrier\n   * @param _carrier The carrier being used for propagation, e.g. an HTTP request\n   */\n  extract(_format: string, _carrier: unknown): SpanContext | null {\n    return null;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { NoOpSpan } from \"./noOpSpan\";\nimport { BinaryFormat, HttpTextFormat, Tracer, Span, SpanOptions } from \"@opentelemetry/types\";\nimport { NoOpBinaryFormat } from \"./noOpBinaryFormat\";\nimport { NoOpHttpTextFormat } from \"./noOpHttpTextFormat\";\n\n/**\n * A no-op implementation of Tracer that can be used when tracing\n * is disabled.\n */\nexport class NoOpTracer implements Tracer {\n  /**\n   * Starts a new Span.\n   * @param _name The name of the span.\n   * @param _options The SpanOptions used during Span creation.\n   */\n  startSpan(_name: string, _options?: SpanOptions): Span {\n    return new NoOpSpan();\n  }\n\n  /**\n   * Returns the current Span from the current context, if available.\n   */\n  getCurrentSpan(): Span {\n    return new NoOpSpan();\n  }\n\n  /**\n   * Executes the given function within the context provided by a Span.\n   * @param _span The span that provides the context.\n   * @param fn The function to be executed.\n   */\n  withSpan<T extends (...args: unknown[]) => ReturnType<T>>(_span: Span, fn: T): ReturnType<T> {\n    return fn();\n  }\n\n  /**\n   * Bind a Span as the target's scope\n   * @param target An object to bind the scope.\n   * @param _span A specific Span to use. Otherwise, use the current one.\n   */\n  bind<T>(target: T, _span?: Span): T {\n    return target;\n  }\n\n  /**\n   * Send a pre-populated Span object to the exporter.\n   * @param _span The span to pass along.\n   */\n  recordSpanData(_span: Span): void {\n    /* NOOP */\n  }\n\n  /**\n   * Returns the BinaryFormat interface for serializing/deserializing Spans.\n   */\n  getBinaryFormat(): BinaryFormat {\n    return new NoOpBinaryFormat();\n  }\n\n  /**\n   * Returns the HttpTextFormat interface for injecting/extracting Spans.\n   */\n  getHttpTextFormat(): HttpTextFormat {\n    return new NoOpHttpTextFormat();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nexport function getGlobalObject(): any {\n  return self;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tracer } from \"@opentelemetry/types\";\nimport { getGlobalObject } from \"./global\";\n\nconst GLOBAL_TRACER_VERSION = 2;\n// preview5 shipped with @azure/core-tracing.tracerCache\n// and didn't have smart detection for collisions\nconst GLOBAL_TRACER_SYMBOL = Symbol.for(\"@azure/core-tracing.tracerCache2\");\n\nexport interface TracerCache {\n  version: number;\n  tracer?: Tracer;\n}\n\nlet cache: TracerCache;\n\nfunction loadTracerCache(): void {\n  const globalObj = getGlobalObject();\n  const existingCache: TracerCache = globalObj[GLOBAL_TRACER_SYMBOL];\n  let setGlobalCache = true;\n  if (existingCache) {\n    if (existingCache.version === GLOBAL_TRACER_VERSION) {\n      cache = existingCache;\n    } else {\n      setGlobalCache = false;\n      if (existingCache.tracer) {\n        throw new Error(\n          `Two incompatible versions of @azure/core-tracing have been loaded.\n          This library is ${GLOBAL_TRACER_VERSION}, existing is ${existingCache.version}.`\n        );\n      }\n    }\n  }\n\n  if (!cache) {\n    cache = {\n      tracer: undefined,\n      version: GLOBAL_TRACER_VERSION\n    };\n  }\n  if (setGlobalCache) {\n    globalObj[GLOBAL_TRACER_SYMBOL] = cache;\n  }\n}\n\nexport function getCache(): TracerCache {\n  if (!cache) {\n    loadTracerCache();\n  }\n  return cache;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { NoOpTracer } from \"./tracers/noop/noOpTracer\";\nimport { Tracer } from \"@opentelemetry/types\";\nimport { getCache } from \"./utils/cache\";\n\nlet defaultTracer: Tracer;\n\nfunction getDefaultTracer(): Tracer {\n  if (!defaultTracer) {\n    defaultTracer = new NoOpTracer();\n  }\n  return defaultTracer;\n}\n\n/**\n * Sets the global tracer, enabling tracing for the Azure SDK.\n * @param tracer An OpenTelemetry Tracer instance.\n */\nexport function setTracer(tracer: Tracer) {\n  const cache = getCache();\n  cache.tracer = tracer;\n}\n\n/**\n * Retrieves the active tracer, or returns a\n * no-op implementation if one is not set.\n */\nexport function getTracer() {\n  const cache = getCache();\n  if (!cache.tracer) {\n    return getDefaultTracer();\n  }\n  return cache.tracer;\n}\n","\"use strict\";\n/*!\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * EntryTtl is an integer that represents number of hops an entry can propagate.\n *\n * For now, ONLY special values (0 and -1) are supported.\n */\nvar EntryTtl;\n(function (EntryTtl) {\n    /**\n     * NO_PROPAGATION is considered to have local scope and is used within the\n     * process it created.\n     */\n    EntryTtl[EntryTtl[\"NO_PROPAGATION\"] = 0] = \"NO_PROPAGATION\";\n    /** UNLIMITED_PROPAGATION can propagate unlimited hops. */\n    EntryTtl[EntryTtl[\"UNLIMITED_PROPAGATION\"] = -1] = \"UNLIMITED_PROPAGATION\";\n})(EntryTtl = exports.EntryTtl || (exports.EntryTtl = {}));\n//# sourceMappingURL=EntryValue.js.map","\"use strict\";\n/*!\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** The Type of value. It describes how the data is reported. */\nvar ValueType;\n(function (ValueType) {\n    ValueType[ValueType[\"INT\"] = 0] = \"INT\";\n    ValueType[ValueType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n})(ValueType = exports.ValueType || (exports.ValueType = {}));\n//# sourceMappingURL=Metric.js.map","\"use strict\";\n/*!\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Type of span. Can be used to specify additional relationships between spans\n * in addition to a parent/child relationship.\n */\nvar SpanKind;\n(function (SpanKind) {\n    /** Default value. Indicates that the span is used internally. */\n    SpanKind[SpanKind[\"INTERNAL\"] = 0] = \"INTERNAL\";\n    /**\n     * Indicates that the span covers server-side handling of an RPC or other\n     * remote request.\n     */\n    SpanKind[SpanKind[\"SERVER\"] = 1] = \"SERVER\";\n    /**\n     * Indicates that the span covers the client-side wrapper around an RPC or\n     * other remote request.\n     */\n    SpanKind[SpanKind[\"CLIENT\"] = 2] = \"CLIENT\";\n    /**\n     * Indicates that the span describes producer sending a message to a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"PRODUCER\"] = 3] = \"PRODUCER\";\n    /**\n     * Indicates that the span describes consumer receiving a message from a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"CONSUMER\"] = 4] = \"CONSUMER\";\n})(SpanKind = exports.SpanKind || (exports.SpanKind = {}));\n//# sourceMappingURL=span_kind.js.map","\"use strict\";\n/*!\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * An enumeration of canonical status codes.\n */\nvar CanonicalCode;\n(function (CanonicalCode) {\n    /**\n     * Not an error; returned on success\n     */\n    CanonicalCode[CanonicalCode[\"OK\"] = 0] = \"OK\";\n    /**\n     * The operation was cancelled (typically by the caller).\n     */\n    CanonicalCode[CanonicalCode[\"CANCELLED\"] = 1] = \"CANCELLED\";\n    /**\n     * Unknown error.  An example of where this error may be returned is\n     * if a status value received from another address space belongs to\n     * an error-space that is not known in this address space.  Also\n     * errors raised by APIs that do not return enough error information\n     * may be converted to this error.\n     */\n    CanonicalCode[CanonicalCode[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n    /**\n     * Client specified an invalid argument.  Note that this differs\n     * from FAILED_PRECONDITION.  INVALID_ARGUMENT indicates arguments\n     * that are problematic regardless of the state of the system\n     * (e.g., a malformed file name).\n     */\n    CanonicalCode[CanonicalCode[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n    /**\n     * Deadline expired before operation could complete.  For operations\n     * that change the state of the system, this error may be returned\n     * even if the operation has completed successfully.  For example, a\n     * successful response from a server could have been delayed long\n     * enough for the deadline to expire.\n     */\n    CanonicalCode[CanonicalCode[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n    /**\n     * Some requested entity (e.g., file or directory) was not found.\n     */\n    CanonicalCode[CanonicalCode[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n    /**\n     * Some entity that we attempted to create (e.g., file or directory)\n     * already exists.\n     */\n    CanonicalCode[CanonicalCode[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n    /**\n     * The caller does not have permission to execute the specified\n     * operation.  PERMISSION_DENIED must not be used for rejections\n     * caused by exhausting some resource (use RESOURCE_EXHAUSTED\n     * instead for those errors).  PERMISSION_DENIED must not be\n     * used if the caller can not be identified (use UNAUTHENTICATED\n     * instead for those errors).\n     */\n    CanonicalCode[CanonicalCode[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n    /**\n     * Some resource has been exhausted, perhaps a per-user quota, or\n     * perhaps the entire file system is out of space.\n     */\n    CanonicalCode[CanonicalCode[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n    /**\n     * Operation was rejected because the system is not in a state\n     * required for the operation's execution.  For example, directory\n     * to be deleted may be non-empty, an rmdir operation is applied to\n     * a non-directory, etc.\n     *\n     * A litmus test that may help a service implementor in deciding\n     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n     *\n     *  - Use UNAVAILABLE if the client can retry just the failing call.\n     *  - Use ABORTED if the client should retry at a higher-level\n     *    (e.g., restarting a read-modify-write sequence).\n     *  - Use FAILED_PRECONDITION if the client should not retry until\n     *    the system state has been explicitly fixed.  E.g., if an \"rmdir\"\n     *    fails because the directory is non-empty, FAILED_PRECONDITION\n     *    should be returned since the client should not retry unless\n     *    they have first fixed up the directory by deleting files from it.\n     *  - Use FAILED_PRECONDITION if the client performs conditional\n     *    REST Get/Update/Delete on a resource and the resource on the\n     *    server does not match the condition. E.g., conflicting\n     *    read-modify-write on the same resource.\n     */\n    CanonicalCode[CanonicalCode[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n    /**\n     * The operation was aborted, typically due to a concurrency issue\n     * like sequencer check failures, transaction aborts, etc.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION,\n     * ABORTED, and UNAVAILABLE.\n     */\n    CanonicalCode[CanonicalCode[\"ABORTED\"] = 10] = \"ABORTED\";\n    /**\n     * Operation was attempted past the valid range.  E.g., seeking or\n     * reading past end of file.\n     *\n     * Unlike INVALID_ARGUMENT, this error indicates a problem that may\n     * be fixed if the system state changes. For example, a 32-bit file\n     * system will generate INVALID_ARGUMENT if asked to read at an\n     * offset that is not in the range [0,2^32-1], but it will generate\n     * OUT_OF_RANGE if asked to read from an offset past the current\n     * file size.\n     *\n     * There is a fair bit of overlap between FAILED_PRECONDITION and\n     * OUT_OF_RANGE.  We recommend using OUT_OF_RANGE (the more specific\n     * error) when it applies so that callers who are iterating through\n     * a space can easily look for an OUT_OF_RANGE error to detect when\n     * they are done.\n     */\n    CanonicalCode[CanonicalCode[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n    /**\n     * Operation is not implemented or not supported/enabled in this service.\n     */\n    CanonicalCode[CanonicalCode[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n    /**\n     * Internal errors.  Means some invariants expected by underlying\n     * system has been broken.  If you see one of these errors,\n     * something is very broken.\n     */\n    CanonicalCode[CanonicalCode[\"INTERNAL\"] = 13] = \"INTERNAL\";\n    /**\n     * The service is currently unavailable.  This is a most likely a\n     * transient condition and may be corrected by retrying with\n     * a backoff.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION,\n     * ABORTED, and UNAVAILABLE.\n     */\n    CanonicalCode[CanonicalCode[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n    /**\n     * Unrecoverable data loss or corruption.\n     */\n    CanonicalCode[CanonicalCode[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n    /**\n     * The request does not have valid authentication credentials for the\n     * operation.\n     */\n    CanonicalCode[CanonicalCode[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n})(CanonicalCode = exports.CanonicalCode || (exports.CanonicalCode = {}));\n//# sourceMappingURL=status.js.map","\"use strict\";\n/*!\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * An enumeration that represents global trace flags. These flags are\n * propagated to all child {@link Span}. These determine features such as\n * whether a Span should be traced. It is implemented as a bitmask.\n */\nvar TraceFlags;\n(function (TraceFlags) {\n    /** Bit to represent whether trace is unsampled in trace flags. */\n    TraceFlags[TraceFlags[\"UNSAMPLED\"] = 0] = \"UNSAMPLED\";\n    /** Bit to represent whether trace is sampled in trace flags. */\n    TraceFlags[TraceFlags[\"SAMPLED\"] = 1] = \"SAMPLED\";\n})(TraceFlags = exports.TraceFlags || (exports.TraceFlags = {}));\n//# sourceMappingURL=trace_flags.js.map","\"use strict\";\n/*!\n * Copyright 2019, OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./distributed_context/EntryValue\"));\n__export(require(\"./metrics/Metric\"));\n__export(require(\"./trace/span_kind\"));\n__export(require(\"./trace/status\"));\n__export(require(\"./trace/trace_flags\"));\n//# sourceMappingURL=index.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { SpanContext, TraceFlags } from \"@opentelemetry/types\";\n\nconst VERSION = \"00\";\n\n/**\n * Generates a `SpanContext` given a `traceparent` header value.\n * @param traceParent Serialized span context data as a `traceparent` header value.\n * @returns The `SpanContext` generated from the `traceparent` value.\n */\nexport function extractSpanContextFromTraceParentHeader(\n  traceParentHeader: string\n): SpanContext | undefined {\n  const parts = traceParentHeader.split(\"-\");\n\n  if (parts.length !== 4) {\n    return;\n  }\n\n  const [version, traceId, spanId, traceOptions] = parts;\n\n  if (version !== VERSION) {\n    return;\n  }\n\n  const traceFlags = parseInt(traceOptions, 16);\n\n  const spanContext: SpanContext = {\n    spanId,\n    traceId,\n    traceFlags\n  };\n\n  return spanContext;\n}\n\n/**\n * Generates a `traceparent` value given a span context.\n * @param spanContext Contains context for a specific span.\n * @returns The `spanContext` represented as a `traceparent` value.\n */\nexport function getTraceParentHeader(spanContext: SpanContext): string | undefined {\n  const missingFields: string[] = [];\n  if (!spanContext.traceId) {\n    missingFields.push(\"traceId\");\n  }\n  if (!spanContext.spanId) {\n    missingFields.push(\"spanId\");\n  }\n\n  if (missingFields.length) {\n    return;\n  }\n\n  const flags = spanContext.traceFlags || TraceFlags.UNSAMPLED;\n  const hexFlags = flags.toString(16);\n  const traceFlags = hexFlags.length === 1 ? `0${hexFlags}` : hexFlags;\n\n  // https://www.w3.org/TR/trace-context/#traceparent-header-field-values\n  return `${VERSION}-${spanContext.traceId}-${spanContext.spanId}-${traceFlags}`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { getTracer, getTraceParentHeader } from \"@azure/core-tracing\";\nimport { SpanOptions, SpanKind } from \"@opentelemetry/types\";\nimport {\n  RequestPolicyFactory,\n  RequestPolicy,\n  RequestPolicyOptions,\n  BaseRequestPolicy\n} from \"./requestPolicy\";\nimport { WebResource } from \"../webResource\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { URLBuilder } from \"../url\";\n\nexport interface TracingPolicyOptions {\n  userAgent?: string;\n}\n\nexport function tracingPolicy(tracingOptions: TracingPolicyOptions = {}): RequestPolicyFactory {\n  return {\n    create(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n      return new TracingPolicy(nextPolicy, options, tracingOptions);\n    }\n  };\n}\n\nexport class TracingPolicy extends BaseRequestPolicy {\n  private userAgent?: string;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    tracingOptions: TracingPolicyOptions\n  ) {\n    super(nextPolicy, options);\n    this.userAgent = tracingOptions.userAgent;\n  }\n\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (!request.spanOptions || !request.spanOptions.parent) {\n      return this._nextPolicy.sendRequest(request);\n    }\n\n    // create a new span\n    const tracer = getTracer();\n    const spanOptions: SpanOptions = {\n      ...request.spanOptions,\n      kind: SpanKind.CLIENT\n    };\n    const path = URLBuilder.parse(request.url).getPath() || \"/\";\n    const span = tracer.startSpan(path, spanOptions);\n    span.setAttributes({\n      \"http.method\": request.method,\n      \"http.url\": request.url,\n      requestId: request.requestId\n    });\n\n    if (this.userAgent) {\n      span.setAttribute(\"http.user_agent\", this.userAgent);\n    }\n\n    try {\n      // set headers\n      const spanContext = span.context();\n      const traceParentHeader = getTraceParentHeader(spanContext);\n      if (traceParentHeader) {\n        request.headers.set(\"traceparent\", traceParentHeader);\n        const traceState = spanContext.traceState && spanContext.traceState.serialize();\n        // if tracestate is set, traceparent MUST be set, so only set tracestate after traceparent\n        if (traceState) {\n          request.headers.set(\"tracestate\", traceState);\n        }\n      }\n\n      const response = await this._nextPolicy.sendRequest(request);\n      span.setAttribute(\"http.status_code\", response.status);\n      const serviceRequestId = response.headers.get(\"x-ms-request-id\");\n      if (serviceRequestId) {\n        span.setAttribute(\"serviceRequestId\", serviceRequestId);\n      }\n      span.end();\n      return response;\n    } catch (err) {\n      span.end();\n      throw err;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { TokenCredential, isTokenCredential } from \"@azure/core-auth\";\nimport { DefaultHttpClient } from \"./defaultHttpClient\";\nimport { HttpClient } from \"./httpClient\";\nimport { HttpOperationResponse, RestResponse } from \"./httpOperationResponse\";\nimport { HttpPipelineLogger } from \"./httpPipelineLogger\";\nimport { logPolicy, LogPolicyOptions } from \"./policies/logPolicy\";\nimport { OperationArguments } from \"./operationArguments\";\nimport {\n  getPathStringFromParameter,\n  getPathStringFromParameterPath,\n  OperationParameter,\n  ParameterPath\n} from \"./operationParameter\";\nimport { isStreamOperation, OperationSpec } from \"./operationSpec\";\nimport {\n  deserializationPolicy,\n  DeserializationContentTypes,\n  DefaultDeserializationOptions\n} from \"./policies/deserializationPolicy\";\nimport { exponentialRetryPolicy, DefaultRetryOptions } from \"./policies/exponentialRetryPolicy\";\nimport { generateClientRequestIdPolicy } from \"./policies/generateClientRequestIdPolicy\";\nimport {\n  userAgentPolicy,\n  getDefaultUserAgentHeaderName,\n  getDefaultUserAgentValue\n} from \"./policies/userAgentPolicy\";\nimport { redirectPolicy, DefaultRedirectOptions } from \"./policies/redirectPolicy\";\nimport {\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"./policies/requestPolicy\";\nimport { rpRegistrationPolicy } from \"./policies/rpRegistrationPolicy\";\nimport { bearerTokenAuthenticationPolicy } from \"./policies/bearerTokenAuthenticationPolicy\";\nimport { systemErrorRetryPolicy } from \"./policies/systemErrorRetryPolicy\";\nimport { QueryCollectionFormat } from \"./queryCollectionFormat\";\nimport { CompositeMapper, DictionaryMapper, Mapper, MapperType, Serializer } from \"./serializer\";\nimport { URLBuilder } from \"./url\";\nimport * as utils from \"./util/utils\";\nimport { stringifyXML } from \"./util/xml\";\nimport { RequestOptionsBase, RequestPrepareOptions, WebResource } from \"./webResource\";\nimport { OperationResponse } from \"./operationResponse\";\nimport { ServiceCallback, isNode } from \"./util/utils\";\nimport { proxyPolicy } from \"./policies/proxyPolicy\";\nimport { throttlingRetryPolicy } from \"./policies/throttlingRetryPolicy\";\nimport { ServiceClientCredentials } from \"./credentials/serviceClientCredentials\";\nimport { signingPolicy } from \"./policies/signingPolicy\";\nimport { logger } from \"./log\";\nimport { InternalPipelineOptions } from \"./pipelineOptions\";\nimport { DefaultKeepAliveOptions, keepAlivePolicy } from \"./policies/keepAlivePolicy\";\nimport { tracingPolicy } from \"./policies/tracingPolicy\";\n\n/**\n * Options to configure a proxy for outgoing requests (Node.js only).\n */\nexport interface ProxySettings {\n  /*\n   * The proxy's host address.\n   */\n  host: string;\n\n  /*\n   * The proxy host's port.\n   */\n  port: number;\n\n  /**\n   * The user name to authenticate with the proxy, if required.\n   */\n  username?: string;\n\n  /**\n   * The password to authenticate with the proxy, if required.\n   */\n  password?: string;\n}\n\nexport type ProxyOptions = ProxySettings; // Alias ProxySettings as ProxyOptions for future use.\n\n/**\n * Options to be provided while creating the client.\n */\nexport interface ServiceClientOptions {\n  /**\n   * An array of factories which get called to create the RequestPolicy pipeline used to send a HTTP\n   * request on the wire, or a function that takes in the defaultRequestPolicyFactories and returns\n   * the requestPolicyFactories that will be used.\n   */\n  requestPolicyFactories?:\n    | RequestPolicyFactory[]\n    | ((defaultRequestPolicyFactories: RequestPolicyFactory[]) => void | RequestPolicyFactory[]);\n  /**\n   * The HttpClient that will be used to send HTTP requests.\n   */\n  httpClient?: HttpClient;\n  /**\n   * The HttpPipelineLogger that can be used to debug RequestPolicies within the HTTP pipeline.\n   */\n  httpPipelineLogger?: HttpPipelineLogger;\n  /**\n   * If set to true, turn off the default retry policy.\n   */\n  noRetryPolicy?: boolean;\n  /**\n   * Gets or sets the retry timeout in seconds for AutomaticRPRegistration. Default value is 30.\n   */\n  rpRegistrationRetryTimeout?: number;\n  /**\n   * Whether or not to generate a client request ID header for each HTTP request.\n   */\n  generateClientRequestIdHeader?: boolean;\n  /**\n   * Whether to include credentials in CORS requests in the browser.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials for more information.\n   */\n  withCredentials?: boolean;\n  /**\n   * If specified, a GenerateRequestIdPolicy will be added to the HTTP pipeline that will add a\n   * header to all outgoing requests with this header name and a random UUID as the request ID.\n   */\n  clientRequestIdHeaderName?: string;\n  /**\n   * The content-types that will be associated with JSON or XML serialization.\n   */\n  deserializationContentTypes?: DeserializationContentTypes;\n  /**\n   * The header name to use for the telemetry header while sending the request. If this is not\n   * specified, then \"User-Agent\" will be used when running on Node.js and \"x-ms-command-name\" will\n   * be used when running in a browser.\n   */\n  userAgentHeaderName?: string | ((defaultUserAgentHeaderName: string) => string);\n  /**\n   * The string to be set to the telemetry header while sending the request, or a function that\n   * takes in the default user-agent string and returns the user-agent string that will be used.\n   */\n  userAgent?: string | ((defaultUserAgent: string) => string);\n  /**\n   * Proxy settings which will be used for every HTTP request (Node.js only).\n   */\n  proxySettings?: ProxySettings;\n}\n\n/**\n * @class\n * Initializes a new instance of the ServiceClient.\n */\nexport class ServiceClient {\n  /**\n   * If specified, this is the base URI that requests will be made against for this ServiceClient.\n   * If it is not specified, then all OperationSpecs must contain a baseUrl property.\n   */\n  protected baseUri?: string;\n\n  /**\n   * The default request content type for the service.\n   * Used if no requestContentType is present on an OperationSpec.\n   */\n  protected requestContentType?: string;\n\n  /**\n   * The HTTP client that will be used to send requests.\n   */\n  private readonly _httpClient: HttpClient;\n  private readonly _requestPolicyOptions: RequestPolicyOptions;\n\n  private readonly _requestPolicyFactories: RequestPolicyFactory[];\n  private readonly _withCredentials: boolean;\n\n  /**\n   * The ServiceClient constructor\n   * @constructor\n   * @param credentials The credentials used for authentication with the service.\n   * @param options The service client options that govern the behavior of the client.\n   */\n  constructor(\n    credentials?: TokenCredential | ServiceClientCredentials,\n    options?: ServiceClientOptions\n  ) {\n    if (!options) {\n      options = {};\n    }\n\n    this._withCredentials = options.withCredentials || false;\n    this._httpClient = options.httpClient || new DefaultHttpClient();\n    this._requestPolicyOptions = new RequestPolicyOptions(options.httpPipelineLogger);\n\n    let requestPolicyFactories: RequestPolicyFactory[];\n    if (Array.isArray(options.requestPolicyFactories)) {\n      logger.info(\"ServiceClient: using custom request policies\");\n      requestPolicyFactories = options.requestPolicyFactories;\n    } else {\n      let authPolicyFactory: RequestPolicyFactory | undefined = undefined;\n      if (isTokenCredential(credentials)) {\n        logger.info(\n          \"ServiceClient: creating bearer token authentication policy from provided credentials\"\n        );\n        // Create a wrapped RequestPolicyFactory here so that we can provide the\n        // correct scope to the BearerTokenAuthenticationPolicy at the first time\n        // one is requested.  This is needed because generated ServiceClient\n        // implementations do not set baseUri until after ServiceClient's constructor\n        // is finished, leaving baseUri empty at the time when it is needed to\n        // build the correct scope name.\n        const wrappedPolicyFactory: () => RequestPolicyFactory = () => {\n          let bearerTokenPolicyFactory: RequestPolicyFactory | undefined = undefined;\n          let serviceClient = this;\n          return {\n            create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): RequestPolicy {\n              if (bearerTokenPolicyFactory === undefined) {\n                bearerTokenPolicyFactory = bearerTokenAuthenticationPolicy(\n                  credentials,\n                  `${serviceClient.baseUri || \"\"}/.default`\n                );\n              }\n\n              return bearerTokenPolicyFactory.create(nextPolicy, options);\n            }\n          };\n        };\n\n        authPolicyFactory = wrappedPolicyFactory();\n      } else if (credentials && typeof credentials.signRequest === \"function\") {\n        logger.info(\"ServiceClient: creating signing policy from provided credentials\");\n        authPolicyFactory = signingPolicy(credentials);\n      } else if (credentials !== undefined) {\n        throw new Error(\"The credentials argument must implement the TokenCredential interface\");\n      }\n\n      logger.info(\"ServiceClient: using default request policies\");\n      requestPolicyFactories = createDefaultRequestPolicyFactories(authPolicyFactory, options);\n      if (options.requestPolicyFactories) {\n        // options.requestPolicyFactories can also be a function that manipulates\n        // the default requestPolicyFactories array\n        const newRequestPolicyFactories:\n          | void\n          | RequestPolicyFactory[] = options.requestPolicyFactories(requestPolicyFactories);\n        if (newRequestPolicyFactories) {\n          requestPolicyFactories = newRequestPolicyFactories;\n        }\n      }\n    }\n    this._requestPolicyFactories = requestPolicyFactories;\n  }\n\n  /**\n   * Send the provided httpRequest.\n   */\n  sendRequest(options: RequestPrepareOptions | WebResource): Promise<HttpOperationResponse> {\n    if (options === null || options === undefined || typeof options !== \"object\") {\n      throw new Error(\"options cannot be null or undefined and it must be of type object.\");\n    }\n\n    let httpRequest: WebResource;\n    try {\n      if (options instanceof WebResource) {\n        options.validateRequestProperties();\n        httpRequest = options;\n      } else {\n        httpRequest = new WebResource();\n        httpRequest = httpRequest.prepare(options);\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    let httpPipeline: RequestPolicy = this._httpClient;\n    if (this._requestPolicyFactories && this._requestPolicyFactories.length > 0) {\n      for (let i = this._requestPolicyFactories.length - 1; i >= 0; --i) {\n        httpPipeline = this._requestPolicyFactories[i].create(\n          httpPipeline,\n          this._requestPolicyOptions\n        );\n      }\n    }\n    return httpPipeline.sendRequest(httpRequest);\n  }\n\n  /**\n   * Send an HTTP request that is populated using the provided OperationSpec.\n   * @param {OperationArguments} operationArguments The arguments that the HTTP request's templated values will be populated from.\n   * @param {OperationSpec} operationSpec The OperationSpec to use to populate the httpRequest.\n   * @param {ServiceCallback} callback The callback to call when the response is received.\n   */\n  async sendOperationRequest(\n    operationArguments: OperationArguments,\n    operationSpec: OperationSpec,\n    callback?: ServiceCallback<any>\n  ): Promise<RestResponse> {\n    if (typeof operationArguments.options === \"function\") {\n      callback = operationArguments.options;\n      operationArguments.options = undefined;\n    }\n\n    const httpRequest = new WebResource();\n\n    let result: Promise<RestResponse>;\n    try {\n      const baseUri: string | undefined = operationSpec.baseUrl || this.baseUri;\n      if (!baseUri) {\n        throw new Error(\n          \"If operationSpec.baseUrl is not specified, then the ServiceClient must have a baseUri string property that contains the base URL to use.\"\n        );\n      }\n\n      httpRequest.method = operationSpec.httpMethod;\n      httpRequest.operationSpec = operationSpec;\n\n      const requestUrl: URLBuilder = URLBuilder.parse(baseUri);\n      if (operationSpec.path) {\n        requestUrl.appendPath(operationSpec.path);\n      }\n      if (operationSpec.urlParameters && operationSpec.urlParameters.length > 0) {\n        for (const urlParameter of operationSpec.urlParameters) {\n          let urlParameterValue: string = getOperationArgumentValueFromParameter(\n            this,\n            operationArguments,\n            urlParameter,\n            operationSpec.serializer\n          );\n          urlParameterValue = operationSpec.serializer.serialize(\n            urlParameter.mapper,\n            urlParameterValue,\n            getPathStringFromParameter(urlParameter)\n          );\n          if (!urlParameter.skipEncoding) {\n            urlParameterValue = encodeURIComponent(urlParameterValue);\n          }\n          requestUrl.replaceAll(\n            `{${urlParameter.mapper.serializedName || getPathStringFromParameter(urlParameter)}}`,\n            urlParameterValue\n          );\n        }\n      }\n      if (operationSpec.queryParameters && operationSpec.queryParameters.length > 0) {\n        for (const queryParameter of operationSpec.queryParameters) {\n          let queryParameterValue: any = getOperationArgumentValueFromParameter(\n            this,\n            operationArguments,\n            queryParameter,\n            operationSpec.serializer\n          );\n          if (queryParameterValue != undefined) {\n            queryParameterValue = operationSpec.serializer.serialize(\n              queryParameter.mapper,\n              queryParameterValue,\n              getPathStringFromParameter(queryParameter)\n            );\n            if (queryParameter.collectionFormat != undefined) {\n              if (queryParameter.collectionFormat === QueryCollectionFormat.Multi) {\n                if (queryParameterValue.length === 0) {\n                  queryParameterValue = \"\";\n                } else {\n                  for (const index in queryParameterValue) {\n                    const item = queryParameterValue[index];\n                    queryParameterValue[index] = item == undefined ? \"\" : item.toString();\n                  }\n                }\n              } else {\n                queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);\n              }\n            }\n            if (!queryParameter.skipEncoding) {\n              if (Array.isArray(queryParameterValue)) {\n                for (const index in queryParameterValue) {\n                  queryParameterValue[index] = encodeURIComponent(queryParameterValue[index]);\n                }\n              } else {\n                queryParameterValue = encodeURIComponent(queryParameterValue);\n              }\n            }\n            requestUrl.setQueryParameter(\n              queryParameter.mapper.serializedName || getPathStringFromParameter(queryParameter),\n              queryParameterValue\n            );\n          }\n        }\n      }\n      httpRequest.url = requestUrl.toString();\n\n      const contentType = operationSpec.contentType || this.requestContentType;\n      if (contentType) {\n        httpRequest.headers.set(\"Content-Type\", contentType);\n      }\n\n      if (operationSpec.headerParameters) {\n        for (const headerParameter of operationSpec.headerParameters) {\n          let headerValue: any = getOperationArgumentValueFromParameter(\n            this,\n            operationArguments,\n            headerParameter,\n            operationSpec.serializer\n          );\n          if (headerValue != undefined) {\n            headerValue = operationSpec.serializer.serialize(\n              headerParameter.mapper,\n              headerValue,\n              getPathStringFromParameter(headerParameter)\n            );\n            const headerCollectionPrefix = (headerParameter.mapper as DictionaryMapper)\n              .headerCollectionPrefix;\n            if (headerCollectionPrefix) {\n              for (const key of Object.keys(headerValue)) {\n                httpRequest.headers.set(headerCollectionPrefix + key, headerValue[key]);\n              }\n            } else {\n              httpRequest.headers.set(\n                headerParameter.mapper.serializedName ||\n                  getPathStringFromParameter(headerParameter),\n                headerValue\n              );\n            }\n          }\n        }\n      }\n\n      const options: RequestOptionsBase | undefined = operationArguments.options;\n      if (options) {\n        if (options.customHeaders) {\n          for (const customHeaderName in options.customHeaders) {\n            httpRequest.headers.set(customHeaderName, options.customHeaders[customHeaderName]);\n          }\n        }\n\n        if (options.abortSignal) {\n          httpRequest.abortSignal = options.abortSignal;\n        }\n\n        if (options.timeout) {\n          httpRequest.timeout = options.timeout;\n        }\n\n        if (options.onUploadProgress) {\n          httpRequest.onUploadProgress = options.onUploadProgress;\n        }\n\n        if (options.onDownloadProgress) {\n          httpRequest.onDownloadProgress = options.onDownloadProgress;\n        }\n\n        if (options.spanOptions) {\n          httpRequest.spanOptions = options.spanOptions;\n        }\n      }\n\n      httpRequest.withCredentials = this._withCredentials;\n\n      serializeRequestBody(this, httpRequest, operationArguments, operationSpec);\n\n      if (httpRequest.streamResponseBody == undefined) {\n        httpRequest.streamResponseBody = isStreamOperation(operationSpec);\n      }\n\n      let rawResponse: HttpOperationResponse;\n      let sendRequestError;\n      try {\n        rawResponse = await this.sendRequest(httpRequest);\n      } catch (error) {\n        sendRequestError = error;\n      }\n      if (sendRequestError) {\n        if (sendRequestError.response) {\n          sendRequestError.details = flattenResponse(\n            sendRequestError.response,\n            operationSpec.responses[sendRequestError.statusCode] ||\n              operationSpec.responses[\"default\"]\n          );\n        }\n        result = Promise.reject(sendRequestError);\n      } else {\n        result = Promise.resolve(\n          flattenResponse(rawResponse!, operationSpec.responses[rawResponse!.status])\n        );\n      }\n    } catch (error) {\n      result = Promise.reject(error);\n    }\n\n    const cb = callback;\n    if (cb) {\n      result\n        // tslint:disable-next-line:no-null-keyword\n        .then((res) => cb(null, res._response.parsedBody, res._response.request, res._response))\n        .catch((err) => cb(err));\n    }\n\n    return result;\n  }\n}\n\nexport function serializeRequestBody(\n  serviceClient: ServiceClient,\n  httpRequest: WebResource,\n  operationArguments: OperationArguments,\n  operationSpec: OperationSpec\n): void {\n  if (operationSpec.requestBody && operationSpec.requestBody.mapper) {\n    httpRequest.body = getOperationArgumentValueFromParameter(\n      serviceClient,\n      operationArguments,\n      operationSpec.requestBody,\n      operationSpec.serializer\n    );\n\n    const bodyMapper = operationSpec.requestBody.mapper;\n    const { required, xmlName, xmlElementName, serializedName } = bodyMapper;\n    const typeName = bodyMapper.type.name;\n    try {\n      if (httpRequest.body != undefined || required) {\n        const requestBodyParameterPathString: string = getPathStringFromParameter(\n          operationSpec.requestBody\n        );\n        httpRequest.body = operationSpec.serializer.serialize(\n          bodyMapper,\n          httpRequest.body,\n          requestBodyParameterPathString\n        );\n        const isStream = typeName === MapperType.Stream;\n        if (operationSpec.isXML) {\n          if (typeName === MapperType.Sequence) {\n            httpRequest.body = stringifyXML(\n              utils.prepareXMLRootList(\n                httpRequest.body,\n                xmlElementName || xmlName || serializedName!\n              ),\n              { rootName: xmlName || serializedName }\n            );\n          } else if (!isStream) {\n            httpRequest.body = stringifyXML(httpRequest.body, {\n              rootName: xmlName || serializedName\n            });\n          }\n        } else if (!isStream) {\n          httpRequest.body = JSON.stringify(httpRequest.body);\n        }\n      }\n    } catch (error) {\n      throw new Error(\n        `Error \"${error.message}\" occurred in serializing the payload - ${JSON.stringify(\n          serializedName,\n          undefined,\n          \"  \"\n        )}.`\n      );\n    }\n  } else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {\n    httpRequest.formData = {};\n    for (const formDataParameter of operationSpec.formDataParameters) {\n      const formDataParameterValue: any = getOperationArgumentValueFromParameter(\n        serviceClient,\n        operationArguments,\n        formDataParameter,\n        operationSpec.serializer\n      );\n      if (formDataParameterValue != undefined) {\n        const formDataParameterPropertyName: string =\n          formDataParameter.mapper.serializedName || getPathStringFromParameter(formDataParameter);\n        httpRequest.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(\n          formDataParameter.mapper,\n          formDataParameterValue,\n          getPathStringFromParameter(formDataParameter)\n        );\n      }\n    }\n  }\n}\n\nfunction getValueOrFunctionResult(\n  value: undefined | string | ((defaultValue: string) => string),\n  defaultValueCreator: () => string\n): string {\n  let result: string;\n  if (typeof value === \"string\") {\n    result = value;\n  } else {\n    result = defaultValueCreator();\n    if (typeof value === \"function\") {\n      result = value(result);\n    }\n  }\n  return result;\n}\n\nfunction createDefaultRequestPolicyFactories(\n  authPolicyFactory: RequestPolicyFactory | undefined,\n  options: ServiceClientOptions\n): RequestPolicyFactory[] {\n  const factories: RequestPolicyFactory[] = [];\n\n  if (options.generateClientRequestIdHeader) {\n    factories.push(generateClientRequestIdPolicy(options.clientRequestIdHeaderName));\n  }\n\n  if (authPolicyFactory) {\n    factories.push(authPolicyFactory);\n  }\n\n  const userAgentHeaderName: string = getValueOrFunctionResult(\n    options.userAgentHeaderName,\n    getDefaultUserAgentHeaderName\n  );\n  const userAgentHeaderValue: string = getValueOrFunctionResult(\n    options.userAgent,\n    getDefaultUserAgentValue\n  );\n  if (userAgentHeaderName && userAgentHeaderValue) {\n    factories.push(userAgentPolicy({ key: userAgentHeaderName, value: userAgentHeaderValue }));\n  }\n  factories.push(redirectPolicy());\n  factories.push(rpRegistrationPolicy(options.rpRegistrationRetryTimeout));\n\n  if (!options.noRetryPolicy) {\n    factories.push(exponentialRetryPolicy());\n    factories.push(systemErrorRetryPolicy());\n    factories.push(throttlingRetryPolicy());\n  }\n\n  factories.push(deserializationPolicy(options.deserializationContentTypes));\n\n  if (isNode) {\n    factories.push(proxyPolicy(options.proxySettings));\n  }\n\n  factories.push(logPolicy({ logger: logger.info }));\n\n  return factories;\n}\n\nexport function createPipelineFromOptions(\n  pipelineOptions: InternalPipelineOptions,\n  authPolicyFactory?: RequestPolicyFactory\n): ServiceClientOptions {\n  let requestPolicyFactories: RequestPolicyFactory[] = [];\n\n  let userAgentValue = undefined;\n  if (pipelineOptions.userAgentOptions && pipelineOptions.userAgentOptions.userAgentPrefix) {\n    const userAgentInfo: string[] = [];\n    userAgentInfo.push(pipelineOptions.userAgentOptions.userAgentPrefix);\n\n    // Add the default user agent value if it isn't already specified\n    // by the userAgentPrefix option.\n    const defaultUserAgentInfo = getDefaultUserAgentValue();\n    if (userAgentInfo.indexOf(defaultUserAgentInfo) === -1) {\n      userAgentInfo.push(defaultUserAgentInfo);\n    }\n\n    userAgentValue = userAgentInfo.join(\" \");\n  }\n\n  const keepAliveOptions = {\n    ...DefaultKeepAliveOptions,\n    ...pipelineOptions.keepAliveOptions\n  };\n\n  const retryOptions = {\n    ...DefaultRetryOptions,\n    ...pipelineOptions.retryOptions\n  };\n\n  const redirectOptions = {\n    ...DefaultRedirectOptions,\n    ...pipelineOptions.redirectOptions\n  };\n\n  if (isNode) {\n    requestPolicyFactories.push(proxyPolicy(pipelineOptions.proxyOptions));\n  }\n\n  const deserializationOptions = {\n    ...DefaultDeserializationOptions,\n    ...pipelineOptions.deserializationOptions\n  };\n\n  const loggingOptions: LogPolicyOptions = {\n    ...pipelineOptions.loggingOptions\n  };\n\n  requestPolicyFactories.push(\n    tracingPolicy({ userAgent: userAgentValue }),\n    keepAlivePolicy(keepAliveOptions),\n    userAgentPolicy({ value: userAgentValue }),\n    generateClientRequestIdPolicy(),\n    deserializationPolicy(deserializationOptions.expectedContentTypes),\n    throttlingRetryPolicy(),\n    systemErrorRetryPolicy(),\n    exponentialRetryPolicy(\n      retryOptions.maxRetries,\n      retryOptions.retryDelayInMs,\n      retryOptions.maxRetryDelayInMs\n    )\n  );\n\n  if (redirectOptions.handleRedirects) {\n    requestPolicyFactories.push(redirectPolicy(redirectOptions.maxRetries));\n  }\n\n  if (authPolicyFactory) {\n    requestPolicyFactories.push(authPolicyFactory);\n  }\n\n  requestPolicyFactories.push(logPolicy(loggingOptions));\n\n  return {\n    httpClient: pipelineOptions.httpClient,\n    requestPolicyFactories\n  };\n}\n\nexport type PropertyParent = { [propertyName: string]: any };\n\n/**\n * Get the property parent for the property at the provided path when starting with the provided\n * parent object.\n */\nexport function getPropertyParent(parent: PropertyParent, propertyPath: string[]): PropertyParent {\n  if (parent && propertyPath) {\n    const propertyPathLength: number = propertyPath.length;\n    for (let i = 0; i < propertyPathLength - 1; ++i) {\n      const propertyName: string = propertyPath[i];\n      if (!parent[propertyName]) {\n        parent[propertyName] = {};\n      }\n      parent = parent[propertyName];\n    }\n  }\n  return parent;\n}\n\nfunction getOperationArgumentValueFromParameter(\n  serviceClient: ServiceClient,\n  operationArguments: OperationArguments,\n  parameter: OperationParameter,\n  serializer: Serializer\n): any {\n  return getOperationArgumentValueFromParameterPath(\n    serviceClient,\n    operationArguments,\n    parameter.parameterPath,\n    parameter.mapper,\n    serializer\n  );\n}\n\nexport function getOperationArgumentValueFromParameterPath(\n  serviceClient: ServiceClient,\n  operationArguments: OperationArguments,\n  parameterPath: ParameterPath,\n  parameterMapper: Mapper,\n  serializer: Serializer\n): any {\n  let value: any;\n  if (typeof parameterPath === \"string\") {\n    parameterPath = [parameterPath];\n  }\n  if (Array.isArray(parameterPath)) {\n    if (parameterPath.length > 0) {\n      if (parameterMapper.isConstant) {\n        value = parameterMapper.defaultValue;\n      } else {\n        let propertySearchResult: PropertySearchResult = getPropertyFromParameterPath(\n          operationArguments,\n          parameterPath\n        );\n        if (!propertySearchResult.propertyFound) {\n          propertySearchResult = getPropertyFromParameterPath(serviceClient, parameterPath);\n        }\n\n        let useDefaultValue = false;\n        if (!propertySearchResult.propertyFound) {\n          useDefaultValue =\n            parameterMapper.required ||\n            (parameterPath[0] === \"options\" && parameterPath.length === 2);\n        }\n        value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;\n      }\n\n      // Serialize just for validation purposes.\n      const parameterPathString: string = getPathStringFromParameterPath(\n        parameterPath,\n        parameterMapper\n      );\n      serializer.serialize(parameterMapper, value, parameterPathString);\n    }\n  } else {\n    if (parameterMapper.required) {\n      value = {};\n    }\n\n    for (const propertyName in parameterPath) {\n      const propertyMapper: Mapper = (parameterMapper as CompositeMapper).type.modelProperties![\n        propertyName\n      ];\n      const propertyPath: ParameterPath = parameterPath[propertyName];\n      const propertyValue: any = getOperationArgumentValueFromParameterPath(\n        serviceClient,\n        operationArguments,\n        propertyPath,\n        propertyMapper,\n        serializer\n      );\n      // Serialize just for validation purposes.\n      const propertyPathString: string = getPathStringFromParameterPath(\n        propertyPath,\n        propertyMapper\n      );\n      serializer.serialize(propertyMapper, propertyValue, propertyPathString);\n      if (propertyValue !== undefined) {\n        if (!value) {\n          value = {};\n        }\n        value[propertyName] = propertyValue;\n      }\n    }\n  }\n  return value;\n}\n\ninterface PropertySearchResult {\n  propertyValue?: any;\n  propertyFound: boolean;\n}\n\nfunction getPropertyFromParameterPath(\n  parent: { [parameterName: string]: any },\n  parameterPath: string[]\n): PropertySearchResult {\n  const result: PropertySearchResult = { propertyFound: false };\n  let i = 0;\n  for (; i < parameterPath.length; ++i) {\n    const parameterPathPart: string = parameterPath[i];\n    // Make sure to check inherited properties too, so don't use hasOwnProperty().\n    if (parent != undefined && parameterPathPart in parent) {\n      parent = parent[parameterPathPart];\n    } else {\n      break;\n    }\n  }\n  if (i === parameterPath.length) {\n    result.propertyValue = parent;\n    result.propertyFound = true;\n  }\n  return result;\n}\n\nexport function flattenResponse(\n  _response: HttpOperationResponse,\n  responseSpec: OperationResponse | undefined\n): RestResponse {\n  const parsedHeaders = _response.parsedHeaders;\n  const bodyMapper = responseSpec && responseSpec.bodyMapper;\n\n  const addOperationResponse = (obj: {}) =>\n    Object.defineProperty(obj, \"_response\", {\n      value: _response\n    });\n\n  if (bodyMapper) {\n    const typeName = bodyMapper.type.name;\n    if (typeName === \"Stream\") {\n      return addOperationResponse({\n        ...parsedHeaders,\n        blobBody: _response.blobBody,\n        readableStreamBody: _response.readableStreamBody\n      });\n    }\n\n    const modelProperties =\n      (typeName === \"Composite\" && (bodyMapper as CompositeMapper).type.modelProperties) || {};\n    const isPageableResponse = Object.keys(modelProperties).some(\n      (k) => modelProperties[k].serializedName === \"\"\n    );\n    if (typeName === \"Sequence\" || isPageableResponse) {\n      const arrayResponse = [...(_response.parsedBody || [])] as RestResponse & any[];\n\n      for (const key of Object.keys(modelProperties)) {\n        if (modelProperties[key].serializedName) {\n          arrayResponse[key] = _response.parsedBody[key];\n        }\n      }\n\n      if (parsedHeaders) {\n        for (const key of Object.keys(parsedHeaders)) {\n          arrayResponse[key] = parsedHeaders[key];\n        }\n      }\n      addOperationResponse(arrayResponse);\n      return arrayResponse;\n    }\n\n    if (typeName === \"Composite\" || typeName === \"Dictionary\") {\n      return addOperationResponse({\n        ...parsedHeaders,\n        ..._response.parsedBody\n      });\n    }\n  }\n\n  if (\n    bodyMapper ||\n    _response.request.method === \"HEAD\" ||\n    utils.isPrimitiveType(_response.parsedBody)\n  ) {\n    // primitive body types and HEAD booleans\n    return addOperationResponse({\n      ...parsedHeaders,\n      body: _response.parsedBody\n    });\n  }\n\n  return addOperationResponse({\n    ...parsedHeaders,\n    ..._response.parsedBody\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createClientLogger } from \"@azure/logger\";\n\n/**\n * The @azure/logger configuration for this package.\n */\nexport const logger = createClientLogger(\"keyvault-secrets\");\n","if (typeof Symbol === undefined || !(Symbol as any).asyncIterator) {\n  (Symbol as any).asyncIterator = Symbol.for(\"Symbol.asyncIterator\");\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"@azure/core-asynciterator-polyfill\");\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\nexport const Attributes: coreHttp.CompositeMapper = {\n  serializedName: \"Attributes\",\n  type: {\n    name: \"Composite\",\n    className: \"Attributes\",\n    modelProperties: {\n      enabled: {\n        serializedName: \"enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      notBefore: {\n        serializedName: \"nbf\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      expires: {\n        serializedName: \"exp\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      created: {\n        readOnly: true,\n        serializedName: \"created\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      updated: {\n        readOnly: true,\n        serializedName: \"updated\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const JsonWebKey: coreHttp.CompositeMapper = {\n  serializedName: \"JsonWebKey\",\n  type: {\n    name: \"Composite\",\n    className: \"JsonWebKey\",\n    modelProperties: {\n      kid: {\n        serializedName: \"kid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      kty: {\n        serializedName: \"kty\",\n        type: {\n          name: \"String\"\n        }\n      },\n      keyOps: {\n        serializedName: \"key_ops\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      n: {\n        serializedName: \"n\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      e: {\n        serializedName: \"e\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      d: {\n        serializedName: \"d\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      dp: {\n        serializedName: \"dp\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      dq: {\n        serializedName: \"dq\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      qi: {\n        serializedName: \"qi\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      p: {\n        serializedName: \"p\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      q: {\n        serializedName: \"q\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      k: {\n        serializedName: \"k\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      t: {\n        serializedName: \"key_hsm\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      crv: {\n        serializedName: \"crv\",\n        type: {\n          name: \"String\"\n        }\n      },\n      x: {\n        serializedName: \"x\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      y: {\n        serializedName: \"y\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyAttributes: coreHttp.CompositeMapper = {\n  serializedName: \"KeyAttributes\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyAttributes\",\n    modelProperties: {\n      ...Attributes.type.modelProperties,\n      recoveryLevel: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"recoveryLevel\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyBundle: coreHttp.CompositeMapper = {\n  serializedName: \"KeyBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyBundle\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        type: {\n          name: \"Composite\",\n          className: \"JsonWebKey\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      managed: {\n        readOnly: true,\n        serializedName: \"managed\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyItem: coreHttp.CompositeMapper = {\n  serializedName: \"KeyItem\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyItem\",\n    modelProperties: {\n      kid: {\n        serializedName: \"kid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      managed: {\n        readOnly: true,\n        serializedName: \"managed\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedKeyBundle: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedKeyBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedKeyBundle\",\n    modelProperties: {\n      ...KeyBundle.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedKeyItem: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedKeyItem\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedKeyItem\",\n    modelProperties: {\n      ...KeyItem.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const SecretAttributes: coreHttp.CompositeMapper = {\n  serializedName: \"SecretAttributes\",\n  type: {\n    name: \"Composite\",\n    className: \"SecretAttributes\",\n    modelProperties: {\n      ...Attributes.type.modelProperties,\n      recoveryLevel: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"recoveryLevel\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SecretBundle: coreHttp.CompositeMapper = {\n  serializedName: \"SecretBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"SecretBundle\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"String\"\n        }\n      },\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentType: {\n        serializedName: \"contentType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"SecretAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      kid: {\n        readOnly: true,\n        serializedName: \"kid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      managed: {\n        readOnly: true,\n        serializedName: \"managed\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const SecretItem: coreHttp.CompositeMapper = {\n  serializedName: \"SecretItem\",\n  type: {\n    name: \"Composite\",\n    className: \"SecretItem\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"SecretAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      contentType: {\n        serializedName: \"contentType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      managed: {\n        readOnly: true,\n        serializedName: \"managed\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedSecretBundle: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedSecretBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedSecretBundle\",\n    modelProperties: {\n      ...SecretBundle.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedSecretItem: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedSecretItem\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedSecretItem\",\n    modelProperties: {\n      ...SecretItem.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const SecretRestoreParameters: coreHttp.CompositeMapper = {\n  serializedName: \"SecretRestoreParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"SecretRestoreParameters\",\n    modelProperties: {\n      secretBundleBackup: {\n        required: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageRestoreParameters: coreHttp.CompositeMapper = {\n  serializedName: \"StorageRestoreParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageRestoreParameters\",\n    modelProperties: {\n      storageBundleBackup: {\n        required: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateAttributes: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateAttributes\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateAttributes\",\n    modelProperties: {\n      ...Attributes.type.modelProperties,\n      recoveryLevel: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"recoveryLevel\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateItem: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateItem\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateItem\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificateAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      x509Thumbprint: {\n        serializedName: \"x5t\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateIssuerItem: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateIssuerItem\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateIssuerItem\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      provider: {\n        serializedName: \"provider\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyProperties: coreHttp.CompositeMapper = {\n  serializedName: \"KeyProperties\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyProperties\",\n    modelProperties: {\n      exportable: {\n        serializedName: \"exportable\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      keyType: {\n        serializedName: \"kty\",\n        type: {\n          name: \"String\"\n        }\n      },\n      keySize: {\n        serializedName: \"key_size\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      reuseKey: {\n        serializedName: \"reuse_key\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      curve: {\n        serializedName: \"crv\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SecretProperties: coreHttp.CompositeMapper = {\n  serializedName: \"SecretProperties\",\n  type: {\n    name: \"Composite\",\n    className: \"SecretProperties\",\n    modelProperties: {\n      contentType: {\n        serializedName: \"contentType\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SubjectAlternativeNames: coreHttp.CompositeMapper = {\n  serializedName: \"SubjectAlternativeNames\",\n  type: {\n    name: \"Composite\",\n    className: \"SubjectAlternativeNames\",\n    modelProperties: {\n      emails: {\n        serializedName: \"emails\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      dnsNames: {\n        serializedName: \"dns_names\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      upns: {\n        serializedName: \"upns\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const X509CertificateProperties: coreHttp.CompositeMapper = {\n  serializedName: \"X509CertificateProperties\",\n  type: {\n    name: \"Composite\",\n    className: \"X509CertificateProperties\",\n    modelProperties: {\n      subject: {\n        serializedName: \"subject\",\n        type: {\n          name: \"String\"\n        }\n      },\n      ekus: {\n        serializedName: \"ekus\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      subjectAlternativeNames: {\n        serializedName: \"sans\",\n        type: {\n          name: \"Composite\",\n          className: \"SubjectAlternativeNames\"\n        }\n      },\n      keyUsage: {\n        serializedName: \"key_usage\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      validityInMonths: {\n        serializedName: \"validity_months\",\n        constraints: {\n          InclusiveMinimum: 0\n        },\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Trigger: coreHttp.CompositeMapper = {\n  serializedName: \"Trigger\",\n  type: {\n    name: \"Composite\",\n    className: \"Trigger\",\n    modelProperties: {\n      lifetimePercentage: {\n        serializedName: \"lifetime_percentage\",\n        constraints: {\n          InclusiveMaximum: 99,\n          InclusiveMinimum: 1\n        },\n        type: {\n          name: \"Number\"\n        }\n      },\n      daysBeforeExpiry: {\n        serializedName: \"days_before_expiry\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Action: coreHttp.CompositeMapper = {\n  serializedName: \"Action\",\n  type: {\n    name: \"Composite\",\n    className: \"Action\",\n    modelProperties: {\n      actionType: {\n        serializedName: \"action_type\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"EmailContacts\", \"AutoRenew\"]\n        }\n      }\n    }\n  }\n};\n\nexport const LifetimeAction: coreHttp.CompositeMapper = {\n  serializedName: \"LifetimeAction\",\n  type: {\n    name: \"Composite\",\n    className: \"LifetimeAction\",\n    modelProperties: {\n      trigger: {\n        serializedName: \"trigger\",\n        type: {\n          name: \"Composite\",\n          className: \"Trigger\"\n        }\n      },\n      action: {\n        serializedName: \"action\",\n        type: {\n          name: \"Composite\",\n          className: \"Action\"\n        }\n      }\n    }\n  }\n};\n\nexport const IssuerParameters: coreHttp.CompositeMapper = {\n  serializedName: \"IssuerParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"IssuerParameters\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      certificateType: {\n        serializedName: \"cty\",\n        type: {\n          name: \"String\"\n        }\n      },\n      certificateTransparency: {\n        serializedName: \"cert_transparency\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificatePolicy: coreHttp.CompositeMapper = {\n  serializedName: \"CertificatePolicy\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificatePolicy\",\n    modelProperties: {\n      id: {\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      keyProperties: {\n        serializedName: \"key_props\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyProperties\"\n        }\n      },\n      secretProperties: {\n        serializedName: \"secret_props\",\n        type: {\n          name: \"Composite\",\n          className: \"SecretProperties\"\n        }\n      },\n      x509CertificateProperties: {\n        serializedName: \"x509_props\",\n        type: {\n          name: \"Composite\",\n          className: \"X509CertificateProperties\"\n        }\n      },\n      lifetimeActions: {\n        serializedName: \"lifetime_actions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"LifetimeAction\"\n            }\n          }\n        }\n      },\n      issuerParameters: {\n        serializedName: \"issuer\",\n        type: {\n          name: \"Composite\",\n          className: \"IssuerParameters\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificateAttributes\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateBundle: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateBundle\",\n    modelProperties: {\n      id: {\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      kid: {\n        readOnly: true,\n        serializedName: \"kid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sid: {\n        readOnly: true,\n        serializedName: \"sid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      x509Thumbprint: {\n        readOnly: true,\n        serializedName: \"x5t\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      policy: {\n        readOnly: true,\n        serializedName: \"policy\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificatePolicy\"\n        }\n      },\n      cer: {\n        serializedName: \"cer\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      contentType: {\n        serializedName: \"contentType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificateAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedCertificateBundle: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedCertificateBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedCertificateBundle\",\n    modelProperties: {\n      ...CertificateBundle.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedCertificateItem: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedCertificateItem\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedCertificateItem\",\n    modelProperties: {\n      ...CertificateItem.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorModel: coreHttp.CompositeMapper = {\n  serializedName: \"Error\",\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      code: {\n        readOnly: true,\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        readOnly: true,\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      },\n      innerError: {\n        readOnly: true,\n        serializedName: \"innererror\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorModel\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateOperation: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateOperation\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateOperation\",\n    modelProperties: {\n      id: {\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      issuerParameters: {\n        serializedName: \"issuer\",\n        type: {\n          name: \"Composite\",\n          className: \"IssuerParameters\"\n        }\n      },\n      csr: {\n        serializedName: \"csr\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      cancellationRequested: {\n        serializedName: \"cancellation_requested\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      statusDetails: {\n        serializedName: \"status_details\",\n        type: {\n          name: \"String\"\n        }\n      },\n      error: {\n        serializedName: \"error\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorModel\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"request_id\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const IssuerCredentials: coreHttp.CompositeMapper = {\n  serializedName: \"IssuerCredentials\",\n  type: {\n    name: \"Composite\",\n    className: \"IssuerCredentials\",\n    modelProperties: {\n      accountId: {\n        serializedName: \"account_id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      password: {\n        serializedName: \"pwd\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AdministratorDetails: coreHttp.CompositeMapper = {\n  serializedName: \"AdministratorDetails\",\n  type: {\n    name: \"Composite\",\n    className: \"AdministratorDetails\",\n    modelProperties: {\n      firstName: {\n        serializedName: \"first_name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastName: {\n        serializedName: \"last_name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      emailAddress: {\n        serializedName: \"email\",\n        type: {\n          name: \"String\"\n        }\n      },\n      phone: {\n        serializedName: \"phone\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OrganizationDetails: coreHttp.CompositeMapper = {\n  serializedName: \"OrganizationDetails\",\n  type: {\n    name: \"Composite\",\n    className: \"OrganizationDetails\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      adminDetails: {\n        serializedName: \"admin_details\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"AdministratorDetails\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const IssuerAttributes: coreHttp.CompositeMapper = {\n  serializedName: \"IssuerAttributes\",\n  type: {\n    name: \"Composite\",\n    className: \"IssuerAttributes\",\n    modelProperties: {\n      enabled: {\n        serializedName: \"enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      created: {\n        readOnly: true,\n        serializedName: \"created\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      updated: {\n        readOnly: true,\n        serializedName: \"updated\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const IssuerBundle: coreHttp.CompositeMapper = {\n  serializedName: \"IssuerBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"IssuerBundle\",\n    modelProperties: {\n      id: {\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      provider: {\n        serializedName: \"provider\",\n        type: {\n          name: \"String\"\n        }\n      },\n      credentials: {\n        serializedName: \"credentials\",\n        type: {\n          name: \"Composite\",\n          className: \"IssuerCredentials\"\n        }\n      },\n      organizationDetails: {\n        serializedName: \"org_details\",\n        type: {\n          name: \"Composite\",\n          className: \"OrganizationDetails\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"IssuerAttributes\"\n        }\n      }\n    }\n  }\n};\n\nexport const Contact: coreHttp.CompositeMapper = {\n  serializedName: \"Contact\",\n  type: {\n    name: \"Composite\",\n    className: \"Contact\",\n    modelProperties: {\n      emailAddress: {\n        serializedName: \"email\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      phone: {\n        serializedName: \"phone\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Contacts: coreHttp.CompositeMapper = {\n  serializedName: \"Contacts\",\n  type: {\n    name: \"Composite\",\n    className: \"Contacts\",\n    modelProperties: {\n      id: {\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contactList: {\n        serializedName: \"contacts\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Contact\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const KeyCreateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"KeyCreateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyCreateParameters\",\n    modelProperties: {\n      kty: {\n        required: true,\n        serializedName: \"kty\",\n        constraints: {\n          MinLength: 1\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      keySize: {\n        serializedName: \"key_size\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      keyOps: {\n        serializedName: \"key_ops\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      keyAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      curve: {\n        serializedName: \"crv\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyImportParameters: coreHttp.CompositeMapper = {\n  serializedName: \"KeyImportParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyImportParameters\",\n    modelProperties: {\n      hsm: {\n        serializedName: \"Hsm\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      key: {\n        required: true,\n        serializedName: \"key\",\n        type: {\n          name: \"Composite\",\n          className: \"JsonWebKey\"\n        }\n      },\n      keyAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const KeyOperationsParameters: coreHttp.CompositeMapper = {\n  serializedName: \"KeyOperationsParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyOperationsParameters\",\n    modelProperties: {\n      algorithm: {\n        required: true,\n        serializedName: \"alg\",\n        constraints: {\n          MinLength: 1\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        required: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeySignParameters: coreHttp.CompositeMapper = {\n  serializedName: \"KeySignParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"KeySignParameters\",\n    modelProperties: {\n      algorithm: {\n        required: true,\n        serializedName: \"alg\",\n        constraints: {\n          MinLength: 1\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        required: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyVerifyParameters: coreHttp.CompositeMapper = {\n  serializedName: \"KeyVerifyParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyVerifyParameters\",\n    modelProperties: {\n      algorithm: {\n        required: true,\n        serializedName: \"alg\",\n        constraints: {\n          MinLength: 1\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      digest: {\n        required: true,\n        serializedName: \"digest\",\n        type: {\n          name: \"Base64Url\"\n        }\n      },\n      signature: {\n        required: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyUpdateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"KeyUpdateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyUpdateParameters\",\n    modelProperties: {\n      keyOps: {\n        serializedName: \"key_ops\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      keyAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const KeyRestoreParameters: coreHttp.CompositeMapper = {\n  serializedName: \"KeyRestoreParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyRestoreParameters\",\n    modelProperties: {\n      keyBundleBackup: {\n        required: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const SecretSetParameters: coreHttp.CompositeMapper = {\n  serializedName: \"SecretSetParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"SecretSetParameters\",\n    modelProperties: {\n      value: {\n        required: true,\n        serializedName: \"value\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      contentType: {\n        serializedName: \"contentType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      secretAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"SecretAttributes\"\n        }\n      }\n    }\n  }\n};\n\nexport const SecretUpdateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"SecretUpdateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"SecretUpdateParameters\",\n    modelProperties: {\n      contentType: {\n        serializedName: \"contentType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      secretAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"SecretAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateCreateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateCreateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateCreateParameters\",\n    modelProperties: {\n      certificatePolicy: {\n        serializedName: \"policy\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificatePolicy\"\n        }\n      },\n      certificateAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificateAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateImportParameters: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateImportParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateImportParameters\",\n    modelProperties: {\n      base64EncodedCertificate: {\n        required: true,\n        serializedName: \"value\",\n        type: {\n          name: \"String\"\n        }\n      },\n      password: {\n        serializedName: \"pwd\",\n        type: {\n          name: \"String\"\n        }\n      },\n      certificatePolicy: {\n        serializedName: \"policy\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificatePolicy\"\n        }\n      },\n      certificateAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificateAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateUpdateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateUpdateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateUpdateParameters\",\n    modelProperties: {\n      certificatePolicy: {\n        serializedName: \"policy\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificatePolicy\"\n        }\n      },\n      certificateAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificateAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateMergeParameters: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateMergeParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateMergeParameters\",\n    modelProperties: {\n      x509Certificates: {\n        required: true,\n        serializedName: \"x5c\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"ByteArray\"\n            }\n          }\n        }\n      },\n      certificateAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"CertificateAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateIssuerSetParameters: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateIssuerSetParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateIssuerSetParameters\",\n    modelProperties: {\n      provider: {\n        required: true,\n        serializedName: \"provider\",\n        type: {\n          name: \"String\"\n        }\n      },\n      credentials: {\n        serializedName: \"credentials\",\n        type: {\n          name: \"Composite\",\n          className: \"IssuerCredentials\"\n        }\n      },\n      organizationDetails: {\n        serializedName: \"org_details\",\n        type: {\n          name: \"Composite\",\n          className: \"OrganizationDetails\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"IssuerAttributes\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateIssuerUpdateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateIssuerUpdateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateIssuerUpdateParameters\",\n    modelProperties: {\n      provider: {\n        serializedName: \"provider\",\n        type: {\n          name: \"String\"\n        }\n      },\n      credentials: {\n        serializedName: \"credentials\",\n        type: {\n          name: \"Composite\",\n          className: \"IssuerCredentials\"\n        }\n      },\n      organizationDetails: {\n        serializedName: \"org_details\",\n        type: {\n          name: \"Composite\",\n          className: \"OrganizationDetails\"\n        }\n      },\n      attributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"IssuerAttributes\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateOperationUpdateParameter: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateOperationUpdateParameter\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateOperationUpdateParameter\",\n    modelProperties: {\n      cancellationRequested: {\n        required: true,\n        serializedName: \"cancellation_requested\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyOperationResult: coreHttp.CompositeMapper = {\n  serializedName: \"KeyOperationResult\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyOperationResult\",\n    modelProperties: {\n      kid: {\n        readOnly: true,\n        serializedName: \"kid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      result: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyVerifyResult: coreHttp.CompositeMapper = {\n  serializedName: \"KeyVerifyResult\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyVerifyResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyListResult: coreHttp.CompositeMapper = {\n  serializedName: \"KeyListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"KeyItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedKeyListResult: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedKeyListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedKeyListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DeletedKeyItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SecretListResult: coreHttp.CompositeMapper = {\n  serializedName: \"SecretListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"SecretListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SecretItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedSecretListResult: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedSecretListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedSecretListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DeletedSecretItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateListResult: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CertificateItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedCertificateListResult: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedCertificateListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedCertificateListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DeletedCertificateItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateIssuerListResult: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateIssuerListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateIssuerListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CertificateIssuerItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BackupKeyResult: coreHttp.CompositeMapper = {\n  serializedName: \"BackupKeyResult\",\n  type: {\n    name: \"Composite\",\n    className: \"BackupKeyResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const BackupSecretResult: coreHttp.CompositeMapper = {\n  serializedName: \"BackupSecretResult\",\n  type: {\n    name: \"Composite\",\n    className: \"BackupSecretResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const BackupStorageResult: coreHttp.CompositeMapper = {\n  serializedName: \"BackupStorageResult\",\n  type: {\n    name: \"Composite\",\n    className: \"BackupStorageResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const PendingCertificateSigningRequestResult: coreHttp.CompositeMapper = {\n  serializedName: \"PendingCertificateSigningRequestResult\",\n  type: {\n    name: \"Composite\",\n    className: \"PendingCertificateSigningRequestResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageAccountAttributes: coreHttp.CompositeMapper = {\n  serializedName: \"StorageAccountAttributes\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageAccountAttributes\",\n    modelProperties: {\n      enabled: {\n        serializedName: \"enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      created: {\n        readOnly: true,\n        serializedName: \"created\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      updated: {\n        readOnly: true,\n        serializedName: \"updated\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      recoveryLevel: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"recoveryLevel\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageBundle: coreHttp.CompositeMapper = {\n  serializedName: \"StorageBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageBundle\",\n    modelProperties: {\n      id: {\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      resourceId: {\n        readOnly: true,\n        serializedName: \"resourceId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      activeKeyName: {\n        readOnly: true,\n        serializedName: \"activeKeyName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      autoRegenerateKey: {\n        readOnly: true,\n        serializedName: \"autoRegenerateKey\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      regenerationPeriod: {\n        readOnly: true,\n        serializedName: \"regenerationPeriod\",\n        type: {\n          name: \"String\"\n        }\n      },\n      attributes: {\n        readOnly: true,\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"StorageAccountAttributes\"\n        }\n      },\n      tags: {\n        readOnly: true,\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedStorageBundle: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedStorageBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedStorageBundle\",\n    modelProperties: {\n      ...StorageBundle.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageAccountCreateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"StorageAccountCreateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageAccountCreateParameters\",\n    modelProperties: {\n      resourceId: {\n        required: true,\n        serializedName: \"resourceId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      activeKeyName: {\n        required: true,\n        serializedName: \"activeKeyName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      autoRegenerateKey: {\n        required: true,\n        serializedName: \"autoRegenerateKey\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      regenerationPeriod: {\n        serializedName: \"regenerationPeriod\",\n        type: {\n          name: \"String\"\n        }\n      },\n      storageAccountAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"StorageAccountAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const StorageAccountUpdateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"StorageAccountUpdateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageAccountUpdateParameters\",\n    modelProperties: {\n      activeKeyName: {\n        serializedName: \"activeKeyName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      autoRegenerateKey: {\n        serializedName: \"autoRegenerateKey\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      regenerationPeriod: {\n        serializedName: \"regenerationPeriod\",\n        type: {\n          name: \"String\"\n        }\n      },\n      storageAccountAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"StorageAccountAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const StorageAccountRegenerteKeyParameters: coreHttp.CompositeMapper = {\n  serializedName: \"StorageAccountRegenerteKeyParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageAccountRegenerteKeyParameters\",\n    modelProperties: {\n      keyName: {\n        required: true,\n        serializedName: \"keyName\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageAccountItem: coreHttp.CompositeMapper = {\n  serializedName: \"StorageAccountItem\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageAccountItem\",\n    modelProperties: {\n      id: {\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      resourceId: {\n        readOnly: true,\n        serializedName: \"resourceId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      attributes: {\n        readOnly: true,\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"StorageAccountAttributes\"\n        }\n      },\n      tags: {\n        readOnly: true,\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedStorageAccountItem: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedStorageAccountItem\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedStorageAccountItem\",\n    modelProperties: {\n      ...StorageAccountItem.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageListResult: coreHttp.CompositeMapper = {\n  serializedName: \"StorageListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"StorageAccountItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedStorageListResult: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedStorageListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedStorageListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DeletedStorageAccountItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SasDefinitionAttributes: coreHttp.CompositeMapper = {\n  serializedName: \"SasDefinitionAttributes\",\n  type: {\n    name: \"Composite\",\n    className: \"SasDefinitionAttributes\",\n    modelProperties: {\n      enabled: {\n        serializedName: \"enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      created: {\n        readOnly: true,\n        serializedName: \"created\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      updated: {\n        readOnly: true,\n        serializedName: \"updated\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      recoveryLevel: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"recoveryLevel\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SasDefinitionBundle: coreHttp.CompositeMapper = {\n  serializedName: \"SasDefinitionBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"SasDefinitionBundle\",\n    modelProperties: {\n      id: {\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      secretId: {\n        readOnly: true,\n        serializedName: \"sid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      templateUri: {\n        readOnly: true,\n        serializedName: \"templateUri\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sasType: {\n        readOnly: true,\n        serializedName: \"sasType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      validityPeriod: {\n        readOnly: true,\n        serializedName: \"validityPeriod\",\n        type: {\n          name: \"String\"\n        }\n      },\n      attributes: {\n        readOnly: true,\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"SasDefinitionAttributes\"\n        }\n      },\n      tags: {\n        readOnly: true,\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedSasDefinitionBundle: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedSasDefinitionBundle\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedSasDefinitionBundle\",\n    modelProperties: {\n      ...SasDefinitionBundle.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const SasDefinitionItem: coreHttp.CompositeMapper = {\n  serializedName: \"SasDefinitionItem\",\n  type: {\n    name: \"Composite\",\n    className: \"SasDefinitionItem\",\n    modelProperties: {\n      id: {\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      secretId: {\n        readOnly: true,\n        serializedName: \"sid\",\n        type: {\n          name: \"String\"\n        }\n      },\n      attributes: {\n        readOnly: true,\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"SasDefinitionAttributes\"\n        }\n      },\n      tags: {\n        readOnly: true,\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedSasDefinitionItem: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedSasDefinitionItem\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedSasDefinitionItem\",\n    modelProperties: {\n      ...SasDefinitionItem.type.modelProperties,\n      recoveryId: {\n        serializedName: \"recoveryId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduledPurgeDate: {\n        readOnly: true,\n        serializedName: \"scheduledPurgeDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      },\n      deletedDate: {\n        readOnly: true,\n        serializedName: \"deletedDate\",\n        type: {\n          name: \"UnixTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const SasDefinitionListResult: coreHttp.CompositeMapper = {\n  serializedName: \"SasDefinitionListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"SasDefinitionListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SasDefinitionItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeletedSasDefinitionListResult: coreHttp.CompositeMapper = {\n  serializedName: \"DeletedSasDefinitionListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"DeletedSasDefinitionListResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DeletedSasDefinitionItem\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SasDefinitionCreateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"SasDefinitionCreateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"SasDefinitionCreateParameters\",\n    modelProperties: {\n      templateUri: {\n        required: true,\n        serializedName: \"templateUri\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sasType: {\n        required: true,\n        serializedName: \"sasType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      validityPeriod: {\n        required: true,\n        serializedName: \"validityPeriod\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sasDefinitionAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"SasDefinitionAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SasDefinitionUpdateParameters: coreHttp.CompositeMapper = {\n  serializedName: \"SasDefinitionUpdateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"SasDefinitionUpdateParameters\",\n    modelProperties: {\n      templateUri: {\n        serializedName: \"templateUri\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sasType: {\n        serializedName: \"sasType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      validityPeriod: {\n        serializedName: \"validityPeriod\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sasDefinitionAttributes: {\n        serializedName: \"attributes\",\n        type: {\n          name: \"Composite\",\n          className: \"SasDefinitionAttributes\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const KeyVaultError: coreHttp.CompositeMapper = {\n  serializedName: \"KeyVaultError\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyVaultError\",\n    modelProperties: {\n      error: {\n        readOnly: true,\n        serializedName: \"error\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorModel\"\n        }\n      }\n    }\n  }\n};\n\nexport const CertificateRestoreParameters: coreHttp.CompositeMapper = {\n  serializedName: \"CertificateRestoreParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"CertificateRestoreParameters\",\n    modelProperties: {\n      certificateBundleBackup: {\n        required: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n\nexport const BackupCertificateResult: coreHttp.CompositeMapper = {\n  serializedName: \"BackupCertificateResult\",\n  type: {\n    name: \"Composite\",\n    className: \"BackupCertificateResult\",\n    modelProperties: {\n      value: {\n        readOnly: true,\n        serializedName: \"value\",\n        type: {\n          name: \"Base64Url\"\n        }\n      }\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\nexport const apiVersion: coreHttp.OperationQueryParameter = {\n  parameterPath: \"apiVersion\",\n  mapper: {\n    required: true,\n    serializedName: \"api-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const certificateName0: coreHttp.OperationURLParameter = {\n  parameterPath: \"certificateName\",\n  mapper: {\n    required: true,\n    serializedName: \"certificate-name\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const certificateName1: coreHttp.OperationURLParameter = {\n  parameterPath: \"certificateName\",\n  mapper: {\n    required: true,\n    serializedName: \"certificate-name\",\n    constraints: {\n      Pattern: /^[0-9a-zA-Z-]+$/\n    },\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const certificateVersion: coreHttp.OperationURLParameter = {\n  parameterPath: \"certificateVersion\",\n  mapper: {\n    required: true,\n    serializedName: \"certificate-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const includePending: coreHttp.OperationQueryParameter = {\n  parameterPath: [\"options\", \"includePending\"],\n  mapper: {\n    serializedName: \"includePending\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\nexport const issuerName: coreHttp.OperationURLParameter = {\n  parameterPath: \"issuerName\",\n  mapper: {\n    required: true,\n    serializedName: \"issuer-name\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const keyName0: coreHttp.OperationURLParameter = {\n  parameterPath: \"keyName\",\n  mapper: {\n    required: true,\n    serializedName: \"key-name\",\n    constraints: {\n      Pattern: /^[0-9a-zA-Z-]+$/\n    },\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const keyName1: coreHttp.OperationURLParameter = {\n  parameterPath: \"keyName\",\n  mapper: {\n    required: true,\n    serializedName: \"key-name\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const keyVersion: coreHttp.OperationURLParameter = {\n  parameterPath: \"keyVersion\",\n  mapper: {\n    required: true,\n    serializedName: \"key-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const maxresults: coreHttp.OperationQueryParameter = {\n  parameterPath: [\"options\", \"maxresults\"],\n  mapper: {\n    serializedName: \"maxresults\",\n    constraints: {\n      InclusiveMaximum: 25,\n      InclusiveMinimum: 1\n    },\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const sasDefinitionName: coreHttp.OperationURLParameter = {\n  parameterPath: \"sasDefinitionName\",\n  mapper: {\n    required: true,\n    serializedName: \"sas-definition-name\",\n    constraints: {\n      Pattern: /^[0-9a-zA-Z]+$/\n    },\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const secretName0: coreHttp.OperationURLParameter = {\n  parameterPath: \"secretName\",\n  mapper: {\n    required: true,\n    serializedName: \"secret-name\",\n    constraints: {\n      Pattern: /^[0-9a-zA-Z-]+$/\n    },\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const secretName1: coreHttp.OperationURLParameter = {\n  parameterPath: \"secretName\",\n  mapper: {\n    required: true,\n    serializedName: \"secret-name\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const secretVersion: coreHttp.OperationURLParameter = {\n  parameterPath: \"secretVersion\",\n  mapper: {\n    required: true,\n    serializedName: \"secret-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const storageAccountName0: coreHttp.OperationURLParameter = {\n  parameterPath: \"storageAccountName\",\n  mapper: {\n    required: true,\n    serializedName: \"storage-account-name\",\n    constraints: {\n      Pattern: /^[0-9a-zA-Z]+$/\n    },\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const storageAccountName1: coreHttp.OperationURLParameter = {\n  parameterPath: \"storageAccountName\",\n  mapper: {\n    required: true,\n    serializedName: \"storage-account-name\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const vaultBaseUrl: coreHttp.OperationURLParameter = {\n  parameterPath: \"vaultBaseUrl\",\n  mapper: {\n    required: true,\n    serializedName: \"vaultBaseUrl\",\n    defaultValue: \"\",\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\nconst packageName = \"@azure/keyvault-secrets\";\nexport const packageVersion = \"4.0.3\";\n\nexport class KeyVaultClientContext extends coreHttp.ServiceClient {\n  apiVersion: string;\n  credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials;\n\n  /**\n   * Initializes a new instance of the KeyVaultClientContext class.\n   * @param apiVersion Client API version.\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param [options] The parameter options\n   */\n  constructor(\n    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,\n    apiVersion: string,\n    options?: coreHttp.ServiceClientOptions\n  ) {\n    if (apiVersion == undefined) {\n      throw new Error(\"'apiVersion' cannot be null.\");\n    }\n    if (credentials == undefined) {\n      throw new Error(\"'credentials' cannot be null.\");\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    if (!options.userAgent) {\n      const defaultUserAgent = coreHttp.getDefaultUserAgentValue();\n      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;\n    }\n\n    super(credentials, options);\n\n    this.baseUri = \"{vaultBaseUrl}\";\n    this.requestContentType = \"application/json; charset=utf-8\";\n    this.apiVersion = apiVersion;\n    this.credentials = credentials;\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Models from \"./models\";\nimport * as Mappers from \"./models/mappers\";\nimport * as Parameters from \"./models/parameters\";\nimport { KeyVaultClientContext } from \"./keyVaultClientContext\";\n\nclass KeyVaultClient extends KeyVaultClientContext {\n  /**\n   * Initializes a new instance of the KeyVaultClient class.\n   * @param apiVersion Client API version.\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param [options] The parameter options\n   */\n  constructor(\n    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,\n    apiVersion: string,\n    options?: coreHttp.ServiceClientOptions\n  ) {\n    super(credentials, apiVersion, options);\n  }\n\n  /**\n   * The create key operation can be used to create any key type in Azure Key Vault. If the named key\n   * already exists, Azure Key Vault creates a new version of the key. It requires the keys/create\n   * permission.\n   * @summary Creates a new key, stores it, then returns key parameters and attributes to the client.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name for the new key. The system will generate the version name for the new\n   * key.\n   * @param kty The type of key to create. For valid values, see JsonWebKeyType. Possible values\n   * include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'\n   * @param [options] The optional parameters\n   * @returns Promise<Models.CreateKeyResponse>\n   */\n  createKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    kty: Models.JsonWebKeyType,\n    options?: Models.KeyVaultClientCreateKeyOptionalParams\n  ): Promise<Models.CreateKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name for the new key. The system will generate the version name for the new\n   * key.\n   * @param kty The type of key to create. For valid values, see JsonWebKeyType. Possible values\n   * include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'\n   * @param callback The callback\n   */\n  createKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    kty: Models.JsonWebKeyType,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name for the new key. The system will generate the version name for the new\n   * key.\n   * @param kty The type of key to create. For valid values, see JsonWebKeyType. Possible values\n   * include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  createKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    kty: Models.JsonWebKeyType,\n    options: Models.KeyVaultClientCreateKeyOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  createKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    kty: Models.JsonWebKeyType,\n    options?:\n      | Models.KeyVaultClientCreateKeyOptionalParams\n      | coreHttp.ServiceCallback<Models.KeyBundle>,\n    callback?: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): Promise<Models.CreateKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        kty,\n        options\n      },\n      createKeyOperationSpec,\n      callback\n    ) as Promise<Models.CreateKeyResponse>;\n  }\n\n  /**\n   * The import key operation may be used to import any key type into an Azure Key Vault. If the\n   * named key already exists, Azure Key Vault creates a new version of the key. This operation\n   * requires the keys/import permission.\n   * @summary Imports an externally created key, stores it, and returns key parameters and attributes\n   * to the client.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName Name for the imported key.\n   * @param key The Json web key\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ImportKeyResponse>\n   */\n  importKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    key: Models.JsonWebKey,\n    options?: Models.KeyVaultClientImportKeyOptionalParams\n  ): Promise<Models.ImportKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName Name for the imported key.\n   * @param key The Json web key\n   * @param callback The callback\n   */\n  importKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    key: Models.JsonWebKey,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName Name for the imported key.\n   * @param key The Json web key\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  importKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    key: Models.JsonWebKey,\n    options: Models.KeyVaultClientImportKeyOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  importKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    key: Models.JsonWebKey,\n    options?:\n      | Models.KeyVaultClientImportKeyOptionalParams\n      | coreHttp.ServiceCallback<Models.KeyBundle>,\n    callback?: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): Promise<Models.ImportKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        key,\n        options\n      },\n      importKeyOperationSpec,\n      callback\n    ) as Promise<Models.ImportKeyResponse>;\n  }\n\n  /**\n   * The delete key operation cannot be used to remove individual versions of a key. This operation\n   * removes the cryptographic material associated with the key, which means the key is not usable\n   * for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the\n   * keys/delete permission.\n   * @summary Deletes a key of any type from storage in Azure Key Vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key to delete.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DeleteKeyResponse>\n   */\n  deleteKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.DeleteKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key to delete.\n   * @param callback The callback\n   */\n  deleteKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedKeyBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key to delete.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedKeyBundle>\n  ): void;\n  deleteKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeletedKeyBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedKeyBundle>\n  ): Promise<Models.DeleteKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        options\n      },\n      deleteKeyOperationSpec,\n      callback\n    ) as Promise<Models.DeleteKeyResponse>;\n  }\n\n  /**\n   * In order to perform this operation, the key must already exist in the Key Vault. Note: The\n   * cryptographic material of a key itself cannot be changed. This operation requires the\n   * keys/update permission.\n   * @summary The update key operation changes specified attributes of a stored key and can be\n   * applied to any key type and key version stored in Azure Key Vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of key to update.\n   * @param keyVersion The version of the key to update.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UpdateKeyResponse>\n   */\n  updateKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    options?: Models.KeyVaultClientUpdateKeyOptionalParams\n  ): Promise<Models.UpdateKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of key to update.\n   * @param keyVersion The version of the key to update.\n   * @param callback The callback\n   */\n  updateKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of key to update.\n   * @param keyVersion The version of the key to update.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    options: Models.KeyVaultClientUpdateKeyOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  updateKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    options?:\n      | Models.KeyVaultClientUpdateKeyOptionalParams\n      | coreHttp.ServiceCallback<Models.KeyBundle>,\n    callback?: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): Promise<Models.UpdateKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        keyVersion,\n        options\n      },\n      updateKeyOperationSpec,\n      callback\n    ) as Promise<Models.UpdateKeyResponse>;\n  }\n\n  /**\n   * The get key operation is applicable to all key types. If the requested key is symmetric, then no\n   * key material is released in the response. This operation requires the keys/get permission.\n   * @summary Gets the public part of a stored key.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key to get.\n   * @param keyVersion Adding the version parameter retrieves a specific version of a key.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetKeyResponse>\n   */\n  getKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key to get.\n   * @param keyVersion Adding the version parameter retrieves a specific version of a key.\n   * @param callback The callback\n   */\n  getKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key to get.\n   * @param keyVersion Adding the version parameter retrieves a specific version of a key.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  getKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyBundle>,\n    callback?: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): Promise<Models.GetKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        keyVersion,\n        options\n      },\n      getKeyOperationSpec,\n      callback\n    ) as Promise<Models.GetKeyResponse>;\n  }\n\n  /**\n   * The full key identifier, attributes, and tags are provided in the response. This operation\n   * requires the keys/list permission.\n   * @summary Retrieves a list of individual key versions with the same key name.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetKeyVersionsResponse>\n   */\n  getKeyVersions(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: Models.KeyVaultClientGetKeyVersionsOptionalParams\n  ): Promise<Models.GetKeyVersionsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param callback The callback\n   */\n  getKeyVersions(\n    vaultBaseUrl: string,\n    keyName: string,\n    callback: coreHttp.ServiceCallback<Models.KeyListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getKeyVersions(\n    vaultBaseUrl: string,\n    keyName: string,\n    options: Models.KeyVaultClientGetKeyVersionsOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.KeyListResult>\n  ): void;\n  getKeyVersions(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?:\n      | Models.KeyVaultClientGetKeyVersionsOptionalParams\n      | coreHttp.ServiceCallback<Models.KeyListResult>,\n    callback?: coreHttp.ServiceCallback<Models.KeyListResult>\n  ): Promise<Models.GetKeyVersionsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        options\n      },\n      getKeyVersionsOperationSpec,\n      callback\n    ) as Promise<Models.GetKeyVersionsResponse>;\n  }\n\n  /**\n   * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public\n   * part of a stored key. The LIST operation is applicable to all key types, however only the base\n   * key identifier, attributes, and tags are provided in the response. Individual versions of a key\n   * are not listed in the response. This operation requires the keys/list permission.\n   * @summary List keys in the specified vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetKeysResponse>\n   */\n  getKeys(\n    vaultBaseUrl: string,\n    options?: Models.KeyVaultClientGetKeysOptionalParams\n  ): Promise<Models.GetKeysResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getKeys(vaultBaseUrl: string, callback: coreHttp.ServiceCallback<Models.KeyListResult>): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getKeys(\n    vaultBaseUrl: string,\n    options: Models.KeyVaultClientGetKeysOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.KeyListResult>\n  ): void;\n  getKeys(\n    vaultBaseUrl: string,\n    options?:\n      | Models.KeyVaultClientGetKeysOptionalParams\n      | coreHttp.ServiceCallback<Models.KeyListResult>,\n    callback?: coreHttp.ServiceCallback<Models.KeyListResult>\n  ): Promise<Models.GetKeysResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getKeysOperationSpec,\n      callback\n    ) as Promise<Models.GetKeysResponse>;\n  }\n\n  /**\n   * The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this\n   * operation does NOT return key material in a form that can be used outside the Azure Key Vault\n   * system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key\n   * Vault itself. The intent of this operation is to allow a client to GENERATE a key in one Azure\n   * Key Vault instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance.\n   * The BACKUP operation may be used to export, in protected form, any key type from Azure Key\n   * Vault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed\n   * within geographical boundaries only; meaning that a BACKUP from one geographical area cannot be\n   * restored to another geographical area. For example, a backup from the US geographical area\n   * cannot be restored in an EU geographical area. This operation requires the key/backup\n   * permission.\n   * @summary Requests that a backup of the specified key be downloaded to the client.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BackupKeyResponse>\n   */\n  backupKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.BackupKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param callback The callback\n   */\n  backupKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    callback: coreHttp.ServiceCallback<Models.BackupKeyResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  backupKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.BackupKeyResult>\n  ): void;\n  backupKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.BackupKeyResult>,\n    callback?: coreHttp.ServiceCallback<Models.BackupKeyResult>\n  ): Promise<Models.BackupKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        options\n      },\n      backupKeyOperationSpec,\n      callback\n    ) as Promise<Models.BackupKeyResponse>;\n  }\n\n  /**\n   * Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier,\n   * attributes and access control policies. The RESTORE operation may be used to import a previously\n   * backed up key. Individual versions of a key cannot be restored. The key is restored in its\n   * entirety with the same key name as it had when it was backed up. If the key name is not\n   * available in the target Key Vault, the RESTORE operation will be rejected. While the key name is\n   * retained during restore, the final key identifier will change if the key is restored to a\n   * different vault. Restore will restore all versions and preserve version identifiers. The RESTORE\n   * operation is subject to security constraints: The target Key Vault must be owned by the same\n   * Microsoft Azure Subscription as the source Key Vault The user must have RESTORE permission in\n   * the target Key Vault. This operation requires the keys/restore permission.\n   * @summary Restores a backed up key to a vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyBundleBackup The backup blob associated with a key bundle.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RestoreKeyResponse>\n   */\n  restoreKey(\n    vaultBaseUrl: string,\n    keyBundleBackup: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RestoreKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyBundleBackup The backup blob associated with a key bundle.\n   * @param callback The callback\n   */\n  restoreKey(\n    vaultBaseUrl: string,\n    keyBundleBackup: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyBundleBackup The backup blob associated with a key bundle.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  restoreKey(\n    vaultBaseUrl: string,\n    keyBundleBackup: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  restoreKey(\n    vaultBaseUrl: string,\n    keyBundleBackup: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyBundle>,\n    callback?: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): Promise<Models.RestoreKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyBundleBackup,\n        options\n      },\n      restoreKeyOperationSpec,\n      callback\n    ) as Promise<Models.RestoreKeyResponse>;\n  }\n\n  /**\n   * The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is\n   * stored in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data,\n   * the size of which is dependent on the target key and the encryption algorithm to be used. The\n   * ENCRYPT operation is only strictly necessary for symmetric keys stored in Azure Key Vault since\n   * protection with an asymmetric key can be performed using public portion of the key. This\n   * operation is supported for asymmetric keys as a convenience for callers that have a\n   * key-reference but do not have access to the public key material. This operation requires the\n   * keys/encrypt permission.\n   * @summary Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key\n   * vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param [options] The optional parameters\n   * @returns Promise<Models.EncryptResponse>\n   */\n  encrypt(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.EncryptResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param callback The callback\n   */\n  encrypt(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  encrypt(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  encrypt(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyOperationResult>,\n    callback?: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): Promise<Models.EncryptResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        keyVersion,\n        algorithm,\n        value,\n        options\n      },\n      encryptOperationSpec,\n      callback\n    ) as Promise<Models.EncryptResponse>;\n  }\n\n  /**\n   * The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key\n   * and specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single\n   * block of data may be decrypted, the size of this block is dependent on the target key and the\n   * algorithm to be used. The DECRYPT operation applies to asymmetric and symmetric keys stored in\n   * Azure Key Vault since it uses the private portion of the key. This operation requires the\n   * keys/decrypt permission.\n   * @summary Decrypts a single block of encrypted data.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DecryptResponse>\n   */\n  decrypt(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.DecryptResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param callback The callback\n   */\n  decrypt(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  decrypt(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  decrypt(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyOperationResult>,\n    callback?: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): Promise<Models.DecryptResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        keyVersion,\n        algorithm,\n        value,\n        options\n      },\n      decryptOperationSpec,\n      callback\n    ) as Promise<Models.DecryptResponse>;\n  }\n\n  /**\n   * The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault\n   * since this operation uses the private portion of the key. This operation requires the keys/sign\n   * permission.\n   * @summary Creates a signature from a digest using the specified key.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm The signing/verification algorithm identifier. For more information on possible\n   * algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384',\n   * 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'\n   * @param value\n   * @param [options] The optional parameters\n   * @returns Promise<Models.SignResponse>\n   */\n  sign(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeySignatureAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.SignResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm The signing/verification algorithm identifier. For more information on possible\n   * algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384',\n   * 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'\n   * @param value\n   * @param callback The callback\n   */\n  sign(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeySignatureAlgorithm,\n    value: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm The signing/verification algorithm identifier. For more information on possible\n   * algorithm types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384',\n   * 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'\n   * @param value\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  sign(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeySignatureAlgorithm,\n    value: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  sign(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeySignatureAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyOperationResult>,\n    callback?: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): Promise<Models.SignResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        keyVersion,\n        algorithm,\n        value,\n        options\n      },\n      signOperationSpec,\n      callback\n    ) as Promise<Models.SignResponse>;\n  }\n\n  /**\n   * The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not\n   * strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification\n   * can be performed using the public portion of the key but this operation is supported as a\n   * convenience for callers that only have a key-reference and not the public portion of the key.\n   * This operation requires the keys/verify permission.\n   * @summary Verifies a signature using a specified key.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm The signing/verification algorithm. For more information on possible algorithm\n   * types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512',\n   * 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'\n   * @param digest The digest used for signing.\n   * @param signature The signature to be verified.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.VerifyResponse>\n   */\n  verify(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeySignatureAlgorithm,\n    digest: Uint8Array,\n    signature: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.VerifyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm The signing/verification algorithm. For more information on possible algorithm\n   * types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512',\n   * 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'\n   * @param digest The digest used for signing.\n   * @param signature The signature to be verified.\n   * @param callback The callback\n   */\n  verify(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeySignatureAlgorithm,\n    digest: Uint8Array,\n    signature: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.KeyVerifyResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm The signing/verification algorithm. For more information on possible algorithm\n   * types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512',\n   * 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'\n   * @param digest The digest used for signing.\n   * @param signature The signature to be verified.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  verify(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeySignatureAlgorithm,\n    digest: Uint8Array,\n    signature: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.KeyVerifyResult>\n  ): void;\n  verify(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeySignatureAlgorithm,\n    digest: Uint8Array,\n    signature: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyVerifyResult>,\n    callback?: coreHttp.ServiceCallback<Models.KeyVerifyResult>\n  ): Promise<Models.VerifyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        keyVersion,\n        algorithm,\n        digest,\n        signature,\n        options\n      },\n      verifyOperationSpec,\n      callback\n    ) as Promise<Models.VerifyResponse>;\n  }\n\n  /**\n   * The WRAP operation supports encryption of a symmetric key using a key encryption key that has\n   * previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for\n   * symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be\n   * performed using the public portion of the key. This operation is supported for asymmetric keys\n   * as a convenience for callers that have a key-reference but do not have access to the public key\n   * material. This operation requires the keys/wrapKey permission.\n   * @summary Wraps a symmetric key using a specified key.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param [options] The optional parameters\n   * @returns Promise<Models.WrapKeyResponse>\n   */\n  wrapKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.WrapKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param callback The callback\n   */\n  wrapKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  wrapKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  wrapKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyOperationResult>,\n    callback?: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): Promise<Models.WrapKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        keyVersion,\n        algorithm,\n        value,\n        options\n      },\n      wrapKeyOperationSpec,\n      callback\n    ) as Promise<Models.WrapKeyResponse>;\n  }\n\n  /**\n   * The UNWRAP operation supports decryption of a symmetric key using the target key encryption key.\n   * This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric\n   * and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This\n   * operation requires the keys/unwrapKey permission.\n   * @summary Unwraps a symmetric key using the specified key that was initially used for wrapping\n   * that key.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UnwrapKeyResponse>\n   */\n  unwrapKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.UnwrapKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param callback The callback\n   */\n  unwrapKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',\n   * 'RSA1_5'\n   * @param value\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  unwrapKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): void;\n  unwrapKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: Models.JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyOperationResult>,\n    callback?: coreHttp.ServiceCallback<Models.KeyOperationResult>\n  ): Promise<Models.UnwrapKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        keyVersion,\n        algorithm,\n        value,\n        options\n      },\n      unwrapKeyOperationSpec,\n      callback\n    ) as Promise<Models.UnwrapKeyResponse>;\n  }\n\n  /**\n   * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public\n   * part of a deleted key. This operation includes deletion-specific information. The Get Deleted\n   * Keys operation is applicable for vaults enabled for soft-delete. While the operation can be\n   * invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault.\n   * This operation requires the keys/list permission.\n   * @summary Lists the deleted keys in the specified vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedKeysResponse>\n   */\n  getDeletedKeys(\n    vaultBaseUrl: string,\n    options?: Models.KeyVaultClientGetDeletedKeysOptionalParams\n  ): Promise<Models.GetDeletedKeysResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getDeletedKeys(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedKeyListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedKeys(\n    vaultBaseUrl: string,\n    options: Models.KeyVaultClientGetDeletedKeysOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.DeletedKeyListResult>\n  ): void;\n  getDeletedKeys(\n    vaultBaseUrl: string,\n    options?:\n      | Models.KeyVaultClientGetDeletedKeysOptionalParams\n      | coreHttp.ServiceCallback<Models.DeletedKeyListResult>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedKeyListResult>\n  ): Promise<Models.GetDeletedKeysResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getDeletedKeysOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedKeysResponse>;\n  }\n\n  /**\n   * The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation\n   * can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled\n   * vault. This operation requires the keys/get permission.\n   * @summary Gets the public part of a deleted key.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedKeyResponse>\n   */\n  getDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetDeletedKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param callback The callback\n   */\n  getDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedKeyBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedKeyBundle>\n  ): void;\n  getDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeletedKeyBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedKeyBundle>\n  ): Promise<Models.GetDeletedKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        options\n      },\n      getDeletedKeyOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedKeyResponse>;\n  }\n\n  /**\n   * The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the\n   * operation can be invoked on any vault, it will return an error if invoked on a non soft-delete\n   * enabled vault. This operation requires the keys/purge permission.\n   * @summary Permanently deletes the specified key.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key\n   * @param [options] The optional parameters\n   * @returns Promise<coreHttp.RestResponse>\n   */\n  purgeDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<coreHttp.RestResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key\n   * @param callback The callback\n   */\n  purgeDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    callback: coreHttp.ServiceCallback<void>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  purgeDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<void>\n  ): void;\n  purgeDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>,\n    callback?: coreHttp.ServiceCallback<void>\n  ): Promise<coreHttp.RestResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        options\n      },\n      purgeDeletedKeyOperationSpec,\n      callback\n    );\n  }\n\n  /**\n   * The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults.\n   * It recovers the deleted key back to its latest version under /keys. An attempt to recover an\n   * non-deleted key will return an error. Consider this the inverse of the delete operation on\n   * soft-delete enabled vaults. This operation requires the keys/recover permission.\n   * @summary Recovers the deleted key to its latest version.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the deleted key.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RecoverDeletedKeyResponse>\n   */\n  recoverDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RecoverDeletedKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the deleted key.\n   * @param callback The callback\n   */\n  recoverDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the deleted key.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  recoverDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): void;\n  recoverDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.KeyBundle>,\n    callback?: coreHttp.ServiceCallback<Models.KeyBundle>\n  ): Promise<Models.RecoverDeletedKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        options\n      },\n      recoverDeletedKeyOperationSpec,\n      callback\n    ) as Promise<Models.RecoverDeletedKeyResponse>;\n  }\n\n  /**\n   * The SET operation adds a secret to the Azure Key Vault. If the named secret already exists,\n   * Azure Key Vault creates a new version of that secret. This operation requires the secrets/set\n   * permission.\n   * @summary Sets a secret in a specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param value The value of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.SetSecretResponse>\n   */\n  setSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    value: string,\n    options?: Models.KeyVaultClientSetSecretOptionalParams\n  ): Promise<Models.SetSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param value The value of the secret.\n   * @param callback The callback\n   */\n  setSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    value: string,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param value The value of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    value: string,\n    options: Models.KeyVaultClientSetSecretOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  setSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    value: string,\n    options?:\n      | Models.KeyVaultClientSetSecretOptionalParams\n      | coreHttp.ServiceCallback<Models.SecretBundle>,\n    callback?: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): Promise<Models.SetSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        value,\n        options\n      },\n      setSecretOperationSpec,\n      callback\n    ) as Promise<Models.SetSecretResponse>;\n  }\n\n  /**\n   * The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied\n   * to an individual version of a secret. This operation requires the secrets/delete permission.\n   * @summary Deletes a secret from a specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DeleteSecretResponse>\n   */\n  deleteSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.DeleteSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param callback The callback\n   */\n  deleteSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedSecretBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedSecretBundle>\n  ): void;\n  deleteSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeletedSecretBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedSecretBundle>\n  ): Promise<Models.DeleteSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        options\n      },\n      deleteSecretOperationSpec,\n      callback\n    ) as Promise<Models.DeleteSecretResponse>;\n  }\n\n  /**\n   * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that\n   * are not specified in the request are left unchanged. The value of a secret itself cannot be\n   * changed. This operation requires the secrets/set permission.\n   * @summary Updates the attributes associated with a specified secret in a given key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param secretVersion The version of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UpdateSecretResponse>\n   */\n  updateSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    secretVersion: string,\n    options?: Models.KeyVaultClientUpdateSecretOptionalParams\n  ): Promise<Models.UpdateSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param secretVersion The version of the secret.\n   * @param callback The callback\n   */\n  updateSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    secretVersion: string,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param secretVersion The version of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    secretVersion: string,\n    options: Models.KeyVaultClientUpdateSecretOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  updateSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    secretVersion: string,\n    options?:\n      | Models.KeyVaultClientUpdateSecretOptionalParams\n      | coreHttp.ServiceCallback<Models.SecretBundle>,\n    callback?: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): Promise<Models.UpdateSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        secretVersion,\n        options\n      },\n      updateSecretOperationSpec,\n      callback\n    ) as Promise<Models.UpdateSecretResponse>;\n  }\n\n  /**\n   * The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires\n   * the secrets/get permission.\n   * @summary Get a specified secret from a given key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param secretVersion The version of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetSecretResponse>\n   */\n  getSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    secretVersion: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param secretVersion The version of the secret.\n   * @param callback The callback\n   */\n  getSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    secretVersion: string,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param secretVersion The version of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    secretVersion: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  getSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    secretVersion: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SecretBundle>,\n    callback?: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): Promise<Models.GetSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        secretVersion,\n        options\n      },\n      getSecretOperationSpec,\n      callback\n    ) as Promise<Models.GetSecretResponse>;\n  }\n\n  /**\n   * The Get Secrets operation is applicable to the entire vault. However, only the base secret\n   * identifier and its attributes are provided in the response. Individual secret versions are not\n   * listed in the response. This operation requires the secrets/list permission.\n   * @summary List secrets in a specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetSecretsResponse>\n   */\n  getSecrets(\n    vaultBaseUrl: string,\n    options?: Models.KeyVaultClientGetSecretsOptionalParams\n  ): Promise<Models.GetSecretsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getSecrets(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.SecretListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getSecrets(\n    vaultBaseUrl: string,\n    options: Models.KeyVaultClientGetSecretsOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.SecretListResult>\n  ): void;\n  getSecrets(\n    vaultBaseUrl: string,\n    options?:\n      | Models.KeyVaultClientGetSecretsOptionalParams\n      | coreHttp.ServiceCallback<Models.SecretListResult>,\n    callback?: coreHttp.ServiceCallback<Models.SecretListResult>\n  ): Promise<Models.GetSecretsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getSecretsOperationSpec,\n      callback\n    ) as Promise<Models.GetSecretsResponse>;\n  }\n\n  /**\n   * The full secret identifier and attributes are provided in the response. No values are returned\n   * for the secrets. This operations requires the secrets/list permission.\n   * @summary List all versions of the specified secret.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetSecretVersionsResponse>\n   */\n  getSecretVersions(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: Models.KeyVaultClientGetSecretVersionsOptionalParams\n  ): Promise<Models.GetSecretVersionsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param callback The callback\n   */\n  getSecretVersions(\n    vaultBaseUrl: string,\n    secretName: string,\n    callback: coreHttp.ServiceCallback<Models.SecretListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getSecretVersions(\n    vaultBaseUrl: string,\n    secretName: string,\n    options: Models.KeyVaultClientGetSecretVersionsOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.SecretListResult>\n  ): void;\n  getSecretVersions(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?:\n      | Models.KeyVaultClientGetSecretVersionsOptionalParams\n      | coreHttp.ServiceCallback<Models.SecretListResult>,\n    callback?: coreHttp.ServiceCallback<Models.SecretListResult>\n  ): Promise<Models.GetSecretVersionsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        options\n      },\n      getSecretVersionsOperationSpec,\n      callback\n    ) as Promise<Models.GetSecretVersionsResponse>;\n  }\n\n  /**\n   * The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled\n   * for soft-delete. This operation requires the secrets/list permission.\n   * @summary Lists deleted secrets for the specified vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedSecretsResponse>\n   */\n  getDeletedSecrets(\n    vaultBaseUrl: string,\n    options?: Models.KeyVaultClientGetDeletedSecretsOptionalParams\n  ): Promise<Models.GetDeletedSecretsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getDeletedSecrets(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedSecretListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedSecrets(\n    vaultBaseUrl: string,\n    options: Models.KeyVaultClientGetDeletedSecretsOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.DeletedSecretListResult>\n  ): void;\n  getDeletedSecrets(\n    vaultBaseUrl: string,\n    options?:\n      | Models.KeyVaultClientGetDeletedSecretsOptionalParams\n      | coreHttp.ServiceCallback<Models.DeletedSecretListResult>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedSecretListResult>\n  ): Promise<Models.GetDeletedSecretsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getDeletedSecretsOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedSecretsResponse>;\n  }\n\n  /**\n   * The Get Deleted Secret operation returns the specified deleted secret along with its attributes.\n   * This operation requires the secrets/get permission.\n   * @summary Gets the specified deleted secret.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedSecretResponse>\n   */\n  getDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetDeletedSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param callback The callback\n   */\n  getDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedSecretBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedSecretBundle>\n  ): void;\n  getDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeletedSecretBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedSecretBundle>\n  ): Promise<Models.GetDeletedSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        options\n      },\n      getDeletedSecretOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedSecretResponse>;\n  }\n\n  /**\n   * The purge deleted secret operation removes the secret permanently, without the possibility of\n   * recovery. This operation can only be enabled on a soft-delete enabled vault. This operation\n   * requires the secrets/purge permission.\n   * @summary Permanently deletes the specified secret.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<coreHttp.RestResponse>\n   */\n  purgeDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<coreHttp.RestResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param callback The callback\n   */\n  purgeDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    callback: coreHttp.ServiceCallback<void>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  purgeDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<void>\n  ): void;\n  purgeDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>,\n    callback?: coreHttp.ServiceCallback<void>\n  ): Promise<coreHttp.RestResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        options\n      },\n      purgeDeletedSecretOperationSpec,\n      callback\n    );\n  }\n\n  /**\n   * Recovers the deleted secret in the specified vault. This operation can only be performed on a\n   * soft-delete enabled vault. This operation requires the secrets/recover permission.\n   * @summary Recovers the deleted secret to the latest version.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the deleted secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RecoverDeletedSecretResponse>\n   */\n  recoverDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RecoverDeletedSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the deleted secret.\n   * @param callback The callback\n   */\n  recoverDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the deleted secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  recoverDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  recoverDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SecretBundle>,\n    callback?: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): Promise<Models.RecoverDeletedSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        options\n      },\n      recoverDeletedSecretOperationSpec,\n      callback\n    ) as Promise<Models.RecoverDeletedSecretResponse>;\n  }\n\n  /**\n   * Requests that a backup of the specified secret be downloaded to the client. All versions of the\n   * secret will be downloaded. This operation requires the secrets/backup permission.\n   * @summary Backs up the specified secret.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BackupSecretResponse>\n   */\n  backupSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.BackupSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param callback The callback\n   */\n  backupSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    callback: coreHttp.ServiceCallback<Models.BackupSecretResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  backupSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.BackupSecretResult>\n  ): void;\n  backupSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.BackupSecretResult>,\n    callback?: coreHttp.ServiceCallback<Models.BackupSecretResult>\n  ): Promise<Models.BackupSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        options\n      },\n      backupSecretOperationSpec,\n      callback\n    ) as Promise<Models.BackupSecretResponse>;\n  }\n\n  /**\n   * Restores a backed up secret, and all its versions, to a vault. This operation requires the\n   * secrets/restore permission.\n   * @summary Restores a backed up secret to a vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretBundleBackup The backup blob associated with a secret bundle.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RestoreSecretResponse>\n   */\n  restoreSecret(\n    vaultBaseUrl: string,\n    secretBundleBackup: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RestoreSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretBundleBackup The backup blob associated with a secret bundle.\n   * @param callback The callback\n   */\n  restoreSecret(\n    vaultBaseUrl: string,\n    secretBundleBackup: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretBundleBackup The backup blob associated with a secret bundle.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  restoreSecret(\n    vaultBaseUrl: string,\n    secretBundleBackup: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): void;\n  restoreSecret(\n    vaultBaseUrl: string,\n    secretBundleBackup: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SecretBundle>,\n    callback?: coreHttp.ServiceCallback<Models.SecretBundle>\n  ): Promise<Models.RestoreSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretBundleBackup,\n        options\n      },\n      restoreSecretOperationSpec,\n      callback\n    ) as Promise<Models.RestoreSecretResponse>;\n  }\n\n  /**\n   * The GetCertificates operation returns the set of certificates resources in the specified key\n   * vault. This operation requires the certificates/list permission.\n   * @summary List certificates in a specified key vault\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetCertificatesResponse>\n   */\n  getCertificates(\n    vaultBaseUrl: string,\n    options?: Models.KeyVaultClientGetCertificatesOptionalParams\n  ): Promise<Models.GetCertificatesResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getCertificates(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getCertificates(\n    vaultBaseUrl: string,\n    options: Models.KeyVaultClientGetCertificatesOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.CertificateListResult>\n  ): void;\n  getCertificates(\n    vaultBaseUrl: string,\n    options?:\n      | Models.KeyVaultClientGetCertificatesOptionalParams\n      | coreHttp.ServiceCallback<Models.CertificateListResult>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateListResult>\n  ): Promise<Models.GetCertificatesResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getCertificatesOperationSpec,\n      callback\n    ) as Promise<Models.GetCertificatesResponse>;\n  }\n\n  /**\n   * Deletes all versions of a certificate object along with its associated policy. Delete\n   * certificate cannot be used to remove individual versions of a certificate object. This operation\n   * requires the certificates/delete permission.\n   * @summary Deletes a certificate from a specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DeleteCertificateResponse>\n   */\n  deleteCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.DeleteCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param callback The callback\n   */\n  deleteCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedCertificateBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedCertificateBundle>\n  ): void;\n  deleteCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?:\n      | coreHttp.RequestOptionsBase\n      | coreHttp.ServiceCallback<Models.DeletedCertificateBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedCertificateBundle>\n  ): Promise<Models.DeleteCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      deleteCertificateOperationSpec,\n      callback\n    ) as Promise<Models.DeleteCertificateResponse>;\n  }\n\n  /**\n   * Sets the certificate contacts for the specified key vault. This operation requires the\n   * certificates/managecontacts permission.\n   * @summary Sets the certificate contacts for the specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param contacts The contacts for the key vault certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.SetCertificateContactsResponse>\n   */\n  setCertificateContacts(\n    vaultBaseUrl: string,\n    contacts: Models.Contacts,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.SetCertificateContactsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param contacts The contacts for the key vault certificate.\n   * @param callback The callback\n   */\n  setCertificateContacts(\n    vaultBaseUrl: string,\n    contacts: Models.Contacts,\n    callback: coreHttp.ServiceCallback<Models.Contacts>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param contacts The contacts for the key vault certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setCertificateContacts(\n    vaultBaseUrl: string,\n    contacts: Models.Contacts,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.Contacts>\n  ): void;\n  setCertificateContacts(\n    vaultBaseUrl: string,\n    contacts: Models.Contacts,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.Contacts>,\n    callback?: coreHttp.ServiceCallback<Models.Contacts>\n  ): Promise<Models.SetCertificateContactsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        contacts,\n        options\n      },\n      setCertificateContactsOperationSpec,\n      callback\n    ) as Promise<Models.SetCertificateContactsResponse>;\n  }\n\n  /**\n   * The GetCertificateContacts operation returns the set of certificate contact resources in the\n   * specified key vault. This operation requires the certificates/managecontacts permission.\n   * @summary Lists the certificate contacts for a specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetCertificateContactsResponse>\n   */\n  getCertificateContacts(\n    vaultBaseUrl: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetCertificateContactsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getCertificateContacts(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.Contacts>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getCertificateContacts(\n    vaultBaseUrl: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.Contacts>\n  ): void;\n  getCertificateContacts(\n    vaultBaseUrl: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.Contacts>,\n    callback?: coreHttp.ServiceCallback<Models.Contacts>\n  ): Promise<Models.GetCertificateContactsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getCertificateContactsOperationSpec,\n      callback\n    ) as Promise<Models.GetCertificateContactsResponse>;\n  }\n\n  /**\n   * Deletes the certificate contacts for a specified key vault certificate. This operation requires\n   * the certificates/managecontacts permission.\n   * @summary Deletes the certificate contacts for a specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DeleteCertificateContactsResponse>\n   */\n  deleteCertificateContacts(\n    vaultBaseUrl: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.DeleteCertificateContactsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  deleteCertificateContacts(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.Contacts>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteCertificateContacts(\n    vaultBaseUrl: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.Contacts>\n  ): void;\n  deleteCertificateContacts(\n    vaultBaseUrl: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.Contacts>,\n    callback?: coreHttp.ServiceCallback<Models.Contacts>\n  ): Promise<Models.DeleteCertificateContactsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      deleteCertificateContactsOperationSpec,\n      callback\n    ) as Promise<Models.DeleteCertificateContactsResponse>;\n  }\n\n  /**\n   * The GetCertificateIssuers operation returns the set of certificate issuer resources in the\n   * specified key vault. This operation requires the certificates/manageissuers/getissuers\n   * permission.\n   * @summary List certificate issuers for a specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetCertificateIssuersResponse>\n   */\n  getCertificateIssuers(\n    vaultBaseUrl: string,\n    options?: Models.KeyVaultClientGetCertificateIssuersOptionalParams\n  ): Promise<Models.GetCertificateIssuersResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getCertificateIssuers(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateIssuerListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getCertificateIssuers(\n    vaultBaseUrl: string,\n    options: Models.KeyVaultClientGetCertificateIssuersOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.CertificateIssuerListResult>\n  ): void;\n  getCertificateIssuers(\n    vaultBaseUrl: string,\n    options?:\n      | Models.KeyVaultClientGetCertificateIssuersOptionalParams\n      | coreHttp.ServiceCallback<Models.CertificateIssuerListResult>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateIssuerListResult>\n  ): Promise<Models.GetCertificateIssuersResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getCertificateIssuersOperationSpec,\n      callback\n    ) as Promise<Models.GetCertificateIssuersResponse>;\n  }\n\n  /**\n   * The SetCertificateIssuer operation adds or updates the specified certificate issuer. This\n   * operation requires the certificates/setissuers permission.\n   * @summary Sets the specified certificate issuer.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param provider The issuer provider.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.SetCertificateIssuerResponse>\n   */\n  setCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    provider: string,\n    options?: Models.KeyVaultClientSetCertificateIssuerOptionalParams\n  ): Promise<Models.SetCertificateIssuerResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param provider The issuer provider.\n   * @param callback The callback\n   */\n  setCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    provider: string,\n    callback: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param provider The issuer provider.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    provider: string,\n    options: Models.KeyVaultClientSetCertificateIssuerOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): void;\n  setCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    provider: string,\n    options?:\n      | Models.KeyVaultClientSetCertificateIssuerOptionalParams\n      | coreHttp.ServiceCallback<Models.IssuerBundle>,\n    callback?: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): Promise<Models.SetCertificateIssuerResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        issuerName,\n        provider,\n        options\n      },\n      setCertificateIssuerOperationSpec,\n      callback\n    ) as Promise<Models.SetCertificateIssuerResponse>;\n  }\n\n  /**\n   * The UpdateCertificateIssuer operation performs an update on the specified certificate issuer\n   * entity. This operation requires the certificates/setissuers permission.\n   * @summary Updates the specified certificate issuer.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UpdateCertificateIssuerResponse>\n   */\n  updateCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    options?: Models.KeyVaultClientUpdateCertificateIssuerOptionalParams\n  ): Promise<Models.UpdateCertificateIssuerResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param callback The callback\n   */\n  updateCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    callback: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    options: Models.KeyVaultClientUpdateCertificateIssuerOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): void;\n  updateCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    options?:\n      | Models.KeyVaultClientUpdateCertificateIssuerOptionalParams\n      | coreHttp.ServiceCallback<Models.IssuerBundle>,\n    callback?: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): Promise<Models.UpdateCertificateIssuerResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        issuerName,\n        options\n      },\n      updateCertificateIssuerOperationSpec,\n      callback\n    ) as Promise<Models.UpdateCertificateIssuerResponse>;\n  }\n\n  /**\n   * The GetCertificateIssuer operation returns the specified certificate issuer resources in the\n   * specified key vault. This operation requires the certificates/manageissuers/getissuers\n   * permission.\n   * @summary Lists the specified certificate issuer.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetCertificateIssuerResponse>\n   */\n  getCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetCertificateIssuerResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param callback The callback\n   */\n  getCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    callback: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): void;\n  getCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.IssuerBundle>,\n    callback?: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): Promise<Models.GetCertificateIssuerResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        issuerName,\n        options\n      },\n      getCertificateIssuerOperationSpec,\n      callback\n    ) as Promise<Models.GetCertificateIssuerResponse>;\n  }\n\n  /**\n   * The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from\n   * the vault. This operation requires the certificates/manageissuers/deleteissuers permission.\n   * @summary Deletes the specified certificate issuer.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DeleteCertificateIssuerResponse>\n   */\n  deleteCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.DeleteCertificateIssuerResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param callback The callback\n   */\n  deleteCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    callback: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param issuerName The name of the issuer.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): void;\n  deleteCertificateIssuer(\n    vaultBaseUrl: string,\n    issuerName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.IssuerBundle>,\n    callback?: coreHttp.ServiceCallback<Models.IssuerBundle>\n  ): Promise<Models.DeleteCertificateIssuerResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        issuerName,\n        options\n      },\n      deleteCertificateIssuerOperationSpec,\n      callback\n    ) as Promise<Models.DeleteCertificateIssuerResponse>;\n  }\n\n  /**\n   * If this is the first version, the certificate resource is created. This operation requires the\n   * certificates/create permission.\n   * @summary Creates a new certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.CreateCertificateResponse>\n   */\n  createCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: Models.KeyVaultClientCreateCertificateOptionalParams\n  ): Promise<Models.CreateCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param callback The callback\n   */\n  createCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  createCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: Models.KeyVaultClientCreateCertificateOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): void;\n  createCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?:\n      | Models.KeyVaultClientCreateCertificateOptionalParams\n      | coreHttp.ServiceCallback<Models.CertificateOperation>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): Promise<Models.CreateCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      createCertificateOperationSpec,\n      callback\n    ) as Promise<Models.CreateCertificateResponse>;\n  }\n\n  /**\n   * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The\n   * certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM\n   * format the PEM file must contain the key as well as x509 certificates. This operation requires\n   * the certificates/import permission.\n   * @summary Imports a certificate into a specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param base64EncodedCertificate Base64 encoded representation of the certificate object to\n   * import. This certificate needs to contain the private key.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ImportCertificateResponse>\n   */\n  importCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    base64EncodedCertificate: string,\n    options?: Models.KeyVaultClientImportCertificateOptionalParams\n  ): Promise<Models.ImportCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param base64EncodedCertificate Base64 encoded representation of the certificate object to\n   * import. This certificate needs to contain the private key.\n   * @param callback The callback\n   */\n  importCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    base64EncodedCertificate: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param base64EncodedCertificate Base64 encoded representation of the certificate object to\n   * import. This certificate needs to contain the private key.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  importCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    base64EncodedCertificate: string,\n    options: Models.KeyVaultClientImportCertificateOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  importCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    base64EncodedCertificate: string,\n    options?:\n      | Models.KeyVaultClientImportCertificateOptionalParams\n      | coreHttp.ServiceCallback<Models.CertificateBundle>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): Promise<Models.ImportCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        base64EncodedCertificate,\n        options\n      },\n      importCertificateOperationSpec,\n      callback\n    ) as Promise<Models.ImportCertificateResponse>;\n  }\n\n  /**\n   * The GetCertificateVersions operation returns the versions of a certificate in the specified key\n   * vault. This operation requires the certificates/list permission.\n   * @summary List the versions of a certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetCertificateVersionsResponse>\n   */\n  getCertificateVersions(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: Models.KeyVaultClientGetCertificateVersionsOptionalParams\n  ): Promise<Models.GetCertificateVersionsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param callback The callback\n   */\n  getCertificateVersions(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getCertificateVersions(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: Models.KeyVaultClientGetCertificateVersionsOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.CertificateListResult>\n  ): void;\n  getCertificateVersions(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?:\n      | Models.KeyVaultClientGetCertificateVersionsOptionalParams\n      | coreHttp.ServiceCallback<Models.CertificateListResult>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateListResult>\n  ): Promise<Models.GetCertificateVersionsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      getCertificateVersionsOperationSpec,\n      callback\n    ) as Promise<Models.GetCertificateVersionsResponse>;\n  }\n\n  /**\n   * The GetCertificatePolicy operation returns the specified certificate policy resources in the\n   * specified key vault. This operation requires the certificates/get permission.\n   * @summary Lists the policy for a certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in a given key vault.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetCertificatePolicyResponse>\n   */\n  getCertificatePolicy(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetCertificatePolicyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in a given key vault.\n   * @param callback The callback\n   */\n  getCertificatePolicy(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<Models.CertificatePolicy>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in a given key vault.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getCertificatePolicy(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.CertificatePolicy>\n  ): void;\n  getCertificatePolicy(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificatePolicy>,\n    callback?: coreHttp.ServiceCallback<Models.CertificatePolicy>\n  ): Promise<Models.GetCertificatePolicyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      getCertificatePolicyOperationSpec,\n      callback\n    ) as Promise<Models.GetCertificatePolicyResponse>;\n  }\n\n  /**\n   * Set specified members in the certificate policy. Leave others as null. This operation requires\n   * the certificates/update permission.\n   * @summary Updates the policy for a certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in the given vault.\n   * @param certificatePolicy The policy for the certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UpdateCertificatePolicyResponse>\n   */\n  updateCertificatePolicy(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificatePolicy: Models.CertificatePolicy,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.UpdateCertificatePolicyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in the given vault.\n   * @param certificatePolicy The policy for the certificate.\n   * @param callback The callback\n   */\n  updateCertificatePolicy(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificatePolicy: Models.CertificatePolicy,\n    callback: coreHttp.ServiceCallback<Models.CertificatePolicy>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in the given vault.\n   * @param certificatePolicy The policy for the certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateCertificatePolicy(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificatePolicy: Models.CertificatePolicy,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.CertificatePolicy>\n  ): void;\n  updateCertificatePolicy(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificatePolicy: Models.CertificatePolicy,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificatePolicy>,\n    callback?: coreHttp.ServiceCallback<Models.CertificatePolicy>\n  ): Promise<Models.UpdateCertificatePolicyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        certificatePolicy,\n        options\n      },\n      updateCertificatePolicyOperationSpec,\n      callback\n    ) as Promise<Models.UpdateCertificatePolicyResponse>;\n  }\n\n  /**\n   * The UpdateCertificate operation applies the specified update on the given certificate; the only\n   * elements updated are the certificate's attributes. This operation requires the\n   * certificates/update permission.\n   * @summary Updates the specified attributes associated with the given certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in the given key vault.\n   * @param certificateVersion The version of the certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UpdateCertificateResponse>\n   */\n  updateCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificateVersion: string,\n    options?: Models.KeyVaultClientUpdateCertificateOptionalParams\n  ): Promise<Models.UpdateCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in the given key vault.\n   * @param certificateVersion The version of the certificate.\n   * @param callback The callback\n   */\n  updateCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificateVersion: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in the given key vault.\n   * @param certificateVersion The version of the certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificateVersion: string,\n    options: Models.KeyVaultClientUpdateCertificateOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  updateCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificateVersion: string,\n    options?:\n      | Models.KeyVaultClientUpdateCertificateOptionalParams\n      | coreHttp.ServiceCallback<Models.CertificateBundle>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): Promise<Models.UpdateCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        certificateVersion,\n        options\n      },\n      updateCertificateOperationSpec,\n      callback\n    ) as Promise<Models.UpdateCertificateResponse>;\n  }\n\n  /**\n   * Gets information about a specific certificate. This operation requires the certificates/get\n   * permission.\n   * @summary Gets information about a certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in the given vault.\n   * @param certificateVersion The version of the certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetCertificateResponse>\n   */\n  getCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificateVersion: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in the given vault.\n   * @param certificateVersion The version of the certificate.\n   * @param callback The callback\n   */\n  getCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificateVersion: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate in the given vault.\n   * @param certificateVersion The version of the certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificateVersion: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  getCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    certificateVersion: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificateBundle>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): Promise<Models.GetCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        certificateVersion,\n        options\n      },\n      getCertificateOperationSpec,\n      callback\n    ) as Promise<Models.GetCertificateResponse>;\n  }\n\n  /**\n   * Updates a certificate creation operation that is already in progress. This operation requires\n   * the certificates/update permission.\n   * @summary Updates a certificate operation.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param cancellationRequested Indicates if cancellation was requested on the certificate\n   * operation.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UpdateCertificateOperationResponse>\n   */\n  updateCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    cancellationRequested: boolean,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.UpdateCertificateOperationResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param cancellationRequested Indicates if cancellation was requested on the certificate\n   * operation.\n   * @param callback The callback\n   */\n  updateCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    cancellationRequested: boolean,\n    callback: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param cancellationRequested Indicates if cancellation was requested on the certificate\n   * operation.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    cancellationRequested: boolean,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): void;\n  updateCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    cancellationRequested: boolean,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificateOperation>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): Promise<Models.UpdateCertificateOperationResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        cancellationRequested,\n        options\n      },\n      updateCertificateOperationOperationSpec,\n      callback\n    ) as Promise<Models.UpdateCertificateOperationResponse>;\n  }\n\n  /**\n   * Gets the creation operation associated with a specified certificate. This operation requires the\n   * certificates/get permission.\n   * @summary Gets the creation operation of a certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetCertificateOperationResponse>\n   */\n  getCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetCertificateOperationResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param callback The callback\n   */\n  getCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): void;\n  getCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificateOperation>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): Promise<Models.GetCertificateOperationResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      getCertificateOperationOperationSpec,\n      callback\n    ) as Promise<Models.GetCertificateOperationResponse>;\n  }\n\n  /**\n   * Deletes the creation operation for a specified certificate that is in the process of being\n   * created. The certificate is no longer created. This operation requires the certificates/update\n   * permission.\n   * @summary Deletes the creation operation for a specific certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DeleteCertificateOperationResponse>\n   */\n  deleteCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.DeleteCertificateOperationResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param callback The callback\n   */\n  deleteCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): void;\n  deleteCertificateOperation(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificateOperation>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateOperation>\n  ): Promise<Models.DeleteCertificateOperationResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      deleteCertificateOperationOperationSpec,\n      callback\n    ) as Promise<Models.DeleteCertificateOperationResponse>;\n  }\n\n  /**\n   * The MergeCertificate operation performs the merging of a certificate or certificate chain with a\n   * key pair currently available in the service. This operation requires the certificates/create\n   * permission.\n   * @summary Merges a certificate or a certificate chain with a key pair existing on the server.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param x509Certificates The certificate or the certificate chain to merge.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.MergeCertificateResponse>\n   */\n  mergeCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    x509Certificates: Uint8Array[],\n    options?: Models.KeyVaultClientMergeCertificateOptionalParams\n  ): Promise<Models.MergeCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param x509Certificates The certificate or the certificate chain to merge.\n   * @param callback The callback\n   */\n  mergeCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    x509Certificates: Uint8Array[],\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param x509Certificates The certificate or the certificate chain to merge.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  mergeCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    x509Certificates: Uint8Array[],\n    options: Models.KeyVaultClientMergeCertificateOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  mergeCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    x509Certificates: Uint8Array[],\n    options?:\n      | Models.KeyVaultClientMergeCertificateOptionalParams\n      | coreHttp.ServiceCallback<Models.CertificateBundle>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): Promise<Models.MergeCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        x509Certificates,\n        options\n      },\n      mergeCertificateOperationSpec,\n      callback\n    ) as Promise<Models.MergeCertificateResponse>;\n  }\n\n  /**\n   * Requests that a backup of the specified certificate be downloaded to the client. All versions of\n   * the certificate will be downloaded. This operation requires the certificates/backup permission.\n   * @summary Backs up the specified certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BackupCertificateResponse>\n   */\n  backupCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.BackupCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param callback The callback\n   */\n  backupCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<Models.BackupCertificateResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  backupCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.BackupCertificateResult>\n  ): void;\n  backupCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?:\n      | coreHttp.RequestOptionsBase\n      | coreHttp.ServiceCallback<Models.BackupCertificateResult>,\n    callback?: coreHttp.ServiceCallback<Models.BackupCertificateResult>\n  ): Promise<Models.BackupCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      backupCertificateOperationSpec,\n      callback\n    ) as Promise<Models.BackupCertificateResponse>;\n  }\n\n  /**\n   * Restores a backed up certificate, and all its versions, to a vault. This operation requires the\n   * certificates/restore permission.\n   * @summary Restores a backed up certificate to a vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateBundleBackup The backup blob associated with a certificate bundle.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RestoreCertificateResponse>\n   */\n  restoreCertificate(\n    vaultBaseUrl: string,\n    certificateBundleBackup: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RestoreCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateBundleBackup The backup blob associated with a certificate bundle.\n   * @param callback The callback\n   */\n  restoreCertificate(\n    vaultBaseUrl: string,\n    certificateBundleBackup: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateBundleBackup The backup blob associated with a certificate bundle.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  restoreCertificate(\n    vaultBaseUrl: string,\n    certificateBundleBackup: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  restoreCertificate(\n    vaultBaseUrl: string,\n    certificateBundleBackup: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificateBundle>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): Promise<Models.RestoreCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateBundleBackup,\n        options\n      },\n      restoreCertificateOperationSpec,\n      callback\n    ) as Promise<Models.RestoreCertificateResponse>;\n  }\n\n  /**\n   * The GetDeletedCertificates operation retrieves the certificates in the current vault which are\n   * in a deleted state and ready for recovery or purging. This operation includes deletion-specific\n   * information. This operation requires the certificates/get/list permission. This operation can\n   * only be enabled on soft-delete enabled vaults.\n   * @summary Lists the deleted certificates in the specified vault currently available for recovery.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedCertificatesResponse>\n   */\n  getDeletedCertificates(\n    vaultBaseUrl: string,\n    options?: Models.KeyVaultClientGetDeletedCertificatesOptionalParams\n  ): Promise<Models.GetDeletedCertificatesResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getDeletedCertificates(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedCertificateListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedCertificates(\n    vaultBaseUrl: string,\n    options: Models.KeyVaultClientGetDeletedCertificatesOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.DeletedCertificateListResult>\n  ): void;\n  getDeletedCertificates(\n    vaultBaseUrl: string,\n    options?:\n      | Models.KeyVaultClientGetDeletedCertificatesOptionalParams\n      | coreHttp.ServiceCallback<Models.DeletedCertificateListResult>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedCertificateListResult>\n  ): Promise<Models.GetDeletedCertificatesResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getDeletedCertificatesOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedCertificatesResponse>;\n  }\n\n  /**\n   * The GetDeletedCertificate operation retrieves the deleted certificate information plus its\n   * attributes, such as retention interval, scheduled permanent deletion and the current deletion\n   * recovery level. This operation requires the certificates/get permission.\n   * @summary Retrieves information about the specified deleted certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedCertificateResponse>\n   */\n  getDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetDeletedCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate\n   * @param callback The callback\n   */\n  getDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedCertificateBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedCertificateBundle>\n  ): void;\n  getDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?:\n      | coreHttp.RequestOptionsBase\n      | coreHttp.ServiceCallback<Models.DeletedCertificateBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedCertificateBundle>\n  ): Promise<Models.GetDeletedCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      getDeletedCertificateOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedCertificateResponse>;\n  }\n\n  /**\n   * The PurgeDeletedCertificate operation performs an irreversible deletion of the specified\n   * certificate, without possibility for recovery. The operation is not available if the recovery\n   * level does not specify 'Purgeable'. This operation requires the certificate/purge permission.\n   * @summary Permanently deletes the specified deleted certificate.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate\n   * @param [options] The optional parameters\n   * @returns Promise<coreHttp.RestResponse>\n   */\n  purgeDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<coreHttp.RestResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate\n   * @param callback The callback\n   */\n  purgeDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<void>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the certificate\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  purgeDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<void>\n  ): void;\n  purgeDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>,\n    callback?: coreHttp.ServiceCallback<void>\n  ): Promise<coreHttp.RestResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      purgeDeletedCertificateOperationSpec,\n      callback\n    );\n  }\n\n  /**\n   * The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The\n   * operation is applicable in vaults enabled for soft-delete, and must be issued during the\n   * retention interval (available in the deleted certificate's attributes). This operation requires\n   * the certificates/recover permission.\n   * @summary Recovers the deleted certificate back to its current version under /certificates.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the deleted certificate\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RecoverDeletedCertificateResponse>\n   */\n  recoverDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RecoverDeletedCertificateResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the deleted certificate\n   * @param callback The callback\n   */\n  recoverDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param certificateName The name of the deleted certificate\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  recoverDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): void;\n  recoverDeletedCertificate(\n    vaultBaseUrl: string,\n    certificateName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificateBundle>,\n    callback?: coreHttp.ServiceCallback<Models.CertificateBundle>\n  ): Promise<Models.RecoverDeletedCertificateResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        certificateName,\n        options\n      },\n      recoverDeletedCertificateOperationSpec,\n      callback\n    ) as Promise<Models.RecoverDeletedCertificateResponse>;\n  }\n\n  /**\n   * List storage accounts managed by the specified key vault. This operation requires the\n   * storage/list permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetStorageAccountsResponse>\n   */\n  getStorageAccounts(\n    vaultBaseUrl: string,\n    options?: Models.KeyVaultClientGetStorageAccountsOptionalParams\n  ): Promise<Models.GetStorageAccountsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getStorageAccounts(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.StorageListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getStorageAccounts(\n    vaultBaseUrl: string,\n    options: Models.KeyVaultClientGetStorageAccountsOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.StorageListResult>\n  ): void;\n  getStorageAccounts(\n    vaultBaseUrl: string,\n    options?:\n      | Models.KeyVaultClientGetStorageAccountsOptionalParams\n      | coreHttp.ServiceCallback<Models.StorageListResult>,\n    callback?: coreHttp.ServiceCallback<Models.StorageListResult>\n  ): Promise<Models.GetStorageAccountsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getStorageAccountsOperationSpec,\n      callback\n    ) as Promise<Models.GetStorageAccountsResponse>;\n  }\n\n  /**\n   * The Get Deleted Storage Accounts operation returns the storage accounts that have been deleted\n   * for a vault enabled for soft-delete. This operation requires the storage/list permission.\n   * @summary Lists deleted storage accounts for the specified vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedStorageAccountsResponse>\n   */\n  getDeletedStorageAccounts(\n    vaultBaseUrl: string,\n    options?: Models.KeyVaultClientGetDeletedStorageAccountsOptionalParams\n  ): Promise<Models.GetDeletedStorageAccountsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getDeletedStorageAccounts(\n    vaultBaseUrl: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedStorageListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedStorageAccounts(\n    vaultBaseUrl: string,\n    options: Models.KeyVaultClientGetDeletedStorageAccountsOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.DeletedStorageListResult>\n  ): void;\n  getDeletedStorageAccounts(\n    vaultBaseUrl: string,\n    options?:\n      | Models.KeyVaultClientGetDeletedStorageAccountsOptionalParams\n      | coreHttp.ServiceCallback<Models.DeletedStorageListResult>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedStorageListResult>\n  ): Promise<Models.GetDeletedStorageAccountsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getDeletedStorageAccountsOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedStorageAccountsResponse>;\n  }\n\n  /**\n   * The Get Deleted Storage Account operation returns the specified deleted storage account along\n   * with its attributes. This operation requires the storage/get permission.\n   * @summary Gets the specified deleted storage account.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedStorageAccountResponse>\n   */\n  getDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetDeletedStorageAccountResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param callback The callback\n   */\n  getDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedStorageBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedStorageBundle>\n  ): void;\n  getDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeletedStorageBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedStorageBundle>\n  ): Promise<Models.GetDeletedStorageAccountResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        options\n      },\n      getDeletedStorageAccountOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedStorageAccountResponse>;\n  }\n\n  /**\n   * The purge deleted storage account operation removes the secret permanently, without the\n   * possibility of recovery. This operation can only be performed on a soft-delete enabled vault.\n   * This operation requires the storage/purge permission.\n   * @summary Permanently deletes the specified storage account.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<coreHttp.RestResponse>\n   */\n  purgeDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<coreHttp.RestResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param callback The callback\n   */\n  purgeDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    callback: coreHttp.ServiceCallback<void>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  purgeDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<void>\n  ): void;\n  purgeDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>,\n    callback?: coreHttp.ServiceCallback<void>\n  ): Promise<coreHttp.RestResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        options\n      },\n      purgeDeletedStorageAccountOperationSpec,\n      callback\n    );\n  }\n\n  /**\n   * Recovers the deleted storage account in the specified vault. This operation can only be\n   * performed on a soft-delete enabled vault. This operation requires the storage/recover\n   * permission.\n   * @summary Recovers the deleted storage account.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RecoverDeletedStorageAccountResponse>\n   */\n  recoverDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RecoverDeletedStorageAccountResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param callback The callback\n   */\n  recoverDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  recoverDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  recoverDeletedStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.StorageBundle>,\n    callback?: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): Promise<Models.RecoverDeletedStorageAccountResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        options\n      },\n      recoverDeletedStorageAccountOperationSpec,\n      callback\n    ) as Promise<Models.RecoverDeletedStorageAccountResponse>;\n  }\n\n  /**\n   * Requests that a backup of the specified storage account be downloaded to the client. This\n   * operation requires the storage/backup permission.\n   * @summary Backs up the specified storage account.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BackupStorageAccountResponse>\n   */\n  backupStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.BackupStorageAccountResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param callback The callback\n   */\n  backupStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    callback: coreHttp.ServiceCallback<Models.BackupStorageResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  backupStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.BackupStorageResult>\n  ): void;\n  backupStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.BackupStorageResult>,\n    callback?: coreHttp.ServiceCallback<Models.BackupStorageResult>\n  ): Promise<Models.BackupStorageAccountResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        options\n      },\n      backupStorageAccountOperationSpec,\n      callback\n    ) as Promise<Models.BackupStorageAccountResponse>;\n  }\n\n  /**\n   * Restores a backed up storage account to a vault. This operation requires the storage/restore\n   * permission.\n   * @summary Restores a backed up storage account to a vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageBundleBackup The backup blob associated with a storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RestoreStorageAccountResponse>\n   */\n  restoreStorageAccount(\n    vaultBaseUrl: string,\n    storageBundleBackup: Uint8Array,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RestoreStorageAccountResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageBundleBackup The backup blob associated with a storage account.\n   * @param callback The callback\n   */\n  restoreStorageAccount(\n    vaultBaseUrl: string,\n    storageBundleBackup: Uint8Array,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageBundleBackup The backup blob associated with a storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  restoreStorageAccount(\n    vaultBaseUrl: string,\n    storageBundleBackup: Uint8Array,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  restoreStorageAccount(\n    vaultBaseUrl: string,\n    storageBundleBackup: Uint8Array,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.StorageBundle>,\n    callback?: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): Promise<Models.RestoreStorageAccountResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageBundleBackup,\n        options\n      },\n      restoreStorageAccountOperationSpec,\n      callback\n    ) as Promise<Models.RestoreStorageAccountResponse>;\n  }\n\n  /**\n   * Deletes a storage account. This operation requires the storage/delete permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DeleteStorageAccountResponse>\n   */\n  deleteStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.DeleteStorageAccountResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param callback The callback\n   */\n  deleteStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedStorageBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedStorageBundle>\n  ): void;\n  deleteStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeletedStorageBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedStorageBundle>\n  ): Promise<Models.DeleteStorageAccountResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        options\n      },\n      deleteStorageAccountOperationSpec,\n      callback\n    ) as Promise<Models.DeleteStorageAccountResponse>;\n  }\n\n  /**\n   * Gets information about a specified storage account. This operation requires the storage/get\n   * permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetStorageAccountResponse>\n   */\n  getStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetStorageAccountResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param callback The callback\n   */\n  getStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  getStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.StorageBundle>,\n    callback?: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): Promise<Models.GetStorageAccountResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        options\n      },\n      getStorageAccountOperationSpec,\n      callback\n    ) as Promise<Models.GetStorageAccountResponse>;\n  }\n\n  /**\n   * Creates or updates a new storage account. This operation requires the storage/set permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param resourceId Storage account resource id.\n   * @param activeKeyName Current active storage account key name.\n   * @param autoRegenerateKey whether keyvault should manage the storage account for the user.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.SetStorageAccountResponse>\n   */\n  setStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    resourceId: string,\n    activeKeyName: string,\n    autoRegenerateKey: boolean,\n    options?: Models.KeyVaultClientSetStorageAccountOptionalParams\n  ): Promise<Models.SetStorageAccountResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param resourceId Storage account resource id.\n   * @param activeKeyName Current active storage account key name.\n   * @param autoRegenerateKey whether keyvault should manage the storage account for the user.\n   * @param callback The callback\n   */\n  setStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    resourceId: string,\n    activeKeyName: string,\n    autoRegenerateKey: boolean,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param resourceId Storage account resource id.\n   * @param activeKeyName Current active storage account key name.\n   * @param autoRegenerateKey whether keyvault should manage the storage account for the user.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    resourceId: string,\n    activeKeyName: string,\n    autoRegenerateKey: boolean,\n    options: Models.KeyVaultClientSetStorageAccountOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  setStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    resourceId: string,\n    activeKeyName: string,\n    autoRegenerateKey: boolean,\n    options?:\n      | Models.KeyVaultClientSetStorageAccountOptionalParams\n      | coreHttp.ServiceCallback<Models.StorageBundle>,\n    callback?: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): Promise<Models.SetStorageAccountResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        resourceId,\n        activeKeyName,\n        autoRegenerateKey,\n        options\n      },\n      setStorageAccountOperationSpec,\n      callback\n    ) as Promise<Models.SetStorageAccountResponse>;\n  }\n\n  /**\n   * Updates the specified attributes associated with the given storage account. This operation\n   * requires the storage/set/update permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UpdateStorageAccountResponse>\n   */\n  updateStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: Models.KeyVaultClientUpdateStorageAccountOptionalParams\n  ): Promise<Models.UpdateStorageAccountResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param callback The callback\n   */\n  updateStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options: Models.KeyVaultClientUpdateStorageAccountOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  updateStorageAccount(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?:\n      | Models.KeyVaultClientUpdateStorageAccountOptionalParams\n      | coreHttp.ServiceCallback<Models.StorageBundle>,\n    callback?: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): Promise<Models.UpdateStorageAccountResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        options\n      },\n      updateStorageAccountOperationSpec,\n      callback\n    ) as Promise<Models.UpdateStorageAccountResponse>;\n  }\n\n  /**\n   * Regenerates the specified key value for the given storage account. This operation requires the\n   * storage/regeneratekey permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param keyName The storage account key name.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RegenerateStorageAccountKeyResponse>\n   */\n  regenerateStorageAccountKey(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RegenerateStorageAccountKeyResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param keyName The storage account key name.\n   * @param callback The callback\n   */\n  regenerateStorageAccountKey(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    keyName: string,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param keyName The storage account key name.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  regenerateStorageAccountKey(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    keyName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): void;\n  regenerateStorageAccountKey(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    keyName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.StorageBundle>,\n    callback?: coreHttp.ServiceCallback<Models.StorageBundle>\n  ): Promise<Models.RegenerateStorageAccountKeyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        keyName,\n        options\n      },\n      regenerateStorageAccountKeyOperationSpec,\n      callback\n    ) as Promise<Models.RegenerateStorageAccountKeyResponse>;\n  }\n\n  /**\n   * List storage SAS definitions for the given storage account. This operation requires the\n   * storage/listsas permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetSasDefinitionsResponse>\n   */\n  getSasDefinitions(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: Models.KeyVaultClientGetSasDefinitionsOptionalParams\n  ): Promise<Models.GetSasDefinitionsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param callback The callback\n   */\n  getSasDefinitions(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getSasDefinitions(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options: Models.KeyVaultClientGetSasDefinitionsOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionListResult>\n  ): void;\n  getSasDefinitions(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?:\n      | Models.KeyVaultClientGetSasDefinitionsOptionalParams\n      | coreHttp.ServiceCallback<Models.SasDefinitionListResult>,\n    callback?: coreHttp.ServiceCallback<Models.SasDefinitionListResult>\n  ): Promise<Models.GetSasDefinitionsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        options\n      },\n      getSasDefinitionsOperationSpec,\n      callback\n    ) as Promise<Models.GetSasDefinitionsResponse>;\n  }\n\n  /**\n   * The Get Deleted Sas Definitions operation returns the SAS definitions that have been deleted for\n   * a vault enabled for soft-delete. This operation requires the storage/listsas permission.\n   * @summary Lists deleted SAS definitions for the specified vault and storage account.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedSasDefinitionsResponse>\n   */\n  getDeletedSasDefinitions(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?: Models.KeyVaultClientGetDeletedSasDefinitionsOptionalParams\n  ): Promise<Models.GetDeletedSasDefinitionsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param callback The callback\n   */\n  getDeletedSasDefinitions(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedSasDefinitionListResult>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedSasDefinitions(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options: Models.KeyVaultClientGetDeletedSasDefinitionsOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.DeletedSasDefinitionListResult>\n  ): void;\n  getDeletedSasDefinitions(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    options?:\n      | Models.KeyVaultClientGetDeletedSasDefinitionsOptionalParams\n      | coreHttp.ServiceCallback<Models.DeletedSasDefinitionListResult>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedSasDefinitionListResult>\n  ): Promise<Models.GetDeletedSasDefinitionsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        options\n      },\n      getDeletedSasDefinitionsOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedSasDefinitionsResponse>;\n  }\n\n  /**\n   * The Get Deleted SAS Definition operation returns the specified deleted SAS definition along with\n   * its attributes. This operation requires the storage/getsas permission.\n   * @summary Gets the specified deleted sas definition.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedSasDefinitionResponse>\n   */\n  getDeletedSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetDeletedSasDefinitionResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param callback The callback\n   */\n  getDeletedSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedSasDefinitionBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedSasDefinitionBundle>\n  ): void;\n  getDeletedSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?:\n      | coreHttp.RequestOptionsBase\n      | coreHttp.ServiceCallback<Models.DeletedSasDefinitionBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedSasDefinitionBundle>\n  ): Promise<Models.GetDeletedSasDefinitionResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        sasDefinitionName,\n        options\n      },\n      getDeletedSasDefinitionOperationSpec,\n      callback\n    ) as Promise<Models.GetDeletedSasDefinitionResponse>;\n  }\n\n  /**\n   * Recovers the deleted SAS definition for the specified storage account. This operation can only\n   * be performed on a soft-delete enabled vault. This operation requires the storage/recover\n   * permission.\n   * @summary Recovers the deleted SAS definition.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RecoverDeletedSasDefinitionResponse>\n   */\n  recoverDeletedSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.RecoverDeletedSasDefinitionResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param callback The callback\n   */\n  recoverDeletedSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  recoverDeletedSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): void;\n  recoverDeletedSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SasDefinitionBundle>,\n    callback?: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): Promise<Models.RecoverDeletedSasDefinitionResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        sasDefinitionName,\n        options\n      },\n      recoverDeletedSasDefinitionOperationSpec,\n      callback\n    ) as Promise<Models.RecoverDeletedSasDefinitionResponse>;\n  }\n\n  /**\n   * Deletes a SAS definition from a specified storage account. This operation requires the\n   * storage/deletesas permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DeleteSasDefinitionResponse>\n   */\n  deleteSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.DeleteSasDefinitionResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param callback The callback\n   */\n  deleteSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    callback: coreHttp.ServiceCallback<Models.DeletedSasDefinitionBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.DeletedSasDefinitionBundle>\n  ): void;\n  deleteSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?:\n      | coreHttp.RequestOptionsBase\n      | coreHttp.ServiceCallback<Models.DeletedSasDefinitionBundle>,\n    callback?: coreHttp.ServiceCallback<Models.DeletedSasDefinitionBundle>\n  ): Promise<Models.DeleteSasDefinitionResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        sasDefinitionName,\n        options\n      },\n      deleteSasDefinitionOperationSpec,\n      callback\n    ) as Promise<Models.DeleteSasDefinitionResponse>;\n  }\n\n  /**\n   * Gets information about a SAS definition for the specified storage account. This operation\n   * requires the storage/getsas permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetSasDefinitionResponse>\n   */\n  getSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?: coreHttp.RequestOptionsBase\n  ): Promise<Models.GetSasDefinitionResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param callback The callback\n   */\n  getSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options: coreHttp.RequestOptionsBase,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): void;\n  getSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SasDefinitionBundle>,\n    callback?: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): Promise<Models.GetSasDefinitionResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        sasDefinitionName,\n        options\n      },\n      getSasDefinitionOperationSpec,\n      callback\n    ) as Promise<Models.GetSasDefinitionResponse>;\n  }\n\n  /**\n   * Creates or updates a new SAS definition for the specified storage account. This operation\n   * requires the storage/setsas permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param templateUri The SAS definition token template signed with an arbitrary key.  Tokens\n   * created according to the SAS definition will have the same properties as the template.\n   * @param sasType The type of SAS token the SAS definition will create. Possible values include:\n   * 'account', 'service'\n   * @param validityPeriod The validity period of SAS tokens created according to the SAS definition.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.SetSasDefinitionResponse>\n   */\n  setSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    templateUri: string,\n    sasType: Models.SasTokenType,\n    validityPeriod: string,\n    options?: Models.KeyVaultClientSetSasDefinitionOptionalParams\n  ): Promise<Models.SetSasDefinitionResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param templateUri The SAS definition token template signed with an arbitrary key.  Tokens\n   * created according to the SAS definition will have the same properties as the template.\n   * @param sasType The type of SAS token the SAS definition will create. Possible values include:\n   * 'account', 'service'\n   * @param validityPeriod The validity period of SAS tokens created according to the SAS definition.\n   * @param callback The callback\n   */\n  setSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    templateUri: string,\n    sasType: Models.SasTokenType,\n    validityPeriod: string,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param templateUri The SAS definition token template signed with an arbitrary key.  Tokens\n   * created according to the SAS definition will have the same properties as the template.\n   * @param sasType The type of SAS token the SAS definition will create. Possible values include:\n   * 'account', 'service'\n   * @param validityPeriod The validity period of SAS tokens created according to the SAS definition.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    templateUri: string,\n    sasType: Models.SasTokenType,\n    validityPeriod: string,\n    options: Models.KeyVaultClientSetSasDefinitionOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): void;\n  setSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    templateUri: string,\n    sasType: Models.SasTokenType,\n    validityPeriod: string,\n    options?:\n      | Models.KeyVaultClientSetSasDefinitionOptionalParams\n      | coreHttp.ServiceCallback<Models.SasDefinitionBundle>,\n    callback?: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): Promise<Models.SetSasDefinitionResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        sasDefinitionName,\n        templateUri,\n        sasType,\n        validityPeriod,\n        options\n      },\n      setSasDefinitionOperationSpec,\n      callback\n    ) as Promise<Models.SetSasDefinitionResponse>;\n  }\n\n  /**\n   * Updates the specified attributes associated with the given SAS definition. This operation\n   * requires the storage/setsas permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UpdateSasDefinitionResponse>\n   */\n  updateSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?: Models.KeyVaultClientUpdateSasDefinitionOptionalParams\n  ): Promise<Models.UpdateSasDefinitionResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param callback The callback\n   */\n  updateSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param storageAccountName The name of the storage account.\n   * @param sasDefinitionName The name of the SAS definition.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options: Models.KeyVaultClientUpdateSasDefinitionOptionalParams,\n    callback: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): void;\n  updateSasDefinition(\n    vaultBaseUrl: string,\n    storageAccountName: string,\n    sasDefinitionName: string,\n    options?:\n      | Models.KeyVaultClientUpdateSasDefinitionOptionalParams\n      | coreHttp.ServiceCallback<Models.SasDefinitionBundle>,\n    callback?: coreHttp.ServiceCallback<Models.SasDefinitionBundle>\n  ): Promise<Models.UpdateSasDefinitionResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        storageAccountName,\n        sasDefinitionName,\n        options\n      },\n      updateSasDefinitionOperationSpec,\n      callback\n    ) as Promise<Models.UpdateSasDefinitionResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers);\nconst createKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"keys/{key-name}/create\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName0],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      kty: \"kty\",\n      keySize: [\"options\", \"keySize\"],\n      keyOps: [\"options\", \"keyOps\"],\n      keyAttributes: [\"options\", \"keyAttributes\"],\n      tags: [\"options\", \"tags\"],\n      curve: [\"options\", \"curve\"]\n    },\n    mapper: {\n      ...Mappers.KeyCreateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst importKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"keys/{key-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName0],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      hsm: [\"options\", \"hsm\"],\n      key: \"key\",\n      keyAttributes: [\"options\", \"keyAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.KeyImportParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst deleteKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"keys/{key-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedKeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst updateKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"keys/{key-name}/{key-version}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      keyOps: [\"options\", \"keyOps\"],\n      keyAttributes: [\"options\", \"keyAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.KeyUpdateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"keys/{key-name}/{key-version}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getKeyVersionsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"keys/{key-name}/versions\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getKeysOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"keys\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst backupKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"keys/{key-name}/backup\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.BackupKeyResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst restoreKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"keys/restore\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      keyBundleBackup: \"keyBundleBackup\"\n    },\n    mapper: {\n      ...Mappers.KeyRestoreParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst encryptOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"keys/{key-name}/{key-version}/encrypt\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      algorithm: \"algorithm\",\n      value: \"value\"\n    },\n    mapper: {\n      ...Mappers.KeyOperationsParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst decryptOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"keys/{key-name}/{key-version}/decrypt\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      algorithm: \"algorithm\",\n      value: \"value\"\n    },\n    mapper: {\n      ...Mappers.KeyOperationsParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst signOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"keys/{key-name}/{key-version}/sign\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      algorithm: \"algorithm\",\n      value: \"value\"\n    },\n    mapper: {\n      ...Mappers.KeySignParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst verifyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"keys/{key-name}/{key-version}/verify\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      algorithm: \"algorithm\",\n      digest: \"digest\",\n      signature: \"signature\"\n    },\n    mapper: {\n      ...Mappers.KeyVerifyParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyVerifyResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst wrapKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"keys/{key-name}/{key-version}/wrapkey\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      algorithm: \"algorithm\",\n      value: \"value\"\n    },\n    mapper: {\n      ...Mappers.KeyOperationsParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst unwrapKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"keys/{key-name}/{key-version}/unwrapkey\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      algorithm: \"algorithm\",\n      value: \"value\"\n    },\n    mapper: {\n      ...Mappers.KeyOperationsParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedKeysOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedkeys\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedKeyListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedkeys/{key-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedKeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst purgeDeletedKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"deletedkeys/{key-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst recoverDeletedKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"deletedkeys/{key-name}/recover\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst setSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"secrets/{secret-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName0],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      value: \"value\",\n      tags: [\"options\", \"tags\"],\n      contentType: [\"options\", \"contentType\"],\n      secretAttributes: [\"options\", \"secretAttributes\"]\n    },\n    mapper: {\n      ...Mappers.SecretSetParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst deleteSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"secrets/{secret-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedSecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst updateSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"secrets/{secret-name}/{secret-version}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1, Parameters.secretVersion],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      contentType: [\"options\", \"contentType\"],\n      secretAttributes: [\"options\", \"secretAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.SecretUpdateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"secrets/{secret-name}/{secret-version}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1, Parameters.secretVersion],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getSecretsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"secrets\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getSecretVersionsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"secrets/{secret-name}/versions\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedSecretsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedsecrets\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedSecretListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedsecrets/{secret-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedSecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst purgeDeletedSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"deletedsecrets/{secret-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst recoverDeletedSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"deletedsecrets/{secret-name}/recover\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst backupSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"secrets/{secret-name}/backup\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.BackupSecretResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst restoreSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"secrets/restore\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      secretBundleBackup: \"secretBundleBackup\"\n    },\n    mapper: {\n      ...Mappers.SecretRestoreParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getCertificatesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"certificates\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.maxresults, Parameters.includePending, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst deleteCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"certificates/{certificate-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedCertificateBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst setCertificateContactsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"certificates/contacts\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: \"contacts\",\n    mapper: {\n      ...Mappers.Contacts,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.Contacts\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getCertificateContactsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"certificates/contacts\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.Contacts\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst deleteCertificateContactsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"certificates/contacts\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.Contacts\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getCertificateIssuersOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"certificates/issuers\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateIssuerListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst setCertificateIssuerOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"certificates/issuers/{issuer-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      provider: \"provider\",\n      credentials: [\"options\", \"credentials\"],\n      organizationDetails: [\"options\", \"organizationDetails\"],\n      attributes: [\"options\", \"attributes\"]\n    },\n    mapper: {\n      ...Mappers.CertificateIssuerSetParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.IssuerBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst updateCertificateIssuerOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"certificates/issuers/{issuer-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      provider: [\"options\", \"provider\"],\n      credentials: [\"options\", \"credentials\"],\n      organizationDetails: [\"options\", \"organizationDetails\"],\n      attributes: [\"options\", \"attributes\"]\n    },\n    mapper: {\n      ...Mappers.CertificateIssuerUpdateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.IssuerBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getCertificateIssuerOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"certificates/issuers/{issuer-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.IssuerBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst deleteCertificateIssuerOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"certificates/issuers/{issuer-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.IssuerBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst createCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"certificates/{certificate-name}/create\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName1],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      certificatePolicy: [\"options\", \"certificatePolicy\"],\n      certificateAttributes: [\"options\", \"certificateAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.CertificateCreateParameters,\n      required: true\n    }\n  },\n  responses: {\n    202: {\n      bodyMapper: Mappers.CertificateOperation\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst importCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"certificates/{certificate-name}/import\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName1],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      base64EncodedCertificate: \"base64EncodedCertificate\",\n      password: [\"options\", \"password\"],\n      certificatePolicy: [\"options\", \"certificatePolicy\"],\n      certificateAttributes: [\"options\", \"certificateAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.CertificateImportParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getCertificateVersionsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"certificates/{certificate-name}/versions\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getCertificatePolicyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"certificates/{certificate-name}/policy\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificatePolicy\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst updateCertificatePolicyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"certificates/{certificate-name}/policy\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: \"certificatePolicy\",\n    mapper: {\n      ...Mappers.CertificatePolicy,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificatePolicy\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst updateCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"certificates/{certificate-name}/{certificate-version}\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.certificateName0,\n    Parameters.certificateVersion\n  ],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      certificatePolicy: [\"options\", \"certificatePolicy\"],\n      certificateAttributes: [\"options\", \"certificateAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.CertificateUpdateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"certificates/{certificate-name}/{certificate-version}\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.certificateName0,\n    Parameters.certificateVersion\n  ],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst updateCertificateOperationOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"certificates/{certificate-name}/pending\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      cancellationRequested: \"cancellationRequested\"\n    },\n    mapper: {\n      ...Mappers.CertificateOperationUpdateParameter,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateOperation\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getCertificateOperationOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"certificates/{certificate-name}/pending\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateOperation\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst deleteCertificateOperationOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"certificates/{certificate-name}/pending\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateOperation\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst mergeCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"certificates/{certificate-name}/pending/merge\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      x509Certificates: \"x509Certificates\",\n      certificateAttributes: [\"options\", \"certificateAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.CertificateMergeParameters,\n      required: true\n    }\n  },\n  responses: {\n    201: {\n      bodyMapper: Mappers.CertificateBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst backupCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"certificates/{certificate-name}/backup\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.BackupCertificateResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst restoreCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"certificates/restore\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      certificateBundleBackup: \"certificateBundleBackup\"\n    },\n    mapper: {\n      ...Mappers.CertificateRestoreParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedCertificatesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedcertificates\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.maxresults, Parameters.includePending, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedCertificateListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedcertificates/{certificate-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedCertificateBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst purgeDeletedCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"deletedcertificates/{certificate-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst recoverDeletedCertificateOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"deletedcertificates/{certificate-name}/recover\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.CertificateBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getStorageAccountsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"storage\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.StorageListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedStorageAccountsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedstorage\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedStorageListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedStorageAccountOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedstorage/{storage-account-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedStorageBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst purgeDeletedStorageAccountOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"deletedstorage/{storage-account-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst recoverDeletedStorageAccountOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"deletedstorage/{storage-account-name}/recover\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.StorageBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst backupStorageAccountOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"storage/{storage-account-name}/backup\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName1],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.BackupStorageResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst restoreStorageAccountOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"storage/restore\",\n  urlParameters: [Parameters.vaultBaseUrl],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      storageBundleBackup: \"storageBundleBackup\"\n    },\n    mapper: {\n      ...Mappers.StorageRestoreParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.StorageBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst deleteStorageAccountOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"storage/{storage-account-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedStorageBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getStorageAccountOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"storage/{storage-account-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.StorageBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst setStorageAccountOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"storage/{storage-account-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      resourceId: \"resourceId\",\n      activeKeyName: \"activeKeyName\",\n      autoRegenerateKey: \"autoRegenerateKey\",\n      regenerationPeriod: [\"options\", \"regenerationPeriod\"],\n      storageAccountAttributes: [\"options\", \"storageAccountAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.StorageAccountCreateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.StorageBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst updateStorageAccountOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"storage/{storage-account-name}\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      activeKeyName: [\"options\", \"activeKeyName\"],\n      autoRegenerateKey: [\"options\", \"autoRegenerateKey\"],\n      regenerationPeriod: [\"options\", \"regenerationPeriod\"],\n      storageAccountAttributes: [\"options\", \"storageAccountAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.StorageAccountUpdateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.StorageBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst regenerateStorageAccountKeyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"storage/{storage-account-name}/regeneratekey\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      keyName: \"keyName\"\n    },\n    mapper: {\n      ...Mappers.StorageAccountRegenerteKeyParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.StorageBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getSasDefinitionsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"storage/{storage-account-name}/sas\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SasDefinitionListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedSasDefinitionsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedstorage/{storage-account-name}/sas\",\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.storageAccountName0],\n  queryParameters: [Parameters.maxresults, Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedSasDefinitionListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedSasDefinitionOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedstorage/{storage-account-name}/sas/{sas-definition-name}\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.storageAccountName0,\n    Parameters.sasDefinitionName\n  ],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedSasDefinitionBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst recoverDeletedSasDefinitionOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"deletedstorage/{storage-account-name}/sas/{sas-definition-name}/recover\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.storageAccountName0,\n    Parameters.sasDefinitionName\n  ],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SasDefinitionBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst deleteSasDefinitionOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"storage/{storage-account-name}/sas/{sas-definition-name}\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.storageAccountName0,\n    Parameters.sasDefinitionName\n  ],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedSasDefinitionBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getSasDefinitionOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"storage/{storage-account-name}/sas/{sas-definition-name}\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.storageAccountName0,\n    Parameters.sasDefinitionName\n  ],\n  queryParameters: [Parameters.apiVersion],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SasDefinitionBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst setSasDefinitionOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"storage/{storage-account-name}/sas/{sas-definition-name}\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.storageAccountName0,\n    Parameters.sasDefinitionName\n  ],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      templateUri: \"templateUri\",\n      sasType: \"sasType\",\n      validityPeriod: \"validityPeriod\",\n      sasDefinitionAttributes: [\"options\", \"sasDefinitionAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.SasDefinitionCreateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.SasDefinitionBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst updateSasDefinitionOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"storage/{storage-account-name}/sas/{sas-definition-name}\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.storageAccountName0,\n    Parameters.sasDefinitionName\n  ],\n  queryParameters: [Parameters.apiVersion],\n  requestBody: {\n    parameterPath: {\n      templateUri: [\"options\", \"templateUri\"],\n      sasType: [\"options\", \"sasType\"],\n      validityPeriod: [\"options\", \"validityPeriod\"],\n      sasDefinitionAttributes: [\"options\", \"sasDefinitionAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: {\n      ...Mappers.SasDefinitionUpdateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.SasDefinitionBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nexport {\n  KeyVaultClient,\n  KeyVaultClientContext,\n  Models as KeyVaultModels,\n  Mappers as KeyVaultMappers\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nexport const SDK_VERSION: string = \"4.0.3\";\n\nexport const RetryConstants = {\n  MIN_RETRY_INTERVAL_MS: 3000\n};\n\nexport const HeaderConstants = {\n  USER_AGENT: \"User-Agent\",\n  X_MS_CLIENT_REQUEST_ID: \"x-ms-client-request-id\"\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { TokenCredential } from \"@azure/core-http\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyOptions, RequestPolicyFactory } from \"@azure/core-http\";\nimport { Constants } from \"@azure/core-http\";\nimport { HttpOperationResponse } from \"@azure/core-http\";\nimport { HttpHeaders } from \"@azure/core-http\";\nimport { WebResource } from \"@azure/core-http\";\nimport { AccessTokenCache, ExpiringAccessTokenCache } from \"@azure/core-http\";\n\n/**\n * Creates a new ChallengeBasedAuthenticationPolicy factory.\n *\n * @param credential The TokenCredential implementation that can supply the challenge token.\n */\nexport function challengeBasedAuthenticationPolicy(credential: TokenCredential): RequestPolicyFactory {\n  const tokenCache: AccessTokenCache = new ExpiringAccessTokenCache();\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new ChallengeBasedAuthenticationPolicy(nextPolicy, options, credential, tokenCache);\n    }\n  };\n}\n\nexport class AuthenticationChallenge {\n  constructor(public scopes: string[] | string) { }\n}\n\n/**\n *\n * Provides a RequestPolicy that can request a token from a TokenCredential\n * implementation and then apply it to the Authorization header of a request\n * as a Bearer token.\n *\n */\nexport class ChallengeBasedAuthenticationPolicy extends BaseRequestPolicy {\n  private challenge: AuthenticationChallenge | undefined = undefined;\n\n  /**\n   * Creates a new ChallengeBasedAuthenticationPolicy object.\n   *\n   * @param nextPolicy The next RequestPolicy in the request pipeline.\n   * @param options Options for this RequestPolicy.\n   * @param credential The TokenCredential implementation that can supply the bearer token.\n   * @param tokenCache The cache for the most recent AccessToken returned by the TokenCredential.\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    private credential: TokenCredential,\n    private tokenCache: AccessTokenCache\n  ) {\n    super(nextPolicy, options);\n  }\n\n  private parseWWWAuthenticate(www_authenticate: string): string {\n    // Parses an authentication message like:\n    // ```\n    // Bearer authorization=\"some_authorization\", resource=\"https://some.url\"\n    // ```\n    let authenticateArray = www_authenticate.split(\" \");\n\n    // Remove the \"Bearer\" piece\n    delete authenticateArray[0];\n\n    // Split the KV comma-separated list\n    let commaSep = authenticateArray.join().split(\",\");\n    for (let item of commaSep) {\n      // Split the key/value pairs\n      let kv = item.split(\"=\");\n      if (kv[0].trim() == \"resource\") {\n        // Remove the quotations around the string\n        let resource = kv[1].trim().replace(/['\"]+/g, '');\n\n        return resource;\n      }\n    }\n    return \"\";\n  }\n\n  /**\n   * Applies the Bearer token to the request through the Authorization header.\n   * @param webResource\n   */\n  public async sendRequest(\n    webResource: WebResource\n  ): Promise<HttpOperationResponse> {\n    if (!webResource.headers) webResource.headers = new HttpHeaders();\n\n    // Ensure that we're about to use a secure connection\n    if (!webResource.url.startsWith(\"https:\")) {\n      throw new Error(\"The resource address for authorization must use the 'https' protocol.\");\n    }\n\n    let originalBody = webResource.body;\n\n    if (this.challenge == undefined) {\n      // Use a blank to start the challenge\n      webResource.body = \"\";\n    } else {\n      // or use the cached token if we have one\n      await this.authenticateRequest(webResource);\n    }\n\n    let response = await this._nextPolicy.sendRequest(webResource);\n\n    if (response.status == 401) {\n      webResource.body = originalBody;\n\n      let www_authenticate = response.headers.get(\"WWW-Authenticate\");\n\n      if (www_authenticate) {\n        let resource = this.parseWWWAuthenticate(www_authenticate);\n        let challenge = new AuthenticationChallenge(resource + \"/.default\")\n\n        if (this.challenge != challenge) {\n          this.challenge = challenge;\n          this.tokenCache.setCachedToken(undefined);\n\n          await this.authenticateRequest(webResource);\n        }\n      }\n      return this._nextPolicy.sendRequest(webResource);\n    } else {\n      return response;\n    }\n  }\n\n  private async authenticateRequest(webResource: WebResource): Promise<void> {\n    let accessToken = this.tokenCache.getCachedToken();\n    if (accessToken === undefined) {\n      accessToken = (await this.credential.getToken(this.challenge!.scopes)) || undefined;\n      this.tokenCache.setCachedToken(accessToken);\n    }\n\n    if (accessToken) {\n      webResource.headers.set(\n        Constants.HeaderConstants.AUTHORIZATION,\n        `Bearer ${accessToken.token}`\n      );\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PollOperation, PollOperationState } from \"./pollOperation\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\n\n/**\n * CancelOnProgress is used as the return value of a Poller's onProgress method.\n * When a user invokes onProgress, they're required to pass in a function that will be\n * called as a callback with the new data received each time the poll operation is updated.\n * onProgress returns a function that will prevent any further update to reach the original callback.\n */\nexport type CancelOnProgress = () => void;\n\n/**\n * PollProgressCallback<TState> is the type of the callback functions sent to onProgress.\n * These functions will receive a TState that is defined by your implementation of\n * the Poller class.\n */\nexport type PollProgressCallback<TState> = (state: TState) => void;\n\n/**\n * When a poller is manually stopped through the `stopPolling` method,\n * the poller will be rejected with an instance of the PollerStoppedError.\n */\nexport class PollerStoppedError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"PollerStoppedError\";\n    Object.setPrototypeOf(this, PollerStoppedError.prototype);\n  }\n}\n\n/**\n * When a poller is cancelled through the `cancelOperation` method,\n * the poller will be rejected with an instance of the PollerCancelledError.\n */\nexport class PollerCancelledError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"PollerCancelledError\";\n    Object.setPrototypeOf(this, PollerCancelledError.prototype);\n  }\n}\n\n/**\n * Abstract representation of a poller, intended to expose just the minimal API that the user needs to work with.\n */\nexport interface PollerLike<TState extends PollOperationState<TResult>, TResult> {\n  /**\n   * Returns a promise that will resolve once a single polling request finishes.\n   * It does this by calling the update method of the Poller's operation.\n   */\n  poll(options?: { abortSignal?: AbortSignalLike }): Promise<void>;\n  /**\n   * Returns a promise that will resolve once the underlying operation is completed.\n   */\n  pollUntilDone(): Promise<TResult>;\n  /**\n   * Invokes the provided callback after each polling is completed,\n   * sending the current state of the poller's operation.\n   *\n   * It returns a method that can be used to stop receiving updates on the given callback function.\n   */\n  onProgress(callback: (state: TState) => void): CancelOnProgress;\n  /**\n   * Returns true if the poller has finished polling.\n   */\n  isDone(): boolean;\n  /**\n   * Stops the poller. After this, no manual or automated requests can be sent.\n   */\n  stopPolling(): void;\n  /**\n   * Returns true if the poller is stopped.\n   */\n  isStopped(): boolean;\n  /**\n   * Attempts to cancel the underlying operation.\n   */\n  cancelOperation(options?: { abortSignal?: AbortSignalLike }): Promise<void>;\n  /**\n   * Returns the state of the operation.\n   * The TState defined in PollerLike can be a subset of the TState defined in\n   * the Poller implementation.\n   */\n  getOperationState(): TState;\n  /**\n   * Returns the result value of the operation,\n   * regardless of the state of the poller.\n   * It can return undefined or an incomplete form of the final TResult value\n   * depending on the implementation.\n   */\n  getResult(): TResult | undefined;\n  /**\n   * Returns a serialized version of the poller's operation\n   * by invoking the operation's toString method.\n   */\n  toString(): string;\n}\n\n/**\n * A class that represents the definition of a program that polls through consecutive requests\n * until it reaches a state of completion.\n *\n * A poller can be executed manually, by polling request by request by calling to the `poll()` method repeatedly, until its operation is completed.\n * It also provides a way to wait until the operation completes, by calling `pollUntilDone()` and waiting until the operation finishes.\n * Pollers can also request the cancellation of the ongoing process to whom is providing the underlying long running operation.\n *\n * ```ts\n * const poller = new MyPoller();\n *\n * // Polling just once:\n * await poller.poll();\n *\n * // We can try to cancel the request here, by calling:\n * //\n * //     await poller.cancelOperation();\n * //\n *\n * // Getting the final result:\n * const result = await poller.pollUntilDone();\n * ```\n *\n * The Poller is defined by two types, a type representing the state of the poller, which\n * must include a basic set of properties from `PollOperationState<TResult>`,\n * and a return type defined by `TResult`, which can be anything.\n *\n * The Poller class implements the `PollerLike` interface, which allows poller implementations to avoid having\n * to export the Poller's class directly, and instead only export the already instantiated poller with the PollerLike type.\n *\n * ```ts\n * class Client {\n *   public async makePoller: PollerLike<MyOperationState, MyResult> {\n *     const poller = new MyPoller({});\n *     // It might be preferred to return the poller after the first request is made,\n *     // so that some information can be obtained right away.\n *     await poller.poll();\n *     return poller;\n *   }\n * }\n *\n * const poller: PollerLike<MyOperationState, MyResult> = myClient.makePoller();\n * ```\n *\n * A poller can be created through its constructor, then it can be polled until it's completed.\n * At any point in time, the state of the poller can be obtained without delay through the getOperationState method.\n * At any point in time, the intermediate forms of the result type can be requested without delay.\n * Once the underlying operation is marked as completed, the poller will stop and the final value will be returned.\n *\n * ```ts\n * const poller = myClient.makePoller();\n * const state: MyOperationState = poller.getOperationState();\n *\n * // The intermediate result can be obtained at any time.\n * const result: MyResult | undefined = poller.getResult();\n *\n * // The final result can only be obtained after the poller finishes.\n * const result: MyResult = await poller.pollUntilDone();\n * ```\n *\n */\nexport abstract class Poller<TState extends PollOperationState<TResult>, TResult>\n  implements PollerLike<TState, TResult> {\n  private stopped: boolean = true;\n  private resolve?: (value?: TResult) => void;\n  private reject?: (error: PollerStoppedError | PollerCancelledError | Error) => void;\n  private pollOncePromise?: Promise<void>;\n  private cancelPromise?: Promise<void>;\n  private promise: Promise<TResult>;\n  private pollProgressCallbacks: PollProgressCallback<TState>[] = [];\n\n  /**\n   * The poller's operation is available in full to any of the methods of the Poller class\n   * and any class extending the Poller class.\n   */\n  protected operation: PollOperation<TState, TResult>;\n\n  /**\n   * A poller needs to be initialized by passing in at least the basic properties of the PollOperation<TState, TResult>.\n   *\n   * When writing an implementation of a Poller, this implementation needs to deal with the initialization\n   * of any custom state beyond the basic definition of the poller. The basic poller assumes that the poller's\n   * operation has already been defined, at least its basic properties. The code below shows how to approach\n   * the definition of the constructor of a new custom poller.\n   *\n   * ```ts\n   * export class MyPoller extends Poller<MyOperationState, string> {\n   *   constructor({\n   *     // Anything you might need outside of the basics\n   *   }) {\n   *     let state: MyOperationState = {\n   *       privateProperty: private,\n   *       publicProperty: public,\n   *     };\n   *\n   *     const operation = {\n   *       state,\n   *       update,\n   *       cancel,\n   *       toString\n   *     }\n   *\n   *     // Sending the operation to the parent's constructor.\n   *     super(operation);\n   *\n   *     // You can assign more local properties here.\n   *   }\n   * }\n   * ```\n   *\n   * Inside of this constructor, a new promise is created. This will be used to\n   * tell the user when the poller finishes (see `pollUntilDone()`). The promise's\n   * resolve and reject methods are also used internally to control when to resolve\n   * or reject anyone waiting for the poller to finish.\n   *\n   * The constructor of a custom implementation of a poller is where any serialized version of\n   * a previous poller's operation should be deserialized into the operation sent to the\n   * base constructor. For example:\n   *\n   * ```ts\n   * export class MyPoller extends Poller<MyOperationState, string> {\n   *   constructor(\n   *     baseOperation: string | undefined\n   *   ) {\n   *     let state: MyOperationState = {};\n   *     if (baseOperation) {\n   *       state = {\n   *         ...JSON.parse(baseOperation).state,\n   *         ...state\n   *       };\n   *     }\n   *     const operation = {\n   *       state,\n   *       // ...\n   *     }\n   *     super(operation);\n   *   }\n   * }\n   * ```\n   *\n   * @param operation Must contain the basic properties of PollOperation<State, TResult>.\n   */\n  constructor(operation: PollOperation<TState, TResult>) {\n    this.operation = operation;\n    this.promise = new Promise(\n      (\n        resolve: (result?: TResult) => void,\n        reject: (error: PollerStoppedError | PollerCancelledError | Error) => void\n      ) => {\n        this.resolve = resolve;\n        this.reject = reject;\n      }\n    );\n    // This prevents the UnhandledPromiseRejectionWarning in node.js from being thrown.\n    // The above warning would get thrown if `poller.poll` is called, it returns an error,\n    // and pullUntilDone did not have a .catch or await try/catch on it's return value.\n    this.promise.catch(() => {});\n  }\n\n  /**\n   * Defines how much to wait between each poll request.\n   * This has to be implemented by your custom poller.\n   *\n   * @azure/core-http has a simple implementation of a delay function that waits as many milliseconds as specified.\n   * This can be used as follows:\n   *\n   * ```ts\n   * import { delay } from \"@azure/core-http\";\n   *\n   * export class MyPoller extends Poller<MyOperationState, string> {\n   *   // The other necessary definitions.\n   *\n   *   async delay(): Promise<void> {\n   *     const milliseconds = 1000;\n   *     return delay(milliseconds);\n   *   }\n   * }\n   * ```\n   *\n   */\n  protected abstract async delay(): Promise<void>;\n\n  /**\n   * @internal\n   * @ignore\n   * Starts a loop that will break only if the poller is done\n   * or if the poller is stopped.\n   */\n  private async startPolling(): Promise<void> {\n    if (this.stopped) {\n      this.stopped = false;\n    }\n    while (!this.isStopped() && !this.isDone()) {\n      await this.poll();\n      await this.delay();\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * pollOnce does one polling, by calling to the update method of the underlying\n   * poll operation to make any relevant change effective.\n   *\n   * It only optionally receives an object with an abortSignal property, from @azure/abort-controller's AbortSignalLike.\n   *\n   * @param options Optional properties passed to the operation's update method.\n   */\n  private async pollOnce(options: { abortSignal?: AbortSignalLike } = {}): Promise<void> {\n    const state: PollOperationState<TResult> = this.operation.state;\n    try {\n      if (!this.isDone()) {\n        this.operation = await this.operation.update({\n          abortSignal: options.abortSignal,\n          fireProgress: this.fireProgress.bind(this)\n        });\n        if (this.isDone() && this.resolve) {\n          this.resolve(state.result);\n        }\n      }\n    } catch (e) {\n      state.error = e;\n      if (this.reject) {\n        this.reject(e);\n      }\n      throw e;\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * fireProgress calls the functions passed in via onProgress the method of the poller.\n   *\n   * It loops over all of the callbacks received from onProgress, and executes them, sending them\n   * the current operation state.\n   *\n   * @param state The current operation state.\n   */\n  private fireProgress(state: TState): void {\n    for (const callback of this.pollProgressCallbacks) {\n      callback(state);\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Invokes the underlying operation's cancel method, and rejects the\n   * pollUntilDone promise.\n   */\n  private async cancelOnce(options: { abortSignal?: AbortSignalLike } = {}): Promise<void> {\n    this.operation = await this.operation.cancel(options);\n    if (this.reject) {\n      this.reject(new PollerCancelledError(\"Poller cancelled\"));\n    }\n  }\n\n  /**\n   * Returns a promise that will resolve once a single polling request finishes.\n   * It does this by calling the update method of the Poller's operation.\n   *\n   * It only optionally receives an object with an abortSignal property, from @azure/abort-controller's AbortSignalLike.\n   *\n   * @param options Optional properties passed to the operation's update method.\n   */\n  public poll(options: { abortSignal?: AbortSignalLike } = {}): Promise<void> {\n    if (!this.pollOncePromise) {\n      this.pollOncePromise = this.pollOnce(options);\n      const clearPollOncePromise = (): void => {\n        this.pollOncePromise = undefined;\n      };\n      this.pollOncePromise.then(clearPollOncePromise, clearPollOncePromise);\n    }\n    return this.pollOncePromise;\n  }\n\n  /**\n   * Returns a promise that will resolve once the underlying operation is completed.\n   */\n  public async pollUntilDone(): Promise<TResult> {\n    if (this.stopped) {\n      this.startPolling().catch(this.reject);\n    }\n    return this.promise;\n  }\n\n  /**\n   * Invokes the provided callback after each polling is completed,\n   * sending the current state of the poller's operation.\n   *\n   * It returns a method that can be used to stop receiving updates on the given callback function.\n   */\n  public onProgress(callback: (state: TState) => void): CancelOnProgress {\n    this.pollProgressCallbacks.push(callback);\n    return (): void => {\n      this.pollProgressCallbacks = this.pollProgressCallbacks.filter((c) => c !== callback);\n    };\n  }\n\n  /**\n   * Returns true if the poller has finished polling.\n   */\n  public isDone(): boolean {\n    const state: PollOperationState<TResult> = this.operation.state;\n    return Boolean(state.isCompleted || state.isCancelled || state.error);\n  }\n\n  /**\n   * Stops the poller from continuing to poll.\n   */\n  public stopPolling(): void {\n    if (!this.stopped) {\n      this.stopped = true;\n      if (this.reject) {\n        this.reject(new PollerStoppedError(\"This poller is already stopped\"));\n      }\n    }\n  }\n\n  /**\n   * Returns true if the poller is stopped.\n   */\n  public isStopped(): boolean {\n    return this.stopped;\n  }\n\n  /**\n   * Attempts to cancel the underlying operation.\n   *\n   * It only optionally receives an object with an abortSignal property, from @azure/abort-controller's AbortSignalLike.\n   *\n   * If it's called again before it finishes, it will throw an error.\n   *\n   * @param options Optional properties passed to the operation's update method.\n   */\n  public cancelOperation(options: { abortSignal?: AbortSignalLike } = {}): Promise<void> {\n    if (!this.stopped) {\n      this.stopped = true;\n    }\n    if (!this.cancelPromise) {\n      this.cancelPromise = this.cancelOnce(options);\n    } else if (options.abortSignal) {\n      throw new Error(\"A cancel request is currently pending\");\n    }\n    return this.cancelPromise;\n  }\n\n  /**\n   * Returns the state of the operation.\n   *\n   * Even though TState will be the same type inside any of the methods of any extension of the Poller class,\n   * implementations of the pollers can customize what's shared with the public by writing their own\n   * version of the `getOperationState` method, and by defining two types, one representing the internal state of the poller\n   * and a public type representing a safe to share subset of the properties of the internal state.\n   * Their definition of getOperationState can then return their public type.\n   *\n   * Example:\n   *\n   * ```ts\n   * // Let's say we have our poller's operation state defined as:\n   * interface MyOperationState extends PollOperationState<ResultType> {\n   *   privateProperty?: string;\n   *   publicProperty?: string;\n   * }\n   *\n   * // To allow us to have a true separation of public and private state, we have to define another interface:\n   * interface PublicState extends PollOperationState<ResultType> {\n   *   publicProperty?: string;\n   * }\n   *\n   * // Then, we define our Poller as follows:\n   * export class MyPoller extends Poller<MyOperationState, ResultType> {\n   *   // ... More content is needed here ...\n   *\n   *   public getOperationState(): PublicState {\n   *     const state: PublicState = this.operation.state;\n   *     return {\n   *       // Properties from PollOperationState<TResult>\n   *       isStarted: state.isStarted,\n   *       isCompleted: state.isCompleted,\n   *       isCancelled: state.isCancelled,\n   *       error: state.error,\n   *       result: state.result,\n   *\n   *       // The only other property needed by PublicState.\n   *       publicProperty: state.publicProperty\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * You can see this in the tests of this repository, go to the file:\n   * `../test/utils/testPoller.ts`\n   * and look for the getOperationState implementation.\n   */\n  public getOperationState(): TState {\n    return this.operation.state;\n  }\n\n  /**\n   * Returns the result value of the operation,\n   * regardless of the state of the poller.\n   * It can return undefined or an incomplete form of the final TResult value\n   * depending on the implementation.\n   */\n  public getResult(): TResult | undefined {\n    const state: PollOperationState<TResult> = this.operation.state;\n    return state.result;\n  }\n\n  /**\n   * Returns a serialized version of the poller's operation\n   * by invoking the operation's toString method.\n   */\n  public toString(): string {\n    return this.operation.toString();\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { PollOperationState, PollOperation } from \"@azure/core-lro\";\nimport { RequestOptionsBase } from \"@azure/core-http\";\nimport { DeletedSecret, SecretClientInterface } from \"../../secretsModels\";\n\n/**\n * An interface representing the state of a delete secret's poll operation\n */\nexport interface DeleteSecretPollOperationState extends PollOperationState<DeletedSecret> {\n  /**\n   * The name of the secret.\n   */\n  name: string;\n  /**\n   * Options for the core-http requests.\n   */\n  requestOptions?: RequestOptionsBase;\n  /**\n   * An interface representing a SecretClient. For internal use.\n   */\n  client: SecretClientInterface;\n}\n\n/**\n * An interface representing a delete secret's poll operation\n */\nexport interface DeleteSecretPollOperation\n  extends PollOperation<DeleteSecretPollOperationState, DeletedSecret> {}\n\n/**\n * @summary Reaches to the service and updates the delete secret's poll operation.\n * @param [options] The optional parameters, which are an abortSignal from @azure/abort-controller and a function that triggers the poller's onProgress function.\n */\nasync function update(\n  this: DeleteSecretPollOperation,\n  options: {\n    abortSignal?: AbortSignalLike;\n    fireProgress?: (state: DeleteSecretPollOperationState) => void;\n  } = {}\n): Promise<DeleteSecretPollOperation> {\n  const state = this.state;\n  const { name, client } = state;\n\n  const requestOptions = state.requestOptions || {};\n  if (options.abortSignal) {\n    requestOptions.abortSignal = options.abortSignal;\n  }\n\n  if (!state.isStarted) {\n    const deletedSecret = await client.deleteSecret(name, requestOptions);\n    state.isStarted = true;\n    state.result = deletedSecret;\n    if (!deletedSecret.properties.recoveryId) {\n      state.isCompleted = true;\n    }\n  }\n\n  if (!state.isCompleted) {\n    try {\n      state.result = await client.getDeletedSecret(name, { requestOptions });\n      state.isCompleted = true;\n    } catch (error) {\n      if (error.statusCode === 403) {\n        // At this point, the resource exists but the user doesn't have access to it.\n        state.isCompleted = true;\n      } else if (error.statusCode !== 404) {\n        state.error = error;\n        state.isCompleted = true;\n      }\n    }\n  }\n\n  return makeDeleteSecretPollOperation(state);\n}\n\n/**\n * @summary Reaches to the service and cancels the secret's operation, also updating the secret's poll operation\n * @param [options] The optional parameters, which is only an abortSignal from @azure/abort-controller\n */\nasync function cancel(\n  this: DeleteSecretPollOperation,\n  _: { abortSignal?: AbortSignal } = {}\n): Promise<DeleteSecretPollOperation> {\n  throw new Error(\"Canceling the deletion of a secret is not supported.\");\n}\n\n/**\n * @summary Serializes the create secret's poll operation\n */\nfunction toString(this: DeleteSecretPollOperation): string {\n  return JSON.stringify({\n    state: this.state\n  });\n}\n\n/**\n * @summary Builds a create secret's poll operation\n * @param [state] A poll operation's state, in case the new one is intended to follow up where the previous one was left.\n */\nexport function makeDeleteSecretPollOperation(\n  state: DeleteSecretPollOperationState\n): DeleteSecretPollOperation {\n  return {\n    state: {\n      ...state\n    },\n    update,\n    cancel,\n    toString\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { delay, RequestOptionsBase } from \"@azure/core-http\";\nimport { Poller } from \"@azure/core-lro\";\nimport { DeleteSecretPollOperationState, makeDeleteSecretPollOperation } from \"./operation\";\nimport { DeletedSecret, SecretClientInterface } from \"../../secretsModels\";\n\nexport interface DeleteSecretPollerOptions {\n  client: SecretClientInterface;\n  name: string;\n  requestOptions?: RequestOptionsBase;\n  intervalInMs?: number;\n  resumeFrom?: string;\n}\n\n/**\n * Class that deletes a poller that waits until a secret finishes being deleted\n */\nexport class DeleteSecretPoller extends Poller<DeleteSecretPollOperationState, DeletedSecret> {\n  /**\n   * Defines how much time the poller is going to wait before making a new request to the service.\n   * @memberof DeleteSecretPoller\n   */\n  public intervalInMs: number;\n\n  constructor(options: DeleteSecretPollerOptions) {\n    const { client, name, requestOptions, intervalInMs = 2000, resumeFrom } = options;\n\n    let state: DeleteSecretPollOperationState | undefined;\n\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n\n    const operation = makeDeleteSecretPollOperation({\n      ...state,\n      name,\n      requestOptions,\n      client\n    });\n\n    super(operation);\n\n    this.intervalInMs = intervalInMs;\n  }\n\n  /**\n   * The method used by the poller to wait before attempting to update its operation.\n   * @memberof DeleteSecretPoller\n   */\n  async delay(): Promise<void> {\n    return delay(this.intervalInMs);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { PollOperationState, PollOperation } from \"@azure/core-lro\";\nimport { RequestOptionsBase } from \"@azure/core-http\";\nimport { SecretProperties, SecretClientInterface } from \"../../secretsModels\";\n\n/**\n * An interface representing the state of a delete secret's poll operation\n */\nexport interface RecoverDeletedSecretPollOperationState\n  extends PollOperationState<SecretProperties> {\n  /**\n   * The name of the secret.\n   */\n  name: string;\n  /**\n   * Options for the core-http requests.\n   */\n  requestOptions?: RequestOptionsBase;\n  /**\n   * An interface representing a SecretClient. For internal use.\n   */\n  client: SecretClientInterface;\n}\n\n/**\n * An interface representing a delete secret's poll operation\n */\nexport interface RecoverDeletedSecretPollOperation\n  extends PollOperation<RecoverDeletedSecretPollOperationState, SecretProperties> {}\n\n/**\n * @summary Reaches to the service and updates the delete secret's poll operation.\n * @param [options] The optional parameters, which are an abortSignal from @azure/abort-controller and a function that triggers the poller's onProgress function.\n */\nasync function update(\n  this: RecoverDeletedSecretPollOperation,\n  options: {\n    abortSignal?: AbortSignalLike;\n    fireProgress?: (state: RecoverDeletedSecretPollOperationState) => void;\n  } = {}\n): Promise<RecoverDeletedSecretPollOperation> {\n  const state = this.state;\n  const { name, client } = state;\n\n  const requestOptions = state.requestOptions || {};\n  if (options.abortSignal) {\n    requestOptions.abortSignal = options.abortSignal;\n  }\n\n  if (!state.isStarted) {\n    try {\n      state.result = (await client.getSecret(name, { requestOptions })).properties;\n      state.isCompleted = true;\n    } catch (_) {}\n    if (!state.isCompleted) {\n      state.result = await client.recoverDeletedSecret(name, { requestOptions });\n      state.isStarted = true;\n    }\n  }\n\n  if (!state.isCompleted) {\n    try {\n      state.result = (await client.getSecret(name, { requestOptions })).properties;\n      state.isCompleted = true;\n    } catch (error) {\n      if (error.statusCode === 403) {\n        // At this point, the resource exists but the user doesn't have access to it.\n        state.isCompleted = true;\n      } else if (error.statusCode !== 404) {\n        state.error = error;\n        state.isCompleted = true;\n      }\n    }\n  }\n\n  return makeRecoverDeletedSecretPollOperation(state);\n}\n\n/**\n * @summary Reaches to the service and cancels the secret's operation, also updating the secret's poll operation\n * @param [options] The optional parameters, which is only an abortSignal from @azure/abort-controller\n */\nasync function cancel(\n  this: RecoverDeletedSecretPollOperation,\n  _: { abortSignal?: AbortSignal } = {}\n): Promise<RecoverDeletedSecretPollOperation> {\n  throw new Error(\"Canceling the deletion of a secret is not supported.\");\n}\n\n/**\n * @summary Serializes the create secret's poll operation\n */\nfunction toString(this: RecoverDeletedSecretPollOperation): string {\n  return JSON.stringify({\n    state: this.state\n  });\n}\n\n/**\n * @summary Builds a create secret's poll operation\n * @param [state] A poll operation's state, in case the new one is intended to follow up where the previous one was left.\n */\nexport function makeRecoverDeletedSecretPollOperation(\n  state: RecoverDeletedSecretPollOperationState\n): RecoverDeletedSecretPollOperation {\n  return {\n    state: {\n      ...state\n    },\n    update,\n    cancel,\n    toString\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { delay, RequestOptionsBase } from \"@azure/core-http\";\nimport { Poller } from \"@azure/core-lro\";\nimport {\n  RecoverDeletedSecretPollOperationState,\n  makeRecoverDeletedSecretPollOperation\n} from \"./operation\";\nimport { SecretProperties, SecretClientInterface } from \"../../secretsModels\";\n\nexport interface RecoverDeletedSecretPollerOptions {\n  client: SecretClientInterface;\n  name: string;\n  requestOptions?: RequestOptionsBase;\n  intervalInMs?: number;\n  resumeFrom?: string;\n}\n\n/**\n * Class that deletes a poller that waits until a secret finishes being deleted\n */\nexport class RecoverDeletedSecretPoller extends Poller<\n  RecoverDeletedSecretPollOperationState,\n  SecretProperties\n> {\n  /**\n   * Defines how much time the poller is going to wait before making a new request to the service.\n   * @memberof RecoverDeletedSecretPoller\n   */\n  public intervalInMs: number;\n\n  constructor(options: RecoverDeletedSecretPollerOptions) {\n    const { client, name, requestOptions, intervalInMs = 2000, resumeFrom } = options;\n\n    let state: RecoverDeletedSecretPollOperationState | undefined;\n\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n\n    const operation = makeRecoverDeletedSecretPollOperation({\n      ...state,\n      name,\n      requestOptions,\n      client\n    });\n\n    super(operation);\n\n    this.intervalInMs = intervalInMs;\n  }\n\n  /**\n   * The method used by the poller to wait before attempting to update its operation.\n   * @memberof RecoverDeletedSecretPoller\n   */\n  async delay(): Promise<void> {\n    return delay(this.intervalInMs);\n  }\n}\n","/*! https://mths.be/punycode v1.3.2 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * http://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.3.2',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n","'use strict';\n\nmodule.exports = {\n  isString: function(arg) {\n    return typeof(arg) === 'string';\n  },\n  isObject: function(arg) {\n    return typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function(arg) {\n    return arg == null;\n  }\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (Array.isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return Object.keys(obj).map(function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (Array.isArray(obj[k])) {\n        return obj[k].map(function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n","'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar punycode = require('punycode');\nvar util = require('./util');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n","import { ParsedKeyVaultEntityIdentifier } from \"./keyVaultBase\";\nimport * as url from \"url\";\n\nexport function parseKeyvaultIdentifier(\n  collection: string,\n  identifier: string | undefined\n): ParsedKeyVaultEntityIdentifier {\n  if (typeof collection != \"string\" || !(collection = collection.trim())) {\n    throw new Error(\"Invalid collection argument\");\n  }\n\n  if (typeof identifier != \"string\" || !(identifier = identifier.trim())) {\n    throw new Error(\"Invalid identifier argument\");\n  }\n\n  var baseUri;\n  try {\n    baseUri = url.parse(identifier, true, true);\n  } catch (e) {\n    throw new Error(`Invalid ${collection} identifier: ${identifier}. Not a valid URI`);\n  }\n\n  // Path is of the form '/collection/name[/version]'\n  var segments = (baseUri.pathname || \"\").split(\"/\");\n  if (segments.length !== 3 && segments.length !== 4) {\n    throw new Error(\n      `Invalid ${collection} identifier: ${identifier}. Bad number of segments: ${segments.length}`\n    );\n  }\n\n  if (collection !== segments[1]) {\n    throw new Error(\n      `Invalid ${collection} identifier: ${identifier}. segment [1] should be \"${collection}\", found \"${segments[1]}\"`\n    );\n  }\n\n  var vaultUrl = `${baseUri.protocol}//${baseUri.host}`;\n  var name = segments[2];\n  var version = segments.length === 4 ? segments[3] : undefined;\n  return {\n    vaultUrl,\n    name,\n    version\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/* eslint @typescript-eslint/member-ordering: 0 */\n\nimport {\n  TokenCredential,\n  isTokenCredential,\n  signingPolicy,\n  RequestOptionsBase,\n  operationOptionsToRequestOptionsBase,\n  PipelineOptions,\n  createPipelineFromOptions\n} from \"@azure/core-http\";\n\nimport { getTracer } from \"@azure/core-tracing\";\nimport { Span } from \"@opentelemetry/types\";\nimport { logger } from \"./log\";\n\nimport \"@azure/core-paging\";\nimport { PageSettings, PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { PollerLike, PollOperationState } from \"@azure/core-lro\";\nimport {\n  SecretBundle,\n  DeletedSecretBundle,\n  DeletionRecoveryLevel,\n  KeyVaultClientGetSecretsOptionalParams,\n  SetSecretResponse,\n  DeleteSecretResponse,\n  UpdateSecretResponse,\n  GetSecretResponse,\n  GetDeletedSecretResponse,\n  BackupSecretResponse,\n  RestoreSecretResponse\n} from \"./core/models\";\nimport { KeyVaultClient } from \"./core/keyVaultClient\";\nimport { SDK_VERSION } from \"./core/utils/constants\";\nimport { challengeBasedAuthenticationPolicy } from \"./core/challengeBasedAuthenticationPolicy\";\n\nimport { DeleteSecretPoller } from \"./lro/delete/poller\";\nimport { RecoverDeletedSecretPoller } from \"./lro/recover/poller\";\n\nimport {\n  KeyVaultSecret,\n  DeletedSecret,\n  DeleteSecretOptions,\n  SecretClientInterface,\n  SecretPollerOptions,\n  BeginDeleteSecretOptions,\n  BeginRecoverDeletedSecretOptions,\n  SetSecretOptions,\n  UpdateSecretPropertiesOptions,\n  GetSecretOptions,\n  GetDeletedSecretOptions,\n  PurgeDeletedSecretOptions,\n  BackupSecretOptions,\n  RestoreSecretBackupOptions,\n  RecoverDeletedSecretOptions,\n  ListPropertiesOfSecretVersionsOptions,\n  ListPropertiesOfSecretsOptions,\n  ListDeletedSecretsOptions,\n  SecretProperties\n} from \"./secretsModels\";\nimport { parseKeyvaultIdentifier as parseKeyvaultEntityIdentifier } from \"./core/utils\";\n\nexport {\n  DeletedSecret,\n  DeletionRecoveryLevel,\n  GetSecretOptions,\n  PipelineOptions,\n  GetDeletedSecretOptions,\n  PurgeDeletedSecretOptions,\n  BackupSecretOptions,\n  RestoreSecretBackupOptions,\n  ListPropertiesOfSecretVersionsOptions,\n  ListPropertiesOfSecretsOptions,\n  ListDeletedSecretsOptions,\n  PagedAsyncIterableIterator,\n  PageSettings,\n  PollerLike,\n  PollOperationState,\n  KeyVaultSecret,\n  SecretProperties,\n  SecretPollerOptions,\n  BeginDeleteSecretOptions,\n  BeginRecoverDeletedSecretOptions,\n  SetSecretOptions,\n  UpdateSecretPropertiesOptions,\n  logger\n};\n\n// This is part of constructing the autogenerated client. In the future, it should not\n// be required. See also: https://github.com/Azure/azure-sdk-for-js/issues/5508\nconst SERVICE_API_VERSION = \"7.0\";\n\n/**\n * The SecretClient provides methods to manage {@link KeyVaultSecret} in\n * the Azure Key Vault. The client supports creating, retrieving, updating,\n * deleting, purging, backing up, restoring and listing KeyVaultSecrets. The\n * client also supports listing {@link DeletedSecret} for a soft-delete enabled Azure\n * Key Vault.\n */\nexport class SecretClient {\n  /**\n   * The base URL to the vault\n   */\n  public readonly vaultUrl: string;\n\n  /**\n   * @internal\n   * @ignore\n   * A reference to the auto-generated KeyVault HTTP client.\n   */\n  private readonly client: KeyVaultClient;\n\n  /**\n   * @internal\n   * @ignore\n   * A self reference that bypasses private methods, for the pollers.\n   */\n  private readonly pollerClient: SecretClientInterface = {\n    recoverDeletedSecret: this.recoverDeletedSecret.bind(this),\n    getSecret: this.getSecret.bind(this),\n    deleteSecret: this.deleteSecret.bind(this),\n    getDeletedSecret: this.getDeletedSecret.bind(this)\n  };\n\n  /**\n   * Creates an instance of SecretClient.\n   *\n   * Example usage:\n   * ```ts\n   * import { SecretClient } from \"@azure/keyvault-secrets\";\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   *\n   * let vaultUrl = `https://<MY KEYVAULT HERE>.vault.azure.net`;\n   * let credentials = new DefaultAzureCredential();\n   *\n   * let client = new SecretClient(vaultUrl, credentials);\n   * ```\n   * @param {string} vaultUrl the base URL to the vault.\n   * @param {TokenCredential} credential An object that implements the `TokenCredential` interface used to authenticate requests to the service. Use the @azure/identity package to create a credential that suits your needs.\n   * @param {PipelineOptions} [pipelineOptions] Optional. Pipeline options used to configure Key Vault API requests.\n   *                                                         Omit this parameter to use the default pipeline configuration.\n   * @memberof SecretClient\n   */\n  constructor(\n    vaultUrl: string,\n    credential: TokenCredential,\n    pipelineOptions: PipelineOptions = {}\n  ) {\n    this.vaultUrl = vaultUrl;\n\n    const libInfo = `azsdk-js-keyvault-secrets/${SDK_VERSION}`;\n    if (pipelineOptions.userAgentOptions) {\n      pipelineOptions.userAgentOptions.userAgentPrefix !== undefined\n        ? `${pipelineOptions.userAgentOptions.userAgentPrefix} ${libInfo}`\n        : libInfo;\n    } else {\n      pipelineOptions.userAgentOptions = {\n        userAgentPrefix: libInfo\n      };\n    }\n\n    const authPolicy = isTokenCredential(credential)\n      ? challengeBasedAuthenticationPolicy(credential)\n      : signingPolicy(credential);\n\n    const internalPipelineOptions = {\n      ...pipelineOptions,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n          logPolicyOptions: {\n            allowedHeaderNames: [\n              \"x-ms-keyvault-region\",\n              \"x-ms-keyvault-network-info\",\n              \"x-ms-keyvault-service-version\"\n            ]\n          }\n        }\n      }\n    };\n\n    const pipeline = createPipelineFromOptions(internalPipelineOptions, authPolicy);\n    this.client = new KeyVaultClient(credential, SERVICE_API_VERSION, pipeline);\n  }\n\n  /**\n   * The setSecret method adds a secret or secret version to the Azure Key Vault. If the named secret\n   * already exists, Azure Key Vault creates a new version of that secret.\n   * This operation requires the secrets/set permission.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new SecretClient(url, credentials);\n   * await client.setSecret(\"MySecretName\", \"ABC123\");\n   * ```\n   * @summary Adds a secret in a specified key vault.\n   * @param {string} secretName The name of the secret.\n   * @param {string} value The value of the secret.\n   * @param {SetSecretOptions} [options] The optional parameters.\n   */\n  public async setSecret(\n    secretName: string,\n    value: string,\n    options: SetSecretOptions = {}\n  ): Promise<KeyVaultSecret> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n\n    if (requestOptions) {\n      const { enabled, notBefore, expiresOn: expires, ...remainingOptions } = requestOptions;\n      const unflattenedOptions = {\n        ...remainingOptions,\n        secretAttributes: {\n          enabled,\n          notBefore,\n          expires\n        }\n      };\n\n      const span = this.createSpan(\"setSecret\", unflattenedOptions);\n\n      let response: SetSecretResponse;\n      try {\n        response = await this.client.setSecret(\n          this.vaultUrl,\n          secretName,\n          value,\n          this.setParentSpan(span, unflattenedOptions)\n        );\n      } finally {\n        span.end();\n      }\n\n      return this.getSecretFromSecretBundle(response);\n    } else {\n      const response = await this.client.setSecret(\n        this.vaultUrl,\n        secretName,\n        value,\n        requestOptions\n      );\n      return this.getSecretFromSecretBundle(response);\n    }\n  }\n\n  /**\n   * Deletes a secret stored in Azure Key Vault.\n   * This function returns a Long Running Operation poller that allows you to wait indefinitely until the secret is deleted.\n   *\n   * This operation requires the secrets/delete permission.\n   *\n   * Example usage:\n   * ```ts\n   * const client = new SecretClient(url, credentials);\n   * await client.setSecret(\"MySecretName\", \"ABC123\");\n   *\n   * const deletePoller = await client.beginDeleteSecret(\"MySecretName\");\n   *\n   * // Serializing the poller\n   * const serialized = deletePoller.toString();\n   *\n   * // A new poller can be created with:\n   * // const newPoller = await client.beginDeleteSecret(\"MySecretName\", { resumeFrom: serialized });\n   *\n   * // Waiting until it's done\n   * const deletedSecret = await deletePoller.pollUntilDone();\n   * console.log(deletedSecret);\n   * ```\n   * @summary Deletes a secret from a specified key vault.\n   * @param {string} secretName The name of the secret.\n   * @param {BeginDeleteSecretOptions} [options] The optional parameters.\n   */\n  public async beginDeleteSecret(\n    name: string,\n    options: BeginDeleteSecretOptions = {}\n  ): Promise<PollerLike<PollOperationState<DeletedSecret>, DeletedSecret>> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const poller = new DeleteSecretPoller({\n      name,\n      client: this.pollerClient,\n      ...options,\n      requestOptions\n    });\n    // This will initialize the poller's operation (the deletion of the secret).\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * The updateSecret method changes specified attributes of an existing stored secret. Properties that\n   * are not specified in the request are left unchanged. The value of a secret itself cannot be\n   * changed. This operation requires the secrets/set permission.\n   *\n   * Example usage:\n   * ```ts\n   * let secretName = \"MySecretName\";\n   * let client = new SecretClient(url, credentials);\n   * let secret = await client.getSecret(secretName);\n   * await client.updateSecret(secretName, secret.version, { enabled: false });\n   * ```\n   * @summary Updates the attributes associated with a specified secret in a given key vault.\n   * @param {string} secretName The name of the secret.\n   * @param {string} secretVersion The version of the secret.\n   * @param {UpdateSecretPropertiesOptions} [options] The optional parameters.\n   */\n  public async updateSecretProperties(\n    secretName: string,\n    secretVersion: string,\n    options: UpdateSecretPropertiesOptions = {}\n  ): Promise<SecretProperties> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n\n    if (requestOptions) {\n      const { enabled, notBefore, expiresOn: expires, ...remainingOptions } = requestOptions;\n      const unflattenedOptions = {\n        ...remainingOptions,\n        secretAttributes: {\n          enabled,\n          notBefore,\n          expires\n        }\n      };\n\n      const span = this.createSpan(\"updateSecretProperties\", unflattenedOptions);\n\n      let response: UpdateSecretResponse;\n\n      try {\n        response = await this.client.updateSecret(\n          this.vaultUrl,\n          secretName,\n          secretVersion,\n          this.setParentSpan(span, unflattenedOptions)\n        );\n      } finally {\n        span.end();\n      }\n\n      return this.getSecretFromSecretBundle(response).properties;\n    } else {\n      const response = await this.client.updateSecret(\n        this.vaultUrl,\n        secretName,\n        secretVersion,\n        requestOptions\n      );\n      return this.getSecretFromSecretBundle(response).properties;\n    }\n  }\n\n  /**\n   * The getSecret method is applicable to any secret stored in Azure Key Vault. This operation requires\n   * the secrets/get permission.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new SecretClient(url, credentials);\n   * let secret = await client.getSecret(\"MySecretName\");\n   * ```\n   * @summary Get a specified secret from a given key vault.\n   * @param {string} secretName The name of the secret.\n   * @param {GetSecretOptions} [options] The optional parameters.\n   */\n  public async getSecret(\n    secretName: string,\n    options: GetSecretOptions = {}\n  ): Promise<KeyVaultSecret> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"getSecret\", requestOptions);\n\n    let response: GetSecretResponse;\n    try {\n      response = await this.client.getSecret(\n        this.vaultUrl,\n        secretName,\n        options && options.version ? options.version : \"\",\n        this.setParentSpan(span, requestOptions)\n      );\n    } finally {\n      span.end();\n    }\n\n    return this.getSecretFromSecretBundle(response);\n  }\n\n  /**\n   * The getDeletedSecret method returns the specified deleted secret along with its attributes.\n   * This operation requires the secrets/get permission.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new SecretClient(url, credentials);\n   * await client.getDeletedSecret(\"MyDeletedSecret\");\n   * ```\n   * @summary Gets the specified deleted secret.\n   * @param {string} secretName The name of the secret.\n   * @param {GetDeletedSecretOptions} [options] The optional parameters.\n   */\n  public async getDeletedSecret(\n    secretName: string,\n    options: GetDeletedSecretOptions = {}\n  ): Promise<DeletedSecret> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"getDeletedSecret\", requestOptions);\n\n    let response: GetDeletedSecretResponse;\n\n    try {\n      response = await this.client.getDeletedSecret(\n        this.vaultUrl,\n        secretName,\n        this.setParentSpan(span, requestOptions)\n      );\n    } finally {\n      span.end();\n    }\n\n    return this.getSecretFromSecretBundle(response);\n  }\n\n  /**\n   * The purge deleted secret operation removes the secret permanently, without the possibility of\n   * recovery. This operation can only be enabled on a soft-delete enabled vault. This operation\n   * requires the secrets/purge permission.\n   *\n   * Example usage:\n   * ```ts\n   * const client = new SecretClient(url, credentials);\n   * const deletePoller = await client.beginDeleteSecret(\"MySecretName\");\n   * await deletePoller.pollUntilDone();\n   * await client.purgeDeletedSecret(\"MySecretName\");\n   * ```\n   * @summary Permanently deletes the specified secret.\n   * @param {string} secretName The name of the secret.\n   * @param {PurgeDeletedSecretOptions} [options] The optional parameters.\n   */\n  public async purgeDeletedSecret(\n    secretName: string,\n    options: PurgeDeletedSecretOptions = {}\n  ): Promise<void> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"purgeDeletedSecret\", requestOptions);\n\n    try {\n      await this.client.purgeDeletedSecret(\n        this.vaultUrl,\n        secretName,\n        this.setParentSpan(span, requestOptions)\n      );\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Recovers the deleted secret in the specified vault.\n   * This function returns a Long Running Operation poller that allows you to wait indefinitely until the secret is recovered.\n   *\n   * This operation requires the secrets/recover permission.\n   *\n   * Example usage:\n   * ```ts\n   * const client = new SecretClient(url, credentials);\n   * await client.setSecret(\"MySecretName\", \"ABC123\");\n   *\n   * const deletePoller = await client.beginDeleteSecret(\"MySecretName\");\n   * await deletePoller.pollUntilDone();\n   *\n   * const recoverPoller = await client.recoverDeletedSecret(\"MySecretName\");\n   *\n   * // Serializing the poller\n   * const serialized = recoverPoller.toString();\n   *\n   * // A new poller can be created with:\n   * // const newPoller = await client.beginRecoverDeletedSecret(\"MySecretName\", { resumeFrom: serialized });\n   *\n   * // Waiting until it's done\n   * const deletedSecret = await recoverPoller.pollUntilDone();\n   * console.log(deletedSecret);\n   * ```\n   * @summary Recovers the deleted secret to the latest version.\n   * @param {string} secretName The name of the deleted secret.\n   * @param {BeginRecoverDeletedSecretOptions} [options] The optional parameters.\n   */\n  public async beginRecoverDeletedSecret(\n    name: string,\n    options: BeginRecoverDeletedSecretOptions = {}\n  ): Promise<PollerLike<PollOperationState<SecretProperties>, SecretProperties>> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n\n    const poller = new RecoverDeletedSecretPoller({\n      name,\n      client: this.pollerClient,\n      ...options,\n      requestOptions\n    });\n\n    // This will initialize the poller's operation (the recovery of the deleted secret).\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Requests that a backup of the specified secret be downloaded to the client. All versions of the\n   * secret will be downloaded. This operation requires the secrets/backup permission.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new SecretClient(url, credentials);\n   * let backupResult = await client.backupSecret(\"MySecretName\");\n   * ```\n   * @summary Backs up the specified secret.\n   * @param {string} secretName The name of the secret.\n   * @param {BackupSecretOptions} [options] The optional parameters.\n   */\n  public async backupSecret(\n    secretName: string,\n    options: BackupSecretOptions = {}\n  ): Promise<Uint8Array | undefined> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"backupSecret\", requestOptions);\n\n    let response: BackupSecretResponse;\n\n    try {\n      response = await this.client.backupSecret(\n        this.vaultUrl,\n        secretName,\n        this.setParentSpan(span, requestOptions)\n      );\n    } finally {\n      span.end();\n    }\n    return response.value;\n  }\n\n  /**\n   * Restores a backed up secret, and all its versions, to a vault. This operation requires the\n   * secrets/restore permission.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new SecretClient(url, credentials);\n   * let mySecretBundle = await client.backupSecret(\"MySecretName\");\n   * // ...\n   * await client.restoreSecretBackup(mySecretBundle);\n   * ```\n   * @summary Restores a backed up secret to a vault.\n   * @param {Uint8Array} secretBundleBackup The backup blob associated with a secret bundle.\n   * @param {RestoreSecretResponse} [options] The optional parameters.\n   */\n  public async restoreSecretBackup(\n    secretBundleBackup: Uint8Array,\n    options: RestoreSecretBackupOptions = {}\n  ): Promise<SecretProperties> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"restoreSecretBackup\", requestOptions);\n\n    let response: RestoreSecretResponse;\n\n    try {\n      response = await this.client.restoreSecret(\n        this.vaultUrl,\n        secretBundleBackup,\n        this.setParentSpan(span, requestOptions)\n      );\n    } finally {\n      span.end();\n    }\n\n    return this.getSecretFromSecretBundle(response).properties;\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Sends a delete request for the given KeyVault Secret's name to the KeyVault service.\n   * Since the KeyVault Secret won't be immediately deleted, we have {@link beginDeleteSecret}.\n   * @param {string} name The name of the KeyVault Secret.\n   * @param {RequestOptionsBase} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async deleteSecret(\n    secretName: string,\n    options: DeleteSecretOptions = {}\n  ): Promise<DeletedSecret> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"deleteSecret\", requestOptions);\n\n    let response: DeleteSecretResponse;\n    try {\n      response = await this.client.deleteSecret(\n        this.vaultUrl,\n        secretName,\n        this.setParentSpan(span, requestOptions)\n      );\n    } finally {\n      span.end();\n    }\n\n    return this.getSecretFromSecretBundle(response);\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Sends a request to recover a deleted KeyVault Secret based on the given name.\n   * Since the KeyVault Secret won't be immediately recover the deleted secret, we have {@link beginRecoverDeletedSecret}.\n   * @param {string} name The name of the KeyVault Secret.\n   * @param {RecoverDeletedKeyOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async recoverDeletedSecret(\n    secretName: string,\n    options: RecoverDeletedSecretOptions = {}\n  ): Promise<SecretProperties> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"recoverDeletedSecret\", requestOptions);\n\n    let properties: SecretProperties;\n\n    try {\n      const response = await this.client.recoverDeletedSecret(\n        this.vaultUrl,\n        secretName,\n        this.setParentSpan(span, requestOptions)\n      );\n      properties = this.getSecretFromSecretBundle(response).properties;\n    } finally {\n      span.end();\n    }\n\n    return properties;\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the pagination of {@link listPropertiesOfSecretVersions}.\n   * @param {string} name The name of the KeyVault Secret.\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {ListPropertiesOfSecretVersionsOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async *listPropertiesOfSecretVersionsPage(\n    secretName: string,\n    continuationState: PageSettings,\n    options: ListPropertiesOfSecretVersionsOptions = {}\n  ): AsyncIterableIterator<SecretProperties[]> {\n    if (continuationState.continuationToken == null) {\n      const optionsComplete: KeyVaultClientGetSecretsOptionalParams = {\n        maxresults: continuationState.maxPageSize,\n        ...options\n      };\n      const currentSetResponse = await this.client.getSecretVersions(\n        this.vaultUrl,\n        secretName,\n        optionsComplete\n      );\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(\n          (bundle) => this.getSecretFromSecretBundle(bundle).properties\n        );\n      }\n    }\n    while (continuationState.continuationToken) {\n      const currentSetResponse = await this.client.getSecretVersions(\n        continuationState.continuationToken,\n        secretName,\n        options\n      );\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(\n          (bundle) => this.getSecretFromSecretBundle(bundle).properties\n        );\n      } else {\n        break;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the iteration of all the available results of {@link listPropertiesOfSecretVersions}.\n   * @param {string} name The name of the KeyVault Secret.\n   * @param {ListPropertiesOfSecretVersionsOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async *listPropertiesOfSecretVersionsAll(\n    secretName: string,\n    options: ListPropertiesOfSecretVersionsOptions = {}\n  ): AsyncIterableIterator<SecretProperties> {\n    const f = {};\n\n    for await (const page of this.listPropertiesOfSecretVersionsPage(secretName, f, options)) {\n      for (const item of page) {\n        yield item;\n      }\n    }\n  }\n\n  /**\n   * Iterates all versions of the given secret in the vault. The full secret identifier and attributes are provided\n   * in the response. No values are returned for the secrets. This operations requires the secrets/list permission.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new SecretClient(url, credentials);\n   * for await (const secretProperties of client.listPropertiesOfSecretVersions(\"MySecretName\")) {\n   *   const secret = await client.getSecret(secretProperties.name);\n   *   console.log(\"secret version: \", secret);\n   * }\n   * ```\n   * @param {string} secretName Name of the secret to fetch versions for.\n   * @param {ListPropertiesOfSecretVersionsOptions} [options] The optional parameters.\n   */\n  public listPropertiesOfSecretVersions(\n    secretName: string,\n    options: ListPropertiesOfSecretVersionsOptions = {}\n  ): PagedAsyncIterableIterator<SecretProperties, SecretProperties[]> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"listPropertiesOfSecretVersions\", requestOptions);\n    const updatedOptions: ListPropertiesOfSecretVersionsOptions = {\n      ...requestOptions,\n      ...this.setParentSpan(span, requestOptions)\n    };\n\n    const iter = this.listPropertiesOfSecretVersionsAll(secretName, updatedOptions);\n\n    span.end();\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) =>\n        this.listPropertiesOfSecretVersionsPage(secretName, settings, updatedOptions)\n    };\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the pagination of {@link listPropertiesOfSecrets}.\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {ListPropertiesOfSecretsOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async *listPropertiesOfSecretsPage(\n    continuationState: PageSettings,\n    options: ListPropertiesOfSecretsOptions = {}\n  ): AsyncIterableIterator<SecretProperties[]> {\n    if (continuationState.continuationToken == null) {\n      const optionsComplete: KeyVaultClientGetSecretsOptionalParams = {\n        maxresults: continuationState.maxPageSize,\n        ...options\n      };\n      const currentSetResponse = await this.client.getSecrets(this.vaultUrl, optionsComplete);\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(\n          (bundle) => this.getSecretFromSecretBundle(bundle).properties\n        );\n      }\n    }\n    while (continuationState.continuationToken) {\n      const currentSetResponse = await this.client.getSecrets(\n        continuationState.continuationToken,\n        options\n      );\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map(\n          (bundle) => this.getSecretFromSecretBundle(bundle).properties\n        );\n      } else {\n        break;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the iteration of all the available results of {@link listPropertiesOfSecrets}.\n   * @param {ListPropertiesOfSecretsOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async *listPropertiesOfSecretsAll(\n    options: ListPropertiesOfSecretsOptions = {}\n  ): AsyncIterableIterator<SecretProperties> {\n    const f = {};\n\n    for await (const page of this.listPropertiesOfSecretsPage(f, options)) {\n      for (const item of page) {\n        yield item;\n      }\n    }\n  }\n\n  /**\n   * Iterates the latest version of all secrets in the vault.  The full secret identifier and attributes are provided\n   * in the response. No values are returned for the secrets. This operations requires the secrets/list permission.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new SecretClient(url, credentials);\n   * for await (const secretProperties of client.listPropertiesOfSecrets()) {\n   *   const secret = await client.getSecret(secretProperties.name);\n   *   console.log(\"secret: \", secret);\n   * }\n   * ```\n   * @summary List all secrets in the vault.\n   * @param {ListPropertiesOfSecretsOptions} [options] The optional parameters.\n   */\n  public listPropertiesOfSecrets(\n    options: ListPropertiesOfSecretsOptions = {}\n  ): PagedAsyncIterableIterator<SecretProperties, SecretProperties[]> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"listPropertiesOfSecrets\", requestOptions);\n    const updatedOptions: ListPropertiesOfSecretsOptions = {\n      ...requestOptions,\n      ...this.setParentSpan(span, requestOptions)\n    };\n\n    const iter = this.listPropertiesOfSecretsAll(updatedOptions);\n\n    span.end();\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) =>\n        this.listPropertiesOfSecretsPage(settings, updatedOptions)\n    };\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the pagination of {@link listDeletedSecrets}.\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {ListDeletedSecretsOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async *listDeletedSecretsPage(\n    continuationState: PageSettings,\n    options: ListDeletedSecretsOptions = {}\n  ): AsyncIterableIterator<DeletedSecret[]> {\n    if (continuationState.continuationToken == null) {\n      const optionsComplete: KeyVaultClientGetSecretsOptionalParams = {\n        maxresults: continuationState.maxPageSize,\n        ...options\n      };\n      const currentSetResponse = await this.client.getDeletedSecrets(\n        this.vaultUrl,\n        optionsComplete\n      );\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map((bundle) => this.getSecretFromSecretBundle(bundle));\n      }\n    }\n    while (continuationState.continuationToken) {\n      const currentSetResponse = await this.client.getDeletedSecrets(\n        continuationState.continuationToken,\n        options\n      );\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value.map((bundle) => this.getSecretFromSecretBundle(bundle));\n      } else {\n        break;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the iteration of all the available results of {@link listDeletedSecrets}.\n   * @param {ListDeletedSecretsOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async *listDeletedSecretsAll(\n    options: ListDeletedSecretsOptions = {}\n  ): AsyncIterableIterator<DeletedSecret> {\n    const f = {};\n\n    for await (const page of this.listDeletedSecretsPage(f, options)) {\n      for (const item of page) {\n        yield item;\n      }\n    }\n  }\n\n  /**\n   * Iterates the deleted secrets in the vault.  The full secret identifier and attributes are provided\n   * in the response. No values are returned for the secrets. This operations requires the secrets/list permission.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new SecretClient(url, credentials);\n   * for await (const deletedSecret of client.listDeletedSecrets()) {\n   *   const deletedSecret = await client.getSecret(deletedSecret.name);\n   *   console.log(\"deleted secret: \", deletedSecret);\n   * }\n   * ```\n   * @summary List all secrets in the vault.\n   * @param {ListDeletedSecretsOptions} [options] The optional parameters.\n   */\n  public listDeletedSecrets(\n    options: ListDeletedSecretsOptions = {}\n  ): PagedAsyncIterableIterator<DeletedSecret, DeletedSecret[]> {\n    const requestOptions = operationOptionsToRequestOptionsBase(options);\n    const span = this.createSpan(\"listDeletedSecrets\", requestOptions);\n    const updatedOptions: ListDeletedSecretsOptions = {\n      ...requestOptions,\n      ...this.setParentSpan(span, requestOptions)\n    };\n\n    const iter = this.listDeletedSecretsAll(updatedOptions);\n\n    span.end();\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) => this.listDeletedSecretsPage(settings, updatedOptions)\n    };\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Shapes the exposed {@link KeyVaultSecret} based on either a received secret bundle or deleted secret bundle.\n   */\n  private getSecretFromSecretBundle(bundle: SecretBundle | DeletedSecretBundle): KeyVaultSecret {\n    const secretBundle = bundle as SecretBundle;\n    const deletedSecretBundle = bundle as DeletedSecretBundle;\n    const parsedId = parseKeyvaultEntityIdentifier(\"secrets\", secretBundle.id);\n\n    const attributes = secretBundle.attributes;\n    delete secretBundle.attributes;\n\n    let resultObject: KeyVaultSecret & DeletedSecret = {\n      value: secretBundle.value,\n      name: parsedId.name,\n      properties: {\n        vaultUrl: parsedId.vaultUrl,\n        expiresOn: (attributes as any).expires,\n        createdOn: (attributes as any).created,\n        updatedOn: (attributes as any).updated,\n        ...secretBundle,\n        ...parsedId,\n        ...attributes\n      }\n    };\n\n    if (deletedSecretBundle.deletedDate) {\n      resultObject.properties.deletedOn = deletedSecretBundle.deletedDate;\n      delete (resultObject.properties as any).deletedDate;\n    }\n\n    if (attributes) {\n      if ((attributes as any).vaultUrl) {\n        delete (resultObject.properties as any).vaultUrl;\n      }\n\n      if (attributes.expires) {\n        delete (resultObject.properties as any).expires;\n      }\n\n      if (attributes.created) {\n        delete (resultObject.properties as any).created;\n      }\n\n      if (attributes.updated) {\n        delete (resultObject.properties as any).updated;\n      }\n    }\n\n    return resultObject;\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Creates a span using the tracer that was set by the user\n   * @param {string} methodName The name of the method creating the span.\n   * @param {RequestOptionsBase} [options] The options for the underlying HTTP request.\n   */\n  private createSpan(methodName: string, requestOptions: RequestOptionsBase = {}): Span {\n    const tracer = getTracer();\n    const span = tracer.startSpan(methodName, requestOptions && requestOptions.spanOptions);\n    span.setAttribute(\"az.namespace\", \"Microsoft.KeyVault\");\n    return span;\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Returns updated HTTP options with the given span as the parent of future spans,\n   * if applicable.\n   * @param {Span} span The span for the current operation.\n   * @param {RequestOptionsBase} [options] The options for the underlying HTTP request.\n   */\n  private setParentSpan(span: Span, options: RequestOptionsBase = {}): RequestOptionsBase {\n    if (span.isRecording()) {\n      const spanOptions = options.spanOptions || {};\n      return {\n        ...options,\n        spanOptions: {\n          ...spanOptions,\n          parent: span,\n          attributes: {\n            ...spanOptions.attributes,\n            \"az.namespace\": \"Microsoft.KeyVault\"\n          }\n        }\n      };\n    } else {\n      return options;\n    }\n  }\n}\n"],"names":["rng","bytesToUuid","uuidv4","base64.decodeString","base64.encodeByteArray","utils.isValidUuid","utils.isDuration","debug","logger","utils\n            .delay","utils.generateUuid","utils\n                .delay","retry","shouldRetry","updateRetryData","require$$0","require$$1","require$$2","require$$3","require$$4","TraceFlags","SpanKind","DefaultHttpClient","utils.prepareXMLRootList","utils.isPrimitiveType","coreHttp.getDefaultUserAgentValue","coreHttp.ServiceClient","serializer","coreHttp.Serializer","Parameters.vaultBaseUrl","Parameters.keyName0","Parameters.apiVersion","Mappers.KeyCreateParameters","Mappers.KeyBundle","Mappers.KeyVaultError","Mappers.KeyImportParameters","Parameters.keyName1","Mappers.DeletedKeyBundle","Parameters.keyVersion","Mappers.KeyUpdateParameters","Parameters.maxresults","Mappers.KeyListResult","Mappers.BackupKeyResult","Mappers.KeyRestoreParameters","Mappers.KeyOperationsParameters","Mappers.KeyOperationResult","Mappers.KeySignParameters","Mappers.KeyVerifyParameters","Mappers.KeyVerifyResult","Mappers.DeletedKeyListResult","Parameters.secretName0","Mappers.SecretSetParameters","Mappers.SecretBundle","Parameters.secretName1","Mappers.DeletedSecretBundle","Parameters.secretVersion","Mappers.SecretUpdateParameters","Mappers.SecretListResult","Mappers.DeletedSecretListResult","Mappers.BackupSecretResult","Mappers.SecretRestoreParameters","Parameters.includePending","Mappers.CertificateListResult","Parameters.certificateName0","Mappers.DeletedCertificateBundle","Mappers.Contacts","Mappers.CertificateIssuerListResult","Parameters.issuerName","Mappers.CertificateIssuerSetParameters","Mappers.IssuerBundle","Mappers.CertificateIssuerUpdateParameters","Parameters.certificateName1","Mappers.CertificateCreateParameters","Mappers.CertificateOperation","Mappers.CertificateImportParameters","Mappers.CertificateBundle","Mappers.CertificatePolicy","Parameters.certificateVersion","Mappers.CertificateUpdateParameters","Mappers.CertificateOperationUpdateParameter","Mappers.CertificateMergeParameters","Mappers.BackupCertificateResult","Mappers.CertificateRestoreParameters","Mappers.DeletedCertificateListResult","Mappers.StorageListResult","Mappers.DeletedStorageListResult","Parameters.storageAccountName0","Mappers.DeletedStorageBundle","Mappers.StorageBundle","Parameters.storageAccountName1","Mappers.BackupStorageResult","Mappers.StorageRestoreParameters","Mappers.StorageAccountCreateParameters","Mappers.StorageAccountUpdateParameters","Mappers.StorageAccountRegenerteKeyParameters","Mappers.SasDefinitionListResult","Mappers.DeletedSasDefinitionListResult","Parameters.sasDefinitionName","Mappers.DeletedSasDefinitionBundle","Mappers.SasDefinitionBundle","Mappers.SasDefinitionCreateParameters","Mappers.SasDefinitionUpdateParameters","update","cancel","toString","global","this","url.parse","parseKeyvaultEntityIdentifier"],"mappings":"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"}