/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */


import * as coreHttp from "@azure/core-http";

/**
 * The object attributes managed by the KeyVault service.
 */
export interface Attributes {
  /**
   * Determines whether the object is enabled.
   */
  enabled?: boolean;
  /**
   * Not before date in UTC.
   */
  notBefore?: Date;
  /**
   * Expiry date in UTC.
   */
  expires?: Date;
  /**
   * Creation time in UTC.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly created?: Date;
  /**
   * Last updated time in UTC.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly updated?: Date;
}

/**
 * The secret management attributes.
 */
export interface SecretAttributes extends Attributes {
  /**
   * softDelete data retention days. Value should be >=7 and <=90 when softDelete enabled,
   * otherwise 0.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly recoverableDays?: number;
  /**
   * Reflects the deletion recovery level currently in effect for secrets in the current vault. If
   * it contains 'Purgeable', the secret can be permanently deleted by a privileged user;
   * otherwise, only the system can purge the secret, at the end of the retention interval.
   * Possible values include: 'Purgeable', 'Recoverable+Purgeable', 'Recoverable',
   * 'Recoverable+ProtectedSubscription', 'CustomizedRecoverable+Purgeable',
   * 'CustomizedRecoverable', 'CustomizedRecoverable+ProtectedSubscription'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly recoveryLevel?: DeletionRecoveryLevel;
}

/**
 * A secret consisting of a value, id and its attributes.
 */
export interface SecretBundle {
  /**
   * The secret value.
   */
  value?: string;
  /**
   * The secret id.
   */
  id?: string;
  /**
   * The content type of the secret.
   */
  contentType?: string;
  /**
   * The secret management attributes.
   */
  attributes?: SecretAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
  /**
   * If this is a secret backing a KV certificate, then this field specifies the corresponding key
   * backing the KV certificate.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly kid?: string;
  /**
   * True if the secret's lifetime is managed by key vault. If this is a secret backing a
   * certificate, then managed will be true.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly managed?: boolean;
}

/**
 * The secret item containing secret metadata.
 */
export interface SecretItem {
  /**
   * Secret identifier.
   */
  id?: string;
  /**
   * The secret management attributes.
   */
  attributes?: SecretAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Type of the secret value such as a password.
   */
  contentType?: string;
  /**
   * True if the secret's lifetime is managed by key vault. If this is a key backing a certificate,
   * then managed will be true.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly managed?: boolean;
}

/**
 * A Deleted Secret consisting of its previous id, attributes and its tags, as well as information
 * on when it will be purged.
 */
export interface DeletedSecretBundle extends SecretBundle {
  /**
   * The url of the recovery object, used to identify and recover the deleted secret.
   */
  recoveryId?: string;
  /**
   * The time when the secret is scheduled to be purged, in UTC
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the secret was deleted, in UTC
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly deletedDate?: Date;
}

/**
 * The deleted secret item containing metadata about the deleted secret.
 */
export interface DeletedSecretItem extends SecretItem {
  /**
   * The url of the recovery object, used to identify and recover the deleted secret.
   */
  recoveryId?: string;
  /**
   * The time when the secret is scheduled to be purged, in UTC
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the secret was deleted, in UTC
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly deletedDate?: Date;
}

/**
 * The secret restore parameters.
 */
export interface SecretRestoreParameters {
  /**
   * The backup blob associated with a secret bundle.
   */
  secretBundleBackup: Uint8Array;
}

/**
 * Properties of the key backing a certificate.
 */
export interface SecretProperties {
  /**
   * The media type (MIME type).
   */
  contentType?: string;
}

/**
 * The secret set parameters.
 */
export interface SecretSetParameters {
  /**
   * The value of the secret.
   */
  value: string;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Type of the secret value such as a password.
   */
  contentType?: string;
  /**
   * The secret management attributes.
   */
  secretAttributes?: SecretAttributes;
}

/**
 * The secret update parameters.
 */
export interface SecretUpdateParameters {
  /**
   * Type of the secret value such as a password.
   */
  contentType?: string;
  /**
   * The secret management attributes.
   */
  secretAttributes?: SecretAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The secret list result.
 */
export interface SecretListResult {
  /**
   * A response message containing a list of secrets in the key vault along with a link to the next
   * page of secrets.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: SecretItem[];
  /**
   * The URL to get the next set of secrets.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * The deleted secret list result
 */
export interface DeletedSecretListResult {
  /**
   * A response message containing a list of the deleted secrets in the vault along with a link to
   * the next page of deleted secrets
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: DeletedSecretItem[];
  /**
   * The URL to get the next set of deleted secrets.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * The backup secret result, containing the backup blob.
 */
export interface BackupSecretResult {
  /**
   * The backup blob containing the backed up secret.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: Uint8Array;
}

/**
 * The key vault server error.
 */
export interface ErrorModel {
  /**
   * The error code.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly code?: string;
  /**
   * The error message.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly innerError?: ErrorModel;
}

/**
 * The key vault error exception.
 */
export interface KeyVaultError {
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly error?: ErrorModel;
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientSetSecretOptionalParams extends coreHttp.RequestOptionsBase {
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Type of the secret value such as a password.
   */
  contentType?: string;
  /**
   * The secret management attributes.
   */
  secretAttributes?: SecretAttributes;
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientUpdateSecretOptionalParams extends coreHttp.RequestOptionsBase {
  /**
   * Type of the secret value such as a password.
   */
  contentType?: string;
  /**
   * The secret management attributes.
   */
  secretAttributes?: SecretAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientGetSecretsOptionalParams extends coreHttp.RequestOptionsBase {
  /**
   * Maximum number of results to return in a page. If not specified, the service will return up to
   * 25 results.
   */
  maxresults?: number;
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientGetSecretVersionsOptionalParams extends coreHttp.RequestOptionsBase {
  /**
   * Maximum number of results to return in a page. If not specified, the service will return up to
   * 25 results.
   */
  maxresults?: number;
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientGetDeletedSecretsOptionalParams extends coreHttp.RequestOptionsBase {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to
   * 25 results.
   */
  maxresults?: number;
}

/**
 * Defines values for DeletionRecoveryLevel.
 * Possible values include: 'Purgeable', 'Recoverable+Purgeable', 'Recoverable',
 * 'Recoverable+ProtectedSubscription', 'CustomizedRecoverable+Purgeable', 'CustomizedRecoverable',
 * 'CustomizedRecoverable+ProtectedSubscription'
 * @readonly
 * @enum {string}
 */
export type DeletionRecoveryLevel = 'Purgeable' | 'Recoverable+Purgeable' | 'Recoverable' | 'Recoverable+ProtectedSubscription' | 'CustomizedRecoverable+Purgeable' | 'CustomizedRecoverable' | 'CustomizedRecoverable+ProtectedSubscription';

/**
 * Contains response data for the setSecret operation.
 */
export type SetSecretResponse = SecretBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecretBundle;
    };
};

/**
 * Contains response data for the deleteSecret operation.
 */
export type DeleteSecretResponse = DeletedSecretBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DeletedSecretBundle;
    };
};

/**
 * Contains response data for the updateSecret operation.
 */
export type UpdateSecretResponse = SecretBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecretBundle;
    };
};

/**
 * Contains response data for the getSecret operation.
 */
export type GetSecretResponse = SecretBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecretBundle;
    };
};

/**
 * Contains response data for the getSecrets operation.
 */
export type GetSecretsResponse = SecretListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecretListResult;
    };
};

/**
 * Contains response data for the getSecretVersions operation.
 */
export type GetSecretVersionsResponse = SecretListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecretListResult;
    };
};

/**
 * Contains response data for the getDeletedSecrets operation.
 */
export type GetDeletedSecretsResponse = DeletedSecretListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DeletedSecretListResult;
    };
};

/**
 * Contains response data for the getDeletedSecret operation.
 */
export type GetDeletedSecretResponse = DeletedSecretBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DeletedSecretBundle;
    };
};

/**
 * Contains response data for the recoverDeletedSecret operation.
 */
export type RecoverDeletedSecretResponse = SecretBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecretBundle;
    };
};

/**
 * Contains response data for the backupSecret operation.
 */
export type BackupSecretResponse = BackupSecretResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BackupSecretResult;
    };
};

/**
 * Contains response data for the restoreSecret operation.
 */
export type RestoreSecretResponse = SecretBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecretBundle;
    };
};
