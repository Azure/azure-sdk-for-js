{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/// <reference lib=\"esnext.asynciterable\" />\n\nimport type { TokenCredential } from \"@azure/core-auth\";\n\nimport { logger } from \"./log.js\";\n\nimport { PageSettings, PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport type { PollOperationState } from \"@azure/core-lro\";\nimport { PollerLike } from \"@azure/core-lro\";\nimport type { KeyVaultClientOptionalParams } from \"./generated/keyVaultClient.js\";\nimport { KeyVaultClient } from \"./generated/keyVaultClient.js\";\nimport { keyVaultAuthenticationPolicy } from \"@azure/keyvault-common\";\n\nimport {\n  BackupSecretOptions,\n  BeginDeleteSecretOptions,\n  BeginRecoverDeletedSecretOptions,\n  DeletedSecret,\n  GetDeletedSecretOptions,\n  GetSecretOptions,\n  KeyVaultSecret,\n  LATEST_API_VERSION,\n  ListDeletedSecretsOptions,\n  ListPropertiesOfSecretVersionsOptions,\n  ListPropertiesOfSecretsOptions,\n  PurgeDeletedSecretOptions,\n  RestoreSecretBackupOptions,\n  SecretClientOptions,\n  SecretPollerOptions,\n  SecretProperties,\n  SetSecretOptions,\n  UpdateSecretPropertiesOptions,\n} from \"./secretsModels.js\";\nimport { KnownDeletionRecoveryLevel, DeletionRecoveryLevel } from \"./generated/index.js\";\nimport { KeyVaultSecretIdentifier, parseKeyVaultSecretIdentifier } from \"./identifier.js\";\nimport { getSecretFromSecretBundle, mapPagedAsyncIterable } from \"./transformations.js\";\nimport { tracingClient } from \"./tracing.js\";\nimport { bearerTokenAuthenticationPolicyName } from \"@azure/core-rest-pipeline\";\nimport { SDK_VERSION } from \"./constants.js\";\nimport { DeleteSecretPoller } from \"./lro/delete/poller.js\";\nimport { RecoverDeletedSecretPoller } from \"./lro/recover/poller.js\";\n\nexport {\n  SecretClientOptions,\n  DeletedSecret,\n  DeletionRecoveryLevel,\n  KnownDeletionRecoveryLevel,\n  GetSecretOptions,\n  GetDeletedSecretOptions,\n  PurgeDeletedSecretOptions,\n  BackupSecretOptions,\n  RestoreSecretBackupOptions,\n  ListPropertiesOfSecretVersionsOptions,\n  ListPropertiesOfSecretsOptions,\n  ListDeletedSecretsOptions,\n  PagedAsyncIterableIterator,\n  PageSettings,\n  KeyVaultSecretIdentifier,\n  parseKeyVaultSecretIdentifier,\n  PollerLike,\n  PollOperationState,\n  KeyVaultSecret,\n  SecretProperties,\n  SecretPollerOptions,\n  BeginDeleteSecretOptions,\n  BeginRecoverDeletedSecretOptions,\n  SetSecretOptions,\n  UpdateSecretPropertiesOptions,\n  logger,\n};\n\n/**\n * The SecretClient provides methods to manage {@link KeyVaultSecret} in\n * the Azure Key Vault. The client supports creating, retrieving, updating,\n * deleting, purging, backing up, restoring and listing KeyVaultSecrets. The\n * client also supports listing {@link DeletedSecret} for a soft-delete enabled Azure\n * Key Vault.\n */\nexport class SecretClient {\n  /**\n   * The base URL to the vault\n   */\n  public readonly vaultUrl: string;\n\n  /**\n   * A reference to the auto-generated KeyVault HTTP client.\n   */\n  private readonly client: KeyVaultClient;\n\n  /**\n   * Creates an instance of SecretClient.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleCreateClient\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { SecretClient } from \"@azure/keyvault-secrets\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * // Build the URL to reach your key vault\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const url = `https://${vaultName}.vault.azure.net`;\n   *\n   * // Lastly, create our keys client and connect to the service\n   * const client = new SecretClient(url, credential);\n   * ```\n   * @param vaultUrl - The base URL to the vault. You should validate that this URL references a valid Key Vault resource. See https://aka.ms/azsdk/blog/vault-uri for details.\n   * @param credential - An object that implements the `TokenCredential` interface used to authenticate requests to the service. Use the \\@azure/identity package to create a credential that suits your needs.\n   * @param pipelineOptions - Pipeline options used to configure Key Vault API requests.\n   *                          Omit this parameter to use the default pipeline configuration.\n   */\n  constructor(\n    vaultUrl: string,\n    credential: TokenCredential,\n    pipelineOptions: SecretClientOptions = {},\n  ) {\n    this.vaultUrl = vaultUrl;\n\n    const internalPipelineOptions: KeyVaultClientOptionalParams = {\n      ...pipelineOptions,\n      userAgentOptions: {\n        userAgentPrefix: `${pipelineOptions.userAgentOptions?.userAgentPrefix ?? \"\"} azsdk-js-keyvault-secrets/${SDK_VERSION}`,\n      },\n      apiVersion: pipelineOptions.serviceVersion || LATEST_API_VERSION,\n      loggingOptions: {\n        logger: logger.info,\n        additionalAllowedHeaderNames: [\n          \"x-ms-keyvault-region\",\n          \"x-ms-keyvault-network-info\",\n          \"x-ms-keyvault-service-version\",\n        ],\n      },\n    };\n\n    this.client = new KeyVaultClient(this.vaultUrl, credential, internalPipelineOptions);\n\n    // Key vault has its own authentication policy that needs to be added to the pipeline, replacing the default bearerTokenAuthenticationPolicy.\n    this.client.pipeline.removePolicy({ name: bearerTokenAuthenticationPolicyName });\n    this.client.pipeline.addPolicy(keyVaultAuthenticationPolicy(credential, pipelineOptions), {});\n    // Workaround for: https://github.com/Azure/azure-sdk-for-js/issues/31843\n    this.client.pipeline.addPolicy({\n      name: \"ContentTypePolicy\",\n      sendRequest(request, next) {\n        const contentType = request.headers.get(\"Content-Type\") ?? \"\";\n        if (contentType.startsWith(\"application/json\")) {\n          request.headers.set(\"Content-Type\", \"application/json\");\n        }\n        return next(request);\n      },\n    });\n  }\n\n  /**\n   * The setSecret method adds a secret or secret version to the Azure Key Vault. If the named secret\n   * already exists, Azure Key Vault creates a new version of that secret.\n   * This operation requires the secrets/set permission.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleCreateSecret\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { SecretClient } from \"@azure/keyvault-secrets\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const url = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new SecretClient(url, credential);\n   *\n   * const secretName = \"MySecretName\";\n   *\n   * const result = await client.setSecret(secretName, \"MySecretValue\");\n   * console.log(\"result: \", result);\n   * ```\n   * Adds a secret in a specified key vault.\n   * @param secretName - The name of the secret.\n   * @param value - The value of the secret.\n   * @param options - The optional parameters.\n   */\n  public setSecret(\n    secretName: string,\n    value: string,\n    options: SetSecretOptions = {},\n  ): Promise<KeyVaultSecret> {\n    const { enabled, notBefore, expiresOn: expires, tags, ...remainingOptions } = options;\n\n    return tracingClient.withSpan(\n      \"SecretClient.setSecret\",\n      remainingOptions,\n      async (updatedOptions) => {\n        const response = await this.client.setSecret(\n          secretName,\n          { value, secretAttributes: { enabled, notBefore, expires }, tags },\n          updatedOptions,\n        );\n        return getSecretFromSecretBundle(response);\n      },\n    );\n  }\n\n  /**\n   * Deletes a secret stored in Azure Key Vault.\n   * This function returns a Long Running Operation poller that allows you to wait indefinitely until the secret is deleted.\n   *\n   * This operation requires the secrets/delete permission.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleDeleteSecret\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { SecretClient } from \"@azure/keyvault-secrets\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const url = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new SecretClient(url, credential);\n   *\n   * const secretName = \"MySecretName\";\n   *\n   * await client.beginDeleteSecret(secretName);\n   * ```\n   * Deletes a secret from a specified key vault.\n   * @param secretName - The name of the secret.\n   * @param options - The optional parameters.\n   */\n  public async beginDeleteSecret(\n    name: string,\n    options: BeginDeleteSecretOptions = {},\n  ): Promise<PollerLike<PollOperationState<DeletedSecret>, DeletedSecret>> {\n    const poller = new DeleteSecretPoller({\n      name,\n      client: this.client,\n      ...options,\n      operationOptions: options,\n    });\n    // This will initialize the poller's operation (the deletion of the secret).\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * The updateSecret method changes specified attributes of an existing stored secret. Properties that\n   * are not specified in the request are left unchanged. The value of a secret itself cannot be\n   * changed. This operation requires the secrets/set permission.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleUpdateSecretAttributes\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { SecretClient } from \"@azure/keyvault-secrets\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const url = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new SecretClient(url, credential);\n   *\n   * const secretName = \"MySecretName\";\n   *\n   * const result = await client.getSecret(secretName);\n   * await client.updateSecretProperties(secretName, result.properties.version, { enabled: false });\n   * ```\n   * Updates the attributes associated with a specified secret in a given key vault.\n   * @param secretName - The name of the secret.\n   * @param secretVersion - The version of the secret.\n   * @param options - The optional parameters.\n   */\n  public async updateSecretProperties(\n    secretName: string,\n    secretVersion: string,\n    options: UpdateSecretPropertiesOptions = {},\n  ): Promise<SecretProperties> {\n    const { enabled, notBefore, expiresOn: expires, tags, ...remainingOptions } = options;\n\n    return tracingClient.withSpan(\n      \"SecretClient.updateSecretProperties\",\n      remainingOptions,\n      async (updatedOptions) => {\n        const response = await this.client.updateSecret(\n          secretName,\n          secretVersion,\n          { secretAttributes: { enabled, notBefore, expires }, tags },\n          updatedOptions,\n        );\n        return getSecretFromSecretBundle(response).properties;\n      },\n    );\n  }\n\n  /**\n   * The getSecret method is applicable to any secret stored in Azure Key Vault. This operation requires\n   * the secrets/get permission.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleGetSecret\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { SecretClient } from \"@azure/keyvault-secrets\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const url = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new SecretClient(url, credential);\n   *\n   * const secretName = \"MySecretName\";\n   *\n   * const latestSecret = await client.getSecret(secretName);\n   * console.log(`Latest version of the secret ${secretName}: `, latestSecret);\n   *\n   * const specificSecret = await client.getSecret(secretName, {\n   *   version: latestSecret.properties.version!,\n   * });\n   * console.log(\n   *   `The secret ${secretName} at the version ${latestSecret.properties.version!}: `,\n   *   specificSecret,\n   * );\n   * ```\n   * Get a specified secret from a given key vault.\n   * @param secretName - The name of the secret.\n   * @param options - The optional parameters.\n   */\n  public getSecret(secretName: string, options: GetSecretOptions = {}): Promise<KeyVaultSecret> {\n    return tracingClient.withSpan(\"SecretClient.getSecret\", options, async (updatedOptions) => {\n      const response = await this.client.getSecret(\n        secretName,\n        options && options.version ? options.version : \"\",\n        updatedOptions,\n      );\n      return getSecretFromSecretBundle(response);\n    });\n  }\n\n  /**\n   * The getDeletedSecret method returns the specified deleted secret along with its attributes.\n   * This operation requires the secrets/get permission.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleGetDeletedSecret\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { SecretClient } from \"@azure/keyvault-secrets\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const url = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new SecretClient(url, credential);\n   *\n   * const secretName = \"MySecretName\";\n   *\n   * const result = await client.getDeletedSecret(\"MyDeletedSecret\");\n   * ```\n   * Gets the specified deleted secret.\n   * @param secretName - The name of the secret.\n   * @param options - The optional parameters.\n   */\n  public getDeletedSecret(\n    secretName: string,\n    options: GetDeletedSecretOptions = {},\n  ): Promise<DeletedSecret> {\n    return tracingClient.withSpan(\n      \"SecretClient.getDeletedSecret\",\n      options,\n      async (updatedOptions) => {\n        const response = await this.client.getDeletedSecret(secretName, updatedOptions);\n        return getSecretFromSecretBundle(response);\n      },\n    );\n  }\n\n  /**\n   * The purge deleted secret operation removes the secret permanently, without the possibility of\n   * recovery. This operation can only be enabled on a soft-delete enabled vault. This operation\n   * requires the secrets/purge permission.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSamplePurgeDeletedSecret\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { SecretClient } from \"@azure/keyvault-secrets\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const url = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new SecretClient(url, credential);\n   *\n   * const secretName = \"MySecretName\";\n   *\n   * const deletePoller = await client.beginDeleteSecret(secretName);\n   * await deletePoller.pollUntilDone();\n   *\n   * await client.purgeDeletedSecret(secretName);\n   * ```\n   * Permanently deletes the specified secret.\n   * @param secretName - The name of the secret.\n   * @param options - The optional parameters.\n   */\n  public purgeDeletedSecret(\n    secretName: string,\n    options: PurgeDeletedSecretOptions = {},\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"SecretClient.purgeDeletedSecret\",\n      options,\n      async (updatedOptions) => {\n        await this.client.purgeDeletedSecret(secretName, updatedOptions);\n      },\n    );\n  }\n\n  /**\n   * Recovers the deleted secret in the specified vault.\n   * This function returns a Long Running Operation poller that allows you to wait indefinitely until the secret is recovered.\n   *\n   * This operation requires the secrets/recover permission.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleRecoverDeletedSecret\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { SecretClient } from \"@azure/keyvault-secrets\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const url = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new SecretClient(url, credential);\n   *\n   * const secretName = \"MySecretName\";\n   *\n   * const deletePoller = await client.beginDeleteSecret(secretName);\n   * await deletePoller.pollUntilDone();\n   *\n   * const recoverPoller = await client.beginRecoverDeletedSecret(secretName);\n   * const deletedSecret = await recoverPoller.pollUntilDone();\n   * console.log(deletedSecret);\n   * ```\n   * Recovers the deleted secret to the latest version.\n   * @param secretName - The name of the deleted secret.\n   * @param options - The optional parameters.\n   */\n  public async beginRecoverDeletedSecret(\n    name: string,\n    options: BeginRecoverDeletedSecretOptions = {},\n  ): Promise<PollerLike<PollOperationState<SecretProperties>, SecretProperties>> {\n    const poller = new RecoverDeletedSecretPoller({\n      name,\n      client: this.client,\n      ...options,\n      operationOptions: options,\n    });\n\n    // This will initialize the poller's operation (the recovery of the deleted secret).\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Requests that a backup of the specified secret be downloaded to the client. All versions of the\n   * secret will be downloaded. This operation requires the secrets/backup permission.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleBackupSecret\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { SecretClient } from \"@azure/keyvault-secrets\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const url = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new SecretClient(url, credential);\n   *\n   * const secretName = \"MySecretName\";\n   *\n   * const backupResult = await client.backupSecret(secretName);\n   * ```\n   * Backs up the specified secret.\n   * @param secretName - The name of the secret.\n   * @param options - The optional parameters.\n   */\n  public backupSecret(\n    secretName: string,\n    options: BackupSecretOptions = {},\n  ): Promise<Uint8Array | undefined> {\n    return tracingClient.withSpan(\"SecretClient.backupSecret\", options, async (updatedOptions) => {\n      const response = await this.client.backupSecret(secretName, updatedOptions);\n\n      return response.value;\n    });\n  }\n\n  /**\n   * Restores a backed up secret, and all its versions, to a vault. This operation requires the\n   * secrets/restore permission.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleRestoreSecret\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { SecretClient } from \"@azure/keyvault-secrets\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const url = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new SecretClient(url, credential);\n   *\n   * const secretName = \"MySecretName\";\n   *\n   * const backupResult = await client.backupSecret(secretName);\n   *\n   * await client.restoreSecretBackup(backupResult);\n   * ```\n   * Restores a backed up secret to a vault.\n   * @param secretBundleBackup - The backup blob associated with a secret bundle.\n   * @param options - The optional parameters.\n   */\n  public restoreSecretBackup(\n    secretBundleBackup: Uint8Array,\n    options: RestoreSecretBackupOptions = {},\n  ): Promise<SecretProperties> {\n    return tracingClient.withSpan(\n      \"SecretClient.restoreSecretBackup\",\n      options,\n      async (updatedOptions) => {\n        const response = await this.client.restoreSecret({ secretBundleBackup }, updatedOptions);\n        return getSecretFromSecretBundle(response).properties;\n      },\n    );\n  }\n\n  /**\n   * Iterates all versions of the given secret in the vault. The full secret identifier and attributes are provided\n   * in the response. No values are returned for the secrets. This operations requires the secrets/list permission.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleListSecrets\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { SecretClient } from \"@azure/keyvault-secrets\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const url = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new SecretClient(url, credential);\n   *\n   * const secretName = \"MySecretName\";\n   *\n   * for await (const secretProperties of client.listPropertiesOfSecrets()) {\n   *   console.log(\"Secret properties: \", secretProperties);\n   * }\n   *\n   * for await (const deletedSecret of client.listDeletedSecrets()) {\n   *   console.log(\"Deleted secret: \", deletedSecret);\n   * }\n   *\n   * for await (const versionProperties of client.listPropertiesOfSecretVersions(secretName)) {\n   *   console.log(\"Version properties: \", versionProperties);\n   * }\n   * ```\n   * @param secretName - Name of the secret to fetch versions for.\n   * @param options - The optional parameters.\n   */\n  public listPropertiesOfSecretVersions(\n    secretName: string,\n    options: ListPropertiesOfSecretVersionsOptions = {},\n  ): PagedAsyncIterableIterator<SecretProperties> {\n    return mapPagedAsyncIterable(\n      (updatedOptions) => this.client.getSecretVersions(secretName, updatedOptions),\n      options,\n      (item) => getSecretFromSecretBundle(item).properties,\n    );\n  }\n\n  /**\n   * Iterates the latest version of all secrets in the vault.  The full secret identifier and attributes are provided\n   * in the response. No values are returned for the secrets. This operations requires the secrets/list permission.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleListSecrets\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { SecretClient } from \"@azure/keyvault-secrets\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const url = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new SecretClient(url, credential);\n   *\n   * const secretName = \"MySecretName\";\n   *\n   * for await (const secretProperties of client.listPropertiesOfSecrets()) {\n   *   console.log(\"Secret properties: \", secretProperties);\n   * }\n   *\n   * for await (const deletedSecret of client.listDeletedSecrets()) {\n   *   console.log(\"Deleted secret: \", deletedSecret);\n   * }\n   *\n   * for await (const versionProperties of client.listPropertiesOfSecretVersions(secretName)) {\n   *   console.log(\"Version properties: \", versionProperties);\n   * }\n   * ```\n   * List all secrets in the vault.\n   * @param options - The optional parameters.\n   */\n  public listPropertiesOfSecrets(\n    options: ListPropertiesOfSecretsOptions = {},\n  ): PagedAsyncIterableIterator<SecretProperties> {\n    return mapPagedAsyncIterable(\n      this.client.getSecrets.bind(this.client),\n      options,\n      (item) => getSecretFromSecretBundle(item).properties,\n    );\n  }\n\n  /**\n   * Iterates the deleted secrets in the vault.  The full secret identifier and attributes are provided\n   * in the response. No values are returned for the secrets. This operations requires the secrets/list permission.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleListSecrets\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { SecretClient } from \"@azure/keyvault-secrets\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const url = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new SecretClient(url, credential);\n   *\n   * const secretName = \"MySecretName\";\n   *\n   * for await (const secretProperties of client.listPropertiesOfSecrets()) {\n   *   console.log(\"Secret properties: \", secretProperties);\n   * }\n   *\n   * for await (const deletedSecret of client.listDeletedSecrets()) {\n   *   console.log(\"Deleted secret: \", deletedSecret);\n   * }\n   *\n   * for await (const versionProperties of client.listPropertiesOfSecretVersions(secretName)) {\n   *   console.log(\"Version properties: \", versionProperties);\n   * }\n   * ```\n   * List all secrets in the vault.\n   * @param options - The optional parameters.\n   */\n  public listDeletedSecrets(\n    options: ListDeletedSecretsOptions = {},\n  ): PagedAsyncIterableIterator<DeletedSecret> {\n    return mapPagedAsyncIterable(\n      this.client.getDeletedSecrets.bind(this.client),\n      options,\n      getSecretFromSecretBundle,\n    );\n  }\n}\n"]}