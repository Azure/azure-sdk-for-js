{"version":3,"file":"operation.js","sourceRoot":"","sources":["../../../../src/lro/recover/operation.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\nimport type {\n  DeletedSecret,\n  GetSecretOptions,\n  KeyVaultSecret,\n  SecretProperties,\n} from \"../../secretsModels.js\";\nimport type { KeyVaultSecretPollOperationState } from \"../keyVaultSecretPoller.js\";\nimport { KeyVaultSecretPollOperation } from \"../keyVaultSecretPoller.js\";\nimport type { KeyVaultClient } from \"../../generated/keyVaultClient.js\";\nimport { getSecretFromSecretBundle } from \"../../transformations.js\";\nimport type { OperationOptions } from \"@azure-rest/core-client\";\nimport { tracingClient } from \"../../tracing.js\";\n\n/**\n * An interface representing the state of a delete secret's poll operation\n */\nexport interface RecoverDeletedSecretPollOperationState\n  extends KeyVaultSecretPollOperationState<SecretProperties> {}\n\n/**\n * An interface representing a delete secret's poll operation\n */\nexport class RecoverDeletedSecretPollOperation extends KeyVaultSecretPollOperation<\n  RecoverDeletedSecretPollOperationState,\n  SecretProperties\n> {\n  constructor(\n    public state: RecoverDeletedSecretPollOperationState,\n    private client: KeyVaultClient,\n    private options: OperationOptions = {},\n  ) {\n    super(state, { cancelMessage: \"Canceling the recovery of a deleted secret is not supported.\" });\n  }\n\n  /**\n   * The getSecret method returns the specified secret along with its properties.\n   * This operation requires the secrets/get permission.\n   */\n  private getSecret(name: string, options: GetSecretOptions = {}): Promise<KeyVaultSecret> {\n    return tracingClient.withSpan(\n      \"RecoverDeletedSecretPoller.getSecret\",\n      options,\n      async (updatedOptions) => {\n        const response = await this.client.getSecret(\n          name,\n          options && options.version ? options.version : \"\",\n          updatedOptions,\n        );\n        return getSecretFromSecretBundle(response);\n      },\n    );\n  }\n\n  /**\n   * The recoverDeletedSecret method recovers the specified deleted secret along with its properties.\n   * This operation requires the secrets/recover permission.\n   */\n  private recoverDeletedSecret(\n    name: string,\n    options: GetSecretOptions = {},\n  ): Promise<DeletedSecret> {\n    return tracingClient.withSpan(\n      \"RecoverDeletedSecretPoller.recoverDeletedSecret\",\n      options,\n      async (updatedOptions) => {\n        const response = await this.client.recoverDeletedSecret(name, updatedOptions);\n        return getSecretFromSecretBundle(response);\n      },\n    );\n  }\n\n  /**\n   * Reaches to the service and updates the delete secret's poll operation.\n   */\n  async update(\n    this: RecoverDeletedSecretPollOperation,\n    options: {\n      abortSignal?: AbortSignalLike;\n      fireProgress?: (state: RecoverDeletedSecretPollOperationState) => void;\n    } = {},\n  ): Promise<RecoverDeletedSecretPollOperation> {\n    const state = this.state;\n    const { name } = state;\n\n    if (options.abortSignal) {\n      this.options.abortSignal = options.abortSignal;\n    }\n\n    if (!state.isStarted) {\n      try {\n        state.result = (await this.getSecret(name, this.options)).properties;\n        state.isCompleted = true;\n      } catch {\n        // Nothing to do here.\n      }\n      if (!state.isCompleted) {\n        state.result = (await this.recoverDeletedSecret(name, this.options)).properties;\n        state.isStarted = true;\n      }\n    }\n\n    if (!state.isCompleted) {\n      try {\n        state.result = (await this.getSecret(name, this.options)).properties;\n        state.isCompleted = true;\n      } catch (error: any) {\n        if (error.statusCode === 403) {\n          // At this point, the resource exists but the user doesn't have access to it.\n          state.isCompleted = true;\n        } else if (error.statusCode !== 404) {\n          state.error = error;\n          state.isCompleted = true;\n          throw error;\n        }\n      }\n    }\n\n    return this;\n  }\n}\n"]}