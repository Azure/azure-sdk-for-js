/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * The object attributes managed by the KeyVault service.
 */
export interface Attributes {
  /**
   * Determines whether the object is enabled.
   */
  enabled?: boolean;
  /**
   * Not before date in UTC.
   */
  notBefore?: Date;
  /**
   * Expiry date in UTC.
   */
  expires?: Date;
  /**
   * Creation time in UTC.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly created?: Date;
  /**
   * Last updated time in UTC.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly updated?: Date;
}

/**
 * As of http://tools.ietf.org/html/draft-ietf-jose-json-web-key-18
 */
export interface JsonWebKey {
  /**
   * Key identifier.
   */
  kid?: string;
  /**
   * JsonWebKey Key Type (kty), as defined in
   * https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-40. Possible values include:
   * 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'
   */
  kty?: JsonWebKeyType;
  keyOps?: string[];
  /**
   * RSA modulus.
   */
  n?: Uint8Array;
  /**
   * RSA public exponent.
   */
  e?: Uint8Array;
  /**
   * RSA private exponent, or the D component of an EC private key.
   */
  d?: Uint8Array;
  /**
   * RSA private key parameter.
   */
  dp?: Uint8Array;
  /**
   * RSA private key parameter.
   */
  dq?: Uint8Array;
  /**
   * RSA private key parameter.
   */
  qi?: Uint8Array;
  /**
   * RSA secret prime.
   */
  p?: Uint8Array;
  /**
   * RSA secret prime, with p < q.
   */
  q?: Uint8Array;
  /**
   * Symmetric key.
   */
  k?: Uint8Array;
  /**
   * HSM Token, used with 'Bring Your Own Key'.
   */
  t?: Uint8Array;
  /**
   * Elliptic curve name. For valid values, see JsonWebKeyCurveName. Possible values include:
   * 'P-256', 'P-384', 'P-521', 'P-256K'
   */
  crv?: JsonWebKeyCurveName;
  /**
   * X component of an EC public key.
   */
  x?: Uint8Array;
  /**
   * Y component of an EC public key.
   */
  y?: Uint8Array;
}

/**
 * The attributes of a key managed by the key vault service.
 */
export interface KeyAttributes extends Attributes {
  /**
   * Reflects the deletion recovery level currently in effect for keys in the current vault. If it
   * contains 'Purgeable' the key can be permanently deleted by a privileged user; otherwise, only
   * the system can purge the key, at the end of the retention interval. Possible values include:
   * 'Purgeable', 'Recoverable+Purgeable', 'Recoverable', 'Recoverable+ProtectedSubscription'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly recoveryLevel?: DeletionRecoveryLevel;
}

/**
 * A KeyBundle consisting of a WebKey plus its attributes.
 */
export interface KeyBundle {
  /**
   * The Json web key.
   */
  key?: JsonWebKey;
  /**
   * The key management attributes.
   */
  attributes?: KeyAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
  /**
   * True if the key's lifetime is managed by key vault. If this is a key backing a certificate,
   * then managed will be true.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly managed?: boolean;
}

/**
 * The key item containing key metadata.
 */
export interface KeyItem {
  /**
   * Key identifier.
   */
  kid?: string;
  /**
   * The key management attributes.
   */
  attributes?: KeyAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
  /**
   * True if the key's lifetime is managed by key vault. If this is a key backing a certificate,
   * then managed will be true.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly managed?: boolean;
}

/**
 * A DeletedKeyBundle consisting of a WebKey plus its Attributes and deletion info
 */
export interface DeletedKeyBundle extends KeyBundle {
  /**
   * The url of the recovery object, used to identify and recover the deleted key.
   */
  recoveryId?: string;
  /**
   * The time when the key is scheduled to be purged, in UTC
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the key was deleted, in UTC
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly deletedDate?: Date;
}

/**
 * The deleted key item containing the deleted key metadata and information about deletion.
 */
export interface DeletedKeyItem extends KeyItem {
  /**
   * The url of the recovery object, used to identify and recover the deleted key.
   */
  recoveryId?: string;
  /**
   * The time when the key is scheduled to be purged, in UTC
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the key was deleted, in UTC
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly deletedDate?: Date;
}

/**
 * The secret management attributes.
 */
export interface SecretAttributes extends Attributes {
  /**
   * Reflects the deletion recovery level currently in effect for secrets in the current vault. If
   * it contains 'Purgeable', the secret can be permanently deleted by a privileged user;
   * otherwise, only the system can purge the secret, at the end of the retention interval.
   * Possible values include: 'Purgeable', 'Recoverable+Purgeable', 'Recoverable',
   * 'Recoverable+ProtectedSubscription'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly recoveryLevel?: DeletionRecoveryLevel;
}

/**
 * A secret consisting of a value, id and its attributes.
 */
export interface SecretBundle {
  /**
   * The secret value.
   */
  value?: string;
  /**
   * The secret id.
   */
  id?: string;
  /**
   * The content type of the secret.
   */
  contentType?: string;
  /**
   * The secret management attributes.
   */
  attributes?: SecretAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
  /**
   * If this is a secret backing a KV certificate, then this field specifies the corresponding key
   * backing the KV certificate.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly kid?: string;
  /**
   * True if the secret's lifetime is managed by key vault. If this is a secret backing a
   * certificate, then managed will be true.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly managed?: boolean;
}

/**
 * The secret item containing secret metadata.
 */
export interface SecretItem {
  /**
   * Secret identifier.
   */
  id?: string;
  /**
   * The secret management attributes.
   */
  attributes?: SecretAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Type of the secret value such as a password.
   */
  contentType?: string;
  /**
   * True if the secret's lifetime is managed by key vault. If this is a key backing a certificate,
   * then managed will be true.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly managed?: boolean;
}

/**
 * A Deleted Secret consisting of its previous id, attributes and its tags, as well as information
 * on when it will be purged.
 */
export interface DeletedSecretBundle extends SecretBundle {
  /**
   * The url of the recovery object, used to identify and recover the deleted secret.
   */
  recoveryId?: string;
  /**
   * The time when the secret is scheduled to be purged, in UTC
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the secret was deleted, in UTC
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly deletedDate?: Date;
}

/**
 * The deleted secret item containing metadata about the deleted secret.
 */
export interface DeletedSecretItem extends SecretItem {
  /**
   * The url of the recovery object, used to identify and recover the deleted secret.
   */
  recoveryId?: string;
  /**
   * The time when the secret is scheduled to be purged, in UTC
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the secret was deleted, in UTC
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly deletedDate?: Date;
}

/**
 * The secret restore parameters.
 */
export interface SecretRestoreParameters {
  /**
   * The backup blob associated with a secret bundle.
   */
  secretBundleBackup: Uint8Array;
}

/**
 * The secret restore parameters.
 */
export interface StorageRestoreParameters {
  /**
   * The backup blob associated with a storage account.
   */
  storageBundleBackup: Uint8Array;
}

/**
 * The certificate management attributes.
 */
export interface CertificateAttributes extends Attributes {
  /**
   * Reflects the deletion recovery level currently in effect for certificates in the current
   * vault. If it contains 'Purgeable', the certificate can be permanently deleted by a privileged
   * user; otherwise, only the system can purge the certificate, at the end of the retention
   * interval. Possible values include: 'Purgeable', 'Recoverable+Purgeable', 'Recoverable',
   * 'Recoverable+ProtectedSubscription'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly recoveryLevel?: DeletionRecoveryLevel;
}

/**
 * The certificate item containing certificate metadata.
 */
export interface CertificateItem {
  /**
   * Certificate identifier.
   */
  id?: string;
  /**
   * The certificate management attributes.
   */
  attributes?: CertificateAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Thumbprint of the certificate.
   */
  x509Thumbprint?: Uint8Array;
}

/**
 * The certificate issuer item containing certificate issuer metadata.
 */
export interface CertificateIssuerItem {
  /**
   * Certificate Identifier.
   */
  id?: string;
  /**
   * The issuer provider.
   */
  provider?: string;
}

/**
 * Properties of the key pair backing a certificate.
 */
export interface KeyProperties {
  /**
   * Indicates if the private key can be exported.
   */
  exportable?: boolean;
  /**
   * The type of key pair to be used for the certificate. Possible values include: 'EC', 'EC-HSM',
   * 'RSA', 'RSA-HSM', 'oct'
   */
  keyType?: JsonWebKeyType;
  /**
   * The key size in bits. For example: 2048, 3072, or 4096 for RSA.
   */
  keySize?: number;
  /**
   * Indicates if the same key pair will be used on certificate renewal.
   */
  reuseKey?: boolean;
  /**
   * Elliptic curve name. For valid values, see JsonWebKeyCurveName. Possible values include:
   * 'P-256', 'P-384', 'P-521', 'P-256K'
   */
  curve?: JsonWebKeyCurveName;
}

/**
 * Properties of the key backing a certificate.
 */
export interface SecretProperties {
  /**
   * The media type (MIME type).
   */
  contentType?: string;
}

/**
 * The subject alternate names of a X509 object.
 */
export interface SubjectAlternativeNames {
  /**
   * Email addresses.
   */
  emails?: string[];
  /**
   * Domain names.
   */
  dnsNames?: string[];
  /**
   * User principal names.
   */
  upns?: string[];
}

/**
 * Properties of the X509 component of a certificate.
 */
export interface X509CertificateProperties {
  /**
   * The subject name. Should be a valid X509 distinguished Name.
   */
  subject?: string;
  /**
   * The enhanced key usage.
   */
  ekus?: string[];
  /**
   * The subject alternative names.
   */
  subjectAlternativeNames?: SubjectAlternativeNames;
  /**
   * List of key usages.
   */
  keyUsage?: KeyUsageType[];
  /**
   * The duration that the certificate is valid in months.
   */
  validityInMonths?: number;
}

/**
 * A condition to be satisfied for an action to be executed.
 */
export interface Trigger {
  /**
   * Percentage of lifetime at which to trigger. Value should be between 1 and 99.
   */
  lifetimePercentage?: number;
  /**
   * Days before expiry to attempt renewal. Value should be between 1 and validity_in_months
   * multiplied by 27. If validity_in_months is 36, then value should be between 1 and 972 (36 *
   * 27).
   */
  daysBeforeExpiry?: number;
}

/**
 * The action that will be executed.
 */
export interface Action {
  /**
   * The type of the action. Possible values include: 'EmailContacts', 'AutoRenew'
   */
  actionType?: ActionType;
}

/**
 * Action and its trigger that will be performed by Key Vault over the lifetime of a certificate.
 */
export interface LifetimeAction {
  /**
   * The condition that will execute the action.
   */
  trigger?: Trigger;
  /**
   * The action that will be executed.
   */
  action?: Action;
}

/**
 * Parameters for the issuer of the X509 component of a certificate.
 */
export interface IssuerParameters {
  /**
   * Name of the referenced issuer object or reserved names; for example, 'Self' or 'Unknown'.
   */
  name?: string;
  /**
   * Type of certificate to be requested from the issuer provider.
   */
  certificateType?: string;
  /**
   * Indicates if the certificates generated under this policy should be published to certificate
   * transparency logs.
   */
  certificateTransparency?: boolean;
}

/**
 * Management policy for a certificate.
 */
export interface CertificatePolicy {
  /**
   * The certificate id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Properties of the key backing a certificate.
   */
  keyProperties?: KeyProperties;
  /**
   * Properties of the secret backing a certificate.
   */
  secretProperties?: SecretProperties;
  /**
   * Properties of the X509 component of a certificate.
   */
  x509CertificateProperties?: X509CertificateProperties;
  /**
   * Actions that will be performed by Key Vault over the lifetime of a certificate.
   */
  lifetimeActions?: LifetimeAction[];
  /**
   * Parameters for the issuer of the X509 component of a certificate.
   */
  issuerParameters?: IssuerParameters;
  /**
   * The certificate attributes.
   */
  attributes?: CertificateAttributes;
}

/**
 * A certificate bundle consists of a certificate (X509) plus its attributes.
 */
export interface CertificateBundle {
  /**
   * The certificate id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The key id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly kid?: string;
  /**
   * The secret id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sid?: string;
  /**
   * Thumbprint of the certificate.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly x509Thumbprint?: Uint8Array;
  /**
   * The management policy.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly policy?: CertificatePolicy;
  /**
   * CER contents of x509 certificate.
   */
  cer?: Uint8Array;
  /**
   * The content type of the secret.
   */
  contentType?: string;
  /**
   * The certificate attributes.
   */
  attributes?: CertificateAttributes;
  /**
   * Application specific metadata in the form of key-value pairs
   */
  tags?: { [propertyName: string]: string };
}

/**
 * A Deleted Certificate consisting of its previous id, attributes and its tags, as well as
 * information on when it will be purged.
 */
export interface DeletedCertificateBundle extends CertificateBundle {
  /**
   * The url of the recovery object, used to identify and recover the deleted certificate.
   */
  recoveryId?: string;
  /**
   * The time when the certificate is scheduled to be purged, in UTC
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the certificate was deleted, in UTC
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly deletedDate?: Date;
}

/**
 * The deleted certificate item containing metadata about the deleted certificate.
 */
export interface DeletedCertificateItem extends CertificateItem {
  /**
   * The url of the recovery object, used to identify and recover the deleted certificate.
   */
  recoveryId?: string;
  /**
   * The time when the certificate is scheduled to be purged, in UTC
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the certificate was deleted, in UTC
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly deletedDate?: Date;
}

/**
 * The key vault server error.
 */
export interface ErrorModel {
  /**
   * The error code.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly code?: string;
  /**
   * The error message.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly innerError?: ErrorModel;
}

/**
 * A certificate operation is returned in case of asynchronous requests.
 */
export interface CertificateOperation {
  /**
   * The certificate id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Parameters for the issuer of the X509 component of a certificate.
   */
  issuerParameters?: IssuerParameters;
  /**
   * The certificate signing request (CSR) that is being used in the certificate operation.
   */
  csr?: Uint8Array;
  /**
   * Indicates if cancellation was requested on the certificate operation.
   */
  cancellationRequested?: boolean;
  /**
   * Status of the certificate operation.
   */
  status?: string;
  /**
   * The status details of the certificate operation.
   */
  statusDetails?: string;
  /**
   * Error encountered, if any, during the certificate operation.
   */
  error?: ErrorModel;
  /**
   * Location which contains the result of the certificate operation.
   */
  target?: string;
  /**
   * Identifier for the certificate operation.
   */
  requestId?: string;
}

/**
 * The credentials to be used for the certificate issuer.
 */
export interface IssuerCredentials {
  /**
   * The user name/account name/account id.
   */
  accountId?: string;
  /**
   * The password/secret/account key.
   */
  password?: string;
}

/**
 * Details of the organization administrator of the certificate issuer.
 */
export interface AdministratorDetails {
  /**
   * First name.
   */
  firstName?: string;
  /**
   * Last name.
   */
  lastName?: string;
  /**
   * Email address.
   */
  emailAddress?: string;
  /**
   * Phone number.
   */
  phone?: string;
}

/**
 * Details of the organization of the certificate issuer.
 */
export interface OrganizationDetails {
  /**
   * Id of the organization.
   */
  id?: string;
  /**
   * Details of the organization administrator.
   */
  adminDetails?: AdministratorDetails[];
}

/**
 * The attributes of an issuer managed by the Key Vault service.
 */
export interface IssuerAttributes {
  /**
   * Determines whether the issuer is enabled.
   */
  enabled?: boolean;
  /**
   * Creation time in UTC.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly created?: Date;
  /**
   * Last updated time in UTC.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly updated?: Date;
}

/**
 * The issuer for Key Vault certificate.
 */
export interface IssuerBundle {
  /**
   * Identifier for the issuer object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The issuer provider.
   */
  provider?: string;
  /**
   * The credentials to be used for the issuer.
   */
  credentials?: IssuerCredentials;
  /**
   * Details of the organization as provided to the issuer.
   */
  organizationDetails?: OrganizationDetails;
  /**
   * Attributes of the issuer object.
   */
  attributes?: IssuerAttributes;
}

/**
 * The contact information for the vault certificates.
 */
export interface Contact {
  /**
   * Email address.
   */
  emailAddress?: string;
  /**
   * Name.
   */
  name?: string;
  /**
   * Phone number.
   */
  phone?: string;
}

/**
 * The contacts for the vault certificates.
 */
export interface Contacts {
  /**
   * Identifier for the contacts collection.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The contact list for the vault certificates.
   */
  contactList?: Contact[];
}

/**
 * The key create parameters.
 */
export interface KeyCreateParameters {
  /**
   * The type of key to create. For valid values, see JsonWebKeyType. Possible values include:
   * 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'
   */
  kty: JsonWebKeyType;
  /**
   * The key size in bits. For example: 2048, 3072, or 4096 for RSA.
   */
  keySize?: number;
  keyOps?: JsonWebKeyOperation[];
  keyAttributes?: KeyAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Elliptic curve name. For valid values, see JsonWebKeyCurveName. Possible values include:
   * 'P-256', 'P-384', 'P-521', 'P-256K'
   */
  curve?: JsonWebKeyCurveName;
}

/**
 * The key import parameters.
 */
export interface KeyImportParameters {
  /**
   * Whether to import as a hardware key (HSM) or software key.
   */
  hsm?: boolean;
  /**
   * The Json web key
   */
  key: JsonWebKey;
  /**
   * The key management attributes.
   */
  keyAttributes?: KeyAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The key operations parameters.
 */
export interface KeyOperationsParameters {
  /**
   * algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'
   */
  algorithm: JsonWebKeyEncryptionAlgorithm;
  value: Uint8Array;
}

/**
 * The key operations parameters.
 */
export interface KeySignParameters {
  /**
   * The signing/verification algorithm identifier. For more information on possible algorithm
   * types, see JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512',
   * 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'
   */
  algorithm: JsonWebKeySignatureAlgorithm;
  value: Uint8Array;
}

/**
 * The key verify parameters.
 */
export interface KeyVerifyParameters {
  /**
   * The signing/verification algorithm. For more information on possible algorithm types, see
   * JsonWebKeySignatureAlgorithm. Possible values include: 'PS256', 'PS384', 'PS512', 'RS256',
   * 'RS384', 'RS512', 'RSNULL', 'ES256', 'ES384', 'ES512', 'ES256K'
   */
  algorithm: JsonWebKeySignatureAlgorithm;
  /**
   * The digest used for signing.
   */
  digest: Uint8Array;
  /**
   * The signature to be verified.
   */
  signature: Uint8Array;
}

/**
 * The key update parameters.
 */
export interface KeyUpdateParameters {
  /**
   * Json web key operations. For more information on possible key operations, see
   * JsonWebKeyOperation.
   */
  keyOps?: JsonWebKeyOperation[];
  keyAttributes?: KeyAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The key restore parameters.
 */
export interface KeyRestoreParameters {
  /**
   * The backup blob associated with a key bundle.
   */
  keyBundleBackup: Uint8Array;
}

/**
 * The secret set parameters.
 */
export interface SecretSetParameters {
  /**
   * The value of the secret.
   */
  value: string;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Type of the secret value such as a password.
   */
  contentType?: string;
  /**
   * The secret management attributes.
   */
  secretAttributes?: SecretAttributes;
}

/**
 * The secret update parameters.
 */
export interface SecretUpdateParameters {
  /**
   * Type of the secret value such as a password.
   */
  contentType?: string;
  /**
   * The secret management attributes.
   */
  secretAttributes?: SecretAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The certificate create parameters.
 */
export interface CertificateCreateParameters {
  /**
   * The management policy for the certificate.
   */
  certificatePolicy?: CertificatePolicy;
  /**
   * The attributes of the certificate (optional).
   */
  certificateAttributes?: CertificateAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The certificate import parameters.
 */
export interface CertificateImportParameters {
  /**
   * Base64 encoded representation of the certificate object to import. This certificate needs to
   * contain the private key.
   */
  base64EncodedCertificate: string;
  /**
   * If the private key in base64EncodedCertificate is encrypted, the password used for encryption.
   */
  password?: string;
  /**
   * The management policy for the certificate.
   */
  certificatePolicy?: CertificatePolicy;
  /**
   * The attributes of the certificate (optional).
   */
  certificateAttributes?: CertificateAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The certificate update parameters.
 */
export interface CertificateUpdateParameters {
  /**
   * The management policy for the certificate.
   */
  certificatePolicy?: CertificatePolicy;
  /**
   * The attributes of the certificate (optional).
   */
  certificateAttributes?: CertificateAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The certificate merge parameters
 */
export interface CertificateMergeParameters {
  /**
   * The certificate or the certificate chain to merge.
   */
  x509Certificates: Uint8Array[];
  /**
   * The attributes of the certificate (optional).
   */
  certificateAttributes?: CertificateAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The certificate issuer set parameters.
 */
export interface CertificateIssuerSetParameters {
  /**
   * The issuer provider.
   */
  provider: string;
  /**
   * The credentials to be used for the issuer.
   */
  credentials?: IssuerCredentials;
  /**
   * Details of the organization as provided to the issuer.
   */
  organizationDetails?: OrganizationDetails;
  /**
   * Attributes of the issuer object.
   */
  attributes?: IssuerAttributes;
}

/**
 * The certificate issuer update parameters.
 */
export interface CertificateIssuerUpdateParameters {
  /**
   * The issuer provider.
   */
  provider?: string;
  /**
   * The credentials to be used for the issuer.
   */
  credentials?: IssuerCredentials;
  /**
   * Details of the organization as provided to the issuer.
   */
  organizationDetails?: OrganizationDetails;
  /**
   * Attributes of the issuer object.
   */
  attributes?: IssuerAttributes;
}

/**
 * The certificate operation update parameters.
 */
export interface CertificateOperationUpdateParameter {
  /**
   * Indicates if cancellation was requested on the certificate operation.
   */
  cancellationRequested: boolean;
}

/**
 * The key operation result.
 */
export interface KeyOperationResult {
  /**
   * Key identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly kid?: string;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly result?: Uint8Array;
}

/**
 * The key verify result.
 */
export interface KeyVerifyResult {
  /**
   * True if the signature is verified, otherwise false.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: boolean;
}

/**
 * The key list result.
 */
export interface KeyListResult {
  /**
   * A response message containing a list of keys in the key vault along with a link to the next
   * page of keys.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: KeyItem[];
  /**
   * The URL to get the next set of keys.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * A list of keys that have been deleted in this vault.
 */
export interface DeletedKeyListResult {
  /**
   * A response message containing a list of deleted keys in the vault along with a link to the
   * next page of deleted keys
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: DeletedKeyItem[];
  /**
   * The URL to get the next set of deleted keys.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * The secret list result.
 */
export interface SecretListResult {
  /**
   * A response message containing a list of secrets in the key vault along with a link to the next
   * page of secrets.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: SecretItem[];
  /**
   * The URL to get the next set of secrets.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * The deleted secret list result
 */
export interface DeletedSecretListResult {
  /**
   * A response message containing a list of the deleted secrets in the vault along with a link to
   * the next page of deleted secrets
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: DeletedSecretItem[];
  /**
   * The URL to get the next set of deleted secrets.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * The certificate list result.
 */
export interface CertificateListResult {
  /**
   * A response message containing a list of certificates in the key vault along with a link to the
   * next page of certificates.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: CertificateItem[];
  /**
   * The URL to get the next set of certificates.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * A list of certificates that have been deleted in this vault.
 */
export interface DeletedCertificateListResult {
  /**
   * A response message containing a list of deleted certificates in the vault along with a link to
   * the next page of deleted certificates
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: DeletedCertificateItem[];
  /**
   * The URL to get the next set of deleted certificates.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * The certificate issuer list result.
 */
export interface CertificateIssuerListResult {
  /**
   * A response message containing a list of certificate issuers in the key vault along with a link
   * to the next page of certificate issuers.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: CertificateIssuerItem[];
  /**
   * The URL to get the next set of certificate issuers.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * The backup key result, containing the backup blob.
 */
export interface BackupKeyResult {
  /**
   * The backup blob containing the backed up key.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: Uint8Array;
}

/**
 * The backup secret result, containing the backup blob.
 */
export interface BackupSecretResult {
  /**
   * The backup blob containing the backed up secret.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: Uint8Array;
}

/**
 * The backup storage result, containing the backup blob.
 */
export interface BackupStorageResult {
  /**
   * The backup blob containing the backed up storage account.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: Uint8Array;
}

/**
 * The pending certificate signing request result.
 */
export interface PendingCertificateSigningRequestResult {
  /**
   * The pending certificate signing request as Base64 encoded string.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: string;
}

/**
 * The storage account management attributes.
 */
export interface StorageAccountAttributes {
  /**
   * the enabled state of the object.
   */
  enabled?: boolean;
  /**
   * Creation time in UTC.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly created?: Date;
  /**
   * Last updated time in UTC.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly updated?: Date;
  /**
   * Reflects the deletion recovery level currently in effect for storage accounts in the current
   * vault. If it contains 'Purgeable' the storage account can be permanently deleted by a
   * privileged user; otherwise, only the system can purge the storage account, at the end of the
   * retention interval. Possible values include: 'Purgeable', 'Recoverable+Purgeable',
   * 'Recoverable', 'Recoverable+ProtectedSubscription'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly recoveryLevel?: DeletionRecoveryLevel;
}

/**
 * A Storage account bundle consists of key vault storage account details plus its attributes.
 */
export interface StorageBundle {
  /**
   * The storage account id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The storage account resource id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resourceId?: string;
  /**
   * The current active storage account key name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly activeKeyName?: string;
  /**
   * whether keyvault should manage the storage account for the user.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly autoRegenerateKey?: boolean;
  /**
   * The key regeneration time duration specified in ISO-8601 format.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly regenerationPeriod?: string;
  /**
   * The storage account attributes.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly attributes?: StorageAccountAttributes;
  /**
   * Application specific metadata in the form of key-value pairs
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tags?: { [propertyName: string]: string };
}

/**
 * A deleted storage account bundle consisting of its previous id, attributes and its tags, as well
 * as information on when it will be purged.
 */
export interface DeletedStorageBundle extends StorageBundle {
  /**
   * The url of the recovery object, used to identify and recover the deleted storage account.
   */
  recoveryId?: string;
  /**
   * The time when the storage account is scheduled to be purged, in UTC
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the storage account was deleted, in UTC
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly deletedDate?: Date;
}

/**
 * The storage account create parameters.
 */
export interface StorageAccountCreateParameters {
  /**
   * Storage account resource id.
   */
  resourceId: string;
  /**
   * Current active storage account key name.
   */
  activeKeyName: string;
  /**
   * whether keyvault should manage the storage account for the user.
   */
  autoRegenerateKey: boolean;
  /**
   * The key regeneration time duration specified in ISO-8601 format.
   */
  regenerationPeriod?: string;
  /**
   * The attributes of the storage account.
   */
  storageAccountAttributes?: StorageAccountAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The storage account update parameters.
 */
export interface StorageAccountUpdateParameters {
  /**
   * The current active storage account key name.
   */
  activeKeyName?: string;
  /**
   * whether keyvault should manage the storage account for the user.
   */
  autoRegenerateKey?: boolean;
  /**
   * The key regeneration time duration specified in ISO-8601 format.
   */
  regenerationPeriod?: string;
  /**
   * The attributes of the storage account.
   */
  storageAccountAttributes?: StorageAccountAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The storage account key regenerate parameters.
 */
export interface StorageAccountRegenerteKeyParameters {
  /**
   * The storage account key name.
   */
  keyName: string;
}

/**
 * The storage account item containing storage account metadata.
 */
export interface StorageAccountItem {
  /**
   * Storage identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Storage account resource Id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resourceId?: string;
  /**
   * The storage account management attributes.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly attributes?: StorageAccountAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tags?: { [propertyName: string]: string };
}

/**
 * The deleted storage account item containing metadata about the deleted storage account.
 */
export interface DeletedStorageAccountItem extends StorageAccountItem {
  /**
   * The url of the recovery object, used to identify and recover the deleted storage account.
   */
  recoveryId?: string;
  /**
   * The time when the storage account is scheduled to be purged, in UTC
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the storage account was deleted, in UTC
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly deletedDate?: Date;
}

/**
 * The storage accounts list result.
 */
export interface StorageListResult {
  /**
   * A response message containing a list of storage accounts in the key vault along with a link to
   * the next page of storage accounts.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: StorageAccountItem[];
  /**
   * The URL to get the next set of storage accounts.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * The deleted storage account list result
 */
export interface DeletedStorageListResult {
  /**
   * A response message containing a list of the deleted storage accounts in the vault along with a
   * link to the next page of deleted storage accounts
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: DeletedStorageAccountItem[];
  /**
   * The URL to get the next set of deleted storage accounts.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * The SAS definition management attributes.
 */
export interface SasDefinitionAttributes {
  /**
   * the enabled state of the object.
   */
  enabled?: boolean;
  /**
   * Creation time in UTC.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly created?: Date;
  /**
   * Last updated time in UTC.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly updated?: Date;
  /**
   * Reflects the deletion recovery level currently in effect for SAS definitions in the current
   * vault. If it contains 'Purgeable' the SAS definition can be permanently deleted by a
   * privileged user; otherwise, only the system can purge the SAS definition, at the end of the
   * retention interval. Possible values include: 'Purgeable', 'Recoverable+Purgeable',
   * 'Recoverable', 'Recoverable+ProtectedSubscription'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly recoveryLevel?: DeletionRecoveryLevel;
}

/**
 * A SAS definition bundle consists of key vault SAS definition details plus its attributes.
 */
export interface SasDefinitionBundle {
  /**
   * The SAS definition id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Storage account SAS definition secret id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly secretId?: string;
  /**
   * The SAS definition token template signed with an arbitrary key.  Tokens created according to
   * the SAS definition will have the same properties as the template.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly templateUri?: string;
  /**
   * The type of SAS token the SAS definition will create. Possible values include: 'account',
   * 'service'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sasType?: SasTokenType;
  /**
   * The validity period of SAS tokens created according to the SAS definition.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validityPeriod?: string;
  /**
   * The SAS definition attributes.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly attributes?: SasDefinitionAttributes;
  /**
   * Application specific metadata in the form of key-value pairs
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tags?: { [propertyName: string]: string };
}

/**
 * A deleted SAS definition bundle consisting of its previous id, attributes and its tags, as well
 * as information on when it will be purged.
 */
export interface DeletedSasDefinitionBundle extends SasDefinitionBundle {
  /**
   * The url of the recovery object, used to identify and recover the deleted SAS definition.
   */
  recoveryId?: string;
  /**
   * The time when the SAS definition is scheduled to be purged, in UTC
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the SAS definition was deleted, in UTC
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly deletedDate?: Date;
}

/**
 * The SAS definition item containing storage SAS definition metadata.
 */
export interface SasDefinitionItem {
  /**
   * The storage SAS identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The storage account SAS definition secret id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly secretId?: string;
  /**
   * The SAS definition management attributes.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly attributes?: SasDefinitionAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tags?: { [propertyName: string]: string };
}

/**
 * The deleted SAS definition item containing metadata about the deleted SAS definition.
 */
export interface DeletedSasDefinitionItem extends SasDefinitionItem {
  /**
   * The url of the recovery object, used to identify and recover the deleted SAS definition.
   */
  recoveryId?: string;
  /**
   * The time when the SAS definition is scheduled to be purged, in UTC
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly scheduledPurgeDate?: Date;
  /**
   * The time when the SAS definition was deleted, in UTC
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly deletedDate?: Date;
}

/**
 * The storage account SAS definition list result.
 */
export interface SasDefinitionListResult {
  /**
   * A response message containing a list of SAS definitions along with a link to the next page of
   * SAS definitions.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: SasDefinitionItem[];
  /**
   * The URL to get the next set of SAS definitions.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * The deleted SAS definition list result
 */
export interface DeletedSasDefinitionListResult {
  /**
   * A response message containing a list of the deleted SAS definitions in the vault along with a
   * link to the next page of deleted sas definitions
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: DeletedSasDefinitionItem[];
  /**
   * The URL to get the next set of deleted SAS definitions.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * The SAS definition create parameters.
 */
export interface SasDefinitionCreateParameters {
  /**
   * The SAS definition token template signed with an arbitrary key.  Tokens created according to
   * the SAS definition will have the same properties as the template.
   */
  templateUri: string;
  /**
   * The type of SAS token the SAS definition will create. Possible values include: 'account',
   * 'service'
   */
  sasType: SasTokenType;
  /**
   * The validity period of SAS tokens created according to the SAS definition.
   */
  validityPeriod: string;
  /**
   * The attributes of the SAS definition.
   */
  sasDefinitionAttributes?: SasDefinitionAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The SAS definition update parameters.
 */
export interface SasDefinitionUpdateParameters {
  /**
   * The SAS definition token template signed with an arbitrary key.  Tokens created according to
   * the SAS definition will have the same properties as the template.
   */
  templateUri?: string;
  /**
   * The type of SAS token the SAS definition will create. Possible values include: 'account',
   * 'service'
   */
  sasType?: SasTokenType;
  /**
   * The validity period of SAS tokens created according to the SAS definition.
   */
  validityPeriod?: string;
  /**
   * The attributes of the SAS definition.
   */
  sasDefinitionAttributes?: SasDefinitionAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The key vault error exception.
 */
export interface KeyVaultError {
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly error?: ErrorModel;
}

/**
 * The certificate restore parameters.
 */
export interface CertificateRestoreParameters {
  /**
   * The backup blob associated with a certificate bundle.
   */
  certificateBundleBackup: Uint8Array;
}

/**
 * The backup certificate result, containing the backup blob.
 */
export interface BackupCertificateResult {
  /**
   * The backup blob containing the backed up certificate.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: Uint8Array;
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientCreateKeyOptionalParams extends coreHttp.RequestOptionsBase {
  /**
   * The key size in bits. For example: 2048, 3072, or 4096 for RSA.
   */
  keySize?: number;
  keyOps?: JsonWebKeyOperation[];
  keyAttributes?: KeyAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Elliptic curve name. For valid values, see JsonWebKeyCurveName. Possible values include:
   * 'P-256', 'P-384', 'P-521', 'P-256K'
   */
  curve?: JsonWebKeyCurveName;
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientImportKeyOptionalParams extends coreHttp.RequestOptionsBase {
  /**
   * Whether to import as a hardware key (HSM) or software key.
   */
  hsm?: boolean;
  /**
   * The key management attributes.
   */
  keyAttributes?: KeyAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientUpdateKeyOptionalParams extends coreHttp.RequestOptionsBase {
  /**
   * Json web key operations. For more information on possible key operations, see
   * JsonWebKeyOperation.
   */
  keyOps?: JsonWebKeyOperation[];
  keyAttributes?: KeyAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientGetKeyVersionsOptionalParams extends coreHttp.RequestOptionsBase {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to
   * 25 results.
   */
  maxresults?: number;
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientGetKeysOptionalParams extends coreHttp.RequestOptionsBase {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to
   * 25 results.
   */
  maxresults?: number;
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientGetDeletedKeysOptionalParams extends coreHttp.RequestOptionsBase {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to
   * 25 results.
   */
  maxresults?: number;
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientSetSecretOptionalParams extends coreHttp.RequestOptionsBase {
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Type of the secret value such as a password.
   */
  contentType?: string;
  /**
   * The secret management attributes.
   */
  secretAttributes?: SecretAttributes;
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientUpdateSecretOptionalParams extends coreHttp.RequestOptionsBase {
  /**
   * Type of the secret value such as a password.
   */
  contentType?: string;
  /**
   * The secret management attributes.
   */
  secretAttributes?: SecretAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientGetSecretsOptionalParams extends coreHttp.RequestOptionsBase {
  /**
   * Maximum number of results to return in a page. If not specified, the service will return up to
   * 25 results.
   */
  maxresults?: number;
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientGetSecretVersionsOptionalParams extends coreHttp.RequestOptionsBase {
  /**
   * Maximum number of results to return in a page. If not specified, the service will return up to
   * 25 results.
   */
  maxresults?: number;
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientGetDeletedSecretsOptionalParams extends coreHttp.RequestOptionsBase {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to
   * 25 results.
   */
  maxresults?: number;
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientGetCertificatesOptionalParams extends coreHttp.RequestOptionsBase {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to
   * 25 results.
   */
  maxresults?: number;
  /**
   * Specifies whether to include certificates which are not completely provisioned.
   */
  includePending?: boolean;
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientGetCertificateIssuersOptionalParams
  extends coreHttp.RequestOptionsBase {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to
   * 25 results.
   */
  maxresults?: number;
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientSetCertificateIssuerOptionalParams
  extends coreHttp.RequestOptionsBase {
  /**
   * The credentials to be used for the issuer.
   */
  credentials?: IssuerCredentials;
  /**
   * Details of the organization as provided to the issuer.
   */
  organizationDetails?: OrganizationDetails;
  /**
   * Attributes of the issuer object.
   */
  attributes?: IssuerAttributes;
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientUpdateCertificateIssuerOptionalParams
  extends coreHttp.RequestOptionsBase {
  /**
   * The issuer provider.
   */
  provider?: string;
  /**
   * The credentials to be used for the issuer.
   */
  credentials?: IssuerCredentials;
  /**
   * Details of the organization as provided to the issuer.
   */
  organizationDetails?: OrganizationDetails;
  /**
   * Attributes of the issuer object.
   */
  attributes?: IssuerAttributes;
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientCreateCertificateOptionalParams extends coreHttp.RequestOptionsBase {
  /**
   * The management policy for the certificate.
   */
  certificatePolicy?: CertificatePolicy;
  /**
   * The attributes of the certificate (optional).
   */
  certificateAttributes?: CertificateAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientImportCertificateOptionalParams extends coreHttp.RequestOptionsBase {
  /**
   * If the private key in base64EncodedCertificate is encrypted, the password used for encryption.
   */
  password?: string;
  /**
   * The management policy for the certificate.
   */
  certificatePolicy?: CertificatePolicy;
  /**
   * The attributes of the certificate (optional).
   */
  certificateAttributes?: CertificateAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientGetCertificateVersionsOptionalParams
  extends coreHttp.RequestOptionsBase {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to
   * 25 results.
   */
  maxresults?: number;
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientUpdateCertificateOptionalParams extends coreHttp.RequestOptionsBase {
  /**
   * The management policy for the certificate.
   */
  certificatePolicy?: CertificatePolicy;
  /**
   * The attributes of the certificate (optional).
   */
  certificateAttributes?: CertificateAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientMergeCertificateOptionalParams extends coreHttp.RequestOptionsBase {
  /**
   * The attributes of the certificate (optional).
   */
  certificateAttributes?: CertificateAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientGetDeletedCertificatesOptionalParams
  extends coreHttp.RequestOptionsBase {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to
   * 25 results.
   */
  maxresults?: number;
  /**
   * Specifies whether to include certificates which are not completely provisioned.
   */
  includePending?: boolean;
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientGetStorageAccountsOptionalParams
  extends coreHttp.RequestOptionsBase {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to
   * 25 results.
   */
  maxresults?: number;
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientGetDeletedStorageAccountsOptionalParams
  extends coreHttp.RequestOptionsBase {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to
   * 25 results.
   */
  maxresults?: number;
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientSetStorageAccountOptionalParams extends coreHttp.RequestOptionsBase {
  /**
   * The key regeneration time duration specified in ISO-8601 format.
   */
  regenerationPeriod?: string;
  /**
   * The attributes of the storage account.
   */
  storageAccountAttributes?: StorageAccountAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientUpdateStorageAccountOptionalParams
  extends coreHttp.RequestOptionsBase {
  /**
   * The current active storage account key name.
   */
  activeKeyName?: string;
  /**
   * whether keyvault should manage the storage account for the user.
   */
  autoRegenerateKey?: boolean;
  /**
   * The key regeneration time duration specified in ISO-8601 format.
   */
  regenerationPeriod?: string;
  /**
   * The attributes of the storage account.
   */
  storageAccountAttributes?: StorageAccountAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientGetSasDefinitionsOptionalParams extends coreHttp.RequestOptionsBase {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to
   * 25 results.
   */
  maxresults?: number;
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientGetDeletedSasDefinitionsOptionalParams
  extends coreHttp.RequestOptionsBase {
  /**
   * Maximum number of results to return in a page. If not specified the service will return up to
   * 25 results.
   */
  maxresults?: number;
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientSetSasDefinitionOptionalParams extends coreHttp.RequestOptionsBase {
  /**
   * The attributes of the SAS definition.
   */
  sasDefinitionAttributes?: SasDefinitionAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Optional Parameters.
 */
export interface KeyVaultClientUpdateSasDefinitionOptionalParams
  extends coreHttp.RequestOptionsBase {
  /**
   * The SAS definition token template signed with an arbitrary key.  Tokens created according to
   * the SAS definition will have the same properties as the template.
   */
  templateUri?: string;
  /**
   * The type of SAS token the SAS definition will create. Possible values include: 'account',
   * 'service'
   */
  sasType?: SasTokenType;
  /**
   * The validity period of SAS tokens created according to the SAS definition.
   */
  validityPeriod?: string;
  /**
   * The attributes of the SAS definition.
   */
  sasDefinitionAttributes?: SasDefinitionAttributes;
  /**
   * Application specific metadata in the form of key-value pairs.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Defines values for JsonWebKeyType.
 * Possible values include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'
 * @readonly
 * @enum {string}
 */
export type JsonWebKeyType = "EC" | "EC-HSM" | "RSA" | "RSA-HSM" | "oct";

/**
 * Defines values for JsonWebKeyCurveName.
 * Possible values include: 'P-256', 'P-384', 'P-521', 'P-256K'
 * @readonly
 * @enum {string}
 */
export type JsonWebKeyCurveName = "P-256" | "P-384" | "P-521" | "P-256K";

/**
 * Defines values for DeletionRecoveryLevel.
 * Possible values include: 'Purgeable', 'Recoverable+Purgeable', 'Recoverable',
 * 'Recoverable+ProtectedSubscription'
 * @readonly
 * @enum {string}
 */
export type DeletionRecoveryLevel =
  | "Purgeable"
  | "Recoverable+Purgeable"
  | "Recoverable"
  | "Recoverable+ProtectedSubscription";

/**
 * Defines values for KeyUsageType.
 * Possible values include: 'digitalSignature', 'nonRepudiation', 'keyEncipherment',
 * 'dataEncipherment', 'keyAgreement', 'keyCertSign', 'cRLSign', 'encipherOnly', 'decipherOnly'
 * @readonly
 * @enum {string}
 */
export type KeyUsageType =
  | "digitalSignature"
  | "nonRepudiation"
  | "keyEncipherment"
  | "dataEncipherment"
  | "keyAgreement"
  | "keyCertSign"
  | "cRLSign"
  | "encipherOnly"
  | "decipherOnly";

/**
 * Defines values for ActionType.
 * Possible values include: 'EmailContacts', 'AutoRenew'
 * @readonly
 * @enum {string}
 */
export type ActionType = "EmailContacts" | "AutoRenew";

/**
 * Defines values for JsonWebKeyOperation.
 * Possible values include: 'encrypt', 'decrypt', 'sign', 'verify', 'wrapKey', 'unwrapKey'
 * @readonly
 * @enum {string}
 */
export type JsonWebKeyOperation =
  | "encrypt"
  | "decrypt"
  | "sign"
  | "verify"
  | "wrapKey"
  | "unwrapKey";

/**
 * Defines values for JsonWebKeyEncryptionAlgorithm.
 * Possible values include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'
 * @readonly
 * @enum {string}
 */
export type JsonWebKeyEncryptionAlgorithm = "RSA-OAEP" | "RSA-OAEP-256" | "RSA1_5";

/**
 * Defines values for JsonWebKeySignatureAlgorithm.
 * Possible values include: 'PS256', 'PS384', 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL',
 * 'ES256', 'ES384', 'ES512', 'ES256K'
 * @readonly
 * @enum {string}
 */
export type JsonWebKeySignatureAlgorithm =
  | "PS256"
  | "PS384"
  | "PS512"
  | "RS256"
  | "RS384"
  | "RS512"
  | "RSNULL"
  | "ES256"
  | "ES384"
  | "ES512"
  | "ES256K";

/**
 * Defines values for SasTokenType.
 * Possible values include: 'account', 'service'
 * @readonly
 * @enum {string}
 */
export type SasTokenType = "account" | "service";

/**
 * Contains response data for the createKey operation.
 */
export type CreateKeyResponse = KeyBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyBundle;
  };
};

/**
 * Contains response data for the importKey operation.
 */
export type ImportKeyResponse = KeyBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyBundle;
  };
};

/**
 * Contains response data for the deleteKey operation.
 */
export type DeleteKeyResponse = DeletedKeyBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedKeyBundle;
  };
};

/**
 * Contains response data for the updateKey operation.
 */
export type UpdateKeyResponse = KeyBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyBundle;
  };
};

/**
 * Contains response data for the getKey operation.
 */
export type GetKeyResponse = KeyBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyBundle;
  };
};

/**
 * Contains response data for the getKeyVersions operation.
 */
export type GetKeyVersionsResponse = KeyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyListResult;
  };
};

/**
 * Contains response data for the getKeys operation.
 */
export type GetKeysResponse = KeyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyListResult;
  };
};

/**
 * Contains response data for the backupKey operation.
 */
export type BackupKeyResponse = BackupKeyResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupKeyResult;
  };
};

/**
 * Contains response data for the restoreKey operation.
 */
export type RestoreKeyResponse = KeyBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyBundle;
  };
};

/**
 * Contains response data for the encrypt operation.
 */
export type EncryptResponse = KeyOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyOperationResult;
  };
};

/**
 * Contains response data for the decrypt operation.
 */
export type DecryptResponse = KeyOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyOperationResult;
  };
};

/**
 * Contains response data for the sign operation.
 */
export type SignResponse = KeyOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyOperationResult;
  };
};

/**
 * Contains response data for the verify operation.
 */
export type VerifyResponse = KeyVerifyResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyVerifyResult;
  };
};

/**
 * Contains response data for the wrapKey operation.
 */
export type WrapKeyResponse = KeyOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyOperationResult;
  };
};

/**
 * Contains response data for the unwrapKey operation.
 */
export type UnwrapKeyResponse = KeyOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyOperationResult;
  };
};

/**
 * Contains response data for the getDeletedKeys operation.
 */
export type GetDeletedKeysResponse = DeletedKeyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedKeyListResult;
  };
};

/**
 * Contains response data for the getDeletedKey operation.
 */
export type GetDeletedKeyResponse = DeletedKeyBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedKeyBundle;
  };
};

/**
 * Contains response data for the recoverDeletedKey operation.
 */
export type RecoverDeletedKeyResponse = KeyBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: KeyBundle;
  };
};

/**
 * Contains response data for the setSecret operation.
 */
export type SetSecretResponse = SecretBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecretBundle;
  };
};

/**
 * Contains response data for the deleteSecret operation.
 */
export type DeleteSecretResponse = DeletedSecretBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedSecretBundle;
  };
};

/**
 * Contains response data for the updateSecret operation.
 */
export type UpdateSecretResponse = SecretBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecretBundle;
  };
};

/**
 * Contains response data for the getSecret operation.
 */
export type GetSecretResponse = SecretBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecretBundle;
  };
};

/**
 * Contains response data for the getSecrets operation.
 */
export type GetSecretsResponse = SecretListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecretListResult;
  };
};

/**
 * Contains response data for the getSecretVersions operation.
 */
export type GetSecretVersionsResponse = SecretListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecretListResult;
  };
};

/**
 * Contains response data for the getDeletedSecrets operation.
 */
export type GetDeletedSecretsResponse = DeletedSecretListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedSecretListResult;
  };
};

/**
 * Contains response data for the getDeletedSecret operation.
 */
export type GetDeletedSecretResponse = DeletedSecretBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedSecretBundle;
  };
};

/**
 * Contains response data for the recoverDeletedSecret operation.
 */
export type RecoverDeletedSecretResponse = SecretBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecretBundle;
  };
};

/**
 * Contains response data for the backupSecret operation.
 */
export type BackupSecretResponse = BackupSecretResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupSecretResult;
  };
};

/**
 * Contains response data for the restoreSecret operation.
 */
export type RestoreSecretResponse = SecretBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SecretBundle;
  };
};

/**
 * Contains response data for the getCertificates operation.
 */
export type GetCertificatesResponse = CertificateListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateListResult;
  };
};

/**
 * Contains response data for the deleteCertificate operation.
 */
export type DeleteCertificateResponse = DeletedCertificateBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedCertificateBundle;
  };
};

/**
 * Contains response data for the setCertificateContacts operation.
 */
export type SetCertificateContactsResponse = Contacts & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Contacts;
  };
};

/**
 * Contains response data for the getCertificateContacts operation.
 */
export type GetCertificateContactsResponse = Contacts & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Contacts;
  };
};

/**
 * Contains response data for the deleteCertificateContacts operation.
 */
export type DeleteCertificateContactsResponse = Contacts & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: Contacts;
  };
};

/**
 * Contains response data for the getCertificateIssuers operation.
 */
export type GetCertificateIssuersResponse = CertificateIssuerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateIssuerListResult;
  };
};

/**
 * Contains response data for the setCertificateIssuer operation.
 */
export type SetCertificateIssuerResponse = IssuerBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IssuerBundle;
  };
};

/**
 * Contains response data for the updateCertificateIssuer operation.
 */
export type UpdateCertificateIssuerResponse = IssuerBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IssuerBundle;
  };
};

/**
 * Contains response data for the getCertificateIssuer operation.
 */
export type GetCertificateIssuerResponse = IssuerBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IssuerBundle;
  };
};

/**
 * Contains response data for the deleteCertificateIssuer operation.
 */
export type DeleteCertificateIssuerResponse = IssuerBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IssuerBundle;
  };
};

/**
 * Contains response data for the createCertificate operation.
 */
export type CreateCertificateResponse = CertificateOperation & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateOperation;
  };
};

/**
 * Contains response data for the importCertificate operation.
 */
export type ImportCertificateResponse = CertificateBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateBundle;
  };
};

/**
 * Contains response data for the getCertificateVersions operation.
 */
export type GetCertificateVersionsResponse = CertificateListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateListResult;
  };
};

/**
 * Contains response data for the getCertificatePolicy operation.
 */
export type GetCertificatePolicyResponse = CertificatePolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificatePolicy;
  };
};

/**
 * Contains response data for the updateCertificatePolicy operation.
 */
export type UpdateCertificatePolicyResponse = CertificatePolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificatePolicy;
  };
};

/**
 * Contains response data for the updateCertificate operation.
 */
export type UpdateCertificateResponse = CertificateBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateBundle;
  };
};

/**
 * Contains response data for the getCertificate operation.
 */
export type GetCertificateResponse = CertificateBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateBundle;
  };
};

/**
 * Contains response data for the updateCertificateOperation operation.
 */
export type UpdateCertificateOperationResponse = CertificateOperation & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateOperation;
  };
};

/**
 * Contains response data for the getCertificateOperation operation.
 */
export type GetCertificateOperationResponse = CertificateOperation & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateOperation;
  };
};

/**
 * Contains response data for the deleteCertificateOperation operation.
 */
export type DeleteCertificateOperationResponse = CertificateOperation & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateOperation;
  };
};

/**
 * Contains response data for the mergeCertificate operation.
 */
export type MergeCertificateResponse = CertificateBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateBundle;
  };
};

/**
 * Contains response data for the backupCertificate operation.
 */
export type BackupCertificateResponse = BackupCertificateResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupCertificateResult;
  };
};

/**
 * Contains response data for the restoreCertificate operation.
 */
export type RestoreCertificateResponse = CertificateBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateBundle;
  };
};

/**
 * Contains response data for the getDeletedCertificates operation.
 */
export type GetDeletedCertificatesResponse = DeletedCertificateListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedCertificateListResult;
  };
};

/**
 * Contains response data for the getDeletedCertificate operation.
 */
export type GetDeletedCertificateResponse = DeletedCertificateBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedCertificateBundle;
  };
};

/**
 * Contains response data for the recoverDeletedCertificate operation.
 */
export type RecoverDeletedCertificateResponse = CertificateBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: CertificateBundle;
  };
};

/**
 * Contains response data for the getStorageAccounts operation.
 */
export type GetStorageAccountsResponse = StorageListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageListResult;
  };
};

/**
 * Contains response data for the getDeletedStorageAccounts operation.
 */
export type GetDeletedStorageAccountsResponse = DeletedStorageListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedStorageListResult;
  };
};

/**
 * Contains response data for the getDeletedStorageAccount operation.
 */
export type GetDeletedStorageAccountResponse = DeletedStorageBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedStorageBundle;
  };
};

/**
 * Contains response data for the recoverDeletedStorageAccount operation.
 */
export type RecoverDeletedStorageAccountResponse = StorageBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageBundle;
  };
};

/**
 * Contains response data for the backupStorageAccount operation.
 */
export type BackupStorageAccountResponse = BackupStorageResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: BackupStorageResult;
  };
};

/**
 * Contains response data for the restoreStorageAccount operation.
 */
export type RestoreStorageAccountResponse = StorageBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageBundle;
  };
};

/**
 * Contains response data for the deleteStorageAccount operation.
 */
export type DeleteStorageAccountResponse = DeletedStorageBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedStorageBundle;
  };
};

/**
 * Contains response data for the getStorageAccount operation.
 */
export type GetStorageAccountResponse = StorageBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageBundle;
  };
};

/**
 * Contains response data for the setStorageAccount operation.
 */
export type SetStorageAccountResponse = StorageBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageBundle;
  };
};

/**
 * Contains response data for the updateStorageAccount operation.
 */
export type UpdateStorageAccountResponse = StorageBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageBundle;
  };
};

/**
 * Contains response data for the regenerateStorageAccountKey operation.
 */
export type RegenerateStorageAccountKeyResponse = StorageBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: StorageBundle;
  };
};

/**
 * Contains response data for the getSasDefinitions operation.
 */
export type GetSasDefinitionsResponse = SasDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SasDefinitionListResult;
  };
};

/**
 * Contains response data for the getDeletedSasDefinitions operation.
 */
export type GetDeletedSasDefinitionsResponse = DeletedSasDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedSasDefinitionListResult;
  };
};

/**
 * Contains response data for the getDeletedSasDefinition operation.
 */
export type GetDeletedSasDefinitionResponse = DeletedSasDefinitionBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedSasDefinitionBundle;
  };
};

/**
 * Contains response data for the recoverDeletedSasDefinition operation.
 */
export type RecoverDeletedSasDefinitionResponse = SasDefinitionBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SasDefinitionBundle;
  };
};

/**
 * Contains response data for the deleteSasDefinition operation.
 */
export type DeleteSasDefinitionResponse = DeletedSasDefinitionBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DeletedSasDefinitionBundle;
  };
};

/**
 * Contains response data for the getSasDefinition operation.
 */
export type GetSasDefinitionResponse = SasDefinitionBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SasDefinitionBundle;
  };
};

/**
 * Contains response data for the setSasDefinition operation.
 */
export type SetSasDefinitionResponse = SasDefinitionBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SasDefinitionBundle;
  };
};

/**
 * Contains response data for the updateSasDefinition operation.
 */
export type UpdateSasDefinitionResponse = SasDefinitionBundle & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SasDefinitionBundle;
  };
};
