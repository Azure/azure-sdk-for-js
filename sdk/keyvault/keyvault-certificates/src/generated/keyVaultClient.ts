/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreHttpCompat from "@azure/core-http-compat";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import {
  ApiVersion73,
  KeyVaultClientOptionalParams,
  GetCertificatesOptionalParams,
  GetCertificatesResponse,
  DeleteCertificateOptionalParams,
  DeleteCertificateResponse,
  Contacts,
  SetCertificateContactsOptionalParams,
  SetCertificateContactsResponse,
  GetCertificateContactsOptionalParams,
  GetCertificateContactsResponse,
  DeleteCertificateContactsOptionalParams,
  DeleteCertificateContactsResponse,
  GetCertificateIssuersOptionalParams,
  GetCertificateIssuersResponse,
  SetCertificateIssuerOptionalParams,
  SetCertificateIssuerResponse,
  UpdateCertificateIssuerOptionalParams,
  UpdateCertificateIssuerResponse,
  GetCertificateIssuerOptionalParams,
  GetCertificateIssuerResponse,
  DeleteCertificateIssuerOptionalParams,
  DeleteCertificateIssuerResponse,
  CreateCertificateOptionalParams,
  CreateCertificateResponse,
  ImportCertificateOptionalParams,
  ImportCertificateResponse,
  GetCertificateVersionsOptionalParams,
  GetCertificateVersionsResponse,
  GetCertificatePolicyOptionalParams,
  GetCertificatePolicyResponse,
  CertificatePolicy,
  UpdateCertificatePolicyOptionalParams,
  UpdateCertificatePolicyResponse,
  UpdateCertificateOptionalParams,
  UpdateCertificateResponse,
  GetCertificateOptionalParams,
  GetCertificateResponse,
  UpdateCertificateOperationOptionalParams,
  UpdateCertificateOperationResponse,
  GetCertificateOperationOptionalParams,
  GetCertificateOperationResponse,
  DeleteCertificateOperationOptionalParams,
  DeleteCertificateOperationResponse,
  MergeCertificateOptionalParams,
  MergeCertificateResponse,
  BackupCertificateOptionalParams,
  BackupCertificateResponse,
  RestoreCertificateOptionalParams,
  RestoreCertificateResponse,
  GetDeletedCertificatesOptionalParams,
  GetDeletedCertificatesResponse,
  GetDeletedCertificateOptionalParams,
  GetDeletedCertificateResponse,
  PurgeDeletedCertificateOptionalParams,
  RecoverDeletedCertificateOptionalParams,
  RecoverDeletedCertificateResponse,
  GetCertificatesNextOptionalParams,
  GetCertificatesNextResponse,
  GetCertificateIssuersNextOptionalParams,
  GetCertificateIssuersNextResponse,
  GetCertificateVersionsNextOptionalParams,
  GetCertificateVersionsNextResponse,
  GetDeletedCertificatesNextOptionalParams,
  GetDeletedCertificatesNextResponse
} from "./models";

/** @internal */
export class KeyVaultClient extends coreHttpCompat.ExtendedServiceClient {
  apiVersion: ApiVersion73;

  /**
   * Initializes a new instance of the KeyVaultClient class.
   * @param apiVersion Api Version
   * @param options The parameter options
   */
  constructor(
    apiVersion: ApiVersion73,
    options?: KeyVaultClientOptionalParams
  ) {
    if (apiVersion === undefined) {
      throw new Error("'apiVersion' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: KeyVaultClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8"
    };

    const packageDetails = `azsdk-js-keyvault-certificates/4.6.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      baseUri: options.endpoint ?? options.baseUri ?? "{vaultBaseUrl}"
    };
    super(optionsWithDefaults);
    // Parameter assignments
    this.apiVersion = apiVersion;
  }

  /**
   * The GetCertificates operation returns the set of certificates resources in the specified key vault.
   * This operation requires the certificates/list permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The options parameters.
   */
  getCertificates(
    vaultBaseUrl: string,
    options?: GetCertificatesOptionalParams
  ): Promise<GetCertificatesResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, options },
      getCertificatesOperationSpec
    );
  }

  /**
   * Deletes all versions of a certificate object along with its associated policy. Delete certificate
   * cannot be used to remove individual versions of a certificate object. This operation requires the
   * certificates/delete permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param options The options parameters.
   */
  deleteCertificate(
    vaultBaseUrl: string,
    certificateName: string,
    options?: DeleteCertificateOptionalParams
  ): Promise<DeleteCertificateResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, options },
      deleteCertificateOperationSpec
    );
  }

  /**
   * Sets the certificate contacts for the specified key vault. This operation requires the
   * certificates/managecontacts permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param contacts The contacts for the key vault certificate.
   * @param options The options parameters.
   */
  setCertificateContacts(
    vaultBaseUrl: string,
    contacts: Contacts,
    options?: SetCertificateContactsOptionalParams
  ): Promise<SetCertificateContactsResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, contacts, options },
      setCertificateContactsOperationSpec
    );
  }

  /**
   * The GetCertificateContacts operation returns the set of certificate contact resources in the
   * specified key vault. This operation requires the certificates/managecontacts permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The options parameters.
   */
  getCertificateContacts(
    vaultBaseUrl: string,
    options?: GetCertificateContactsOptionalParams
  ): Promise<GetCertificateContactsResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, options },
      getCertificateContactsOperationSpec
    );
  }

  /**
   * Deletes the certificate contacts for a specified key vault certificate. This operation requires the
   * certificates/managecontacts permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The options parameters.
   */
  deleteCertificateContacts(
    vaultBaseUrl: string,
    options?: DeleteCertificateContactsOptionalParams
  ): Promise<DeleteCertificateContactsResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, options },
      deleteCertificateContactsOperationSpec
    );
  }

  /**
   * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified
   * key vault. This operation requires the certificates/manageissuers/getissuers permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The options parameters.
   */
  getCertificateIssuers(
    vaultBaseUrl: string,
    options?: GetCertificateIssuersOptionalParams
  ): Promise<GetCertificateIssuersResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, options },
      getCertificateIssuersOperationSpec
    );
  }

  /**
   * The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation
   * requires the certificates/setissuers permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param issuerName The name of the issuer.
   * @param provider The issuer provider.
   * @param options The options parameters.
   */
  setCertificateIssuer(
    vaultBaseUrl: string,
    issuerName: string,
    provider: string,
    options?: SetCertificateIssuerOptionalParams
  ): Promise<SetCertificateIssuerResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, issuerName, provider, options },
      setCertificateIssuerOperationSpec
    );
  }

  /**
   * The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity.
   * This operation requires the certificates/setissuers permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param issuerName The name of the issuer.
   * @param options The options parameters.
   */
  updateCertificateIssuer(
    vaultBaseUrl: string,
    issuerName: string,
    options?: UpdateCertificateIssuerOptionalParams
  ): Promise<UpdateCertificateIssuerResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, issuerName, options },
      updateCertificateIssuerOperationSpec
    );
  }

  /**
   * The GetCertificateIssuer operation returns the specified certificate issuer resources in the
   * specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param issuerName The name of the issuer.
   * @param options The options parameters.
   */
  getCertificateIssuer(
    vaultBaseUrl: string,
    issuerName: string,
    options?: GetCertificateIssuerOptionalParams
  ): Promise<GetCertificateIssuerResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, issuerName, options },
      getCertificateIssuerOperationSpec
    );
  }

  /**
   * The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the
   * vault. This operation requires the certificates/manageissuers/deleteissuers permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param issuerName The name of the issuer.
   * @param options The options parameters.
   */
  deleteCertificateIssuer(
    vaultBaseUrl: string,
    issuerName: string,
    options?: DeleteCertificateIssuerOptionalParams
  ): Promise<DeleteCertificateIssuerResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, issuerName, options },
      deleteCertificateIssuerOperationSpec
    );
  }

  /**
   * If this is the first version, the certificate resource is created. This operation requires the
   * certificates/create permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param options The options parameters.
   */
  createCertificate(
    vaultBaseUrl: string,
    certificateName: string,
    options?: CreateCertificateOptionalParams
  ): Promise<CreateCertificateResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, options },
      createCertificateOperationSpec
    );
  }

  /**
   * Imports an existing valid certificate, containing a private key, into Azure Key Vault. This
   * operation requires the certificates/import permission. The certificate to be imported can be in
   * either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as
   * well as x509 certificates. Key Vault will only accept a key in PKCS#8 format.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param base64EncodedCertificate Base64 encoded representation of the certificate object to import.
   *                                 This certificate needs to contain the private key.
   * @param options The options parameters.
   */
  importCertificate(
    vaultBaseUrl: string,
    certificateName: string,
    base64EncodedCertificate: string,
    options?: ImportCertificateOptionalParams
  ): Promise<ImportCertificateResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, base64EncodedCertificate, options },
      importCertificateOperationSpec
    );
  }

  /**
   * The GetCertificateVersions operation returns the versions of a certificate in the specified key
   * vault. This operation requires the certificates/list permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param options The options parameters.
   */
  getCertificateVersions(
    vaultBaseUrl: string,
    certificateName: string,
    options?: GetCertificateVersionsOptionalParams
  ): Promise<GetCertificateVersionsResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, options },
      getCertificateVersionsOperationSpec
    );
  }

  /**
   * The GetCertificatePolicy operation returns the specified certificate policy resources in the
   * specified key vault. This operation requires the certificates/get permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate in a given key vault.
   * @param options The options parameters.
   */
  getCertificatePolicy(
    vaultBaseUrl: string,
    certificateName: string,
    options?: GetCertificatePolicyOptionalParams
  ): Promise<GetCertificatePolicyResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, options },
      getCertificatePolicyOperationSpec
    );
  }

  /**
   * Set specified members in the certificate policy. Leave others as null. This operation requires the
   * certificates/update permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate in the given vault.
   * @param certificatePolicy The policy for the certificate.
   * @param options The options parameters.
   */
  updateCertificatePolicy(
    vaultBaseUrl: string,
    certificateName: string,
    certificatePolicy: CertificatePolicy,
    options?: UpdateCertificatePolicyOptionalParams
  ): Promise<UpdateCertificatePolicyResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, certificatePolicy, options },
      updateCertificatePolicyOperationSpec
    );
  }

  /**
   * The UpdateCertificate operation applies the specified update on the given certificate; the only
   * elements updated are the certificate's attributes. This operation requires the certificates/update
   * permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate in the given key vault.
   * @param certificateVersion The version of the certificate.
   * @param options The options parameters.
   */
  updateCertificate(
    vaultBaseUrl: string,
    certificateName: string,
    certificateVersion: string,
    options?: UpdateCertificateOptionalParams
  ): Promise<UpdateCertificateResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, certificateVersion, options },
      updateCertificateOperationSpec
    );
  }

  /**
   * Gets information about a specific certificate. This operation requires the certificates/get
   * permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate in the given vault.
   * @param certificateVersion The version of the certificate. This URI fragment is optional. If not
   *                           specified, the latest version of the certificate is returned.
   * @param options The options parameters.
   */
  getCertificate(
    vaultBaseUrl: string,
    certificateName: string,
    certificateVersion: string,
    options?: GetCertificateOptionalParams
  ): Promise<GetCertificateResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, certificateVersion, options },
      getCertificateOperationSpec
    );
  }

  /**
   * Updates a certificate creation operation that is already in progress. This operation requires the
   * certificates/update permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param cancellationRequested Indicates if cancellation was requested on the certificate operation.
   * @param options The options parameters.
   */
  updateCertificateOperation(
    vaultBaseUrl: string,
    certificateName: string,
    cancellationRequested: boolean,
    options?: UpdateCertificateOperationOptionalParams
  ): Promise<UpdateCertificateOperationResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, cancellationRequested, options },
      updateCertificateOperationOperationSpec
    );
  }

  /**
   * Gets the creation operation associated with a specified certificate. This operation requires the
   * certificates/get permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param options The options parameters.
   */
  getCertificateOperation(
    vaultBaseUrl: string,
    certificateName: string,
    options?: GetCertificateOperationOptionalParams
  ): Promise<GetCertificateOperationResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, options },
      getCertificateOperationOperationSpec
    );
  }

  /**
   * Deletes the creation operation for a specified certificate that is in the process of being created.
   * The certificate is no longer created. This operation requires the certificates/update permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param options The options parameters.
   */
  deleteCertificateOperation(
    vaultBaseUrl: string,
    certificateName: string,
    options?: DeleteCertificateOperationOptionalParams
  ): Promise<DeleteCertificateOperationResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, options },
      deleteCertificateOperationOperationSpec
    );
  }

  /**
   * The MergeCertificate operation performs the merging of a certificate or certificate chain with a key
   * pair currently available in the service. This operation requires the certificates/create permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param x509Certificates The certificate or the certificate chain to merge.
   * @param options The options parameters.
   */
  mergeCertificate(
    vaultBaseUrl: string,
    certificateName: string,
    x509Certificates: Uint8Array[],
    options?: MergeCertificateOptionalParams
  ): Promise<MergeCertificateResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, x509Certificates, options },
      mergeCertificateOperationSpec
    );
  }

  /**
   * Requests that a backup of the specified certificate be downloaded to the client. All versions of the
   * certificate will be downloaded. This operation requires the certificates/backup permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param options The options parameters.
   */
  backupCertificate(
    vaultBaseUrl: string,
    certificateName: string,
    options?: BackupCertificateOptionalParams
  ): Promise<BackupCertificateResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, options },
      backupCertificateOperationSpec
    );
  }

  /**
   * Restores a backed up certificate, and all its versions, to a vault. This operation requires the
   * certificates/restore permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateBundleBackup The backup blob associated with a certificate bundle.
   * @param options The options parameters.
   */
  restoreCertificate(
    vaultBaseUrl: string,
    certificateBundleBackup: Uint8Array,
    options?: RestoreCertificateOptionalParams
  ): Promise<RestoreCertificateResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateBundleBackup, options },
      restoreCertificateOperationSpec
    );
  }

  /**
   * The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a
   * deleted state and ready for recovery or purging. This operation includes deletion-specific
   * information. This operation requires the certificates/get/list permission. This operation can only
   * be enabled on soft-delete enabled vaults.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The options parameters.
   */
  getDeletedCertificates(
    vaultBaseUrl: string,
    options?: GetDeletedCertificatesOptionalParams
  ): Promise<GetDeletedCertificatesResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, options },
      getDeletedCertificatesOperationSpec
    );
  }

  /**
   * The GetDeletedCertificate operation retrieves the deleted certificate information plus its
   * attributes, such as retention interval, scheduled permanent deletion and the current deletion
   * recovery level. This operation requires the certificates/get permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate
   * @param options The options parameters.
   */
  getDeletedCertificate(
    vaultBaseUrl: string,
    certificateName: string,
    options?: GetDeletedCertificateOptionalParams
  ): Promise<GetDeletedCertificateResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, options },
      getDeletedCertificateOperationSpec
    );
  }

  /**
   * The PurgeDeletedCertificate operation performs an irreversible deletion of the specified
   * certificate, without possibility for recovery. The operation is not available if the recovery level
   * does not specify 'Purgeable'. This operation requires the certificate/purge permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate
   * @param options The options parameters.
   */
  purgeDeletedCertificate(
    vaultBaseUrl: string,
    certificateName: string,
    options?: PurgeDeletedCertificateOptionalParams
  ): Promise<void> {
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, options },
      purgeDeletedCertificateOperationSpec
    );
  }

  /**
   * The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The operation
   * is applicable in vaults enabled for soft-delete, and must be issued during the retention interval
   * (available in the deleted certificate's attributes). This operation requires the
   * certificates/recover permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the deleted certificate
   * @param options The options parameters.
   */
  recoverDeletedCertificate(
    vaultBaseUrl: string,
    certificateName: string,
    options?: RecoverDeletedCertificateOptionalParams
  ): Promise<RecoverDeletedCertificateResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, options },
      recoverDeletedCertificateOperationSpec
    );
  }

  /**
   * GetCertificatesNext
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param nextLink The nextLink from the previous successful call to the GetCertificates method.
   * @param options The options parameters.
   */
  getCertificatesNext(
    vaultBaseUrl: string,
    nextLink: string,
    options?: GetCertificatesNextOptionalParams
  ): Promise<GetCertificatesNextResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, nextLink, options },
      getCertificatesNextOperationSpec
    );
  }

  /**
   * GetCertificateIssuersNext
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param nextLink The nextLink from the previous successful call to the GetCertificateIssuers method.
   * @param options The options parameters.
   */
  getCertificateIssuersNext(
    vaultBaseUrl: string,
    nextLink: string,
    options?: GetCertificateIssuersNextOptionalParams
  ): Promise<GetCertificateIssuersNextResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, nextLink, options },
      getCertificateIssuersNextOperationSpec
    );
  }

  /**
   * GetCertificateVersionsNext
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param nextLink The nextLink from the previous successful call to the GetCertificateVersions method.
   * @param options The options parameters.
   */
  getCertificateVersionsNext(
    vaultBaseUrl: string,
    certificateName: string,
    nextLink: string,
    options?: GetCertificateVersionsNextOptionalParams
  ): Promise<GetCertificateVersionsNextResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, nextLink, options },
      getCertificateVersionsNextOperationSpec
    );
  }

  /**
   * GetDeletedCertificatesNext
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param nextLink The nextLink from the previous successful call to the GetDeletedCertificates method.
   * @param options The options parameters.
   */
  getDeletedCertificatesNext(
    vaultBaseUrl: string,
    nextLink: string,
    options?: GetDeletedCertificatesNextOptionalParams
  ): Promise<GetDeletedCertificatesNextResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, nextLink, options },
      getDeletedCertificatesNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getCertificatesOperationSpec: coreClient.OperationSpec = {
  path: "/certificates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [
    Parameters.maxresults,
    Parameters.includePending,
    Parameters.apiVersion
  ],
  urlParameters: [Parameters.vaultBaseUrl],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteCertificateOperationSpec: coreClient.OperationSpec = {
  path: "/certificates/{certificate-name}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedCertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  headerParameters: [Parameters.accept],
  serializer
};
const setCertificateContactsOperationSpec: coreClient.OperationSpec = {
  path: "/certificates/contacts",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Contacts
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.contacts,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getCertificateContactsOperationSpec: coreClient.OperationSpec = {
  path: "/certificates/contacts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Contacts
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteCertificateContactsOperationSpec: coreClient.OperationSpec = {
  path: "/certificates/contacts",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.Contacts
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl],
  headerParameters: [Parameters.accept],
  serializer
};
const getCertificateIssuersOperationSpec: coreClient.OperationSpec = {
  path: "/certificates/issuers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateIssuerListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.maxresults, Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl],
  headerParameters: [Parameters.accept],
  serializer
};
const setCertificateIssuerOperationSpec: coreClient.OperationSpec = {
  path: "/certificates/issuers/{issuer-name}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.IssuerBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: {
    parameterPath: {
      provider: ["provider"],
      credentials: ["options", "credentials"],
      organizationDetails: ["options", "organizationDetails"],
      attributes: ["options", "attributes"]
    },
    mapper: { ...Mappers.CertificateIssuerSetParameters, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateCertificateIssuerOperationSpec: coreClient.OperationSpec = {
  path: "/certificates/issuers/{issuer-name}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.IssuerBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: {
    parameterPath: {
      provider: ["options", "provider"],
      credentials: ["options", "credentials"],
      organizationDetails: ["options", "organizationDetails"],
      attributes: ["options", "attributes"]
    },
    mapper: { ...Mappers.CertificateIssuerUpdateParameters, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getCertificateIssuerOperationSpec: coreClient.OperationSpec = {
  path: "/certificates/issuers/{issuer-name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IssuerBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteCertificateIssuerOperationSpec: coreClient.OperationSpec = {
  path: "/certificates/issuers/{issuer-name}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.IssuerBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],
  headerParameters: [Parameters.accept],
  serializer
};
const createCertificateOperationSpec: coreClient.OperationSpec = {
  path: "/certificates/{certificate-name}/create",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.CertificateOperation
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: {
    parameterPath: {
      certificatePolicy: ["options", "certificatePolicy"],
      certificateAttributes: ["options", "certificateAttributes"],
      tags: ["options", "tags"]
    },
    mapper: { ...Mappers.CertificateCreateParameters, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName1],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const importCertificateOperationSpec: coreClient.OperationSpec = {
  path: "/certificates/{certificate-name}/import",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: {
    parameterPath: {
      base64EncodedCertificate: ["base64EncodedCertificate"],
      password: ["options", "password"],
      certificatePolicy: ["options", "certificatePolicy"],
      certificateAttributes: ["options", "certificateAttributes"],
      tags: ["options", "tags"]
    },
    mapper: { ...Mappers.CertificateImportParameters, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName1],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getCertificateVersionsOperationSpec: coreClient.OperationSpec = {
  path: "/certificates/{certificate-name}/versions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.maxresults, Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  headerParameters: [Parameters.accept],
  serializer
};
const getCertificatePolicyOperationSpec: coreClient.OperationSpec = {
  path: "/certificates/{certificate-name}/policy",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificatePolicy
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  headerParameters: [Parameters.accept],
  serializer
};
const updateCertificatePolicyOperationSpec: coreClient.OperationSpec = {
  path: "/certificates/{certificate-name}/policy",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.CertificatePolicy
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.certificatePolicy2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateCertificateOperationSpec: coreClient.OperationSpec = {
  path: "/certificates/{certificate-name}/{certificate-version}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: {
    parameterPath: {
      certificatePolicy: ["options", "certificatePolicy"],
      certificateAttributes: ["options", "certificateAttributes"],
      tags: ["options", "tags"]
    },
    mapper: { ...Mappers.CertificateUpdateParameters, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.certificateName,
    Parameters.certificateVersion
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getCertificateOperationSpec: coreClient.OperationSpec = {
  path: "/certificates/{certificate-name}/{certificate-version}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.certificateName,
    Parameters.certificateVersion
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateCertificateOperationOperationSpec: coreClient.OperationSpec = {
  path: "/certificates/{certificate-name}/pending",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateOperation
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: {
    parameterPath: { cancellationRequested: ["cancellationRequested"] },
    mapper: { ...Mappers.CertificateOperationUpdateParameter, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getCertificateOperationOperationSpec: coreClient.OperationSpec = {
  path: "/certificates/{certificate-name}/pending",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateOperation
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteCertificateOperationOperationSpec: coreClient.OperationSpec = {
  path: "/certificates/{certificate-name}/pending",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateOperation
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  headerParameters: [Parameters.accept],
  serializer
};
const mergeCertificateOperationSpec: coreClient.OperationSpec = {
  path: "/certificates/{certificate-name}/pending/merge",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.CertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: {
    parameterPath: {
      x509Certificates: ["x509Certificates"],
      certificateAttributes: ["options", "certificateAttributes"],
      tags: ["options", "tags"]
    },
    mapper: { ...Mappers.CertificateMergeParameters, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const backupCertificateOperationSpec: coreClient.OperationSpec = {
  path: "/certificates/{certificate-name}/backup",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BackupCertificateResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  headerParameters: [Parameters.accept],
  serializer
};
const restoreCertificateOperationSpec: coreClient.OperationSpec = {
  path: "/certificates/restore",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: {
    parameterPath: { certificateBundleBackup: ["certificateBundleBackup"] },
    mapper: { ...Mappers.CertificateRestoreParameters, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getDeletedCertificatesOperationSpec: coreClient.OperationSpec = {
  path: "/deletedcertificates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedCertificateListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [
    Parameters.maxresults,
    Parameters.includePending,
    Parameters.apiVersion
  ],
  urlParameters: [Parameters.vaultBaseUrl],
  headerParameters: [Parameters.accept],
  serializer
};
const getDeletedCertificateOperationSpec: coreClient.OperationSpec = {
  path: "/deletedcertificates/{certificate-name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedCertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  headerParameters: [Parameters.accept],
  serializer
};
const purgeDeletedCertificateOperationSpec: coreClient.OperationSpec = {
  path: "/deletedcertificates/{certificate-name}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  headerParameters: [Parameters.accept],
  serializer
};
const recoverDeletedCertificateOperationSpec: coreClient.OperationSpec = {
  path: "/deletedcertificates/{certificate-name}/recover",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  headerParameters: [Parameters.accept],
  serializer
};
const getCertificatesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [
    Parameters.maxresults,
    Parameters.includePending,
    Parameters.apiVersion
  ],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getCertificateIssuersNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateIssuerListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.maxresults, Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getCertificateVersionsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.maxresults, Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.certificateName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getDeletedCertificatesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedCertificateListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [
    Parameters.maxresults,
    Parameters.includePending,
    Parameters.apiVersion
  ],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
