/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Parameters from "./models/parameters";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { KeyVaultClientContext } from "./keyVaultClientContext";
import {
  KeyVaultClientOptionalParams,
  KeyVaultClientGetCertificatesOptionalParams,
  KeyVaultClientGetCertificatesResponse,
  KeyVaultClientDeleteCertificateResponse,
  Contacts,
  KeyVaultClientSetCertificateContactsResponse,
  KeyVaultClientGetCertificateContactsResponse,
  KeyVaultClientDeleteCertificateContactsResponse,
  KeyVaultClientGetCertificateIssuersOptionalParams,
  KeyVaultClientGetCertificateIssuersResponse,
  CertificateIssuerSetParameters,
  KeyVaultClientSetCertificateIssuerResponse,
  CertificateIssuerUpdateParameters,
  KeyVaultClientUpdateCertificateIssuerResponse,
  KeyVaultClientGetCertificateIssuerResponse,
  KeyVaultClientDeleteCertificateIssuerResponse,
  CertificateCreateParameters,
  KeyVaultClientCreateCertificateResponse,
  CertificateImportParameters,
  KeyVaultClientImportCertificateResponse,
  KeyVaultClientGetCertificateVersionsOptionalParams,
  KeyVaultClientGetCertificateVersionsResponse,
  KeyVaultClientGetCertificatePolicyResponse,
  CertificatePolicy,
  KeyVaultClientUpdateCertificatePolicyResponse,
  CertificateUpdateParameters,
  KeyVaultClientUpdateCertificateResponse,
  KeyVaultClientGetCertificateResponse,
  CertificateOperationUpdateParameter,
  KeyVaultClientUpdateCertificateOperationResponse,
  KeyVaultClientGetCertificateOperationResponse,
  KeyVaultClientDeleteCertificateOperationResponse,
  CertificateMergeParameters,
  KeyVaultClientMergeCertificateResponse,
  KeyVaultClientBackupCertificateResponse,
  CertificateRestoreParameters,
  KeyVaultClientRestoreCertificateResponse,
  KeyVaultClientGetDeletedCertificatesOptionalParams,
  KeyVaultClientGetDeletedCertificatesResponse,
  KeyVaultClientGetDeletedCertificateResponse,
  KeyVaultClientRecoverDeletedCertificateResponse,
  KeyVaultClientGetCertificatesNextOptionalParams,
  KeyVaultClientGetCertificatesNextResponse,
  KeyVaultClientGetCertificateIssuersNextOptionalParams,
  KeyVaultClientGetCertificateIssuersNextResponse,
  KeyVaultClientGetCertificateVersionsNextOptionalParams,
  KeyVaultClientGetCertificateVersionsNextResponse,
  KeyVaultClientGetDeletedCertificatesNextOptionalParams,
  KeyVaultClientGetDeletedCertificatesNextResponse
} from "./models";

class KeyVaultClient extends KeyVaultClientContext {
  /**
   * Initializes a new instance of the KeyVaultClient class.
   * @param options The parameter options
   */
  constructor(options?: KeyVaultClientOptionalParams) {
    super(options);
  }

  /**
   * The GetCertificates operation returns the set of certificates resources in the specified key vault.
   * This operation requires the certificates/list permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The options parameters.
   */
  getCertificates(
    vaultBaseUrl: string,
    options?: KeyVaultClientGetCertificatesOptionalParams
  ): Promise<KeyVaultClientGetCertificatesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, options: operationOptions },
      getCertificatesOperationSpec
    ) as Promise<KeyVaultClientGetCertificatesResponse>;
  }

  /**
   * Deletes all versions of a certificate object along with its associated policy. Delete certificate
   * cannot be used to remove individual versions of a certificate object. This operation requires the
   * certificates/delete permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param options The options parameters.
   */
  deleteCertificate(
    vaultBaseUrl: string,
    certificateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientDeleteCertificateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, options: operationOptions },
      deleteCertificateOperationSpec
    ) as Promise<KeyVaultClientDeleteCertificateResponse>;
  }

  /**
   * Sets the certificate contacts for the specified key vault. This operation requires the
   * certificates/managecontacts permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param contacts The contacts for the key vault certificate.
   * @param options The options parameters.
   */
  setCertificateContacts(
    vaultBaseUrl: string,
    contacts: Contacts,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientSetCertificateContactsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, contacts, options: operationOptions },
      setCertificateContactsOperationSpec
    ) as Promise<KeyVaultClientSetCertificateContactsResponse>;
  }

  /**
   * The GetCertificateContacts operation returns the set of certificate contact resources in the
   * specified key vault. This operation requires the certificates/managecontacts permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The options parameters.
   */
  getCertificateContacts(
    vaultBaseUrl: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientGetCertificateContactsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, options: operationOptions },
      getCertificateContactsOperationSpec
    ) as Promise<KeyVaultClientGetCertificateContactsResponse>;
  }

  /**
   * Deletes the certificate contacts for a specified key vault certificate. This operation requires the
   * certificates/managecontacts permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The options parameters.
   */
  deleteCertificateContacts(
    vaultBaseUrl: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientDeleteCertificateContactsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, options: operationOptions },
      deleteCertificateContactsOperationSpec
    ) as Promise<KeyVaultClientDeleteCertificateContactsResponse>;
  }

  /**
   * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified
   * key vault. This operation requires the certificates/manageissuers/getissuers permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The options parameters.
   */
  getCertificateIssuers(
    vaultBaseUrl: string,
    options?: KeyVaultClientGetCertificateIssuersOptionalParams
  ): Promise<KeyVaultClientGetCertificateIssuersResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, options: operationOptions },
      getCertificateIssuersOperationSpec
    ) as Promise<KeyVaultClientGetCertificateIssuersResponse>;
  }

  /**
   * The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation
   * requires the certificates/setissuers permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param issuerName The name of the issuer.
   * @param parameter Certificate issuer set parameter.
   * @param options The options parameters.
   */
  setCertificateIssuer(
    vaultBaseUrl: string,
    issuerName: string,
    parameter: CertificateIssuerSetParameters,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientSetCertificateIssuerResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, issuerName, parameter, options: operationOptions },
      setCertificateIssuerOperationSpec
    ) as Promise<KeyVaultClientSetCertificateIssuerResponse>;
  }

  /**
   * The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity.
   * This operation requires the certificates/setissuers permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param issuerName The name of the issuer.
   * @param parameter Certificate issuer update parameter.
   * @param options The options parameters.
   */
  updateCertificateIssuer(
    vaultBaseUrl: string,
    issuerName: string,
    parameter: CertificateIssuerUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientUpdateCertificateIssuerResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, issuerName, parameter, options: operationOptions },
      updateCertificateIssuerOperationSpec
    ) as Promise<KeyVaultClientUpdateCertificateIssuerResponse>;
  }

  /**
   * The GetCertificateIssuer operation returns the specified certificate issuer resources in the
   * specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param issuerName The name of the issuer.
   * @param options The options parameters.
   */
  getCertificateIssuer(
    vaultBaseUrl: string,
    issuerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientGetCertificateIssuerResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, issuerName, options: operationOptions },
      getCertificateIssuerOperationSpec
    ) as Promise<KeyVaultClientGetCertificateIssuerResponse>;
  }

  /**
   * The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the
   * vault. This operation requires the certificates/manageissuers/deleteissuers permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param issuerName The name of the issuer.
   * @param options The options parameters.
   */
  deleteCertificateIssuer(
    vaultBaseUrl: string,
    issuerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientDeleteCertificateIssuerResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, issuerName, options: operationOptions },
      deleteCertificateIssuerOperationSpec
    ) as Promise<KeyVaultClientDeleteCertificateIssuerResponse>;
  }

  /**
   * If this is the first version, the certificate resource is created. This operation requires the
   * certificates/create permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param parameters The parameters to create a certificate.
   * @param options The options parameters.
   */
  createCertificate(
    vaultBaseUrl: string,
    certificateName: string,
    parameters: CertificateCreateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientCreateCertificateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, parameters, options: operationOptions },
      createCertificateOperationSpec
    ) as Promise<KeyVaultClientCreateCertificateResponse>;
  }

  /**
   * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The
   * certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format
   * the PEM file must contain the key as well as x509 certificates. This operation requires the
   * certificates/import permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param parameters The parameters to import the certificate.
   * @param options The options parameters.
   */
  importCertificate(
    vaultBaseUrl: string,
    certificateName: string,
    parameters: CertificateImportParameters,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientImportCertificateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, parameters, options: operationOptions },
      importCertificateOperationSpec
    ) as Promise<KeyVaultClientImportCertificateResponse>;
  }

  /**
   * The GetCertificateVersions operation returns the versions of a certificate in the specified key
   * vault. This operation requires the certificates/list permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param options The options parameters.
   */
  getCertificateVersions(
    vaultBaseUrl: string,
    certificateName: string,
    options?: KeyVaultClientGetCertificateVersionsOptionalParams
  ): Promise<KeyVaultClientGetCertificateVersionsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, options: operationOptions },
      getCertificateVersionsOperationSpec
    ) as Promise<KeyVaultClientGetCertificateVersionsResponse>;
  }

  /**
   * The GetCertificatePolicy operation returns the specified certificate policy resources in the
   * specified key vault. This operation requires the certificates/get permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate in a given key vault.
   * @param options The options parameters.
   */
  getCertificatePolicy(
    vaultBaseUrl: string,
    certificateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientGetCertificatePolicyResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, options: operationOptions },
      getCertificatePolicyOperationSpec
    ) as Promise<KeyVaultClientGetCertificatePolicyResponse>;
  }

  /**
   * Set specified members in the certificate policy. Leave others as null. This operation requires the
   * certificates/update permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate in the given vault.
   * @param certificatePolicy The policy for the certificate.
   * @param options The options parameters.
   */
  updateCertificatePolicy(
    vaultBaseUrl: string,
    certificateName: string,
    certificatePolicy: CertificatePolicy,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientUpdateCertificatePolicyResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        certificateName,
        certificatePolicy,
        options: operationOptions
      },
      updateCertificatePolicyOperationSpec
    ) as Promise<KeyVaultClientUpdateCertificatePolicyResponse>;
  }

  /**
   * The UpdateCertificate operation applies the specified update on the given certificate; the only
   * elements updated are the certificate's attributes. This operation requires the certificates/update
   * permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate in the given key vault.
   * @param certificateVersion The version of the certificate.
   * @param parameters The parameters for certificate update.
   * @param options The options parameters.
   */
  updateCertificate(
    vaultBaseUrl: string,
    certificateName: string,
    certificateVersion: string,
    parameters: CertificateUpdateParameters,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientUpdateCertificateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        certificateName,
        certificateVersion,
        parameters,
        options: operationOptions
      },
      updateCertificateOperationSpec
    ) as Promise<KeyVaultClientUpdateCertificateResponse>;
  }

  /**
   * Gets information about a specific certificate. This operation requires the certificates/get
   * permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate in the given vault.
   * @param certificateVersion The version of the certificate. This URI fragment is optional. If not
   *                           specified, the latest version of the certificate is returned.
   * @param options The options parameters.
   */
  getCertificate(
    vaultBaseUrl: string,
    certificateName: string,
    certificateVersion: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientGetCertificateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        certificateName,
        certificateVersion,
        options: operationOptions
      },
      getCertificateOperationSpec
    ) as Promise<KeyVaultClientGetCertificateResponse>;
  }

  /**
   * Updates a certificate creation operation that is already in progress. This operation requires the
   * certificates/update permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param certificateOperation The certificate operation response.
   * @param options The options parameters.
   */
  updateCertificateOperation(
    vaultBaseUrl: string,
    certificateName: string,
    certificateOperation: CertificateOperationUpdateParameter,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientUpdateCertificateOperationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        certificateName,
        certificateOperation,
        options: operationOptions
      },
      updateCertificateOperationOperationSpec
    ) as Promise<KeyVaultClientUpdateCertificateOperationResponse>;
  }

  /**
   * Gets the creation operation associated with a specified certificate. This operation requires the
   * certificates/get permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param options The options parameters.
   */
  getCertificateOperation(
    vaultBaseUrl: string,
    certificateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientGetCertificateOperationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, options: operationOptions },
      getCertificateOperationOperationSpec
    ) as Promise<KeyVaultClientGetCertificateOperationResponse>;
  }

  /**
   * Deletes the creation operation for a specified certificate that is in the process of being created.
   * The certificate is no longer created. This operation requires the certificates/update permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param options The options parameters.
   */
  deleteCertificateOperation(
    vaultBaseUrl: string,
    certificateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientDeleteCertificateOperationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, options: operationOptions },
      deleteCertificateOperationOperationSpec
    ) as Promise<KeyVaultClientDeleteCertificateOperationResponse>;
  }

  /**
   * The MergeCertificate operation performs the merging of a certificate or certificate chain with a key
   * pair currently available in the service. This operation requires the certificates/create permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param parameters The parameters to merge certificate.
   * @param options The options parameters.
   */
  mergeCertificate(
    vaultBaseUrl: string,
    certificateName: string,
    parameters: CertificateMergeParameters,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientMergeCertificateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, parameters, options: operationOptions },
      mergeCertificateOperationSpec
    ) as Promise<KeyVaultClientMergeCertificateResponse>;
  }

  /**
   * Requests that a backup of the specified certificate be downloaded to the client. All versions of the
   * certificate will be downloaded. This operation requires the certificates/backup permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param options The options parameters.
   */
  backupCertificate(
    vaultBaseUrl: string,
    certificateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientBackupCertificateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, options: operationOptions },
      backupCertificateOperationSpec
    ) as Promise<KeyVaultClientBackupCertificateResponse>;
  }

  /**
   * Restores a backed up certificate, and all its versions, to a vault. This operation requires the
   * certificates/restore permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param parameters The parameters to restore the certificate.
   * @param options The options parameters.
   */
  restoreCertificate(
    vaultBaseUrl: string,
    parameters: CertificateRestoreParameters,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientRestoreCertificateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, parameters, options: operationOptions },
      restoreCertificateOperationSpec
    ) as Promise<KeyVaultClientRestoreCertificateResponse>;
  }

  /**
   * The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a
   * deleted state and ready for recovery or purging. This operation includes deletion-specific
   * information. This operation requires the certificates/get/list permission. This operation can only
   * be enabled on soft-delete enabled vaults.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The options parameters.
   */
  getDeletedCertificates(
    vaultBaseUrl: string,
    options?: KeyVaultClientGetDeletedCertificatesOptionalParams
  ): Promise<KeyVaultClientGetDeletedCertificatesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, options: operationOptions },
      getDeletedCertificatesOperationSpec
    ) as Promise<KeyVaultClientGetDeletedCertificatesResponse>;
  }

  /**
   * The GetDeletedCertificate operation retrieves the deleted certificate information plus its
   * attributes, such as retention interval, scheduled permanent deletion and the current deletion
   * recovery level. This operation requires the certificates/get permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate
   * @param options The options parameters.
   */
  getDeletedCertificate(
    vaultBaseUrl: string,
    certificateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientGetDeletedCertificateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, options: operationOptions },
      getDeletedCertificateOperationSpec
    ) as Promise<KeyVaultClientGetDeletedCertificateResponse>;
  }

  /**
   * The PurgeDeletedCertificate operation performs an irreversible deletion of the specified
   * certificate, without possibility for recovery. The operation is not available if the recovery level
   * does not specify 'Purgeable'. This operation requires the certificate/purge permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate
   * @param options The options parameters.
   */
  purgeDeletedCertificate(
    vaultBaseUrl: string,
    certificateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, options: operationOptions },
      purgeDeletedCertificateOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The operation
   * is applicable in vaults enabled for soft-delete, and must be issued during the retention interval
   * (available in the deleted certificate's attributes). This operation requires the
   * certificates/recover permission.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the deleted certificate
   * @param options The options parameters.
   */
  recoverDeletedCertificate(
    vaultBaseUrl: string,
    certificateName: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientRecoverDeletedCertificateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, options: operationOptions },
      recoverDeletedCertificateOperationSpec
    ) as Promise<KeyVaultClientRecoverDeletedCertificateResponse>;
  }

  /**
   * GetCertificatesNext
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param nextLink The nextLink from the previous successful call to the GetCertificates method.
   * @param options The options parameters.
   */
  getCertificatesNext(
    vaultBaseUrl: string,
    nextLink: string,
    options?: KeyVaultClientGetCertificatesNextOptionalParams
  ): Promise<KeyVaultClientGetCertificatesNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, nextLink, options: operationOptions },
      getCertificatesNextOperationSpec
    ) as Promise<KeyVaultClientGetCertificatesNextResponse>;
  }

  /**
   * GetCertificateIssuersNext
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param nextLink The nextLink from the previous successful call to the GetCertificateIssuers method.
   * @param options The options parameters.
   */
  getCertificateIssuersNext(
    vaultBaseUrl: string,
    nextLink: string,
    options?: KeyVaultClientGetCertificateIssuersNextOptionalParams
  ): Promise<KeyVaultClientGetCertificateIssuersNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, nextLink, options: operationOptions },
      getCertificateIssuersNextOperationSpec
    ) as Promise<KeyVaultClientGetCertificateIssuersNextResponse>;
  }

  /**
   * GetCertificateVersionsNext
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param nextLink The nextLink from the previous successful call to the GetCertificateVersions method.
   * @param options The options parameters.
   */
  getCertificateVersionsNext(
    vaultBaseUrl: string,
    certificateName: string,
    nextLink: string,
    options?: KeyVaultClientGetCertificateVersionsNextOptionalParams
  ): Promise<KeyVaultClientGetCertificateVersionsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, certificateName, nextLink, options: operationOptions },
      getCertificateVersionsNextOperationSpec
    ) as Promise<KeyVaultClientGetCertificateVersionsNextResponse>;
  }

  /**
   * GetDeletedCertificatesNext
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param nextLink The nextLink from the previous successful call to the GetDeletedCertificates method.
   * @param options The options parameters.
   */
  getDeletedCertificatesNext(
    vaultBaseUrl: string,
    nextLink: string,
    options?: KeyVaultClientGetDeletedCertificatesNextOptionalParams
  ): Promise<KeyVaultClientGetDeletedCertificatesNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, nextLink, options: operationOptions },
      getDeletedCertificatesNextOperationSpec
    ) as Promise<KeyVaultClientGetDeletedCertificatesNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getCertificatesOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [
    Parameters.maxresults,
    Parameters.includePending,
    Parameters.apiVersion
  ],
  urlParameters: [Parameters.vaultBaseUrl],
  serializer
};
const deleteCertificateOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/{certificate-name}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedCertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  serializer
};
const setCertificateContactsOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/contacts",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Contacts
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.contacts,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getCertificateContactsOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/contacts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Contacts
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl],
  serializer
};
const deleteCertificateContactsOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/contacts",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.Contacts
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl],
  serializer
};
const getCertificateIssuersOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/issuers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateIssuerListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.maxresults, Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl],
  serializer
};
const setCertificateIssuerOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/issuers/{issuer-name}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.IssuerBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameter,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateCertificateIssuerOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/issuers/{issuer-name}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.IssuerBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameter1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getCertificateIssuerOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/issuers/{issuer-name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IssuerBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],
  serializer
};
const deleteCertificateIssuerOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/issuers/{issuer-name}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.IssuerBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.issuerName],
  serializer
};
const createCertificateOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/{certificate-name}/create",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.CertificateOperation
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName1],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const importCertificateOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/{certificate-name}/import",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName1],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getCertificateVersionsOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/{certificate-name}/versions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.maxresults, Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  serializer
};
const getCertificatePolicyOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/{certificate-name}/policy",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificatePolicy
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  serializer
};
const updateCertificatePolicyOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/{certificate-name}/policy",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.CertificatePolicy
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.certificatePolicy,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateCertificateOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/{certificate-name}/{certificate-version}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.certificateName,
    Parameters.certificateVersion
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getCertificateOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/{certificate-name}/{certificate-version}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.certificateName,
    Parameters.certificateVersion
  ],
  serializer
};
const updateCertificateOperationOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/{certificate-name}/pending",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateOperation
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.certificateOperation,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getCertificateOperationOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/{certificate-name}/pending",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateOperation
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  serializer
};
const deleteCertificateOperationOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/{certificate-name}/pending",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateOperation
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  serializer
};
const mergeCertificateOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/{certificate-name}/pending/merge",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.CertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const backupCertificateOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/{certificate-name}/backup",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BackupCertificateResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  serializer
};
const restoreCertificateOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates/restore",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getDeletedCertificatesOperationSpec: coreHttp.OperationSpec = {
  path: "/deletedcertificates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedCertificateListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [
    Parameters.maxresults,
    Parameters.includePending,
    Parameters.apiVersion
  ],
  urlParameters: [Parameters.vaultBaseUrl],
  serializer
};
const getDeletedCertificateOperationSpec: coreHttp.OperationSpec = {
  path: "/deletedcertificates/{certificate-name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedCertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  serializer
};
const purgeDeletedCertificateOperationSpec: coreHttp.OperationSpec = {
  path: "/deletedcertificates/{certificate-name}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  serializer
};
const recoverDeletedCertificateOperationSpec: coreHttp.OperationSpec = {
  path: "/deletedcertificates/{certificate-name}/recover",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.certificateName],
  serializer
};
const getCertificatesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [
    Parameters.maxresults,
    Parameters.includePending,
    Parameters.apiVersion
  ],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.nextLink],
  serializer
};
const getCertificateIssuersNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateIssuerListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.maxresults, Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.nextLink],
  serializer
};
const getCertificateVersionsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.maxresults, Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.certificateName,
    Parameters.nextLink
  ],
  serializer
};
const getDeletedCertificatesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedCertificateListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [
    Parameters.maxresults,
    Parameters.includePending,
    Parameters.apiVersion
  ],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.nextLink],
  serializer
};

// Operation Specifications

export {
  KeyVaultClient,
  KeyVaultClientContext,
  Models as KeyVaultModels,
  Mappers as KeyVaultMappers
};
