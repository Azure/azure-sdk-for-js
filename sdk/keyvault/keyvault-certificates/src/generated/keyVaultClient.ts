/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { KeyVaultClientContext } from "./keyVaultClientContext";

class KeyVaultClient extends KeyVaultClientContext {
  /**
   * Initializes a new instance of the KeyVaultClient class.
   * @param apiVersion Client API version.
   * @param [options] The parameter options
   */
  constructor(apiVersion: string, options?: coreHttp.ServiceClientOptions) {
    super(apiVersion, options);
  }

  /**
   * The GetCertificates operation returns the set of certificates resources in the specified key
   * vault. This operation requires the certificates/list permission.
   * @summary List certificates in a specified key vault
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCertificatesResponse>
   */
  getCertificates(vaultBaseUrl: string, options?: Models.KeyVaultClientGetCertificatesOptionalParams): Promise<Models.GetCertificatesResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param callback The callback
   */
  getCertificates(vaultBaseUrl: string, callback: coreHttp.ServiceCallback<Models.CertificateListResult>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCertificates(vaultBaseUrl: string, options: Models.KeyVaultClientGetCertificatesOptionalParams, callback: coreHttp.ServiceCallback<Models.CertificateListResult>): void;
  getCertificates(vaultBaseUrl: string, options?: Models.KeyVaultClientGetCertificatesOptionalParams | coreHttp.ServiceCallback<Models.CertificateListResult>, callback?: coreHttp.ServiceCallback<Models.CertificateListResult>): Promise<Models.GetCertificatesResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        options
      },
      getCertificatesOperationSpec,
      callback) as Promise<Models.GetCertificatesResponse>;
  }

  /**
   * Deletes all versions of a certificate object along with its associated policy. Delete
   * certificate cannot be used to remove individual versions of a certificate object. This operation
   * requires the certificates/delete permission.
   * @summary Deletes a certificate from a specified key vault.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCertificateResponse>
   */
  deleteCertificate(vaultBaseUrl: string, certificateName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DeleteCertificateResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param callback The callback
   */
  deleteCertificate(vaultBaseUrl: string, certificateName: string, callback: coreHttp.ServiceCallback<Models.DeletedCertificateBundle>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCertificate(vaultBaseUrl: string, certificateName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.DeletedCertificateBundle>): void;
  deleteCertificate(vaultBaseUrl: string, certificateName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeletedCertificateBundle>, callback?: coreHttp.ServiceCallback<Models.DeletedCertificateBundle>): Promise<Models.DeleteCertificateResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        certificateName,
        options
      },
      deleteCertificateOperationSpec,
      callback) as Promise<Models.DeleteCertificateResponse>;
  }

  /**
   * Sets the certificate contacts for the specified key vault. This operation requires the
   * certificates/managecontacts permission.
   * @summary Sets the certificate contacts for the specified key vault.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param contacts The contacts for the key vault certificate.
   * @param [options] The optional parameters
   * @returns Promise<Models.SetCertificateContactsResponse>
   */
  setCertificateContacts(vaultBaseUrl: string, contacts: Models.Contacts, options?: coreHttp.RequestOptionsBase): Promise<Models.SetCertificateContactsResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param contacts The contacts for the key vault certificate.
   * @param callback The callback
   */
  setCertificateContacts(vaultBaseUrl: string, contacts: Models.Contacts, callback: coreHttp.ServiceCallback<Models.Contacts>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param contacts The contacts for the key vault certificate.
   * @param options The optional parameters
   * @param callback The callback
   */
  setCertificateContacts(vaultBaseUrl: string, contacts: Models.Contacts, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.Contacts>): void;
  setCertificateContacts(vaultBaseUrl: string, contacts: Models.Contacts, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.Contacts>, callback?: coreHttp.ServiceCallback<Models.Contacts>): Promise<Models.SetCertificateContactsResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        contacts,
        options
      },
      setCertificateContactsOperationSpec,
      callback) as Promise<Models.SetCertificateContactsResponse>;
  }

  /**
   * The GetCertificateContacts operation returns the set of certificate contact resources in the
   * specified key vault. This operation requires the certificates/managecontacts permission.
   * @summary Lists the certificate contacts for a specified key vault.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCertificateContactsResponse>
   */
  getCertificateContacts(vaultBaseUrl: string, options?: coreHttp.RequestOptionsBase): Promise<Models.GetCertificateContactsResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param callback The callback
   */
  getCertificateContacts(vaultBaseUrl: string, callback: coreHttp.ServiceCallback<Models.Contacts>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCertificateContacts(vaultBaseUrl: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.Contacts>): void;
  getCertificateContacts(vaultBaseUrl: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.Contacts>, callback?: coreHttp.ServiceCallback<Models.Contacts>): Promise<Models.GetCertificateContactsResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        options
      },
      getCertificateContactsOperationSpec,
      callback) as Promise<Models.GetCertificateContactsResponse>;
  }

  /**
   * Deletes the certificate contacts for a specified key vault certificate. This operation requires
   * the certificates/managecontacts permission.
   * @summary Deletes the certificate contacts for a specified key vault.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCertificateContactsResponse>
   */
  deleteCertificateContacts(vaultBaseUrl: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DeleteCertificateContactsResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param callback The callback
   */
  deleteCertificateContacts(vaultBaseUrl: string, callback: coreHttp.ServiceCallback<Models.Contacts>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCertificateContacts(vaultBaseUrl: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.Contacts>): void;
  deleteCertificateContacts(vaultBaseUrl: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.Contacts>, callback?: coreHttp.ServiceCallback<Models.Contacts>): Promise<Models.DeleteCertificateContactsResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        options
      },
      deleteCertificateContactsOperationSpec,
      callback) as Promise<Models.DeleteCertificateContactsResponse>;
  }

  /**
   * The GetCertificateIssuers operation returns the set of certificate issuer resources in the
   * specified key vault. This operation requires the certificates/manageissuers/getissuers
   * permission.
   * @summary List certificate issuers for a specified key vault.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCertificateIssuersResponse>
   */
  getCertificateIssuers(vaultBaseUrl: string, options?: Models.KeyVaultClientGetCertificateIssuersOptionalParams): Promise<Models.GetCertificateIssuersResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param callback The callback
   */
  getCertificateIssuers(vaultBaseUrl: string, callback: coreHttp.ServiceCallback<Models.CertificateIssuerListResult>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCertificateIssuers(vaultBaseUrl: string, options: Models.KeyVaultClientGetCertificateIssuersOptionalParams, callback: coreHttp.ServiceCallback<Models.CertificateIssuerListResult>): void;
  getCertificateIssuers(vaultBaseUrl: string, options?: Models.KeyVaultClientGetCertificateIssuersOptionalParams | coreHttp.ServiceCallback<Models.CertificateIssuerListResult>, callback?: coreHttp.ServiceCallback<Models.CertificateIssuerListResult>): Promise<Models.GetCertificateIssuersResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        options
      },
      getCertificateIssuersOperationSpec,
      callback) as Promise<Models.GetCertificateIssuersResponse>;
  }

  /**
   * The SetCertificateIssuer operation adds or updates the specified certificate issuer. This
   * operation requires the certificates/setissuers permission.
   * @summary Sets the specified certificate issuer.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param issuerName The name of the issuer.
   * @param provider The issuer provider.
   * @param [options] The optional parameters
   * @returns Promise<Models.SetCertificateIssuerResponse>
   */
  setCertificateIssuer(vaultBaseUrl: string, issuerName: string, provider: string, options?: Models.KeyVaultClientSetCertificateIssuerOptionalParams): Promise<Models.SetCertificateIssuerResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param issuerName The name of the issuer.
   * @param provider The issuer provider.
   * @param callback The callback
   */
  setCertificateIssuer(vaultBaseUrl: string, issuerName: string, provider: string, callback: coreHttp.ServiceCallback<Models.IssuerBundle>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param issuerName The name of the issuer.
   * @param provider The issuer provider.
   * @param options The optional parameters
   * @param callback The callback
   */
  setCertificateIssuer(vaultBaseUrl: string, issuerName: string, provider: string, options: Models.KeyVaultClientSetCertificateIssuerOptionalParams, callback: coreHttp.ServiceCallback<Models.IssuerBundle>): void;
  setCertificateIssuer(vaultBaseUrl: string, issuerName: string, provider: string, options?: Models.KeyVaultClientSetCertificateIssuerOptionalParams | coreHttp.ServiceCallback<Models.IssuerBundle>, callback?: coreHttp.ServiceCallback<Models.IssuerBundle>): Promise<Models.SetCertificateIssuerResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        issuerName,
        provider,
        options
      },
      setCertificateIssuerOperationSpec,
      callback) as Promise<Models.SetCertificateIssuerResponse>;
  }

  /**
   * The UpdateCertificateIssuer operation performs an update on the specified certificate issuer
   * entity. This operation requires the certificates/setissuers permission.
   * @summary Updates the specified certificate issuer.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param issuerName The name of the issuer.
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateCertificateIssuerResponse>
   */
  updateCertificateIssuer(vaultBaseUrl: string, issuerName: string, options?: Models.KeyVaultClientUpdateCertificateIssuerOptionalParams): Promise<Models.UpdateCertificateIssuerResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param issuerName The name of the issuer.
   * @param callback The callback
   */
  updateCertificateIssuer(vaultBaseUrl: string, issuerName: string, callback: coreHttp.ServiceCallback<Models.IssuerBundle>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param issuerName The name of the issuer.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateCertificateIssuer(vaultBaseUrl: string, issuerName: string, options: Models.KeyVaultClientUpdateCertificateIssuerOptionalParams, callback: coreHttp.ServiceCallback<Models.IssuerBundle>): void;
  updateCertificateIssuer(vaultBaseUrl: string, issuerName: string, options?: Models.KeyVaultClientUpdateCertificateIssuerOptionalParams | coreHttp.ServiceCallback<Models.IssuerBundle>, callback?: coreHttp.ServiceCallback<Models.IssuerBundle>): Promise<Models.UpdateCertificateIssuerResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        issuerName,
        options
      },
      updateCertificateIssuerOperationSpec,
      callback) as Promise<Models.UpdateCertificateIssuerResponse>;
  }

  /**
   * The GetCertificateIssuer operation returns the specified certificate issuer resources in the
   * specified key vault. This operation requires the certificates/manageissuers/getissuers
   * permission.
   * @summary Lists the specified certificate issuer.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param issuerName The name of the issuer.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCertificateIssuerResponse>
   */
  getCertificateIssuer(vaultBaseUrl: string, issuerName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.GetCertificateIssuerResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param issuerName The name of the issuer.
   * @param callback The callback
   */
  getCertificateIssuer(vaultBaseUrl: string, issuerName: string, callback: coreHttp.ServiceCallback<Models.IssuerBundle>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param issuerName The name of the issuer.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCertificateIssuer(vaultBaseUrl: string, issuerName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.IssuerBundle>): void;
  getCertificateIssuer(vaultBaseUrl: string, issuerName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.IssuerBundle>, callback?: coreHttp.ServiceCallback<Models.IssuerBundle>): Promise<Models.GetCertificateIssuerResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        issuerName,
        options
      },
      getCertificateIssuerOperationSpec,
      callback) as Promise<Models.GetCertificateIssuerResponse>;
  }

  /**
   * The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from
   * the vault. This operation requires the certificates/manageissuers/deleteissuers permission.
   * @summary Deletes the specified certificate issuer.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param issuerName The name of the issuer.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCertificateIssuerResponse>
   */
  deleteCertificateIssuer(vaultBaseUrl: string, issuerName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DeleteCertificateIssuerResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param issuerName The name of the issuer.
   * @param callback The callback
   */
  deleteCertificateIssuer(vaultBaseUrl: string, issuerName: string, callback: coreHttp.ServiceCallback<Models.IssuerBundle>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param issuerName The name of the issuer.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCertificateIssuer(vaultBaseUrl: string, issuerName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.IssuerBundle>): void;
  deleteCertificateIssuer(vaultBaseUrl: string, issuerName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.IssuerBundle>, callback?: coreHttp.ServiceCallback<Models.IssuerBundle>): Promise<Models.DeleteCertificateIssuerResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        issuerName,
        options
      },
      deleteCertificateIssuerOperationSpec,
      callback) as Promise<Models.DeleteCertificateIssuerResponse>;
  }

  /**
   * If this is the first version, the certificate resource is created. This operation requires the
   * certificates/create permission.
   * @summary Creates a new certificate.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateCertificateResponse>
   */
  createCertificate(vaultBaseUrl: string, certificateName: string, options?: Models.KeyVaultClientCreateCertificateOptionalParams): Promise<Models.CreateCertificateResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param callback The callback
   */
  createCertificate(vaultBaseUrl: string, certificateName: string, callback: coreHttp.ServiceCallback<Models.CertificateOperation>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param options The optional parameters
   * @param callback The callback
   */
  createCertificate(vaultBaseUrl: string, certificateName: string, options: Models.KeyVaultClientCreateCertificateOptionalParams, callback: coreHttp.ServiceCallback<Models.CertificateOperation>): void;
  createCertificate(vaultBaseUrl: string, certificateName: string, options?: Models.KeyVaultClientCreateCertificateOptionalParams | coreHttp.ServiceCallback<Models.CertificateOperation>, callback?: coreHttp.ServiceCallback<Models.CertificateOperation>): Promise<Models.CreateCertificateResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        certificateName,
        options
      },
      createCertificateOperationSpec,
      callback) as Promise<Models.CreateCertificateResponse>;
  }

  /**
   * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The
   * certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM
   * format the PEM file must contain the key as well as x509 certificates. This operation requires
   * the certificates/import permission.
   * @summary Imports a certificate into a specified key vault.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param base64EncodedCertificate Base64 encoded representation of the certificate object to
   * import. This certificate needs to contain the private key.
   * @param [options] The optional parameters
   * @returns Promise<Models.ImportCertificateResponse>
   */
  importCertificate(vaultBaseUrl: string, certificateName: string, base64EncodedCertificate: string, options?: Models.KeyVaultClientImportCertificateOptionalParams): Promise<Models.ImportCertificateResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param base64EncodedCertificate Base64 encoded representation of the certificate object to
   * import. This certificate needs to contain the private key.
   * @param callback The callback
   */
  importCertificate(vaultBaseUrl: string, certificateName: string, base64EncodedCertificate: string, callback: coreHttp.ServiceCallback<Models.CertificateBundle>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param base64EncodedCertificate Base64 encoded representation of the certificate object to
   * import. This certificate needs to contain the private key.
   * @param options The optional parameters
   * @param callback The callback
   */
  importCertificate(vaultBaseUrl: string, certificateName: string, base64EncodedCertificate: string, options: Models.KeyVaultClientImportCertificateOptionalParams, callback: coreHttp.ServiceCallback<Models.CertificateBundle>): void;
  importCertificate(vaultBaseUrl: string, certificateName: string, base64EncodedCertificate: string, options?: Models.KeyVaultClientImportCertificateOptionalParams | coreHttp.ServiceCallback<Models.CertificateBundle>, callback?: coreHttp.ServiceCallback<Models.CertificateBundle>): Promise<Models.ImportCertificateResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        certificateName,
        base64EncodedCertificate,
        options
      },
      importCertificateOperationSpec,
      callback) as Promise<Models.ImportCertificateResponse>;
  }

  /**
   * The GetCertificateVersions operation returns the versions of a certificate in the specified key
   * vault. This operation requires the certificates/list permission.
   * @summary List the versions of a certificate.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCertificateVersionsResponse>
   */
  getCertificateVersions(vaultBaseUrl: string, certificateName: string, options?: Models.KeyVaultClientGetCertificateVersionsOptionalParams): Promise<Models.GetCertificateVersionsResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param callback The callback
   */
  getCertificateVersions(vaultBaseUrl: string, certificateName: string, callback: coreHttp.ServiceCallback<Models.CertificateListResult>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCertificateVersions(vaultBaseUrl: string, certificateName: string, options: Models.KeyVaultClientGetCertificateVersionsOptionalParams, callback: coreHttp.ServiceCallback<Models.CertificateListResult>): void;
  getCertificateVersions(vaultBaseUrl: string, certificateName: string, options?: Models.KeyVaultClientGetCertificateVersionsOptionalParams | coreHttp.ServiceCallback<Models.CertificateListResult>, callback?: coreHttp.ServiceCallback<Models.CertificateListResult>): Promise<Models.GetCertificateVersionsResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        certificateName,
        options
      },
      getCertificateVersionsOperationSpec,
      callback) as Promise<Models.GetCertificateVersionsResponse>;
  }

  /**
   * The GetCertificatePolicy operation returns the specified certificate policy resources in the
   * specified key vault. This operation requires the certificates/get permission.
   * @summary Lists the policy for a certificate.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate in a given key vault.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCertificatePolicyResponse>
   */
  getCertificatePolicy(vaultBaseUrl: string, certificateName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.GetCertificatePolicyResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate in a given key vault.
   * @param callback The callback
   */
  getCertificatePolicy(vaultBaseUrl: string, certificateName: string, callback: coreHttp.ServiceCallback<Models.CertificatePolicy>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate in a given key vault.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCertificatePolicy(vaultBaseUrl: string, certificateName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.CertificatePolicy>): void;
  getCertificatePolicy(vaultBaseUrl: string, certificateName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificatePolicy>, callback?: coreHttp.ServiceCallback<Models.CertificatePolicy>): Promise<Models.GetCertificatePolicyResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        certificateName,
        options
      },
      getCertificatePolicyOperationSpec,
      callback) as Promise<Models.GetCertificatePolicyResponse>;
  }

  /**
   * Set specified members in the certificate policy. Leave others as null. This operation requires
   * the certificates/update permission.
   * @summary Updates the policy for a certificate.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate in the given vault.
   * @param certificatePolicy The policy for the certificate.
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateCertificatePolicyResponse>
   */
  updateCertificatePolicy(vaultBaseUrl: string, certificateName: string, certificatePolicy: Models.CertificatePolicy, options?: coreHttp.RequestOptionsBase): Promise<Models.UpdateCertificatePolicyResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate in the given vault.
   * @param certificatePolicy The policy for the certificate.
   * @param callback The callback
   */
  updateCertificatePolicy(vaultBaseUrl: string, certificateName: string, certificatePolicy: Models.CertificatePolicy, callback: coreHttp.ServiceCallback<Models.CertificatePolicy>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate in the given vault.
   * @param certificatePolicy The policy for the certificate.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateCertificatePolicy(vaultBaseUrl: string, certificateName: string, certificatePolicy: Models.CertificatePolicy, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.CertificatePolicy>): void;
  updateCertificatePolicy(vaultBaseUrl: string, certificateName: string, certificatePolicy: Models.CertificatePolicy, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificatePolicy>, callback?: coreHttp.ServiceCallback<Models.CertificatePolicy>): Promise<Models.UpdateCertificatePolicyResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        certificateName,
        certificatePolicy,
        options
      },
      updateCertificatePolicyOperationSpec,
      callback) as Promise<Models.UpdateCertificatePolicyResponse>;
  }

  /**
   * The UpdateCertificate operation applies the specified update on the given certificate; the only
   * elements updated are the certificate's attributes. This operation requires the
   * certificates/update permission.
   * @summary Updates the specified attributes associated with the given certificate.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate in the given key vault.
   * @param certificateVersion The version of the certificate.
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateCertificateResponse>
   */
  updateCertificate(vaultBaseUrl: string, certificateName: string, certificateVersion: string, options?: Models.KeyVaultClientUpdateCertificateOptionalParams): Promise<Models.UpdateCertificateResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate in the given key vault.
   * @param certificateVersion The version of the certificate.
   * @param callback The callback
   */
  updateCertificate(vaultBaseUrl: string, certificateName: string, certificateVersion: string, callback: coreHttp.ServiceCallback<Models.CertificateBundle>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate in the given key vault.
   * @param certificateVersion The version of the certificate.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateCertificate(vaultBaseUrl: string, certificateName: string, certificateVersion: string, options: Models.KeyVaultClientUpdateCertificateOptionalParams, callback: coreHttp.ServiceCallback<Models.CertificateBundle>): void;
  updateCertificate(vaultBaseUrl: string, certificateName: string, certificateVersion: string, options?: Models.KeyVaultClientUpdateCertificateOptionalParams | coreHttp.ServiceCallback<Models.CertificateBundle>, callback?: coreHttp.ServiceCallback<Models.CertificateBundle>): Promise<Models.UpdateCertificateResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        certificateName,
        certificateVersion,
        options
      },
      updateCertificateOperationSpec,
      callback) as Promise<Models.UpdateCertificateResponse>;
  }

  /**
   * Gets information about a specific certificate. This operation requires the certificates/get
   * permission.
   * @summary Gets information about a certificate.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate in the given vault.
   * @param certificateVersion The version of the certificate. This URI fragment is optional. If not
   * specified, the latest version of the certificate is returned.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCertificateResponse>
   */
  getCertificate(vaultBaseUrl: string, certificateName: string, certificateVersion: string, options?: coreHttp.RequestOptionsBase): Promise<Models.GetCertificateResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate in the given vault.
   * @param certificateVersion The version of the certificate. This URI fragment is optional. If not
   * specified, the latest version of the certificate is returned.
   * @param callback The callback
   */
  getCertificate(vaultBaseUrl: string, certificateName: string, certificateVersion: string, callback: coreHttp.ServiceCallback<Models.CertificateBundle>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate in the given vault.
   * @param certificateVersion The version of the certificate. This URI fragment is optional. If not
   * specified, the latest version of the certificate is returned.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCertificate(vaultBaseUrl: string, certificateName: string, certificateVersion: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.CertificateBundle>): void;
  getCertificate(vaultBaseUrl: string, certificateName: string, certificateVersion: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificateBundle>, callback?: coreHttp.ServiceCallback<Models.CertificateBundle>): Promise<Models.GetCertificateResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        certificateName,
        certificateVersion,
        options
      },
      getCertificateOperationSpec,
      callback) as Promise<Models.GetCertificateResponse>;
  }

  /**
   * Updates a certificate creation operation that is already in progress. This operation requires
   * the certificates/update permission.
   * @summary Updates a certificate operation.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param cancellationRequested Indicates if cancellation was requested on the certificate
   * operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateCertificateOperationResponse>
   */
  updateCertificateOperation(vaultBaseUrl: string, certificateName: string, cancellationRequested: boolean, options?: coreHttp.RequestOptionsBase): Promise<Models.UpdateCertificateOperationResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param cancellationRequested Indicates if cancellation was requested on the certificate
   * operation.
   * @param callback The callback
   */
  updateCertificateOperation(vaultBaseUrl: string, certificateName: string, cancellationRequested: boolean, callback: coreHttp.ServiceCallback<Models.CertificateOperation>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param cancellationRequested Indicates if cancellation was requested on the certificate
   * operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateCertificateOperation(vaultBaseUrl: string, certificateName: string, cancellationRequested: boolean, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.CertificateOperation>): void;
  updateCertificateOperation(vaultBaseUrl: string, certificateName: string, cancellationRequested: boolean, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificateOperation>, callback?: coreHttp.ServiceCallback<Models.CertificateOperation>): Promise<Models.UpdateCertificateOperationResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        certificateName,
        cancellationRequested,
        options
      },
      updateCertificateOperationOperationSpec,
      callback) as Promise<Models.UpdateCertificateOperationResponse>;
  }

  /**
   * Gets the creation operation associated with a specified certificate. This operation requires the
   * certificates/get permission.
   * @summary Gets the creation operation of a certificate.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCertificateOperationResponse>
   */
  getCertificateOperation(vaultBaseUrl: string, certificateName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.GetCertificateOperationResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param callback The callback
   */
  getCertificateOperation(vaultBaseUrl: string, certificateName: string, callback: coreHttp.ServiceCallback<Models.CertificateOperation>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCertificateOperation(vaultBaseUrl: string, certificateName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.CertificateOperation>): void;
  getCertificateOperation(vaultBaseUrl: string, certificateName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificateOperation>, callback?: coreHttp.ServiceCallback<Models.CertificateOperation>): Promise<Models.GetCertificateOperationResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        certificateName,
        options
      },
      getCertificateOperationOperationSpec,
      callback) as Promise<Models.GetCertificateOperationResponse>;
  }

  /**
   * Deletes the creation operation for a specified certificate that is in the process of being
   * created. The certificate is no longer created. This operation requires the certificates/update
   * permission.
   * @summary Deletes the creation operation for a specific certificate.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteCertificateOperationResponse>
   */
  deleteCertificateOperation(vaultBaseUrl: string, certificateName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DeleteCertificateOperationResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param callback The callback
   */
  deleteCertificateOperation(vaultBaseUrl: string, certificateName: string, callback: coreHttp.ServiceCallback<Models.CertificateOperation>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCertificateOperation(vaultBaseUrl: string, certificateName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.CertificateOperation>): void;
  deleteCertificateOperation(vaultBaseUrl: string, certificateName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificateOperation>, callback?: coreHttp.ServiceCallback<Models.CertificateOperation>): Promise<Models.DeleteCertificateOperationResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        certificateName,
        options
      },
      deleteCertificateOperationOperationSpec,
      callback) as Promise<Models.DeleteCertificateOperationResponse>;
  }

  /**
   * The MergeCertificate operation performs the merging of a certificate or certificate chain with a
   * key pair currently available in the service. This operation requires the certificates/create
   * permission.
   * @summary Merges a certificate or a certificate chain with a key pair existing on the server.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param x509Certificates The certificate or the certificate chain to merge.
   * @param [options] The optional parameters
   * @returns Promise<Models.MergeCertificateResponse>
   */
  mergeCertificate(vaultBaseUrl: string, certificateName: string, x509Certificates: Uint8Array[], options?: Models.KeyVaultClientMergeCertificateOptionalParams): Promise<Models.MergeCertificateResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param x509Certificates The certificate or the certificate chain to merge.
   * @param callback The callback
   */
  mergeCertificate(vaultBaseUrl: string, certificateName: string, x509Certificates: Uint8Array[], callback: coreHttp.ServiceCallback<Models.CertificateBundle>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param x509Certificates The certificate or the certificate chain to merge.
   * @param options The optional parameters
   * @param callback The callback
   */
  mergeCertificate(vaultBaseUrl: string, certificateName: string, x509Certificates: Uint8Array[], options: Models.KeyVaultClientMergeCertificateOptionalParams, callback: coreHttp.ServiceCallback<Models.CertificateBundle>): void;
  mergeCertificate(vaultBaseUrl: string, certificateName: string, x509Certificates: Uint8Array[], options?: Models.KeyVaultClientMergeCertificateOptionalParams | coreHttp.ServiceCallback<Models.CertificateBundle>, callback?: coreHttp.ServiceCallback<Models.CertificateBundle>): Promise<Models.MergeCertificateResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        certificateName,
        x509Certificates,
        options
      },
      mergeCertificateOperationSpec,
      callback) as Promise<Models.MergeCertificateResponse>;
  }

  /**
   * Requests that a backup of the specified certificate be downloaded to the client. All versions of
   * the certificate will be downloaded. This operation requires the certificates/backup permission.
   * @summary Backs up the specified certificate.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param [options] The optional parameters
   * @returns Promise<Models.BackupCertificateResponse>
   */
  backupCertificate(vaultBaseUrl: string, certificateName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.BackupCertificateResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param callback The callback
   */
  backupCertificate(vaultBaseUrl: string, certificateName: string, callback: coreHttp.ServiceCallback<Models.BackupCertificateResult>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate.
   * @param options The optional parameters
   * @param callback The callback
   */
  backupCertificate(vaultBaseUrl: string, certificateName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.BackupCertificateResult>): void;
  backupCertificate(vaultBaseUrl: string, certificateName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.BackupCertificateResult>, callback?: coreHttp.ServiceCallback<Models.BackupCertificateResult>): Promise<Models.BackupCertificateResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        certificateName,
        options
      },
      backupCertificateOperationSpec,
      callback) as Promise<Models.BackupCertificateResponse>;
  }

  /**
   * Restores a backed up certificate, and all its versions, to a vault. This operation requires the
   * certificates/restore permission.
   * @summary Restores a backed up certificate to a vault.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateBundleBackup The backup blob associated with a certificate bundle.
   * @param [options] The optional parameters
   * @returns Promise<Models.RestoreCertificateResponse>
   */
  restoreCertificate(vaultBaseUrl: string, certificateBundleBackup: Uint8Array, options?: coreHttp.RequestOptionsBase): Promise<Models.RestoreCertificateResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateBundleBackup The backup blob associated with a certificate bundle.
   * @param callback The callback
   */
  restoreCertificate(vaultBaseUrl: string, certificateBundleBackup: Uint8Array, callback: coreHttp.ServiceCallback<Models.CertificateBundle>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateBundleBackup The backup blob associated with a certificate bundle.
   * @param options The optional parameters
   * @param callback The callback
   */
  restoreCertificate(vaultBaseUrl: string, certificateBundleBackup: Uint8Array, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.CertificateBundle>): void;
  restoreCertificate(vaultBaseUrl: string, certificateBundleBackup: Uint8Array, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificateBundle>, callback?: coreHttp.ServiceCallback<Models.CertificateBundle>): Promise<Models.RestoreCertificateResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        certificateBundleBackup,
        options
      },
      restoreCertificateOperationSpec,
      callback) as Promise<Models.RestoreCertificateResponse>;
  }

  /**
   * The GetDeletedCertificates operation retrieves the certificates in the current vault which are
   * in a deleted state and ready for recovery or purging. This operation includes deletion-specific
   * information. This operation requires the certificates/get/list permission. This operation can
   * only be enabled on soft-delete enabled vaults.
   * @summary Lists the deleted certificates in the specified vault currently available for recovery.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDeletedCertificatesResponse>
   */
  getDeletedCertificates(vaultBaseUrl: string, options?: Models.KeyVaultClientGetDeletedCertificatesOptionalParams): Promise<Models.GetDeletedCertificatesResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param callback The callback
   */
  getDeletedCertificates(vaultBaseUrl: string, callback: coreHttp.ServiceCallback<Models.DeletedCertificateListResult>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeletedCertificates(vaultBaseUrl: string, options: Models.KeyVaultClientGetDeletedCertificatesOptionalParams, callback: coreHttp.ServiceCallback<Models.DeletedCertificateListResult>): void;
  getDeletedCertificates(vaultBaseUrl: string, options?: Models.KeyVaultClientGetDeletedCertificatesOptionalParams | coreHttp.ServiceCallback<Models.DeletedCertificateListResult>, callback?: coreHttp.ServiceCallback<Models.DeletedCertificateListResult>): Promise<Models.GetDeletedCertificatesResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        options
      },
      getDeletedCertificatesOperationSpec,
      callback) as Promise<Models.GetDeletedCertificatesResponse>;
  }

  /**
   * The GetDeletedCertificate operation retrieves the deleted certificate information plus its
   * attributes, such as retention interval, scheduled permanent deletion and the current deletion
   * recovery level. This operation requires the certificates/get permission.
   * @summary Retrieves information about the specified deleted certificate.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDeletedCertificateResponse>
   */
  getDeletedCertificate(vaultBaseUrl: string, certificateName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.GetDeletedCertificateResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate
   * @param callback The callback
   */
  getDeletedCertificate(vaultBaseUrl: string, certificateName: string, callback: coreHttp.ServiceCallback<Models.DeletedCertificateBundle>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeletedCertificate(vaultBaseUrl: string, certificateName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.DeletedCertificateBundle>): void;
  getDeletedCertificate(vaultBaseUrl: string, certificateName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeletedCertificateBundle>, callback?: coreHttp.ServiceCallback<Models.DeletedCertificateBundle>): Promise<Models.GetDeletedCertificateResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        certificateName,
        options
      },
      getDeletedCertificateOperationSpec,
      callback) as Promise<Models.GetDeletedCertificateResponse>;
  }

  /**
   * The PurgeDeletedCertificate operation performs an irreversible deletion of the specified
   * certificate, without possibility for recovery. The operation is not available if the recovery
   * level does not specify 'Purgeable'. This operation requires the certificate/purge permission.
   * @summary Permanently deletes the specified deleted certificate.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  purgeDeletedCertificate(vaultBaseUrl: string, certificateName: string, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate
   * @param callback The callback
   */
  purgeDeletedCertificate(vaultBaseUrl: string, certificateName: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the certificate
   * @param options The optional parameters
   * @param callback The callback
   */
  purgeDeletedCertificate(vaultBaseUrl: string, certificateName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  purgeDeletedCertificate(vaultBaseUrl: string, certificateName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        certificateName,
        options
      },
      purgeDeletedCertificateOperationSpec,
      callback);
  }

  /**
   * The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The
   * operation is applicable in vaults enabled for soft-delete, and must be issued during the
   * retention interval (available in the deleted certificate's attributes). This operation requires
   * the certificates/recover permission.
   * @summary Recovers the deleted certificate back to its current version under /certificates.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the deleted certificate
   * @param [options] The optional parameters
   * @returns Promise<Models.RecoverDeletedCertificateResponse>
   */
  recoverDeletedCertificate(vaultBaseUrl: string, certificateName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.RecoverDeletedCertificateResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the deleted certificate
   * @param callback The callback
   */
  recoverDeletedCertificate(vaultBaseUrl: string, certificateName: string, callback: coreHttp.ServiceCallback<Models.CertificateBundle>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param certificateName The name of the deleted certificate
   * @param options The optional parameters
   * @param callback The callback
   */
  recoverDeletedCertificate(vaultBaseUrl: string, certificateName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.CertificateBundle>): void;
  recoverDeletedCertificate(vaultBaseUrl: string, certificateName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CertificateBundle>, callback?: coreHttp.ServiceCallback<Models.CertificateBundle>): Promise<Models.RecoverDeletedCertificateResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        certificateName,
        options
      },
      recoverDeletedCertificateOperationSpec,
      callback) as Promise<Models.RecoverDeletedCertificateResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const getCertificatesOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "certificates",
  urlParameters: [
    Parameters.vaultBaseUrl
  ],
  queryParameters: [
    Parameters.maxresults,
    Parameters.includePending,
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const deleteCertificateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "certificates/{certificate-name}",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.certificateName0
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeletedCertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const setCertificateContactsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "certificates/contacts",
  urlParameters: [
    Parameters.vaultBaseUrl
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: "contacts",
    mapper: {
      ...Mappers.Contacts,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Contacts
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const getCertificateContactsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "certificates/contacts",
  urlParameters: [
    Parameters.vaultBaseUrl
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Contacts
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const deleteCertificateContactsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "certificates/contacts",
  urlParameters: [
    Parameters.vaultBaseUrl
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Contacts
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const getCertificateIssuersOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "certificates/issuers",
  urlParameters: [
    Parameters.vaultBaseUrl
  ],
  queryParameters: [
    Parameters.maxresults,
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateIssuerListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const setCertificateIssuerOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "certificates/issuers/{issuer-name}",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.issuerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: {
      provider: "provider",
      credentials: [
        "options",
        "credentials"
      ],
      organizationDetails: [
        "options",
        "organizationDetails"
      ],
      attributes: [
        "options",
        "attributes"
      ]
    },
    mapper: {
      ...Mappers.CertificateIssuerSetParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.IssuerBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const updateCertificateIssuerOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PATCH",
  path: "certificates/issuers/{issuer-name}",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.issuerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: {
      provider: [
        "options",
        "provider"
      ],
      credentials: [
        "options",
        "credentials"
      ],
      organizationDetails: [
        "options",
        "organizationDetails"
      ],
      attributes: [
        "options",
        "attributes"
      ]
    },
    mapper: {
      ...Mappers.CertificateIssuerUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.IssuerBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const getCertificateIssuerOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "certificates/issuers/{issuer-name}",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.issuerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IssuerBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const deleteCertificateIssuerOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "certificates/issuers/{issuer-name}",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.issuerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IssuerBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const createCertificateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "certificates/{certificate-name}/create",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.certificateName1
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: {
      certificatePolicy: [
        "options",
        "certificatePolicy"
      ],
      certificateAttributes: [
        "options",
        "certificateAttributes"
      ],
      tags: [
        "options",
        "tags"
      ]
    },
    mapper: {
      ...Mappers.CertificateCreateParameters,
      required: true
    }
  },
  responses: {
    202: {
      bodyMapper: Mappers.CertificateOperation
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const importCertificateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "certificates/{certificate-name}/import",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.certificateName1
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: {
      base64EncodedCertificate: "base64EncodedCertificate",
      password: [
        "options",
        "password"
      ],
      certificatePolicy: [
        "options",
        "certificatePolicy"
      ],
      certificateAttributes: [
        "options",
        "certificateAttributes"
      ],
      tags: [
        "options",
        "tags"
      ]
    },
    mapper: {
      ...Mappers.CertificateImportParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const getCertificateVersionsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "certificates/{certificate-name}/versions",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.certificateName0
  ],
  queryParameters: [
    Parameters.maxresults,
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const getCertificatePolicyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "certificates/{certificate-name}/policy",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.certificateName0
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificatePolicy
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const updateCertificatePolicyOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PATCH",
  path: "certificates/{certificate-name}/policy",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.certificateName0
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: "certificatePolicy",
    mapper: {
      ...Mappers.CertificatePolicy,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CertificatePolicy
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const updateCertificateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PATCH",
  path: "certificates/{certificate-name}/{certificate-version}",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.certificateName0,
    Parameters.certificateVersion
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: {
      certificatePolicy: [
        "options",
        "certificatePolicy"
      ],
      certificateAttributes: [
        "options",
        "certificateAttributes"
      ],
      tags: [
        "options",
        "tags"
      ]
    },
    mapper: {
      ...Mappers.CertificateUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const getCertificateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "certificates/{certificate-name}/{certificate-version}",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.certificateName0,
    Parameters.certificateVersion
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const updateCertificateOperationOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PATCH",
  path: "certificates/{certificate-name}/pending",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.certificateName0
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: {
      cancellationRequested: "cancellationRequested"
    },
    mapper: {
      ...Mappers.CertificateOperationUpdateParameter,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CertificateOperation
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const getCertificateOperationOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "certificates/{certificate-name}/pending",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.certificateName0
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateOperation
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const deleteCertificateOperationOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "certificates/{certificate-name}/pending",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.certificateName0
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateOperation
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const mergeCertificateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "certificates/{certificate-name}/pending/merge",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.certificateName0
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: {
      x509Certificates: "x509Certificates",
      certificateAttributes: [
        "options",
        "certificateAttributes"
      ],
      tags: [
        "options",
        "tags"
      ]
    },
    mapper: {
      ...Mappers.CertificateMergeParameters,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.CertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const backupCertificateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "certificates/{certificate-name}/backup",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.certificateName0
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupCertificateResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const restoreCertificateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "certificates/restore",
  urlParameters: [
    Parameters.vaultBaseUrl
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: {
      certificateBundleBackup: "certificateBundleBackup"
    },
    mapper: {
      ...Mappers.CertificateRestoreParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const getDeletedCertificatesOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "deletedcertificates",
  urlParameters: [
    Parameters.vaultBaseUrl
  ],
  queryParameters: [
    Parameters.maxresults,
    Parameters.includePending,
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeletedCertificateListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const getDeletedCertificateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "deletedcertificates/{certificate-name}",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.certificateName0
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeletedCertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const purgeDeletedCertificateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "deletedcertificates/{certificate-name}",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.certificateName0
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const recoverDeletedCertificateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "deletedcertificates/{certificate-name}/recover",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.certificateName0
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateBundle
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

export {
  KeyVaultClient,
  KeyVaultClientContext,
  Models as KeyVaultModels,
  Mappers as KeyVaultMappers
};
