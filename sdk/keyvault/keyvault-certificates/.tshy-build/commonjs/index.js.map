{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n// This file makes more sense if ordered based on how meaningful are some methods in relation to others.\n\n/// <reference lib=\"esnext.asynciterable\" />\n\nimport type { TokenCredential } from \"@azure/core-auth\";\n\nimport { logger } from \"./log.js\";\nimport type { PollOperationState } from \"@azure/core-lro\";\nimport { PollerLike } from \"@azure/core-lro\";\n\nimport {\n  KeyVaultCertificate,\n  KeyVaultCertificateWithPolicy,\n  AdministratorContact,\n  BackupCertificateOptions,\n  BeginCreateCertificateOptions,\n  BeginDeleteCertificateOptions,\n  BeginRecoverDeletedCertificateOptions,\n  CertificateIssuer,\n  CertificateContact,\n  CertificateContentType,\n  CertificatePolicy,\n  CertificateProperties,\n  CreateCertificateOptions,\n  DeleteCertificateOperationOptions,\n  DeleteContactsOptions,\n  DeleteIssuerOptions,\n  DeletedCertificate,\n  GetContactsOptions,\n  GetIssuerOptions,\n  GetCertificateOperationOptions,\n  GetPlainCertificateOperationOptions,\n  GetCertificateOptions,\n  GetCertificatePolicyOptions,\n  GetCertificateVersionOptions,\n  GetDeletedCertificateOptions,\n  CertificateTags,\n  ImportCertificateOptions,\n  ListPropertiesOfCertificatesOptions,\n  ErrorModel,\n  ListPropertiesOfCertificateVersionsOptions,\n  ListPropertiesOfIssuersOptions,\n  ListDeletedCertificatesOptions,\n  MergeCertificateOptions,\n  PurgeDeletedCertificateOptions,\n  RestoreCertificateBackupOptions,\n  SetContactsOptions,\n  CreateIssuerOptions,\n  CertificateOperation,\n  CertificateOperationError,\n  SubjectAlternativeNames,\n  UpdateIssuerOptions,\n  UpdateCertificatePropertiesOptions,\n  UpdateCertificatePolicyOptions,\n  WellKnownIssuerNames,\n  CertificatePollerOptions,\n  IssuerProperties,\n  CertificateContactAll,\n  ActionType,\n  CertificatePolicyAction,\n  LifetimeAction,\n  RequireAtLeastOne,\n  ArrayOneOrMore,\n  SubjectAlternativeNamesAll,\n  CertificatePolicyProperties,\n  PolicySubjectProperties,\n  DefaultCertificatePolicy,\n  CertificateClientOptions,\n  LATEST_API_VERSION,\n  CancelCertificateOperationOptions,\n  ImportCertificatePolicy,\n  KnownCertificateKeyCurveNames,\n  KnownCertificateKeyTypes,\n  KnownKeyUsageTypes,\n  PollerLikeWithCancellation,\n} from \"./certificatesModels.js\";\n\nimport type {\n  CertificateIssuerSetParameters,\n  CertificateIssuerUpdateParameters,\n} from \"./generated/models/index.js\";\nimport {\n  BackupCertificateResult,\n  IssuerParameters,\n  IssuerCredentials,\n  IssuerAttributes,\n  X509CertificateProperties,\n  SubjectAlternativeNames as CoreSubjectAlternativeNames,\n  DeletionRecoveryLevel,\n  JsonWebKeyType as CertificateKeyType,\n  JsonWebKeyCurveName as CertificateKeyCurveName,\n  KnownDeletionRecoveryLevel as KnownDeletionRecoveryLevels,\n  KeyUsageType,\n} from \"./generated/models/index.js\";\nimport type { KeyVaultClientOptionalParams } from \"./generated/keyVaultClient.js\";\nimport { KeyVaultClient } from \"./generated/keyVaultClient.js\";\nimport type { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { keyVaultAuthenticationPolicy } from \"@azure/keyvault-common\";\nimport { CreateCertificatePoller } from \"./lro/create/poller.js\";\nimport { CertificateOperationPoller } from \"./lro/operation/poller.js\";\nimport { DeleteCertificatePoller } from \"./lro/delete/poller.js\";\nimport { RecoverDeletedCertificatePoller } from \"./lro/recover/poller.js\";\nimport { CertificateOperationState } from \"./lro/operation/operation.js\";\nimport { DeleteCertificateState } from \"./lro/delete/operation.js\";\nimport { CreateCertificateState } from \"./lro/create/operation.js\";\nimport { RecoverDeletedCertificateState } from \"./lro/recover/operation.js\";\nimport { parseCertificateBytes } from \"./utils.js\";\nimport { KeyVaultCertificateIdentifier, parseKeyVaultCertificateIdentifier } from \"./identifier.js\";\nimport {\n  coreContactsToCertificateContacts,\n  getCertificateFromCertificateBundle,\n  getCertificateOperationFromCoreOperation,\n  getCertificateWithPolicyFromCertificateBundle,\n  getDeletedCertificateFromDeletedCertificateBundle,\n  getDeletedCertificateFromItem,\n  getPropertiesFromCertificateBundle,\n  mapPagedAsyncIterable,\n  toCoreAttributes,\n  toCorePolicy,\n  toPublicIssuer,\n  toPublicPolicy,\n} from \"./transformations.js\";\nimport { KeyVaultCertificatePollOperationState } from \"./lro/keyVaultCertificatePoller.js\";\nimport { tracingClient } from \"./tracing.js\";\nimport { bearerTokenAuthenticationPolicyName } from \"@azure/core-rest-pipeline\";\nimport { SDK_VERSION } from \"./constants.js\";\n\nexport {\n  CertificateClientOptions,\n  AdministratorContact,\n  ArrayOneOrMore,\n  BackupCertificateResult,\n  BeginCreateCertificateOptions,\n  BeginDeleteCertificateOptions,\n  BeginRecoverDeletedCertificateOptions,\n  KeyVaultCertificate,\n  KeyVaultCertificateWithPolicy,\n  BackupCertificateOptions,\n  CertificateContentType,\n  CertificateProperties,\n  CertificateIssuer,\n  CertificateOperation,\n  CertificateOperationError,\n  CertificatePolicy,\n  ImportCertificatePolicy,\n  ActionType,\n  CertificatePolicyAction,\n  CertificatePolicyProperties,\n  PolicySubjectProperties,\n  CertificateTags,\n  CreateCertificateOptions,\n  CertificatePollerOptions,\n  KeyVaultCertificateIdentifier,\n  parseKeyVaultCertificateIdentifier,\n  PollerLike,\n  PollerLikeWithCancellation,\n  CreateCertificateState,\n  DeleteCertificateState,\n  RecoverDeletedCertificateState,\n  CertificateOperationState,\n  CoreSubjectAlternativeNames,\n  RequireAtLeastOne,\n  CertificateContactAll,\n  CertificateContact,\n  DeleteCertificateOperationOptions,\n  DeleteContactsOptions,\n  DeleteIssuerOptions,\n  DeletedCertificate,\n  DeletionRecoveryLevel,\n  DefaultCertificatePolicy,\n  ErrorModel,\n  GetContactsOptions,\n  GetIssuerOptions,\n  GetCertificateOperationOptions,\n  GetPlainCertificateOperationOptions,\n  GetCertificateOptions,\n  GetCertificatePolicyOptions,\n  GetCertificateVersionOptions,\n  GetDeletedCertificateOptions,\n  ImportCertificateOptions,\n  IssuerAttributes,\n  IssuerCredentials,\n  IssuerParameters,\n  IssuerProperties,\n  CertificateKeyType,\n  CertificateKeyCurveName,\n  KeyUsageType,\n  LifetimeAction,\n  ListPropertiesOfCertificatesOptions,\n  ListPropertiesOfCertificateVersionsOptions,\n  ListPropertiesOfIssuersOptions,\n  ListDeletedCertificatesOptions,\n  MergeCertificateOptions,\n  PurgeDeletedCertificateOptions,\n  RestoreCertificateBackupOptions,\n  SetContactsOptions,\n  SubjectAlternativeNamesAll,\n  CreateIssuerOptions,\n  SubjectAlternativeNames,\n  UpdateIssuerOptions,\n  UpdateCertificatePropertiesOptions as UpdateCertificateOptions,\n  UpdateCertificatePolicyOptions,\n  WellKnownIssuerNames as WellKnownIssuer,\n  X509CertificateProperties,\n  logger,\n  CancelCertificateOperationOptions,\n  KeyVaultCertificatePollOperationState,\n  KnownCertificateKeyCurveNames,\n  KnownDeletionRecoveryLevels,\n  KnownCertificateKeyTypes,\n  KnownKeyUsageTypes,\n};\n\n/**\n * Deprecated KeyVault copy of core-lro's PollerLike.\n */\nexport type KVPollerLike<TState extends PollOperationState<TResult>, TResult> = PollerLike<\n  TState,\n  TResult\n>;\n\n/**\n * The client to interact with the KeyVault certificates functionality\n */\nexport class CertificateClient {\n  /**\n   * The base URL to the vault\n   */\n  public readonly vaultUrl: string;\n\n  private readonly client: KeyVaultClient;\n\n  /**\n   * Creates an instance of CertificateClient.\n   * @param vaultUrl - the base URL to the vault. You should validate that this URL references a valid Key Vault resource. See https://aka.ms/azsdk/blog/vault-uri for details.\n   * @param credential - An object that implements the `TokenCredential` interface used to authenticate requests to the service. Use the \\@azure/identity package to create a credential that suits your needs.\n   * @param clientOptions - Pipeline options used to configure Key Vault API requests.\n   *                          Omit this parameter to use the default pipeline configuration.\n   */\n  constructor(\n    vaultUrl: string,\n    credential: TokenCredential,\n    clientOptions: CertificateClientOptions = {},\n  ) {\n    this.vaultUrl = vaultUrl;\n\n    const internalClientPipelineOptions: KeyVaultClientOptionalParams = {\n      ...clientOptions,\n      apiVersion: clientOptions.serviceVersion || LATEST_API_VERSION,\n      userAgentOptions: {\n        userAgentPrefix: `${clientOptions.userAgentOptions?.userAgentPrefix} azsdk-js-keyvault-certificates/${SDK_VERSION}`,\n      },\n      loggingOptions: {\n        logger: logger.info,\n        additionalAllowedHeaderNames: [\n          \"x-ms-keyvault-region\",\n          \"x-ms-keyvault-network-info\",\n          \"x-ms-keyvault-service-version\",\n        ],\n      },\n    };\n\n    this.client = new KeyVaultClient(this.vaultUrl, credential, internalClientPipelineOptions);\n\n    this.client.pipeline.removePolicy({ name: bearerTokenAuthenticationPolicyName });\n    this.client.pipeline.addPolicy(keyVaultAuthenticationPolicy(credential, clientOptions));\n    // Workaround for: https://github.com/Azure/azure-sdk-for-js/issues/31843\n    this.client.pipeline.addPolicy({\n      name: \"ContentTypePolicy\",\n      sendRequest(request, next) {\n        const contentType = request.headers.get(\"Content-Type\") ?? \"\";\n        if (contentType.startsWith(\"application/json\")) {\n          request.headers.set(\"Content-Type\", \"application/json\");\n        }\n        return next(request);\n      },\n    });\n  }\n\n  /**\n   * Iterates the latest version of all certificates in the vault.  The full certificate identifier and attributes are provided\n   * in the response. No values are returned for the certificates. This operations requires the certificates/list permission.\n   *\n   * Example usage:\n   * ```ts snippet:IndexListCertificates\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { CertificateClient } from \"@azure/keyvault-certificates\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const keyVaultUrl = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new CertificateClient(keyVaultUrl, credential);\n   *\n   * // All in one call\n   * for await (const certificateProperties of client.listPropertiesOfCertificates()) {\n   *   console.log(certificateProperties);\n   * }\n   *\n   * // By pages\n   * for await (const page of client.listPropertiesOfCertificates().byPage()) {\n   *   for (const certificateProperties of page) {\n   *     console.log(certificateProperties);\n   *   }\n   * }\n   * ```\n   * List all versions of the specified certificate.\n   * @param options - The optional parameters\n   */\n  public listPropertiesOfCertificates(\n    options: ListPropertiesOfCertificatesOptions = {},\n  ): PagedAsyncIterableIterator<CertificateProperties> {\n    return mapPagedAsyncIterable(\n      this.client.getCertificates(options),\n      getPropertiesFromCertificateBundle,\n    );\n  }\n\n  /**\n   * Returns the versions of a certificate in the specified key\n   * vault. This operation requires the certificates/list permission.\n   *\n   * Example usage:\n   * ```ts snippet:IndexListCertificateVersions\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { CertificateClient } from \"@azure/keyvault-certificates\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const keyVaultUrl = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new CertificateClient(keyVaultUrl, credential);\n   *\n   * for await (const certificateProperties of client.listPropertiesOfCertificateVersions(\n   *   \"MyCertificate\",\n   * )) {\n   *   console.log(certificateProperties.version!);\n   * }\n   * ```\n   * List the versions of a certificate.\n   * @param certificateName - The name of the certificate.\n   * @param options - The optional parameters\n   */\n  public listPropertiesOfCertificateVersions(\n    certificateName: string,\n    options: ListPropertiesOfCertificateVersionsOptions = {},\n  ): PagedAsyncIterableIterator<CertificateProperties> {\n    return mapPagedAsyncIterable(\n      this.client.getCertificateVersions(certificateName, options),\n      getPropertiesFromCertificateBundle,\n    );\n  }\n\n  /**\n   * The DELETE operation applies to any certificate stored in Azure Key Vault. DELETE cannot be applied\n   * to an individual version of a certificate.\n   * This function returns a Long Running Operation poller that allows you to wait indefinitely until the certificate is fully recovered.\n   *\n   * This operation requires the certificates/delete permission.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleDeleteCertificate\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { CertificateClient } from \"@azure/keyvault-certificates\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const keyVaultUrl = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new CertificateClient(keyVaultUrl, credential);\n   *\n   * const certificateName = \"MyCertificate\";\n   *\n   * const poller = await client.beginDeleteCertificate(certificateName);\n   *\n   * // You can use the deleted certificate immediately:\n   * const deletedCertificate = poller.getResult();\n   *\n   * // The certificate is being deleted. Only wait for it if you want to restore it or purge it.\n   * await poller.pollUntilDone();\n   *\n   * // You can also get the deleted certificate this way:\n   * await client.getDeletedCertificate(certificateName);\n   *\n   * // Deleted certificates can also be recovered or purged.\n   *\n   * // recoverDeletedCertificate returns a poller, just like beginDeleteCertificate.\n   * // const recoverPoller = await client.beginRecoverDeletedCertificate(certificateName);\n   * // await recoverPoller.pollUntilDone();\n   *\n   * // If a certificate is done and the Key Vault has soft-delete enabled, the certificate can be purged with:\n   * await client.purgeDeletedCertificate(certificateName);\n   * ```\n   * Deletes a certificate from a specified key vault.\n   * @param certificateName - The name of the certificate.\n   * @param options - The optional parameters\n   */\n  public async beginDeleteCertificate(\n    certificateName: string,\n    options: BeginDeleteCertificateOptions = {},\n  ): Promise<PollerLike<DeleteCertificateState, DeletedCertificate>> {\n    const poller = new DeleteCertificatePoller({\n      certificateName,\n      client: this.client,\n      vaultUrl: this.vaultUrl,\n      ...options,\n      operationOptions: options,\n    });\n    // This will initialize the poller's operation (the deletion of the secret).\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes all of the certificate contacts. This operation requires the certificates/managecontacts permission.\n   *\n   * Example usage:\n   * ```ts snippet:CertificateClientDeleteContacts\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { CertificateClient } from \"@azure/keyvault-certificates\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const keyVaultUrl = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new CertificateClient(keyVaultUrl, credential);\n   *\n   * await client.deleteContacts();\n   * ```\n   * Deletes all of the certificate contacts\n   * @param options - The optional parameters\n   */\n  public deleteContacts(\n    options: DeleteContactsOptions = {},\n  ): Promise<CertificateContact[] | undefined> {\n    let parsedBody: any;\n    return tracingClient.withSpan(\n      \"CertificateClient.deleteContacts\",\n      options,\n      async (updatedOptions) => {\n        await this.client.deleteCertificateContacts({\n          ...updatedOptions,\n          onResponse: (response) => {\n            parsedBody = response.parsedBody;\n          },\n        });\n        return coreContactsToCertificateContacts(parsedBody);\n      },\n    );\n  }\n\n  /**\n   * Sets the certificate contacts for the key vault. This operation requires the certificates/managecontacts permission.\n   *\n   * Example usage:\n   * ```ts snippet:CertificateClientSetContacts\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { CertificateClient } from \"@azure/keyvault-certificates\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const keyVaultUrl = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new CertificateClient(keyVaultUrl, credential);\n   *\n   * await client.setContacts([\n   *   {\n   *     email: \"b@b.com\",\n   *     name: \"b\",\n   *     phone: \"222222222222\",\n   *   },\n   * ]);\n   * ```\n   * Sets the certificate contacts.\n   * @param contacts - The contacts to use\n   * @param options - The optional parameters\n   */\n  public setContacts(\n    contacts: CertificateContact[],\n    options: SetContactsOptions = {},\n  ): Promise<CertificateContact[] | undefined> {\n    const coreContacts = contacts.map((x) => ({\n      emailAddress: x ? x.email : undefined,\n      name: x ? x.name : undefined,\n      phone: x ? x.phone : undefined,\n    }));\n\n    return tracingClient.withSpan(\n      \"CertificateClient.setContacts\",\n      options,\n      async (updatedOptions) => {\n        const response = await this.client.setCertificateContacts(\n          { contactList: coreContacts },\n          updatedOptions,\n        );\n        return coreContactsToCertificateContacts(response);\n      },\n    );\n  }\n\n  /**\n   * Returns the set of certificate contact resources in the specified key vault. This operation requires the certificates/managecontacts permission.\n   *\n   * Example usage:\n   * ```ts snippet:CertificateClientGetContacts\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { CertificateClient } from \"@azure/keyvault-certificates\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const keyVaultUrl = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new CertificateClient(keyVaultUrl, credential);\n   *\n   * const contacts = await client.getContacts();\n   * for (const contact of contacts) {\n   *   console.log(contact);\n   * }\n   * ```\n   * Sets the certificate contacts.\n   * @param options - The optional parameters\n   */\n  public getContacts(options: GetContactsOptions = {}): Promise<CertificateContact[] | undefined> {\n    return tracingClient.withSpan(\n      \"CertificateClient.getContacts\",\n      options,\n      async (updatedOptions) => {\n        const result = await this.client.getCertificateContacts(updatedOptions);\n        return coreContactsToCertificateContacts(result);\n      },\n    );\n  }\n  /**\n   * Returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.\n   *\n   * Example usage:\n   * ```ts snippet:CertificateClientListIssuers\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { CertificateClient } from \"@azure/keyvault-certificates\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const keyVaultUrl = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new CertificateClient(keyVaultUrl, credential);\n   *\n   * await client.createIssuer(\"IssuerName\", \"Test\");\n   *\n   * // All in one call\n   * for await (const issuerProperties of client.listPropertiesOfIssuers()) {\n   *   console.log(issuerProperties);\n   * }\n   *\n   * // By pages\n   * for await (const page of client.listPropertiesOfIssuers().byPage()) {\n   *   for (const issuerProperties of page) {\n   *     console.log(issuerProperties);\n   *   }\n   * }\n   * ```\n   * List the certificate issuers.\n   * @param options - The optional parameters\n   */\n  public listPropertiesOfIssuers(\n    options: ListPropertiesOfIssuersOptions = {},\n  ): PagedAsyncIterableIterator<IssuerProperties> {\n    return this.client.getCertificateIssuers(options);\n  }\n\n  /**\n   * The createIssuer operation adds or updates the specified certificate issuer. This\n   * operation requires the certificates/setissuers permission.\n   *\n   * Example usage:\n   * ```ts snippet:CertificateClientCreateIssuer\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { CertificateClient } from \"@azure/keyvault-certificates\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const keyVaultUrl = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new CertificateClient(keyVaultUrl, credential);\n   *\n   * await client.createIssuer(\"IssuerName\", \"Test\");\n   * ```\n   * Sets the specified certificate issuer.\n   * @param issuerName - The name of the issuer.\n   * @param provider - The issuer provider.\n   * @param options - The optional parameters\n   */\n  public createIssuer(\n    issuerName: string,\n    provider: string,\n    options: CreateIssuerOptions = {},\n  ): Promise<CertificateIssuer> {\n    return tracingClient.withSpan(\n      \"CertificateClient.createIssuer\",\n      options,\n      async (updatedOptions) => {\n        const { accountId, password } = updatedOptions;\n\n        const parameters: CertificateIssuerSetParameters = {\n          credentials: {\n            accountId,\n            password,\n          },\n          provider,\n        };\n\n        if (\n          updatedOptions.organizationId ||\n          (updatedOptions.administratorContacts && updatedOptions.administratorContacts.length)\n        ) {\n          parameters.organizationDetails = {\n            id: updatedOptions.organizationId,\n            adminDetails: updatedOptions.administratorContacts\n              ? updatedOptions.administratorContacts.map((x) => ({\n                  emailAddress: x.email,\n                  phone: x.phone,\n                  firstName: x.firstName,\n                  lastName: x.lastName,\n                }))\n              : undefined,\n          };\n        }\n\n        if (updatedOptions.enabled !== undefined) {\n          parameters.attributes = {\n            enabled: updatedOptions.enabled,\n          };\n        }\n\n        const response = await this.client.setCertificateIssuer(\n          issuerName,\n          parameters,\n          updatedOptions,\n        );\n        return toPublicIssuer(response);\n      },\n    );\n  }\n\n  /**\n   * The updateIssuer operation performs an update on the specified certificate issuer\n   * entity. This operation requires the certificates/setissuers permission.\n   *\n   * Example usage:\n   * ```ts snippet:CertificateClientUpdateIssuer\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { CertificateClient } from \"@azure/keyvault-certificates\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const keyVaultUrl = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new CertificateClient(keyVaultUrl, credential);\n   *\n   * await client.updateIssuer(\"IssuerName\", {\n   *   provider: \"Provider2\",\n   * });\n   * ```\n   * Updates the specified certificate issuer.\n   * @param issuerName - The name of the issuer.\n   * @param options - The optional parameters\n   */\n  public async updateIssuer(\n    issuerName: string,\n    options: UpdateIssuerOptions = {},\n  ): Promise<CertificateIssuer> {\n    return tracingClient.withSpan(\n      \"CertificateClient.updateIssuer\",\n      options,\n      async (updatedOptions) => {\n        const { accountId, password } = options;\n\n        const parameters: CertificateIssuerUpdateParameters = {\n          credentials: {\n            accountId,\n            password,\n          },\n        };\n\n        if (updatedOptions.provider) {\n          parameters.provider = updatedOptions.provider;\n        }\n\n        if (\n          updatedOptions.organizationId ||\n          (updatedOptions.administratorContacts && updatedOptions.administratorContacts.length)\n        ) {\n          parameters.organizationDetails = {\n            id: updatedOptions.organizationId,\n            adminDetails: updatedOptions.administratorContacts\n              ? updatedOptions.administratorContacts.map((x) => ({\n                  emailAddress: x.email,\n                  phone: x.phone,\n                  firstName: x.firstName,\n                  lastName: x.lastName,\n                }))\n              : undefined,\n          };\n        }\n\n        if (updatedOptions.enabled) {\n          parameters.attributes = {\n            enabled: updatedOptions.enabled,\n          };\n        }\n\n        const response = await this.client.updateCertificateIssuer(\n          issuerName,\n          parameters,\n          updatedOptions,\n        );\n        return toPublicIssuer(response);\n      },\n    );\n  }\n\n  /**\n   * The getIssuer operation returns the specified certificate issuer resources in the\n   * specified key vault. This operation requires the certificates/manageissuers/getissuers\n   * permission.\n   *\n   * Example usage:\n   * ```ts snippet:CertificateClientGetIssuer\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { CertificateClient } from \"@azure/keyvault-certificates\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const keyVaultUrl = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new CertificateClient(keyVaultUrl, credential);\n   *\n   * const certificateIssuer = await client.getIssuer(\"IssuerName\");\n   * console.log(certificateIssuer);\n   * ```\n   * Gets he specified certificate issuer.\n   * @param issuerName - The name of the issuer.\n   * @param options - The optional parameters\n   */\n  public getIssuer(issuerName: string, options: GetIssuerOptions = {}): Promise<CertificateIssuer> {\n    return tracingClient.withSpan(\n      \"CertificateClient.getIssuer\",\n      options,\n      async (updatedOptions) => {\n        const response = await this.client.getCertificateIssuer(issuerName, {\n          ...updatedOptions,\n        });\n        return toPublicIssuer(response);\n      },\n    );\n  }\n\n  /**\n   * The deleteIssuer operation permanently removes the specified certificate issuer from\n   * the vault. This operation requires the certificates/manageissuers/deleteissuers permission.\n   *\n   * Example usage:\n   * ```ts snippet:CertificateClientDeleteIssuer\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { CertificateClient } from \"@azure/keyvault-certificates\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const keyVaultUrl = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new CertificateClient(keyVaultUrl, credential);\n   *\n   * await client.deleteIssuer(\"IssuerName\");\n   * ```\n   * Deletes the specified certificate issuer.\n   * @param issuerName - The name of the issuer.\n   * @param options - The optional parameters\n   */\n  public deleteIssuer(\n    issuerName: string,\n    options: DeleteIssuerOptions = {},\n  ): Promise<CertificateIssuer> {\n    return tracingClient.withSpan(\n      \"CertificateClient.deleteIssuer\",\n      options,\n      async (updatedOptions) => {\n        const response = await this.client.deleteCertificateIssuer(issuerName, updatedOptions);\n        return toPublicIssuer(response);\n      },\n    );\n  }\n\n  /**\n   * Creates a new certificate. If this is the first version, the certificate resource is created.\n   * This function returns a Long Running Operation poller that allows you to wait indefinitely until the certificate is fully recovered.\n   *\n   * **Note:** Sending `Self` as the `issuerName` of the certificate's policy will create a self-signed certificate.\n   *\n   * This operation requires the certificates/create permission.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleCreateCertificatePoller\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { CertificateClient } from \"@azure/keyvault-certificates\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const url = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new CertificateClient(url, credential);\n   *\n   * const certificateName = \"MyCertificateName\";\n   * const certificatePolicy = {\n   *   issuerName: \"Self\",\n   *   subject: \"cn=MyCert\",\n   * };\n   *\n   * const poller = await client.beginCreateCertificate(certificateName, certificatePolicy);\n   *\n   * // You can use the pending certificate immediately:\n   * const pendingCertificate = poller.getResult();\n   *\n   * // Or you can wait until the certificate finishes being signed:\n   * const keyVaultCertificate = await poller.pollUntilDone();\n   * console.log(keyVaultCertificate);\n   * ```\n   * Creates a certificate\n   * @param certificateName - The name of the certificate\n   * @param certificatePolicy - The certificate's policy\n   * @param options - Optional parameters\n   */\n  public async beginCreateCertificate(\n    certificateName: string,\n    policy: CertificatePolicy,\n    options: BeginCreateCertificateOptions = {},\n  ): Promise<PollerLikeWithCancellation<CreateCertificateState, KeyVaultCertificateWithPolicy>> {\n    const poller = new CreateCertificatePoller({\n      vaultUrl: this.vaultUrl,\n      client: this.client,\n      certificateName,\n      certificatePolicy: policy,\n      createCertificateOptions: options,\n      operationOptions: options,\n      intervalInMs: options.intervalInMs,\n      resumeFrom: options.resumeFrom,\n    });\n    // This will initialize the poller's operation (the creation of the secret).\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Gets the latest information available from a specific certificate, including the certificate's policy. This operation requires the certificates/get permission.\n   *\n   * Example usage:\n   * ```ts snippet:CertificateClientGetCertificate\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { CertificateClient } from \"@azure/keyvault-certificates\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const keyVaultUrl = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new CertificateClient(keyVaultUrl, credential);\n   *\n   * const certificateName = \"MyCertificate\";\n   *\n   * const result = await client.getCertificate(certificateName);\n   * console.log(result.name);\n   * ```\n   * Retrieves a certificate from the certificate's name (includes the certificate policy)\n   * @param certificateName - The name of the certificate\n   * @param options - The optional parameters\n   */\n  public getCertificate(\n    certificateName: string,\n    options: GetCertificateOptions = {},\n  ): Promise<KeyVaultCertificateWithPolicy> {\n    return tracingClient.withSpan(\n      \"CertificateClient.getCertificate\",\n      options,\n      async (updatedOptions) => {\n        const result = await this.client.getCertificate(certificateName, \"\", updatedOptions);\n        return getCertificateWithPolicyFromCertificateBundle(result);\n      },\n    );\n  }\n\n  /**\n   * Gets information about a specific certificate on a specific version. It won't return the certificate's policy. This operation requires the certificates/get permission.\n   *\n   * Example usage:\n   * ```ts snippet:CertificateClientGetCertificateVersion\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { CertificateClient } from \"@azure/keyvault-certificates\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const url = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new CertificateClient(url, credential);\n   *\n   * const certificateName = \"MyCertificateName\";\n   *\n   * const latestCertificate = await client.getCertificate(certificateName);\n   * console.log(`Latest version of the certificate ${certificateName}: `, latestCertificate);\n   * const specificCertificate = await client.getCertificateVersion(\n   *   certificateName,\n   *   latestCertificate.properties.version,\n   * );\n   * console.log(\n   *   `The certificate ${certificateName} at the version ${latestCertificate.properties.version}: `,\n   *   specificCertificate,\n   * );\n   * ```\n   * Retrieves a certificate from the certificate's name and a specified version\n   * @param certificateName - The name of the certificate\n   * @param version - The specific version of the certificate\n   * @param options - The optional parameters\n   */\n  public getCertificateVersion(\n    certificateName: string,\n    version: string,\n    options: GetCertificateVersionOptions = {},\n  ): Promise<KeyVaultCertificate> {\n    return tracingClient.withSpan(\n      \"CertificateClient.getCertificateVersion\",\n      options,\n      async (updatedOptions) => {\n        if (!version) {\n          throw new Error(\"The 'version' cannot be empty.\");\n        }\n        const result = await this.client.getCertificate(certificateName, version, updatedOptions);\n        return getCertificateFromCertificateBundle(result);\n      },\n    );\n  }\n\n  /**\n   * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format.\n   * If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. This operation requires the certificates/import permission.\n   *\n   * Example usage:\n   * ```ts snippet:CertificateClientImportCertificate\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { CertificateClient } from \"@azure/keyvault-certificates\";\n   * import { SecretClient } from \"@azure/keyvault-secrets\";\n   * import { isNodeLike } from \"@azure/core-util\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const url = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new CertificateClient(url, credential);\n   * const secretClient = new SecretClient(url, credential);\n   *\n   * const certificateSecret = await secretClient.getSecret(\"MyCertificate\");\n   * const base64EncodedCertificate = certificateSecret.value!;\n   *\n   * const buffer = isNodeLike\n   *   ? Buffer.from(base64EncodedCertificate, \"base64\")\n   *   : Uint8Array.from(atob(base64EncodedCertificate), (c) => c.charCodeAt(0));\n   * await client.importCertificate(\"MyCertificate\", buffer);\n   * ```\n   * Imports a certificate from a certificate's secret value\n   * @param certificateName - The name of the certificate\n   * @param certificateBytes - The PFX or ASCII PEM formatted value of the certificate containing both the X.509 certificates and the private key\n   * @param options - The optional parameters\n   */\n  public importCertificate(\n    certificateName: string,\n    certificateBytes: Uint8Array,\n    options: ImportCertificateOptions = {},\n  ): Promise<KeyVaultCertificateWithPolicy> {\n    return tracingClient.withSpan(\n      \"CertificateClient.importCertificate\",\n      options,\n      async (updatedOptions) => {\n        const base64EncodedCertificate = parseCertificateBytes(\n          certificateBytes,\n          updatedOptions.policy?.contentType,\n        );\n        const result = await this.client.importCertificate(\n          certificateName,\n          {\n            base64EncodedCertificate,\n            preserveCertOrder: updatedOptions.preserveCertificateOrder,\n            ...updatedOptions,\n          },\n          updatedOptions,\n        );\n        return getCertificateWithPolicyFromCertificateBundle(result);\n      },\n    );\n  }\n\n  /**\n   * The getCertificatePolicy operation returns the specified certificate policy resources in the specified key vault. This operation requires the certificates/get permission.\n   *\n   * Example usage:\n   * ```ts snippet:CertificateClientGetCertificatePolicy\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { CertificateClient } from \"@azure/keyvault-certificates\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const url = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new CertificateClient(url, credential);\n   *\n   * const policy = await client.getCertificatePolicy(\"MyCertificate\");\n   * console.log(policy);\n   * ```\n   * Gets a certificate's policy\n   * @param certificateName - The name of the certificate\n   * @param options - The optional parameters\n   */\n  public getCertificatePolicy(\n    certificateName: string,\n    options: GetCertificatePolicyOptions = {},\n  ): Promise<CertificatePolicy> {\n    return tracingClient.withSpan(\n      \"CertificateClient.getCertificatePolicy\",\n      options,\n      async (updatedOptions) => {\n        const response = await this.client.getCertificatePolicy(certificateName, updatedOptions);\n        return toPublicPolicy(response);\n      },\n    );\n  }\n\n  /**\n   * Updates the certificate policy for the specified certificate. This operation requires the certificates/update permission.\n   * Gets a certificate's policy\n   * @param certificateName - The name of the certificate\n   * @param policy - The certificate policy\n   * @param options - The optional parameters\n   */\n  public updateCertificatePolicy(\n    certificateName: string,\n    policy: CertificatePolicy,\n    options: UpdateCertificatePolicyOptions = {},\n  ): Promise<CertificatePolicy> {\n    let parsedBody: any;\n    return tracingClient.withSpan(\n      \"CertificateClient.updateCertificatePolicy\",\n      options,\n      async (updatedOptions) => {\n        const corePolicy = toCorePolicy(undefined, policy);\n        await this.client.updateCertificatePolicy(certificateName, corePolicy, updatedOptions);\n        return toPublicPolicy(parsedBody);\n      },\n    );\n  }\n\n  /**\n   * Applies the specified update on the given certificate; the only elements updated are the\n   * certificate's attributes. This operation requires the certificates/update permission.\n   *\n   * Example usage:\n   * ```ts snippet:CertificateClientUpdateCertificate\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { CertificateClient } from \"@azure/keyvault-certificates\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const url = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new CertificateClient(url, credential);\n   *\n   * // You may pass an empty string for version which will update\n   * // the latest version of the certificate\n   * await client.updateCertificateProperties(\"MyCertificate\", \"\", {\n   *   tags: {\n   *     customTag: \"value\",\n   *   },\n   * });\n   * ```\n   * Updates a certificate\n   * @param certificateName - The name of the certificate\n   * @param version - The version of the certificate to update (an empty string will update the latest version)\n   * @param options - The options, including what to update\n   */\n  public updateCertificateProperties(\n    certificateName: string,\n    version: string,\n    options: UpdateCertificatePropertiesOptions = {},\n  ): Promise<KeyVaultCertificate> {\n    return tracingClient.withSpan(\n      \"CertificateClient.updateCertificateProperties\",\n      options,\n      async (updatedOptions) => {\n        const response = await this.client.updateCertificate(\n          certificateName,\n          version,\n          {\n            certificateAttributes: toCoreAttributes(options),\n            tags: options.tags,\n          },\n          updatedOptions,\n        );\n        return getCertificateFromCertificateBundle(response);\n      },\n    );\n  }\n\n  /**\n   * Gets the creation operation associated with a specified certificate. This operation requires the certificates/get permission.\n   * This function returns a Long Running Operation poller that allows you to wait indefinitely until the certificate is fully recovered.\n   *\n   * Example usage:\n   * ```ts snippet:CertificateClientGetCertificateOperation\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { CertificateClient } from \"@azure/keyvault-certificates\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const url = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new CertificateClient(url, credential);\n   *\n   * const createPoller = await client.beginCreateCertificate(\"MyCertificate\", {\n   *   issuerName: \"Self\",\n   *   subject: \"cn=MyCert\",\n   * });\n   *\n   * const poller = await client.getCertificateOperation(\"MyCertificate\");\n   * const pendingCertificate = poller.getResult();\n   *\n   * const certificateOperation = poller.getOperationState().certificateOperation;\n   * console.log(certificateOperation);\n   * ```\n   * Gets a certificate's poller operation\n   * @param certificateName - The name of the certificate\n   * @param options - The optional parameters\n   */\n  public async getCertificateOperation(\n    certificateName: string,\n    options: GetCertificateOperationOptions = {},\n  ): Promise<PollerLikeWithCancellation<CertificateOperationState, KeyVaultCertificateWithPolicy>> {\n    const poller = new CertificateOperationPoller({\n      certificateName,\n      client: this.client,\n      vaultUrl: this.vaultUrl,\n      intervalInMs: options.intervalInMs,\n      resumeFrom: options.resumeFrom,\n      operationOptions: options,\n    });\n    // This will initialize the poller's operation, which pre-populates some necessary properties.\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes the creation operation for a specified certificate that is in the process of being created.\n   * The certificate is no longer created. This operation requires the certificates/update permission.\n   *\n   * Example usage:\n   * ```ts snippet:CertificateClientDeleteCertificateOperation\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { CertificateClient } from \"@azure/keyvault-certificates\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const url = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new CertificateClient(url, credential);\n   *\n   * await client.beginCreateCertificate(\"MyCertificate\", {\n   *   issuerName: \"Self\",\n   *   subject: \"cn=MyCert\",\n   * });\n   * await client.deleteCertificateOperation(\"MyCertificate\");\n   *\n   * await client.getCertificateOperation(\"MyCertificate\");\n   * ```\n   * Delete a certificate's operation\n   * @param certificateName - The name of the certificate\n   * @param options - The optional parameters\n   */\n  public deleteCertificateOperation(\n    certificateName: string,\n    options: DeleteCertificateOperationOptions = {},\n  ): Promise<CertificateOperation> {\n    return tracingClient.withSpan(\n      \"CertificateClient.deleteCertificateOperation\",\n      options,\n      async (updatedOptions) => {\n        const operation = await this.client.deleteCertificateOperation(\n          certificateName,\n          updatedOptions,\n        );\n        return getCertificateOperationFromCoreOperation(certificateName, operation);\n      },\n    );\n  }\n\n  /**\n   * Performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.\n   *\n   * Example usage:\n   * ```ts snippet:CertificateClientMergeCertificate\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { CertificateClient } from \"@azure/keyvault-certificates\";\n   * import { writeFileSync, readFileSync } from \"node:fs\";\n   * import { execSync } from \"node:child_process\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const url = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new CertificateClient(url, credential);\n   *\n   * await client.beginCreateCertificate(\"MyCertificate\", {\n   *   issuerName: \"Unknown\",\n   *   subject: \"cn=MyCert\",\n   * });\n   * const poller = await client.getCertificateOperation(\"MyCertificate\");\n   * const { csr } = poller.getOperationState().certificateOperation!;\n   * const base64Csr = Buffer.from(csr!).toString(\"base64\");\n   * const wrappedCsr = [\n   *   \"-----BEGIN CERTIFICATE REQUEST-----\",\n   *   base64Csr,\n   *   \"-----END CERTIFICATE REQUEST-----\",\n   * ].join(\"\\n\");\n   *\n   * writeFileSync(\"test.csr\", wrappedCsr);\n   *\n   * // Certificate available locally made using:\n   * //   openssl genrsa -out ca.key 2048\n   * //   openssl req -new -x509 -key ca.key -out ca.crt\n   * // You can read more about how to create a fake certificate authority here: https://gist.github.com/Soarez/9688998\n   *\n   * execSync(\"openssl x509 -req -in test.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out test.crt\");\n   * const base64Crt = readFileSync(\"test.crt\").toString().split(\"\\n\").slice(1, -1).join(\"\");\n   *\n   * await client.mergeCertificate(\"MyCertificate\", [Buffer.from(base64Crt)]);\n   * ```\n   * Merges a signed certificate request into a pending certificate\n   * @param certificateName - The name of the certificate\n   * @param x509Certificates - The certificate(s) to merge\n   * @param options - The optional parameters\n   */\n  public mergeCertificate(\n    certificateName: string,\n    x509Certificates: Uint8Array[],\n    options: MergeCertificateOptions = {},\n  ): Promise<KeyVaultCertificateWithPolicy> {\n    return tracingClient.withSpan(\n      \"CertificateClient.mergeCertificate\",\n      options,\n      async (updatedOptions) => {\n        const response = await this.client.mergeCertificate(\n          certificateName,\n          { x509Certificates },\n\n          updatedOptions,\n        );\n        return getCertificateWithPolicyFromCertificateBundle(response);\n      },\n    );\n  }\n\n  /**\n   * Requests that a backup of the specified certificate be downloaded to the client. All versions of the certificate will be downloaded.\n   * This operation requires the certificates/backup permission.\n   *\n   * Example usage:\n   * ```ts snippet:CertificateClientBackupCertificate\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { CertificateClient } from \"@azure/keyvault-certificates\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const url = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new CertificateClient(url, credential);\n   *\n   * await client.beginCreateCertificate(\"MyCertificate\", {\n   *   issuerName: \"Self\",\n   *   subject: \"cn=MyCert\",\n   * });\n   * const backup = await client.backupCertificate(\"MyCertificate\");\n   * ```\n   * Generates a backup of a certificate\n   * @param certificateName - The name of the certificate\n   * @param options - The optional parameters\n   */\n  public backupCertificate(\n    certificateName: string,\n    options: BackupCertificateOptions = {},\n  ): Promise<Uint8Array | undefined> {\n    return tracingClient.withSpan(\n      \"CertificateClient.backupCertificate\",\n      options,\n      async (updatedOptions) => {\n        const response = await this.client.backupCertificate(certificateName, updatedOptions);\n        return response.value;\n      },\n    );\n  }\n\n  /**\n   * Restores a backed up certificate, and all its versions, to a vault. This operation requires the certificates/restore permission.\n   *\n   * Example usage:\n   * ```ts snippet:CertificateClientRestoreCertificateBackup\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { CertificateClient } from \"@azure/keyvault-certificates\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const url = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new CertificateClient(url, credential);\n   *\n   * await client.beginCreateCertificate(\"MyCertificate\", {\n   *   issuerName: \"Self\",\n   *   subject: \"cn=MyCert\",\n   * });\n   * const backup = await client.backupCertificate(\"MyCertificate\");\n   *\n   * const poller = await client.beginDeleteCertificate(\"MyCertificate\");\n   * await poller.pollUntilDone();\n   *\n   * // Some time is required before we're able to restore the certificate\n   * await client.restoreCertificateBackup(backup!);\n   * ```\n   * Restores a certificate from a backup\n   * @param backup - The back-up certificate to restore from\n   * @param options - The optional parameters\n   */\n  public restoreCertificateBackup(\n    backup: Uint8Array,\n    options: RestoreCertificateBackupOptions = {},\n  ): Promise<KeyVaultCertificateWithPolicy> {\n    return tracingClient.withSpan(\n      \"CertificateClient.restoreCertificateBackup\",\n      options,\n      async (updatedOptions) => {\n        const response = await this.client.restoreCertificate(\n          { certificateBundleBackup: backup },\n          updatedOptions,\n        );\n        return getCertificateWithPolicyFromCertificateBundle(response);\n      },\n    );\n  }\n\n  /**\n   * Retrieves the certificates in the current vault which are in a deleted state and ready for recovery or purging. This operation includes deletion-specific\n   * information. This operation requires the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.\n   *\n   * Example usage:\n   * ```ts snippet:CertificateClientListDeletedCertificates\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { CertificateClient } from \"@azure/keyvault-certificates\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const url = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new CertificateClient(url, credential);\n   *\n   * for await (const deletedCertificate of client.listDeletedCertificates()) {\n   *   console.log(deletedCertificate);\n   * }\n   *\n   * for await (const page of client.listDeletedCertificates().byPage()) {\n   *   for (const deletedCertificate of page) {\n   *     console.log(deletedCertificate);\n   *   }\n   * }\n   * ```\n   * Lists deleted certificates\n   * @param options - The optional parameters\n   */\n  public listDeletedCertificates(\n    options: ListDeletedCertificatesOptions = {},\n  ): PagedAsyncIterableIterator<DeletedCertificate> {\n    return mapPagedAsyncIterable(\n      this.client.getDeletedCertificates(options),\n      getDeletedCertificateFromItem,\n    );\n  }\n\n  /**\n   * retrieves the deleted certificate information plus its attributes, such as retention interval, scheduled permanent deletion and the\n   * current deletion recovery level. This operation requires the certificates/get permission.\n   *\n   * Example usage:\n   * ```ts snippet:CertificateClientGetDeletedCertificate\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { CertificateClient } from \"@azure/keyvault-certificates\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const url = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new CertificateClient(url, credential);\n   *\n   * const deletedCertificate = await client.getDeletedCertificate(\"MyDeletedCertificate\");\n   * console.log(\"Deleted certificate:\", deletedCertificate);\n   * ```\n   * Gets a deleted certificate\n   * @param certificateName - The name of the certificate\n   * @param options - The optional parameters\n   */\n  public getDeletedCertificate(\n    certificateName: string,\n    options: GetDeletedCertificateOptions = {},\n  ): Promise<DeletedCertificate> {\n    return tracingClient.withSpan(\n      \"CertificateClient.getDeletedCertificate\",\n      options,\n      async (updatedOptions) => {\n        const response = await this.client.getDeletedCertificate(certificateName, updatedOptions);\n        return getDeletedCertificateFromDeletedCertificateBundle(response);\n      },\n    );\n  }\n\n  /**\n   * Performs an irreversible deletion of the specified certificate, without possibility for recovery. The operation is not available if the\n   * recovery level does not specify 'Purgeable'. This operation requires the certificate/purge permission.\n   *\n   * Example usage:\n   * ```ts snippet:CertificateClientPurgeDeletedCertificate\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { CertificateClient } from \"@azure/keyvault-certificates\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const url = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new CertificateClient(url, credential);\n   *\n   * const deletePoller = await client.beginDeleteCertificate(\"MyCertificate\");\n   * await deletePoller.pollUntilDone();\n   *\n   * // Deleting a certificate takes time, make sure to wait before purging it\n   * client.purgeDeletedCertificate(\"MyCertificate\");\n   * ```\n   * Gets a deleted certificate\n   * @param certificateName - The name of the deleted certificate to purge\n   * @param options - The optional parameters\n   */\n  public async purgeDeletedCertificate(\n    certificateName: string,\n    options: PurgeDeletedCertificateOptions = {},\n  ): Promise<null> {\n    return tracingClient.withSpan(\n      \"CertificateClient.purgeDeletedCertificate\",\n      options,\n      async (updatedOptions) => {\n        await this.client.purgeDeletedCertificate(certificateName, updatedOptions);\n        return null;\n      },\n    );\n  }\n\n  /**\n   * Recovers the deleted certificate in the specified vault. This operation can only be performed on a soft-delete enabled vault. This operation\n   * This function returns a Long Running Operation poller that allows you to wait indefinitely until the certificate is fully recovered.\n   *\n   * This operation requires the certificates/recover permission.\n   *\n   * Example usage:\n   * ```ts snippet:CertificateClientRecoverDeletedCertificate\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { CertificateClient } from \"@azure/keyvault-certificates\";\n   *\n   * const credential = new DefaultAzureCredential();\n   *\n   * const vaultName = \"<YOUR KEYVAULT NAME>\";\n   * const url = `https://${vaultName}.vault.azure.net`;\n   *\n   * const client = new CertificateClient(url, credential);\n   *\n   * const deletePoller = await client.beginDeleteCertificate(\"MyCertificate\");\n   * await deletePoller.pollUntilDone();\n   *\n   * const recoverPoller = await client.beginRecoverDeletedCertificate(\"MyCertificate\");\n   *\n   * // Waiting until it's done\n   * const certificate = await recoverPoller.pollUntilDone();\n   * console.log(certificate);\n   * ```\n   * Recovers a deleted certificate\n   * @param certificateName - The name of the deleted certificate\n   * @param options - The optional parameters\n   */\n  public async beginRecoverDeletedCertificate(\n    certificateName: string,\n    options: BeginRecoverDeletedCertificateOptions = {},\n  ): Promise<PollerLike<RecoverDeletedCertificateState, KeyVaultCertificateWithPolicy>> {\n    const poller = new RecoverDeletedCertificatePoller({\n      certificateName,\n      client: this.client,\n      vaultUrl: this.vaultUrl,\n      ...options,\n      operationOptions: options,\n    });\n    // This will initialize the poller's operation (the recovery of the deleted secret).\n    await poller.poll();\n    return poller;\n  }\n}\n"]}