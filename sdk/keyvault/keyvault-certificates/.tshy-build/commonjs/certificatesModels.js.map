{"version":3,"file":"certificatesModels.js","sourceRoot":"","sources":["../../src/certificatesModels.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAalC;;GAEG;AACU,QAAA,kBAAkB,GAAG,eAAe,CAAC;AA+KlD;;GAEG;AACH,IAAY,oBASX;AATD,WAAY,oBAAoB;IAC9B;;OAEG;IACH,qCAAa,CAAA;IACb;;OAEG;IACH,2CAAmB,CAAA;AACrB,CAAC,EATW,oBAAoB,oCAApB,oBAAoB,QAS/B;AA6LD;;;;GAIG;AACU,QAAA,wBAAwB,GAAG;IACtC,UAAU,EAAE,MAAM;IAClB,OAAO,EAAE,WAAW;CACrB,CAAC;AA4bF,gFAAgF;AAChF,IAAY,6BAiBX;AAjBD,WAAY,6BAA6B;IACvC;;OAEG;IACH,+CAAc,CAAA;IACd;;OAEG;IACH,+CAAc,CAAA;IACd;;OAEG;IACH,+CAAc,CAAA;IACd;;OAEG;IACH,iDAAgB,CAAA;AAClB,CAAC,EAjBW,6BAA6B,6CAA7B,6BAA6B,QAiBxC;AAED,2EAA2E;AAC3E,IAAY,wBAyBX;AAzBD,WAAY,wBAAwB;IAClC;;OAEG;IACH,qCAAS,CAAA;IACT;;OAEG;IACH,4CAAgB,CAAA;IAChB;;OAEG;IACH,uCAAW,CAAA;IACX;;OAEG;IACH,8CAAkB,CAAA;IAClB;;OAEG;IACH,uCAAW,CAAA;IACX;;OAEG;IACH,8CAAkB,CAAA;AACpB,CAAC,EAzBW,wBAAwB,wCAAxB,wBAAwB,QAyBnC;AAED,qEAAqE;AACrE,IAAY,kBAqCX;AArCD,WAAY,kBAAkB;IAC5B;;OAEG;IACH,2DAAqC,CAAA;IACrC;;OAEG;IACH,uDAAiC,CAAA;IACjC;;OAEG;IACH,yDAAmC,CAAA;IACnC;;OAEG;IACH,2DAAqC,CAAA;IACrC;;OAEG;IACH,mDAA6B,CAAA;IAC7B;;OAEG;IACH,iDAA2B,CAAA;IAC3B;;OAEG;IACH,yCAAmB,CAAA;IACnB;;OAEG;IACH,mDAA6B,CAAA;IAC7B;;OAEG;IACH,mDAA6B,CAAA;AAC/B,CAAC,EArCW,kBAAkB,kCAAlB,kBAAkB,QAqC7B","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\nimport type * as coreClient from \"@azure-rest/core-client\";\nimport type { ExtendedCommonClientOptions } from \"@azure/core-http-compat\";\nimport type { CancelOnProgress, PollOperationState } from \"@azure/core-lro\";\nimport type {\n  DeletionRecoveryLevel,\n  KeyUsageType,\n  JsonWebKeyType as CertificateKeyType,\n  JsonWebKeyCurveName as CertificateKeyCurveName,\n} from \"./generated/models/index.js\";\n\n/**\n * The latest supported KeyVault service API version\n */\nexport const LATEST_API_VERSION = \"7.6-preview.2\";\n\n/**\n * The optional parameters accepted by the KeyVault's CertificateClient\n */\nexport interface CertificateClientOptions extends ExtendedCommonClientOptions {\n  /**\n   * The accepted versions of the KeyVault's service API.\n   */\n  serviceVersion?: \"7.0\" | \"7.1\" | \"7.2\" | \"7.3\" | \"7.4\" | \"7.5\" | \"7.6-preview.2\";\n\n  /**\n   * Whether to disable verification that the authentication challenge resource matches the Key Vault domain.\n   * Defaults to false.\n   */\n  disableChallengeResourceVerification?: boolean;\n}\n\n/**\n * The key vault server error.\n */\nexport interface CertificateOperationError {\n  /**\n   * The error code.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly code?: string;\n  /**\n   * The error message.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly message?: string;\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly innerError?: CertificateOperationError;\n}\n\n/**\n * The key vault server error model.\n * @deprecated - Please use {@link CertificateOperationError} instead.\n */\n// This was re-exported as-is from generated code in 4.1; however, we should only be using `CertificateOperationError`.\nexport interface ErrorModel {\n  /**\n   * The error code.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly code?: string;\n  /**\n   * The error message.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly message?: string;\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly innerError?: ErrorModel;\n}\n\n/**\n * A certificate operation is returned in case of asynchronous requests.\n */\nexport interface CertificateOperation {\n  /**\n   * The certificate id.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly id?: string;\n  /**\n   * The name of certificate.\n   */\n  readonly name?: string;\n  /**\n   * Name of the referenced issuer object or reserved names; for example, 'Self' or 'Unknown'.\n   */\n  issuerName?: string;\n  /**\n   * Type of certificate to be requested from the issuer provider.\n   */\n  certificateType?: string;\n  /**\n   * Indicates if the certificates generated under this policy should be published to certificate\n   * transparency logs.\n   */\n  certificateTransparency?: boolean;\n  /**\n   * The certificate signing request (CSR) that is being used in the certificate operation.\n   */\n  csr?: Uint8Array;\n  /**\n   * Indicates if cancellation was requested on the certificate operation.\n   */\n  cancellationRequested?: boolean;\n  /**\n   * Status of the certificate operation.\n   */\n  status?: string;\n  /**\n   * The status details of the certificate operation.\n   */\n  statusDetails?: string;\n  /**\n   * Error encountered, if any, during the certificate operation.\n   */\n  error?: CertificateOperationError;\n  /**\n   * Location which contains the result of the certificate operation.\n   */\n  target?: string;\n  /**\n   * Identifier for the certificate operation.\n   */\n  requestId?: string;\n  /**\n   * The vault URI.\n   */\n  readonly vaultUrl?: string;\n}\n\n/**\n * Defines values for contentType.\n * Possible values include: 'application/x-pem-file', 'application/x-pkcs12'\n * @readonly\n */\nexport type CertificateContentType = \"application/x-pem-file\" | \"application/x-pkcs12\" | undefined;\n\n/**\n * An interface representing a certificate without the certificate's policy\n */\nexport interface KeyVaultCertificate {\n  /**\n   * CER contents of x509 certificate.\n   */\n  cer?: Uint8Array;\n  /**\n   * Certificate identifier.\n   * **NOTE: This property will not be serialized. It can only be populated by\n   * the server.**\n   */\n  id?: string;\n  /**\n   * The key id.\n   * **NOTE: This property will not be serialized. It can only be populated by\n   * the server.**\n   */\n  readonly keyId?: string;\n  /**\n   * The secret id.\n   * **NOTE: This property will not be serialized. It can only be populated by\n   * the server.**\n   */\n  readonly secretId?: string;\n  /**\n   * The name of certificate.\n   */\n  readonly name: string;\n  /**\n   * The properties of the certificate\n   */\n  properties: CertificateProperties;\n}\n\n/**\n * An interface representing a certificate with its policy\n */\nexport interface KeyVaultCertificateWithPolicy extends KeyVaultCertificate {\n  /**\n   * The management policy.\n   * **NOTE: This property will not be serialized. It can only be populated by\n   * the server.**\n   */\n  readonly policy?: CertificatePolicy;\n}\n\n/**\n * Well known issuers for choosing a default\n */\nexport enum WellKnownIssuerNames {\n  /**\n   * For self signed certificates\n   */\n  Self = \"Self\",\n  /**\n   * For certificates whose issuer will be defined later\n   */\n  Unknown = \"Unknown\",\n}\n\n/**\n * An array with one property at minimum.\n */\nexport type ArrayOneOrMore<T> = {\n  0: T;\n} & Array<T>;\n\n/**\n * An interface representing the alternative names of the subject of a certificate policy.\n */\nexport interface SubjectAlternativeNamesAll {\n  /**\n   * Email addresses.\n   */\n  emails: ArrayOneOrMore<string>;\n  /**\n   * Domain names.\n   */\n  dnsNames: ArrayOneOrMore<string>;\n  /**\n   * User principal names.\n   */\n  userPrincipalNames: ArrayOneOrMore<string>;\n}\n\n/**\n * Alternatives to the subject property.\n * If present, it should at least have one of the properties of SubjectAlternativeNamesAll.\n */\nexport type SubjectAlternativeNames = RequireAtLeastOne<SubjectAlternativeNamesAll>;\n\n/**\n * Details of the organization administrator of the certificate issuer.\n */\nexport interface AdministratorContact {\n  /**\n   * First name.\n   */\n  firstName?: string;\n  /**\n   * Last name.\n   */\n  lastName?: string;\n  /**\n   * Email address.\n   */\n  email?: string;\n  /**\n   * Phone number.\n   */\n  phone?: string;\n}\n\n/**\n * Action and its trigger that will be performed by Key Vault over the lifetime of a certificate.\n */\nexport interface LifetimeAction {\n  /**\n   * Percentage of lifetime at which to trigger. Value should be between 1 and 99.\n   */\n  lifetimePercentage?: number;\n  /**\n   * Days before expiry to attempt renewal. Value should be between 1 and validity_in_months\n   * multiplied by 27. If validity_in_months is 36, then value should be between 1 and 972 (36 *\n   * 27).\n   */\n  daysBeforeExpiry?: number;\n  /**\n   * The action that will be executed.\n   */\n  action?: CertificatePolicyAction;\n}\n\n/**\n * The action that will be executed.\n */\nexport type CertificatePolicyAction = \"EmailContacts\" | \"AutoRenew\";\n\n/**\n * The action that will be executed.\n * @deprecated Use {@link CertificatePolicyAction} instead.\n */\n// Re-exported for backwards compatibility, at some point both ActionType and CertificatePolicyAction were exported in the public API.\nexport type ActionType = CertificatePolicyAction;\n\n/**\n * An interface representing a certificate's policy (without the subject properties).\n */\nexport interface CertificatePolicyProperties {\n  /**\n   * Indicates if the certificates generated under this policy should be published to certificate\n   * transparency logs.\n   */\n  certificateTransparency?: boolean;\n  /**\n   * The media type (MIME type).\n   *\n   * Set to `application/x-pkcs12` when the certificate contains your PKCS#12/PFX bytes,\n   * or to `application/x-pem-file` when the certificate contains your ASCII PEM-encoded bytes.\n   */\n  contentType?: CertificateContentType;\n  /**\n   * Type of certificate to be requested from the issuer provider.\n   */\n  certificateType?: string;\n  /**\n   * When the certificate was created.\n   */\n  readonly createdOn?: Date;\n  /**\n   * Determines whether the object is enabled.\n   */\n  enabled?: boolean;\n  /**\n   * Whether or not the certificate can be exported\n   */\n  exportable?: boolean;\n  /**\n   * The enhanced key usage.\n   */\n  enhancedKeyUsage?: string[];\n  /**\n   * Name of the referenced issuer object or reserved names; for example, 'Self' or 'Unknown'.\n   */\n  issuerName?: WellKnownIssuerNames | string;\n  /**\n   * Elliptic curve name. Possible values include: 'P-256', 'P-384', 'P-521', 'P-256K'\n   */\n  keyCurveName?: CertificateKeyCurveName;\n  /**\n   * The key size in bits. For example: 2048, 3072, or 4096 for RSA.\n   */\n  keySize?: number;\n  /**\n   * The type of key pair to be used for the certificate. Possible values include: 'EC', 'EC-HSM',\n   * 'RSA', 'RSA-HSM', 'oct'\n   */\n  keyType?: CertificateKeyType;\n  /**\n   * List of key usages.\n   */\n  keyUsage?: KeyUsageType[];\n  /**\n   * Actions that will be performed by Key Vault over the lifetime of a certificate.\n   */\n  lifetimeActions?: LifetimeAction[];\n  /**\n   * Indicates if the same key pair will be used on certificate renewal.\n   */\n  reuseKey?: boolean;\n  /**\n   * When the object was updated.\n   */\n  readonly updatedOn?: Date;\n  /**\n   * The duration that the certificate is valid in months.\n   */\n  validityInMonths?: number;\n}\n\n/**\n * An interface representing the possible subject properties of a certificate's policy.\n * The final type requires at least one of these properties to exist.\n */\nexport interface PolicySubjectProperties {\n  /**\n   * The subject name. Should be a valid X509 distinguished Name.\n   */\n  subject: string;\n  /**\n   * The subject alternative names.\n   */\n  subjectAlternativeNames: SubjectAlternativeNames;\n}\n\n/**\n * An type representing a certificate's policy with at least one of the subject properties.\n */\nexport type CertificatePolicy = CertificatePolicyProperties &\n  RequireAtLeastOne<PolicySubjectProperties>;\n\n/**\n * A type representing a certificate's policy for import which does not require a SAN or a Subject\n */\nexport type ImportCertificatePolicy = CertificatePolicyProperties &\n  Partial<PolicySubjectProperties>;\n\n/**\n * The DefaultCertificatePolicy exports values that\n * are useful as default parameters to methods that\n * modify the certificate's policy.\n */\nexport const DefaultCertificatePolicy = {\n  issuerName: \"Self\",\n  subject: \"cn=MyCert\",\n};\n\n/**\n * An interface representing the properties of a certificate\n */\nexport interface CertificateProperties {\n  /**\n   * When the certificate was created.\n   */\n  readonly createdOn?: Date;\n  /**\n   * Determines whether the object is enabled.\n   */\n  enabled?: boolean;\n  /**\n   * Expiry date in UTC.\n   */\n  readonly expiresOn?: Date;\n  /**\n   * Certificate identifier.\n   * **NOTE: This property will not be serialized. It can only be populated by\n   * the server.**\n   */\n  readonly id?: string;\n  /**\n   * The name of certificate.\n   */\n  readonly name?: string;\n  /**\n   * Not before date in UTC.\n   */\n  notBefore?: Date;\n  /**\n   * Reflects the deletion recovery level currently in effect for certificates in the current\n   * vault. If it contains 'Purgeable', the certificate can be permanently deleted by a privileged\n   * user; otherwise, only the system can purge the certificate, at the end of the retention\n   * interval. Possible values include: 'Purgeable', 'Recoverable+Purgeable', 'Recoverable',\n   * 'Recoverable+ProtectedSubscription'\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly recoveryLevel?: DeletionRecoveryLevel;\n  /**\n   * Application specific\n   * metadata in the form of key-value pairs.\n   */\n  tags?: CertificateTags;\n  /**\n   * When the issuer was updated.\n   */\n  readonly updatedOn?: Date;\n  /**\n   * The vault URI.\n   */\n  readonly vaultUrl?: string;\n  /**\n   * The version of certificate. May be undefined.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly version?: string;\n  /**\n   * Thumbprint of the certificate.\n   */\n  readonly x509Thumbprint?: Uint8Array;\n  /**\n   * Thumbprint of the certifiate encoded as a hex string.\n   */\n  readonly x509ThumbprintString?: string;\n  /**\n   * The retention dates of the softDelete data.\n   * The value should be `>=7` and `<=90` when softDelete enabled.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  recoverableDays?: number;\n  /**\n   * Specifies whether the certificate chain preserves its original order. The default value is false, which sets the leaf certificate at index 0.\n   */\n  preserveCertificateOrder?: boolean;\n}\n\n/**\n * An interface representing a deleted certificate.\n */\nexport interface DeletedCertificate extends KeyVaultCertificateWithPolicy {\n  /**\n   * The time when the certificate was deleted, in UTC\n   * **NOTE: This property will not be serialized. It can only be populated by\n   * the server.**\n   */\n  readonly deletedOn?: Date;\n  /**\n   * The url of the recovery object, used to\n   * identify and recover the deleted certificate.\n   */\n  readonly recoveryId?: string;\n  /**\n   * The time when the certificate is scheduled\n   * to be purged, in UTC\n   * **NOTE: This property will not be serialized. It can only be populated by\n   * the server.**\n   */\n  readonly scheduledPurgeDate?: Date;\n}\n\n/**\n * An interface representing the optional parameters that can be\n * passed to {@link beginCreateCertificate}, {@link beginDeleteCertificate} and {@link beginRecoverDeletedCertificate}\n */\nexport interface CertificatePollerOptions extends coreClient.OperationOptions {\n  /**\n   * Time between each polling\n   */\n  intervalInMs?: number;\n  /**\n   * A serialized poller, used to resume an existing operation\n   */\n  resumeFrom?: string;\n}\n\n/**\n * An interface representing the optional parameters that can be\n * passed to {@link beginCreateCertificate}\n */\nexport interface BeginCreateCertificateOptions\n  extends CreateCertificateOptions,\n    CertificatePollerOptions {}\n\n/**\n * An interface representing the optional parameters that can be\n * passed to {@link beginDeleteCertificate}\n */\nexport type BeginDeleteCertificateOptions = CertificatePollerOptions;\n\n/**\n * An interface representing the optional parameters that can be\n * passed to {@link beginRecoverDeletedCertificate}\n */\nexport type BeginRecoverDeletedCertificateOptions = CertificatePollerOptions;\n\n/**\n * Options for {@link getCertificateOperation}.\n */\nexport type GetCertificateOperationOptions = CertificatePollerOptions;\n\n/**\n * Options for {@link createCertificate}.\n */\nexport interface CreateCertificateOptions\n  extends CertificateProperties,\n    coreClient.OperationOptions {}\n\n/**\n * Options for {@link cancelCertificateOperation}.\n */\nexport type CancelCertificateOperationOptions = coreClient.OperationOptions;\n\n/**\n * Options for {@link backupCertificate}.\n */\nexport type BackupCertificateOptions = coreClient.OperationOptions;\n\n/**\n * Options for {@link deleteCertificateOperation}.\n */\nexport type DeleteCertificateOperationOptions = coreClient.OperationOptions;\n\n/**\n * Options for {@link deleteCertificate}.\n * @internal\n */\nexport type DeleteCertificateOptions = coreClient.OperationOptions;\n\n/**\n * Options for {@link deleteContacts}.\n */\nexport type DeleteContactsOptions = coreClient.OperationOptions;\n\n/**\n * Options for {@link importCertificate}.\n */\nexport interface ImportCertificateOptions extends coreClient.OperationOptions {\n  /**\n   * Determines whether the object is enabled.\n   */\n  enabled?: boolean;\n  /**\n   * If the private key in base64EncodedCertificate is encrypted, the password used for encryption.\n   */\n  password?: string;\n  /**\n   * The management policy.\n   */\n  policy?: ImportCertificatePolicy;\n  /**\n   * Application specific\n   * metadata in the form of key-value pairs.\n   */\n  tags?: CertificateTags;\n  /**\n   * Specifies whether the certificate chain preserves its original order. The default value is false, which sets the leaf certificate at index 0.\n   */\n  preserveCertificateOrder?: boolean;\n}\n\n/**\n * Options for {@link deleteIssuer}.\n */\nexport type DeleteIssuerOptions = coreClient.OperationOptions;\n\n/**\n * Options for {@link setContacts}.\n */\nexport type SetContactsOptions = coreClient.OperationOptions;\n\n/**\n * Options for {@link createIssuer}.\n */\nexport interface CreateIssuerOptions extends coreClient.OperationOptions {\n  /**\n   * The user name/account name/account id.\n   */\n  accountId?: string;\n  /**\n   * The password/secret/account key.\n   */\n  password?: string;\n  /**\n   * Id of the organization.\n   */\n  organizationId?: string;\n  /**\n   * Details of the organization's administrator contacts, as provided to the issuer.\n   */\n  administratorContacts?: AdministratorContact[];\n  /**\n   * Determines whether the object is enabled.\n   */\n  enabled?: boolean;\n}\n\n/**\n * Options for {@link purgeDeletedCertificate}.\n */\nexport type PurgeDeletedCertificateOptions = coreClient.OperationOptions;\n\n/**\n * Options for {@link updateIssuer}.\n */\nexport interface UpdateIssuerOptions extends CreateIssuerOptions {\n  /**\n   * The issuer provider.\n   */\n  provider?: string;\n}\n\n/**\n * Options for {@link getContacts}.\n */\nexport type GetContactsOptions = coreClient.OperationOptions;\n\n/**\n * Options for {@link getIssuer}.\n */\nexport type GetIssuerOptions = coreClient.OperationOptions;\n\n/**\n * Options for {@link getPlainCertificateOperation}.\n */\nexport type GetPlainCertificateOperationOptions = coreClient.OperationOptions;\n\n/**\n * Options for {@link getCertificateVersion}.\n */\nexport type GetCertificateVersionOptions = coreClient.OperationOptions;\n\n/**\n * Options for {@link getCertificatePolicy}.\n */\nexport type GetCertificatePolicyOptions = coreClient.OperationOptions;\n\n/**\n * Options for {@link getDeletedCertificate}.\n */\nexport type GetDeletedCertificateOptions = coreClient.OperationOptions;\n\n/**\n * Options for {@link getCertificate}.\n */\nexport type GetCertificateOptions = coreClient.OperationOptions;\n\n/**\n * An interface representing the shape of the Certificate Tags. The tags are just string key-value pairs.\n */\nexport type CertificateTags = { [propertyName: string]: string };\n\n/**\n * Options for {@link updateCertificate}.\n */\nexport interface UpdateCertificatePropertiesOptions\n  extends CertificateProperties,\n    coreClient.OperationOptions {}\n\n/**\n * Options for {@link updateCertificatePolicy}.\n */\nexport type UpdateCertificatePolicyOptions = coreClient.OperationOptions;\n\n/**\n * An interface representing the properties of a certificate issuer\n */\nexport interface IssuerProperties {\n  /**\n   * Certificate Identifier.\n   */\n  id?: string;\n  /**\n   * Name of the issuer.\n   */\n  readonly name?: string;\n  /**\n   * The issuer provider.\n   */\n  provider?: string;\n}\n\n/**\n * An interface representing the properties of an issuer.\n */\nexport interface CertificateIssuer extends IssuerProperties {\n  /**\n   * Determines whether the object is enabled.\n   */\n  enabled?: boolean;\n  /**\n   * When the issuer was created.\n   */\n  readonly createdOn?: Date;\n  /**\n   * When the issuer was updated.\n   */\n  readonly updatedOn?: Date;\n  /**\n   * The user name/account name/account id.\n   */\n  accountId?: string;\n  /**\n   * The password/secret/account key.\n   */\n  password?: string;\n  /**\n   * Id of the organization.\n   */\n  organizationId?: string;\n  /**\n   * Details of the organization's administrator contacts, as provided to the issuer.\n   */\n  administratorContacts?: AdministratorContact[];\n}\n\n/**\n * An interface representing optional parameters for CertificateClient paged operations passed to {@link listPropertiesOfCertificates}.\n */\nexport interface ListPropertiesOfCertificatesOptions extends coreClient.OperationOptions {\n  /**\n   * Specifies whether to include certificates which are not completely provisioned.\n   */\n  includePending?: boolean;\n}\n\n/**\n * An interface representing optional parameters for CertificateClient paged operations passed to {@link listPropertiesOfCertificateVersions}.\n */\nexport type ListPropertiesOfCertificateVersionsOptions = coreClient.OperationOptions;\n\n/**\n * An interface representing optional parameters for CertificateClient paged operations passed to {@link listPropertiesOfIssuers}.\n */\nexport type ListPropertiesOfIssuersOptions = coreClient.OperationOptions;\n\n/**\n * An interface representing optional parameters for CertificateClient paged operations passed to {@link listDeletedCertificates}.\n */\nexport interface ListDeletedCertificatesOptions extends coreClient.OperationOptions {\n  /**\n   * Specifies whether to include certificates which are not completely provisioned.\n   */\n  includePending?: boolean;\n}\n\n/**\n * An interface representing optional parameters for {@link mergeCertificate}.\n */\nexport type MergeCertificateOptions = coreClient.OperationOptions;\n\n/**\n * An interface representing optional parameters for {@link recoverDeletedCertificate}.\n * @internal\n */\nexport type RecoverDeletedCertificateOptions = coreClient.OperationOptions;\n\n/**\n * An interface representing optional parameters for {@link restoreCertificateBackup}.\n */\nexport type RestoreCertificateBackupOptions = coreClient.OperationOptions;\n\n/**\n * The shape of the contact information for the vault certificates.\n */\nexport interface CertificateContactAll {\n  /**\n   * Email address of the contact\n   */\n  email: string;\n  /**\n   * Name of the contact\n   */\n  name: string;\n  /**\n   * Phone number of the contact\n   */\n  phone: string;\n}\n\n/**\n * RequireAtLeastOne helps create a type where at least one of the properties of an interface (can be any property) is required to exist.\n *\n * This works because of TypeScript's utility types: https://www.typescriptlang.org/docs/handbook/utility-types.html\n * Let's examine it:\n * - `[K in keyof T]-?` this property (K) is valid only if it has the same name as any property of T.\n * - `Required<Pick<T, K>>` makes a new type from T with just the current property in the iteration, and marks it as required\n * - `Partial<Pick<T, Exclude<keyof T, K>>>` makes a new type with all the properties of T, except from the property K.\n * - `&` is what unites the type with only one required property from `Required<...>` with all the optional properties from `Partial<...>`.\n * - `[keyof T]` ensures that only properties of T are allowed.\n */\nexport type RequireAtLeastOne<T> = {\n  [K in keyof T]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<keyof T, K>>>;\n}[keyof T];\n\n/**\n * The contact information for the vault certificates.\n * Each contact will have at least just one of the properties of CertificateContactAll,\n * which are: emailAddress, name or phone.\n */\nexport type CertificateContact = RequireAtLeastOne<CertificateContactAll> | undefined;\n\n/** Known values of {@link CertificateKeyCurveName} that the service accepts. */\nexport enum KnownCertificateKeyCurveNames {\n  /**\n   * P-256 Key Curve.\n   */\n  P256 = \"P-256\",\n  /**\n   * P-384 Key Curve.\n   */\n  P384 = \"P-384\",\n  /**\n   * P-521 Key Curve.\n   */\n  P521 = \"P-521\",\n  /**\n   * P-256K Key Curve.\n   */\n  P256K = \"P-256K\",\n}\n\n/** Known values of {@link CertificateKeyType} that the service accepts. */\nexport enum KnownCertificateKeyTypes {\n  /**\n   * EC Key Type.\n   */\n  EC = \"EC\",\n  /**\n   * EC-HSM Key Type.\n   */\n  ECHSM = \"EC-HSM\",\n  /**\n   * RSA Key Type.\n   */\n  RSA = \"RSA\",\n  /**\n   * RSA-HSM Key Type.\n   */\n  RSAHSM = \"RSA-HSM\",\n  /**\n   * oct Key Type\n   */\n  Oct = \"oct\",\n  /**\n   * oct-HSM Key Type\n   */\n  OctHSM = \"oct-HSM\",\n}\n\n/** Known values of {@link KeyUsageType} that the service accepts. */\nexport enum KnownKeyUsageTypes {\n  /**\n   * DigitalSignature Usage Type.\n   */\n  DigitalSignature = \"digitalSignature\",\n  /**\n   * NonRepudiation Usage Type.\n   */\n  NonRepudiation = \"nonRepudiation\",\n  /**\n   * KeyEncipherment Usage Type.\n   */\n  KeyEncipherment = \"keyEncipherment\",\n  /**\n   * DataEncipherment Usage Type.\n   */\n  DataEncipherment = \"dataEncipherment\",\n  /**\n   * KeyAgreement Usage Type.\n   */\n  KeyAgreement = \"keyAgreement\",\n  /**\n   * KeyCertSign Usage Type.\n   */\n  KeyCertSign = \"keyCertSign\",\n  /**\n   * CRLSign Usage Type.\n   */\n  CRLSign = \"cRLSign\",\n  /**\n   * EncipherOnly Usage Type.\n   */\n  EncipherOnly = \"encipherOnly\",\n  /**\n   * DecipherOnly Usage Type.\n   */\n  DecipherOnly = \"decipherOnly\",\n}\n\n/**\n * Abstract representation of a poller, intended to expose just the minimal API that the user needs to work with.\n */\nexport interface PollerLikeWithCancellation<TState extends PollOperationState<TResult>, TResult> {\n  /**\n   * Returns a promise that will resolve once a single polling request finishes.\n   * It does this by calling the update method of the Poller's operation.\n   */\n  poll(options?: { abortSignal?: AbortSignalLike }): Promise<void>;\n  /**\n   * Returns a promise that will resolve once the underlying operation is completed.\n   */\n  pollUntilDone(): Promise<TResult>;\n  /**\n   * Invokes the provided callback after each polling is completed,\n   * sending the current state of the poller's operation.\n   *\n   * It returns a method that can be used to stop receiving updates on the given callback function.\n   */\n  onProgress(callback: (state: TState) => void): CancelOnProgress;\n  /**\n   * Returns true if the poller has finished polling.\n   */\n  isDone(): boolean;\n  /**\n   * Stops the poller. After this, no manual or automated requests can be sent.\n   */\n  stopPolling(): void;\n  /**\n   * Returns true if the poller is stopped.\n   */\n  isStopped(): boolean;\n  /**\n   * Attempts to cancel the underlying operation.\n   */\n  cancelOperation(options?: { abortSignal?: AbortSignalLike }): Promise<void>;\n  /**\n   * Returns the state of the operation.\n   * The TState defined in PollerLike can be a subset of the TState defined in\n   * the Poller implementation.\n   */\n  getOperationState(): TState;\n  /**\n   * Returns the result value of the operation,\n   * regardless of the state of the poller.\n   * It can return undefined or an incomplete form of the final TResult value\n   * depending on the implementation.\n   */\n  getResult(): TResult | undefined;\n  /**\n   * Returns a serialized version of the poller's operation\n   * by invoking the operation's toString method.\n   */\n  toString(): string;\n}\n"]}