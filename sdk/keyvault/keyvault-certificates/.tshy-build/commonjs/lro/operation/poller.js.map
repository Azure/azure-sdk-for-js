{"version":3,"file":"poller.js","sourceRoot":"","sources":["../../../../src/lro/operation/poller.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAGlC,iDAAmE;AAGnE,kFAAwF;AAIxF;;GAEG;AACH,MAAa,0BAA2B,SAAQ,wDAG/C;IACC,YAAY,OAA0C;QACpD,MAAM,EAAE,MAAM,EAAE,eAAe,EAAE,gBAAgB,EAAE,YAAY,GAAG,IAAI,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC;QAE/F,IAAI,KAA4C,CAAC;QAEjD,IAAI,UAAU,EAAE,CAAC;YACf,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;QACvC,CAAC;QAED,MAAM,SAAS,GAAG,IAAI,gDAAiC,iCAEhD,KAAK,KACR,eAAe,KAEjB,MAAM,EACN,gBAAgB,CACjB,CAAC;QAEF,KAAK,CAAC,SAAS,CAAC,CAAC;QAEjB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAED;;OAEG;IACI,iBAAiB;QACtB,uCACK,IAAA,yCAAU,EAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KACnC,oBAAoB,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,oBAAoB,IAC/D;IACJ,CAAC;CACF;AApCD,gEAoCC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { CertificateOperationState } from \"./operation.js\";\nimport { CertificateOperationPollOperation } from \"./operation.js\";\nimport type { KeyVaultCertificateWithPolicy } from \"../../certificatesModels.js\";\nimport type { KeyVaultCertificatePollerOptions } from \"../keyVaultCertificatePoller.js\";\nimport { KeyVaultCertificatePoller, cleanState } from \"../keyVaultCertificatePoller.js\";\n\nexport interface CertificateOperationPollerOptions extends KeyVaultCertificatePollerOptions {}\n\n/**\n * Class that creates a poller that waits until a certificate finishes being created\n */\nexport class CertificateOperationPoller extends KeyVaultCertificatePoller<\n  CertificateOperationState,\n  KeyVaultCertificateWithPolicy\n> {\n  constructor(options: CertificateOperationPollerOptions) {\n    const { client, certificateName, operationOptions, intervalInMs = 2000, resumeFrom } = options;\n\n    let state: CertificateOperationState | undefined;\n\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n\n    const operation = new CertificateOperationPollOperation(\n      {\n        ...state,\n        certificateName,\n      },\n      client,\n      operationOptions,\n    );\n\n    super(operation);\n\n    this.intervalInMs = intervalInMs;\n  }\n\n  /**\n   * Gets the public state of the polling operation\n   */\n  public getOperationState(): CertificateOperationState {\n    return {\n      ...cleanState(this.operation.state),\n      certificateOperation: this.operation.state.certificateOperation,\n    };\n  }\n}\n"]}