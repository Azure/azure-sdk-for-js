{"version":3,"file":"operation.js","sourceRoot":"","sources":["../../../../src/lro/create/operation.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\nimport type { OperationOptions } from \"@azure-rest/core-client\";\nimport type {\n  KeyVaultCertificateWithPolicy,\n  CreateCertificateOptions,\n  CertificatePolicy,\n  GetCertificateOptions,\n  GetPlainCertificateOperationOptions,\n  CancelCertificateOperationOptions,\n} from \"../../certificatesModels.js\";\nimport type { CertificateOperation } from \"../../generated/models/index.js\";\nimport type { KeyVaultCertificatePollOperationState } from \"../keyVaultCertificatePoller.js\";\nimport { KeyVaultCertificatePollOperation } from \"../keyVaultCertificatePoller.js\";\nimport type { KeyVaultClient } from \"../../generated/keyVaultClient.js\";\nimport {\n  getCertificateOperationFromCoreOperation,\n  getCertificateWithPolicyFromCertificateBundle,\n  toCoreAttributes,\n  toCorePolicy,\n} from \"../../transformations.js\";\nimport { tracingClient } from \"../../tracing.js\";\n\n/**\n * The public representation of the CreateCertificatePoller operation state.\n */\nexport type CreateCertificateState =\n  KeyVaultCertificatePollOperationState<KeyVaultCertificateWithPolicy>;\n\n/**\n * An interface representing the state of a create certificate's poll operation\n */\nexport interface CreateCertificatePollOperationState\n  extends KeyVaultCertificatePollOperationState<KeyVaultCertificateWithPolicy> {\n  /**\n   * The policy of the certificate.\n   */\n  certificatePolicy?: CertificatePolicy;\n  /**\n   * Optional parameters sent to createCertificates\n   */\n  createCertificateOptions: CreateCertificateOptions;\n  /**\n   * The operation of the certificate\n   */\n  certificateOperation?: CertificateOperation;\n}\n\n/**\n * An interface representing a create certificate's poll operation\n */\nexport class CreateCertificatePollOperation extends KeyVaultCertificatePollOperation<\n  CreateCertificatePollOperationState,\n  KeyVaultCertificateWithPolicy\n> {\n  constructor(\n    public state: CreateCertificatePollOperationState,\n    private client: KeyVaultClient,\n    private operationOptions: OperationOptions = {},\n  ) {\n    super(state);\n  }\n\n  /**\n   * Creates a new certificate. If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.\n   */\n  private createCertificate(\n    certificateName: string,\n    certificatePolicy: CertificatePolicy,\n    options: CreateCertificateOptions = {},\n  ): Promise<KeyVaultCertificateWithPolicy> {\n    return tracingClient.withSpan(\n      \"CreateCertificatePoller.createCertificate\",\n      options,\n      async (updatedOptions) => {\n        const id = options.id;\n        const certificateAttributes = toCoreAttributes(options);\n        const corePolicy = toCorePolicy(id, certificatePolicy, certificateAttributes);\n        const result = await this.client.createCertificate(\n          certificateName,\n          {\n            certificatePolicy: corePolicy,\n            certificateAttributes,\n            tags: updatedOptions.tags,\n            preserveCertOrder: updatedOptions.preserveCertificateOrder,\n          },\n          updatedOptions,\n        );\n\n        return getCertificateWithPolicyFromCertificateBundle(result);\n      },\n    );\n  }\n\n  /**\n   * Gets the latest information available from a specific certificate, including the certificate's policy. This operation requires the certificates/get permission.\n   */\n  private getCertificate(\n    certificateName: string,\n    options: GetCertificateOptions = {},\n  ): Promise<KeyVaultCertificateWithPolicy> {\n    return tracingClient.withSpan(\n      \"CreateCertificatePoller.getCertificate\",\n      options,\n      async (updatedOptions) => {\n        const result = await this.client.getCertificate(certificateName, \"\", updatedOptions);\n\n        return getCertificateWithPolicyFromCertificateBundle(result);\n      },\n    );\n  }\n\n  /**\n   * Gets the certificate operation.\n   */\n  private getPlainCertificateOperation(\n    certificateName: string,\n    options: GetPlainCertificateOperationOptions = {},\n  ): Promise<CertificateOperation> {\n    return tracingClient.withSpan(\n      \"CreateCertificatePoller.getPlainCertificateOperation\",\n      options,\n      async (updatedOptions) => {\n        const response = await this.client.getCertificateOperation(certificateName, {\n          ...updatedOptions,\n        });\n        return getCertificateOperationFromCoreOperation(certificateName, response);\n      },\n    );\n  }\n\n  /**\n   * Cancels a certificate creation operation that is already in progress. This operation requires the certificates/update permission.\n   */\n  private cancelCertificateOperation(\n    certificateName: string,\n    options: CancelCertificateOperationOptions = {},\n  ): Promise<CertificateOperation> {\n    return tracingClient.withSpan(\n      \"CreateCertificatePoller.cancelCertificateOperation\",\n      options,\n      async (updatedOptions) => {\n        const response = await this.client.updateCertificateOperation(\n          certificateName,\n          { cancellationRequested: true },\n\n          updatedOptions,\n        );\n        return getCertificateOperationFromCoreOperation(certificateName, response);\n      },\n    );\n  }\n\n  /**\n   * Reaches to the service and updates the create certificate's poll operation.\n   */\n  async update(\n    this: CreateCertificatePollOperation,\n    options: {\n      abortSignal?: AbortSignalLike;\n      fireProgress?: (state: CreateCertificatePollOperationState) => void;\n    } = {},\n  ): Promise<CreateCertificatePollOperation> {\n    const state = this.state;\n    const { certificateName, certificatePolicy, createCertificateOptions } = state;\n\n    if (options.abortSignal) {\n      this.operationOptions.abortSignal = options.abortSignal;\n      createCertificateOptions.abortSignal = options.abortSignal;\n    }\n\n    if (!state.isStarted) {\n      state.isStarted = true;\n      state.result = await this.createCertificate(\n        certificateName,\n        certificatePolicy!,\n        createCertificateOptions,\n      );\n      this.state.certificateOperation = await this.getPlainCertificateOperation(\n        certificateName,\n        this.operationOptions,\n      );\n    } else if (!state.isCompleted) {\n      this.state.certificateOperation = await this.getPlainCertificateOperation(\n        certificateName,\n        this.operationOptions,\n      );\n    }\n\n    if (state.certificateOperation && state.certificateOperation.status !== \"inProgress\") {\n      state.isCompleted = true;\n      state.result = await this.getCertificate(certificateName, this.operationOptions);\n      if (state.certificateOperation.error) {\n        state.error = new Error(state.certificateOperation.error.message);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Reaches to the service and cancels the certificate's operation, also updating the certificate's poll operation\n   */\n  async cancel(\n    this: CreateCertificatePollOperation,\n    options: { abortSignal?: AbortSignal } = {},\n  ): Promise<CreateCertificatePollOperation> {\n    const state = this.state;\n    const { certificateName } = state;\n\n    if (options.abortSignal) {\n      this.operationOptions.abortSignal = options.abortSignal;\n    }\n\n    state.certificateOperation = await this.cancelCertificateOperation(\n      certificateName,\n      this.operationOptions,\n    );\n\n    this.state.isCancelled = true;\n    return this;\n  }\n}\n"]}