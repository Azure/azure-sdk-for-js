{"version":3,"file":"transformations.js","sourceRoot":"","sources":["../../src/transformations.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { uint8ArrayToString } from \"@azure/core-util\";\nimport type {\n  ArrayOneOrMore,\n  CertificateContentType,\n  CertificateOperation,\n  CertificateIssuer,\n  CertificatePolicy,\n  CertificateProperties,\n  DeletedCertificate,\n  KeyVaultCertificate,\n  KeyVaultCertificateWithPolicy,\n  SubjectAlternativeNames,\n  CertificateContact,\n  CertificateOperationError,\n} from \"./certificatesModels.js\";\nimport type {\n  CertificateAttributes,\n  CertificateBundle,\n  CertificatePolicy as CoreCertificatePolicy,\n  DeletedCertificateBundle,\n  DeletedCertificateItem,\n  IssuerAttributes,\n  IssuerBundle,\n  SubjectAlternativeNames as CoreSubjectAlternativeNames,\n  X509CertificateProperties,\n  CertificateOperation as CoreCertificateOperation,\n  Contacts as CoreContacts,\n  JsonWebKeyType as CertificateKeyType,\n  ErrorModel,\n} from \"./generated/models/index.js\";\nimport { parseKeyVaultCertificateIdentifier } from \"./identifier.js\";\nimport type { PagedAsyncIterableIterator } from \"@azure/core-paging\";\n\nexport function toCoreAttributes(properties: CertificateProperties): CertificateAttributes {\n  return {\n    recoveryLevel: properties.recoveryLevel,\n    enabled: properties.enabled,\n    notBefore: properties.notBefore,\n    expires: properties.expiresOn,\n    created: properties.createdOn,\n    updated: properties.updatedOn,\n  };\n}\n\nexport function toCorePolicy(\n  id: string | undefined,\n  policy: CertificatePolicy,\n  attributes: CertificateAttributes = {},\n): CoreCertificatePolicy {\n  let subjectAlternativeNames: CoreSubjectAlternativeNames = {};\n  if (policy.subjectAlternativeNames) {\n    subjectAlternativeNames = {\n      emails: policy.subjectAlternativeNames.emails,\n      dnsNames: policy.subjectAlternativeNames.dnsNames,\n      upns: policy.subjectAlternativeNames.userPrincipalNames,\n    };\n  }\n\n  return {\n    id,\n    lifetimeActions: policy.lifetimeActions\n      ? policy.lifetimeActions.map((action) => ({\n          action: { actionType: action.action },\n          trigger: {\n            lifetimePercentage: action.lifetimePercentage,\n            daysBeforeExpiry: action.daysBeforeExpiry,\n          },\n        }))\n      : undefined,\n    keyProperties: {\n      keyType: policy.keyType,\n      keySize: policy.keySize,\n      reuseKey: policy.reuseKey,\n      curve: policy.keyCurveName,\n      exportable: policy.exportable,\n    },\n    secretProperties: {\n      contentType: policy.contentType,\n    },\n    x509CertificateProperties: {\n      subject: policy.subject,\n      ekus: policy.enhancedKeyUsage,\n      subjectAlternativeNames,\n      keyUsage: policy.keyUsage,\n      validityInMonths: policy.validityInMonths,\n    },\n    issuerParameters: {\n      name: policy.issuerName,\n      certificateType: policy.certificateType,\n      certificateTransparency: policy.certificateTransparency,\n    },\n    attributes,\n  };\n}\n\nexport function toPublicPolicy(policy: CoreCertificatePolicy = {}): CertificatePolicy {\n  let subjectAlternativeNames: SubjectAlternativeNames | undefined;\n  const x509Properties: X509CertificateProperties = policy.x509CertificateProperties || {};\n\n  if (policy.x509CertificateProperties) {\n    if (x509Properties.subjectAlternativeNames) {\n      const names = x509Properties.subjectAlternativeNames;\n      if (names.emails && names.emails.length) {\n        subjectAlternativeNames = {\n          ...subjectAlternativeNames,\n          emails: names.emails as ArrayOneOrMore<string>,\n        };\n      }\n      if (names.dnsNames && names.dnsNames.length) {\n        subjectAlternativeNames = {\n          ...subjectAlternativeNames,\n          dnsNames: names.dnsNames as ArrayOneOrMore<string>,\n        };\n      }\n      if (names.upns && names.upns.length) {\n        subjectAlternativeNames = {\n          ...subjectAlternativeNames,\n          userPrincipalNames: names.upns as ArrayOneOrMore<string>,\n        };\n      }\n    }\n  }\n\n  const certificatePolicy: CertificatePolicy = {\n    lifetimeActions: policy.lifetimeActions\n      ? policy.lifetimeActions.map((action) => ({\n          action: action.action ? action.action.actionType : undefined,\n          daysBeforeExpiry: action.trigger ? action.trigger.daysBeforeExpiry : undefined,\n          lifetimePercentage: action.trigger ? action.trigger.lifetimePercentage : undefined,\n        }))\n      : undefined,\n    contentType: policy.secretProperties\n      ? (policy.secretProperties.contentType as CertificateContentType)\n      : undefined,\n    enhancedKeyUsage: x509Properties.ekus,\n    keyUsage: x509Properties.keyUsage,\n    validityInMonths: x509Properties.validityInMonths,\n    subject: x509Properties.subject,\n    subjectAlternativeNames: subjectAlternativeNames!,\n  };\n\n  if (policy.attributes) {\n    certificatePolicy.enabled = policy.attributes.enabled;\n  }\n\n  if (policy.keyProperties) {\n    certificatePolicy.keyType = policy.keyProperties.keyType as CertificateKeyType;\n    certificatePolicy.keySize = policy.keyProperties.keySize;\n    certificatePolicy.reuseKey = policy.keyProperties.reuseKey;\n    certificatePolicy.keyCurveName = policy.keyProperties.curve;\n    certificatePolicy.exportable = policy.keyProperties.exportable;\n  }\n\n  if (policy.issuerParameters) {\n    certificatePolicy.issuerName = policy.issuerParameters && policy.issuerParameters.name;\n    certificatePolicy.certificateType = policy.issuerParameters\n      .certificateType as CertificateContentType;\n    certificatePolicy.certificateTransparency = policy.issuerParameters.certificateTransparency;\n  }\n\n  return certificatePolicy;\n}\n\nexport function toPublicIssuer(issuer: IssuerBundle = {}): CertificateIssuer {\n  const parsedId = parseKeyVaultCertificateIdentifier(issuer.id!);\n  const attributes: IssuerAttributes = issuer.attributes || {};\n\n  const publicIssuer: CertificateIssuer = {\n    id: issuer.id,\n    name: parsedId.name,\n    provider: issuer.provider,\n    accountId: issuer.credentials && issuer.credentials.accountId,\n    password: issuer.credentials && issuer.credentials.password,\n    enabled: attributes.enabled,\n    createdOn: attributes.created,\n    updatedOn: attributes.updated,\n  };\n\n  if (issuer.organizationDetails) {\n    publicIssuer.organizationId = issuer.organizationDetails.id;\n    publicIssuer.administratorContacts = issuer.organizationDetails.adminDetails\n      ? issuer.organizationDetails.adminDetails.map((x) => ({\n          email: x.emailAddress,\n          phone: x.phone,\n          firstName: x.firstName,\n          lastName: x.lastName,\n        }))\n      : undefined;\n  }\n  return publicIssuer;\n}\n\nexport function getCertificateFromCertificateBundle(\n  certificateBundle: CertificateBundle,\n): KeyVaultCertificate {\n  const parsedId = parseKeyVaultCertificateIdentifier(certificateBundle.id!);\n\n  const attributes: CertificateAttributes = certificateBundle.attributes || {};\n\n  const abstractProperties: CertificateProperties = {\n    createdOn: attributes.created,\n    updatedOn: attributes.updated,\n    expiresOn: attributes.expires,\n    id: certificateBundle.id,\n    enabled: attributes.enabled,\n    notBefore: attributes.notBefore,\n    recoveryLevel: attributes.recoveryLevel,\n    name: parsedId.name,\n    vaultUrl: parsedId.vaultUrl,\n    version: parsedId.version,\n    tags: certificateBundle.tags,\n    x509Thumbprint: certificateBundle.x509Thumbprint,\n    x509ThumbprintString:\n      certificateBundle.x509Thumbprint &&\n      uint8ArrayToString(certificateBundle.x509Thumbprint, \"hex\"),\n    recoverableDays: attributes.recoverableDays,\n    preserveCertificateOrder: certificateBundle.preserveCertOrder,\n  };\n\n  return {\n    keyId: certificateBundle.kid,\n    secretId: certificateBundle.sid,\n    name: parsedId.name,\n    cer: certificateBundle.cer,\n    properties: abstractProperties,\n  };\n}\n\nexport function getCertificateWithPolicyFromCertificateBundle(\n  certificateBundle: CertificateBundle,\n): KeyVaultCertificateWithPolicy {\n  const parsedId = parseKeyVaultCertificateIdentifier(certificateBundle.id!);\n\n  const attributes: CertificateAttributes = certificateBundle.attributes || {};\n  const policy = toPublicPolicy(certificateBundle.policy || {});\n\n  const abstractProperties: CertificateProperties = {\n    createdOn: attributes.created,\n    updatedOn: attributes.updated,\n    expiresOn: attributes.expires,\n    id: certificateBundle.id,\n    enabled: attributes.enabled,\n    notBefore: attributes.notBefore,\n    recoveryLevel: attributes.recoveryLevel,\n    name: parsedId.name,\n    vaultUrl: parsedId.vaultUrl,\n    version: parsedId.version,\n    tags: certificateBundle.tags,\n    x509Thumbprint: certificateBundle.x509Thumbprint,\n    x509ThumbprintString:\n      certificateBundle.x509Thumbprint &&\n      uint8ArrayToString(certificateBundle.x509Thumbprint, \"hex\"),\n    recoverableDays: attributes.recoverableDays,\n    preserveCertificateOrder: certificateBundle.preserveCertOrder,\n  };\n\n  return {\n    keyId: certificateBundle.kid,\n    secretId: certificateBundle.sid,\n    name: parsedId.name,\n    cer: certificateBundle.cer,\n    policy,\n    properties: abstractProperties,\n  };\n}\n\nexport function getDeletedCertificateFromDeletedCertificateBundle(\n  certificateBundle: DeletedCertificateBundle,\n): DeletedCertificate {\n  const certificate: KeyVaultCertificateWithPolicy =\n    getCertificateWithPolicyFromCertificateBundle(certificateBundle);\n\n  return {\n    policy: certificate.policy,\n    cer: certificate.cer,\n    id: certificate.id,\n    keyId: certificate.keyId,\n    secretId: certificate.secretId,\n    name: certificate.name,\n    properties: certificate.properties,\n    recoveryId: certificateBundle.recoveryId,\n    scheduledPurgeDate: certificateBundle.scheduledPurgeDate,\n    deletedOn: certificateBundle.deletedDate,\n  };\n}\n\nexport function getDeletedCertificateFromItem(item: DeletedCertificateItem): DeletedCertificate {\n  const parsedId = parseKeyVaultCertificateIdentifier(item.id!);\n\n  const attributes: any = item.attributes || {};\n\n  const abstractProperties: CertificateProperties = {\n    createdOn: attributes.created,\n    updatedOn: attributes.updated,\n    expiresOn: attributes.expires,\n\n    vaultUrl: parsedId.vaultUrl,\n    version: parsedId.version,\n    name: parsedId.name,\n\n    id: item.id,\n    tags: item.tags,\n    x509Thumbprint: item.x509Thumbprint,\n    x509ThumbprintString: item.x509Thumbprint && uint8ArrayToString(item.x509Thumbprint, \"hex\"),\n    recoverableDays: item.attributes?.recoverableDays,\n    recoveryLevel: item.attributes?.recoveryLevel,\n  };\n\n  return {\n    deletedOn: item.deletedDate,\n    recoveryId: item.recoveryId,\n    scheduledPurgeDate: item.scheduledPurgeDate,\n    name: parsedId.name,\n    properties: abstractProperties,\n  };\n}\n\nfunction getCertificateOperationErrorFromErrorModel(\n  error?: ErrorModel | null,\n): CertificateOperationError | undefined {\n  if (error) {\n    return {\n      code: error.code,\n      innerError: getCertificateOperationErrorFromErrorModel(error.innerError),\n      message: error.message,\n    };\n  }\n  return undefined;\n}\n\nexport function getCertificateOperationFromCoreOperation(\n  certificateName: string,\n  operation: CoreCertificateOperation,\n): CertificateOperation {\n  return {\n    cancellationRequested: operation.cancellationRequested,\n    name: certificateName,\n    issuerName: operation.issuerParameters ? operation.issuerParameters.name : undefined,\n    certificateTransparency: operation.issuerParameters\n      ? operation.issuerParameters.certificateTransparency\n      : undefined,\n    certificateType: operation.issuerParameters\n      ? operation.issuerParameters.certificateType\n      : undefined,\n    csr: operation.csr,\n    error: getCertificateOperationErrorFromErrorModel(operation.error),\n    id: operation.id,\n    requestId: operation.requestId,\n    status: operation.status,\n    statusDetails: operation.statusDetails,\n    target: operation.target,\n  };\n}\n\nexport function coreContactsToCertificateContacts(contacts: CoreContacts): CertificateContact[] {\n  return contacts.contactList\n    ? contacts.contactList.map(\n        (x) => ({ email: x.emailAddress, phone: x.phone, name: x.name }) as CertificateContact,\n      )\n    : [];\n}\n\nexport function getPropertiesFromCertificateBundle(\n  certificateBundle: CertificateBundle,\n): CertificateProperties {\n  const parsedId = parseKeyVaultCertificateIdentifier(certificateBundle.id!);\n  const attributes: CertificateAttributes = certificateBundle.attributes || {};\n\n  const abstractProperties: CertificateProperties = {\n    createdOn: attributes.created,\n    updatedOn: attributes.updated,\n    expiresOn: attributes.expires,\n    id: certificateBundle.id,\n    name: parsedId.name,\n    enabled: attributes.enabled,\n    notBefore: attributes.notBefore,\n    recoveryLevel: attributes.recoveryLevel,\n    vaultUrl: parsedId.vaultUrl,\n    version: parsedId.version,\n    tags: certificateBundle.tags,\n    x509Thumbprint: certificateBundle.x509Thumbprint,\n    x509ThumbprintString:\n      certificateBundle.x509Thumbprint &&\n      uint8ArrayToString(certificateBundle.x509Thumbprint, \"hex\"),\n    recoverableDays: attributes.recoverableDays,\n    preserveCertificateOrder: certificateBundle.preserveCertOrder,\n  };\n\n  return abstractProperties;\n}\n\nexport function mapPagedAsyncIterable<T, U>(\n  iter: PagedAsyncIterableIterator<T>,\n  mapper: (x: T) => U,\n): PagedAsyncIterableIterator<U> {\n  return {\n    async next() {\n      const result = await iter.next();\n\n      return {\n        ...result,\n        value: result.value && mapper(result.value),\n      };\n    },\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n    async *byPage(settings) {\n      const iteratorByPage = iter.byPage(settings);\n      for await (const page of iteratorByPage) {\n        yield page.map(mapper);\n      }\n    },\n  };\n}\n"]}