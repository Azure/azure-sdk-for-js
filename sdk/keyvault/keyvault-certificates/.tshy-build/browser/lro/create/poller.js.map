{"version":3,"file":"poller.js","sourceRoot":"","sources":["../../../../src/lro/create/poller.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EAAE,8BAA8B,EAAE,MAAM,gBAAgB,CAAC;AAOhE,OAAO,EAAE,yBAAyB,EAAE,MAAM,iCAAiC,CAAC;AAO5E;;GAEG;AACH,MAAM,OAAO,uBAAwB,SAAQ,yBAG5C;IACC,YAAY,OAAuC;QACjD,MAAM,EACJ,MAAM,EACN,eAAe,EACf,iBAAiB,EACjB,wBAAwB,EACxB,gBAAgB,EAChB,YAAY,GAAG,IAAI,EACnB,UAAU,GACX,GAAG,OAAO,CAAC;QAEZ,IAAI,KAAyC,CAAC;QAE9C,IAAI,UAAU,EAAE,CAAC;YACf,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;QACvC,CAAC;QAED,MAAM,SAAS,GAAG,IAAI,8BAA8B,iCAE7C,KAAK,KACR,eAAe;YACf,iBAAiB;YACjB,wBAAwB,KAE1B,MAAM,EACN,gBAAgB,CACjB,CAAC;QAEF,KAAK,CAAC,SAAS,CAAC,CAAC;QAEjB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { CreateCertificateState } from \"./operation.js\";\nimport { CreateCertificatePollOperation } from \"./operation.js\";\nimport type {\n  KeyVaultCertificateWithPolicy,\n  CreateCertificateOptions,\n  CertificatePolicy,\n} from \"../../certificatesModels.js\";\nimport type { KeyVaultCertificatePollerOptions } from \"../keyVaultCertificatePoller.js\";\nimport { KeyVaultCertificatePoller } from \"../keyVaultCertificatePoller.js\";\n\nexport interface CreateCertificatePollerOptions extends KeyVaultCertificatePollerOptions {\n  certificatePolicy?: CertificatePolicy;\n  createCertificateOptions: CreateCertificateOptions;\n}\n\n/**\n * Class that deletes a poller that waits until a certificate finishes being deleted\n */\nexport class CreateCertificatePoller extends KeyVaultCertificatePoller<\n  CreateCertificateState,\n  KeyVaultCertificateWithPolicy\n> {\n  constructor(options: CreateCertificatePollerOptions) {\n    const {\n      client,\n      certificateName,\n      certificatePolicy,\n      createCertificateOptions,\n      operationOptions,\n      intervalInMs = 2000,\n      resumeFrom,\n    } = options;\n\n    let state: CreateCertificateState | undefined;\n\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n\n    const operation = new CreateCertificatePollOperation(\n      {\n        ...state,\n        certificateName,\n        certificatePolicy,\n        createCertificateOptions,\n      },\n      client,\n      operationOptions,\n    );\n\n    super(operation);\n\n    this.intervalInMs = intervalInMs;\n  }\n}\n"]}