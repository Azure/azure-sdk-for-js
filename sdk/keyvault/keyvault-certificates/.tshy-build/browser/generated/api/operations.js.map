{"version":3,"file":"operations.js","sourceRoot":"","sources":["../../../../src/generated/api/operations.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport {\n  BackupCertificateOptionalParams,\n  KeyVaultContext as Client,\n  CreateCertificateOptionalParams,\n  DeleteCertificateContactsOptionalParams,\n  DeleteCertificateIssuerOptionalParams,\n  DeleteCertificateOperationOptionalParams,\n  DeleteCertificateOptionalParams,\n  GetCertificateContactsOptionalParams,\n  GetCertificateIssuerOptionalParams,\n  GetCertificateIssuersOptionalParams,\n  GetCertificateOperationOptionalParams,\n  GetCertificateOptionalParams,\n  GetCertificatePolicyOptionalParams,\n  GetCertificatesOptionalParams,\n  GetCertificateVersionsOptionalParams,\n  GetDeletedCertificateOptionalParams,\n  GetDeletedCertificatesOptionalParams,\n  ImportCertificateOptionalParams,\n  MergeCertificateOptionalParams,\n  PurgeDeletedCertificateOptionalParams,\n  RecoverDeletedCertificateOptionalParams,\n  RestoreCertificateOptionalParams,\n  SetCertificateContactsOptionalParams,\n  SetCertificateIssuerOptionalParams,\n  UpdateCertificateIssuerOptionalParams,\n  UpdateCertificateOperationOptionalParams,\n  UpdateCertificateOptionalParams,\n  UpdateCertificatePolicyOptionalParams,\n} from \"./index.js\";\nimport {\n  _CertificateListResult,\n  _certificateListResultDeserializer,\n  CertificateItem,\n  keyVaultErrorDeserializer,\n  DeletedCertificateBundle,\n  deletedCertificateBundleDeserializer,\n  CertificatePolicy,\n  certificatePolicySerializer,\n  certificatePolicyDeserializer,\n  Contacts,\n  contactsSerializer,\n  contactsDeserializer,\n  _CertificateIssuerListResult,\n  _certificateIssuerListResultDeserializer,\n  CertificateIssuerItem,\n  CertificateIssuerSetParameters,\n  certificateIssuerSetParametersSerializer,\n  IssuerBundle,\n  issuerBundleDeserializer,\n  CertificateIssuerUpdateParameters,\n  certificateIssuerUpdateParametersSerializer,\n  CertificateCreateParameters,\n  certificateCreateParametersSerializer,\n  CertificateOperation,\n  certificateOperationDeserializer,\n  CertificateImportParameters,\n  certificateImportParametersSerializer,\n  CertificateBundle,\n  certificateBundleDeserializer,\n  CertificateUpdateParameters,\n  certificateUpdateParametersSerializer,\n  CertificateOperationUpdateParameter,\n  certificateOperationUpdateParameterSerializer,\n  CertificateMergeParameters,\n  certificateMergeParametersSerializer,\n  BackupCertificateResult,\n  backupCertificateResultDeserializer,\n  CertificateRestoreParameters,\n  certificateRestoreParametersSerializer,\n  _DeletedCertificateListResult,\n  _deletedCertificateListResultDeserializer,\n  DeletedCertificateItem,\n} from \"../models/models.js\";\nimport {\n  PagedAsyncIterableIterator,\n  buildPagedAsyncIterator,\n} from \"../static-helpers/pagingHelpers.js\";\nimport {\n  StreamableMethod,\n  PathUncheckedResponse,\n  createRestError,\n  operationOptionsToRequestParameters,\n} from \"@azure-rest/core-client\";\n\nexport function _recoverDeletedCertificateSend(\n  context: Client,\n  certificateName: string,\n  options: RecoverDeletedCertificateOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/deletedcertificates/{certificate-name}/recover\", certificateName)\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n    });\n}\n\nexport async function _recoverDeletedCertificateDeserialize(\n  result: PathUncheckedResponse,\n): Promise<CertificateBundle> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return certificateBundleDeserializer(result.body);\n}\n\n/** The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The operation is applicable in vaults enabled for soft-delete, and must be issued during the retention interval (available in the deleted certificate's attributes). This operation requires the certificates/recover permission. */\nexport async function recoverDeletedCertificate(\n  context: Client,\n  certificateName: string,\n  options: RecoverDeletedCertificateOptionalParams = { requestOptions: {} },\n): Promise<CertificateBundle> {\n  const result = await _recoverDeletedCertificateSend(\n    context,\n    certificateName,\n    options,\n  );\n  return _recoverDeletedCertificateDeserialize(result);\n}\n\nexport function _purgeDeletedCertificateSend(\n  context: Client,\n  certificateName: string,\n  options: PurgeDeletedCertificateOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/deletedcertificates/{certificate-name}\", certificateName)\n    .delete({\n      ...operationOptionsToRequestParameters(options),\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n    });\n}\n\nexport async function _purgeDeletedCertificateDeserialize(\n  result: PathUncheckedResponse,\n): Promise<void> {\n  const expectedStatuses = [\"204\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return;\n}\n\n/** The PurgeDeletedCertificate operation performs an irreversible deletion of the specified certificate, without possibility for recovery. The operation is not available if the recovery level does not specify 'Purgeable'. This operation requires the certificate/purge permission. */\nexport async function purgeDeletedCertificate(\n  context: Client,\n  certificateName: string,\n  options: PurgeDeletedCertificateOptionalParams = { requestOptions: {} },\n): Promise<void> {\n  const result = await _purgeDeletedCertificateSend(\n    context,\n    certificateName,\n    options,\n  );\n  return _purgeDeletedCertificateDeserialize(result);\n}\n\nexport function _getDeletedCertificateSend(\n  context: Client,\n  certificateName: string,\n  options: GetDeletedCertificateOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/deletedcertificates/{certificate-name}\", certificateName)\n    .get({\n      ...operationOptionsToRequestParameters(options),\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n    });\n}\n\nexport async function _getDeletedCertificateDeserialize(\n  result: PathUncheckedResponse,\n): Promise<DeletedCertificateBundle> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return deletedCertificateBundleDeserializer(result.body);\n}\n\n/** The GetDeletedCertificate operation retrieves the deleted certificate information plus its attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission. */\nexport async function getDeletedCertificate(\n  context: Client,\n  certificateName: string,\n  options: GetDeletedCertificateOptionalParams = { requestOptions: {} },\n): Promise<DeletedCertificateBundle> {\n  const result = await _getDeletedCertificateSend(\n    context,\n    certificateName,\n    options,\n  );\n  return _getDeletedCertificateDeserialize(result);\n}\n\nexport function _getDeletedCertificatesSend(\n  context: Client,\n  options: GetDeletedCertificatesOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/deletedcertificates\")\n    .get({\n      ...operationOptionsToRequestParameters(options),\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: {\n        \"api-version\": context.apiVersion,\n        maxresults: options?.maxresults,\n        includePending: options?.includePending,\n      },\n    });\n}\n\nexport async function _getDeletedCertificatesDeserialize(\n  result: PathUncheckedResponse,\n): Promise<_DeletedCertificateListResult> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return _deletedCertificateListResultDeserializer(result.body);\n}\n\n/** The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state and ready for recovery or purging. This operation includes deletion-specific information. This operation requires the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults. */\nexport function getDeletedCertificates(\n  context: Client,\n  options: GetDeletedCertificatesOptionalParams = { requestOptions: {} },\n): PagedAsyncIterableIterator<DeletedCertificateItem> {\n  return buildPagedAsyncIterator(\n    context,\n    () => _getDeletedCertificatesSend(context, options),\n    _getDeletedCertificatesDeserialize,\n    [\"200\"],\n    { itemName: \"value\", nextLinkName: \"nextLink\" },\n  );\n}\n\nexport function _restoreCertificateSend(\n  context: Client,\n  parameters: CertificateRestoreParameters,\n  options: RestoreCertificateOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/certificates/restore\")\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      contentType: \"application/json\",\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n      body: certificateRestoreParametersSerializer(parameters),\n    });\n}\n\nexport async function _restoreCertificateDeserialize(\n  result: PathUncheckedResponse,\n): Promise<CertificateBundle> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return certificateBundleDeserializer(result.body);\n}\n\n/** Restores a backed up certificate, and all its versions, to a vault. This operation requires the certificates/restore permission. */\nexport async function restoreCertificate(\n  context: Client,\n  parameters: CertificateRestoreParameters,\n  options: RestoreCertificateOptionalParams = { requestOptions: {} },\n): Promise<CertificateBundle> {\n  const result = await _restoreCertificateSend(context, parameters, options);\n  return _restoreCertificateDeserialize(result);\n}\n\nexport function _backupCertificateSend(\n  context: Client,\n  certificateName: string,\n  options: BackupCertificateOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/certificates/{certificate-name}/backup\", certificateName)\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n    });\n}\n\nexport async function _backupCertificateDeserialize(\n  result: PathUncheckedResponse,\n): Promise<BackupCertificateResult> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return backupCertificateResultDeserializer(result.body);\n}\n\n/** Requests that a backup of the specified certificate be downloaded to the client. All versions of the certificate will be downloaded. This operation requires the certificates/backup permission. */\nexport async function backupCertificate(\n  context: Client,\n  certificateName: string,\n  options: BackupCertificateOptionalParams = { requestOptions: {} },\n): Promise<BackupCertificateResult> {\n  const result = await _backupCertificateSend(\n    context,\n    certificateName,\n    options,\n  );\n  return _backupCertificateDeserialize(result);\n}\n\nexport function _mergeCertificateSend(\n  context: Client,\n  certificateName: string,\n  parameters: CertificateMergeParameters,\n  options: MergeCertificateOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/certificates/{certificate-name}/pending/merge\", certificateName)\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      contentType: \"application/json\",\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n      body: certificateMergeParametersSerializer(parameters),\n    });\n}\n\nexport async function _mergeCertificateDeserialize(\n  result: PathUncheckedResponse,\n): Promise<CertificateBundle> {\n  const expectedStatuses = [\"201\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return certificateBundleDeserializer(result.body);\n}\n\n/** The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission. */\nexport async function mergeCertificate(\n  context: Client,\n  certificateName: string,\n  parameters: CertificateMergeParameters,\n  options: MergeCertificateOptionalParams = { requestOptions: {} },\n): Promise<CertificateBundle> {\n  const result = await _mergeCertificateSend(\n    context,\n    certificateName,\n    parameters,\n    options,\n  );\n  return _mergeCertificateDeserialize(result);\n}\n\nexport function _deleteCertificateOperationSend(\n  context: Client,\n  certificateName: string,\n  options: DeleteCertificateOperationOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/certificates/{certificate-name}/pending\", certificateName)\n    .delete({\n      ...operationOptionsToRequestParameters(options),\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n    });\n}\n\nexport async function _deleteCertificateOperationDeserialize(\n  result: PathUncheckedResponse,\n): Promise<CertificateOperation> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return certificateOperationDeserializer(result.body);\n}\n\n/** Deletes the creation operation for a specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the certificates/update permission. */\nexport async function deleteCertificateOperation(\n  context: Client,\n  certificateName: string,\n  options: DeleteCertificateOperationOptionalParams = { requestOptions: {} },\n): Promise<CertificateOperation> {\n  const result = await _deleteCertificateOperationSend(\n    context,\n    certificateName,\n    options,\n  );\n  return _deleteCertificateOperationDeserialize(result);\n}\n\nexport function _getCertificateOperationSend(\n  context: Client,\n  certificateName: string,\n  options: GetCertificateOperationOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/certificates/{certificate-name}/pending\", certificateName)\n    .get({\n      ...operationOptionsToRequestParameters(options),\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n    });\n}\n\nexport async function _getCertificateOperationDeserialize(\n  result: PathUncheckedResponse,\n): Promise<CertificateOperation> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return certificateOperationDeserializer(result.body);\n}\n\n/** Gets the creation operation associated with a specified certificate. This operation requires the certificates/get permission. */\nexport async function getCertificateOperation(\n  context: Client,\n  certificateName: string,\n  options: GetCertificateOperationOptionalParams = { requestOptions: {} },\n): Promise<CertificateOperation> {\n  const result = await _getCertificateOperationSend(\n    context,\n    certificateName,\n    options,\n  );\n  return _getCertificateOperationDeserialize(result);\n}\n\nexport function _updateCertificateOperationSend(\n  context: Client,\n  certificateName: string,\n  certificateOperation: CertificateOperationUpdateParameter,\n  options: UpdateCertificateOperationOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/certificates/{certificate-name}/pending\", certificateName)\n    .patch({\n      ...operationOptionsToRequestParameters(options),\n      contentType: \"application/json\",\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n      body: certificateOperationUpdateParameterSerializer(certificateOperation),\n    });\n}\n\nexport async function _updateCertificateOperationDeserialize(\n  result: PathUncheckedResponse,\n): Promise<CertificateOperation> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return certificateOperationDeserializer(result.body);\n}\n\n/** Updates a certificate creation operation that is already in progress. This operation requires the certificates/update permission. */\nexport async function updateCertificateOperation(\n  context: Client,\n  certificateName: string,\n  certificateOperation: CertificateOperationUpdateParameter,\n  options: UpdateCertificateOperationOptionalParams = { requestOptions: {} },\n): Promise<CertificateOperation> {\n  const result = await _updateCertificateOperationSend(\n    context,\n    certificateName,\n    certificateOperation,\n    options,\n  );\n  return _updateCertificateOperationDeserialize(result);\n}\n\nexport function _getCertificateSend(\n  context: Client,\n  certificateName: string,\n  certificateVersion: string,\n  options: GetCertificateOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\n      \"/certificates/{certificate-name}/{certificate-version}\",\n      certificateName,\n      certificateVersion,\n    )\n    .get({\n      ...operationOptionsToRequestParameters(options),\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n    });\n}\n\nexport async function _getCertificateDeserialize(\n  result: PathUncheckedResponse,\n): Promise<CertificateBundle> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return certificateBundleDeserializer(result.body);\n}\n\n/** Gets information about a specific certificate. This operation requires the certificates/get permission. */\nexport async function getCertificate(\n  context: Client,\n  certificateName: string,\n  certificateVersion: string,\n  options: GetCertificateOptionalParams = { requestOptions: {} },\n): Promise<CertificateBundle> {\n  const result = await _getCertificateSend(\n    context,\n    certificateName,\n    certificateVersion,\n    options,\n  );\n  return _getCertificateDeserialize(result);\n}\n\nexport function _updateCertificateSend(\n  context: Client,\n  certificateName: string,\n  certificateVersion: string,\n  parameters: CertificateUpdateParameters,\n  options: UpdateCertificateOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\n      \"/certificates/{certificate-name}/{certificate-version}\",\n      certificateName,\n      certificateVersion,\n    )\n    .patch({\n      ...operationOptionsToRequestParameters(options),\n      contentType: \"application/json\",\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n      body: certificateUpdateParametersSerializer(parameters),\n    });\n}\n\nexport async function _updateCertificateDeserialize(\n  result: PathUncheckedResponse,\n): Promise<CertificateBundle> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return certificateBundleDeserializer(result.body);\n}\n\n/** The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate's attributes. This operation requires the certificates/update permission. */\nexport async function updateCertificate(\n  context: Client,\n  certificateName: string,\n  certificateVersion: string,\n  parameters: CertificateUpdateParameters,\n  options: UpdateCertificateOptionalParams = { requestOptions: {} },\n): Promise<CertificateBundle> {\n  const result = await _updateCertificateSend(\n    context,\n    certificateName,\n    certificateVersion,\n    parameters,\n    options,\n  );\n  return _updateCertificateDeserialize(result);\n}\n\nexport function _updateCertificatePolicySend(\n  context: Client,\n  certificateName: string,\n  certificatePolicy: CertificatePolicy,\n  options: UpdateCertificatePolicyOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/certificates/{certificate-name}/policy\", certificateName)\n    .patch({\n      ...operationOptionsToRequestParameters(options),\n      contentType: \"application/json\",\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n      body: certificatePolicySerializer(certificatePolicy),\n    });\n}\n\nexport async function _updateCertificatePolicyDeserialize(\n  result: PathUncheckedResponse,\n): Promise<CertificatePolicy> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return certificatePolicyDeserializer(result.body);\n}\n\n/** Set specified members in the certificate policy. Leave others as null. This operation requires the certificates/update permission. */\nexport async function updateCertificatePolicy(\n  context: Client,\n  certificateName: string,\n  certificatePolicy: CertificatePolicy,\n  options: UpdateCertificatePolicyOptionalParams = { requestOptions: {} },\n): Promise<CertificatePolicy> {\n  const result = await _updateCertificatePolicySend(\n    context,\n    certificateName,\n    certificatePolicy,\n    options,\n  );\n  return _updateCertificatePolicyDeserialize(result);\n}\n\nexport function _getCertificatePolicySend(\n  context: Client,\n  certificateName: string,\n  options: GetCertificatePolicyOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/certificates/{certificate-name}/policy\", certificateName)\n    .get({\n      ...operationOptionsToRequestParameters(options),\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n    });\n}\n\nexport async function _getCertificatePolicyDeserialize(\n  result: PathUncheckedResponse,\n): Promise<CertificatePolicy> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return certificatePolicyDeserializer(result.body);\n}\n\n/** The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault. This operation requires the certificates/get permission. */\nexport async function getCertificatePolicy(\n  context: Client,\n  certificateName: string,\n  options: GetCertificatePolicyOptionalParams = { requestOptions: {} },\n): Promise<CertificatePolicy> {\n  const result = await _getCertificatePolicySend(\n    context,\n    certificateName,\n    options,\n  );\n  return _getCertificatePolicyDeserialize(result);\n}\n\nexport function _getCertificateVersionsSend(\n  context: Client,\n  certificateName: string,\n  options: GetCertificateVersionsOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/certificates/{certificate-name}/versions\", certificateName)\n    .get({\n      ...operationOptionsToRequestParameters(options),\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: {\n        \"api-version\": context.apiVersion,\n        maxresults: options?.maxresults,\n      },\n    });\n}\n\nexport async function _getCertificateVersionsDeserialize(\n  result: PathUncheckedResponse,\n): Promise<_CertificateListResult> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return _certificateListResultDeserializer(result.body);\n}\n\n/** The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission. */\nexport function getCertificateVersions(\n  context: Client,\n  certificateName: string,\n  options: GetCertificateVersionsOptionalParams = { requestOptions: {} },\n): PagedAsyncIterableIterator<CertificateItem> {\n  return buildPagedAsyncIterator(\n    context,\n    () => _getCertificateVersionsSend(context, certificateName, options),\n    _getCertificateVersionsDeserialize,\n    [\"200\"],\n    { itemName: \"value\", nextLinkName: \"nextLink\" },\n  );\n}\n\nexport function _importCertificateSend(\n  context: Client,\n  certificateName: string,\n  parameters: CertificateImportParameters,\n  options: ImportCertificateOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/certificates/{certificate-name}/import\", certificateName)\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      contentType: \"application/json\",\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n      body: certificateImportParametersSerializer(parameters),\n    });\n}\n\nexport async function _importCertificateDeserialize(\n  result: PathUncheckedResponse,\n): Promise<CertificateBundle> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return certificateBundleDeserializer(result.body);\n}\n\n/** Imports an existing valid certificate, containing a private key, into Azure Key Vault. This operation requires the certificates/import permission. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. Key Vault will only accept a key in PKCS#8 format. */\nexport async function importCertificate(\n  context: Client,\n  certificateName: string,\n  parameters: CertificateImportParameters,\n  options: ImportCertificateOptionalParams = { requestOptions: {} },\n): Promise<CertificateBundle> {\n  const result = await _importCertificateSend(\n    context,\n    certificateName,\n    parameters,\n    options,\n  );\n  return _importCertificateDeserialize(result);\n}\n\nexport function _createCertificateSend(\n  context: Client,\n  certificateName: string,\n  parameters: CertificateCreateParameters,\n  options: CreateCertificateOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/certificates/{certificate-name}/create\", certificateName)\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      contentType: \"application/json\",\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n      body: certificateCreateParametersSerializer(parameters),\n    });\n}\n\nexport async function _createCertificateDeserialize(\n  result: PathUncheckedResponse,\n): Promise<CertificateOperation> {\n  const expectedStatuses = [\"202\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return certificateOperationDeserializer(result.body);\n}\n\n/** If this is the first version, the certificate resource is created. This operation requires the certificates/create permission. */\nexport async function createCertificate(\n  context: Client,\n  certificateName: string,\n  parameters: CertificateCreateParameters,\n  options: CreateCertificateOptionalParams = { requestOptions: {} },\n): Promise<CertificateOperation> {\n  const result = await _createCertificateSend(\n    context,\n    certificateName,\n    parameters,\n    options,\n  );\n  return _createCertificateDeserialize(result);\n}\n\nexport function _deleteCertificateIssuerSend(\n  context: Client,\n  issuerName: string,\n  options: DeleteCertificateIssuerOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/certificates/issuers/{issuer-name}\", issuerName)\n    .delete({\n      ...operationOptionsToRequestParameters(options),\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n    });\n}\n\nexport async function _deleteCertificateIssuerDeserialize(\n  result: PathUncheckedResponse,\n): Promise<IssuerBundle> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return issuerBundleDeserializer(result.body);\n}\n\n/** The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the vault. This operation requires the certificates/manageissuers/deleteissuers permission. */\nexport async function deleteCertificateIssuer(\n  context: Client,\n  issuerName: string,\n  options: DeleteCertificateIssuerOptionalParams = { requestOptions: {} },\n): Promise<IssuerBundle> {\n  const result = await _deleteCertificateIssuerSend(\n    context,\n    issuerName,\n    options,\n  );\n  return _deleteCertificateIssuerDeserialize(result);\n}\n\nexport function _getCertificateIssuerSend(\n  context: Client,\n  issuerName: string,\n  options: GetCertificateIssuerOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/certificates/issuers/{issuer-name}\", issuerName)\n    .get({\n      ...operationOptionsToRequestParameters(options),\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n    });\n}\n\nexport async function _getCertificateIssuerDeserialize(\n  result: PathUncheckedResponse,\n): Promise<IssuerBundle> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return issuerBundleDeserializer(result.body);\n}\n\n/** The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission. */\nexport async function getCertificateIssuer(\n  context: Client,\n  issuerName: string,\n  options: GetCertificateIssuerOptionalParams = { requestOptions: {} },\n): Promise<IssuerBundle> {\n  const result = await _getCertificateIssuerSend(context, issuerName, options);\n  return _getCertificateIssuerDeserialize(result);\n}\n\nexport function _updateCertificateIssuerSend(\n  context: Client,\n  issuerName: string,\n  parameter: CertificateIssuerUpdateParameters,\n  options: UpdateCertificateIssuerOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/certificates/issuers/{issuer-name}\", issuerName)\n    .patch({\n      ...operationOptionsToRequestParameters(options),\n      contentType: \"application/json\",\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n      body: certificateIssuerUpdateParametersSerializer(parameter),\n    });\n}\n\nexport async function _updateCertificateIssuerDeserialize(\n  result: PathUncheckedResponse,\n): Promise<IssuerBundle> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return issuerBundleDeserializer(result.body);\n}\n\n/** The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission. */\nexport async function updateCertificateIssuer(\n  context: Client,\n  issuerName: string,\n  parameter: CertificateIssuerUpdateParameters,\n  options: UpdateCertificateIssuerOptionalParams = { requestOptions: {} },\n): Promise<IssuerBundle> {\n  const result = await _updateCertificateIssuerSend(\n    context,\n    issuerName,\n    parameter,\n    options,\n  );\n  return _updateCertificateIssuerDeserialize(result);\n}\n\nexport function _setCertificateIssuerSend(\n  context: Client,\n  issuerName: string,\n  parameter: CertificateIssuerSetParameters,\n  options: SetCertificateIssuerOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/certificates/issuers/{issuer-name}\", issuerName)\n    .put({\n      ...operationOptionsToRequestParameters(options),\n      contentType: \"application/json\",\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n      body: certificateIssuerSetParametersSerializer(parameter),\n    });\n}\n\nexport async function _setCertificateIssuerDeserialize(\n  result: PathUncheckedResponse,\n): Promise<IssuerBundle> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return issuerBundleDeserializer(result.body);\n}\n\n/** The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission. */\nexport async function setCertificateIssuer(\n  context: Client,\n  issuerName: string,\n  parameter: CertificateIssuerSetParameters,\n  options: SetCertificateIssuerOptionalParams = { requestOptions: {} },\n): Promise<IssuerBundle> {\n  const result = await _setCertificateIssuerSend(\n    context,\n    issuerName,\n    parameter,\n    options,\n  );\n  return _setCertificateIssuerDeserialize(result);\n}\n\nexport function _getCertificateIssuersSend(\n  context: Client,\n  options: GetCertificateIssuersOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/certificates/issuers\")\n    .get({\n      ...operationOptionsToRequestParameters(options),\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: {\n        \"api-version\": context.apiVersion,\n        maxresults: options?.maxresults,\n      },\n    });\n}\n\nexport async function _getCertificateIssuersDeserialize(\n  result: PathUncheckedResponse,\n): Promise<_CertificateIssuerListResult> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return _certificateIssuerListResultDeserializer(result.body);\n}\n\n/** The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission. */\nexport function getCertificateIssuers(\n  context: Client,\n  options: GetCertificateIssuersOptionalParams = { requestOptions: {} },\n): PagedAsyncIterableIterator<CertificateIssuerItem> {\n  return buildPagedAsyncIterator(\n    context,\n    () => _getCertificateIssuersSend(context, options),\n    _getCertificateIssuersDeserialize,\n    [\"200\"],\n    { itemName: \"value\", nextLinkName: \"nextLink\" },\n  );\n}\n\nexport function _deleteCertificateContactsSend(\n  context: Client,\n  options: DeleteCertificateContactsOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/certificates/contacts\")\n    .delete({\n      ...operationOptionsToRequestParameters(options),\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n    });\n}\n\nexport async function _deleteCertificateContactsDeserialize(\n  result: PathUncheckedResponse,\n): Promise<Contacts> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return contactsDeserializer(result.body);\n}\n\n/** Deletes the certificate contacts for a specified key vault certificate. This operation requires the certificates/managecontacts permission. */\nexport async function deleteCertificateContacts(\n  context: Client,\n  options: DeleteCertificateContactsOptionalParams = { requestOptions: {} },\n): Promise<Contacts> {\n  const result = await _deleteCertificateContactsSend(context, options);\n  return _deleteCertificateContactsDeserialize(result);\n}\n\nexport function _getCertificateContactsSend(\n  context: Client,\n  options: GetCertificateContactsOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/certificates/contacts\")\n    .get({\n      ...operationOptionsToRequestParameters(options),\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n    });\n}\n\nexport async function _getCertificateContactsDeserialize(\n  result: PathUncheckedResponse,\n): Promise<Contacts> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return contactsDeserializer(result.body);\n}\n\n/** The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault. This operation requires the certificates/managecontacts permission. */\nexport async function getCertificateContacts(\n  context: Client,\n  options: GetCertificateContactsOptionalParams = { requestOptions: {} },\n): Promise<Contacts> {\n  const result = await _getCertificateContactsSend(context, options);\n  return _getCertificateContactsDeserialize(result);\n}\n\nexport function _setCertificateContactsSend(\n  context: Client,\n  contacts: Contacts,\n  options: SetCertificateContactsOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/certificates/contacts\")\n    .put({\n      ...operationOptionsToRequestParameters(options),\n      contentType: \"application/json\",\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n      body: contactsSerializer(contacts),\n    });\n}\n\nexport async function _setCertificateContactsDeserialize(\n  result: PathUncheckedResponse,\n): Promise<Contacts> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return contactsDeserializer(result.body);\n}\n\n/** Sets the certificate contacts for the specified key vault. This operation requires the certificates/managecontacts permission. */\nexport async function setCertificateContacts(\n  context: Client,\n  contacts: Contacts,\n  options: SetCertificateContactsOptionalParams = { requestOptions: {} },\n): Promise<Contacts> {\n  const result = await _setCertificateContactsSend(context, contacts, options);\n  return _setCertificateContactsDeserialize(result);\n}\n\nexport function _deleteCertificateSend(\n  context: Client,\n  certificateName: string,\n  options: DeleteCertificateOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/certificates/{certificate-name}\", certificateName)\n    .delete({\n      ...operationOptionsToRequestParameters(options),\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n    });\n}\n\nexport async function _deleteCertificateDeserialize(\n  result: PathUncheckedResponse,\n): Promise<DeletedCertificateBundle> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return deletedCertificateBundleDeserializer(result.body);\n}\n\n/** Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used to remove individual versions of a certificate object. This operation requires the certificates/delete permission. */\nexport async function deleteCertificate(\n  context: Client,\n  certificateName: string,\n  options: DeleteCertificateOptionalParams = { requestOptions: {} },\n): Promise<DeletedCertificateBundle> {\n  const result = await _deleteCertificateSend(\n    context,\n    certificateName,\n    options,\n  );\n  return _deleteCertificateDeserialize(result);\n}\n\nexport function _getCertificatesSend(\n  context: Client,\n  options: GetCertificatesOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/certificates\")\n    .get({\n      ...operationOptionsToRequestParameters(options),\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: {\n        \"api-version\": context.apiVersion,\n        maxresults: options?.maxresults,\n        includePending: options?.includePending,\n      },\n    });\n}\n\nexport async function _getCertificatesDeserialize(\n  result: PathUncheckedResponse,\n): Promise<_CertificateListResult> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return _certificateListResultDeserializer(result.body);\n}\n\n/** The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission. */\nexport function getCertificates(\n  context: Client,\n  options: GetCertificatesOptionalParams = { requestOptions: {} },\n): PagedAsyncIterableIterator<CertificateItem> {\n  return buildPagedAsyncIterator(\n    context,\n    () => _getCertificatesSend(context, options),\n    _getCertificatesDeserialize,\n    [\"200\"],\n    { itemName: \"value\", nextLinkName: \"nextLink\" },\n  );\n}\n"]}