/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import { TokenCredential } from "@azure/core-auth";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as operations from "./operations";
import { KeyVaultManagementClientContext } from "./keyVaultManagementClientContext";


class KeyVaultManagementClient extends KeyVaultManagementClientContext {
  // Operation groups
  keys: operations.Keys;
  vaults: operations.Vaults;
  privateEndpointConnections: operations.PrivateEndpointConnections;
  privateLinkResources: operations.PrivateLinkResources;
  managedHsms: operations.ManagedHsms;
  mHSMPrivateEndpointConnections: operations.MHSMPrivateEndpointConnections;
  mHSMPrivateLinkResources: operations.MHSMPrivateLinkResources;
  operations: operations.Operations;
  secrets: operations.Secrets;

  /**
   * Initializes a new instance of the KeyVaultManagementClient class.
   * @param credentials Credentials needed for the client to connect to Azure. Credentials
   * implementing the TokenCredential interface from the @azure/identity package are recommended. For
   * more information about these credentials, see
   * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
   * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
   * @azure/ms-rest-browserauth are also supported.
   * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure
   * subscription. The subscription ID forms part of the URI for every service call.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials | TokenCredential, subscriptionId: string, options?: Models.KeyVaultManagementClientOptions) {
    super(credentials, subscriptionId, options);
    this.keys = new operations.Keys(this);
    this.vaults = new operations.Vaults(this);
    this.privateEndpointConnections = new operations.PrivateEndpointConnections(this);
    this.privateLinkResources = new operations.PrivateLinkResources(this);
    this.managedHsms = new operations.ManagedHsms(this);
    this.mHSMPrivateEndpointConnections = new operations.MHSMPrivateEndpointConnections(this);
    this.mHSMPrivateLinkResources = new operations.MHSMPrivateLinkResources(this);
    this.operations = new operations.Operations(this);
    this.secrets = new operations.Secrets(this);
  }
}

// Operation Specifications

export {
  KeyVaultManagementClient,
  KeyVaultManagementClientContext,
  Models as KeyVaultManagementModels,
  Mappers as KeyVaultManagementMappers
};
export * from "./operations";
