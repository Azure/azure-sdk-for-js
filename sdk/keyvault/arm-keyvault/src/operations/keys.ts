/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Keys } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { KeyVaultManagementClient } from "../keyVaultManagementClient";
import {
  Key,
  KeysListNextOptionalParams,
  KeysListOptionalParams,
  KeysListResponse,
  KeysListVersionsNextOptionalParams,
  KeysListVersionsOptionalParams,
  KeysListVersionsResponse,
  KeyCreateParameters,
  KeysCreateIfNotExistOptionalParams,
  KeysCreateIfNotExistResponse,
  KeysGetOptionalParams,
  KeysGetResponse,
  KeysGetVersionOptionalParams,
  KeysGetVersionResponse,
  KeysListNextResponse,
  KeysListVersionsNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Keys operations. */
export class KeysImpl implements Keys {
  private readonly client: KeyVaultManagementClient;

  /**
   * Initialize a new instance of the class Keys class.
   * @param client Reference to the service client
   */
  constructor(client: KeyVaultManagementClient) {
    this.client = client;
  }

  /**
   * Lists the keys in the specified key vault.
   * @param resourceGroupName The name of the resource group which contains the specified key vault.
   * @param vaultName The name of the vault which contains the keys to be retrieved.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    vaultName: string,
    options?: KeysListOptionalParams
  ): PagedAsyncIterableIterator<Key> {
    const iter = this.listPagingAll(resourceGroupName, vaultName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          vaultName,
          options,
          settings
        );
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    vaultName: string,
    options?: KeysListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Key[]> {
    let result: KeysListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceGroupName, vaultName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        vaultName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    vaultName: string,
    options?: KeysListOptionalParams
  ): AsyncIterableIterator<Key> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      vaultName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the versions of the specified key in the specified key vault.
   * @param resourceGroupName The name of the resource group which contains the specified key vault.
   * @param vaultName The name of the vault which contains the key versions to be retrieved.
   * @param keyName The name of the key versions to be retrieved.
   * @param options The options parameters.
   */
  public listVersions(
    resourceGroupName: string,
    vaultName: string,
    keyName: string,
    options?: KeysListVersionsOptionalParams
  ): PagedAsyncIterableIterator<Key> {
    const iter = this.listVersionsPagingAll(
      resourceGroupName,
      vaultName,
      keyName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listVersionsPagingPage(
          resourceGroupName,
          vaultName,
          keyName,
          options,
          settings
        );
      }
    };
  }

  private async *listVersionsPagingPage(
    resourceGroupName: string,
    vaultName: string,
    keyName: string,
    options?: KeysListVersionsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Key[]> {
    let result: KeysListVersionsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listVersions(
        resourceGroupName,
        vaultName,
        keyName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listVersionsNext(
        resourceGroupName,
        vaultName,
        keyName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listVersionsPagingAll(
    resourceGroupName: string,
    vaultName: string,
    keyName: string,
    options?: KeysListVersionsOptionalParams
  ): AsyncIterableIterator<Key> {
    for await (const page of this.listVersionsPagingPage(
      resourceGroupName,
      vaultName,
      keyName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Creates the first version of a new key if it does not exist. If it already exists, then the existing
   * key is returned without any write operations being performed. This API does not create subsequent
   * versions, and does not update existing keys.
   * @param resourceGroupName The name of the resource group which contains the specified key vault.
   * @param vaultName The name of the key vault which contains the key to be created.
   * @param keyName The name of the key to be created.
   * @param parameters The parameters used to create the specified key.
   * @param options The options parameters.
   */
  createIfNotExist(
    resourceGroupName: string,
    vaultName: string,
    keyName: string,
    parameters: KeyCreateParameters,
    options?: KeysCreateIfNotExistOptionalParams
  ): Promise<KeysCreateIfNotExistResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, vaultName, keyName, parameters, options },
      createIfNotExistOperationSpec
    );
  }

  /**
   * Gets the current version of the specified key from the specified key vault.
   * @param resourceGroupName The name of the resource group which contains the specified key vault.
   * @param vaultName The name of the vault which contains the key to be retrieved.
   * @param keyName The name of the key to be retrieved.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    vaultName: string,
    keyName: string,
    options?: KeysGetOptionalParams
  ): Promise<KeysGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, vaultName, keyName, options },
      getOperationSpec
    );
  }

  /**
   * Lists the keys in the specified key vault.
   * @param resourceGroupName The name of the resource group which contains the specified key vault.
   * @param vaultName The name of the vault which contains the keys to be retrieved.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    vaultName: string,
    options?: KeysListOptionalParams
  ): Promise<KeysListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, vaultName, options },
      listOperationSpec
    );
  }

  /**
   * Gets the specified version of the specified key in the specified key vault.
   * @param resourceGroupName The name of the resource group which contains the specified key vault.
   * @param vaultName The name of the vault which contains the key version to be retrieved.
   * @param keyName The name of the key version to be retrieved.
   * @param keyVersion The version of the key to be retrieved.
   * @param options The options parameters.
   */
  getVersion(
    resourceGroupName: string,
    vaultName: string,
    keyName: string,
    keyVersion: string,
    options?: KeysGetVersionOptionalParams
  ): Promise<KeysGetVersionResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, vaultName, keyName, keyVersion, options },
      getVersionOperationSpec
    );
  }

  /**
   * Lists the versions of the specified key in the specified key vault.
   * @param resourceGroupName The name of the resource group which contains the specified key vault.
   * @param vaultName The name of the vault which contains the key versions to be retrieved.
   * @param keyName The name of the key versions to be retrieved.
   * @param options The options parameters.
   */
  private _listVersions(
    resourceGroupName: string,
    vaultName: string,
    keyName: string,
    options?: KeysListVersionsOptionalParams
  ): Promise<KeysListVersionsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, vaultName, keyName, options },
      listVersionsOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group which contains the specified key vault.
   * @param vaultName The name of the vault which contains the keys to be retrieved.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    vaultName: string,
    nextLink: string,
    options?: KeysListNextOptionalParams
  ): Promise<KeysListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, vaultName, nextLink, options },
      listNextOperationSpec
    );
  }

  /**
   * ListVersionsNext
   * @param resourceGroupName The name of the resource group which contains the specified key vault.
   * @param vaultName The name of the vault which contains the key versions to be retrieved.
   * @param keyName The name of the key versions to be retrieved.
   * @param nextLink The nextLink from the previous successful call to the ListVersions method.
   * @param options The options parameters.
   */
  private _listVersionsNext(
    resourceGroupName: string,
    vaultName: string,
    keyName: string,
    nextLink: string,
    options?: KeysListVersionsNextOptionalParams
  ): Promise<KeysListVersionsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, vaultName, keyName, nextLink, options },
      listVersionsNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createIfNotExistOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/keys/{keyName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Key
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName,
    Parameters.keyName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/keys/{keyName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Key
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName,
    Parameters.keyName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/keys",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getVersionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/keys/{keyName}/versions/{keyVersion}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Key
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName,
    Parameters.keyName,
    Parameters.keyVersion
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listVersionsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/keys/{keyName}/versions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName,
    Parameters.keyName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listVersionsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KeyListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName,
    Parameters.keyName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
