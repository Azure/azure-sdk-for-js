/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/keysMappers";
import * as Parameters from "../models/parameters";
import { KeyVaultManagementClientContext } from "../keyVaultManagementClientContext";

/** Class representing a Keys. */
export class Keys {
  private readonly client: KeyVaultManagementClientContext;

  /**
   * Create a Keys.
   * @param {KeyVaultManagementClientContext} client Reference to the service client.
   */
  constructor(client: KeyVaultManagementClientContext) {
    this.client = client;
  }

  /**
   * Creates the first version of a new key if it does not exist. If it already exists, then the
   * existing key is returned without any write operations being performed. This API does not create
   * subsequent versions, and does not update existing keys.
   * @param resourceGroupName The name of the resource group which contains the specified key vault.
   * @param vaultName The name of the key vault which contains the key to be created.
   * @param keyName The name of the key to be created.
   * @param parameters The parameters used to create the specified key.
   * @param [options] The optional parameters
   * @returns Promise<Models.KeysCreateIfNotExistResponse>
   */
  createIfNotExist(resourceGroupName: string, vaultName: string, keyName: string, parameters: Models.KeyCreateParameters, options?: msRest.RequestOptionsBase): Promise<Models.KeysCreateIfNotExistResponse>;
  /**
   * @param resourceGroupName The name of the resource group which contains the specified key vault.
   * @param vaultName The name of the key vault which contains the key to be created.
   * @param keyName The name of the key to be created.
   * @param parameters The parameters used to create the specified key.
   * @param callback The callback
   */
  createIfNotExist(resourceGroupName: string, vaultName: string, keyName: string, parameters: Models.KeyCreateParameters, callback: msRest.ServiceCallback<Models.Key>): void;
  /**
   * @param resourceGroupName The name of the resource group which contains the specified key vault.
   * @param vaultName The name of the key vault which contains the key to be created.
   * @param keyName The name of the key to be created.
   * @param parameters The parameters used to create the specified key.
   * @param options The optional parameters
   * @param callback The callback
   */
  createIfNotExist(resourceGroupName: string, vaultName: string, keyName: string, parameters: Models.KeyCreateParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Key>): void;
  createIfNotExist(resourceGroupName: string, vaultName: string, keyName: string, parameters: Models.KeyCreateParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Key>, callback?: msRest.ServiceCallback<Models.Key>): Promise<Models.KeysCreateIfNotExistResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vaultName,
        keyName,
        parameters,
        options
      },
      createIfNotExistOperationSpec,
      callback) as Promise<Models.KeysCreateIfNotExistResponse>;
  }

  /**
   * Gets the current version of the specified key from the specified key vault.
   * @param resourceGroupName The name of the resource group which contains the specified key vault.
   * @param vaultName The name of the vault which contains the key to be retrieved.
   * @param keyName The name of the key to be retrieved.
   * @param [options] The optional parameters
   * @returns Promise<Models.KeysGetResponse>
   */
  get(resourceGroupName: string, vaultName: string, keyName: string, options?: msRest.RequestOptionsBase): Promise<Models.KeysGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group which contains the specified key vault.
   * @param vaultName The name of the vault which contains the key to be retrieved.
   * @param keyName The name of the key to be retrieved.
   * @param callback The callback
   */
  get(resourceGroupName: string, vaultName: string, keyName: string, callback: msRest.ServiceCallback<Models.Key>): void;
  /**
   * @param resourceGroupName The name of the resource group which contains the specified key vault.
   * @param vaultName The name of the vault which contains the key to be retrieved.
   * @param keyName The name of the key to be retrieved.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, vaultName: string, keyName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Key>): void;
  get(resourceGroupName: string, vaultName: string, keyName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Key>, callback?: msRest.ServiceCallback<Models.Key>): Promise<Models.KeysGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vaultName,
        keyName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.KeysGetResponse>;
  }

  /**
   * Lists the keys in the specified key vault.
   * @param resourceGroupName The name of the resource group which contains the specified key vault.
   * @param vaultName The name of the vault which contains the keys to be retrieved.
   * @param [options] The optional parameters
   * @returns Promise<Models.KeysListResponse>
   */
  list(resourceGroupName: string, vaultName: string, options?: msRest.RequestOptionsBase): Promise<Models.KeysListResponse>;
  /**
   * @param resourceGroupName The name of the resource group which contains the specified key vault.
   * @param vaultName The name of the vault which contains the keys to be retrieved.
   * @param callback The callback
   */
  list(resourceGroupName: string, vaultName: string, callback: msRest.ServiceCallback<Models.KeyListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group which contains the specified key vault.
   * @param vaultName The name of the vault which contains the keys to be retrieved.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, vaultName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.KeyListResult>): void;
  list(resourceGroupName: string, vaultName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.KeyListResult>, callback?: msRest.ServiceCallback<Models.KeyListResult>): Promise<Models.KeysListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vaultName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.KeysListResponse>;
  }

  /**
   * Gets the specified version of the specified key in the specified key vault.
   * @param resourceGroupName The name of the resource group which contains the specified key vault.
   * @param vaultName The name of the vault which contains the key version to be retrieved.
   * @param keyName The name of the key version to be retrieved.
   * @param keyVersion The version of the key to be retrieved.
   * @param [options] The optional parameters
   * @returns Promise<Models.KeysGetVersionResponse>
   */
  getVersion(resourceGroupName: string, vaultName: string, keyName: string, keyVersion: string, options?: msRest.RequestOptionsBase): Promise<Models.KeysGetVersionResponse>;
  /**
   * @param resourceGroupName The name of the resource group which contains the specified key vault.
   * @param vaultName The name of the vault which contains the key version to be retrieved.
   * @param keyName The name of the key version to be retrieved.
   * @param keyVersion The version of the key to be retrieved.
   * @param callback The callback
   */
  getVersion(resourceGroupName: string, vaultName: string, keyName: string, keyVersion: string, callback: msRest.ServiceCallback<Models.Key>): void;
  /**
   * @param resourceGroupName The name of the resource group which contains the specified key vault.
   * @param vaultName The name of the vault which contains the key version to be retrieved.
   * @param keyName The name of the key version to be retrieved.
   * @param keyVersion The version of the key to be retrieved.
   * @param options The optional parameters
   * @param callback The callback
   */
  getVersion(resourceGroupName: string, vaultName: string, keyName: string, keyVersion: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Key>): void;
  getVersion(resourceGroupName: string, vaultName: string, keyName: string, keyVersion: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Key>, callback?: msRest.ServiceCallback<Models.Key>): Promise<Models.KeysGetVersionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vaultName,
        keyName,
        keyVersion,
        options
      },
      getVersionOperationSpec,
      callback) as Promise<Models.KeysGetVersionResponse>;
  }

  /**
   * Lists the versions of the specified key in the specified key vault.
   * @param resourceGroupName The name of the resource group which contains the specified key vault.
   * @param vaultName The name of the vault which contains the key versions to be retrieved.
   * @param keyName The name of the key versions to be retrieved.
   * @param [options] The optional parameters
   * @returns Promise<Models.KeysListVersionsResponse>
   */
  listVersions(resourceGroupName: string, vaultName: string, keyName: string, options?: msRest.RequestOptionsBase): Promise<Models.KeysListVersionsResponse>;
  /**
   * @param resourceGroupName The name of the resource group which contains the specified key vault.
   * @param vaultName The name of the vault which contains the key versions to be retrieved.
   * @param keyName The name of the key versions to be retrieved.
   * @param callback The callback
   */
  listVersions(resourceGroupName: string, vaultName: string, keyName: string, callback: msRest.ServiceCallback<Models.KeyListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group which contains the specified key vault.
   * @param vaultName The name of the vault which contains the key versions to be retrieved.
   * @param keyName The name of the key versions to be retrieved.
   * @param options The optional parameters
   * @param callback The callback
   */
  listVersions(resourceGroupName: string, vaultName: string, keyName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.KeyListResult>): void;
  listVersions(resourceGroupName: string, vaultName: string, keyName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.KeyListResult>, callback?: msRest.ServiceCallback<Models.KeyListResult>): Promise<Models.KeysListVersionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vaultName,
        keyName,
        options
      },
      listVersionsOperationSpec,
      callback) as Promise<Models.KeysListVersionsResponse>;
  }

  /**
   * Lists the keys in the specified key vault.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.KeysListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.KeysListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.KeyListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.KeyListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.KeyListResult>, callback?: msRest.ServiceCallback<Models.KeyListResult>): Promise<Models.KeysListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.KeysListNextResponse>;
  }

  /**
   * Lists the versions of the specified key in the specified key vault.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.KeysListVersionsNextResponse>
   */
  listVersionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.KeysListVersionsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listVersionsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.KeyListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listVersionsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.KeyListResult>): void;
  listVersionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.KeyListResult>, callback?: msRest.ServiceCallback<Models.KeyListResult>): Promise<Models.KeysListVersionsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listVersionsNextOperationSpec,
      callback) as Promise<Models.KeysListVersionsNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const createIfNotExistOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/keys/{keyName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName0,
    Parameters.keyName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.KeyCreateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Key
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/keys/{keyName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName0,
    Parameters.keyName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Key
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/keys",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName0
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.KeyListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getVersionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/keys/{keyName}/versions/{keyVersion}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName0,
    Parameters.keyName,
    Parameters.keyVersion
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Key
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listVersionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/keys/{keyName}/versions",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName0,
    Parameters.keyName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.KeyListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.KeyListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listVersionsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.KeyListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
