/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/managedHsmsMappers";
import * as Parameters from "../models/parameters";
import { KeyVaultManagementClientContext } from "../keyVaultManagementClientContext";

/** Class representing a ManagedHsms. */
export class ManagedHsms {
  private readonly client: KeyVaultManagementClientContext;

  /**
   * Create a ManagedHsms.
   * @param {KeyVaultManagementClientContext} client Reference to the service client.
   */
  constructor(client: KeyVaultManagementClientContext) {
    this.client = client;
  }

  /**
   * Create or update a managed HSM Pool in the specified subscription.
   * @param resourceGroupName Name of the resource group that contains the managed HSM pool.
   * @param name Name of the managed HSM Pool
   * @param parameters Parameters to create or update the managed HSM Pool
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagedHsmsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, name: string, parameters: Models.ManagedHsm, options?: msRest.RequestOptionsBase): Promise<Models.ManagedHsmsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,name,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ManagedHsmsCreateOrUpdateResponse>;
  }

  /**
   * Update a managed HSM Pool in the specified subscription.
   * @param resourceGroupName Name of the resource group that contains the managed HSM pool.
   * @param name Name of the managed HSM Pool
   * @param parameters Parameters to patch the managed HSM Pool
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagedHsmsUpdateResponse>
   */
  update(resourceGroupName: string, name: string, parameters: Models.ManagedHsm, options?: msRest.RequestOptionsBase): Promise<Models.ManagedHsmsUpdateResponse> {
    return this.beginUpdate(resourceGroupName,name,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ManagedHsmsUpdateResponse>;
  }

  /**
   * Deletes the specified managed HSM Pool.
   * @param resourceGroupName Name of the resource group that contains the managed HSM pool.
   * @param name The name of the managed HSM Pool to delete
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,name,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Gets the specified managed HSM Pool.
   * @param resourceGroupName Name of the resource group that contains the managed HSM pool.
   * @param name The name of the managed HSM Pool.
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagedHsmsGetResponse>
   */
  get(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagedHsmsGetResponse>;
  /**
   * @param resourceGroupName Name of the resource group that contains the managed HSM pool.
   * @param name The name of the managed HSM Pool.
   * @param callback The callback
   */
  get(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.ManagedHsm>): void;
  /**
   * @param resourceGroupName Name of the resource group that contains the managed HSM pool.
   * @param name The name of the managed HSM Pool.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagedHsm>): void;
  get(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagedHsm>, callback?: msRest.ServiceCallback<Models.ManagedHsm>): Promise<Models.ManagedHsmsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ManagedHsmsGetResponse>;
  }

  /**
   * The List operation gets information about the managed HSM Pools associated with the subscription
   * and within the specified resource group.
   * @param resourceGroupName Name of the resource group that contains the managed HSM pool.
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagedHsmsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: Models.ManagedHsmsListByResourceGroupOptionalParams): Promise<Models.ManagedHsmsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName Name of the resource group that contains the managed HSM pool.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.ManagedHsmListResult>): void;
  /**
   * @param resourceGroupName Name of the resource group that contains the managed HSM pool.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: Models.ManagedHsmsListByResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.ManagedHsmListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: Models.ManagedHsmsListByResourceGroupOptionalParams | msRest.ServiceCallback<Models.ManagedHsmListResult>, callback?: msRest.ServiceCallback<Models.ManagedHsmListResult>): Promise<Models.ManagedHsmsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.ManagedHsmsListByResourceGroupResponse>;
  }

  /**
   * The List operation gets information about the managed HSM Pools associated with the
   * subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagedHsmsListBySubscriptionResponse>
   */
  listBySubscription(options?: Models.ManagedHsmsListBySubscriptionOptionalParams): Promise<Models.ManagedHsmsListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.ManagedHsmListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: Models.ManagedHsmsListBySubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.ManagedHsmListResult>): void;
  listBySubscription(options?: Models.ManagedHsmsListBySubscriptionOptionalParams | msRest.ServiceCallback<Models.ManagedHsmListResult>, callback?: msRest.ServiceCallback<Models.ManagedHsmListResult>): Promise<Models.ManagedHsmsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.ManagedHsmsListBySubscriptionResponse>;
  }

  /**
   * Create or update a managed HSM Pool in the specified subscription.
   * @param resourceGroupName Name of the resource group that contains the managed HSM pool.
   * @param name Name of the managed HSM Pool
   * @param parameters Parameters to create or update the managed HSM Pool
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, name: string, parameters: Models.ManagedHsm, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        parameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Update a managed HSM Pool in the specified subscription.
   * @param resourceGroupName Name of the resource group that contains the managed HSM pool.
   * @param name Name of the managed HSM Pool
   * @param parameters Parameters to patch the managed HSM Pool
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, name: string, parameters: Models.ManagedHsm, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        parameters,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Deletes the specified managed HSM Pool.
   * @param resourceGroupName Name of the resource group that contains the managed HSM pool.
   * @param name The name of the managed HSM Pool to delete
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * The List operation gets information about the managed HSM Pools associated with the subscription
   * and within the specified resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagedHsmsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagedHsmsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ManagedHsmListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagedHsmListResult>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagedHsmListResult>, callback?: msRest.ServiceCallback<Models.ManagedHsmListResult>): Promise<Models.ManagedHsmsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.ManagedHsmsListByResourceGroupNextResponse>;
  }

  /**
   * The List operation gets information about the managed HSM Pools associated with the
   * subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagedHsmsListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagedHsmsListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ManagedHsmListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagedHsmListResult>): void;
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagedHsmListResult>, callback?: msRest.ServiceCallback<Models.ManagedHsmListResult>): Promise<Models.ManagedHsmsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.ManagedHsmsListBySubscriptionNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/managedHSMs/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name1,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedHsm
    },
    default: {
      bodyMapper: Mappers.ManagedHsmError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/managedHSMs",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedHsmListResult
    },
    default: {
      bodyMapper: Mappers.ManagedHsmError
    }
  },
  serializer
};

const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/managedHSMs",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedHsmListResult
    },
    default: {
      bodyMapper: Mappers.ManagedHsmError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/managedHSMs/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name0,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.ManagedHsm,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ManagedHsm
    },
    202: {
      bodyMapper: Mappers.ManagedHsm
    },
    default: {
      bodyMapper: Mappers.ManagedHsmError
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/managedHSMs/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name0,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.ManagedHsm,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ManagedHsm
    },
    202: {
      bodyMapper: Mappers.ManagedHsm
    },
    default: {
      bodyMapper: Mappers.ManagedHsmError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/managedHSMs/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name1,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ManagedHsmError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedHsmListResult
    },
    default: {
      bodyMapper: Mappers.ManagedHsmError
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedHsmListResult
    },
    default: {
      bodyMapper: Mappers.ManagedHsmError
    }
  },
  serializer
};
