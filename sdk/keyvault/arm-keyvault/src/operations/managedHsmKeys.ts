/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ManagedHsmKeys } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { KeyVaultManagementClient } from "../keyVaultManagementClient";
import {
  ManagedHsmKey,
  ManagedHsmKeysListNextOptionalParams,
  ManagedHsmKeysListOptionalParams,
  ManagedHsmKeysListResponse,
  ManagedHsmKeysListVersionsNextOptionalParams,
  ManagedHsmKeysListVersionsOptionalParams,
  ManagedHsmKeysListVersionsResponse,
  ManagedHsmKeyCreateParameters,
  ManagedHsmKeysCreateIfNotExistOptionalParams,
  ManagedHsmKeysCreateIfNotExistResponse,
  ManagedHsmKeysGetOptionalParams,
  ManagedHsmKeysGetResponse,
  ManagedHsmKeysGetVersionOptionalParams,
  ManagedHsmKeysGetVersionResponse,
  ManagedHsmKeysListNextResponse,
  ManagedHsmKeysListVersionsNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ManagedHsmKeys operations. */
export class ManagedHsmKeysImpl implements ManagedHsmKeys {
  private readonly client: KeyVaultManagementClient;

  /**
   * Initialize a new instance of the class ManagedHsmKeys class.
   * @param client Reference to the service client
   */
  constructor(client: KeyVaultManagementClient) {
    this.client = client;
  }

  /**
   * Lists the keys in the specified managed HSM.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name The name of the Managed HSM Pool within the specified resource group.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    name: string,
    options?: ManagedHsmKeysListOptionalParams
  ): PagedAsyncIterableIterator<ManagedHsmKey> {
    const iter = this.listPagingAll(resourceGroupName, name, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(resourceGroupName, name, options, settings);
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    name: string,
    options?: ManagedHsmKeysListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ManagedHsmKey[]> {
    let result: ManagedHsmKeysListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceGroupName, name, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    name: string,
    options?: ManagedHsmKeysListOptionalParams
  ): AsyncIterableIterator<ManagedHsmKey> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the versions of the specified key in the specified managed HSM.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name The name of the Managed HSM Pool within the specified resource group.
   * @param keyName The name of the key to be created. The value you provide may be copied globally for
   *                the purpose of running the service. The value provided should not include personally identifiable or
   *                sensitive information.
   * @param options The options parameters.
   */
  public listVersions(
    resourceGroupName: string,
    name: string,
    keyName: string,
    options?: ManagedHsmKeysListVersionsOptionalParams
  ): PagedAsyncIterableIterator<ManagedHsmKey> {
    const iter = this.listVersionsPagingAll(
      resourceGroupName,
      name,
      keyName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listVersionsPagingPage(
          resourceGroupName,
          name,
          keyName,
          options,
          settings
        );
      }
    };
  }

  private async *listVersionsPagingPage(
    resourceGroupName: string,
    name: string,
    keyName: string,
    options?: ManagedHsmKeysListVersionsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ManagedHsmKey[]> {
    let result: ManagedHsmKeysListVersionsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listVersions(
        resourceGroupName,
        name,
        keyName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listVersionsNext(
        resourceGroupName,
        name,
        keyName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listVersionsPagingAll(
    resourceGroupName: string,
    name: string,
    keyName: string,
    options?: ManagedHsmKeysListVersionsOptionalParams
  ): AsyncIterableIterator<ManagedHsmKey> {
    for await (const page of this.listVersionsPagingPage(
      resourceGroupName,
      name,
      keyName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Creates the first version of a new key if it does not exist. If it already exists, then the existing
   * key is returned without any write operations being performed. This API does not create subsequent
   * versions, and does not update existing keys.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name The name of the Managed HSM Pool within the specified resource group.
   * @param keyName The name of the key to be created. The value you provide may be copied globally for
   *                the purpose of running the service. The value provided should not include personally identifiable or
   *                sensitive information.
   * @param parameters The parameters used to create the specified key.
   * @param options The options parameters.
   */
  createIfNotExist(
    resourceGroupName: string,
    name: string,
    keyName: string,
    parameters: ManagedHsmKeyCreateParameters,
    options?: ManagedHsmKeysCreateIfNotExistOptionalParams
  ): Promise<ManagedHsmKeysCreateIfNotExistResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, keyName, parameters, options },
      createIfNotExistOperationSpec
    );
  }

  /**
   * Gets the current version of the specified key from the specified managed HSM.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name The name of the Managed HSM Pool within the specified resource group.
   * @param keyName The name of the key to be created. The value you provide may be copied globally for
   *                the purpose of running the service. The value provided should not include personally identifiable or
   *                sensitive information.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    name: string,
    keyName: string,
    options?: ManagedHsmKeysGetOptionalParams
  ): Promise<ManagedHsmKeysGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, keyName, options },
      getOperationSpec
    );
  }

  /**
   * Lists the keys in the specified managed HSM.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name The name of the Managed HSM Pool within the specified resource group.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    name: string,
    options?: ManagedHsmKeysListOptionalParams
  ): Promise<ManagedHsmKeysListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listOperationSpec
    );
  }

  /**
   * Gets the specified version of the specified key in the specified managed HSM.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name The name of the Managed HSM Pool within the specified resource group.
   * @param keyName The name of the key to be created. The value you provide may be copied globally for
   *                the purpose of running the service. The value provided should not include personally identifiable or
   *                sensitive information.
   * @param keyVersion The version of the key to be retrieved.
   * @param options The options parameters.
   */
  getVersion(
    resourceGroupName: string,
    name: string,
    keyName: string,
    keyVersion: string,
    options?: ManagedHsmKeysGetVersionOptionalParams
  ): Promise<ManagedHsmKeysGetVersionResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, keyName, keyVersion, options },
      getVersionOperationSpec
    );
  }

  /**
   * Lists the versions of the specified key in the specified managed HSM.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name The name of the Managed HSM Pool within the specified resource group.
   * @param keyName The name of the key to be created. The value you provide may be copied globally for
   *                the purpose of running the service. The value provided should not include personally identifiable or
   *                sensitive information.
   * @param options The options parameters.
   */
  private _listVersions(
    resourceGroupName: string,
    name: string,
    keyName: string,
    options?: ManagedHsmKeysListVersionsOptionalParams
  ): Promise<ManagedHsmKeysListVersionsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, keyName, options },
      listVersionsOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name The name of the Managed HSM Pool within the specified resource group.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: ManagedHsmKeysListNextOptionalParams
  ): Promise<ManagedHsmKeysListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, nextLink, options },
      listNextOperationSpec
    );
  }

  /**
   * ListVersionsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param name The name of the Managed HSM Pool within the specified resource group.
   * @param keyName The name of the key to be created. The value you provide may be copied globally for
   *                the purpose of running the service. The value provided should not include personally identifiable or
   *                sensitive information.
   * @param nextLink The nextLink from the previous successful call to the ListVersions method.
   * @param options The options parameters.
   */
  private _listVersionsNext(
    resourceGroupName: string,
    name: string,
    keyName: string,
    nextLink: string,
    options?: ManagedHsmKeysListVersionsNextOptionalParams
  ): Promise<ManagedHsmKeysListVersionsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, keyName, nextLink, options },
      listVersionsNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createIfNotExistOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/managedHSMs/{name}/keys/{keyName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedHsmKey
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.keyName,
    Parameters.resourceGroupName1,
    Parameters.name
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/managedHSMs/{name}/keys/{keyName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedHsmKey
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.keyName,
    Parameters.resourceGroupName1,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/managedHSMs/{name}/keys",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedHsmKeyListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName1,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getVersionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/managedHSMs/{name}/keys/{keyName}/versions/{keyVersion}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedHsmKey
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.keyName,
    Parameters.keyVersion,
    Parameters.resourceGroupName1,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listVersionsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/managedHSMs/{name}/keys/{keyName}/versions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedHsmKeyListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.keyName,
    Parameters.resourceGroupName1,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedHsmKeyListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceGroupName1,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listVersionsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedHsmKeyListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.keyName,
    Parameters.nextLink,
    Parameters.resourceGroupName1,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
