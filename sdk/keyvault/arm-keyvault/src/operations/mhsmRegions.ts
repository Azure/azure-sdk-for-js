/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { MhsmRegions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { KeyVaultManagementClient } from "../keyVaultManagementClient";
import {
  MhsmGeoReplicatedRegion,
  MhsmRegionsListByResourceNextOptionalParams,
  MhsmRegionsListByResourceOptionalParams,
  MhsmRegionsListByResourceResponse,
  MhsmRegionsListByResourceNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing MhsmRegions operations. */
export class MhsmRegionsImpl implements MhsmRegions {
  private readonly client: KeyVaultManagementClient;

  /**
   * Initialize a new instance of the class MhsmRegions class.
   * @param client Reference to the service client
   */
  constructor(client: KeyVaultManagementClient) {
    this.client = client;
  }

  /**
   * The List operation gets information about the regions associated with the managed HSM Pool.
   * @param resourceGroupName Name of the resource group that contains the managed HSM pool.
   * @param name Name of the managed HSM Pool
   * @param options The options parameters.
   */
  public listByResource(
    resourceGroupName: string,
    name: string,
    options?: MhsmRegionsListByResourceOptionalParams
  ): PagedAsyncIterableIterator<MhsmGeoReplicatedRegion> {
    const iter = this.listByResourcePagingAll(resourceGroupName, name, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourcePagingPage(
          resourceGroupName,
          name,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourcePagingPage(
    resourceGroupName: string,
    name: string,
    options?: MhsmRegionsListByResourceOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<MhsmGeoReplicatedRegion[]> {
    let result: MhsmRegionsListByResourceResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResource(resourceGroupName, name, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourcePagingAll(
    resourceGroupName: string,
    name: string,
    options?: MhsmRegionsListByResourceOptionalParams
  ): AsyncIterableIterator<MhsmGeoReplicatedRegion> {
    for await (const page of this.listByResourcePagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * The List operation gets information about the regions associated with the managed HSM Pool.
   * @param resourceGroupName Name of the resource group that contains the managed HSM pool.
   * @param name Name of the managed HSM Pool
   * @param options The options parameters.
   */
  private _listByResource(
    resourceGroupName: string,
    name: string,
    options?: MhsmRegionsListByResourceOptionalParams
  ): Promise<MhsmRegionsListByResourceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listByResourceOperationSpec
    );
  }

  /**
   * ListByResourceNext
   * @param resourceGroupName Name of the resource group that contains the managed HSM pool.
   * @param name Name of the managed HSM Pool
   * @param nextLink The nextLink from the previous successful call to the ListByResource method.
   * @param options The options parameters.
   */
  private _listByResourceNext(
    resourceGroupName: string,
    name: string,
    nextLink: string,
    options?: MhsmRegionsListByResourceNextOptionalParams
  ): Promise<MhsmRegionsListByResourceNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, nextLink, options },
      listByResourceNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByResourceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/managedHSMs/{name}/regions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MhsmRegionsListResult
    },
    default: {
      bodyMapper: Mappers.ManagedHsmError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MhsmRegionsListResult
    },
    default: {
      bodyMapper: Mappers.ManagedHsmError
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.name1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
