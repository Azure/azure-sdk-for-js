/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  RoleAssignmentsDeleteOptionalParams,
  RoleAssignmentCreateParameters,
  RoleAssignmentsCreateOptionalParams,
  RoleAssignmentsCreateResponse,
  RoleAssignmentsGetOptionalParams,
  RoleAssignmentsGetResponse,
  RoleAssignmentsListForScopeOptionalParams,
  RoleAssignmentsListForScopeResponse,
  RoleAssignmentsListForScopeNextOptionalParams,
  RoleAssignmentsListForScopeNextResponse
} from "../models";

/** Interface representing a RoleAssignments. */
export interface RoleAssignments {
  /**
   * Deletes a role assignment.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param scope The scope of the role assignment to delete.
   * @param roleAssignmentName The name of the role assignment to delete.
   * @param options The options parameters.
   */
  delete(
    vaultBaseUrl: string,
    scope: string,
    roleAssignmentName: string,
    options?: RoleAssignmentsDeleteOptionalParams
  ): Promise<void>;
  /**
   * Creates a role assignment.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param scope The scope of the role assignment to create.
   * @param roleAssignmentName The name of the role assignment to create. It can be any valid GUID.
   * @param parameters Parameters for the role assignment.
   * @param options The options parameters.
   */
  create(
    vaultBaseUrl: string,
    scope: string,
    roleAssignmentName: string,
    parameters: RoleAssignmentCreateParameters,
    options?: RoleAssignmentsCreateOptionalParams
  ): Promise<RoleAssignmentsCreateResponse>;
  /**
   * Get the specified role assignment.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param scope The scope of the role assignment.
   * @param roleAssignmentName The name of the role assignment to get.
   * @param options The options parameters.
   */
  get(
    vaultBaseUrl: string,
    scope: string,
    roleAssignmentName: string,
    options?: RoleAssignmentsGetOptionalParams
  ): Promise<RoleAssignmentsGetResponse>;
  /**
   * Gets role assignments for a scope.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param scope The scope of the role assignments.
   * @param options The options parameters.
   */
  listForScope(
    vaultBaseUrl: string,
    scope: string,
    options?: RoleAssignmentsListForScopeOptionalParams
  ): Promise<RoleAssignmentsListForScopeResponse>;
  /**
   * ListForScopeNext
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param scope The scope of the role assignments.
   * @param nextLink The nextLink from the previous successful call to the ListForScope method.
   * @param options The options parameters.
   */
  listForScopeNext(
    vaultBaseUrl: string,
    scope: string,
    nextLink: string,
    options?: RoleAssignmentsListForScopeNextOptionalParams
  ): Promise<RoleAssignmentsListForScopeNextResponse>;
}
