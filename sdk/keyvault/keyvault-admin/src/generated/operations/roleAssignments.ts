/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/roleAssignmentsMappers";
import * as Parameters from "../models/parameters";
import { KeyVaultClientContext } from "../keyVaultClientContext";

/** Class representing a RoleAssignments. */
export class RoleAssignments {
  private readonly client: KeyVaultClientContext;

  /**
   * Create a RoleAssignments.
   * @param {KeyVaultClientContext} client Reference to the service client.
   */
  constructor(client: KeyVaultClientContext) {
    this.client = client;
  }

  /**
   * Deletes a role assignment.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param scope The scope of the role assignment to delete.
   * @param roleAssignmentName The name of the role assignment to delete.
   * @param [options] The optional parameters
   * @returns Promise<Models.RoleAssignmentsDeleteMethodResponse>
   */
  deleteMethod(vaultBaseUrl: string, scope: string, roleAssignmentName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.RoleAssignmentsDeleteMethodResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param scope The scope of the role assignment to delete.
   * @param roleAssignmentName The name of the role assignment to delete.
   * @param callback The callback
   */
  deleteMethod(vaultBaseUrl: string, scope: string, roleAssignmentName: string, callback: coreHttp.ServiceCallback<Models.RoleAssignment>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param scope The scope of the role assignment to delete.
   * @param roleAssignmentName The name of the role assignment to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(vaultBaseUrl: string, scope: string, roleAssignmentName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.RoleAssignment>): void;
  deleteMethod(vaultBaseUrl: string, scope: string, roleAssignmentName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.RoleAssignment>, callback?: coreHttp.ServiceCallback<Models.RoleAssignment>): Promise<Models.RoleAssignmentsDeleteMethodResponse> {
    return this.client.sendOperationRequest(
      {
        vaultBaseUrl,
        scope,
        roleAssignmentName,
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.RoleAssignmentsDeleteMethodResponse>;
  }

  /**
   * Creates a role assignment.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param scope The scope of the role assignment to create.
   * @param roleAssignmentName The name of the role assignment to create. It can be any valid GUID.
   * @param parameters Parameters for the role assignment.
   * @param [options] The optional parameters
   * @returns Promise<Models.RoleAssignmentsCreateResponse>
   */
  create(vaultBaseUrl: string, scope: string, roleAssignmentName: string, parameters: Models.RoleAssignmentCreateParameters, options?: coreHttp.RequestOptionsBase): Promise<Models.RoleAssignmentsCreateResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param scope The scope of the role assignment to create.
   * @param roleAssignmentName The name of the role assignment to create. It can be any valid GUID.
   * @param parameters Parameters for the role assignment.
   * @param callback The callback
   */
  create(vaultBaseUrl: string, scope: string, roleAssignmentName: string, parameters: Models.RoleAssignmentCreateParameters, callback: coreHttp.ServiceCallback<Models.RoleAssignment>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param scope The scope of the role assignment to create.
   * @param roleAssignmentName The name of the role assignment to create. It can be any valid GUID.
   * @param parameters Parameters for the role assignment.
   * @param options The optional parameters
   * @param callback The callback
   */
  create(vaultBaseUrl: string, scope: string, roleAssignmentName: string, parameters: Models.RoleAssignmentCreateParameters, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.RoleAssignment>): void;
  create(vaultBaseUrl: string, scope: string, roleAssignmentName: string, parameters: Models.RoleAssignmentCreateParameters, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.RoleAssignment>, callback?: coreHttp.ServiceCallback<Models.RoleAssignment>): Promise<Models.RoleAssignmentsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        vaultBaseUrl,
        scope,
        roleAssignmentName,
        parameters,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.RoleAssignmentsCreateResponse>;
  }

  /**
   * Get the specified role assignment.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param scope The scope of the role assignment.
   * @param roleAssignmentName The name of the role assignment to get.
   * @param [options] The optional parameters
   * @returns Promise<Models.RoleAssignmentsGetResponse>
   */
  get(vaultBaseUrl: string, scope: string, roleAssignmentName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.RoleAssignmentsGetResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param scope The scope of the role assignment.
   * @param roleAssignmentName The name of the role assignment to get.
   * @param callback The callback
   */
  get(vaultBaseUrl: string, scope: string, roleAssignmentName: string, callback: coreHttp.ServiceCallback<Models.RoleAssignment>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param scope The scope of the role assignment.
   * @param roleAssignmentName The name of the role assignment to get.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(vaultBaseUrl: string, scope: string, roleAssignmentName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.RoleAssignment>): void;
  get(vaultBaseUrl: string, scope: string, roleAssignmentName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.RoleAssignment>, callback?: coreHttp.ServiceCallback<Models.RoleAssignment>): Promise<Models.RoleAssignmentsGetResponse> {
    return this.client.sendOperationRequest(
      {
        vaultBaseUrl,
        scope,
        roleAssignmentName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.RoleAssignmentsGetResponse>;
  }

  /**
   * Gets role assignments for a scope.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param scope The scope of the role assignments.
   * @param [options] The optional parameters
   * @returns Promise<Models.RoleAssignmentsListForScopeResponse>
   */
  listForScope(vaultBaseUrl: string, scope: string, options?: Models.RoleAssignmentsListForScopeOptionalParams): Promise<Models.RoleAssignmentsListForScopeResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param scope The scope of the role assignments.
   * @param callback The callback
   */
  listForScope(vaultBaseUrl: string, scope: string, callback: coreHttp.ServiceCallback<Models.RoleAssignmentListResult>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param scope The scope of the role assignments.
   * @param options The optional parameters
   * @param callback The callback
   */
  listForScope(vaultBaseUrl: string, scope: string, options: Models.RoleAssignmentsListForScopeOptionalParams, callback: coreHttp.ServiceCallback<Models.RoleAssignmentListResult>): void;
  listForScope(vaultBaseUrl: string, scope: string, options?: Models.RoleAssignmentsListForScopeOptionalParams | coreHttp.ServiceCallback<Models.RoleAssignmentListResult>, callback?: coreHttp.ServiceCallback<Models.RoleAssignmentListResult>): Promise<Models.RoleAssignmentsListForScopeResponse> {
    return this.client.sendOperationRequest(
      {
        vaultBaseUrl,
        scope,
        options
      },
      listForScopeOperationSpec,
      callback) as Promise<Models.RoleAssignmentsListForScopeResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const deleteMethodOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.scope,
    Parameters.roleAssignmentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RoleAssignment
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const createOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.scope,
    Parameters.roleAssignmentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.RoleAssignmentCreateParameters,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.RoleAssignment
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const getOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.scope,
    Parameters.roleAssignmentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RoleAssignment
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const listForScopeOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "{scope}/providers/Microsoft.Authorization/roleAssignments",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.scope
  ],
  queryParameters: [
    Parameters.filter,
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RoleAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};
