/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { RoleAssignments } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { KeyVaultClientContext } from "../keyVaultClientContext";
import {
  RoleAssignmentsDeleteOptionalParams,
  RoleAssignmentCreateParameters,
  RoleAssignmentsCreateOptionalParams,
  RoleAssignmentsCreateResponse,
  RoleAssignmentsGetOptionalParams,
  RoleAssignmentsGetResponse,
  RoleAssignmentsListForScopeOptionalParams,
  RoleAssignmentsListForScopeResponse,
  RoleAssignmentsListForScopeNextOptionalParams,
  RoleAssignmentsListForScopeNextResponse
} from "../models";

/** Class containing RoleAssignments operations. */
export class RoleAssignmentsImpl implements RoleAssignments {
  private readonly client: KeyVaultClientContext;

  /**
   * Initialize a new instance of the class RoleAssignments class.
   * @param client Reference to the service client
   */
  constructor(client: KeyVaultClientContext) {
    this.client = client;
  }

  /**
   * Deletes a role assignment.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param scope The scope of the role assignment to delete.
   * @param roleAssignmentName The name of the role assignment to delete.
   * @param options The options parameters.
   */
  delete(
    vaultBaseUrl: string,
    scope: string,
    roleAssignmentName: string,
    options?: RoleAssignmentsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { vaultBaseUrl, scope, roleAssignmentName, options },
      deleteOperationSpec
    );
  }

  /**
   * Creates a role assignment.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param scope The scope of the role assignment to create.
   * @param roleAssignmentName The name of the role assignment to create. It can be any valid GUID.
   * @param parameters Parameters for the role assignment.
   * @param options The options parameters.
   */
  create(
    vaultBaseUrl: string,
    scope: string,
    roleAssignmentName: string,
    parameters: RoleAssignmentCreateParameters,
    options?: RoleAssignmentsCreateOptionalParams
  ): Promise<RoleAssignmentsCreateResponse> {
    return this.client.sendOperationRequest(
      { vaultBaseUrl, scope, roleAssignmentName, parameters, options },
      createOperationSpec
    );
  }

  /**
   * Get the specified role assignment.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param scope The scope of the role assignment.
   * @param roleAssignmentName The name of the role assignment to get.
   * @param options The options parameters.
   */
  get(
    vaultBaseUrl: string,
    scope: string,
    roleAssignmentName: string,
    options?: RoleAssignmentsGetOptionalParams
  ): Promise<RoleAssignmentsGetResponse> {
    return this.client.sendOperationRequest(
      { vaultBaseUrl, scope, roleAssignmentName, options },
      getOperationSpec
    );
  }

  /**
   * Gets role assignments for a scope.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param scope The scope of the role assignments.
   * @param options The options parameters.
   */
  listForScope(
    vaultBaseUrl: string,
    scope: string,
    options?: RoleAssignmentsListForScopeOptionalParams
  ): Promise<RoleAssignmentsListForScopeResponse> {
    return this.client.sendOperationRequest(
      { vaultBaseUrl, scope, options },
      listForScopeOperationSpec
    );
  }

  /**
   * ListForScopeNext
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param scope The scope of the role assignments.
   * @param nextLink The nextLink from the previous successful call to the ListForScope method.
   * @param options The options parameters.
   */
  listForScopeNext(
    vaultBaseUrl: string,
    scope: string,
    nextLink: string,
    options?: RoleAssignmentsListForScopeNextOptionalParams
  ): Promise<RoleAssignmentsListForScopeNextResponse> {
    return this.client.sendOperationRequest(
      { vaultBaseUrl, scope, nextLink, options },
      listForScopeNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.scope,
    Parameters.roleAssignmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}",
  httpMethod: "PUT",
  responses: {
    201: {
      bodyMapper: Mappers.RoleAssignment
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.scope,
    Parameters.roleAssignmentName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RoleAssignment
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.scope,
    Parameters.roleAssignmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listForScopeOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Authorization/roleAssignments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RoleAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
const listForScopeNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RoleAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.scope,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
