/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { RoleDefinitions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { KeyVaultClientContext } from "../keyVaultClientContext";
import {
  RoleDefinitionsDeleteOptionalParams,
  RoleDefinitionCreateParameters,
  RoleDefinitionsCreateOrUpdateOptionalParams,
  RoleDefinitionsCreateOrUpdateResponse,
  RoleDefinitionsGetOptionalParams,
  RoleDefinitionsGetResponse,
  RoleDefinitionsListOptionalParams,
  RoleDefinitionsListResponse,
  RoleDefinitionsListNextOptionalParams,
  RoleDefinitionsListNextResponse
} from "../models";

/** Class containing RoleDefinitions operations. */
export class RoleDefinitionsImpl implements RoleDefinitions {
  private readonly client: KeyVaultClientContext;

  /**
   * Initialize a new instance of the class RoleDefinitions class.
   * @param client Reference to the service client
   */
  constructor(client: KeyVaultClientContext) {
    this.client = client;
  }

  /**
   * Deletes a custom role definition.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param scope The scope of the role definition to delete. Managed HSM only supports '/'.
   * @param roleDefinitionName The name (GUID) of the role definition to delete.
   * @param options The options parameters.
   */
  delete(
    vaultBaseUrl: string,
    scope: string,
    roleDefinitionName: string,
    options?: RoleDefinitionsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { vaultBaseUrl, scope, roleDefinitionName, options },
      deleteOperationSpec
    );
  }

  /**
   * Creates or updates a custom role definition.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param scope The scope of the role definition to create or update. Managed HSM only supports '/'.
   * @param roleDefinitionName The name of the role definition to create or update. It can be any valid
   *                           GUID.
   * @param parameters Parameters for the role definition.
   * @param options The options parameters.
   */
  createOrUpdate(
    vaultBaseUrl: string,
    scope: string,
    roleDefinitionName: string,
    parameters: RoleDefinitionCreateParameters,
    options?: RoleDefinitionsCreateOrUpdateOptionalParams
  ): Promise<RoleDefinitionsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { vaultBaseUrl, scope, roleDefinitionName, parameters, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Get the specified role definition.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param scope The scope of the role definition to get. Managed HSM only supports '/'.
   * @param roleDefinitionName The name of the role definition to get.
   * @param options The options parameters.
   */
  get(
    vaultBaseUrl: string,
    scope: string,
    roleDefinitionName: string,
    options?: RoleDefinitionsGetOptionalParams
  ): Promise<RoleDefinitionsGetResponse> {
    return this.client.sendOperationRequest(
      { vaultBaseUrl, scope, roleDefinitionName, options },
      getOperationSpec
    );
  }

  /**
   * Get all role definitions that are applicable at scope and above.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param scope The scope of the role definition.
   * @param options The options parameters.
   */
  list(
    vaultBaseUrl: string,
    scope: string,
    options?: RoleDefinitionsListOptionalParams
  ): Promise<RoleDefinitionsListResponse> {
    return this.client.sendOperationRequest(
      { vaultBaseUrl, scope, options },
      listOperationSpec
    );
  }

  /**
   * ListNext
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param scope The scope of the role definition.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  listNext(
    vaultBaseUrl: string,
    scope: string,
    nextLink: string,
    options?: RoleDefinitionsListNextOptionalParams
  ): Promise<RoleDefinitionsListNextResponse> {
    return this.client.sendOperationRequest(
      { vaultBaseUrl, scope, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    404: {},
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.scope,
    Parameters.roleDefinitionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionName}",
  httpMethod: "PUT",
  responses: {
    201: {
      bodyMapper: Mappers.RoleDefinition
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.scope,
    Parameters.roleDefinitionName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RoleDefinition
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.scope,
    Parameters.roleDefinitionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Authorization/roleDefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RoleDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RoleDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.scope,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
