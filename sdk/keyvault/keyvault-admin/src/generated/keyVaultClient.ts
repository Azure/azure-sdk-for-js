/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import * as operations from "./operations";
import { KeyVaultClientContext } from "./keyVaultClientContext";

class KeyVaultClient extends KeyVaultClientContext {
  // Operation groups
  roleDefinitions: operations.RoleDefinitions;
  roleAssignments: operations.RoleAssignments;

  /**
   * Initializes a new instance of the KeyVaultClient class.
   * @param apiVersion Client API version.
   * @param [options] The parameter options
   */
  constructor(apiVersion: string, options?: coreHttp.ServiceClientOptions) {
    super(apiVersion, options);
    this.roleDefinitions = new operations.RoleDefinitions(this);
    this.roleAssignments = new operations.RoleAssignments(this);
  }

  /**
   * Creates a full backup using a user-provided SAS token to an Azure blob storage container.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param [options] The optional parameters
   * @returns Promise<Models.FullBackupResponse>
   */
  fullBackup(vaultBaseUrl: string, options?: Models.KeyVaultClientFullBackupOptionalParams): Promise<Models.FullBackupResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param callback The callback
   */
  fullBackup(vaultBaseUrl: string, callback: coreHttp.ServiceCallback<Models.FullBackupOperation>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The optional parameters
   * @param callback The callback
   */
  fullBackup(vaultBaseUrl: string, options: Models.KeyVaultClientFullBackupOptionalParams, callback: coreHttp.ServiceCallback<Models.FullBackupOperation>): void;
  fullBackup(vaultBaseUrl: string, options?: Models.KeyVaultClientFullBackupOptionalParams | coreHttp.ServiceCallback<Models.FullBackupOperation>, callback?: coreHttp.ServiceCallback<Models.FullBackupOperation>): Promise<Models.FullBackupResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        options
      },
      fullBackupOperationSpec,
      callback) as Promise<Models.FullBackupResponse>;
  }

  /**
   * Returns the status of full backup operation
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param jobId The id returned as part of the backup request
   * @param [options] The optional parameters
   * @returns Promise<Models.FullBackupStatusResponse>
   */
  fullBackupStatus(vaultBaseUrl: string, jobId: string, options?: coreHttp.RequestOptionsBase): Promise<Models.FullBackupStatusResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param jobId The id returned as part of the backup request
   * @param callback The callback
   */
  fullBackupStatus(vaultBaseUrl: string, jobId: string, callback: coreHttp.ServiceCallback<Models.FullBackupOperation>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param jobId The id returned as part of the backup request
   * @param options The optional parameters
   * @param callback The callback
   */
  fullBackupStatus(vaultBaseUrl: string, jobId: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.FullBackupOperation>): void;
  fullBackupStatus(vaultBaseUrl: string, jobId: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.FullBackupOperation>, callback?: coreHttp.ServiceCallback<Models.FullBackupOperation>): Promise<Models.FullBackupStatusResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        jobId,
        options
      },
      fullBackupStatusOperationSpec,
      callback) as Promise<Models.FullBackupStatusResponse>;
  }

  /**
   * Restores all key materials using the SAS token pointing to a previously stored Azure Blob
   * storage backup folder
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param [options] The optional parameters
   * @returns Promise<Models.FullRestoreOperationResponse>
   */
  fullRestoreOperationMethod(vaultBaseUrl: string, options?: Models.KeyVaultClientFullRestoreOperationMethodOptionalParams): Promise<Models.FullRestoreOperationResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param callback The callback
   */
  fullRestoreOperationMethod(vaultBaseUrl: string, callback: coreHttp.ServiceCallback<Models.FullRestoreOperation>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The optional parameters
   * @param callback The callback
   */
  fullRestoreOperationMethod(vaultBaseUrl: string, options: Models.KeyVaultClientFullRestoreOperationMethodOptionalParams, callback: coreHttp.ServiceCallback<Models.FullRestoreOperation>): void;
  fullRestoreOperationMethod(vaultBaseUrl: string, options?: Models.KeyVaultClientFullRestoreOperationMethodOptionalParams | coreHttp.ServiceCallback<Models.FullRestoreOperation>, callback?: coreHttp.ServiceCallback<Models.FullRestoreOperation>): Promise<Models.FullRestoreOperationResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        options
      },
      fullRestoreOperationMethodOperationSpec,
      callback) as Promise<Models.FullRestoreOperationResponse>;
  }

  /**
   * Returns the status of full restore operation
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param jobId The Job Id returned part of the full restore operation
   * @param [options] The optional parameters
   * @returns Promise<Models.FullRestoreStatusResponse>
   */
  fullRestoreStatus(vaultBaseUrl: string, jobId: string, options?: coreHttp.RequestOptionsBase): Promise<Models.FullRestoreStatusResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param jobId The Job Id returned part of the full restore operation
   * @param callback The callback
   */
  fullRestoreStatus(vaultBaseUrl: string, jobId: string, callback: coreHttp.ServiceCallback<Models.FullRestoreOperation>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param jobId The Job Id returned part of the full restore operation
   * @param options The optional parameters
   * @param callback The callback
   */
  fullRestoreStatus(vaultBaseUrl: string, jobId: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.FullRestoreOperation>): void;
  fullRestoreStatus(vaultBaseUrl: string, jobId: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.FullRestoreOperation>, callback?: coreHttp.ServiceCallback<Models.FullRestoreOperation>): Promise<Models.FullRestoreStatusResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        jobId,
        options
      },
      fullRestoreStatusOperationSpec,
      callback) as Promise<Models.FullRestoreStatusResponse>;
  }

  /**
   * Restores all key versions of a given key using user supplied SAS token pointing to a previously
   * stored Azure Blob storage backup folder
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key to be restored from the user supplied backup
   * @param [options] The optional parameters
   * @returns Promise<Models.SelectiveKeyRestoreOperationResponse>
   */
  selectiveKeyRestoreOperationMethod(vaultBaseUrl: string, keyName: string, options?: Models.KeyVaultClientSelectiveKeyRestoreOperationMethodOptionalParams): Promise<Models.SelectiveKeyRestoreOperationResponse>;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key to be restored from the user supplied backup
   * @param callback The callback
   */
  selectiveKeyRestoreOperationMethod(vaultBaseUrl: string, keyName: string, callback: coreHttp.ServiceCallback<Models.SelectiveKeyRestoreOperation>): void;
  /**
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key to be restored from the user supplied backup
   * @param options The optional parameters
   * @param callback The callback
   */
  selectiveKeyRestoreOperationMethod(vaultBaseUrl: string, keyName: string, options: Models.KeyVaultClientSelectiveKeyRestoreOperationMethodOptionalParams, callback: coreHttp.ServiceCallback<Models.SelectiveKeyRestoreOperation>): void;
  selectiveKeyRestoreOperationMethod(vaultBaseUrl: string, keyName: string, options?: Models.KeyVaultClientSelectiveKeyRestoreOperationMethodOptionalParams | coreHttp.ServiceCallback<Models.SelectiveKeyRestoreOperation>, callback?: coreHttp.ServiceCallback<Models.SelectiveKeyRestoreOperation>): Promise<Models.SelectiveKeyRestoreOperationResponse> {
    return this.sendOperationRequest(
      {
        vaultBaseUrl,
        keyName,
        options
      },
      selectiveKeyRestoreOperationMethodOperationSpec,
      callback) as Promise<Models.SelectiveKeyRestoreOperationResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const fullBackupOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "backup",
  urlParameters: [
    Parameters.vaultBaseUrl
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: [
      "options",
      "azureStorageBlobContainerUri"
    ],
    mapper: Mappers.SASTokenParameter
  },
  responses: {
    202: {
      bodyMapper: Mappers.FullBackupOperation,
      headersMapper: Mappers.FullBackupHeaders
    },
    default: {
      bodyMapper: Mappers.KeyVaultError,
      headersMapper: Mappers.FullBackupHeaders
    }
  },
  serializer
};

const fullBackupStatusOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "backup/{jobId}/pending",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.jobId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FullBackupOperation
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const fullRestoreOperationMethodOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "restore",
  urlParameters: [
    Parameters.vaultBaseUrl
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: [
      "options",
      "restoreBlobDetails"
    ],
    mapper: Mappers.RestoreOperationParameters
  },
  responses: {
    202: {
      bodyMapper: Mappers.FullRestoreOperation,
      headersMapper: Mappers.FullRestoreOperationHeaders
    },
    default: {
      bodyMapper: Mappers.KeyVaultError,
      headersMapper: Mappers.FullRestoreOperationHeaders
    }
  },
  serializer
};

const fullRestoreStatusOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "restore/{jobId}/pending",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.jobId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FullRestoreOperation
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  serializer
};

const selectiveKeyRestoreOperationMethodOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "keys/{keyName}/restore",
  urlParameters: [
    Parameters.vaultBaseUrl,
    Parameters.keyName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: [
      "options",
      "restoreBlobDetails"
    ],
    mapper: Mappers.SelectiveKeyRestoreOperationParameters
  },
  responses: {
    202: {
      bodyMapper: Mappers.SelectiveKeyRestoreOperation,
      headersMapper: Mappers.SelectiveKeyRestoreOperationHeaders
    },
    default: {
      bodyMapper: Mappers.KeyVaultError,
      headersMapper: Mappers.SelectiveKeyRestoreOperationHeaders
    }
  },
  serializer
};

export {
  KeyVaultClient,
  KeyVaultClientContext,
  Models as KeyVaultModels,
  Mappers as KeyVaultMappers
};
export * from "./operations";
