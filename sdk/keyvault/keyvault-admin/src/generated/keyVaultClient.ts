/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import { LROPoller, shouldDeserializeLRO } from "./lro";
import * as operations from "./operations";
import * as Parameters from "./models/parameters";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { KeyVaultClientContext } from "./keyVaultClientContext";
import {
  KeyVaultClientOptionalParams,
  KeyVaultClientFullBackupOptionalParams,
  KeyVaultClientFullBackupResponse,
  KeyVaultClientFullBackupStatusResponse,
  KeyVaultClientFullRestoreOperationOptionalParams,
  KeyVaultClientFullRestoreOperationResponse,
  KeyVaultClientRestoreStatusResponse,
  KeyVaultClientSelectiveKeyRestoreOperationOptionalParams,
  KeyVaultClientSelectiveKeyRestoreOperationResponse
} from "./models";

class KeyVaultClient extends KeyVaultClientContext {
  /**
   * Initializes a new instance of the KeyVaultClient class.
   * @param options The parameter options
   */
  constructor(options?: KeyVaultClientOptionalParams) {
    super(options);
    this.roleDefinitions = new operations.RoleDefinitions(this);
    this.roleAssignments = new operations.RoleAssignments(this);
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }

  /**
   * Creates a full backup using a user-provided SAS token to an Azure blob storage container.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The options parameters.
   */
  async fullBackup(
    vaultBaseUrl: string,
    options?: KeyVaultClientFullBackupOptionalParams
  ): Promise<LROPoller<KeyVaultClientFullBackupResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options,
      "azure-async-operation"
    );

    const args: coreHttp.OperationArguments = {
      vaultBaseUrl,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.sendOperationRequest(args, spec) as Promise<
        KeyVaultClientFullBackupResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      fullBackupOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: fullBackupOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "azure-async-operation"
    });
  }

  /**
   * Returns the status of full backup operation
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param jobId The id returned as part of the backup request
   * @param options The options parameters.
   */
  fullBackupStatus(
    vaultBaseUrl: string,
    jobId: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientFullBackupStatusResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, jobId, options: operationOptions },
      fullBackupStatusOperationSpec
    ) as Promise<KeyVaultClientFullBackupStatusResponse>;
  }

  /**
   * Restores all key materials using the SAS token pointing to a previously stored Azure Blob storage
   * backup folder
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The options parameters.
   */
  async fullRestoreOperation(
    vaultBaseUrl: string,
    options?: KeyVaultClientFullRestoreOperationOptionalParams
  ): Promise<LROPoller<KeyVaultClientFullRestoreOperationResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options,
      "azure-async-operation"
    );

    const args: coreHttp.OperationArguments = {
      vaultBaseUrl,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.sendOperationRequest(args, spec) as Promise<
        KeyVaultClientFullRestoreOperationResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      fullRestoreOperationOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: fullRestoreOperationOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "azure-async-operation"
    });
  }

  /**
   * Returns the status of restore operation
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param jobId The Job Id returned part of the restore operation
   * @param options The options parameters.
   */
  restoreStatus(
    vaultBaseUrl: string,
    jobId: string,
    options?: coreHttp.OperationOptions
  ): Promise<KeyVaultClientRestoreStatusResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { vaultBaseUrl, jobId, options: operationOptions },
      restoreStatusOperationSpec
    ) as Promise<KeyVaultClientRestoreStatusResponse>;
  }

  /**
   * Restores all key versions of a given key using user supplied SAS token pointing to a previously
   * stored Azure Blob storage backup folder
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key to be restored from the user supplied backup
   * @param options The options parameters.
   */
  async selectiveKeyRestoreOperation(
    vaultBaseUrl: string,
    keyName: string,
    options?: KeyVaultClientSelectiveKeyRestoreOperationOptionalParams
  ): Promise<LROPoller<KeyVaultClientSelectiveKeyRestoreOperationResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(
      options,
      "azure-async-operation"
    );

    const args: coreHttp.OperationArguments = {
      vaultBaseUrl,
      keyName,
      options: operationOptions
    };
    const sendOperation = (
      args: coreHttp.OperationArguments,
      spec: coreHttp.OperationSpec
    ) =>
      this.sendOperationRequest(args, spec) as Promise<
        KeyVaultClientSelectiveKeyRestoreOperationResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      selectiveKeyRestoreOperationOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: selectiveKeyRestoreOperationOperationSpec,
      initialOperationResult,
      sendOperation,
      finalStateVia: "azure-async-operation"
    });
  }

  roleDefinitions: operations.RoleDefinitions;
  roleAssignments: operations.RoleAssignments;
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const fullBackupOperationSpec: coreHttp.OperationSpec = {
  path: "/backup",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.FullBackupOperation,
      headersMapper: Mappers.KeyVaultClientFullBackupHeaders
    },
    201: {
      bodyMapper: Mappers.FullBackupOperation,
      headersMapper: Mappers.KeyVaultClientFullBackupHeaders
    },
    202: {
      bodyMapper: Mappers.FullBackupOperation,
      headersMapper: Mappers.KeyVaultClientFullBackupHeaders
    },
    204: {
      bodyMapper: Mappers.FullBackupOperation,
      headersMapper: Mappers.KeyVaultClientFullBackupHeaders
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.azureStorageBlobContainerUri,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const fullBackupStatusOperationSpec: coreHttp.OperationSpec = {
  path: "/backup/{jobId}/pending",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FullBackupOperation
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.jobId],
  serializer
};
const fullRestoreOperationOperationSpec: coreHttp.OperationSpec = {
  path: "/restore",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.RestoreOperation,
      headersMapper: Mappers.KeyVaultClientFullRestoreOperationHeaders
    },
    201: {
      bodyMapper: Mappers.RestoreOperation,
      headersMapper: Mappers.KeyVaultClientFullRestoreOperationHeaders
    },
    202: {
      bodyMapper: Mappers.RestoreOperation,
      headersMapper: Mappers.KeyVaultClientFullRestoreOperationHeaders
    },
    204: {
      bodyMapper: Mappers.RestoreOperation,
      headersMapper: Mappers.KeyVaultClientFullRestoreOperationHeaders
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.restoreBlobDetails,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const restoreStatusOperationSpec: coreHttp.OperationSpec = {
  path: "/restore/{jobId}/pending",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RestoreOperation
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.jobId],
  serializer
};
const selectiveKeyRestoreOperationOperationSpec: coreHttp.OperationSpec = {
  path: "/keys/{keyName}/restore",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SelectiveKeyRestoreOperation,
      headersMapper: Mappers.KeyVaultClientSelectiveKeyRestoreOperationHeaders
    },
    201: {
      bodyMapper: Mappers.SelectiveKeyRestoreOperation,
      headersMapper: Mappers.KeyVaultClientSelectiveKeyRestoreOperationHeaders
    },
    202: {
      bodyMapper: Mappers.SelectiveKeyRestoreOperation,
      headersMapper: Mappers.KeyVaultClientSelectiveKeyRestoreOperationHeaders
    },
    204: {
      bodyMapper: Mappers.SelectiveKeyRestoreOperation,
      headersMapper: Mappers.KeyVaultClientSelectiveKeyRestoreOperationHeaders
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.restoreBlobDetails1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};

// Operation Specifications

export {
  KeyVaultClient,
  KeyVaultClientContext,
  Models as KeyVaultModels,
  Mappers as KeyVaultMappers
};
export * from "./operations";
