/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import { RoleDefinitionsImpl, RoleAssignmentsImpl } from "./operations";
import { RoleDefinitions, RoleAssignments } from "./operationsInterfaces";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import { KeyVaultClientContext } from "./keyVaultClientContext";
import {
  KeyVaultClientOptionalParams,
  ApiVersion74,
  FullBackupOptionalParams,
  FullBackupResponse,
  FullBackupStatusOptionalParams,
  FullBackupStatusResponse,
  FullRestoreOperationOptionalParams,
  FullRestoreOperationResponse,
  RestoreStatusOptionalParams,
  RestoreStatusResponse,
  SelectiveKeyRestoreOperationOptionalParams,
  SelectiveKeyRestoreOperationResponse,
  UpdateSettingOptionalParams,
  UpdateSettingResponse,
  GetSettingOptionalParams,
  GetSettingResponse,
  GetSettingsOptionalParams,
  GetSettingsResponse
} from "./models";

export class KeyVaultClient extends KeyVaultClientContext {
  /**
   * Initializes a new instance of the KeyVaultClient class.
   * @param apiVersion Api Version
   * @param options The parameter options
   */
  constructor(
    apiVersion: ApiVersion74,
    options?: KeyVaultClientOptionalParams
  ) {
    super(apiVersion, options);
    this.roleDefinitions = new RoleDefinitionsImpl(this);
    this.roleAssignments = new RoleAssignmentsImpl(this);
  }

  /**
   * Creates a full backup using a user-provided SAS token to an Azure blob storage container.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The options parameters.
   */
  fullBackup(
    vaultBaseUrl: string,
    options?: FullBackupOptionalParams
  ): Promise<FullBackupResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, options },
      fullBackupOperationSpec
    );
  }

  /**
   * Returns the status of full backup operation
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param jobId The id returned as part of the backup request
   * @param options The options parameters.
   */
  fullBackupStatus(
    vaultBaseUrl: string,
    jobId: string,
    options?: FullBackupStatusOptionalParams
  ): Promise<FullBackupStatusResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, jobId, options },
      fullBackupStatusOperationSpec
    );
  }

  /**
   * Restores all key materials using the SAS token pointing to a previously stored Azure Blob storage
   * backup folder
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The options parameters.
   */
  fullRestoreOperation(
    vaultBaseUrl: string,
    options?: FullRestoreOperationOptionalParams
  ): Promise<FullRestoreOperationResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, options },
      fullRestoreOperationOperationSpec
    );
  }

  /**
   * Returns the status of restore operation
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param jobId The Job Id returned part of the restore operation
   * @param options The options parameters.
   */
  restoreStatus(
    vaultBaseUrl: string,
    jobId: string,
    options?: RestoreStatusOptionalParams
  ): Promise<RestoreStatusResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, jobId, options },
      restoreStatusOperationSpec
    );
  }

  /**
   * Restores all key versions of a given key using user supplied SAS token pointing to a previously
   * stored Azure Blob storage backup folder
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param keyName The name of the key to be restored from the user supplied backup
   * @param options The options parameters.
   */
  selectiveKeyRestoreOperation(
    vaultBaseUrl: string,
    keyName: string,
    options?: SelectiveKeyRestoreOperationOptionalParams
  ): Promise<SelectiveKeyRestoreOperationResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, keyName, options },
      selectiveKeyRestoreOperationOperationSpec
    );
  }

  /**
   * Description of the pool setting to be updated
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param settingName The name of the account setting. Must be a valid settings option.
   * @param value The value of the pool setting.
   * @param options The options parameters.
   */
  updateSetting(
    vaultBaseUrl: string,
    settingName: string,
    value: string,
    options?: UpdateSettingOptionalParams
  ): Promise<UpdateSettingResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, settingName, value, options },
      updateSettingOperationSpec
    );
  }

  /**
   * Retrieves the setting object of a specified setting name.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param settingName The name of the account setting. Must be a valid settings option.
   * @param options The options parameters.
   */
  getSetting(
    vaultBaseUrl: string,
    settingName: string,
    options?: GetSettingOptionalParams
  ): Promise<GetSettingResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, settingName, options },
      getSettingOperationSpec
    );
  }

  /**
   * Retrieves a list of all the available account settings that can be configured.
   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.
   * @param options The options parameters.
   */
  getSettings(
    vaultBaseUrl: string,
    options?: GetSettingsOptionalParams
  ): Promise<GetSettingsResponse> {
    return this.sendOperationRequest(
      { vaultBaseUrl, options },
      getSettingsOperationSpec
    );
  }

  roleDefinitions: RoleDefinitions;
  roleAssignments: RoleAssignments;
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const fullBackupOperationSpec: coreClient.OperationSpec = {
  path: "/backup",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.FullBackupOperation,
      headersMapper: Mappers.KeyVaultClientFullBackupHeaders
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.azureStorageBlobContainerUri,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const fullBackupStatusOperationSpec: coreClient.OperationSpec = {
  path: "/backup/{jobId}/pending",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FullBackupOperation
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.jobId],
  headerParameters: [Parameters.accept],
  serializer
};
const fullRestoreOperationOperationSpec: coreClient.OperationSpec = {
  path: "/restore",
  httpMethod: "PUT",
  responses: {
    202: {
      bodyMapper: Mappers.RestoreOperation,
      headersMapper: Mappers.KeyVaultClientFullRestoreOperationHeaders
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.restoreBlobDetails,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const restoreStatusOperationSpec: coreClient.OperationSpec = {
  path: "/restore/{jobId}/pending",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RestoreOperation
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.jobId],
  headerParameters: [Parameters.accept],
  serializer
};
const selectiveKeyRestoreOperationOperationSpec: coreClient.OperationSpec = {
  path: "/keys/{keyName}/restore",
  httpMethod: "PUT",
  responses: {
    202: {
      bodyMapper: Mappers.SelectiveKeyRestoreOperation,
      headersMapper: Mappers.KeyVaultClientSelectiveKeyRestoreOperationHeaders
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: Parameters.restoreBlobDetails1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateSettingOperationSpec: coreClient.OperationSpec = {
  path: "/settings/{setting-name}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Setting
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  requestBody: {
    parameterPath: { value: ["value"] },
    mapper: { ...Mappers.UpdateSettingRequest, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.settingName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getSettingOperationSpec: coreClient.OperationSpec = {
  path: "/settings/{setting-name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Setting
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl, Parameters.settingName],
  headerParameters: [Parameters.accept],
  serializer
};
const getSettingsOperationSpec: coreClient.OperationSpec = {
  path: "/settings",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SettingsListResult
    },
    default: {
      bodyMapper: Mappers.KeyVaultError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.vaultBaseUrl],
  headerParameters: [Parameters.accept],
  serializer
};
