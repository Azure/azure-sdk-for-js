{"version":3,"file":"createKeyVaultClient.js","sourceRoot":"","sources":["../../src/createKeyVaultClient.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAalC,oDAoCC;AA7CD,qEAA+D;AAC/D,kEAAgF;AAChF,4DAAsE;AAItE,iDAAiE;AACjE,qCAAkC;AAElC,SAAgB,oBAAoB,CAClC,QAAgB,EAChB,UAA2B,EAC3B,OAAyF;;IAEzF,MAAM,aAAa,mCACd,OAAO,KACV,UAAU,EAAE,OAAO,CAAC,cAAc,IAAI,iCAAkB,EACxD,cAAc,EAAE;YACd,MAAM,EAAE,eAAM,CAAC,IAAI;YACnB,4BAA4B,EAAE;gBAC5B,sBAAsB;gBACtB,4BAA4B;gBAC5B,+BAA+B;aAChC;SACF,GACF,CAAC;IACF,MAAA,aAAa,CAAC,gBAAgB,oCAA9B,aAAa,CAAC,gBAAgB,GAAK,EAAE,EAAC;IACtC,aAAa,CAAC,gBAAgB,CAAC,eAAe,GAAG,GAAG,MAAA,aAAa,CAAC,gBAAgB,CAAC,eAAe,mCAAI,EAAE,4BAA4B,0BAAW,EAAE,CAAC;IAElJ,MAAM,MAAM,GAAG,IAAI,kCAAc,CAAC,QAAQ,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC;IAEvE,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,wDAAmC,EAAE,CAAC,CAAC;IAC5E,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAA,8CAA4B,EAAC,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC;IAC7E,yEAAyE;IACzE,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC;QACxB,IAAI,EAAE,mBAAmB;QACzB,WAAW,CAAC,OAAO,EAAE,IAAI;;YACvB,MAAM,WAAW,GAAG,MAAA,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,mCAAI,EAAE,CAAC;YAC9D,IAAI,WAAW,CAAC,UAAU,CAAC,kBAAkB,CAAC,EAAE,CAAC;gBAC/C,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;YAC1D,CAAC;YACD,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC;QACvB,CAAC;KACF,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { TokenCredential } from \"@azure/core-auth\";\nimport type { KeyVaultClientOptionalParams } from \"./generated/keyVaultClient.js\";\nimport { KeyVaultClient } from \"./generated/keyVaultClient.js\";\nimport { bearerTokenAuthenticationPolicyName } from \"@azure/core-rest-pipeline\";\nimport { keyVaultAuthenticationPolicy } from \"@azure/keyvault-common\";\nimport type { AccessControlClientOptions } from \"./accessControlModels.js\";\nimport type { KeyVaultBackupClientOptions } from \"./backupClientModels.js\";\nimport type { SettingsClientOptions } from \"./settingsClientModels.js\";\nimport { LATEST_API_VERSION, SDK_VERSION } from \"./constants.js\";\nimport { logger } from \"./log.js\";\n\nexport function createKeyVaultClient(\n  vaultUrl: string,\n  credential: TokenCredential,\n  options: AccessControlClientOptions | KeyVaultBackupClientOptions | SettingsClientOptions,\n): KeyVaultClient {\n  const clientOptions: KeyVaultClientOptionalParams = {\n    ...options,\n    apiVersion: options.serviceVersion || LATEST_API_VERSION,\n    loggingOptions: {\n      logger: logger.info,\n      additionalAllowedHeaderNames: [\n        \"x-ms-keyvault-region\",\n        \"x-ms-keyvault-network-info\",\n        \"x-ms-keyvault-service-version\",\n      ],\n    },\n  };\n  clientOptions.userAgentOptions ??= {};\n  clientOptions.userAgentOptions.userAgentPrefix = `${clientOptions.userAgentOptions.userAgentPrefix ?? \"\"} azsdk-js-keyvault-admin/${SDK_VERSION}`;\n\n  const client = new KeyVaultClient(vaultUrl, credential, clientOptions);\n\n  client.pipeline.removePolicy({ name: bearerTokenAuthenticationPolicyName });\n  client.pipeline.addPolicy(keyVaultAuthenticationPolicy(credential, options));\n  // Workaround for: https://github.com/Azure/azure-sdk-for-js/issues/31843\n  client.pipeline.addPolicy({\n    name: \"ContentTypePolicy\",\n    sendRequest(request, next) {\n      const contentType = request.headers.get(\"Content-Type\") ?? \"\";\n      if (contentType.startsWith(\"application/json\")) {\n        request.headers.set(\"Content-Type\", \"application/json\");\n      }\n      return next(request);\n    },\n  });\n  return client;\n}\n"]}