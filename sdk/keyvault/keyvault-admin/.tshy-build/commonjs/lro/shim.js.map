{"version":3,"file":"shim.js","sourceRoot":"","sources":["../../../src/lro/shim.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\nimport type {\n  CancelOnProgress,\n  OperationState,\n  PollerLike as CorePollerLike,\n} from \"@azure/core-lro\";\nimport type { KeyVaultAdminPollOperationState } from \"./models.js\";\nimport { FullBackupOperation, RestoreOperation } from \"../generated/index.js\";\n\n/**\n * A simple poller that can be used to poll a long running operation.\n */\nexport interface PollerLike<TState extends KeyVaultAdminPollOperationState<TResult>, TResult> {\n  /**\n   * Returns true if the poller has finished polling.\n   */\n  isDone(): boolean;\n  /**\n   * Returns true if the poller is stopped.\n   */\n  isStopped(): boolean;\n  /**\n   * Returns the state of the operation.\n   */\n  getOperationState(): TState;\n  /**\n   * Returns the result value of the operation,\n   * regardless of the state of the poller.\n   * It can return undefined or an incomplete form of the final TResult value\n   * depending on the implementation.\n   */\n  getResult(): TResult | undefined;\n  /**\n   * Returns a promise that will resolve once a single polling request finishes.\n   * It does this by calling the update method of the Poller's operation.\n   */\n  poll(options?: { abortSignal?: AbortSignalLike }): Promise<void>;\n  /**\n   * Returns a promise that will resolve once the underlying operation is completed.\n   */\n  pollUntilDone(pollOptions?: { abortSignal?: AbortSignalLike }): Promise<TResult>;\n  /**\n   * Invokes the provided callback after each polling is completed,\n   * sending the current state of the poller's operation.\n   *\n   * It returns a method that can be used to stop receiving updates on the given callback function.\n   */\n  onProgress(callback: (state: TState) => void): CancelOnProgress;\n\n  /**\n   * Returns a string representation of the poller's operation. Similar to serialize but returns a string.\n   */\n  toString(): string;\n\n  /**\n   * Stops the poller from continuing to poll. Please note this will only stop the client-side polling\n   */\n  stopPolling(): void;\n}\n\nexport async function wrapPoller<TState extends OperationState<TResult>, TResult>(\n  httpPoller: CorePollerLike<TState, TResult>,\n): Promise<PollerLike<TState, TResult>> {\n  const abortController = new AbortController();\n  const simplePoller: PollerLike<TState, TResult> = {\n    isDone() {\n      return httpPoller.isDone;\n    },\n    isStopped() {\n      return abortController.signal.aborted;\n    },\n    getOperationState() {\n      if (!httpPoller.operationState) {\n        throw new Error(\n          \"Operation state is not available. The poller may not have been started and you could await submitted() before calling getOperationState().\",\n        );\n      }\n      const mergedState = {\n        ...httpPoller.operationState,\n        ...httpPoller.operationState.result,\n        isStarted: httpPoller.operationState.status !== \"notStarted\", // Shim for isStarted\n        isCompleted:\n          httpPoller.operationState.status === \"succeeded\" ||\n          httpPoller.operationState.status === \"failed\" ||\n          httpPoller.operationState.status === \"canceled\",\n      };\n      if (mergedState.error === null) {\n        mergedState.error = undefined;\n      }\n      return mergedState;\n    },\n    getResult() {\n      return httpPoller.result;\n    },\n    toString() {\n      if (!httpPoller.operationState) {\n        throw new Error(\n          \"Operation state is not available. The poller may not have been started and you could await submitted() before calling getOperationState().\",\n        );\n      }\n      return JSON.stringify({\n        state: httpPoller.operationState,\n      });\n    },\n    stopPolling() {\n      abortController.abort();\n    },\n    onProgress: httpPoller.onProgress,\n    async poll(options) {\n      await httpPoller.poll(options);\n    },\n    pollUntilDone(pollOptions?: { abortSignal?: AbortSignalLike }) {\n      function abortListener(): void {\n        abortController.abort();\n      }\n      const inputAbortSignal = pollOptions?.abortSignal;\n      const abortSignal = abortController.signal;\n      if (inputAbortSignal?.aborted) {\n        abortController.abort();\n      } else if (!abortSignal.aborted) {\n        inputAbortSignal?.addEventListener(\"abort\", abortListener, {\n          once: true,\n        });\n      }\n      return httpPoller.pollUntilDone({ abortSignal: abortController.signal });\n    },\n  };\n  await httpPoller.submitted();\n  // clean up the final GET path so that we could skip final GET\n  // Workaround for https://github.com/Azure/azure-sdk-for-js/issues/32142\n  if ((httpPoller.operationState as any)?.config?.resourceLocation) {\n    (httpPoller.operationState as any).config.resourceLocation = undefined;\n  }\n  return simplePoller;\n}\n\n/**\n * A helper that standardizes the shape of the result of a long-running operation.\n *\n * smoothing over the differences between `null` and `undefined` sent over the wire in responses.\n */\nexport function updateState(state: OperationState<RestoreOperation | FullBackupOperation>): void {\n  if (state.result) {\n    state.result = {\n      ...state.result,\n      endTime: state.result.endTime ?? undefined,\n      startTime: state.result.startTime ?? undefined,\n      error: state.result.error ?? undefined,\n      statusDetails: state.result.statusDetails ?? undefined,\n    };\n\n    if (\"folderUri\" in state.result) {\n      state.result.folderUri ??= undefined;\n    }\n  }\n}\n"]}