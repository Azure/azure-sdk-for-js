{"version":3,"file":"backupClient.js","sourceRoot":"","sources":["../../src/backupClient.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAelC,+CAAyC;AACzC,uEAAiE;AAEjE,2CAAwD;AAOxD,iFAAoE;AASpE;;;;;GAKG;AACH,MAAa,oBAAoB;IAW/B;;;;;;;;;;;;;;;OAeG;IACH,YACE,QAAgB,EAChB,UAA2B,EAC3B,UAAuC,EAAE;QAEzC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAEzB,IAAI,CAAC,MAAM,GAAG,IAAA,8CAAoB,EAAC,QAAQ,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;IACpE,CAAC;IAyEM,KAAK,CAAC,cAAc,CACzB,cAAsB,EACtB,oBAA4D,EAAE,EAC9D,+BAA8D,EAAE;QAEhE,MAAM,QAAQ,GAAG,OAAO,iBAAiB,KAAK,QAAQ,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,SAAS,CAAC;QACvF,MAAM,OAAO,GACX,OAAO,iBAAiB,KAAK,QAAQ,CAAC,CAAC,CAAC,4BAA4B,CAAC,CAAC,CAAC,iBAAiB,CAAC;QAE3F,IAAI,MAAM,CAAC;QACX,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;YACvB,MAAM,GAAG,IAAA,uCAAa,EAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;QAC9F,CAAC;aAAM,CAAC;YACN,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAChC;gBACE,kBAAkB,EAAE,cAAc;gBAClC,KAAK,EAAE,QAAQ;gBACf,kBAAkB,EAAE,QAAQ,KAAK,SAAS;aAC3C,EACD;gBACE,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,cAAc,EAAE,OAAO,CAAC,cAAc;gBACtC,UAAU,EAAE,OAAO,CAAC,UAAU;gBAC9B,cAAc,EAAE,OAAO,CAAC,cAAc;gBACtC,kBAAkB,EAAE,OAAO,CAAC,YAAY;aACzC,CACF,CAAC;QACJ,CAAC;QAED,MAAM,CAAC,UAAU,CAAC,qBAAW,CAAC,CAAC;QAE/B,OAAO,IAAA,oBAAU,EAAC,MAAM,CAA2C,CAAC;IACtE,CAAC;IAyED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA8BG;IACI,KAAK,CAAC,eAAe,CAC1B,SAAiB,EACjB,oBAA6D,EAAE,EAC/D,+BAA+D,EAAE;QAEjE,MAAM,QAAQ,GAAG,OAAO,iBAAiB,KAAK,QAAQ,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,SAAS,CAAC;QACvF,MAAM,OAAO,GACX,OAAO,iBAAiB,KAAK,QAAQ,CAAC,CAAC,CAAC,4BAA4B,CAAC,CAAC,CAAC,iBAAiB,CAAC;QAE3F,MAAM,cAAc,GAAG,sBAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAE1D,IAAI,MAAM,CAAC;QACX,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;YACvB,MAAM,GAAG,IAAA,uCAAa,EACpB,IAAI,CAAC,MAAM,EACX,OAAO,CAAC,UAAU,EAClB,IAAI,CAAC,MAAM,CAAC,uBAAuB,EACnC,OAAO,CACR,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAC1C;gBACE,eAAe,EAAE,cAAc,CAAC,UAAU;gBAC1C,kBAAkB,EAAE;oBAClB,kBAAkB,EAAE,cAAc,CAAC,SAAS;oBAC5C,KAAK,EAAE,QAAQ;oBACf,kBAAkB,EAAE,QAAQ,KAAK,SAAS;iBAC3C;aACF,EACD;gBACE,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,cAAc,EAAE,OAAO,CAAC,cAAc;gBACtC,UAAU,EAAE,OAAO,CAAC,UAAU;gBAC9B,cAAc,EAAE,OAAO,CAAC,cAAc;gBACtC,kBAAkB,EAAE,OAAO,CAAC,YAAY;aACzC,CACF,CAAC;QACJ,CAAC;QACD,MAAM,CAAC,UAAU,CAAC,qBAAW,CAAC,CAAC;QAE/B,OAAO,IAAA,oBAAU,EAAC,MAAM,CAA4C,CAAC;IACvE,CAAC;IA8EM,KAAK,CAAC,WAAW,CACtB,cAAsB,EACtB,oBAAyD,EAAE,EAC3D,+BAA2D,EAAE;QAE7D,MAAM,QAAQ,GAAG,OAAO,iBAAiB,KAAK,QAAQ,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,SAAS,CAAC;QACvF,MAAM,OAAO,GACX,OAAO,iBAAiB,KAAK,QAAQ,CAAC,CAAC,CAAC,4BAA4B,CAAC,CAAC,CAAC,iBAAiB,CAAC;QAE3F,IAAI,MAAM,CAAC;QACX,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;YACvB,MAAM,GAAG,IAAA,uCAAa,EAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;QAC3F,CAAC;aAAM,CAAC;YACN,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAC7B;gBACE,kBAAkB,EAAE,cAAc;gBAClC,KAAK,EAAE,QAAQ;gBACf,kBAAkB,EAAE,QAAQ,KAAK,SAAS;aAC3C,EACD;gBACE,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,cAAc,EAAE,OAAO,CAAC,cAAc;gBACtC,UAAU,EAAE,OAAO,CAAC,UAAU;gBAC9B,cAAc,EAAE,OAAO,CAAC,cAAc;gBACtC,kBAAkB,EAAE,OAAO,CAAC,YAAY;aACzC,CACF,CAAC;QACJ,CAAC;QAED,MAAM,CAAC,UAAU,CAAC,qBAAW,CAAC,CAAC;QAE/B,OAAO,IAAA,oBAAU,EAAC,MAAM,CAAwC,CAAC;IACnE,CAAC;IA+EM,KAAK,CAAC,YAAY,CACvB,SAAiB,EACjB,oBAA0D,EAAE,EAC5D,+BAA4D,EAAE;QAE9D,MAAM,QAAQ,GAAG,OAAO,iBAAiB,KAAK,QAAQ,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,SAAS,CAAC;QACvF,MAAM,OAAO,GACX,OAAO,iBAAiB,KAAK,QAAQ,CAAC,CAAC,CAAC,4BAA4B,CAAC,CAAC,CAAC,iBAAiB,CAAC;QAE3F,MAAM,cAAc,GAAG,sBAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAE1D,IAAI,MAAM,CAAC;QACX,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;YACvB,MAAM,GAAG,IAAA,uCAAa,EACpB,IAAI,CAAC,MAAM,EACX,OAAO,CAAC,UAAU,EAClB,IAAI,CAAC,MAAM,CAAC,oBAAoB,EAChC,OAAO,CACR,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACvC;gBACE,eAAe,EAAE,cAAc,CAAC,UAAU;gBAC1C,kBAAkB,EAAE;oBAClB,kBAAkB,EAAE,cAAc,CAAC,SAAS;oBAC5C,KAAK,EAAE,QAAQ;oBACf,kBAAkB,EAAE,QAAQ,KAAK,SAAS;iBAC3C;aACF,EACD;gBACE,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,cAAc,EAAE,OAAO,CAAC,cAAc;gBACtC,UAAU,EAAE,OAAO,CAAC,UAAU;gBAC9B,cAAc,EAAE,OAAO,CAAC,cAAc;gBACtC,kBAAkB,EAAE,OAAO,CAAC,YAAY;aACzC,CACF,CAAC;QACJ,CAAC;QACD,MAAM,CAAC,UAAU,CAAC,qBAAW,CAAC,CAAC;QAE/B,OAAO,IAAA,oBAAU,EAAC,MAAM,CAAyC,CAAC;IACpE,CAAC;IA0FM,KAAK,CAAC,wBAAwB,CACnC,OAAe,EACf,SAAiB,EACjB,oBAAsE,EAAE,EACxE,+BAAwE,EAAE;QAI1E,MAAM,QAAQ,GAAG,OAAO,iBAAiB,KAAK,QAAQ,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,SAAS,CAAC;QACvF,MAAM,OAAO,GACX,OAAO,iBAAiB,KAAK,QAAQ,CAAC,CAAC,CAAC,4BAA4B,CAAC,CAAC,CAAC,iBAAiB,CAAC;QAE3F,MAAM,cAAc,GAAG,sBAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAE1D,IAAI,MAAM,CAAC;QACX,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;YACvB,MAAM,GAAG,IAAA,uCAAa,EACpB,IAAI,CAAC,MAAM,EACX,OAAO,CAAC,UAAU,EAClB,IAAI,CAAC,MAAM,CAAC,4BAA4B,EACxC,OAAO,CACR,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,4BAA4B,CAC/C,OAAO,EACP;gBACE,MAAM,EAAE,cAAc,CAAC,UAAU;gBACjC,kBAAkB,EAAE;oBAClB,kBAAkB,EAAE,cAAc,CAAC,SAAS;oBAC5C,KAAK,EAAE,QAAQ;oBACf,kBAAkB,EAAE,QAAQ,KAAK,SAAS;iBAC3C;aACF,EACD;gBACE,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,cAAc,EAAE,OAAO,CAAC,cAAc;gBACtC,UAAU,EAAE,OAAO,CAAC,UAAU;gBAC9B,cAAc,EAAE,OAAO,CAAC,cAAc;gBACtC,kBAAkB,EAAE,OAAO,CAAC,YAAY;aACzC,CACF,CAAC;QACJ,CAAC;QACD,MAAM,CAAC,UAAU,CAAC,qBAAW,CAAC,CAAC;QAE/B,OAAO,IAAA,oBAAU,EAAC,MAAM,CAAqD,CAAC;IAChF,CAAC;CACF;AA3oBD,oDA2oBC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  KeyVaultBackupClientOptions,\n  KeyVaultBackupResult,\n  KeyVaultBeginBackupOptions,\n  KeyVaultBeginPreBackupOptions,\n  KeyVaultBeginPreRestoreOptions,\n  KeyVaultBeginRestoreOptions,\n  KeyVaultBeginSelectiveKeyRestoreOptions,\n  KeyVaultRestoreResult,\n  KeyVaultSelectiveKeyRestoreResult,\n} from \"./backupClientModels.js\";\nimport type { KeyVaultClient } from \"./generated/keyVaultClient.js\";\nimport type { TokenCredential } from \"@azure/core-auth\";\nimport { mappings } from \"./mappings.js\";\nimport { createKeyVaultClient } from \"./createKeyVaultClient.js\";\nimport type { PollerLike } from \"./lro/shim.js\";\nimport { wrapPoller, updateState } from \"./lro/shim.js\";\nimport {\n  KeyVaultAdminPollOperationState,\n  KeyVaultBackupOperationState,\n  KeyVaultRestoreOperationState,\n  KeyVaultSelectiveKeyRestoreOperationState,\n} from \"./lro/models.js\";\nimport { restorePoller } from \"./generated/restorePollerHelpers.js\";\n\nexport {\n  KeyVaultBackupOperationState,\n  KeyVaultRestoreOperationState,\n  KeyVaultSelectiveKeyRestoreOperationState,\n  KeyVaultAdminPollOperationState,\n};\n\n/**\n * The KeyVaultBackupClient provides methods to generate backups\n * and restore backups of any given Azure Key Vault instance.\n * This client supports generating full backups, selective restores of specific keys\n * and full restores of Key Vault instances.\n */\nexport class KeyVaultBackupClient {\n  /**\n   * The base URL to the vault\n   */\n  public readonly vaultUrl: string;\n\n  /**\n   * A reference to the auto-generated Key Vault HTTP client.\n   */\n  private readonly client: KeyVaultClient;\n\n  /**\n   * Creates an instance of the KeyVaultBackupClient.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleCreateBackupClient\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { KeyVaultBackupClient } from \"@azure/keyvault-admin\";\n   *\n   * const vaultUrl = `https://<MY KEY VAULT HERE>.vault.azure.net`;\n   * const credentials = new DefaultAzureCredential();\n   * const client = new KeyVaultBackupClient(vaultUrl, credentials);\n   * ```\n   * @param vaultUrl - the URL of the Key Vault. It should have this shape: `https://${your-key-vault-name}.vault.azure.net`. You should validate that this URL references a valid Key Vault or Managed HSM resource. See https://aka.ms/azsdk/blog/vault-uri for details.\n   * @param credential - An object that implements the `TokenCredential` interface used to authenticate requests to the service. Use the \\@azure/identity package to create a credential that suits your needs.\n   * @param options - options used to configure Key Vault API requests.\n   */\n  constructor(\n    vaultUrl: string,\n    credential: TokenCredential,\n    options: KeyVaultBackupClientOptions = {},\n  ) {\n    this.vaultUrl = vaultUrl;\n\n    this.client = createKeyVaultClient(vaultUrl, credential, options);\n  }\n\n  /**\n   * Starts a pre-backup operation which can be used to check whether the customer can perform a {@link beginBackup} operation using the provided SAS token.\n   *\n   * This function returns a Long Running Operation poller that allows you to wait indefinitely until the operation completes.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleBeginPreBackup_SAS\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { KeyVaultBackupClient } from \"@azure/keyvault-admin\";\n   *\n   * const vaultUrl = `https://<MY KEY VAULT HERE>.vault.azure.net`;\n   * const credentials = new DefaultAzureCredential();\n   * const client = new KeyVaultBackupClient(vaultUrl, credentials);\n   *\n   * const blobStorageUri = \"<blob-storage-uri>\"; // <Blob storage URL>/<folder name>\n   * const sasToken = \"<sas-token>\";\n   * const poller = await client.beginPreBackup(blobStorageUri, sasToken);\n   *\n   * // Serializing the poller\n   * const serialized = poller.toString();\n   *\n   * // A new poller can be created with:\n   * await client.beginPreBackup(blobStorageUri, sasToken, { resumeFrom: serialized });\n   *\n   * // Waiting until it's done\n   * const result = await poller.pollUntilDone();\n   * console.log(result);\n   * ```\n   * @param blobStorageUri - The URL of the blob storage resource, including the path to the container where the backup will end up being stored.\n   * @param sasToken - The SAS token used to access the blob storage resource.\n   * @param options - The optional parameters.\n   */\n  public async beginPreBackup(\n    blobStorageUri: string,\n    sasToken: string,\n    options?: KeyVaultBeginPreBackupOptions,\n  ): Promise<PollerLike<KeyVaultBackupOperationState, KeyVaultBackupResult>>;\n  /**\n   * Starts a pre-backup operation which can be used to check whether the customer can perform a {@link beginBackup} operation using the Managed HSM's configured user-assigned managed identity to authenticate with Azure Storage.\n   *\n   * This function returns a Long Running Operation poller that allows you to wait indefinitely until the operation completes.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleBeginPreBackup_NonSAS\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { KeyVaultBackupClient } from \"@azure/keyvault-admin\";\n   *\n   * const vaultUrl = `https://<MY KEY VAULT HERE>.vault.azure.net`;\n   * const credentials = new DefaultAzureCredential();\n   * const client = new KeyVaultBackupClient(vaultUrl, credentials);\n   *\n   * const blobStorageUri = \"<blob-storage-uri>\"; // <Blob storage URL>/<folder name>\n   * const poller = await client.beginPreBackup(blobStorageUri);\n   *\n   * // Serializing the poller\n   * const serialized = poller.toString();\n   *\n   * // A new poller can be created with:\n   * await client.beginPreBackup(blobStorageUri, { resumeFrom: serialized });\n   *\n   * // Waiting until it's done\n   * const result = await poller.pollUntilDone();\n   * console.log(result);\n   * ```\n   * @param blobStorageUri - The URL of the blob storage resource, including the path to the container where the backup will end up being stored.\n   * @param options - The optional parameters.\n   */\n  public async beginPreBackup(\n    blobStorageUri: string,\n    options?: KeyVaultBeginPreBackupOptions,\n  ): Promise<PollerLike<KeyVaultBackupOperationState, KeyVaultBackupResult>>;\n  public async beginPreBackup(\n    blobStorageUri: string,\n    sasTokenOrOptions: string | KeyVaultBeginPreBackupOptions = {},\n    optionsWhenSasTokenSpecified: KeyVaultBeginPreBackupOptions = {},\n  ): Promise<PollerLike<KeyVaultBackupOperationState, KeyVaultBackupResult>> {\n    const sasToken = typeof sasTokenOrOptions === \"string\" ? sasTokenOrOptions : undefined;\n    const options =\n      typeof sasTokenOrOptions === \"string\" ? optionsWhenSasTokenSpecified : sasTokenOrOptions;\n\n    let poller;\n    if (options.resumeFrom) {\n      poller = restorePoller(this.client, options.resumeFrom, this.client.preFullBackup, options);\n    } else {\n      poller = this.client.preFullBackup(\n        {\n          storageResourceUri: blobStorageUri,\n          token: sasToken,\n          useManagedIdentity: sasToken === undefined,\n        },\n        {\n          abortSignal: options.abortSignal,\n          requestOptions: options.requestOptions,\n          onResponse: options.onResponse,\n          tracingOptions: options.tracingOptions,\n          updateIntervalInMs: options.intervalInMs,\n        },\n      );\n    }\n\n    poller.onProgress(updateState);\n\n    return wrapPoller(poller) as ReturnType<typeof this.beginPreBackup>;\n  }\n\n  /**\n   * Starts a pre-restore operation which can be used to check whether the customer can perform a {@link beginRestore} operation using the provided SAS token.\n   *\n   * This function returns a Long Running Operation poller that allows you to wait indefinitely until the operation completes.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleBeginPreRestore_SAS\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { KeyVaultBackupClient } from \"@azure/keyvault-admin\";\n   *\n   * const vaultUrl = `https://<MY KEY VAULT HERE>.vault.azure.net`;\n   * const credentials = new DefaultAzureCredential();\n   * const client = new KeyVaultBackupClient(vaultUrl, credentials);\n   *\n   * const blobStorageUri = \"<blob-storage-uri>\"; // <Blob storage URL>/<folder name>\n   * const sasToken = \"<sas-token>\";\n   * const poller = await client.beginPreRestore(blobStorageUri, sasToken);\n   *\n   * // The poller can be serialized with:\n   * const serialized = poller.toString();\n   *\n   * // A new poller can be created with:\n   * await client.beginPreRestore(blobStorageUri, sasToken, { resumeFrom: serialized });\n   *\n   * // Waiting until it's done\n   * await poller.pollUntilDone();\n   * ```\n   * @param folderUri - The URL of the blob storage resource where the previous successful full backup was stored.\n   * @param sasToken - The SAS token. If no SAS token is provided, user-assigned Managed Identity will be used to access the blob storage resource.\n   * @param options - The optional parameters.\n   */\n  public async beginPreRestore(\n    folderUri: string,\n    sasToken: string,\n    options?: KeyVaultBeginPreRestoreOptions,\n  ): Promise<PollerLike<KeyVaultRestoreOperationState, KeyVaultRestoreResult>>;\n  /**\n   * Starts a pre-restore operation which can be used to check whether the customer can perform a {@link beginRestore} operation using the provided SAS token.\n   *\n   * This function returns a Long Running Operation poller that allows you to wait indefinitely until the operation completes.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleBeginPreRestore_SAS\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { KeyVaultBackupClient } from \"@azure/keyvault-admin\";\n   *\n   * const vaultUrl = `https://<MY KEY VAULT HERE>.vault.azure.net`;\n   * const credentials = new DefaultAzureCredential();\n   * const client = new KeyVaultBackupClient(vaultUrl, credentials);\n   *\n   * const blobStorageUri = \"<blob-storage-uri>\"; // <Blob storage URL>/<folder name>\n   * const sasToken = \"<sas-token>\";\n   * const poller = await client.beginPreRestore(blobStorageUri, sasToken);\n   *\n   * // The poller can be serialized with:\n   * const serialized = poller.toString();\n   *\n   * // A new poller can be created with:\n   * await client.beginPreRestore(blobStorageUri, sasToken, { resumeFrom: serialized });\n   *\n   * // Waiting until it's done\n   * await poller.pollUntilDone();\n   * ```\n   * @param folderUri - The URL of the blob storage resource where the previous successful full backup was stored.\n   * @param sasToken - The SAS token. If no SAS token is provided, user-assigned Managed Identity will be used to access the blob storage resource.\n   * @param options - The optional parameters.\n   */\n  public async beginPreRestore(\n    folderUri: string,\n    options?: KeyVaultBeginPreRestoreOptions,\n  ): Promise<PollerLike<KeyVaultRestoreOperationState, KeyVaultRestoreResult>>;\n  /**\n   * Starts a pre-restore operation which can be used to check whether the customer can perform a {@link beginRestore} operation using the Managed HSM's configured user-assigned managed identity to authenticate with Azure Storage.\n   *\n   * This function returns a Long Running Operation poller that allows you to wait indefinitely until the operation completes.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleBeginPreRestore_SAS\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { KeyVaultBackupClient } from \"@azure/keyvault-admin\";\n   *\n   * const vaultUrl = `https://<MY KEY VAULT HERE>.vault.azure.net`;\n   * const credentials = new DefaultAzureCredential();\n   * const client = new KeyVaultBackupClient(vaultUrl, credentials);\n   *\n   * const blobStorageUri = \"<blob-storage-uri>\"; // <Blob storage URL>/<folder name>\n   * const sasToken = \"<sas-token>\";\n   * const poller = await client.beginPreRestore(blobStorageUri, sasToken);\n   *\n   * // The poller can be serialized with:\n   * const serialized = poller.toString();\n   *\n   * // A new poller can be created with:\n   * await client.beginPreRestore(blobStorageUri, sasToken, { resumeFrom: serialized });\n   *\n   * // Waiting until it's done\n   * await poller.pollUntilDone();\n   * ```\n   * @param folderUri - The URL of the blob storage resource where the previous successful full backup was stored.\n   * @param sasToken - The SAS token. If no SAS token is provided, user-assigned Managed Identity will be used to access the blob storage resource.\n   * @param options - The optional parameters.\n   */\n  public async beginPreRestore(\n    folderUri: string,\n    sasTokenOrOptions: string | KeyVaultBeginPreRestoreOptions = {},\n    optionsWhenSasTokenSpecified: KeyVaultBeginPreRestoreOptions = {},\n  ): Promise<PollerLike<KeyVaultRestoreOperationState, KeyVaultRestoreResult>> {\n    const sasToken = typeof sasTokenOrOptions === \"string\" ? sasTokenOrOptions : undefined;\n    const options =\n      typeof sasTokenOrOptions === \"string\" ? optionsWhenSasTokenSpecified : sasTokenOrOptions;\n\n    const folderUriParts = mappings.folderUriParts(folderUri);\n\n    let poller;\n    if (options.resumeFrom) {\n      poller = restorePoller(\n        this.client,\n        options.resumeFrom,\n        this.client.preFullRestoreOperation,\n        options,\n      );\n    } else {\n      poller = this.client.preFullRestoreOperation(\n        {\n          folderToRestore: folderUriParts.folderName,\n          sasTokenParameters: {\n            storageResourceUri: folderUriParts.folderUri,\n            token: sasToken,\n            useManagedIdentity: sasToken === undefined,\n          },\n        },\n        {\n          abortSignal: options.abortSignal,\n          requestOptions: options.requestOptions,\n          onResponse: options.onResponse,\n          tracingOptions: options.tracingOptions,\n          updateIntervalInMs: options.intervalInMs,\n        },\n      );\n    }\n    poller.onProgress(updateState);\n\n    return wrapPoller(poller) as ReturnType<typeof this.beginPreRestore>;\n  }\n\n  /**\n   * Starts generating a backup of an Azure Key Vault on the specified Storage Blob account.\n   *\n   * This function returns a Long Running Operation poller that allows you to wait indefinitely until the Key Vault backup is generated.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleBeginBackup_SAS\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { KeyVaultBackupClient } from \"@azure/keyvault-admin\";\n   *\n   * const vaultUrl = `https://<MY KEY VAULT HERE>.vault.azure.net`;\n   * const credentials = new DefaultAzureCredential();\n   * const client = new KeyVaultBackupClient(vaultUrl, credentials);\n   *\n   * const blobStorageUri = \"<blob-storage-uri>\"; // <Blob storage URL>/<folder name>\n   * const sasToken = \"<sas-token>\";\n   * const poller = await client.beginBackup(blobStorageUri, sasToken);\n   *\n   * // Serializing the poller\n   * const serialized = poller.toString();\n   *\n   * // A new poller can be created with:\n   * await client.beginBackup(blobStorageUri, sasToken, { resumeFrom: serialized });\n   *\n   * // Waiting until it's done\n   * const backupUri = await poller.pollUntilDone();\n   * console.log(backupUri);\n   * ```\n   * Starts a full backup operation.\n   * @param blobStorageUri - The URL of the blob storage resource, including the path to the container where the backup will end up being stored.\n   * @param sasToken - The SAS token used to access the blob storage resource.\n   * @param options - The optional parameters.\n   */\n  public async beginBackup(\n    blobStorageUri: string,\n    sasToken: string,\n    options?: KeyVaultBeginBackupOptions,\n  ): Promise<PollerLike<KeyVaultBackupOperationState, KeyVaultBackupResult>>;\n\n  /**\n   * Starts generating a backup of an Azure Key Vault on the specified Storage Blob account, using a user-assigned Managed Identity\n   * to access the Storage account.\n   *\n   * This function returns a Long Running Operation poller that allows you to wait indefinitely until the Key Vault backup is generated.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleBeginBackup_NonSAS\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { KeyVaultBackupClient } from \"@azure/keyvault-admin\";\n   *\n   * const vaultUrl = `https://<MY KEY VAULT HERE>.vault.azure.net`;\n   * const credentials = new DefaultAzureCredential();\n   * const client = new KeyVaultBackupClient(vaultUrl, credentials);\n   *\n   * const blobStorageUri = \"<blob-storage-uri>\"; // <Blob storage URL>/<folder name>\n   * const poller = await client.beginBackup(blobStorageUri);\n   *\n   * // Serializing the poller\n   * const serialized = poller.toString();\n   *\n   * // A new poller can be created with:\n   * await client.beginBackup(blobStorageUri, { resumeFrom: serialized });\n   *\n   * // Waiting until it's done\n   * const backupUri = await poller.pollUntilDone();\n   * console.log(backupUri);\n   * ```\n   * Starts a full backup operation.\n   * @param blobStorageUri - The URL of the blob storage resource, including the path to the container where the backup will end up being stored.\n   * @param options - The optional parameters.\n   */\n  public async beginBackup(\n    blobStorageUri: string,\n    options?: KeyVaultBeginBackupOptions,\n  ): Promise<PollerLike<KeyVaultBackupOperationState, KeyVaultBackupResult>>;\n\n  public async beginBackup(\n    blobStorageUri: string,\n    sasTokenOrOptions: string | KeyVaultBeginBackupOptions = {},\n    optionsWhenSasTokenSpecified: KeyVaultBeginBackupOptions = {},\n  ): Promise<PollerLike<KeyVaultBackupOperationState, KeyVaultBackupResult>> {\n    const sasToken = typeof sasTokenOrOptions === \"string\" ? sasTokenOrOptions : undefined;\n    const options =\n      typeof sasTokenOrOptions === \"string\" ? optionsWhenSasTokenSpecified : sasTokenOrOptions;\n\n    let poller;\n    if (options.resumeFrom) {\n      poller = restorePoller(this.client, options.resumeFrom, this.client.fullBackup, options);\n    } else {\n      poller = this.client.fullBackup(\n        {\n          storageResourceUri: blobStorageUri,\n          token: sasToken,\n          useManagedIdentity: sasToken === undefined,\n        },\n        {\n          abortSignal: options.abortSignal,\n          requestOptions: options.requestOptions,\n          onResponse: options.onResponse,\n          tracingOptions: options.tracingOptions,\n          updateIntervalInMs: options.intervalInMs,\n        },\n      );\n    }\n\n    poller.onProgress(updateState);\n\n    return wrapPoller(poller) as ReturnType<typeof this.beginBackup>;\n  }\n\n  /**\n   * Starts restoring all key materials using the SAS token pointing to a previously stored Azure Blob storage\n   * backup folder.\n   *\n   * This function returns a Long Running Operation poller that allows you to wait indefinitely until the Key Vault restore operation is complete.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleBeginRestore_SAS\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { KeyVaultBackupClient } from \"@azure/keyvault-admin\";\n   *\n   * const vaultUrl = `https://<MY KEY VAULT HERE>.vault.azure.net`;\n   * const credentials = new DefaultAzureCredential();\n   * const client = new KeyVaultBackupClient(vaultUrl, credentials);\n   *\n   * const blobStorageUri = \"<blob-storage-uri>\"; // <Blob storage URL>/<folder name>\n   * const sasToken = \"<sas-token>\";\n   * const poller = await client.beginRestore(blobStorageUri, sasToken);\n   *\n   * // The poller can be serialized with:\n   * const serialized = poller.toString();\n   *\n   * // A new poller can be created with:\n   * await client.beginRestore(blobStorageUri, sasToken, { resumeFrom: serialized });\n   *\n   * // Waiting until it's done\n   * const backupUri = await poller.pollUntilDone();\n   * console.log(backupUri);\n   * ```\n   * Starts a full restore operation.\n   * @param folderUri - The URL of the blob storage resource where the previous successful full backup was stored.\n   * @param sasToken - The SAS token. If no SAS token is provided, user-assigned Managed Identity will be used to access the blob storage resource.\n   * @param options - The optional parameters.\n   */\n  public async beginRestore(\n    folderUri: string,\n    sasToken: string,\n    options?: KeyVaultBeginRestoreOptions,\n  ): Promise<PollerLike<KeyVaultRestoreOperationState, KeyVaultRestoreResult>>;\n\n  /**\n   * Starts restoring all key materials using the SAS token pointing to a previously stored Azure Blob storage\n   * backup folder, using a user-assigned Managed Identity to access the storage account.\n   *\n   * This function returns a Long Running Operation poller that allows you to wait indefinitely until the Key Vault restore operation is complete.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleBeginRestore_NonSAS\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { KeyVaultBackupClient } from \"@azure/keyvault-admin\";\n   *\n   * const vaultUrl = `https://<MY KEY VAULT HERE>.vault.azure.net`;\n   * const credentials = new DefaultAzureCredential();\n   * const client = new KeyVaultBackupClient(vaultUrl, credentials);\n   *\n   * const blobStorageUri = \"<blob-storage-uri>\"; // <Blob storage URL>/<folder name>\n   * const poller = await client.beginRestore(blobStorageUri);\n   *\n   * // The poller can be serialized with:\n   * const serialized = poller.toString();\n   *\n   * // A new poller can be created with:\n   * await client.beginRestore(blobStorageUri, { resumeFrom: serialized });\n   *\n   * // Waiting until it's done\n   * await poller.pollUntilDone();\n   * ```\n   * Starts a full restore operation.\n   * @param folderUri - The URL of the blob storage resource where the previous successful full backup was stored.\n   * @param sasToken - The SAS token. If no SAS token is provided, user-assigned Managed Identity will be used to access the blob storage resource.\n   * @param options - The optional parameters.\n   */\n  public async beginRestore(\n    folderUri: string,\n    options?: KeyVaultBeginRestoreOptions,\n  ): Promise<PollerLike<KeyVaultRestoreOperationState, KeyVaultRestoreResult>>;\n\n  public async beginRestore(\n    folderUri: string,\n    sasTokenOrOptions: string | KeyVaultBeginRestoreOptions = {},\n    optionsWhenSasTokenSpecified: KeyVaultBeginRestoreOptions = {},\n  ): Promise<PollerLike<KeyVaultRestoreOperationState, KeyVaultRestoreResult>> {\n    const sasToken = typeof sasTokenOrOptions === \"string\" ? sasTokenOrOptions : undefined;\n    const options =\n      typeof sasTokenOrOptions === \"string\" ? optionsWhenSasTokenSpecified : sasTokenOrOptions;\n\n    const folderUriParts = mappings.folderUriParts(folderUri);\n\n    let poller;\n    if (options.resumeFrom) {\n      poller = restorePoller(\n        this.client,\n        options.resumeFrom,\n        this.client.fullRestoreOperation,\n        options,\n      );\n    } else {\n      poller = this.client.fullRestoreOperation(\n        {\n          folderToRestore: folderUriParts.folderName,\n          sasTokenParameters: {\n            storageResourceUri: folderUriParts.folderUri,\n            token: sasToken,\n            useManagedIdentity: sasToken === undefined,\n          },\n        },\n        {\n          abortSignal: options.abortSignal,\n          requestOptions: options.requestOptions,\n          onResponse: options.onResponse,\n          tracingOptions: options.tracingOptions,\n          updateIntervalInMs: options.intervalInMs,\n        },\n      );\n    }\n    poller.onProgress(updateState);\n\n    return wrapPoller(poller) as ReturnType<typeof this.beginRestore>;\n  }\n\n  /**\n   * Starts restoring all key versions of a given key using user supplied SAS token pointing to a previously\n   * stored Azure Blob storage backup folder.\n   *\n   * This function returns a Long Running Operation poller that allows you to wait indefinitely until the Key Vault selective restore is complete.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleBeginSelectiveKeyRestore_SAS\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { KeyVaultBackupClient } from \"@azure/keyvault-admin\";\n   *\n   * const vaultUrl = `https://<MY KEY VAULT HERE>.vault.azure.net`;\n   * const credentials = new DefaultAzureCredential();\n   * const client = new KeyVaultBackupClient(vaultUrl, credentials);\n   *\n   * const blobStorageUri = \"<blob-storage-uri>\";\n   * const sasToken = \"<sas-token>\";\n   * const keyName = \"<key-name>\";\n   * const poller = await client.beginSelectiveKeyRestore(keyName, blobStorageUri, sasToken);\n   *\n   * // Serializing the poller\n   * const serialized = poller.toString();\n   *\n   * // A new poller can be created with:\n   * await client.beginSelectiveKeyRestore(keyName, blobStorageUri, sasToken, {\n   *   resumeFrom: serialized,\n   * });\n   *\n   * // Waiting until it's done\n   * await poller.pollUntilDone();\n   * ```\n   * Creates a new role assignment.\n   * @param keyName - The name of the key that wants to be restored.\n   * @param folderUri - The URL of the blob storage resource, with the folder name of the blob where the previous successful full backup was stored.\n   * @param sasToken - The SAS token. If no SAS token is provided, user-assigned Managed Identity will be used to access the blob storage resource.\n   * @param options - The optional parameters.\n   */\n  public async beginSelectiveKeyRestore(\n    keyName: string,\n    folderUri: string,\n    sasToken: string,\n    options?: KeyVaultBeginSelectiveKeyRestoreOptions,\n  ): Promise<\n    PollerLike<KeyVaultSelectiveKeyRestoreOperationState, KeyVaultSelectiveKeyRestoreResult>\n  >;\n\n  /**\n   * Starts restoring all key versions of a given key using to a previously\n   * stored Azure Blob storage backup folder. The Blob storage backup folder will be accessed using user-assigned Managed Identity.\n   *\n   * This function returns a Long Running Operation poller that allows you to wait indefinitely until the Key Vault selective restore is complete.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleBeginSelectiveKeyRestore_NonSAS\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { KeyVaultBackupClient } from \"@azure/keyvault-admin\";\n   *\n   * const vaultUrl = `https://<MY KEY VAULT HERE>.vault.azure.net`;\n   * const credentials = new DefaultAzureCredential();\n   * const client = new KeyVaultBackupClient(vaultUrl, credentials);\n   *\n   * const blobStorageUri = \"<blob-storage-uri>\";\n   * const keyName = \"<key-name>\";\n   * const poller = await client.beginSelectiveKeyRestore(keyName, blobStorageUri);\n   *\n   * // Serializing the poller\n   * const serialized = poller.toString();\n   *\n   * // A new poller can be created with:\n   * await client.beginSelectiveKeyRestore(keyName, blobStorageUri, { resumeFrom: serialized });\n   *\n   * // Waiting until it's done\n   * await poller.pollUntilDone();\n   * ```\n   * Creates a new role assignment.\n   * @param keyName - The name of the key that wants to be restored.\n   * @param folderUri - The URL of the blob storage resource, with the folder name of the blob where the previous successful full backup was stored.\n   * @param sasToken - The SAS token. If no SAS token is provided, user-assigned Managed Identity will be used to access the blob storage resource.\n   * @param options - The optional parameters.\n   */\n  public async beginSelectiveKeyRestore(\n    keyName: string,\n    folderUri: string,\n    options?: KeyVaultBeginSelectiveKeyRestoreOptions,\n  ): Promise<\n    PollerLike<KeyVaultSelectiveKeyRestoreOperationState, KeyVaultSelectiveKeyRestoreResult>\n  >;\n\n  public async beginSelectiveKeyRestore(\n    keyName: string,\n    folderUri: string,\n    sasTokenOrOptions: string | KeyVaultBeginSelectiveKeyRestoreOptions = {},\n    optionsWhenSasTokenSpecified: KeyVaultBeginSelectiveKeyRestoreOptions = {},\n  ): Promise<\n    PollerLike<KeyVaultSelectiveKeyRestoreOperationState, KeyVaultSelectiveKeyRestoreResult>\n  > {\n    const sasToken = typeof sasTokenOrOptions === \"string\" ? sasTokenOrOptions : undefined;\n    const options =\n      typeof sasTokenOrOptions === \"string\" ? optionsWhenSasTokenSpecified : sasTokenOrOptions;\n\n    const folderUriParts = mappings.folderUriParts(folderUri);\n\n    let poller;\n    if (options.resumeFrom) {\n      poller = restorePoller(\n        this.client,\n        options.resumeFrom,\n        this.client.selectiveKeyRestoreOperation,\n        options,\n      );\n    } else {\n      poller = this.client.selectiveKeyRestoreOperation(\n        keyName,\n        {\n          folder: folderUriParts.folderName,\n          sasTokenParameters: {\n            storageResourceUri: folderUriParts.folderUri,\n            token: sasToken,\n            useManagedIdentity: sasToken === undefined,\n          },\n        },\n        {\n          abortSignal: options.abortSignal,\n          requestOptions: options.requestOptions,\n          onResponse: options.onResponse,\n          tracingOptions: options.tracingOptions,\n          updateIntervalInMs: options.intervalInMs,\n        },\n      );\n    }\n    poller.onProgress(updateState);\n\n    return wrapPoller(poller) as ReturnType<typeof this.beginSelectiveKeyRestore>;\n  }\n}\n"]}