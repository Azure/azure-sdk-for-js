{"version":3,"file":"settingsClient.js","sourceRoot":"","sources":["../../src/settingsClient.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAmClC,4CAEC;AAvBD,uEAAiE;AAEjE,SAAS,WAAW,CAAC,gBAAkC;IACrD,IAAI,gBAAgB,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;QACxC,OAAO;YACL,IAAI,EAAE,SAAS;YACf,IAAI,EAAE,gBAAgB,CAAC,IAAI;YAC3B,KAAK,EAAE,gBAAgB,CAAC,KAAK,KAAK,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK;SACxD,CAAC;IACJ,CAAC;SAAM,CAAC;QACN,OAAO;YACL,IAAI,EAAE,gBAAgB,CAAC,IAAI;YAC3B,IAAI,EAAE,gBAAgB,CAAC,IAAI;YAC3B,KAAK,EAAE,gBAAgB,CAAC,KAAK;SAC9B,CAAC;IACJ,CAAC;AACH,CAAC;AAED;;GAEG;AACH,SAAgB,gBAAgB,CAAC,OAAwB;IACvD,OAAO,OAAO,CAAC,IAAI,KAAK,SAAS,IAAI,OAAO,OAAO,CAAC,KAAK,KAAK,SAAS,CAAC;AAC1E,CAAC;AAED;;;GAGG;AACH,MAAa,sBAAsB;IAWjC;;;;;;;;;;;;;;;OAeG;IACH,8DAA8D;IAC9D,YAAY,QAAgB,EAAE,UAA2B,EAAE,UAAiC,EAAE;QAC5F,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAEzB,IAAI,CAAC,MAAM,GAAG,IAAA,8CAAoB,EAAC,QAAQ,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;IACpE,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,aAAa,CACjB,OAAwB,EACxB,UAAgC,EAAE;QAElC,OAAO,WAAW,CAChB,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,EAAE,OAAO,CAAC,CACzF,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,UAAU,CAAC,WAAmB,EAAE,UAA6B,EAAE;QACnE,OAAO,WAAW,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC,CAAC;IACzE,CAAC;IAED;;;;OAIG;IACH,8DAA8D;IAC9D,KAAK,CAAC,WAAW,CAAC,UAA+B,EAAE;;QACjD,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAC5D,OAAO,EAAE,QAAQ,EAAE,MAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,GAAG,CAAC,WAAW,CAAC,mCAAI,EAAE,EAAE,CAAC;IACxD,CAAC;CACF;AArED,wDAqEC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { TokenCredential } from \"@azure/core-auth\";\nimport type { Setting as GeneratedSetting } from \"./generated/index.js\";\nimport type { KeyVaultClient } from \"./generated/index.js\";\nimport type {\n  UpdateSettingOptions,\n  GetSettingOptions,\n  ListSettingsOptions,\n  ListSettingsResponse,\n  KeyVaultSetting,\n  SettingsClientOptions,\n  BooleanKeyVaultSetting,\n} from \"./settingsClientModels.js\";\nimport { createKeyVaultClient } from \"./createKeyVaultClient.js\";\n\nfunction makeSetting(generatedSetting: GeneratedSetting): KeyVaultSetting {\n  if (generatedSetting.type === \"boolean\") {\n    return {\n      kind: \"boolean\",\n      name: generatedSetting.name,\n      value: generatedSetting.value === \"true\" ? true : false,\n    };\n  } else {\n    return {\n      kind: generatedSetting.type,\n      name: generatedSetting.name,\n      value: generatedSetting.value,\n    };\n  }\n}\n\n/**\n * Determines whether a given {@link KeyVaultSetting} is a {@link BooleanKeyVaultSetting}, i.e. has a boolean value.\n */\nexport function isBooleanSetting(setting: KeyVaultSetting): setting is BooleanKeyVaultSetting {\n  return setting.kind === \"boolean\" && typeof setting.value === \"boolean\";\n}\n\n/**\n * The KeyVaultSettingsClient provides asynchronous methods to create, update, get and list\n * settings for the Azure Key Vault.\n */\nexport class KeyVaultSettingsClient {\n  /**\n   * The base URL to the vault.\n   */\n  public readonly vaultUrl: string;\n\n  /**\n   * A reference to the auto-generated Key Vault HTTP client.\n   */\n  private readonly client: KeyVaultClient;\n\n  /**\n   * Creates an instance of the KeyVaultSettingsClient.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleCreateSettingsClient\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { KeyVaultSettingsClient } from \"@azure/keyvault-admin\";\n   *\n   * const vaultUrl = `https://<MY KEY VAULT HERE>.vault.azure.net`;\n   * const credentials = new DefaultAzureCredential();\n   * const client = new KeyVaultSettingsClient(vaultUrl, credentials);\n   * ```\n   * @param vaultUrl - the URL of the Key Vault. It should have this shape: `https://${your-key-vault-name}.vault.azure.net`. You should validate that this URL references a valid Key Vault or Managed HSM resource. See https://aka.ms/azsdk/blog/vault-uri for details.\n   * @param credential - An object that implements the `TokenCredential` interface used to authenticate requests to the service. Use the \\@azure/identity package to create a credential that suits your needs.\n   * @param options - options used to configure Key Vault API requests.\n   */\n  // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n  constructor(vaultUrl: string, credential: TokenCredential, options: SettingsClientOptions = {}) {\n    this.vaultUrl = vaultUrl;\n\n    this.client = createKeyVaultClient(vaultUrl, credential, options);\n  }\n\n  /**\n   * Updates the named account setting.\n   *\n   * @param setting - the setting to update. The name of the setting must be a valid settings option.\n   * @param options - the optional parameters.\n   */\n  async updateSetting(\n    setting: KeyVaultSetting,\n    options: UpdateSettingOptions = {},\n  ): Promise<KeyVaultSetting> {\n    return makeSetting(\n      await this.client.updateSetting(setting.name, { value: String(setting.value) }, options),\n    );\n  }\n\n  /**\n   * Get the value of a specific account setting.\n   *\n   * @param settingName - the name of the setting.\n   * @param options - the optional parameters.\n   */\n  async getSetting(settingName: string, options: GetSettingOptions = {}): Promise<KeyVaultSetting> {\n    return makeSetting(await this.client.getSetting(settingName, options));\n  }\n\n  /**\n   * List the account's settings.\n   *\n   * @param options - the optional parameters.\n   */\n  // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n  async getSettings(options: ListSettingsOptions = {}): Promise<ListSettingsResponse> {\n    const { settings } = await this.client.getSettings(options);\n    return { settings: settings?.map(makeSetting) ?? [] };\n  }\n}\n"]}