{"version":3,"file":"keyVaultClient.js","sourceRoot":"","sources":["../../../src/generated/keyVaultClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport {\n  _getRoleAssignmentsOperations,\n  RoleAssignmentsOperations,\n} from \"./classic/roleAssignments/index.js\";\nimport {\n  _getRoleDefinitionsOperations,\n  RoleDefinitionsOperations,\n} from \"./classic/roleDefinitions/index.js\";\nimport {\n  createKeyVault,\n  KeyVaultContext,\n  KeyVaultClientOptionalParams,\n  getSettings,\n  getSetting,\n  updateSetting,\n  selectiveKeyRestoreOperation,\n  selectiveKeyRestoreStatus,\n  fullRestoreOperation,\n  preFullRestoreOperation,\n  restoreStatus,\n  preFullBackup,\n  fullBackup,\n  fullBackupStatus,\n  GetSettingsOptionalParams,\n  GetSettingOptionalParams,\n  UpdateSettingOptionalParams,\n  SelectiveKeyRestoreOperationOptionalParams,\n  SelectiveKeyRestoreStatusOptionalParams,\n  FullRestoreOperationOptionalParams,\n  PreFullRestoreOperationOptionalParams,\n  RestoreStatusOptionalParams,\n  PreFullBackupOptionalParams,\n  FullBackupOptionalParams,\n  FullBackupStatusOptionalParams,\n} from \"./api/index.js\";\nimport {\n  FullBackupOperation,\n  SASTokenParameter,\n  PreBackupOperationParameters,\n  RestoreOperation,\n  PreRestoreOperationParameters,\n  RestoreOperationParameters,\n  SelectiveKeyRestoreOperation,\n  SelectiveKeyRestoreOperationParameters,\n  UpdateSettingRequest,\n  Setting,\n  SettingsListResult,\n} from \"./models/models.js\";\nimport { Pipeline } from \"@azure/core-rest-pipeline\";\nimport { TokenCredential } from \"@azure/core-auth\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\n\nexport { KeyVaultClientOptionalParams } from \"./api/keyVaultContext.js\";\n\nexport class KeyVaultClient {\n  private _client: KeyVaultContext;\n  /** The pipeline used by this client to make requests */\n  public readonly pipeline: Pipeline;\n\n  /** The key vault client performs cryptographic key operations and vault operations against the Key Vault service. */\n  constructor(\n    endpointParam: string,\n    credential: TokenCredential,\n    options: KeyVaultClientOptionalParams = {},\n  ) {\n    const prefixFromOptions = options?.userAgentOptions?.userAgentPrefix;\n    const userAgentPrefix = prefixFromOptions\n      ? `${prefixFromOptions} azsdk-js-client`\n      : `azsdk-js-client`;\n    this._client = createKeyVault(endpointParam, credential, {\n      ...options,\n      userAgentOptions: { userAgentPrefix },\n    });\n    this.pipeline = this._client.pipeline;\n    this.roleAssignments = _getRoleAssignmentsOperations(this._client);\n    this.roleDefinitions = _getRoleDefinitionsOperations(this._client);\n  }\n\n  /** The operation groups for roleAssignments */\n  public readonly roleAssignments: RoleAssignmentsOperations;\n  /** The operation groups for roleDefinitions */\n  public readonly roleDefinitions: RoleDefinitionsOperations;\n\n  /** Retrieves a list of all the available account settings that can be configured. */\n  getSettings(\n    options: GetSettingsOptionalParams = { requestOptions: {} },\n  ): Promise<SettingsListResult> {\n    return getSettings(this._client, options);\n  }\n\n  /** Retrieves the setting object of a specified setting name. */\n  getSetting(\n    settingName: string,\n    options: GetSettingOptionalParams = { requestOptions: {} },\n  ): Promise<Setting> {\n    return getSetting(this._client, settingName, options);\n  }\n\n  /** Description of the pool setting to be updated */\n  updateSetting(\n    settingName: string,\n    parameters: UpdateSettingRequest,\n    options: UpdateSettingOptionalParams = { requestOptions: {} },\n  ): Promise<Setting> {\n    return updateSetting(this._client, settingName, parameters, options);\n  }\n\n  /** Restores all key versions of a given key using user supplied SAS token pointing to a previously stored Azure Blob storage backup folder */\n  selectiveKeyRestoreOperation(\n    keyName: string,\n    restoreBlobDetails: SelectiveKeyRestoreOperationParameters,\n    options: SelectiveKeyRestoreOperationOptionalParams = {\n      requestOptions: {},\n    },\n  ): PollerLike<\n    OperationState<SelectiveKeyRestoreOperation>,\n    SelectiveKeyRestoreOperation\n  > {\n    return selectiveKeyRestoreOperation(\n      this._client,\n      keyName,\n      restoreBlobDetails,\n      options,\n    );\n  }\n\n  /** Returns the status of the selective key restore operation */\n  selectiveKeyRestoreStatus(\n    jobId: string,\n    options: SelectiveKeyRestoreStatusOptionalParams = { requestOptions: {} },\n  ): Promise<SelectiveKeyRestoreOperation> {\n    return selectiveKeyRestoreStatus(this._client, jobId, options);\n  }\n\n  /** Restores all key materials using the SAS token pointing to a previously stored Azure Blob storage backup folder */\n  fullRestoreOperation(\n    restoreBlobDetails: RestoreOperationParameters,\n    options: FullRestoreOperationOptionalParams = { requestOptions: {} },\n  ): PollerLike<OperationState<RestoreOperation>, RestoreOperation> {\n    return fullRestoreOperation(this._client, restoreBlobDetails, options);\n  }\n\n  /** Pre-restore operation for checking whether the customer can perform a full restore operation. */\n  preFullRestoreOperation(\n    preRestoreOperationParameters: PreRestoreOperationParameters,\n    options: PreFullRestoreOperationOptionalParams = { requestOptions: {} },\n  ): PollerLike<OperationState<RestoreOperation>, RestoreOperation> {\n    return preFullRestoreOperation(\n      this._client,\n      preRestoreOperationParameters,\n      options,\n    );\n  }\n\n  /** Returns the status of restore operation */\n  restoreStatus(\n    jobId: string,\n    options: RestoreStatusOptionalParams = { requestOptions: {} },\n  ): Promise<RestoreOperation> {\n    return restoreStatus(this._client, jobId, options);\n  }\n\n  /** Pre-backup operation for checking whether the customer can perform a full backup operation. */\n  preFullBackup(\n    preBackupOperationParameters: PreBackupOperationParameters,\n    options: PreFullBackupOptionalParams = { requestOptions: {} },\n  ): PollerLike<OperationState<FullBackupOperation>, FullBackupOperation> {\n    return preFullBackup(this._client, preBackupOperationParameters, options);\n  }\n\n  /** Creates a full backup using a user-provided SAS token to an Azure blob storage container. */\n  fullBackup(\n    azureStorageBlobContainerUri: SASTokenParameter,\n    options: FullBackupOptionalParams = { requestOptions: {} },\n  ): PollerLike<OperationState<FullBackupOperation>, FullBackupOperation> {\n    return fullBackup(this._client, azureStorageBlobContainerUri, options);\n  }\n\n  /** Returns the status of full backup operation */\n  fullBackupStatus(\n    jobId: string,\n    options: FullBackupStatusOptionalParams = { requestOptions: {} },\n  ): Promise<FullBackupOperation> {\n    return fullBackupStatus(this._client, jobId, options);\n  }\n}\n"]}