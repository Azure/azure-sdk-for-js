{"version":3,"file":"operations.js","sourceRoot":"","sources":["../../../../src/generated/api/operations.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport {\n  KeyVaultContext as Client,\n  FullBackupOptionalParams,\n  FullBackupStatusOptionalParams,\n  FullRestoreOperationOptionalParams,\n  GetSettingOptionalParams,\n  GetSettingsOptionalParams,\n  PreFullBackupOptionalParams,\n  PreFullRestoreOperationOptionalParams,\n  RestoreStatusOptionalParams,\n  SelectiveKeyRestoreOperationOptionalParams,\n  SelectiveKeyRestoreStatusOptionalParams,\n  UpdateSettingOptionalParams,\n} from \"./index.js\";\nimport {\n  FullBackupOperation,\n  fullBackupOperationDeserializer,\n  keyVaultErrorDeserializer,\n  SASTokenParameter,\n  sASTokenParameterSerializer,\n  PreBackupOperationParameters,\n  preBackupOperationParametersSerializer,\n  RestoreOperation,\n  restoreOperationDeserializer,\n  PreRestoreOperationParameters,\n  preRestoreOperationParametersSerializer,\n  RestoreOperationParameters,\n  restoreOperationParametersSerializer,\n  SelectiveKeyRestoreOperation,\n  selectiveKeyRestoreOperationDeserializer,\n  SelectiveKeyRestoreOperationParameters,\n  selectiveKeyRestoreOperationParametersSerializer,\n  UpdateSettingRequest,\n  updateSettingRequestSerializer,\n  Setting,\n  settingDeserializer,\n  SettingsListResult,\n  settingsListResultDeserializer,\n} from \"../models/models.js\";\nimport { getLongRunningPoller } from \"../static-helpers/pollingHelpers.js\";\nimport {\n  StreamableMethod,\n  PathUncheckedResponse,\n  createRestError,\n  operationOptionsToRequestParameters,\n} from \"@azure-rest/core-client\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\n\nexport function _getSettingsSend(\n  context: Client,\n  options: GetSettingsOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/settings\")\n    .get({\n      ...operationOptionsToRequestParameters(options),\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n    });\n}\n\nexport async function _getSettingsDeserialize(\n  result: PathUncheckedResponse,\n): Promise<SettingsListResult> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return settingsListResultDeserializer(result.body);\n}\n\n/** Retrieves a list of all the available account settings that can be configured. */\nexport async function getSettings(\n  context: Client,\n  options: GetSettingsOptionalParams = { requestOptions: {} },\n): Promise<SettingsListResult> {\n  const result = await _getSettingsSend(context, options);\n  return _getSettingsDeserialize(result);\n}\n\nexport function _getSettingSend(\n  context: Client,\n  settingName: string,\n  options: GetSettingOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/settings/{setting-name}\", settingName)\n    .get({\n      ...operationOptionsToRequestParameters(options),\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n    });\n}\n\nexport async function _getSettingDeserialize(\n  result: PathUncheckedResponse,\n): Promise<Setting> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return settingDeserializer(result.body);\n}\n\n/** Retrieves the setting object of a specified setting name. */\nexport async function getSetting(\n  context: Client,\n  settingName: string,\n  options: GetSettingOptionalParams = { requestOptions: {} },\n): Promise<Setting> {\n  const result = await _getSettingSend(context, settingName, options);\n  return _getSettingDeserialize(result);\n}\n\nexport function _updateSettingSend(\n  context: Client,\n  settingName: string,\n  parameters: UpdateSettingRequest,\n  options: UpdateSettingOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/settings/{setting-name}\", settingName)\n    .patch({\n      ...operationOptionsToRequestParameters(options),\n      contentType: \"application/json\",\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n      body: updateSettingRequestSerializer(parameters),\n    });\n}\n\nexport async function _updateSettingDeserialize(\n  result: PathUncheckedResponse,\n): Promise<Setting> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return settingDeserializer(result.body);\n}\n\n/** Description of the pool setting to be updated */\nexport async function updateSetting(\n  context: Client,\n  settingName: string,\n  parameters: UpdateSettingRequest,\n  options: UpdateSettingOptionalParams = { requestOptions: {} },\n): Promise<Setting> {\n  const result = await _updateSettingSend(\n    context,\n    settingName,\n    parameters,\n    options,\n  );\n  return _updateSettingDeserialize(result);\n}\n\nexport function _selectiveKeyRestoreOperationSend(\n  context: Client,\n  keyName: string,\n  restoreBlobDetails: SelectiveKeyRestoreOperationParameters,\n  options: SelectiveKeyRestoreOperationOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/keys/{keyName}/restore\", keyName)\n    .put({\n      ...operationOptionsToRequestParameters(options),\n      contentType: \"application/json\",\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n      body: selectiveKeyRestoreOperationParametersSerializer(\n        restoreBlobDetails,\n      ),\n    });\n}\n\nexport async function _selectiveKeyRestoreOperationDeserialize(\n  result: PathUncheckedResponse,\n): Promise<SelectiveKeyRestoreOperation> {\n  const expectedStatuses = [\"202\", \"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return selectiveKeyRestoreOperationDeserializer(result.body);\n}\n\n/** Restores all key versions of a given key using user supplied SAS token pointing to a previously stored Azure Blob storage backup folder */\nexport function selectiveKeyRestoreOperation(\n  context: Client,\n  keyName: string,\n  restoreBlobDetails: SelectiveKeyRestoreOperationParameters,\n  options: SelectiveKeyRestoreOperationOptionalParams = { requestOptions: {} },\n): PollerLike<\n  OperationState<SelectiveKeyRestoreOperation>,\n  SelectiveKeyRestoreOperation\n> {\n  return getLongRunningPoller(\n    context,\n    _selectiveKeyRestoreOperationDeserialize,\n    [\"202\", \"200\"],\n    {\n      updateIntervalInMs: options?.updateIntervalInMs,\n      abortSignal: options?.abortSignal,\n      getInitialResponse: () =>\n        _selectiveKeyRestoreOperationSend(\n          context,\n          keyName,\n          restoreBlobDetails,\n          options,\n        ),\n      resourceLocationConfig: \"azure-async-operation\",\n    },\n  ) as PollerLike<\n    OperationState<SelectiveKeyRestoreOperation>,\n    SelectiveKeyRestoreOperation\n  >;\n}\n\nexport function _selectiveKeyRestoreStatusSend(\n  context: Client,\n  jobId: string,\n  options: SelectiveKeyRestoreStatusOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/restore/{jobId}/pending\", jobId)\n    .get({\n      ...operationOptionsToRequestParameters(options),\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n    });\n}\n\nexport async function _selectiveKeyRestoreStatusDeserialize(\n  result: PathUncheckedResponse,\n): Promise<SelectiveKeyRestoreOperation> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return selectiveKeyRestoreOperationDeserializer(result.body);\n}\n\n/** Returns the status of the selective key restore operation */\nexport async function selectiveKeyRestoreStatus(\n  context: Client,\n  jobId: string,\n  options: SelectiveKeyRestoreStatusOptionalParams = { requestOptions: {} },\n): Promise<SelectiveKeyRestoreOperation> {\n  const result = await _selectiveKeyRestoreStatusSend(context, jobId, options);\n  return _selectiveKeyRestoreStatusDeserialize(result);\n}\n\nexport function _fullRestoreOperationSend(\n  context: Client,\n  restoreBlobDetails: RestoreOperationParameters,\n  options: FullRestoreOperationOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/restore\")\n    .put({\n      ...operationOptionsToRequestParameters(options),\n      contentType: \"application/json\",\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n      body: restoreOperationParametersSerializer(restoreBlobDetails),\n    });\n}\n\nexport async function _fullRestoreOperationDeserialize(\n  result: PathUncheckedResponse,\n): Promise<RestoreOperation> {\n  const expectedStatuses = [\"202\", \"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return restoreOperationDeserializer(result.body);\n}\n\n/** Restores all key materials using the SAS token pointing to a previously stored Azure Blob storage backup folder */\nexport function fullRestoreOperation(\n  context: Client,\n  restoreBlobDetails: RestoreOperationParameters,\n  options: FullRestoreOperationOptionalParams = { requestOptions: {} },\n): PollerLike<OperationState<RestoreOperation>, RestoreOperation> {\n  return getLongRunningPoller(\n    context,\n    _fullRestoreOperationDeserialize,\n    [\"202\", \"200\"],\n    {\n      updateIntervalInMs: options?.updateIntervalInMs,\n      abortSignal: options?.abortSignal,\n      getInitialResponse: () =>\n        _fullRestoreOperationSend(context, restoreBlobDetails, options),\n      resourceLocationConfig: \"azure-async-operation\",\n    },\n  ) as PollerLike<OperationState<RestoreOperation>, RestoreOperation>;\n}\n\nexport function _preFullRestoreOperationSend(\n  context: Client,\n  preRestoreOperationParameters: PreRestoreOperationParameters,\n  options: PreFullRestoreOperationOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/prerestore\")\n    .put({\n      ...operationOptionsToRequestParameters(options),\n      contentType: \"application/json\",\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n      body: preRestoreOperationParametersSerializer(\n        preRestoreOperationParameters,\n      ),\n    });\n}\n\nexport async function _preFullRestoreOperationDeserialize(\n  result: PathUncheckedResponse,\n): Promise<RestoreOperation> {\n  const expectedStatuses = [\"202\", \"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return restoreOperationDeserializer(result.body);\n}\n\n/** Pre-restore operation for checking whether the customer can perform a full restore operation. */\nexport function preFullRestoreOperation(\n  context: Client,\n  preRestoreOperationParameters: PreRestoreOperationParameters,\n  options: PreFullRestoreOperationOptionalParams = { requestOptions: {} },\n): PollerLike<OperationState<RestoreOperation>, RestoreOperation> {\n  return getLongRunningPoller(\n    context,\n    _preFullRestoreOperationDeserialize,\n    [\"202\", \"200\"],\n    {\n      updateIntervalInMs: options?.updateIntervalInMs,\n      abortSignal: options?.abortSignal,\n      getInitialResponse: () =>\n        _preFullRestoreOperationSend(\n          context,\n          preRestoreOperationParameters,\n          options,\n        ),\n      resourceLocationConfig: \"azure-async-operation\",\n    },\n  ) as PollerLike<OperationState<RestoreOperation>, RestoreOperation>;\n}\n\nexport function _restoreStatusSend(\n  context: Client,\n  jobId: string,\n  options: RestoreStatusOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/restore/{jobId}/pending\", jobId)\n    .get({\n      ...operationOptionsToRequestParameters(options),\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n    });\n}\n\nexport async function _restoreStatusDeserialize(\n  result: PathUncheckedResponse,\n): Promise<RestoreOperation> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return restoreOperationDeserializer(result.body);\n}\n\n/** Returns the status of restore operation */\nexport async function restoreStatus(\n  context: Client,\n  jobId: string,\n  options: RestoreStatusOptionalParams = { requestOptions: {} },\n): Promise<RestoreOperation> {\n  const result = await _restoreStatusSend(context, jobId, options);\n  return _restoreStatusDeserialize(result);\n}\n\nexport function _preFullBackupSend(\n  context: Client,\n  preBackupOperationParameters: PreBackupOperationParameters,\n  options: PreFullBackupOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/prebackup\")\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      contentType: \"application/json\",\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n      body: preBackupOperationParametersSerializer(\n        preBackupOperationParameters,\n      ),\n    });\n}\n\nexport async function _preFullBackupDeserialize(\n  result: PathUncheckedResponse,\n): Promise<FullBackupOperation> {\n  const expectedStatuses = [\"202\", \"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return fullBackupOperationDeserializer(result.body);\n}\n\n/** Pre-backup operation for checking whether the customer can perform a full backup operation. */\nexport function preFullBackup(\n  context: Client,\n  preBackupOperationParameters: PreBackupOperationParameters,\n  options: PreFullBackupOptionalParams = { requestOptions: {} },\n): PollerLike<OperationState<FullBackupOperation>, FullBackupOperation> {\n  return getLongRunningPoller(\n    context,\n    _preFullBackupDeserialize,\n    [\"202\", \"200\"],\n    {\n      updateIntervalInMs: options?.updateIntervalInMs,\n      abortSignal: options?.abortSignal,\n      getInitialResponse: () =>\n        _preFullBackupSend(context, preBackupOperationParameters, options),\n      resourceLocationConfig: \"azure-async-operation\",\n    },\n  ) as PollerLike<OperationState<FullBackupOperation>, FullBackupOperation>;\n}\n\nexport function _fullBackupSend(\n  context: Client,\n  azureStorageBlobContainerUri: SASTokenParameter,\n  options: FullBackupOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/backup\")\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      contentType: \"application/json\",\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n      body: sASTokenParameterSerializer(azureStorageBlobContainerUri),\n    });\n}\n\nexport async function _fullBackupDeserialize(\n  result: PathUncheckedResponse,\n): Promise<FullBackupOperation> {\n  const expectedStatuses = [\"202\", \"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return fullBackupOperationDeserializer(result.body);\n}\n\n/** Creates a full backup using a user-provided SAS token to an Azure blob storage container. */\nexport function fullBackup(\n  context: Client,\n  azureStorageBlobContainerUri: SASTokenParameter,\n  options: FullBackupOptionalParams = { requestOptions: {} },\n): PollerLike<OperationState<FullBackupOperation>, FullBackupOperation> {\n  return getLongRunningPoller(context, _fullBackupDeserialize, [\"202\", \"200\"], {\n    updateIntervalInMs: options?.updateIntervalInMs,\n    abortSignal: options?.abortSignal,\n    getInitialResponse: () =>\n      _fullBackupSend(context, azureStorageBlobContainerUri, options),\n    resourceLocationConfig: \"azure-async-operation\",\n  }) as PollerLike<OperationState<FullBackupOperation>, FullBackupOperation>;\n}\n\nexport function _fullBackupStatusSend(\n  context: Client,\n  jobId: string,\n  options: FullBackupStatusOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/backup/{jobId}/pending\", jobId)\n    .get({\n      ...operationOptionsToRequestParameters(options),\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n    });\n}\n\nexport async function _fullBackupStatusDeserialize(\n  result: PathUncheckedResponse,\n): Promise<FullBackupOperation> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return fullBackupOperationDeserializer(result.body);\n}\n\n/** Returns the status of full backup operation */\nexport async function fullBackupStatus(\n  context: Client,\n  jobId: string,\n  options: FullBackupStatusOptionalParams = { requestOptions: {} },\n): Promise<FullBackupOperation> {\n  const result = await _fullBackupStatusSend(context, jobId, options);\n  return _fullBackupStatusDeserialize(result);\n}\n"]}