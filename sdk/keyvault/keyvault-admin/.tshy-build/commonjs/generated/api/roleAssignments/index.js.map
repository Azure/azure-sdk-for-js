{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/generated/api/roleAssignments/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport {\n  KeyVaultContext as Client,\n  RoleAssignmentsCreateOptionalParams,\n  RoleAssignmentsDeleteOptionalParams,\n  RoleAssignmentsGetOptionalParams,\n  RoleAssignmentsListForScopeOptionalParams,\n} from \"../index.js\";\nimport {\n  keyVaultErrorDeserializer,\n  RoleAssignment,\n  roleAssignmentDeserializer,\n  RoleAssignmentCreateParameters,\n  roleAssignmentCreateParametersSerializer,\n  _RoleAssignmentListResult,\n  _roleAssignmentListResultDeserializer,\n} from \"../../models/models.js\";\nimport {\n  PagedAsyncIterableIterator,\n  buildPagedAsyncIterator,\n} from \"../../static-helpers/pagingHelpers.js\";\nimport {\n  StreamableMethod,\n  PathUncheckedResponse,\n  createRestError,\n  operationOptionsToRequestParameters,\n} from \"@azure-rest/core-client\";\n\nexport function _listForScopeSend(\n  context: Client,\n  scope: string,\n  options: RoleAssignmentsListForScopeOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\"/{scope}/providers/Microsoft.Authorization/roleAssignments\", {\n      value: scope,\n      allowReserved: true,\n    })\n    .get({\n      ...operationOptionsToRequestParameters(options),\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: {\n        \"api-version\": context.apiVersion,\n        $filter: options?.$filter,\n      },\n    });\n}\n\nexport async function _listForScopeDeserialize(\n  result: PathUncheckedResponse,\n): Promise<_RoleAssignmentListResult> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return _roleAssignmentListResultDeserializer(result.body);\n}\n\n/** Gets role assignments for a scope. */\nexport function listForScope(\n  context: Client,\n  scope: string,\n  options: RoleAssignmentsListForScopeOptionalParams = { requestOptions: {} },\n): PagedAsyncIterableIterator<RoleAssignment> {\n  return buildPagedAsyncIterator(\n    context,\n    () => _listForScopeSend(context, scope, options),\n    _listForScopeDeserialize,\n    [\"200\"],\n    { itemName: \"value\", nextLinkName: \"nextLink\" },\n  );\n}\n\nexport function _getSend(\n  context: Client,\n  scope: string,\n  roleAssignmentName: string,\n  options: RoleAssignmentsGetOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\n      \"/{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}\",\n      { value: scope, allowReserved: true },\n      roleAssignmentName,\n    )\n    .get({\n      ...operationOptionsToRequestParameters(options),\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n    });\n}\n\nexport async function _getDeserialize(\n  result: PathUncheckedResponse,\n): Promise<RoleAssignment> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return roleAssignmentDeserializer(result.body);\n}\n\n/** Get the specified role assignment. */\nexport async function get(\n  context: Client,\n  scope: string,\n  roleAssignmentName: string,\n  options: RoleAssignmentsGetOptionalParams = { requestOptions: {} },\n): Promise<RoleAssignment> {\n  const result = await _getSend(context, scope, roleAssignmentName, options);\n  return _getDeserialize(result);\n}\n\nexport function _createSend(\n  context: Client,\n  scope: string,\n  roleAssignmentName: string,\n  parameters: RoleAssignmentCreateParameters,\n  options: RoleAssignmentsCreateOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\n      \"/{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}\",\n      { value: scope, allowReserved: true },\n      roleAssignmentName,\n    )\n    .put({\n      ...operationOptionsToRequestParameters(options),\n      contentType: \"application/json\",\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n      body: roleAssignmentCreateParametersSerializer(parameters),\n    });\n}\n\nexport async function _createDeserialize(\n  result: PathUncheckedResponse,\n): Promise<RoleAssignment> {\n  const expectedStatuses = [\"201\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return roleAssignmentDeserializer(result.body);\n}\n\n/** Creates a role assignment. */\nexport async function create(\n  context: Client,\n  scope: string,\n  roleAssignmentName: string,\n  parameters: RoleAssignmentCreateParameters,\n  options: RoleAssignmentsCreateOptionalParams = { requestOptions: {} },\n): Promise<RoleAssignment> {\n  const result = await _createSend(\n    context,\n    scope,\n    roleAssignmentName,\n    parameters,\n    options,\n  );\n  return _createDeserialize(result);\n}\n\nexport function _$deleteSend(\n  context: Client,\n  scope: string,\n  roleAssignmentName: string,\n  options: RoleAssignmentsDeleteOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\n      \"/{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}\",\n      { value: scope, allowReserved: true },\n      roleAssignmentName,\n    )\n    .delete({\n      ...operationOptionsToRequestParameters(options),\n      headers: {\n        accept: \"application/json\",\n        ...options.requestOptions?.headers,\n      },\n      queryParameters: { \"api-version\": context.apiVersion },\n    });\n}\n\nexport async function _$deleteDeserialize(\n  result: PathUncheckedResponse,\n): Promise<RoleAssignment> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = keyVaultErrorDeserializer(result.body);\n    throw error;\n  }\n\n  return roleAssignmentDeserializer(result.body);\n}\n\n/** Deletes a role assignment. */\n/**\n *  @fixme delete is a reserved word that cannot be used as an operation name.\n *         Please add @clientName(\"clientName\") or @clientName(\"<JS-Specific-Name>\", \"javascript\")\n *         to the operation to override the generated name.\n */\nexport async function $delete(\n  context: Client,\n  scope: string,\n  roleAssignmentName: string,\n  options: RoleAssignmentsDeleteOptionalParams = { requestOptions: {} },\n): Promise<RoleAssignment> {\n  const result = await _$deleteSend(\n    context,\n    scope,\n    roleAssignmentName,\n    options,\n  );\n  return _$deleteDeserialize(result);\n}\n"]}