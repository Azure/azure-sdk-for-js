{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/generated/classic/roleAssignments/index.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AA+ElC,sEAMC;AA5ED,iEAK4C;AAwC5C,SAAS,mBAAmB,CAAC,OAAwB;IACnD,OAAO;QACL,YAAY,EAAE,CACZ,KAAa,EACb,OAAmD,EACnD,EAAE,CAAC,IAAA,uBAAY,EAAC,OAAO,EAAE,KAAK,EAAE,OAAO,CAAC;QAC1C,GAAG,EAAE,CACH,KAAa,EACb,kBAA0B,EAC1B,OAA0C,EAC1C,EAAE,CAAC,IAAA,cAAG,EAAC,OAAO,EAAE,KAAK,EAAE,kBAAkB,EAAE,OAAO,CAAC;QACrD,MAAM,EAAE,CACN,KAAa,EACb,kBAA0B,EAC1B,UAA0C,EAC1C,OAA6C,EAC7C,EAAE,CAAC,IAAA,iBAAM,EAAC,OAAO,EAAE,KAAK,EAAE,kBAAkB,EAAE,UAAU,EAAE,OAAO,CAAC;QACpE,MAAM,EAAE,CACN,KAAa,EACb,kBAA0B,EAC1B,OAA6C,EAC7C,EAAE,CAAC,IAAA,kBAAO,EAAC,OAAO,EAAE,KAAK,EAAE,kBAAkB,EAAE,OAAO,CAAC;KAC1D,CAAC;AACJ,CAAC;AAED,SAAgB,6BAA6B,CAC3C,OAAwB;IAExB,yBACK,mBAAmB,CAAC,OAAO,CAAC,EAC/B;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { KeyVaultContext } from \"../../api/keyVaultContext.js\";\nimport {\n  RoleAssignmentsListForScopeOptionalParams,\n  RoleAssignmentsGetOptionalParams,\n  RoleAssignmentsCreateOptionalParams,\n  RoleAssignmentsDeleteOptionalParams,\n} from \"../../api/options.js\";\nimport {\n  listForScope,\n  get,\n  create,\n  $delete,\n} from \"../../api/roleAssignments/index.js\";\nimport {\n  RoleAssignment,\n  RoleAssignmentCreateParameters,\n} from \"../../models/models.js\";\nimport { PagedAsyncIterableIterator } from \"../../static-helpers/pagingHelpers.js\";\n\n/** Interface representing a RoleAssignments operations. */\nexport interface RoleAssignmentsOperations {\n  /** Gets role assignments for a scope. */\n  listForScope: (\n    scope: string,\n    options?: RoleAssignmentsListForScopeOptionalParams,\n  ) => PagedAsyncIterableIterator<RoleAssignment>;\n  /** Get the specified role assignment. */\n  get: (\n    scope: string,\n    roleAssignmentName: string,\n    options?: RoleAssignmentsGetOptionalParams,\n  ) => Promise<RoleAssignment>;\n  /** Creates a role assignment. */\n  create: (\n    scope: string,\n    roleAssignmentName: string,\n    parameters: RoleAssignmentCreateParameters,\n    options?: RoleAssignmentsCreateOptionalParams,\n  ) => Promise<RoleAssignment>;\n  /** Deletes a role assignment. */\n  /**\n   *  @fixme delete is a reserved word that cannot be used as an operation name.\n   *         Please add @clientName(\"clientName\") or @clientName(\"<JS-Specific-Name>\", \"javascript\")\n   *         to the operation to override the generated name.\n   */\n  delete: (\n    scope: string,\n    roleAssignmentName: string,\n    options?: RoleAssignmentsDeleteOptionalParams,\n  ) => Promise<RoleAssignment>;\n}\n\nfunction _getRoleAssignments(context: KeyVaultContext) {\n  return {\n    listForScope: (\n      scope: string,\n      options?: RoleAssignmentsListForScopeOptionalParams,\n    ) => listForScope(context, scope, options),\n    get: (\n      scope: string,\n      roleAssignmentName: string,\n      options?: RoleAssignmentsGetOptionalParams,\n    ) => get(context, scope, roleAssignmentName, options),\n    create: (\n      scope: string,\n      roleAssignmentName: string,\n      parameters: RoleAssignmentCreateParameters,\n      options?: RoleAssignmentsCreateOptionalParams,\n    ) => create(context, scope, roleAssignmentName, parameters, options),\n    delete: (\n      scope: string,\n      roleAssignmentName: string,\n      options?: RoleAssignmentsDeleteOptionalParams,\n    ) => $delete(context, scope, roleAssignmentName, options),\n  };\n}\n\nexport function _getRoleAssignmentsOperations(\n  context: KeyVaultContext,\n): RoleAssignmentsOperations {\n  return {\n    ..._getRoleAssignments(context),\n  };\n}\n"]}