{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/generated/classic/roleDefinitions/index.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AA8ElC,sEAMC;AA3ED,iEAK4C;AAwC5C,SAAS,mBAAmB,CAAC,OAAwB;IACnD,OAAO;QACL,IAAI,EAAE,CAAC,KAAa,EAAE,OAA2C,EAAE,EAAE,CACnE,IAAA,eAAI,EAAC,OAAO,EAAE,KAAK,EAAE,OAAO,CAAC;QAC/B,GAAG,EAAE,CACH,KAAa,EACb,kBAA0B,EAC1B,OAA0C,EAC1C,EAAE,CAAC,IAAA,cAAG,EAAC,OAAO,EAAE,KAAK,EAAE,kBAAkB,EAAE,OAAO,CAAC;QACrD,cAAc,EAAE,CACd,KAAa,EACb,kBAA0B,EAC1B,UAA0C,EAC1C,OAAqD,EACrD,EAAE,CACF,IAAA,yBAAc,EAAC,OAAO,EAAE,KAAK,EAAE,kBAAkB,EAAE,UAAU,EAAE,OAAO,CAAC;QACzE,MAAM,EAAE,CACN,KAAa,EACb,kBAA0B,EAC1B,OAA6C,EAC7C,EAAE,CAAC,IAAA,kBAAO,EAAC,OAAO,EAAE,KAAK,EAAE,kBAAkB,EAAE,OAAO,CAAC;KAC1D,CAAC;AACJ,CAAC;AAED,SAAgB,6BAA6B,CAC3C,OAAwB;IAExB,yBACK,mBAAmB,CAAC,OAAO,CAAC,EAC/B;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { KeyVaultContext } from \"../../api/keyVaultContext.js\";\nimport {\n  RoleDefinitionsListOptionalParams,\n  RoleDefinitionsGetOptionalParams,\n  RoleDefinitionsCreateOrUpdateOptionalParams,\n  RoleDefinitionsDeleteOptionalParams,\n} from \"../../api/options.js\";\nimport {\n  list,\n  get,\n  createOrUpdate,\n  $delete,\n} from \"../../api/roleDefinitions/index.js\";\nimport {\n  RoleDefinition,\n  RoleDefinitionCreateParameters,\n} from \"../../models/models.js\";\nimport { PagedAsyncIterableIterator } from \"../../static-helpers/pagingHelpers.js\";\n\n/** Interface representing a RoleDefinitions operations. */\nexport interface RoleDefinitionsOperations {\n  /** Get all role definitions that are applicable at scope and above. */\n  list: (\n    scope: string,\n    options?: RoleDefinitionsListOptionalParams,\n  ) => PagedAsyncIterableIterator<RoleDefinition>;\n  /** Get the specified role definition. */\n  get: (\n    scope: string,\n    roleDefinitionName: string,\n    options?: RoleDefinitionsGetOptionalParams,\n  ) => Promise<RoleDefinition>;\n  /** Creates or updates a custom role definition. */\n  createOrUpdate: (\n    scope: string,\n    roleDefinitionName: string,\n    parameters: RoleDefinitionCreateParameters,\n    options?: RoleDefinitionsCreateOrUpdateOptionalParams,\n  ) => Promise<RoleDefinition>;\n  /** Deletes a custom role definition. */\n  /**\n   *  @fixme delete is a reserved word that cannot be used as an operation name.\n   *         Please add @clientName(\"clientName\") or @clientName(\"<JS-Specific-Name>\", \"javascript\")\n   *         to the operation to override the generated name.\n   */\n  delete: (\n    scope: string,\n    roleDefinitionName: string,\n    options?: RoleDefinitionsDeleteOptionalParams,\n  ) => Promise<RoleDefinition>;\n}\n\nfunction _getRoleDefinitions(context: KeyVaultContext) {\n  return {\n    list: (scope: string, options?: RoleDefinitionsListOptionalParams) =>\n      list(context, scope, options),\n    get: (\n      scope: string,\n      roleDefinitionName: string,\n      options?: RoleDefinitionsGetOptionalParams,\n    ) => get(context, scope, roleDefinitionName, options),\n    createOrUpdate: (\n      scope: string,\n      roleDefinitionName: string,\n      parameters: RoleDefinitionCreateParameters,\n      options?: RoleDefinitionsCreateOrUpdateOptionalParams,\n    ) =>\n      createOrUpdate(context, scope, roleDefinitionName, parameters, options),\n    delete: (\n      scope: string,\n      roleDefinitionName: string,\n      options?: RoleDefinitionsDeleteOptionalParams,\n    ) => $delete(context, scope, roleDefinitionName, options),\n  };\n}\n\nexport function _getRoleDefinitionsOperations(\n  context: KeyVaultContext,\n): RoleDefinitionsOperations {\n  return {\n    ..._getRoleDefinitions(context),\n  };\n}\n"]}