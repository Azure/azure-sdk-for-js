{"version":3,"file":"pollingHelpers.js","sourceRoot":"","sources":["../../../../src/generated/static-helpers/pollingHelpers.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AA2ClC,oDAqEC;AA9GD,8CAOyB;AAEzB,yDAIiC;AA4BjC,SAAgB,oBAAoB,CAIlC,MAAc,EACd,mBAA4D,EAC5D,gBAA0B,EAC1B,OAA+C;IAE/C,MAAM,EAAE,WAAW,EAAE,kBAAkB,EAAE,GAAG,OAAO,CAAC;IACpD,IAAI,CAAC,WAAW,IAAI,CAAC,kBAAkB,EAAE,CAAC;QACxC,MAAM,IAAI,KAAK,CACb,4DAA4D,CAC7D,CAAC;IACJ,CAAC;IACD,IAAI,eAAe,GAA0B,SAAS,CAAC;IACvD,MAAM,mBAAmB,GAAG,IAAI,eAAe,EAAE,CAAC;IAClD,MAAM,MAAM,GAAgC;QAC1C,kBAAkB,EAAE,KAAK,IAAI,EAAE;YAC7B,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBACxB,MAAM,IAAI,KAAK,CACb,+DAA+D,CAChE,CAAC;YACJ,CAAC;YACD,eAAe,GAAG,MAAM,kBAAkB,EAAE,CAAC;YAC7C,OAAO,cAAc,CAAC,eAAe,EAAE,gBAAgB,CAAC,CAAC;QAC3D,CAAC;QACD,eAAe,EAAE,KAAK,EACpB,IAAY,EACZ,WAEC,EACD,EAAE;;YACF,yGAAyG;YACzG,SAAS,aAAa;gBACpB,mBAAmB,CAAC,KAAK,EAAE,CAAC;YAC9B,CAAC;YACD,MAAM,WAAW,GAAG,mBAAmB,CAAC,MAAM,CAAC;YAC/C,IAAI,MAAA,OAAO,CAAC,WAAW,0CAAE,OAAO,EAAE,CAAC;gBACjC,mBAAmB,CAAC,KAAK,EAAE,CAAC;YAC9B,CAAC;iBAAM,IAAI,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,WAAW,0CAAE,OAAO,EAAE,CAAC;gBAC7C,mBAAmB,CAAC,KAAK,EAAE,CAAC;YAC9B,CAAC;iBAAM,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;gBAChC,MAAA,OAAO,CAAC,WAAW,0CAAE,gBAAgB,CAAC,OAAO,EAAE,aAAa,EAAE;oBAC5D,IAAI,EAAE,IAAI;iBACX,CAAC,CAAC;gBACH,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,WAAW,0CAAE,gBAAgB,CAAC,OAAO,EAAE,aAAa,EAAE;oBACjE,IAAI,EAAE,IAAI;iBACX,CAAC,CAAC;YACL,CAAC;YACD,IAAI,QAAQ,CAAC;YACb,IAAI,CAAC;gBACH,QAAQ,GAAG,MAAM,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;YACnE,CAAC;oBAAS,CAAC;gBACT,MAAA,OAAO,CAAC,WAAW,0CAAE,mBAAmB,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;gBACjE,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,WAAW,0CAAE,mBAAmB,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;YACxE,CAAC;YAED,OAAO,cAAc,CAAC,QAAqB,EAAE,gBAAgB,CAAC,CAAC;QACjE,CAAC;KACF,CAAC;IACF,OAAO,IAAA,2BAAgB,EAAC,MAAM,EAAE;QAC9B,YAAY,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,kBAAkB;QACzC,sBAAsB,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,sBAAsB;QACvD,WAAW,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW;QACjC,aAAa,EAAE,CAAC,MAAe,EAAE,EAAE;YACjC,OAAO,mBAAmB,CAAC,MAAmB,CAAC,CAAC;QAClD,CAAC;KACF,CAAC,CAAC;AACL,CAAC;AACD;;;;;GAKG;AACH,SAAS,cAAc,CACrB,QAAmB,EACnB,gBAA0B;IAE1B,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;QAChD,MAAM,IAAA,6BAAe,EAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;IAED,OAAO;QACL,YAAY,EAAE,QAAQ;QACtB,WAAW,kCACN,QAAQ,KACX,UAAU,EAAE,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAC5C,IAAI,EAAE,QAAQ,CAAC,IAAI,GACpB;KACF,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport {\n  PollerLike,\n  OperationState,\n  ResourceLocationConfig,\n  RunningOperation,\n  createHttpPoller,\n  OperationResponse,\n} from \"@azure/core-lro\";\n\nimport {\n  Client,\n  PathUncheckedResponse,\n  createRestError,\n} from \"@azure-rest/core-client\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\n\nexport interface GetLongRunningPollerOptions<TResponse> {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /**\n   * The signal which can be used to abort requests.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * The potential location of the result of the LRO if specified by the LRO extension in the swagger.\n   */\n  resourceLocationConfig?: ResourceLocationConfig;\n  /**\n   * The original url of the LRO\n   * Should not be null when restoreFrom is set\n   */\n  initialRequestUrl?: string;\n  /**\n   * A serialized poller which can be used to resume an existing paused Long-Running-Operation.\n   */\n  restoreFrom?: string;\n  /**\n   * The function to get the initial response\n   */\n  getInitialResponse?: () => PromiseLike<TResponse>;\n}\nexport function getLongRunningPoller<\n  TResponse extends PathUncheckedResponse,\n  TResult = void,\n>(\n  client: Client,\n  processResponseBody: (result: TResponse) => Promise<TResult>,\n  expectedStatuses: string[],\n  options: GetLongRunningPollerOptions<TResponse>,\n): PollerLike<OperationState<TResult>, TResult> {\n  const { restoreFrom, getInitialResponse } = options;\n  if (!restoreFrom && !getInitialResponse) {\n    throw new Error(\n      \"Either restoreFrom or getInitialResponse must be specified\",\n    );\n  }\n  let initialResponse: TResponse | undefined = undefined;\n  const pollAbortController = new AbortController();\n  const poller: RunningOperation<TResponse> = {\n    sendInitialRequest: async () => {\n      if (!getInitialResponse) {\n        throw new Error(\n          \"getInitialResponse is required when initializing a new poller\",\n        );\n      }\n      initialResponse = await getInitialResponse();\n      return getLroResponse(initialResponse, expectedStatuses);\n    },\n    sendPollRequest: async (\n      path: string,\n      pollOptions?: {\n        abortSignal?: AbortSignalLike;\n      },\n    ) => {\n      // The poll request would both listen to the user provided abort signal and the poller's own abort signal\n      function abortListener(): void {\n        pollAbortController.abort();\n      }\n      const abortSignal = pollAbortController.signal;\n      if (options.abortSignal?.aborted) {\n        pollAbortController.abort();\n      } else if (pollOptions?.abortSignal?.aborted) {\n        pollAbortController.abort();\n      } else if (!abortSignal.aborted) {\n        options.abortSignal?.addEventListener(\"abort\", abortListener, {\n          once: true,\n        });\n        pollOptions?.abortSignal?.addEventListener(\"abort\", abortListener, {\n          once: true,\n        });\n      }\n      let response;\n      try {\n        response = await client.pathUnchecked(path).get({ abortSignal });\n      } finally {\n        options.abortSignal?.removeEventListener(\"abort\", abortListener);\n        pollOptions?.abortSignal?.removeEventListener(\"abort\", abortListener);\n      }\n\n      return getLroResponse(response as TResponse, expectedStatuses);\n    },\n  };\n  return createHttpPoller(poller, {\n    intervalInMs: options?.updateIntervalInMs,\n    resourceLocationConfig: options?.resourceLocationConfig,\n    restoreFrom: options?.restoreFrom,\n    processResult: (result: unknown) => {\n      return processResponseBody(result as TResponse);\n    },\n  });\n}\n/**\n * Converts a Rest Client response to a response that the LRO implementation understands\n * @param response - a rest client http response\n * @param deserializeFn - deserialize function to convert Rest response to modular output\n * @returns - An LRO response that the LRO implementation understands\n */\nfunction getLroResponse<TResponse extends PathUncheckedResponse>(\n  response: TResponse,\n  expectedStatuses: string[],\n): OperationResponse<TResponse> {\n  if (!expectedStatuses.includes(response.status)) {\n    throw createRestError(response);\n  }\n\n  return {\n    flatResponse: response,\n    rawResponse: {\n      ...response,\n      statusCode: Number.parseInt(response.status),\n      body: response.body,\n    },\n  };\n}\n"]}