{"version":3,"file":"accessControlModels.js","sourceRoot":"","sources":["../../src/accessControlModels.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAGlC,mDAK8B;AAGkB,wGAL3B,0BAAuB,OAK2B;AAAE,uGAJrD,yBAAsB,OAIqD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { ClientOptions, OperationOptions } from \"@azure-rest/core-client\";\nimport {\n  DataAction as KeyVaultDataAction,\n  RoleScope as KeyVaultRoleScope,\n  KnownDataAction as KnownKeyVaultDataAction,\n  KnownRoleScope as KnownKeyVaultRoleScope,\n} from \"./generated/index.js\";\nimport type { SUPPORTED_API_VERSIONS } from \"./constants.js\";\n\nexport { KeyVaultDataAction, KeyVaultRoleScope, KnownKeyVaultDataAction, KnownKeyVaultRoleScope };\n\n/**\n * The optional parameters accepted by the Key Vault's AccessControlClient\n */\nexport interface AccessControlClientOptions extends ClientOptions {\n  /**\n   * The accepted versions of the Key Vault's service API.\n   */\n  serviceVersion?: SUPPORTED_API_VERSIONS;\n\n  /**\n   * Whether to disable verification that the authentication challenge resource matches the Key Vault or Managed HSM domain.\n   * Defaults to false.\n   */\n  disableChallengeResourceVerification?: boolean;\n}\n\n/**\n * A Key Vault role assignment.\n */\nexport interface KeyVaultRoleAssignment {\n  /**\n   * The role assignment ID.\n   */\n  readonly id: string;\n  /**\n   * The role assignment name.\n   */\n  readonly name: string;\n  /**\n   * The role assignment type.\n   */\n  readonly kind: string;\n  /**\n   * Role assignment properties.\n   */\n  properties: KeyVaultRoleAssignmentProperties;\n}\n\n/**\n * A list of Key Vault permissions.\n */\nexport interface KeyVaultPermission {\n  /**\n   * Allowed actions.\n   */\n  actions?: string[];\n  /**\n   * Actions that are excluded but not denied. They may be granted by other role definitions assigned to a principal.\n   */\n  notActions?: string[];\n  /**\n   * Allowed Data actions.\n   */\n  dataActions?: KeyVaultDataAction[];\n  /**\n   * Data actions that are excluded but not denied. They may be granted by other role definitions assigned to a principal.\n   */\n  notDataActions?: KeyVaultDataAction[];\n}\n\n/**\n * A Key Vault role definition.\n */\nexport interface KeyVaultRoleDefinition {\n  /**\n   * The role definition ID.\n   */\n  readonly id: string;\n  /**\n   * The role definition name.\n   */\n  readonly name: string;\n  /**\n   * The role definition type.\n   */\n  readonly kind: string;\n  /**\n   * The role name.\n   */\n  roleName: string;\n  /**\n   * The role definition description.\n   */\n  description: string;\n  /**\n   * The role type.\n   */\n  roleType: string;\n  /**\n   * A list of Key Vault permissions.\n   */\n  permissions: KeyVaultPermission[];\n  /**\n   * Role definition assignable scopes.\n   */\n  assignableScopes: string[];\n}\n\n/**\n * Role assignment properties.\n */\nexport interface KeyVaultRoleAssignmentProperties {\n  /**\n   * The role definition ID.\n   */\n  roleDefinitionId: string;\n  /**\n   * The principal ID.\n   */\n  principalId: string;\n  /**\n   * The role assignment scope.\n   */\n  scope?: KeyVaultRoleScope;\n}\n\n/**\n * An interface representing the optional parameters that can be\n * passed to {@link createRoleAssignment}\n */\nexport interface CreateRoleAssignmentOptions extends OperationOptions {}\n\n/**\n * An interface representing the optional parameters that can be\n * passed to {@link deleteRoleAssignment}\n */\nexport interface DeleteRoleAssignmentOptions extends OperationOptions {}\n\n/**\n * An interface representing the optional parameters that can be\n * passed to {@link getRoleAssignment}\n */\nexport interface GetRoleAssignmentOptions extends OperationOptions {}\n\n/**\n * An interface representing optional parameters passed to {@link listRoleAssignments}.\n */\nexport interface ListRoleAssignmentsOptions extends OperationOptions {}\n\n/**\n * An interface representing optional parameters passed to {@link listRoleDefinitions}.\n */\nexport interface ListRoleDefinitionsOptions extends OperationOptions {}\n\n/**\n * An interface representing optional parameters passed to {@link getRoleDefinition}.\n */\nexport interface GetRoleDefinitionOptions extends OperationOptions {}\n\n/**\n * An interface representing optional parameters passed to {@link setRoleDefinition}.\n */\nexport interface SetRoleDefinitionOptions extends OperationOptions {\n  /**\n   * UUID used as the name of the role definition to create. If it's not provided, a new UUID will be generated.\n   */\n  roleDefinitionName?: string;\n  /**\n   * Friendly display name for the role definition.\n   */\n  roleName?: string;\n  /**\n   * Long-form description of the role definition.\n   */\n  description?: string;\n  /**\n   * List of Key Vault permissions\n   */\n  permissions?: KeyVaultPermission[];\n  /**\n   * List of assignable Key Vault role scopes\n   */\n  assignableScopes?: KeyVaultRoleScope[];\n}\n\n/**\n * An interface representing optional parameters passed to {@link deleteRoleDefinition}.\n */\nexport interface DeleteRoleDefinitionOptions extends OperationOptions {}\n\n/**\n * Arguments for retrieving the next page of search results.\n */\nexport interface ListRoleDefinitionsPageSettings {\n  /**\n   * A token used for retrieving the next page of results when the server\n   * enforces pagination.\n   */\n  continuationToken?: string;\n}\n\n/**\n * Arguments for retrieving the next page of search results.\n */\nexport interface ListRoleAssignmentsPageSettings {\n  /**\n   * A token used for retrieving the next page of results when the server\n   * enforces pagination.\n   */\n  continuationToken?: string;\n}\n"]}