/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import type { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import type { TuningIndex } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import type { PostgreSQLManagementFlexibleServerClient } from "../postgreSQLManagementFlexibleServerClient.js";
import type {
  IndexRecommendationResource,
  TuningOptionEnum,
  TuningIndexListRecommendationsNextOptionalParams,
  TuningIndexListRecommendationsOptionalParams,
  TuningIndexListRecommendationsResponse,
  TuningIndexListRecommendationsNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing TuningIndex operations. */
export class TuningIndexImpl implements TuningIndex {
  private readonly client: PostgreSQLManagementFlexibleServerClient;

  /**
   * Initialize a new instance of the class TuningIndex class.
   * @param client Reference to the service client
   */
  constructor(client: PostgreSQLManagementFlexibleServerClient) {
    this.client = client;
  }

  /**
   * Retrieve the list of available tuning index recommendations.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the server.
   * @param tuningOption The name of the tuning option.
   * @param options The options parameters.
   */
  public listRecommendations(
    resourceGroupName: string,
    serverName: string,
    tuningOption: TuningOptionEnum,
    options?: TuningIndexListRecommendationsOptionalParams,
  ): PagedAsyncIterableIterator<IndexRecommendationResource> {
    const iter = this.listRecommendationsPagingAll(
      resourceGroupName,
      serverName,
      tuningOption,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listRecommendationsPagingPage(
          resourceGroupName,
          serverName,
          tuningOption,
          options,
          settings,
        );
      },
    };
  }

  private async *listRecommendationsPagingPage(
    resourceGroupName: string,
    serverName: string,
    tuningOption: TuningOptionEnum,
    options?: TuningIndexListRecommendationsOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<IndexRecommendationResource[]> {
    let result: TuningIndexListRecommendationsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listRecommendations(
        resourceGroupName,
        serverName,
        tuningOption,
        options,
      );
      const page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listRecommendationsNext(
        resourceGroupName,
        serverName,
        tuningOption,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      const page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listRecommendationsPagingAll(
    resourceGroupName: string,
    serverName: string,
    tuningOption: TuningOptionEnum,
    options?: TuningIndexListRecommendationsOptionalParams,
  ): AsyncIterableIterator<IndexRecommendationResource> {
    for await (const page of this.listRecommendationsPagingPage(
      resourceGroupName,
      serverName,
      tuningOption,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Retrieve the list of available tuning index recommendations.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the server.
   * @param tuningOption The name of the tuning option.
   * @param options The options parameters.
   */
  private _listRecommendations(
    resourceGroupName: string,
    serverName: string,
    tuningOption: TuningOptionEnum,
    options?: TuningIndexListRecommendationsOptionalParams,
  ): Promise<TuningIndexListRecommendationsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serverName, tuningOption, options },
      listRecommendationsOperationSpec,
    );
  }

  /**
   * ListRecommendationsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serverName The name of the server.
   * @param tuningOption The name of the tuning option.
   * @param nextLink The nextLink from the previous successful call to the ListRecommendations method.
   * @param options The options parameters.
   */
  private _listRecommendationsNext(
    resourceGroupName: string,
    serverName: string,
    tuningOption: TuningOptionEnum,
    nextLink: string,
    options?: TuningIndexListRecommendationsNextOptionalParams,
  ): Promise<TuningIndexListRecommendationsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serverName, tuningOption, nextLink, options },
      listRecommendationsNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listRecommendationsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}/tuningOptions/{tuningOption}/recommendations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IndexRecommendationListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.recommendationType],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.tuningOption,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listRecommendationsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IndexRecommendationListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.nextLink,
    Parameters.tuningOption,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
