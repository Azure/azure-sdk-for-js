/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CheckNameAvailabilityWithLocation } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { PostgreSQLManagementFlexibleServerClient } from "../postgreSQLManagementFlexibleServerClient.js";
import {
  CheckNameAvailabilityRequest,
  CheckNameAvailabilityWithLocationExecuteOptionalParams,
  CheckNameAvailabilityWithLocationExecuteResponse,
} from "../models/index.js";

/** Class containing CheckNameAvailabilityWithLocation operations. */
export class CheckNameAvailabilityWithLocationImpl
  implements CheckNameAvailabilityWithLocation
{
  private readonly client: PostgreSQLManagementFlexibleServerClient;

  /**
   * Initialize a new instance of the class CheckNameAvailabilityWithLocation class.
   * @param client Reference to the service client
   */
  constructor(client: PostgreSQLManagementFlexibleServerClient) {
    this.client = client;
  }

  /**
   * Check the availability of name for resource
   * @param locationName The name of the location.
   * @param nameAvailabilityRequest The required parameters for checking if resource name is available.
   * @param options The options parameters.
   */
  execute(
    locationName: string,
    nameAvailabilityRequest: CheckNameAvailabilityRequest,
    options?: CheckNameAvailabilityWithLocationExecuteOptionalParams,
  ): Promise<CheckNameAvailabilityWithLocationExecuteResponse> {
    return this.client.sendOperationRequest(
      { locationName, nameAvailabilityRequest, options },
      executeOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const executeOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.DBforPostgreSQL/locations/{locationName}/checkNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.NameAvailability,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.nameAvailabilityRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.locationName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
