/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Storage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Storage",
    modelProperties: {
      storageSizeGB: {
        serializedName: "storageSizeGB",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Backup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Backup",
    modelProperties: {
      backupRetentionDays: {
        defaultValue: 7,
        serializedName: "backupRetentionDays",
        type: {
          name: "Number"
        }
      },
      geoRedundantBackup: {
        defaultValue: "Disabled",
        serializedName: "geoRedundantBackup",
        type: {
          name: "String"
        }
      },
      earliestRestoreDate: {
        serializedName: "earliestRestoreDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const Network: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Network",
    modelProperties: {
      publicNetworkAccess: {
        serializedName: "publicNetworkAccess",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      delegatedSubnetResourceId: {
        defaultValue: "",
        serializedName: "delegatedSubnetResourceId",
        type: {
          name: "String"
        }
      },
      privateDnsZoneArmResourceId: {
        defaultValue: "",
        serializedName: "privateDnsZoneArmResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HighAvailability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HighAvailability",
    modelProperties: {
      mode: {
        defaultValue: "Disabled",
        serializedName: "mode",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      standbyAvailabilityZone: {
        defaultValue: "",
        serializedName: "standbyAvailabilityZone",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MaintenanceWindow: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MaintenanceWindow",
    modelProperties: {
      customWindow: {
        defaultValue: "Disabled",
        serializedName: "customWindow",
        type: {
          name: "String"
        }
      },
      startHour: {
        defaultValue: 0,
        serializedName: "startHour",
        type: {
          name: "Number"
        }
      },
      startMinute: {
        defaultValue: 0,
        serializedName: "startMinute",
        type: {
          name: "Number"
        }
      },
      dayOfWeek: {
        defaultValue: 0,
        serializedName: "dayOfWeek",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorResponse"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorResponse"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const ServerForUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerForUpdate",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      administratorLoginPassword: {
        serializedName: "properties.administratorLoginPassword",
        type: {
          name: "String"
        }
      },
      storage: {
        serializedName: "properties.storage",
        type: {
          name: "Composite",
          className: "Storage"
        }
      },
      backup: {
        serializedName: "properties.backup",
        type: {
          name: "Composite",
          className: "Backup"
        }
      },
      highAvailability: {
        serializedName: "properties.highAvailability",
        type: {
          name: "Composite",
          className: "HighAvailability"
        }
      },
      maintenanceWindow: {
        serializedName: "properties.maintenanceWindow",
        type: {
          name: "Composite",
          className: "MaintenanceWindow"
        }
      },
      createMode: {
        serializedName: "properties.createMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Server"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestartParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestartParameter",
    modelProperties: {
      restartWithFailover: {
        serializedName: "restartWithFailover",
        type: {
          name: "Boolean"
        }
      },
      failoverMode: {
        serializedName: "failoverMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallRuleListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirewallRuleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FirewallRule"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConfigurationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Configuration"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NameAvailabilityRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NameAvailabilityRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NameAvailability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NameAvailability",
    modelProperties: {
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nameAvailable: {
        serializedName: "nameAvailable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CapabilitiesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CapabilitiesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CapabilityProperties"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CapabilityProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CapabilityProperties",
    modelProperties: {
      zone: {
        serializedName: "zone",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      geoBackupSupported: {
        serializedName: "geoBackupSupported",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      zoneRedundantHaSupported: {
        serializedName: "zoneRedundantHaSupported",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      zoneRedundantHaAndGeoBackupSupported: {
        serializedName: "zoneRedundantHaAndGeoBackupSupported",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      supportedFlexibleServerEditions: {
        serializedName: "supportedFlexibleServerEditions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FlexibleServerEditionCapability"
            }
          }
        }
      },
      supportedHyperscaleNodeEditions: {
        serializedName: "supportedHyperscaleNodeEditions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HyperscaleNodeEditionCapability"
            }
          }
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FlexibleServerEditionCapability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FlexibleServerEditionCapability",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      supportedStorageEditions: {
        serializedName: "supportedStorageEditions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageEditionCapability"
            }
          }
        }
      },
      supportedServerVersions: {
        serializedName: "supportedServerVersions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerVersionCapability"
            }
          }
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageEditionCapability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageEditionCapability",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      supportedStorageMB: {
        serializedName: "supportedStorageMB",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageMBCapability"
            }
          }
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageMBCapability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageMBCapability",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      supportedIops: {
        serializedName: "supportedIops",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      storageSizeMB: {
        serializedName: "storageSizeMB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerVersionCapability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerVersionCapability",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      supportedVcores: {
        serializedName: "supportedVcores",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VcoreCapability"
            }
          }
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VcoreCapability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VcoreCapability",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vCores: {
        serializedName: "vCores",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      supportedIops: {
        serializedName: "supportedIops",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      supportedMemoryPerVcoreMB: {
        serializedName: "supportedMemoryPerVcoreMB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperscaleNodeEditionCapability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperscaleNodeEditionCapability",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      supportedStorageEditions: {
        serializedName: "supportedStorageEditions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageEditionCapability"
            }
          }
        }
      },
      supportedServerVersions: {
        serializedName: "supportedServerVersions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerVersionCapability"
            }
          }
        }
      },
      supportedNodeTypes: {
        serializedName: "supportedNodeTypes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NodeTypeCapability"
            }
          }
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NodeTypeCapability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeTypeCapability",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nodeType: {
        serializedName: "nodeType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkSubnetUsageParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkSubnetUsageParameter",
    modelProperties: {
      virtualNetworkArmResourceId: {
        serializedName: "virtualNetworkArmResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkSubnetUsageResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkSubnetUsageResult",
    modelProperties: {
      delegatedSubnetsUsage: {
        serializedName: "delegatedSubnetsUsage",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DelegatedSubnetUsage"
            }
          }
        }
      }
    }
  }
};

export const DelegatedSubnetUsage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DelegatedSubnetUsage",
    modelProperties: {
      subnetName: {
        serializedName: "subnetName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      usage: {
        serializedName: "usage",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Database"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const Server: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Server",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      administratorLogin: {
        serializedName: "properties.administratorLogin",
        type: {
          name: "String"
        }
      },
      administratorLoginPassword: {
        serializedName: "properties.administratorLoginPassword",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "String"
        }
      },
      minorVersion: {
        serializedName: "properties.minorVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fullyQualifiedDomainName: {
        serializedName: "properties.fullyQualifiedDomainName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storage: {
        serializedName: "properties.storage",
        type: {
          name: "Composite",
          className: "Storage"
        }
      },
      backup: {
        serializedName: "properties.backup",
        type: {
          name: "Composite",
          className: "Backup"
        }
      },
      network: {
        serializedName: "properties.network",
        type: {
          name: "Composite",
          className: "Network"
        }
      },
      highAvailability: {
        serializedName: "properties.highAvailability",
        type: {
          name: "Composite",
          className: "HighAvailability"
        }
      },
      maintenanceWindow: {
        serializedName: "properties.maintenanceWindow",
        type: {
          name: "Composite",
          className: "MaintenanceWindow"
        }
      },
      sourceServerResourceId: {
        serializedName: "properties.sourceServerResourceId",
        type: {
          name: "String"
        }
      },
      pointInTimeUTC: {
        serializedName: "properties.pointInTimeUTC",
        type: {
          name: "DateTime"
        }
      },
      availabilityZone: {
        defaultValue: "",
        serializedName: "properties.availabilityZone",
        type: {
          name: "String"
        }
      },
      createMode: {
        serializedName: "properties.createMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirewallRule",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      startIpAddress: {
        constraints: {
          Pattern: new RegExp(
            "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
          )
        },
        serializedName: "properties.startIpAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        constraints: {
          Pattern: new RegExp(
            "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
          )
        },
        serializedName: "properties.endIpAddress",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Configuration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Configuration",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      value: {
        serializedName: "properties.value",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      defaultValue: {
        serializedName: "properties.defaultValue",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataType: {
        serializedName: "properties.dataType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      allowedValues: {
        serializedName: "properties.allowedValues",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "properties.source",
        type: {
          name: "String"
        }
      },
      isDynamicConfig: {
        serializedName: "properties.isDynamicConfig",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      isReadOnly: {
        serializedName: "properties.isReadOnly",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      isConfigPendingRestart: {
        serializedName: "properties.isConfigPendingRestart",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      unit: {
        serializedName: "properties.unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      documentationLink: {
        serializedName: "properties.documentationLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Database: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Database",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      charset: {
        serializedName: "properties.charset",
        type: {
          name: "String"
        }
      },
      collation: {
        serializedName: "properties.collation",
        type: {
          name: "String"
        }
      }
    }
  }
};
