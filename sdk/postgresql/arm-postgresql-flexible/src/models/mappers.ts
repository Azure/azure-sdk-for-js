/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const ActiveDirectoryAdministratorAdd: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ActiveDirectoryAdministratorAdd",
    modelProperties: {
      principalType: {
        serializedName: "properties.principalType",
        type: {
          name: "String"
        }
      },
      principalName: {
        serializedName: "properties.principalName",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const AdministratorListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AdministratorListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ActiveDirectoryAdministrator"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerBackupListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerBackupListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerBackup"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CapabilitiesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CapabilitiesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FlexibleServerCapability"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CapabilityBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CapabilityBase",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Visible", "Available", "Default", "Disabled"]
        }
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResponse",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConfigurationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Configuration"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConfigurationForUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationForUpdate",
    modelProperties: {
      value: {
        serializedName: "properties.value",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      defaultValue: {
        serializedName: "properties.defaultValue",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataType: {
        serializedName: "properties.dataType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      allowedValues: {
        serializedName: "properties.allowedValues",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "properties.source",
        type: {
          name: "String"
        }
      },
      isDynamicConfig: {
        serializedName: "properties.isDynamicConfig",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      isReadOnly: {
        serializedName: "properties.isReadOnly",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      isConfigPendingRestart: {
        serializedName: "properties.isConfigPendingRestart",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      unit: {
        serializedName: "properties.unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      documentationLink: {
        serializedName: "properties.documentationLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Database"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallRuleListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirewallRuleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FirewallRule"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "UserIdentity" } }
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Storage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Storage",
    modelProperties: {
      storageSizeGB: {
        serializedName: "storageSizeGB",
        type: {
          name: "Number"
        }
      },
      autoGrow: {
        serializedName: "autoGrow",
        type: {
          name: "String"
        }
      },
      iopsTier: {
        serializedName: "iopsTier",
        type: {
          name: "String"
        }
      },
      iops: {
        serializedName: "iops",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AuthConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AuthConfig",
    modelProperties: {
      activeDirectoryAuth: {
        serializedName: "activeDirectoryAuth",
        type: {
          name: "String"
        }
      },
      passwordAuth: {
        defaultValue: "Enabled",
        serializedName: "passwordAuth",
        type: {
          name: "String"
        }
      },
      tenantId: {
        defaultValue: "",
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataEncryption: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataEncryption",
    modelProperties: {
      primaryKeyURI: {
        serializedName: "primaryKeyURI",
        type: {
          name: "String"
        }
      },
      primaryUserAssignedIdentityId: {
        serializedName: "primaryUserAssignedIdentityId",
        type: {
          name: "String"
        }
      },
      geoBackupKeyURI: {
        serializedName: "geoBackupKeyURI",
        type: {
          name: "String"
        }
      },
      geoBackupUserAssignedIdentityId: {
        serializedName: "geoBackupUserAssignedIdentityId",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      primaryEncryptionKeyStatus: {
        serializedName: "primaryEncryptionKeyStatus",
        type: {
          name: "String"
        }
      },
      geoBackupEncryptionKeyStatus: {
        serializedName: "geoBackupEncryptionKeyStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Backup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Backup",
    modelProperties: {
      backupRetentionDays: {
        defaultValue: 7,
        serializedName: "backupRetentionDays",
        type: {
          name: "Number"
        }
      },
      geoRedundantBackup: {
        defaultValue: "Disabled",
        serializedName: "geoRedundantBackup",
        type: {
          name: "String"
        }
      },
      earliestRestoreDate: {
        serializedName: "earliestRestoreDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const Network: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Network",
    modelProperties: {
      publicNetworkAccess: {
        serializedName: "publicNetworkAccess",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      delegatedSubnetResourceId: {
        serializedName: "delegatedSubnetResourceId",
        type: {
          name: "String"
        }
      },
      privateDnsZoneArmResourceId: {
        serializedName: "privateDnsZoneArmResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HighAvailability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HighAvailability",
    modelProperties: {
      mode: {
        defaultValue: "Disabled",
        serializedName: "mode",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      standbyAvailabilityZone: {
        defaultValue: "",
        serializedName: "standbyAvailabilityZone",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MaintenanceWindow: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MaintenanceWindow",
    modelProperties: {
      customWindow: {
        defaultValue: "Disabled",
        serializedName: "customWindow",
        type: {
          name: "String"
        }
      },
      startHour: {
        defaultValue: 0,
        serializedName: "startHour",
        type: {
          name: "Number"
        }
      },
      startMinute: {
        defaultValue: 0,
        serializedName: "startMinute",
        type: {
          name: "Number"
        }
      },
      dayOfWeek: {
        defaultValue: 0,
        serializedName: "dayOfWeek",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ServerForUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerForUpdate",
    modelProperties: {
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "UserAssignedIdentity"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      administratorLoginPassword: {
        serializedName: "properties.administratorLoginPassword",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "String"
        }
      },
      storage: {
        serializedName: "properties.storage",
        type: {
          name: "Composite",
          className: "Storage"
        }
      },
      backup: {
        serializedName: "properties.backup",
        type: {
          name: "Composite",
          className: "Backup"
        }
      },
      highAvailability: {
        serializedName: "properties.highAvailability",
        type: {
          name: "Composite",
          className: "HighAvailability"
        }
      },
      maintenanceWindow: {
        serializedName: "properties.maintenanceWindow",
        type: {
          name: "Composite",
          className: "MaintenanceWindow"
        }
      },
      authConfig: {
        serializedName: "properties.authConfig",
        type: {
          name: "Composite",
          className: "AuthConfig"
        }
      },
      dataEncryption: {
        serializedName: "properties.dataEncryption",
        type: {
          name: "Composite",
          className: "DataEncryption"
        }
      },
      createMode: {
        serializedName: "properties.createMode",
        type: {
          name: "String"
        }
      },
      replicationRole: {
        serializedName: "properties.replicationRole",
        type: {
          name: "String"
        }
      },
      network: {
        serializedName: "properties.network",
        type: {
          name: "Composite",
          className: "Network"
        }
      }
    }
  }
};

export const ServerListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Server"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MigrationStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MigrationStatus",
    modelProperties: {
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      currentSubStateDetails: {
        serializedName: "currentSubStateDetails",
        type: {
          name: "Composite",
          className: "MigrationSubStateDetails"
        }
      }
    }
  }
};

export const MigrationSubStateDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MigrationSubStateDetails",
    modelProperties: {
      currentSubState: {
        serializedName: "currentSubState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DbServerMetadata: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DbServerMetadata",
    modelProperties: {
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      storageMb: {
        serializedName: "storageMb",
        type: {
          name: "Number"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "ServerSku"
        }
      }
    }
  }
};

export const ServerSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerSku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MigrationSecretParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MigrationSecretParameters",
    modelProperties: {
      adminCredentials: {
        serializedName: "adminCredentials",
        type: {
          name: "Composite",
          className: "AdminCredentials"
        }
      },
      sourceServerUsername: {
        serializedName: "sourceServerUsername",
        type: {
          name: "String"
        }
      },
      targetServerUsername: {
        serializedName: "targetServerUsername",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AdminCredentials: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AdminCredentials",
    modelProperties: {
      sourceServerPassword: {
        serializedName: "sourceServerPassword",
        required: true,
        type: {
          name: "String"
        }
      },
      targetServerPassword: {
        serializedName: "targetServerPassword",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MigrationResourceForPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MigrationResourceForPatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      sourceDbServerResourceId: {
        serializedName: "properties.sourceDbServerResourceId",
        type: {
          name: "String"
        }
      },
      sourceDbServerFullyQualifiedDomainName: {
        serializedName: "properties.sourceDbServerFullyQualifiedDomainName",
        type: {
          name: "String"
        }
      },
      targetDbServerFullyQualifiedDomainName: {
        serializedName: "properties.targetDbServerFullyQualifiedDomainName",
        type: {
          name: "String"
        }
      },
      secretParameters: {
        serializedName: "properties.secretParameters",
        type: {
          name: "Composite",
          className: "MigrationSecretParameters"
        }
      },
      dbsToMigrate: {
        constraints: {
          MaxItems: 50
        },
        serializedName: "properties.dbsToMigrate",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      setupLogicalReplicationOnSourceDbIfNeeded: {
        serializedName: "properties.setupLogicalReplicationOnSourceDbIfNeeded",
        type: {
          name: "String"
        }
      },
      overwriteDbsInTarget: {
        serializedName: "properties.overwriteDbsInTarget",
        type: {
          name: "String"
        }
      },
      migrationWindowStartTimeInUtc: {
        serializedName: "properties.migrationWindowStartTimeInUtc",
        type: {
          name: "DateTime"
        }
      },
      startDataMigration: {
        serializedName: "properties.startDataMigration",
        type: {
          name: "String"
        }
      },
      triggerCutover: {
        serializedName: "properties.triggerCutover",
        type: {
          name: "String"
        }
      },
      dbsToTriggerCutoverOn: {
        serializedName: "properties.dbsToTriggerCutoverOn",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      cancel: {
        serializedName: "properties.cancel",
        type: {
          name: "String"
        }
      },
      dbsToCancelMigrationOn: {
        serializedName: "properties.dbsToCancelMigrationOn",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      migrationMode: {
        serializedName: "properties.migrationMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MigrationResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MigrationResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MigrationResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MigrationNameAvailabilityResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MigrationNameAvailabilityResource",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      nameAvailable: {
        serializedName: "nameAvailable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LogFileListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogFileListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LogFile"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestartParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestartParameter",
    modelProperties: {
      restartWithFailover: {
        serializedName: "restartWithFailover",
        type: {
          name: "Boolean"
        }
      },
      failoverMode: {
        serializedName: "failoverMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkSubnetUsageParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkSubnetUsageParameter",
    modelProperties: {
      virtualNetworkArmResourceId: {
        serializedName: "virtualNetworkArmResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkSubnetUsageResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkSubnetUsageResult",
    modelProperties: {
      delegatedSubnetsUsage: {
        serializedName: "delegatedSubnetsUsage",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DelegatedSubnetUsage"
            }
          }
        }
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DelegatedSubnetUsage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DelegatedSubnetUsage",
    modelProperties: {
      subnetName: {
        serializedName: "subnetName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      usage: {
        serializedName: "usage",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BackupRequestBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupRequestBase",
    modelProperties: {
      backupSettings: {
        serializedName: "backupSettings",
        type: {
          name: "Composite",
          className: "BackupSettings"
        }
      }
    }
  }
};

export const BackupSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupSettings",
    modelProperties: {
      backupName: {
        serializedName: "backupName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LtrPreBackupResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LtrPreBackupResponse",
    modelProperties: {
      numberOfContainers: {
        serializedName: "properties.numberOfContainers",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BackupStoreDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupStoreDetails",
    modelProperties: {
      sasUriList: {
        serializedName: "sasUriList",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const LtrBackupResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LtrBackupResponse",
    modelProperties: {
      datasourceSizeInBytes: {
        serializedName: "properties.datasourceSizeInBytes",
        type: {
          name: "Number"
        }
      },
      dataTransferredInBytes: {
        serializedName: "properties.dataTransferredInBytes",
        type: {
          name: "Number"
        }
      },
      backupName: {
        serializedName: "properties.backupName",
        type: {
          name: "String"
        }
      },
      backupMetadata: {
        serializedName: "properties.backupMetadata",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "properties.endTime",
        type: {
          name: "DateTime"
        }
      },
      percentComplete: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "properties.percentComplete",
        type: {
          name: "Number"
        }
      },
      errorCode: {
        serializedName: "properties.errorCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "properties.errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LtrServerBackupOperationList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LtrServerBackupOperationList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LtrServerBackupOperation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageTierCapability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageTierCapability",
    modelProperties: {
      ...CapabilityBase.type.modelProperties,
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      iops: {
        serializedName: "iops",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const StorageMbCapability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageMbCapability",
    modelProperties: {
      ...CapabilityBase.type.modelProperties,
      supportedIops: {
        serializedName: "supportedIops",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      storageSizeMb: {
        serializedName: "storageSizeMb",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      defaultIopsTier: {
        serializedName: "defaultIopsTier",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      supportedIopsTiers: {
        serializedName: "supportedIopsTiers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageTierCapability"
            }
          }
        }
      }
    }
  }
};

export const StorageEditionCapability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageEditionCapability",
    modelProperties: {
      ...CapabilityBase.type.modelProperties,
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      defaultStorageSizeMb: {
        serializedName: "defaultStorageSizeMb",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      supportedStorageMb: {
        serializedName: "supportedStorageMb",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageMbCapability"
            }
          }
        }
      }
    }
  }
};

export const ServerSkuCapability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerSkuCapability",
    modelProperties: {
      ...CapabilityBase.type.modelProperties,
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vCores: {
        serializedName: "vCores",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      supportedIops: {
        serializedName: "supportedIops",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      supportedMemoryPerVcoreMb: {
        serializedName: "supportedMemoryPerVcoreMb",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      supportedZones: {
        serializedName: "supportedZones",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      supportedHaMode: {
        serializedName: "supportedHaMode",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const FlexibleServerEditionCapability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FlexibleServerEditionCapability",
    modelProperties: {
      ...CapabilityBase.type.modelProperties,
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      defaultSkuName: {
        serializedName: "defaultSkuName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      supportedStorageEditions: {
        serializedName: "supportedStorageEditions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageEditionCapability"
            }
          }
        }
      },
      supportedServerSkus: {
        serializedName: "supportedServerSkus",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerSkuCapability"
            }
          }
        }
      }
    }
  }
};

export const ServerVersionCapability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerVersionCapability",
    modelProperties: {
      ...CapabilityBase.type.modelProperties,
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      supportedVersionsToUpgrade: {
        serializedName: "supportedVersionsToUpgrade",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const FastProvisioningEditionCapability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FastProvisioningEditionCapability",
    modelProperties: {
      ...CapabilityBase.type.modelProperties,
      supportedTier: {
        serializedName: "supportedTier",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      supportedSku: {
        serializedName: "supportedSku",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      supportedStorageGb: {
        serializedName: "supportedStorageGb",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      supportedServerVersions: {
        serializedName: "supportedServerVersions",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serverCount: {
        serializedName: "serverCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const FlexibleServerCapability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FlexibleServerCapability",
    modelProperties: {
      ...CapabilityBase.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      supportedServerEditions: {
        serializedName: "supportedServerEditions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FlexibleServerEditionCapability"
            }
          }
        }
      },
      supportedServerVersions: {
        serializedName: "supportedServerVersions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerVersionCapability"
            }
          }
        }
      },
      fastProvisioningSupported: {
        serializedName: "fastProvisioningSupported",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      supportedFastProvisioningEditions: {
        serializedName: "supportedFastProvisioningEditions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FastProvisioningEditionCapability"
            }
          }
        }
      },
      geoBackupSupported: {
        serializedName: "geoBackupSupported",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      zoneRedundantHaSupported: {
        serializedName: "zoneRedundantHaSupported",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      zoneRedundantHaAndGeoBackupSupported: {
        serializedName: "zoneRedundantHaAndGeoBackupSupported",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storageAutoGrowthSupported: {
        serializedName: "storageAutoGrowthSupported",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      onlineResizeSupported: {
        serializedName: "onlineResizeSupported",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      restricted: {
        serializedName: "restricted",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NameAvailability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NameAvailability",
    modelProperties: {
      ...CheckNameAvailabilityResponse.type.modelProperties,
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LtrPreBackupRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LtrPreBackupRequest",
    modelProperties: {
      ...BackupRequestBase.type.modelProperties
    }
  }
};

export const LtrBackupRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LtrBackupRequest",
    modelProperties: {
      ...BackupRequestBase.type.modelProperties,
      targetDetails: {
        serializedName: "targetDetails",
        type: {
          name: "Composite",
          className: "BackupStoreDetails"
        }
      }
    }
  }
};

export const ActiveDirectoryAdministrator: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ActiveDirectoryAdministrator",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      principalType: {
        serializedName: "properties.principalType",
        type: {
          name: "String"
        }
      },
      principalName: {
        serializedName: "properties.principalName",
        type: {
          name: "String"
        }
      },
      objectId: {
        serializedName: "properties.objectId",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerBackup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerBackup",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      backupType: {
        serializedName: "properties.backupType",
        type: {
          name: "String"
        }
      },
      completedTime: {
        serializedName: "properties.completedTime",
        type: {
          name: "DateTime"
        }
      },
      source: {
        serializedName: "properties.source",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Configuration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Configuration",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      value: {
        serializedName: "properties.value",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      defaultValue: {
        serializedName: "properties.defaultValue",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataType: {
        serializedName: "properties.dataType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      allowedValues: {
        serializedName: "properties.allowedValues",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "properties.source",
        type: {
          name: "String"
        }
      },
      isDynamicConfig: {
        serializedName: "properties.isDynamicConfig",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      isReadOnly: {
        serializedName: "properties.isReadOnly",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      isConfigPendingRestart: {
        serializedName: "properties.isConfigPendingRestart",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      unit: {
        serializedName: "properties.unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      documentationLink: {
        serializedName: "properties.documentationLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Database: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Database",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      charset: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z]+\\w*$")
        },
        serializedName: "properties.charset",
        type: {
          name: "String"
        }
      },
      collation: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z\\-]+([. ]|\\w)*$")
        },
        serializedName: "properties.collation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirewallRule",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      startIpAddress: {
        constraints: {
          Pattern: new RegExp(
            "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
          )
        },
        serializedName: "properties.startIpAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        constraints: {
          Pattern: new RegExp(
            "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
          )
        },
        serializedName: "properties.endIpAddress",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LogFile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogFile",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      createdTime: {
        serializedName: "properties.createdTime",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedTime: {
        serializedName: "properties.lastModifiedTime",
        type: {
          name: "DateTime"
        }
      },
      sizeInKb: {
        serializedName: "properties.sizeInKb",
        type: {
          name: "Number"
        }
      },
      typePropertiesType: {
        serializedName: "properties.type",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "properties.url",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LtrServerBackupOperation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LtrServerBackupOperation",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      datasourceSizeInBytes: {
        serializedName: "properties.datasourceSizeInBytes",
        type: {
          name: "Number"
        }
      },
      dataTransferredInBytes: {
        serializedName: "properties.dataTransferredInBytes",
        type: {
          name: "Number"
        }
      },
      backupName: {
        serializedName: "properties.backupName",
        type: {
          name: "String"
        }
      },
      backupMetadata: {
        serializedName: "properties.backupMetadata",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "properties.endTime",
        type: {
          name: "DateTime"
        }
      },
      percentComplete: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "properties.percentComplete",
        type: {
          name: "Number"
        }
      },
      errorCode: {
        serializedName: "properties.errorCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "properties.errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Server: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Server",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "UserAssignedIdentity"
        }
      },
      administratorLogin: {
        serializedName: "properties.administratorLogin",
        type: {
          name: "String"
        }
      },
      administratorLoginPassword: {
        serializedName: "properties.administratorLoginPassword",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "String"
        }
      },
      minorVersion: {
        serializedName: "properties.minorVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fullyQualifiedDomainName: {
        serializedName: "properties.fullyQualifiedDomainName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storage: {
        serializedName: "properties.storage",
        type: {
          name: "Composite",
          className: "Storage"
        }
      },
      authConfig: {
        serializedName: "properties.authConfig",
        type: {
          name: "Composite",
          className: "AuthConfig"
        }
      },
      dataEncryption: {
        serializedName: "properties.dataEncryption",
        type: {
          name: "Composite",
          className: "DataEncryption"
        }
      },
      backup: {
        serializedName: "properties.backup",
        type: {
          name: "Composite",
          className: "Backup"
        }
      },
      network: {
        serializedName: "properties.network",
        type: {
          name: "Composite",
          className: "Network"
        }
      },
      highAvailability: {
        serializedName: "properties.highAvailability",
        type: {
          name: "Composite",
          className: "HighAvailability"
        }
      },
      maintenanceWindow: {
        serializedName: "properties.maintenanceWindow",
        type: {
          name: "Composite",
          className: "MaintenanceWindow"
        }
      },
      sourceServerResourceId: {
        serializedName: "properties.sourceServerResourceId",
        type: {
          name: "String"
        }
      },
      pointInTimeUTC: {
        serializedName: "properties.pointInTimeUTC",
        type: {
          name: "DateTime"
        }
      },
      availabilityZone: {
        defaultValue: "",
        serializedName: "properties.availabilityZone",
        type: {
          name: "String"
        }
      },
      replicationRole: {
        serializedName: "properties.replicationRole",
        type: {
          name: "String"
        }
      },
      replicaCapacity: {
        serializedName: "properties.replicaCapacity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      createMode: {
        serializedName: "properties.createMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MigrationResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MigrationResource",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      migrationId: {
        serializedName: "properties.migrationId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      currentStatus: {
        serializedName: "properties.currentStatus",
        type: {
          name: "Composite",
          className: "MigrationStatus"
        }
      },
      migrationMode: {
        serializedName: "properties.migrationMode",
        type: {
          name: "String"
        }
      },
      sourceDbServerMetadata: {
        serializedName: "properties.sourceDbServerMetadata",
        type: {
          name: "Composite",
          className: "DbServerMetadata"
        }
      },
      targetDbServerMetadata: {
        serializedName: "properties.targetDbServerMetadata",
        type: {
          name: "Composite",
          className: "DbServerMetadata"
        }
      },
      sourceDbServerResourceId: {
        serializedName: "properties.sourceDbServerResourceId",
        type: {
          name: "String"
        }
      },
      sourceDbServerFullyQualifiedDomainName: {
        serializedName: "properties.sourceDbServerFullyQualifiedDomainName",
        type: {
          name: "String"
        }
      },
      targetDbServerResourceId: {
        serializedName: "properties.targetDbServerResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetDbServerFullyQualifiedDomainName: {
        serializedName: "properties.targetDbServerFullyQualifiedDomainName",
        type: {
          name: "String"
        }
      },
      secretParameters: {
        serializedName: "properties.secretParameters",
        type: {
          name: "Composite",
          className: "MigrationSecretParameters"
        }
      },
      dbsToMigrate: {
        constraints: {
          MaxItems: 50
        },
        serializedName: "properties.dbsToMigrate",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      setupLogicalReplicationOnSourceDbIfNeeded: {
        serializedName: "properties.setupLogicalReplicationOnSourceDbIfNeeded",
        type: {
          name: "String"
        }
      },
      overwriteDbsInTarget: {
        serializedName: "properties.overwriteDbsInTarget",
        type: {
          name: "String"
        }
      },
      migrationWindowStartTimeInUtc: {
        serializedName: "properties.migrationWindowStartTimeInUtc",
        type: {
          name: "DateTime"
        }
      },
      migrationWindowEndTimeInUtc: {
        serializedName: "properties.migrationWindowEndTimeInUtc",
        type: {
          name: "DateTime"
        }
      },
      startDataMigration: {
        serializedName: "properties.startDataMigration",
        type: {
          name: "String"
        }
      },
      triggerCutover: {
        serializedName: "properties.triggerCutover",
        type: {
          name: "String"
        }
      },
      dbsToTriggerCutoverOn: {
        serializedName: "properties.dbsToTriggerCutoverOn",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      cancel: {
        serializedName: "properties.cancel",
        type: {
          name: "String"
        }
      },
      dbsToCancelMigrationOn: {
        serializedName: "properties.dbsToCancelMigrationOn",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AdministratorsCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AdministratorsCreateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AdministratorsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AdministratorsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConfigurationsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationsUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConfigurationsPutHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationsPutHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabasesCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabasesCreateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabasesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabasesDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallRulesCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirewallRulesCreateOrUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallRulesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirewallRulesDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServersCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServersCreateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServersUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServersUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServersDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServersDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServersRestartHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServersRestartHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServersStartHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServersStartHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServersStopHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServersStopHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FlexibleServerTriggerLtrPreBackupHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FlexibleServerTriggerLtrPreBackupHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FlexibleServerTriggerLtrPreBackupExceptionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FlexibleServerTriggerLtrPreBackupExceptionHeaders",
    modelProperties: {
      xMsErrorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      },
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FlexibleServerStartLtrBackupHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FlexibleServerStartLtrBackupHeaders",
    modelProperties: {
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FlexibleServerStartLtrBackupExceptionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FlexibleServerStartLtrBackupExceptionHeaders",
    modelProperties: {
      xMsErrorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      },
      xMsRequestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};
