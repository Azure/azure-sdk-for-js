/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const ServerForCreate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerForCreate",
    modelProperties: {
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ResourceIdentity"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ServerPropertiesForCreate"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ResourceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      capacity: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      },
      size: {
        serializedName: "size",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerPropertiesForCreate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerPropertiesForCreate",
    uberParent: "ServerPropertiesForCreate",
    polymorphicDiscriminator: {
      serializedName: "createMode",
      clientName: "createMode"
    },
    modelProperties: {
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      sslEnforcement: {
        serializedName: "sslEnforcement",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      minimalTlsVersion: {
        serializedName: "minimalTlsVersion",
        type: {
          name: "String"
        }
      },
      infrastructureEncryption: {
        serializedName: "infrastructureEncryption",
        type: {
          name: "String"
        }
      },
      publicNetworkAccess: {
        serializedName: "publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      storageProfile: {
        serializedName: "storageProfile",
        type: {
          name: "Composite",
          className: "StorageProfile"
        }
      },
      createMode: {
        serializedName: "createMode",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageProfile",
    modelProperties: {
      backupRetentionDays: {
        serializedName: "backupRetentionDays",
        type: {
          name: "Number"
        }
      },
      geoRedundantBackup: {
        serializedName: "geoRedundantBackup",
        type: {
          name: "String"
        }
      },
      storageMB: {
        serializedName: "storageMB",
        type: {
          name: "Number"
        }
      },
      storageAutogrow: {
        serializedName: "storageAutogrow",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerPrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerPrivateEndpointConnection",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ServerPrivateEndpointConnectionProperties"
        }
      }
    }
  }
};

export const ServerPrivateEndpointConnectionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerPrivateEndpointConnectionProperties",
    modelProperties: {
      privateEndpoint: {
        serializedName: "privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpointProperty"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "ServerPrivateLinkServiceConnectionStateProperty"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointProperty",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerPrivateLinkServiceConnectionStateProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerPrivateLinkServiceConnectionStateProperty",
    modelProperties: {
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        required: true,
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorResponse"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorResponse"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const ServerUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerUpdateParameters",
    modelProperties: {
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ResourceIdentity"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      storageProfile: {
        serializedName: "properties.storageProfile",
        type: {
          name: "Composite",
          className: "StorageProfile"
        }
      },
      administratorLoginPassword: {
        serializedName: "properties.administratorLoginPassword",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "String"
        }
      },
      sslEnforcement: {
        serializedName: "properties.sslEnforcement",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      minimalTlsVersion: {
        serializedName: "properties.minimalTlsVersion",
        type: {
          name: "String"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      replicationRole: {
        serializedName: "properties.replicationRole",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Server"
            }
          }
        }
      }
    }
  }
};

export const FirewallRuleListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirewallRuleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FirewallRule"
            }
          }
        }
      }
    }
  }
};

export const VirtualNetworkRuleListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkRuleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkRule"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Database"
            }
          }
        }
      }
    }
  }
};

export const ConfigurationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Configuration"
            }
          }
        }
      }
    }
  }
};

export const LogFileListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogFileListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LogFile"
            }
          }
        }
      }
    }
  }
};

export const ServerAdministratorResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerAdministratorResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerAdministratorResource"
            }
          }
        }
      }
    }
  }
};

export const PerformanceTierListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PerformanceTierListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PerformanceTierProperties"
            }
          }
        }
      }
    }
  }
};

export const PerformanceTierProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PerformanceTierProperties",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      maxBackupRetentionDays: {
        serializedName: "maxBackupRetentionDays",
        type: {
          name: "Number"
        }
      },
      minBackupRetentionDays: {
        serializedName: "minBackupRetentionDays",
        type: {
          name: "Number"
        }
      },
      maxStorageMB: {
        serializedName: "maxStorageMB",
        type: {
          name: "Number"
        }
      },
      minLargeStorageMB: {
        serializedName: "minLargeStorageMB",
        type: {
          name: "Number"
        }
      },
      maxLargeStorageMB: {
        serializedName: "maxLargeStorageMB",
        type: {
          name: "Number"
        }
      },
      minStorageMB: {
        serializedName: "minStorageMB",
        type: {
          name: "Number"
        }
      },
      serviceLevelObjectives: {
        serializedName: "serviceLevelObjectives",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PerformanceTierServiceLevelObjectives"
            }
          }
        }
      }
    }
  }
};

export const PerformanceTierServiceLevelObjectives: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PerformanceTierServiceLevelObjectives",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      edition: {
        serializedName: "edition",
        type: {
          name: "String"
        }
      },
      vCore: {
        serializedName: "vCore",
        type: {
          name: "Number"
        }
      },
      hardwareGeneration: {
        serializedName: "hardwareGeneration",
        type: {
          name: "String"
        }
      },
      maxBackupRetentionDays: {
        serializedName: "maxBackupRetentionDays",
        type: {
          name: "Number"
        }
      },
      minBackupRetentionDays: {
        serializedName: "minBackupRetentionDays",
        type: {
          name: "Number"
        }
      },
      maxStorageMB: {
        serializedName: "maxStorageMB",
        type: {
          name: "Number"
        }
      },
      minStorageMB: {
        serializedName: "minStorageMB",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const NameAvailabilityRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NameAvailabilityRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NameAvailability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NameAvailability",
    modelProperties: {
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerSecurityAlertPolicyListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerSecurityAlertPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerSecurityAlertPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionStateProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionStateProperty",
    modelProperties: {
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        required: true,
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TagsObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TagsObject",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const PrivateEndpointConnectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceProperties",
    modelProperties: {
      groupId: {
        serializedName: "groupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        serializedName: "requiredMembers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ServerKeyListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerKeyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerKey"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerPropertiesForDefaultCreate: coreClient.CompositeMapper = {
  serializedName: "Default",
  type: {
    name: "Composite",
    className: "ServerPropertiesForDefaultCreate",
    uberParent: "ServerPropertiesForCreate",
    polymorphicDiscriminator:
      ServerPropertiesForCreate.type.polymorphicDiscriminator,
    modelProperties: {
      ...ServerPropertiesForCreate.type.modelProperties,
      administratorLogin: {
        serializedName: "administratorLogin",
        required: true,
        type: {
          name: "String"
        }
      },
      administratorLoginPassword: {
        serializedName: "administratorLoginPassword",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerPropertiesForRestore: coreClient.CompositeMapper = {
  serializedName: "PointInTimeRestore",
  type: {
    name: "Composite",
    className: "ServerPropertiesForRestore",
    uberParent: "ServerPropertiesForCreate",
    polymorphicDiscriminator:
      ServerPropertiesForCreate.type.polymorphicDiscriminator,
    modelProperties: {
      ...ServerPropertiesForCreate.type.modelProperties,
      sourceServerId: {
        serializedName: "sourceServerId",
        required: true,
        type: {
          name: "String"
        }
      },
      restorePointInTime: {
        serializedName: "restorePointInTime",
        required: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ServerPropertiesForGeoRestore: coreClient.CompositeMapper = {
  serializedName: "GeoRestore",
  type: {
    name: "Composite",
    className: "ServerPropertiesForGeoRestore",
    uberParent: "ServerPropertiesForCreate",
    polymorphicDiscriminator:
      ServerPropertiesForCreate.type.polymorphicDiscriminator,
    modelProperties: {
      ...ServerPropertiesForCreate.type.modelProperties,
      sourceServerId: {
        serializedName: "sourceServerId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerPropertiesForReplica: coreClient.CompositeMapper = {
  serializedName: "Replica",
  type: {
    name: "Composite",
    className: "ServerPropertiesForReplica",
    uberParent: "ServerPropertiesForCreate",
    polymorphicDiscriminator:
      ServerPropertiesForCreate.type.polymorphicDiscriminator,
    modelProperties: {
      ...ServerPropertiesForCreate.type.modelProperties,
      sourceServerId: {
        serializedName: "sourceServerId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const Server: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Server",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ResourceIdentity"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      administratorLogin: {
        serializedName: "properties.administratorLogin",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "String"
        }
      },
      sslEnforcement: {
        serializedName: "properties.sslEnforcement",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      minimalTlsVersion: {
        serializedName: "properties.minimalTlsVersion",
        type: {
          name: "String"
        }
      },
      byokEnforcement: {
        serializedName: "properties.byokEnforcement",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      infrastructureEncryption: {
        serializedName: "properties.infrastructureEncryption",
        type: {
          name: "String"
        }
      },
      userVisibleState: {
        serializedName: "properties.userVisibleState",
        type: {
          name: "String"
        }
      },
      fullyQualifiedDomainName: {
        serializedName: "properties.fullyQualifiedDomainName",
        type: {
          name: "String"
        }
      },
      earliestRestoreDate: {
        serializedName: "properties.earliestRestoreDate",
        type: {
          name: "DateTime"
        }
      },
      storageProfile: {
        serializedName: "properties.storageProfile",
        type: {
          name: "Composite",
          className: "StorageProfile"
        }
      },
      replicationRole: {
        serializedName: "properties.replicationRole",
        type: {
          name: "String"
        }
      },
      masterServerId: {
        serializedName: "properties.masterServerId",
        type: {
          name: "String"
        }
      },
      replicaCapacity: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "properties.replicaCapacity",
        type: {
          name: "Number"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerPrivateEndpointConnection"
            }
          }
        }
      }
    }
  }
};

export const FirewallRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirewallRule",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      startIpAddress: {
        constraints: {
          Pattern: new RegExp(
            "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
          )
        },
        serializedName: "properties.startIpAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        constraints: {
          Pattern: new RegExp(
            "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
          )
        },
        serializedName: "properties.endIpAddress",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkRule",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      virtualNetworkSubnetId: {
        serializedName: "properties.virtualNetworkSubnetId",
        type: {
          name: "String"
        }
      },
      ignoreMissingVnetServiceEndpoint: {
        serializedName: "properties.ignoreMissingVnetServiceEndpoint",
        type: {
          name: "Boolean"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Database: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Database",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      charset: {
        serializedName: "properties.charset",
        type: {
          name: "String"
        }
      },
      collation: {
        serializedName: "properties.collation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Configuration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Configuration",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      value: {
        serializedName: "properties.value",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      defaultValue: {
        serializedName: "properties.defaultValue",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataType: {
        serializedName: "properties.dataType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      allowedValues: {
        serializedName: "properties.allowedValues",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "properties.source",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LogFile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogFile",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      sizeInKB: {
        serializedName: "properties.sizeInKB",
        type: {
          name: "Number"
        }
      },
      createdTime: {
        serializedName: "properties.createdTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastModifiedTime: {
        serializedName: "properties.lastModifiedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      typePropertiesType: {
        serializedName: "properties.type",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "properties.url",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerAdministratorResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerAdministratorResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      administratorType: {
        defaultValue: "ActiveDirectory",
        isConstant: true,
        serializedName: "properties.administratorType",
        type: {
          name: "String"
        }
      },
      login: {
        serializedName: "properties.login",
        type: {
          name: "String"
        }
      },
      sid: {
        serializedName: "properties.sid",
        type: {
          name: "Uuid"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const RecoverableServerResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoverableServerResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      lastAvailableBackupDateTime: {
        serializedName: "properties.lastAvailableBackupDateTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceLevelObjective: {
        serializedName: "properties.serviceLevelObjective",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      edition: {
        serializedName: "properties.edition",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vCore: {
        serializedName: "properties.vCore",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      hardwareGeneration: {
        serializedName: "properties.hardwareGeneration",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerSecurityAlertPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerSecurityAlertPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      state: {
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      disabledAlerts: {
        serializedName: "properties.disabledAlerts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      emailAddresses: {
        serializedName: "properties.emailAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      emailAccountAdmins: {
        serializedName: "properties.emailAccountAdmins",
        type: {
          name: "Boolean"
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpointProperty"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionStateProperty"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PrivateLinkResourceProperties"
        }
      }
    }
  }
};

export const ServerKey: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerKey",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serverKeyType: {
        serializedName: "properties.serverKeyType",
        type: {
          name: "String"
        }
      },
      uri: {
        serializedName: "properties.uri",
        type: {
          name: "String"
        }
      },
      creationDate: {
        serializedName: "properties.creationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export let discriminators = {
  ServerPropertiesForCreate: ServerPropertiesForCreate,
  "ServerPropertiesForCreate.Default": ServerPropertiesForDefaultCreate,
  "ServerPropertiesForCreate.PointInTimeRestore": ServerPropertiesForRestore,
  "ServerPropertiesForCreate.GeoRestore": ServerPropertiesForGeoRestore,
  "ServerPropertiesForCreate.Replica": ServerPropertiesForReplica
};
