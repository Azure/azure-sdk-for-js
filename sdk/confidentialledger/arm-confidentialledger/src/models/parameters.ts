/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  CheckNameAvailabilityRequest as CheckNameAvailabilityRequestMapper,
  ConfidentialLedger as ConfidentialLedgerMapper,
  ConfidentialLedgerBackup as ConfidentialLedgerBackupMapper,
  ConfidentialLedgerRestore as ConfidentialLedgerRestoreMapper,
  ManagedCCF as ManagedCCFMapper,
  ManagedCCFBackup as ManagedCCFBackupMapper,
  ManagedCCFRestore as ManagedCCFRestoreMapper,
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2023-06-28-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const nameAvailabilityRequest: OperationParameter = {
  parameterPath: "nameAvailabilityRequest",
  mapper: CheckNameAvailabilityRequestMapper,
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    constraints: {
      MinLength: 1,
    },
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1,
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const ledgerName: OperationURLParameter = {
  parameterPath: "ledgerName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9]"),
    },
    serializedName: "ledgerName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const confidentialLedger: OperationParameter = {
  parameterPath: "confidentialLedger",
  mapper: ConfidentialLedgerMapper,
};

export const filter: OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String",
    },
  },
};

export const confidentialLedger1: OperationParameter = {
  parameterPath: "confidentialLedger",
  mapper: ConfidentialLedgerBackupMapper,
};

export const confidentialLedger2: OperationParameter = {
  parameterPath: "confidentialLedger",
  mapper: ConfidentialLedgerRestoreMapper,
};

export const appName: OperationURLParameter = {
  parameterPath: "appName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9]"),
    },
    serializedName: "appName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const managedCCF: OperationParameter = {
  parameterPath: "managedCCF",
  mapper: ManagedCCFMapper,
};

export const managedCCF1: OperationParameter = {
  parameterPath: "managedCCF",
  mapper: ManagedCCFBackupMapper,
};

export const managedCCF2: OperationParameter = {
  parameterPath: "managedCCF",
  mapper: ManagedCCFRestoreMapper,
};
