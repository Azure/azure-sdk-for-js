/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** List containing this Resource Provider's available operations. */
export interface ResourceProviderOperationList {
  /**
   * Resource provider operations list.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: ResourceProviderOperationDefinition[];
  /**
   * The URI that can be used to request the next page for list of Azure operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Describes the Resource Provider Operation. */
export interface ResourceProviderOperationDefinition {
  /** Resource provider operation name. */
  name?: string;
  /** Indicates whether the operation is data action or not. */
  isDataAction?: boolean;
  /** Details about the operations */
  display?: ResourceProviderOperationDisplay;
}

/** Describes the properties of the Operation. */
export interface ResourceProviderOperationDisplay {
  /** Name of the resource provider. */
  provider?: string;
  /** Name of the resource type. */
  resource?: string;
  /** Name of the resource provider operation. */
  operation?: string;
  /** Description of the resource provider operation. */
  description?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** The check availability request body. */
export interface CheckNameAvailabilityRequest {
  /** The name of the resource for which availability needs to be checked. */
  name?: string;
  /** The resource type. */
  type?: string;
}

/** The check availability result. */
export interface CheckNameAvailabilityResponse {
  /** Indicates if the resource name is available. */
  nameAvailable?: boolean;
  /** The reason why the given name is not available. */
  reason?: CheckNameAvailabilityReason;
  /** Detailed reason why the given name is available. */
  message?: string;
}

/** Additional Confidential Ledger properties. */
export interface LedgerProperties {
  /**
   * Unique name for the Confidential Ledger.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ledgerName?: string;
  /**
   * Endpoint for calling Ledger Service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ledgerUri?: string;
  /**
   * Endpoint for accessing network identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly identityServiceUri?: string;
  /**
   * Internal namespace for the Ledger
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ledgerInternalNamespace?: string;
  /** Type of Confidential Ledger */
  ledgerType?: LedgerType;
  /**
   * Provisioning state of Ledger Resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Array of all AAD based Security Principals. */
  aadBasedSecurityPrincipals?: AADBasedSecurityPrincipal[];
  /** Array of all cert based Security Principals. */
  certBasedSecurityPrincipals?: CertBasedSecurityPrincipal[];
}

/** AAD based security principal with associated Ledger RoleName */
export interface AADBasedSecurityPrincipal {
  /** UUID/GUID based Principal Id of the Security Principal */
  principalId?: string;
  /** UUID/GUID based Tenant Id of the Security Principal */
  tenantId?: string;
  /** LedgerRole associated with the Security Principal of Ledger */
  ledgerRoleName?: LedgerRoleName;
}

/** Cert based security principal with Ledger RoleName */
export interface CertBasedSecurityPrincipal {
  /** Public key of the user cert (.pem or .cer) */
  cert?: string;
  /** LedgerRole associated with the Security Principal of Ledger */
  ledgerRoleName?: LedgerRoleName;
}

/** An Azure resource. */
export interface Resource {
  /**
   * Name of the Resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Fully qualified resource Id for the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Metadata pertaining to creation and last modification of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Location of the ARM Resource */
export interface ResourceLocation {
  /** The Azure location where the Confidential Ledger is running. */
  location?: string;
}

/** Tags for Confidential Ledger Resource */
export interface Tags {
  /** Additional tags for Confidential Ledger */
  tags?: { [propertyName: string]: string };
}

/** Object that includes an array of Confidential Ledgers and a possible link for next set. */
export interface ConfidentialLedgerList {
  /** List of Confidential Ledgers */
  value?: ConfidentialLedger[];
  /** The URL the client should use to fetch the next page (per server side paging). */
  nextLink?: string;
}

/** Confidential Ledger. Contains the properties of Confidential Ledger Resource. */
export interface ConfidentialLedger extends Resource, ResourceLocation, Tags {
  /** Properties of Confidential Ledger Resource. */
  properties?: LedgerProperties;
}

/** Known values of {@link CheckNameAvailabilityReason} that the service accepts. */
export enum KnownCheckNameAvailabilityReason {
  /** Invalid */
  Invalid = "Invalid",
  /** AlreadyExists */
  AlreadyExists = "AlreadyExists"
}

/**
 * Defines values for CheckNameAvailabilityReason. \
 * {@link KnownCheckNameAvailabilityReason} can be used interchangeably with CheckNameAvailabilityReason,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **AlreadyExists**
 */
export type CheckNameAvailabilityReason = string;

/** Known values of {@link LedgerType} that the service accepts. */
export enum KnownLedgerType {
  /** Unknown */
  Unknown = "Unknown",
  /** Public */
  Public = "Public",
  /** Private */
  Private = "Private"
}

/**
 * Defines values for LedgerType. \
 * {@link KnownLedgerType} can be used interchangeably with LedgerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Public** \
 * **Private**
 */
export type LedgerType = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Unknown */
  Unknown = "Unknown",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Creating */
  Creating = "Creating",
  /** Deleting */
  Deleting = "Deleting",
  /** Updating */
  Updating = "Updating"
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Creating** \
 * **Deleting** \
 * **Updating**
 */
export type ProvisioningState = string;

/** Known values of {@link LedgerRoleName} that the service accepts. */
export enum KnownLedgerRoleName {
  /** Reader */
  Reader = "Reader",
  /** Contributor */
  Contributor = "Contributor",
  /** Administrator */
  Administrator = "Administrator"
}

/**
 * Defines values for LedgerRoleName. \
 * {@link KnownLedgerRoleName} can be used interchangeably with LedgerRoleName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Reader** \
 * **Contributor** \
 * **Administrator**
 */
export type LedgerRoleName = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = ResourceProviderOperationList;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = ResourceProviderOperationList;

/** Optional parameters. */
export interface CheckNameAvailabilityOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkNameAvailability operation. */
export type CheckNameAvailabilityOperationResponse = CheckNameAvailabilityResponse;

/** Optional parameters. */
export interface LedgerGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type LedgerGetResponse = ConfidentialLedger;

/** Optional parameters. */
export interface LedgerDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface LedgerCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type LedgerCreateResponse = ConfidentialLedger;

/** Optional parameters. */
export interface LedgerUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type LedgerUpdateResponse = ConfidentialLedger;

/** Optional parameters. */
export interface LedgerListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the list operation. eg. $filter=ledgerType eq 'Public' */
  filter?: string;
}

/** Contains response data for the listByResourceGroup operation. */
export type LedgerListByResourceGroupResponse = ConfidentialLedgerList;

/** Optional parameters. */
export interface LedgerListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the list operation. eg. $filter=ledgerType eq 'Public' */
  filter?: string;
}

/** Contains response data for the listBySubscription operation. */
export type LedgerListBySubscriptionResponse = ConfidentialLedgerList;

/** Optional parameters. */
export interface LedgerListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type LedgerListByResourceGroupNextResponse = ConfidentialLedgerList;

/** Optional parameters. */
export interface LedgerListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type LedgerListBySubscriptionNextResponse = ConfidentialLedgerList;

/** Optional parameters. */
export interface ConfidentialLedgerClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
