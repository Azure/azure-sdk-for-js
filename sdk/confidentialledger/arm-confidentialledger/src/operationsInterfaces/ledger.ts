/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  ConfidentialLedger,
  LedgerListByResourceGroupOptionalParams,
  LedgerListBySubscriptionOptionalParams,
  LedgerGetOptionalParams,
  LedgerGetResponse,
  LedgerDeleteOptionalParams,
  LedgerCreateOptionalParams,
  LedgerCreateResponse,
  LedgerUpdateOptionalParams,
  LedgerUpdateResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Ledger. */
export interface Ledger {
  /**
   * Retrieves the properties of all Confidential Ledgers.
   * @param resourceGroupName The name of the resource group.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: LedgerListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<ConfidentialLedger>;
  /**
   * Retrieves the properties of all Confidential Ledgers.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: LedgerListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<ConfidentialLedger>;
  /**
   * Retrieves the properties of a Confidential Ledger.
   * @param resourceGroupName The name of the resource group.
   * @param ledgerName Name of the Confidential Ledger
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    ledgerName: string,
    options?: LedgerGetOptionalParams
  ): Promise<LedgerGetResponse>;
  /**
   * Deletes an existing Confidential Ledger.
   * @param resourceGroupName The name of the resource group.
   * @param ledgerName Name of the Confidential Ledger
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    ledgerName: string,
    options?: LedgerDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes an existing Confidential Ledger.
   * @param resourceGroupName The name of the resource group.
   * @param ledgerName Name of the Confidential Ledger
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    ledgerName: string,
    options?: LedgerDeleteOptionalParams
  ): Promise<void>;
  /**
   * Creates a  Confidential Ledger with the specified ledger parameters.
   * @param resourceGroupName The name of the resource group.
   * @param ledgerName Name of the Confidential Ledger
   * @param confidentialLedger Confidential Ledger Create Request Body
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    ledgerName: string,
    confidentialLedger: ConfidentialLedger,
    options?: LedgerCreateOptionalParams
  ): Promise<
    PollerLike<PollOperationState<LedgerCreateResponse>, LedgerCreateResponse>
  >;
  /**
   * Creates a  Confidential Ledger with the specified ledger parameters.
   * @param resourceGroupName The name of the resource group.
   * @param ledgerName Name of the Confidential Ledger
   * @param confidentialLedger Confidential Ledger Create Request Body
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    ledgerName: string,
    confidentialLedger: ConfidentialLedger,
    options?: LedgerCreateOptionalParams
  ): Promise<LedgerCreateResponse>;
  /**
   * Updates properties of Confidential Ledger
   * @param resourceGroupName The name of the resource group.
   * @param ledgerName Name of the Confidential Ledger
   * @param confidentialLedger Confidential Ledger request body for Updating Ledger
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    ledgerName: string,
    confidentialLedger: ConfidentialLedger,
    options?: LedgerUpdateOptionalParams
  ): Promise<
    PollerLike<PollOperationState<LedgerUpdateResponse>, LedgerUpdateResponse>
  >;
  /**
   * Updates properties of Confidential Ledger
   * @param resourceGroupName The name of the resource group.
   * @param ledgerName Name of the Confidential Ledger
   * @param confidentialLedger Confidential Ledger request body for Updating Ledger
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    ledgerName: string,
    confidentialLedger: ConfidentialLedger,
    options?: LedgerUpdateOptionalParams
  ): Promise<LedgerUpdateResponse>;
}
