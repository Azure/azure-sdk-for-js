/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  SubscriptionFeatureRegistration,
  SubscriptionFeatureRegistrationsListBySubscriptionOptionalParams,
  SubscriptionFeatureRegistrationsListAllBySubscriptionOptionalParams,
  SubscriptionFeatureRegistrationsGetOptionalParams,
  SubscriptionFeatureRegistrationsGetResponse,
  SubscriptionFeatureRegistrationsCreateOrUpdateOptionalParams,
  SubscriptionFeatureRegistrationsCreateOrUpdateResponse,
  SubscriptionFeatureRegistrationsDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a SubscriptionFeatureRegistrations. */
export interface SubscriptionFeatureRegistrations {
  /**
   * Returns subscription feature registrations for given subscription and provider namespace.
   * @param providerNamespace The provider namespace.
   * @param options The options parameters.
   */
  listBySubscription(
    providerNamespace: string,
    options?: SubscriptionFeatureRegistrationsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<SubscriptionFeatureRegistration>;
  /**
   * Returns subscription feature registrations for given subscription.
   * @param options The options parameters.
   */
  listAllBySubscription(
    options?: SubscriptionFeatureRegistrationsListAllBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<SubscriptionFeatureRegistration>;
  /**
   * Returns a feature registration
   * @param providerNamespace The provider namespace.
   * @param featureName The feature name.
   * @param options The options parameters.
   */
  get(
    providerNamespace: string,
    featureName: string,
    options?: SubscriptionFeatureRegistrationsGetOptionalParams
  ): Promise<SubscriptionFeatureRegistrationsGetResponse>;
  /**
   * Create or update a feature registration.
   * @param providerNamespace The provider namespace.
   * @param featureName The feature name.
   * @param options The options parameters.
   */
  createOrUpdate(
    providerNamespace: string,
    featureName: string,
    options?: SubscriptionFeatureRegistrationsCreateOrUpdateOptionalParams
  ): Promise<SubscriptionFeatureRegistrationsCreateOrUpdateResponse>;
  /**
   * Deletes a feature registration
   * @param providerNamespace The provider namespace.
   * @param featureName The feature name.
   * @param options The options parameters.
   */
  delete(
    providerNamespace: string,
    featureName: string,
    options?: SubscriptionFeatureRegistrationsDeleteOptionalParams
  ): Promise<void>;
}
