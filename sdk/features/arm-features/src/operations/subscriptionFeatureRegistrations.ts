/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { SubscriptionFeatureRegistrations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { FeatureClient } from "../featureClient";
import {
  SubscriptionFeatureRegistration,
  SubscriptionFeatureRegistrationsListBySubscriptionNextOptionalParams,
  SubscriptionFeatureRegistrationsListBySubscriptionOptionalParams,
  SubscriptionFeatureRegistrationsListBySubscriptionResponse,
  SubscriptionFeatureRegistrationsListAllBySubscriptionNextOptionalParams,
  SubscriptionFeatureRegistrationsListAllBySubscriptionOptionalParams,
  SubscriptionFeatureRegistrationsListAllBySubscriptionResponse,
  SubscriptionFeatureRegistrationsGetOptionalParams,
  SubscriptionFeatureRegistrationsGetResponse,
  SubscriptionFeatureRegistrationsCreateOrUpdateOptionalParams,
  SubscriptionFeatureRegistrationsCreateOrUpdateResponse,
  SubscriptionFeatureRegistrationsDeleteOptionalParams,
  SubscriptionFeatureRegistrationsListBySubscriptionNextResponse,
  SubscriptionFeatureRegistrationsListAllBySubscriptionNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SubscriptionFeatureRegistrations operations. */
export class SubscriptionFeatureRegistrationsImpl
  implements SubscriptionFeatureRegistrations {
  private readonly client: FeatureClient;

  /**
   * Initialize a new instance of the class SubscriptionFeatureRegistrations class.
   * @param client Reference to the service client
   */
  constructor(client: FeatureClient) {
    this.client = client;
  }

  /**
   * Returns subscription feature registrations for given subscription and provider namespace.
   * @param providerNamespace The provider namespace.
   * @param options The options parameters.
   */
  public listBySubscription(
    providerNamespace: string,
    options?: SubscriptionFeatureRegistrationsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<SubscriptionFeatureRegistration> {
    const iter = this.listBySubscriptionPagingAll(providerNamespace, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(
          providerNamespace,
          options,
          settings
        );
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    providerNamespace: string,
    options?: SubscriptionFeatureRegistrationsListBySubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<SubscriptionFeatureRegistration[]> {
    let result: SubscriptionFeatureRegistrationsListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(providerNamespace, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(
        providerNamespace,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    providerNamespace: string,
    options?: SubscriptionFeatureRegistrationsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<SubscriptionFeatureRegistration> {
    for await (const page of this.listBySubscriptionPagingPage(
      providerNamespace,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Returns subscription feature registrations for given subscription.
   * @param options The options parameters.
   */
  public listAllBySubscription(
    options?: SubscriptionFeatureRegistrationsListAllBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<SubscriptionFeatureRegistration> {
    const iter = this.listAllBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listAllBySubscriptionPagingPage(options, settings);
      }
    };
  }

  private async *listAllBySubscriptionPagingPage(
    options?: SubscriptionFeatureRegistrationsListAllBySubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<SubscriptionFeatureRegistration[]> {
    let result: SubscriptionFeatureRegistrationsListAllBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listAllBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listAllBySubscriptionNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listAllBySubscriptionPagingAll(
    options?: SubscriptionFeatureRegistrationsListAllBySubscriptionOptionalParams
  ): AsyncIterableIterator<SubscriptionFeatureRegistration> {
    for await (const page of this.listAllBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Returns a feature registration
   * @param providerNamespace The provider namespace.
   * @param featureName The feature name.
   * @param options The options parameters.
   */
  get(
    providerNamespace: string,
    featureName: string,
    options?: SubscriptionFeatureRegistrationsGetOptionalParams
  ): Promise<SubscriptionFeatureRegistrationsGetResponse> {
    return this.client.sendOperationRequest(
      { providerNamespace, featureName, options },
      getOperationSpec
    );
  }

  /**
   * Create or update a feature registration.
   * @param providerNamespace The provider namespace.
   * @param featureName The feature name.
   * @param options The options parameters.
   */
  createOrUpdate(
    providerNamespace: string,
    featureName: string,
    options?: SubscriptionFeatureRegistrationsCreateOrUpdateOptionalParams
  ): Promise<SubscriptionFeatureRegistrationsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { providerNamespace, featureName, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Deletes a feature registration
   * @param providerNamespace The provider namespace.
   * @param featureName The feature name.
   * @param options The options parameters.
   */
  delete(
    providerNamespace: string,
    featureName: string,
    options?: SubscriptionFeatureRegistrationsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { providerNamespace, featureName, options },
      deleteOperationSpec
    );
  }

  /**
   * Returns subscription feature registrations for given subscription and provider namespace.
   * @param providerNamespace The provider namespace.
   * @param options The options parameters.
   */
  private _listBySubscription(
    providerNamespace: string,
    options?: SubscriptionFeatureRegistrationsListBySubscriptionOptionalParams
  ): Promise<SubscriptionFeatureRegistrationsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { providerNamespace, options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * Returns subscription feature registrations for given subscription.
   * @param options The options parameters.
   */
  private _listAllBySubscription(
    options?: SubscriptionFeatureRegistrationsListAllBySubscriptionOptionalParams
  ): Promise<SubscriptionFeatureRegistrationsListAllBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listAllBySubscriptionOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param providerNamespace The provider namespace.
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    providerNamespace: string,
    nextLink: string,
    options?: SubscriptionFeatureRegistrationsListBySubscriptionNextOptionalParams
  ): Promise<SubscriptionFeatureRegistrationsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { providerNamespace, nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }

  /**
   * ListAllBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListAllBySubscription method.
   * @param options The options parameters.
   */
  private _listAllBySubscriptionNext(
    nextLink: string,
    options?: SubscriptionFeatureRegistrationsListAllBySubscriptionNextOptionalParams
  ): Promise<
    SubscriptionFeatureRegistrationsListAllBySubscriptionNextResponse
  > {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAllBySubscriptionNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Features/featureProviders/{providerNamespace}/subscriptionFeatureRegistrations/{featureName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionFeatureRegistration
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.featureName,
    Parameters.providerNamespace
  ],
  headerParameters: [Parameters.accept1],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Features/featureProviders/{providerNamespace}/subscriptionFeatureRegistrations/{featureName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionFeatureRegistration
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.subscriptionFeatureRegistrationType,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.featureName,
    Parameters.providerNamespace
  ],
  headerParameters: [Parameters.accept1, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Features/featureProviders/{providerNamespace}/subscriptionFeatureRegistrations/{featureName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.featureName,
    Parameters.providerNamespace
  ],
  headerParameters: [Parameters.accept1],
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Features/featureProviders/{providerNamespace}/subscriptionFeatureRegistrations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionFeatureRegistrationList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.providerNamespace
  ],
  headerParameters: [Parameters.accept1],
  serializer
};
const listAllBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Features/subscriptionFeatureRegistrations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionFeatureRegistrationList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept1],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionFeatureRegistrationList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.providerNamespace
  ],
  headerParameters: [Parameters.accept1],
  serializer
};
const listAllBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionFeatureRegistrationList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept1],
  serializer
};
