/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/subscriptionFeatureRegistrationsMappers";
import * as Parameters from "../models/parameters";
import { FeatureClientContext } from "../featureClientContext";

/** Class representing a SubscriptionFeatureRegistrations. */
export class SubscriptionFeatureRegistrations {
  private readonly client: FeatureClientContext;

  /**
   * Create a SubscriptionFeatureRegistrations.
   * @param {FeatureClientContext} client Reference to the service client.
   */
  constructor(client: FeatureClientContext) {
    this.client = client;
  }

  /**
   * Returns a feature registration
   * @param providerNamespace The provider namespace.
   * @param featureName The feature name.
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionFeatureRegistrationsGetResponse>
   */
  get(providerNamespace: string, featureName: string, options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionFeatureRegistrationsGetResponse>;
  /**
   * @param providerNamespace The provider namespace.
   * @param featureName The feature name.
   * @param callback The callback
   */
  get(providerNamespace: string, featureName: string, callback: msRest.ServiceCallback<Models.SubscriptionFeatureRegistration>): void;
  /**
   * @param providerNamespace The provider namespace.
   * @param featureName The feature name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(providerNamespace: string, featureName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SubscriptionFeatureRegistration>): void;
  get(providerNamespace: string, featureName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SubscriptionFeatureRegistration>, callback?: msRest.ServiceCallback<Models.SubscriptionFeatureRegistration>): Promise<Models.SubscriptionFeatureRegistrationsGetResponse> {
    return this.client.sendOperationRequest(
      {
        providerNamespace,
        featureName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.SubscriptionFeatureRegistrationsGetResponse>;
  }

  /**
   * Create or update a feature registration.
   * @param providerNamespace The provider namespace.
   * @param featureName The feature name.
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionFeatureRegistrationsCreateOrUpdateResponse>
   */
  createOrUpdate(providerNamespace: string, featureName: string, options?: Models.SubscriptionFeatureRegistrationsCreateOrUpdateOptionalParams): Promise<Models.SubscriptionFeatureRegistrationsCreateOrUpdateResponse>;
  /**
   * @param providerNamespace The provider namespace.
   * @param featureName The feature name.
   * @param callback The callback
   */
  createOrUpdate(providerNamespace: string, featureName: string, callback: msRest.ServiceCallback<Models.SubscriptionFeatureRegistration>): void;
  /**
   * @param providerNamespace The provider namespace.
   * @param featureName The feature name.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(providerNamespace: string, featureName: string, options: Models.SubscriptionFeatureRegistrationsCreateOrUpdateOptionalParams, callback: msRest.ServiceCallback<Models.SubscriptionFeatureRegistration>): void;
  createOrUpdate(providerNamespace: string, featureName: string, options?: Models.SubscriptionFeatureRegistrationsCreateOrUpdateOptionalParams | msRest.ServiceCallback<Models.SubscriptionFeatureRegistration>, callback?: msRest.ServiceCallback<Models.SubscriptionFeatureRegistration>): Promise<Models.SubscriptionFeatureRegistrationsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        providerNamespace,
        featureName,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.SubscriptionFeatureRegistrationsCreateOrUpdateResponse>;
  }

  /**
   * Deletes a feature registration
   * @param providerNamespace The provider namespace.
   * @param featureName The feature name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(providerNamespace: string, featureName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param providerNamespace The provider namespace.
   * @param featureName The feature name.
   * @param callback The callback
   */
  deleteMethod(providerNamespace: string, featureName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param providerNamespace The provider namespace.
   * @param featureName The feature name.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(providerNamespace: string, featureName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(providerNamespace: string, featureName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        providerNamespace,
        featureName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Returns subscription feature registrations for given subscription and provider namespace.
   * @param providerNamespace The provider namespace.
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionFeatureRegistrationsListBySubscriptionResponse>
   */
  listBySubscription(providerNamespace: string, options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionFeatureRegistrationsListBySubscriptionResponse>;
  /**
   * @param providerNamespace The provider namespace.
   * @param callback The callback
   */
  listBySubscription(providerNamespace: string, callback: msRest.ServiceCallback<Models.SubscriptionFeatureRegistrationList>): void;
  /**
   * @param providerNamespace The provider namespace.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(providerNamespace: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SubscriptionFeatureRegistrationList>): void;
  listBySubscription(providerNamespace: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SubscriptionFeatureRegistrationList>, callback?: msRest.ServiceCallback<Models.SubscriptionFeatureRegistrationList>): Promise<Models.SubscriptionFeatureRegistrationsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        providerNamespace,
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.SubscriptionFeatureRegistrationsListBySubscriptionResponse>;
  }

  /**
   * Returns subscription feature registrations for given subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionFeatureRegistrationsListAllBySubscriptionResponse>
   */
  listAllBySubscription(options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionFeatureRegistrationsListAllBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listAllBySubscription(callback: msRest.ServiceCallback<Models.SubscriptionFeatureRegistrationList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAllBySubscription(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SubscriptionFeatureRegistrationList>): void;
  listAllBySubscription(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SubscriptionFeatureRegistrationList>, callback?: msRest.ServiceCallback<Models.SubscriptionFeatureRegistrationList>): Promise<Models.SubscriptionFeatureRegistrationsListAllBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listAllBySubscriptionOperationSpec,
      callback) as Promise<Models.SubscriptionFeatureRegistrationsListAllBySubscriptionResponse>;
  }

  /**
   * Returns subscription feature registrations for given subscription and provider namespace.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionFeatureRegistrationsListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionFeatureRegistrationsListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SubscriptionFeatureRegistrationList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SubscriptionFeatureRegistrationList>): void;
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SubscriptionFeatureRegistrationList>, callback?: msRest.ServiceCallback<Models.SubscriptionFeatureRegistrationList>): Promise<Models.SubscriptionFeatureRegistrationsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.SubscriptionFeatureRegistrationsListBySubscriptionNextResponse>;
  }

  /**
   * Returns subscription feature registrations for given subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionFeatureRegistrationsListAllBySubscriptionNextResponse>
   */
  listAllBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionFeatureRegistrationsListAllBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listAllBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SubscriptionFeatureRegistrationList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAllBySubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SubscriptionFeatureRegistrationList>): void;
  listAllBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SubscriptionFeatureRegistrationList>, callback?: msRest.ServiceCallback<Models.SubscriptionFeatureRegistrationList>): Promise<Models.SubscriptionFeatureRegistrationsListAllBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listAllBySubscriptionNextOperationSpec,
      callback) as Promise<Models.SubscriptionFeatureRegistrationsListAllBySubscriptionNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Features/featureProviders/{providerNamespace}/subscriptionFeatureRegistrations/{featureName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.providerNamespace,
    Parameters.featureName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionFeatureRegistration
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Features/featureProviders/{providerNamespace}/subscriptionFeatureRegistrations/{featureName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.providerNamespace,
    Parameters.featureName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "subscriptionFeatureRegistrationType"
    ],
    mapper: Mappers.SubscriptionFeatureRegistration
  },
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionFeatureRegistration
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Features/featureProviders/{providerNamespace}/subscriptionFeatureRegistrations/{featureName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.providerNamespace,
    Parameters.featureName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Features/featureProviders/{providerNamespace}/subscriptionFeatureRegistrations",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.providerNamespace
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionFeatureRegistrationList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listAllBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Features/subscriptionFeatureRegistrations",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionFeatureRegistrationList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionFeatureRegistrationList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listAllBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionFeatureRegistrationList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
