"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.mode = exports.m = exports.virtualMachineRequest1 = exports.virtualMachineName1 = exports.virtualMachineRequest = exports.virtualMachineName = exports.virtualNetworkName = exports.virtualMachineTemplateName = exports.resourcePoolName1 = exports.resourcePoolName = exports.customizationPolicyName = exports.pcName = exports.skuId = exports.dedicatedCloudServiceRequest1 = exports.dedicatedCloudServiceName1 = exports.dedicatedCloudServiceRequest = exports.dedicatedCloudServiceName = exports.dedicatedCloudNodeRequest1 = exports.dedicatedCloudNodeRequest = exports.contentType = exports.dedicatedCloudNodeName = exports.resourceGroupName = exports.skipToken = exports.top = exports.filter = exports.nextLink = exports.operationId = exports.referer = exports.regionId = exports.subscriptionId = exports.apiVersion = exports.$host = exports.accept = void 0;
const mappers_js_1 = require("../models/mappers.js");
exports.accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
exports.$host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
exports.apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2019-04-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
exports.subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.regionId = {
    parameterPath: "regionId",
    mapper: {
        serializedName: "regionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.referer = {
    parameterPath: "referer",
    mapper: {
        serializedName: "Referer",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.operationId = {
    parameterPath: "operationId",
    mapper: {
        serializedName: "operationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
exports.filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
exports.top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
exports.skipToken = {
    parameterPath: ["options", "skipToken"],
    mapper: {
        serializedName: "$skipToken",
        type: {
            name: "String"
        }
    }
};
exports.resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.dedicatedCloudNodeName = {
    parameterPath: "dedicatedCloudNodeName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9]([-_.a-zA-Z0-9]*[a-zA-Z0-9])?$")
        },
        serializedName: "dedicatedCloudNodeName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
exports.dedicatedCloudNodeRequest = {
    parameterPath: "dedicatedCloudNodeRequest",
    mapper: mappers_js_1.DedicatedCloudNode
};
exports.dedicatedCloudNodeRequest1 = {
    parameterPath: "dedicatedCloudNodeRequest",
    mapper: mappers_js_1.PatchPayload
};
exports.dedicatedCloudServiceName = {
    parameterPath: "dedicatedCloudServiceName",
    mapper: {
        serializedName: "dedicatedCloudServiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.dedicatedCloudServiceRequest = {
    parameterPath: "dedicatedCloudServiceRequest",
    mapper: mappers_js_1.DedicatedCloudService
};
exports.dedicatedCloudServiceName1 = {
    parameterPath: "dedicatedCloudServiceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9]([-_.a-zA-Z0-9]*[a-zA-Z0-9])?$")
        },
        serializedName: "dedicatedCloudServiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.dedicatedCloudServiceRequest1 = {
    parameterPath: "dedicatedCloudServiceRequest",
    mapper: mappers_js_1.PatchPayload
};
exports.skuId = {
    parameterPath: ["options", "skuId"],
    mapper: {
        serializedName: "skuId",
        type: {
            name: "String"
        }
    }
};
exports.pcName = {
    parameterPath: "pcName",
    mapper: {
        serializedName: "pcName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.customizationPolicyName = {
    parameterPath: "customizationPolicyName",
    mapper: {
        serializedName: "customizationPolicyName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.resourcePoolName = {
    parameterPath: "resourcePoolName",
    mapper: {
        serializedName: "resourcePoolName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.resourcePoolName1 = {
    parameterPath: "resourcePoolName",
    mapper: {
        serializedName: "resourcePoolName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.virtualMachineTemplateName = {
    parameterPath: "virtualMachineTemplateName",
    mapper: {
        serializedName: "virtualMachineTemplateName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.virtualNetworkName = {
    parameterPath: "virtualNetworkName",
    mapper: {
        serializedName: "virtualNetworkName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.virtualMachineName = {
    parameterPath: "virtualMachineName",
    mapper: {
        serializedName: "virtualMachineName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.virtualMachineRequest = {
    parameterPath: "virtualMachineRequest",
    mapper: mappers_js_1.VirtualMachine
};
exports.virtualMachineName1 = {
    parameterPath: "virtualMachineName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9]([-_.a-zA-Z0-9]*[a-zA-Z0-9])?$")
        },
        serializedName: "virtualMachineName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.virtualMachineRequest1 = {
    parameterPath: "virtualMachineRequest",
    mapper: mappers_js_1.PatchPayload
};
exports.m = {
    parameterPath: ["options", "m"],
    mapper: mappers_js_1.VirtualMachineStopMode
};
exports.mode = {
    parameterPath: ["options", "mode"],
    mapper: {
        serializedName: "mode",
        type: {
            name: "Enum",
            allowedValues: ["reboot", "suspend", "shutdown", "poweroff"]
        }
    }
};
//# sourceMappingURL=parameters.js.map