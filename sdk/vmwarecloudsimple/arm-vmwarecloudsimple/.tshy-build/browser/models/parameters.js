/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { DedicatedCloudNode as DedicatedCloudNodeMapper, PatchPayload as PatchPayloadMapper, DedicatedCloudService as DedicatedCloudServiceMapper, VirtualMachine as VirtualMachineMapper, VirtualMachineStopMode as VirtualMachineStopModeMapper } from "../models/mappers.js";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2019-04-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const regionId = {
    parameterPath: "regionId",
    mapper: {
        serializedName: "regionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const referer = {
    parameterPath: "referer",
    mapper: {
        serializedName: "Referer",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const operationId = {
    parameterPath: "operationId",
    mapper: {
        serializedName: "operationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
export const top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
export const skipToken = {
    parameterPath: ["options", "skipToken"],
    mapper: {
        serializedName: "$skipToken",
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const dedicatedCloudNodeName = {
    parameterPath: "dedicatedCloudNodeName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9]([-_.a-zA-Z0-9]*[a-zA-Z0-9])?$")
        },
        serializedName: "dedicatedCloudNodeName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const dedicatedCloudNodeRequest = {
    parameterPath: "dedicatedCloudNodeRequest",
    mapper: DedicatedCloudNodeMapper
};
export const dedicatedCloudNodeRequest1 = {
    parameterPath: "dedicatedCloudNodeRequest",
    mapper: PatchPayloadMapper
};
export const dedicatedCloudServiceName = {
    parameterPath: "dedicatedCloudServiceName",
    mapper: {
        serializedName: "dedicatedCloudServiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const dedicatedCloudServiceRequest = {
    parameterPath: "dedicatedCloudServiceRequest",
    mapper: DedicatedCloudServiceMapper
};
export const dedicatedCloudServiceName1 = {
    parameterPath: "dedicatedCloudServiceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9]([-_.a-zA-Z0-9]*[a-zA-Z0-9])?$")
        },
        serializedName: "dedicatedCloudServiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const dedicatedCloudServiceRequest1 = {
    parameterPath: "dedicatedCloudServiceRequest",
    mapper: PatchPayloadMapper
};
export const skuId = {
    parameterPath: ["options", "skuId"],
    mapper: {
        serializedName: "skuId",
        type: {
            name: "String"
        }
    }
};
export const pcName = {
    parameterPath: "pcName",
    mapper: {
        serializedName: "pcName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const customizationPolicyName = {
    parameterPath: "customizationPolicyName",
    mapper: {
        serializedName: "customizationPolicyName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourcePoolName = {
    parameterPath: "resourcePoolName",
    mapper: {
        serializedName: "resourcePoolName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourcePoolName1 = {
    parameterPath: "resourcePoolName",
    mapper: {
        serializedName: "resourcePoolName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const virtualMachineTemplateName = {
    parameterPath: "virtualMachineTemplateName",
    mapper: {
        serializedName: "virtualMachineTemplateName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const virtualNetworkName = {
    parameterPath: "virtualNetworkName",
    mapper: {
        serializedName: "virtualNetworkName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const virtualMachineName = {
    parameterPath: "virtualMachineName",
    mapper: {
        serializedName: "virtualMachineName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const virtualMachineRequest = {
    parameterPath: "virtualMachineRequest",
    mapper: VirtualMachineMapper
};
export const virtualMachineName1 = {
    parameterPath: "virtualMachineName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9]([-_.a-zA-Z0-9]*[a-zA-Z0-9])?$")
        },
        serializedName: "virtualMachineName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const virtualMachineRequest1 = {
    parameterPath: "virtualMachineRequest",
    mapper: PatchPayloadMapper
};
export const m = {
    parameterPath: ["options", "m"],
    mapper: VirtualMachineStopModeMapper
};
export const mode = {
    parameterPath: ["options", "mode"],
    mapper: {
        serializedName: "mode",
        type: {
            name: "Enum",
            allowedValues: ["reboot", "suspend", "shutdown", "poweroff"]
        }
    }
};
//# sourceMappingURL=parameters.js.map