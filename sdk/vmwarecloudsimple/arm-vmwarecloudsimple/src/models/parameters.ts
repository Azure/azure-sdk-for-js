/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  DedicatedCloudNode as DedicatedCloudNodeMapper,
  PatchPayload as PatchPayloadMapper,
  DedicatedCloudService as DedicatedCloudServiceMapper,
  VirtualMachine as VirtualMachineMapper,
  VirtualMachineStopMode as VirtualMachineStopModeMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2019-04-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const regionId: OperationURLParameter = {
  parameterPath: "regionId",
  mapper: {
    serializedName: "regionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const referer: OperationParameter = {
  parameterPath: "referer",
  mapper: {
    serializedName: "Referer",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const operationId: OperationURLParameter = {
  parameterPath: "operationId",
  mapper: {
    serializedName: "operationId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const filter: OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const top: OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    serializedName: "$top",
    type: {
      name: "Number"
    }
  }
};

export const skipToken: OperationQueryParameter = {
  parameterPath: ["options", "skipToken"],
  mapper: {
    serializedName: "$skipToken",
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const dedicatedCloudNodeName: OperationURLParameter = {
  parameterPath: "dedicatedCloudNodeName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9]([-_.a-zA-Z0-9]*[a-zA-Z0-9])?$")
    },
    serializedName: "dedicatedCloudNodeName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const dedicatedCloudNodeRequest: OperationParameter = {
  parameterPath: "dedicatedCloudNodeRequest",
  mapper: DedicatedCloudNodeMapper
};

export const dedicatedCloudNodeRequest1: OperationParameter = {
  parameterPath: "dedicatedCloudNodeRequest",
  mapper: PatchPayloadMapper
};

export const dedicatedCloudServiceName: OperationURLParameter = {
  parameterPath: "dedicatedCloudServiceName",
  mapper: {
    serializedName: "dedicatedCloudServiceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const dedicatedCloudServiceRequest: OperationParameter = {
  parameterPath: "dedicatedCloudServiceRequest",
  mapper: DedicatedCloudServiceMapper
};

export const dedicatedCloudServiceName1: OperationURLParameter = {
  parameterPath: "dedicatedCloudServiceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9]([-_.a-zA-Z0-9]*[a-zA-Z0-9])?$")
    },
    serializedName: "dedicatedCloudServiceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const dedicatedCloudServiceRequest1: OperationParameter = {
  parameterPath: "dedicatedCloudServiceRequest",
  mapper: PatchPayloadMapper
};

export const skuId: OperationQueryParameter = {
  parameterPath: ["options", "skuId"],
  mapper: {
    serializedName: "skuId",
    type: {
      name: "String"
    }
  }
};

export const pcName: OperationURLParameter = {
  parameterPath: "pcName",
  mapper: {
    serializedName: "pcName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const customizationPolicyName: OperationURLParameter = {
  parameterPath: "customizationPolicyName",
  mapper: {
    serializedName: "customizationPolicyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourcePoolName: OperationURLParameter = {
  parameterPath: "resourcePoolName",
  mapper: {
    serializedName: "resourcePoolName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourcePoolName1: OperationQueryParameter = {
  parameterPath: "resourcePoolName",
  mapper: {
    serializedName: "resourcePoolName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const virtualMachineTemplateName: OperationURLParameter = {
  parameterPath: "virtualMachineTemplateName",
  mapper: {
    serializedName: "virtualMachineTemplateName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const virtualNetworkName: OperationURLParameter = {
  parameterPath: "virtualNetworkName",
  mapper: {
    serializedName: "virtualNetworkName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const virtualMachineName: OperationURLParameter = {
  parameterPath: "virtualMachineName",
  mapper: {
    serializedName: "virtualMachineName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const virtualMachineRequest: OperationParameter = {
  parameterPath: "virtualMachineRequest",
  mapper: VirtualMachineMapper
};

export const virtualMachineName1: OperationURLParameter = {
  parameterPath: "virtualMachineName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9]([-_.a-zA-Z0-9]*[a-zA-Z0-9])?$")
    },
    serializedName: "virtualMachineName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const virtualMachineRequest1: OperationParameter = {
  parameterPath: "virtualMachineRequest",
  mapper: PatchPayloadMapper
};

export const m: OperationParameter = {
  parameterPath: ["options", "m"],
  mapper: VirtualMachineStopModeMapper
};

export const mode: OperationQueryParameter = {
  parameterPath: ["options", "mode"],
  mapper: {
    serializedName: "mode",
    type: {
      name: "Enum",
      allowedValues: ["reboot", "suspend", "shutdown", "poweroff"]
    }
  }
};
