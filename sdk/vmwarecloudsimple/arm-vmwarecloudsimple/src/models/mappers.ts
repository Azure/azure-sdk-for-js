/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const AvailableOperationsListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableOperationsListResponse",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AvailableOperation"
            }
          }
        }
      }
    }
  }
};

export const AvailableOperation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableOperation",
    modelProperties: {
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "AvailableOperationDisplay"
        }
      },
      isDataAction: {
        defaultValue: false,
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "Enum",
          allowedValues: ["user", "system", "user,system"]
        }
      },
      serviceSpecification: {
        serializedName: "properties.serviceSpecification",
        type: {
          name: "Composite",
          className:
            "AvailableOperationDisplayPropertyServiceSpecificationMetricsList"
        }
      }
    }
  }
};

export const AvailableOperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableOperationDisplay",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailableOperationDisplayPropertyServiceSpecificationMetricsList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "AvailableOperationDisplayPropertyServiceSpecificationMetricsList",
    modelProperties: {
      metricSpecifications: {
        serializedName: "metricSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className:
                "AvailableOperationDisplayPropertyServiceSpecificationMetricsItem"
            }
          }
        }
      }
    }
  }
};

export const AvailableOperationDisplayPropertyServiceSpecificationMetricsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "AvailableOperationDisplayPropertyServiceSpecificationMetricsItem",
    modelProperties: {
      aggregationType: {
        serializedName: "aggregationType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Average", "Total"]
        }
      },
      displayDescription: {
        serializedName: "displayDescription",
        required: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CsrpError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CsrpError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CsrpErrorBody"
        }
      }
    }
  }
};

export const CsrpErrorBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CsrpErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CsrpErrorBody"
            }
          }
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DedicatedCloudNodeListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DedicatedCloudNodeListResponse",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DedicatedCloudNode"
            }
          }
        }
      }
    }
  }
};

export const DedicatedCloudNode: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DedicatedCloudNode",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9]([-_.a-zA-Z0-9]*[a-zA-Z0-9])?$")
        },
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      availabilityZoneId: {
        serializedName: "properties.availabilityZoneId",
        type: {
          name: "String"
        }
      },
      availabilityZoneName: {
        serializedName: "properties.availabilityZoneName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      cloudRackName: {
        serializedName: "properties.cloudRackName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      created: {
        serializedName: "properties.created",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      nodesCount: {
        serializedName: "properties.nodesCount",
        type: {
          name: "Number"
        }
      },
      placementGroupId: {
        serializedName: "properties.placementGroupId",
        type: {
          name: "String"
        }
      },
      placementGroupName: {
        serializedName: "properties.placementGroupName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateCloudId: {
        serializedName: "properties.privateCloudId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateCloudName: {
        serializedName: "properties.privateCloudName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      purchaseId: {
        serializedName: "properties.purchaseId",
        type: {
          name: "Uuid"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["unused", "used"]
        }
      },
      vmwareClusterName: {
        serializedName: "properties.vmwareClusterName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      idPropertiesSkuDescriptionId: {
        serializedName: "properties.skuDescription.id",
        type: {
          name: "String"
        }
      },
      namePropertiesSkuDescriptionName: {
        serializedName: "properties.skuDescription.name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      capacity: {
        serializedName: "capacity",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DedicatedCloudServiceListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DedicatedCloudServiceListResponse",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DedicatedCloudService"
            }
          }
        }
      }
    }
  }
};

export const DedicatedCloudService: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DedicatedCloudService",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9]([-_.a-zA-Z0-9]*[a-zA-Z0-9])?$")
        },
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      gatewaySubnet: {
        serializedName: "properties.gatewaySubnet",
        type: {
          name: "String"
        }
      },
      isAccountOnboarded: {
        serializedName: "properties.isAccountOnboarded",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "notOnBoarded",
            "onBoarded",
            "onBoardingFailed",
            "onBoarding"
          ]
        }
      },
      nodes: {
        serializedName: "properties.nodes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      serviceURL: {
        serializedName: "properties.serviceURL",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuAvailabilityListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuAvailabilityListResponse",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuAvailability"
            }
          }
        }
      }
    }
  }
};

export const SkuAvailability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuAvailability",
    modelProperties: {
      dedicatedAvailabilityZoneId: {
        serializedName: "dedicatedAvailabilityZoneId",
        type: {
          name: "String"
        }
      },
      dedicatedAvailabilityZoneName: {
        serializedName: "dedicatedAvailabilityZoneName",
        type: {
          name: "String"
        }
      },
      dedicatedPlacementGroupId: {
        serializedName: "dedicatedPlacementGroupId",
        type: {
          name: "String"
        }
      },
      dedicatedPlacementGroupName: {
        serializedName: "dedicatedPlacementGroupName",
        type: {
          name: "String"
        }
      },
      limit: {
        serializedName: "limit",
        required: true,
        type: {
          name: "Number"
        }
      },
      resourceType: {
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      skuId: {
        serializedName: "skuId",
        type: {
          name: "String"
        }
      },
      skuName: {
        serializedName: "skuName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationResource",
    modelProperties: {
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "OperationError"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateCloudList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateCloudList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateCloud"
            }
          }
        }
      }
    }
  }
};

export const PrivateCloud: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateCloud",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "Microsoft.VMwareCloudSimple/privateClouds",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      availabilityZoneId: {
        serializedName: "properties.availabilityZoneId",
        type: {
          name: "String"
        }
      },
      availabilityZoneName: {
        serializedName: "properties.availabilityZoneName",
        type: {
          name: "String"
        }
      },
      clustersNumber: {
        serializedName: "properties.clustersNumber",
        type: {
          name: "Number"
        }
      },
      createdBy: {
        serializedName: "properties.createdBy",
        type: {
          name: "String"
        }
      },
      createdOn: {
        serializedName: "properties.createdOn",
        type: {
          name: "DateTime"
        }
      },
      dnsServers: {
        serializedName: "properties.dnsServers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      expires: {
        serializedName: "properties.expires",
        type: {
          name: "String"
        }
      },
      nsxType: {
        serializedName: "properties.nsxType",
        type: {
          name: "String"
        }
      },
      placementGroupId: {
        serializedName: "properties.placementGroupId",
        type: {
          name: "String"
        }
      },
      placementGroupName: {
        serializedName: "properties.placementGroupName",
        type: {
          name: "String"
        }
      },
      privateCloudId: {
        serializedName: "properties.privateCloudId",
        type: {
          name: "Uuid"
        }
      },
      resourcePools: {
        serializedName: "properties.resourcePools",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourcePool"
            }
          }
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      totalCpuCores: {
        serializedName: "properties.totalCpuCores",
        type: {
          name: "Number"
        }
      },
      totalNodes: {
        serializedName: "properties.totalNodes",
        type: {
          name: "Number"
        }
      },
      totalRam: {
        serializedName: "properties.totalRam",
        type: {
          name: "Number"
        }
      },
      totalStorage: {
        serializedName: "properties.totalStorage",
        type: {
          name: "Number"
        }
      },
      typePropertiesType: {
        serializedName: "properties.type",
        type: {
          name: "String"
        }
      },
      vSphereVersion: {
        serializedName: "properties.vSphereVersion",
        type: {
          name: "String"
        }
      },
      vcenterFqdn: {
        serializedName: "properties.vcenterFqdn",
        type: {
          name: "String"
        }
      },
      vcenterRefid: {
        serializedName: "properties.vcenterRefid",
        type: {
          name: "String"
        }
      },
      virtualMachineTemplates: {
        serializedName: "properties.virtualMachineTemplates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachineTemplate"
            }
          }
        }
      },
      virtualNetworks: {
        serializedName: "properties.virtualNetworks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetwork"
            }
          }
        }
      },
      vrOpsEnabled: {
        serializedName: "properties.vrOpsEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ResourcePool: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourcePool",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateCloudId: {
        serializedName: "privateCloudId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fullName: {
        serializedName: "properties.fullName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineTemplate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineTemplate",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      amountOfRam: {
        serializedName: "properties.amountOfRam",
        type: {
          name: "Number"
        }
      },
      controllers: {
        serializedName: "properties.controllers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualDiskController"
            }
          }
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      disks: {
        serializedName: "properties.disks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualDisk"
            }
          }
        }
      },
      exposeToGuestVM: {
        serializedName: "properties.exposeToGuestVM",
        type: {
          name: "Boolean"
        }
      },
      guestOS: {
        serializedName: "properties.guestOS",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      guestOSType: {
        serializedName: "properties.guestOSType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nics: {
        serializedName: "properties.nics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNic"
            }
          }
        }
      },
      numberOfCores: {
        serializedName: "properties.numberOfCores",
        type: {
          name: "Number"
        }
      },
      path: {
        serializedName: "properties.path",
        type: {
          name: "String"
        }
      },
      privateCloudId: {
        serializedName: "properties.privateCloudId",
        type: {
          name: "String"
        }
      },
      vSphereNetworks: {
        serializedName: "properties.vSphereNetworks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      vSphereTags: {
        serializedName: "properties.vSphereTags",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      vmwaretools: {
        serializedName: "properties.vmwaretools",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualDiskController: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualDiskController",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subType: {
        serializedName: "subType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualDisk: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualDisk",
    modelProperties: {
      controllerId: {
        serializedName: "controllerId",
        required: true,
        type: {
          name: "String"
        }
      },
      independenceMode: {
        serializedName: "independenceMode",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "persistent",
            "independent_persistent",
            "independent_nonpersistent"
          ]
        }
      },
      totalSize: {
        serializedName: "totalSize",
        required: true,
        type: {
          name: "Number"
        }
      },
      virtualDiskId: {
        serializedName: "virtualDiskId",
        type: {
          name: "String"
        }
      },
      virtualDiskName: {
        serializedName: "virtualDiskName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNic: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNic",
    modelProperties: {
      customization: {
        serializedName: "customization",
        type: {
          name: "Composite",
          className: "GuestOsnicCustomization"
        }
      },
      ipAddresses: {
        serializedName: "ipAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      macAddress: {
        serializedName: "macAddress",
        type: {
          name: "String"
        }
      },
      network: {
        serializedName: "network",
        type: {
          name: "Composite",
          className: "VirtualNetwork"
        }
      },
      nicType: {
        serializedName: "nicType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "E1000",
            "E1000E",
            "PCNET32",
            "VMXNET",
            "VMXNET2",
            "VMXNET3"
          ]
        }
      },
      powerOnBoot: {
        serializedName: "powerOnBoot",
        type: {
          name: "Boolean"
        }
      },
      virtualNicId: {
        serializedName: "virtualNicId",
        type: {
          name: "String"
        }
      },
      virtualNicName: {
        serializedName: "virtualNicName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GuestOsnicCustomization: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GuestOsnicCustomization",
    modelProperties: {
      allocation: {
        serializedName: "allocation",
        type: {
          name: "String"
        }
      },
      dnsServers: {
        serializedName: "dnsServers",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              Pattern: new RegExp(
                "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
              )
            },
            type: {
              name: "String"
            }
          }
        }
      },
      gateway: {
        serializedName: "gateway",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              Pattern: new RegExp(
                "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
              )
            },
            type: {
              name: "String"
            }
          }
        }
      },
      ipAddress: {
        constraints: {
          Pattern: new RegExp(
            "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
          )
        },
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      mask: {
        constraints: {
          Pattern: new RegExp(
            "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
          )
        },
        serializedName: "mask",
        type: {
          name: "String"
        }
      },
      primaryWinsServer: {
        constraints: {
          Pattern: new RegExp(
            "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
          )
        },
        serializedName: "primaryWinsServer",
        type: {
          name: "String"
        }
      },
      secondaryWinsServer: {
        constraints: {
          Pattern: new RegExp(
            "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
          )
        },
        serializedName: "secondaryWinsServer",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetwork: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetwork",
    modelProperties: {
      assignable: {
        serializedName: "assignable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateCloudId: {
        serializedName: "properties.privateCloudId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomizationPoliciesListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomizationPoliciesListResponse",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomizationPolicy"
            }
          }
        }
      }
    }
  }
};

export const CustomizationPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomizationPolicy",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      privateCloudId: {
        serializedName: "properties.privateCloudId",
        type: {
          name: "String"
        }
      },
      specification: {
        serializedName: "properties.specification",
        type: {
          name: "Composite",
          className: "CustomizationSpecification"
        }
      },
      typePropertiesType: {
        serializedName: "properties.type",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomizationSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomizationSpecification",
    modelProperties: {
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "CustomizationIdentity"
        }
      },
      nicSettings: {
        serializedName: "nicSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomizationNicSetting"
            }
          }
        }
      }
    }
  }
};

export const CustomizationIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomizationIdentity",
    modelProperties: {
      data: {
        serializedName: "data",
        type: {
          name: "String"
        }
      },
      hostName: {
        serializedName: "hostName",
        type: {
          name: "Composite",
          className: "CustomizationHostName"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      userData: {
        serializedName: "userData",
        type: {
          name: "Composite",
          className: "CustomizationIdentityUserData"
        }
      }
    }
  }
};

export const CustomizationHostName: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomizationHostName",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomizationIdentityUserData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomizationIdentityUserData",
    modelProperties: {
      isPasswordPredefined: {
        defaultValue: false,
        serializedName: "isPasswordPredefined",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const CustomizationNicSetting: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomizationNicSetting",
    modelProperties: {
      adapter: {
        serializedName: "adapter",
        type: {
          name: "Composite",
          className: "CustomizationIPSettings"
        }
      },
      macAddress: {
        serializedName: "macAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomizationIPSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomizationIPSettings",
    modelProperties: {
      gateway: {
        serializedName: "gateway",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      ip: {
        serializedName: "ip",
        type: {
          name: "Composite",
          className: "CustomizationIPAddress"
        }
      },
      subnetMask: {
        serializedName: "subnetMask",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomizationIPAddress: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomizationIPAddress",
    modelProperties: {
      argument: {
        serializedName: "argument",
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourcePoolsListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourcePoolsListResponse",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourcePool"
            }
          }
        }
      }
    }
  }
};

export const VirtualMachineTemplateListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineTemplateListResponse",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachineTemplate"
            }
          }
        }
      }
    }
  }
};

export const VirtualNetworkListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkListResponse",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetwork"
            }
          }
        }
      }
    }
  }
};

export const UsageListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageListResponse",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Usage"
            }
          }
        }
      }
    }
  }
};

export const Usage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Usage",
    modelProperties: {
      currentValue: {
        defaultValue: 0,
        serializedName: "currentValue",
        required: true,
        type: {
          name: "Number"
        }
      },
      limit: {
        defaultValue: 0,
        serializedName: "limit",
        required: true,
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "UsageName"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "Enum",
          allowedValues: [
            "Count",
            "Bytes",
            "Seconds",
            "Percent",
            "CountPerSecond",
            "BytesPerSecond"
          ]
        }
      }
    }
  }
};

export const UsageName: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageName",
    modelProperties: {
      localizedValue: {
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineListResponse",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachine"
            }
          }
        }
      }
    }
  }
};

export const VirtualMachine: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachine",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9]([-_.a-zA-Z0-9]*[a-zA-Z0-9])?$")
        },
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      amountOfRam: {
        serializedName: "properties.amountOfRam",
        type: {
          name: "Number"
        }
      },
      controllers: {
        serializedName: "properties.controllers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualDiskController"
            }
          }
        }
      },
      customization: {
        serializedName: "properties.customization",
        type: {
          name: "Composite",
          className: "GuestOSCustomization"
        }
      },
      disks: {
        serializedName: "properties.disks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualDisk"
            }
          }
        }
      },
      dnsname: {
        serializedName: "properties.dnsname",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      exposeToGuestVM: {
        serializedName: "properties.exposeToGuestVM",
        type: {
          name: "Boolean"
        }
      },
      folder: {
        serializedName: "properties.folder",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      guestOS: {
        serializedName: "properties.guestOS",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      guestOSType: {
        serializedName: "properties.guestOSType",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["linux", "windows", "other"]
        }
      },
      nics: {
        serializedName: "properties.nics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNic"
            }
          }
        }
      },
      numberOfCores: {
        serializedName: "properties.numberOfCores",
        type: {
          name: "Number"
        }
      },
      password: {
        serializedName: "properties.password",
        type: {
          name: "String"
        }
      },
      privateCloudId: {
        serializedName: "properties.privateCloudId",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publicIP: {
        serializedName: "properties.publicIP",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourcePool: {
        serializedName: "properties.resourcePool",
        type: {
          name: "Composite",
          className: "ResourcePool"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "running",
            "suspended",
            "poweredoff",
            "updating",
            "deallocating",
            "deleting"
          ]
        }
      },
      templateId: {
        serializedName: "properties.templateId",
        type: {
          name: "String"
        }
      },
      username: {
        serializedName: "properties.username",
        type: {
          name: "String"
        }
      },
      vSphereNetworks: {
        serializedName: "properties.vSphereNetworks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      vmId: {
        serializedName: "properties.vmId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vmwaretools: {
        serializedName: "properties.vmwaretools",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GuestOSCustomization: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GuestOSCustomization",
    modelProperties: {
      dnsServers: {
        serializedName: "dnsServers",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              Pattern: new RegExp(
                "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
              )
            },
            type: {
              name: "String"
            }
          }
        }
      },
      hostName: {
        serializedName: "hostName",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      policyId: {
        serializedName: "policyId",
        type: {
          name: "String"
        }
      },
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PatchPayload: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PatchPayload",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const VirtualMachineStopMode: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineStopMode",
    modelProperties: {
      mode: {
        serializedName: "mode",
        type: {
          name: "Enum",
          allowedValues: ["reboot", "suspend", "shutdown", "poweroff"]
        }
      }
    }
  }
};

export const OperationsGetHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationsGetHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const OperationsGetExceptionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationsGetExceptionHeaders",
    modelProperties: {
      contentType: {
        defaultValue: "application/json",
        serializedName: "content-type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DedicatedCloudNodesCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DedicatedCloudNodesCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DedicatedCloudNodesDeleteExceptionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DedicatedCloudNodesDeleteExceptionHeaders",
    modelProperties: {
      contentType: {
        defaultValue: "application/json",
        serializedName: "content-type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DedicatedCloudServicesDeleteExceptionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DedicatedCloudServicesDeleteExceptionHeaders",
    modelProperties: {
      contentType: {
        defaultValue: "application/json",
        serializedName: "content-type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachinesCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachinesCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachinesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachinesDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VirtualMachinesDeleteExceptionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachinesDeleteExceptionHeaders",
    modelProperties: {
      contentType: {
        defaultValue: "application/json",
        serializedName: "content-type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachinesStartHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachinesStartHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VirtualMachinesStartExceptionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachinesStartExceptionHeaders",
    modelProperties: {
      contentType: {
        defaultValue: "application/json",
        serializedName: "content-type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachinesStopHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachinesStopHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VirtualMachinesStopExceptionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachinesStopExceptionHeaders",
    modelProperties: {
      contentType: {
        defaultValue: "application/json",
        serializedName: "content-type",
        type: {
          name: "String"
        }
      }
    }
  }
};
