/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { SkusAvailability } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { VMwareCloudSimple } from "../vMwareCloudSimple";
import {
  SkuAvailability,
  SkusAvailabilityListNextOptionalParams,
  SkusAvailabilityListOptionalParams,
  SkusAvailabilityListResponse,
  SkusAvailabilityListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SkusAvailability operations. */
export class SkusAvailabilityImpl implements SkusAvailability {
  private readonly client: VMwareCloudSimple;

  /**
   * Initialize a new instance of the class SkusAvailability class.
   * @param client Reference to the service client
   */
  constructor(client: VMwareCloudSimple) {
    this.client = client;
  }

  /**
   * Returns list of available resources in region
   * @param regionId The region Id (westus, eastus)
   * @param options The options parameters.
   */
  public list(
    regionId: string,
    options?: SkusAvailabilityListOptionalParams
  ): PagedAsyncIterableIterator<SkuAvailability> {
    const iter = this.listPagingAll(regionId, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(regionId, options, settings);
      }
    };
  }

  private async *listPagingPage(
    regionId: string,
    options?: SkusAvailabilityListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<SkuAvailability[]> {
    let result: SkusAvailabilityListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(regionId, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(regionId, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    regionId: string,
    options?: SkusAvailabilityListOptionalParams
  ): AsyncIterableIterator<SkuAvailability> {
    for await (const page of this.listPagingPage(regionId, options)) {
      yield* page;
    }
  }

  /**
   * Returns list of available resources in region
   * @param regionId The region Id (westus, eastus)
   * @param options The options parameters.
   */
  private _list(
    regionId: string,
    options?: SkusAvailabilityListOptionalParams
  ): Promise<SkusAvailabilityListResponse> {
    return this.client.sendOperationRequest(
      { regionId, options },
      listOperationSpec
    );
  }

  /**
   * ListNext
   * @param regionId The region Id (westus, eastus)
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    regionId: string,
    nextLink: string,
    options?: SkusAvailabilityListNextOptionalParams
  ): Promise<SkusAvailabilityListNextResponse> {
    return this.client.sendOperationRequest(
      { regionId, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/locations/{regionId}/availabilities",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SkuAvailabilityListResponse
    },
    default: {
      bodyMapper: Mappers.CsrpError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skuId],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.regionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SkuAvailabilityListResponse
    },
    default: {
      bodyMapper: Mappers.CsrpError
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.regionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
