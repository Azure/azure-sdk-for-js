/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PrivateClouds } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { VMwareCloudSimple } from "../vMwareCloudSimple";
import {
  PrivateCloud,
  PrivateCloudsListNextOptionalParams,
  PrivateCloudsListOptionalParams,
  PrivateCloudsListResponse,
  PrivateCloudsGetOptionalParams,
  PrivateCloudsGetResponse,
  PrivateCloudsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing PrivateClouds operations. */
export class PrivateCloudsImpl implements PrivateClouds {
  private readonly client: VMwareCloudSimple;

  /**
   * Initialize a new instance of the class PrivateClouds class.
   * @param client Reference to the service client
   */
  constructor(client: VMwareCloudSimple) {
    this.client = client;
  }

  /**
   * Returns list of private clouds in particular region
   * @param regionId The region Id (westus, eastus)
   * @param options The options parameters.
   */
  public list(
    regionId: string,
    options?: PrivateCloudsListOptionalParams
  ): PagedAsyncIterableIterator<PrivateCloud> {
    const iter = this.listPagingAll(regionId, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(regionId, options);
      }
    };
  }

  private async *listPagingPage(
    regionId: string,
    options?: PrivateCloudsListOptionalParams
  ): AsyncIterableIterator<PrivateCloud[]> {
    let result = await this._list(regionId, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(regionId, continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    regionId: string,
    options?: PrivateCloudsListOptionalParams
  ): AsyncIterableIterator<PrivateCloud> {
    for await (const page of this.listPagingPage(regionId, options)) {
      yield* page;
    }
  }

  /**
   * Returns list of private clouds in particular region
   * @param regionId The region Id (westus, eastus)
   * @param options The options parameters.
   */
  private _list(
    regionId: string,
    options?: PrivateCloudsListOptionalParams
  ): Promise<PrivateCloudsListResponse> {
    return this.client.sendOperationRequest(
      { regionId, options },
      listOperationSpec
    );
  }

  /**
   * Returns private cloud by its name
   * @param pcName The private cloud name
   * @param regionId The region Id (westus, eastus)
   * @param options The options parameters.
   */
  get(
    pcName: string,
    regionId: string,
    options?: PrivateCloudsGetOptionalParams
  ): Promise<PrivateCloudsGetResponse> {
    return this.client.sendOperationRequest(
      { pcName, regionId, options },
      getOperationSpec
    );
  }

  /**
   * ListNext
   * @param regionId The region Id (westus, eastus)
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    regionId: string,
    nextLink: string,
    options?: PrivateCloudsListNextOptionalParams
  ): Promise<PrivateCloudsListNextResponse> {
    return this.client.sendOperationRequest(
      { regionId, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/locations/{regionId}/privateClouds",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateCloudList
    },
    default: {
      bodyMapper: Mappers.CsrpError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.regionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/locations/{regionId}/privateClouds/{pcName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateCloud
    },
    default: {
      bodyMapper: Mappers.CsrpError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.regionId,
    Parameters.pcName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateCloudList
    },
    default: {
      bodyMapper: Mappers.CsrpError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.regionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
