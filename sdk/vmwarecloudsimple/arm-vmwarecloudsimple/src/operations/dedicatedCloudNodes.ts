/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/dedicatedCloudNodesMappers";
import * as Parameters from "../models/parameters";
import { VMwareCloudSimpleClientContext } from "../vMwareCloudSimpleClientContext";

/** Class representing a DedicatedCloudNodes. */
export class DedicatedCloudNodes {
  private readonly client: VMwareCloudSimpleClientContext;

  /**
   * Create a DedicatedCloudNodes.
   * @param {VMwareCloudSimpleClientContext} client Reference to the service client.
   */
  constructor(client: VMwareCloudSimpleClientContext) {
    this.client = client;
  }

  /**
   * Returns list of dedicate cloud nodes within subscription
   * @summary Implements list of dedicated cloud nodes within subscription method
   * @param [options] The optional parameters
   * @returns Promise<Models.DedicatedCloudNodesListBySubscriptionResponse>
   */
  listBySubscription(options?: Models.DedicatedCloudNodesListBySubscriptionOptionalParams): Promise<Models.DedicatedCloudNodesListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.DedicatedCloudNodeListResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: Models.DedicatedCloudNodesListBySubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.DedicatedCloudNodeListResponse>): void;
  listBySubscription(options?: Models.DedicatedCloudNodesListBySubscriptionOptionalParams | msRest.ServiceCallback<Models.DedicatedCloudNodeListResponse>, callback?: msRest.ServiceCallback<Models.DedicatedCloudNodeListResponse>): Promise<Models.DedicatedCloudNodesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.DedicatedCloudNodesListBySubscriptionResponse>;
  }

  /**
   * Returns list of dedicate cloud nodes within resource group
   * @summary Implements list of dedicated cloud nodes within RG method
   * @param resourceGroupName The name of the resource group
   * @param [options] The optional parameters
   * @returns Promise<Models.DedicatedCloudNodesListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: Models.DedicatedCloudNodesListByResourceGroupOptionalParams): Promise<Models.DedicatedCloudNodesListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.DedicatedCloudNodeListResponse>): void;
  /**
   * @param resourceGroupName The name of the resource group
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: Models.DedicatedCloudNodesListByResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.DedicatedCloudNodeListResponse>): void;
  listByResourceGroup(resourceGroupName: string, options?: Models.DedicatedCloudNodesListByResourceGroupOptionalParams | msRest.ServiceCallback<Models.DedicatedCloudNodeListResponse>, callback?: msRest.ServiceCallback<Models.DedicatedCloudNodeListResponse>): Promise<Models.DedicatedCloudNodesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.DedicatedCloudNodesListByResourceGroupResponse>;
  }

  /**
   * Returns dedicated cloud node
   * @summary Implements dedicated cloud node GET method
   * @param resourceGroupName The name of the resource group
   * @param dedicatedCloudNodeName dedicated cloud node name
   * @param [options] The optional parameters
   * @returns Promise<Models.DedicatedCloudNodesGetResponse>
   */
  get(resourceGroupName: string, dedicatedCloudNodeName: string, options?: msRest.RequestOptionsBase): Promise<Models.DedicatedCloudNodesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group
   * @param dedicatedCloudNodeName dedicated cloud node name
   * @param callback The callback
   */
  get(resourceGroupName: string, dedicatedCloudNodeName: string, callback: msRest.ServiceCallback<Models.DedicatedCloudNode>): void;
  /**
   * @param resourceGroupName The name of the resource group
   * @param dedicatedCloudNodeName dedicated cloud node name
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, dedicatedCloudNodeName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DedicatedCloudNode>): void;
  get(resourceGroupName: string, dedicatedCloudNodeName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DedicatedCloudNode>, callback?: msRest.ServiceCallback<Models.DedicatedCloudNode>): Promise<Models.DedicatedCloudNodesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dedicatedCloudNodeName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.DedicatedCloudNodesGetResponse>;
  }

  /**
   * Returns dedicated cloud node by its name
   * @summary Implements dedicated cloud node PUT method
   * @param resourceGroupName The name of the resource group
   * @param dedicatedCloudNodeName dedicated cloud node name
   * @param dedicatedCloudNodeRequest Create Dedicated Cloud Node request
   * @param [options] The optional parameters
   * @returns Promise<Models.DedicatedCloudNodesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, dedicatedCloudNodeName: string, dedicatedCloudNodeRequest: Models.DedicatedCloudNode, options?: msRest.RequestOptionsBase): Promise<Models.DedicatedCloudNodesCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,dedicatedCloudNodeName,dedicatedCloudNodeRequest,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DedicatedCloudNodesCreateOrUpdateResponse>;
  }

  /**
   * Delete dedicated cloud node
   * @summary Implements dedicated cloud node DELETE method
   * @param resourceGroupName The name of the resource group
   * @param dedicatedCloudNodeName dedicated cloud node name
   * @param [options] The optional parameters
   * @returns Promise<Models.DedicatedCloudNodesDeleteResponse>
   */
  deleteMethod(resourceGroupName: string, dedicatedCloudNodeName: string, options?: msRest.RequestOptionsBase): Promise<Models.DedicatedCloudNodesDeleteResponse>;
  /**
   * @param resourceGroupName The name of the resource group
   * @param dedicatedCloudNodeName dedicated cloud node name
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, dedicatedCloudNodeName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group
   * @param dedicatedCloudNodeName dedicated cloud node name
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, dedicatedCloudNodeName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, dedicatedCloudNodeName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.DedicatedCloudNodesDeleteResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dedicatedCloudNodeName,
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.DedicatedCloudNodesDeleteResponse>;
  }

  /**
   * Patches dedicated node properties
   * @summary Implements dedicated cloud node PATCH method
   * @param resourceGroupName The name of the resource group
   * @param dedicatedCloudNodeName dedicated cloud node name
   * @param [options] The optional parameters
   * @returns Promise<Models.DedicatedCloudNodesUpdateResponse>
   */
  update(resourceGroupName: string, dedicatedCloudNodeName: string, options?: Models.DedicatedCloudNodesUpdateOptionalParams): Promise<Models.DedicatedCloudNodesUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group
   * @param dedicatedCloudNodeName dedicated cloud node name
   * @param callback The callback
   */
  update(resourceGroupName: string, dedicatedCloudNodeName: string, callback: msRest.ServiceCallback<Models.DedicatedCloudNode>): void;
  /**
   * @param resourceGroupName The name of the resource group
   * @param dedicatedCloudNodeName dedicated cloud node name
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, dedicatedCloudNodeName: string, options: Models.DedicatedCloudNodesUpdateOptionalParams, callback: msRest.ServiceCallback<Models.DedicatedCloudNode>): void;
  update(resourceGroupName: string, dedicatedCloudNodeName: string, options?: Models.DedicatedCloudNodesUpdateOptionalParams | msRest.ServiceCallback<Models.DedicatedCloudNode>, callback?: msRest.ServiceCallback<Models.DedicatedCloudNode>): Promise<Models.DedicatedCloudNodesUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dedicatedCloudNodeName,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.DedicatedCloudNodesUpdateResponse>;
  }

  /**
   * Returns dedicated cloud node by its name
   * @summary Implements dedicated cloud node PUT method
   * @param resourceGroupName The name of the resource group
   * @param dedicatedCloudNodeName dedicated cloud node name
   * @param dedicatedCloudNodeRequest Create Dedicated Cloud Node request
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, dedicatedCloudNodeName: string, dedicatedCloudNodeRequest: Models.DedicatedCloudNode, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        dedicatedCloudNodeName,
        dedicatedCloudNodeRequest,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Returns list of dedicate cloud nodes within subscription
   * @summary Implements list of dedicated cloud nodes within subscription method
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DedicatedCloudNodesListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DedicatedCloudNodesListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DedicatedCloudNodeListResponse>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DedicatedCloudNodeListResponse>): void;
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DedicatedCloudNodeListResponse>, callback?: msRest.ServiceCallback<Models.DedicatedCloudNodeListResponse>): Promise<Models.DedicatedCloudNodesListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.DedicatedCloudNodesListBySubscriptionNextResponse>;
  }

  /**
   * Returns list of dedicate cloud nodes within resource group
   * @summary Implements list of dedicated cloud nodes within RG method
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DedicatedCloudNodesListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DedicatedCloudNodesListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DedicatedCloudNodeListResponse>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DedicatedCloudNodeListResponse>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DedicatedCloudNodeListResponse>, callback?: msRest.ServiceCallback<Models.DedicatedCloudNodeListResponse>): Promise<Models.DedicatedCloudNodesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.DedicatedCloudNodesListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedCloudNodeListResponse
    },
    default: {
      bodyMapper: Mappers.CSRPError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedCloudNodeListResponse
    },
    default: {
      bodyMapper: Mappers.CSRPError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/{dedicatedCloudNodeName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dedicatedCloudNodeName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedCloudNode
    },
    default: {
      bodyMapper: Mappers.CSRPError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/{dedicatedCloudNodeName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dedicatedCloudNodeName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {
      headersMapper: Mappers.DedicatedCloudNodesDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.CSRPError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/{dedicatedCloudNodeName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dedicatedCloudNodeName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      tags: [
        "options",
        "tags"
      ]
    },
    mapper: {
      ...Mappers.PatchPayload,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedCloudNode
    },
    default: {
      bodyMapper: Mappers.CSRPError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/{dedicatedCloudNodeName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dedicatedCloudNodeName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.referer,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "dedicatedCloudNodeRequest",
    mapper: {
      ...Mappers.DedicatedCloudNode,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedCloudNode,
      headersMapper: Mappers.DedicatedCloudNodesCreateOrUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.CSRPError
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedCloudNodeListResponse
    },
    default: {
      bodyMapper: Mappers.CSRPError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DedicatedCloudNodeListResponse
    },
    default: {
      bodyMapper: Mappers.CSRPError
    }
  },
  serializer
};
