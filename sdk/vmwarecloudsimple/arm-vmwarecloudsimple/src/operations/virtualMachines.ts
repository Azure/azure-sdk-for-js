/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/virtualMachinesMappers";
import * as Parameters from "../models/parameters";
import { VMwareCloudSimpleClientContext } from "../vMwareCloudSimpleClientContext";

/** Class representing a VirtualMachines. */
export class VirtualMachines {
  private readonly client: VMwareCloudSimpleClientContext;

  /**
   * Create a VirtualMachines.
   * @param {VMwareCloudSimpleClientContext} client Reference to the service client.
   */
  constructor(client: VMwareCloudSimpleClientContext) {
    this.client = client;
  }

  /**
   * Returns list virtual machine within subscription
   * @summary Implements list virtual machine within subscription method
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachinesListBySubscriptionResponse>
   */
  listBySubscription(options?: Models.VirtualMachinesListBySubscriptionOptionalParams): Promise<Models.VirtualMachinesListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.VirtualMachineListResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: Models.VirtualMachinesListBySubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.VirtualMachineListResponse>): void;
  listBySubscription(options?: Models.VirtualMachinesListBySubscriptionOptionalParams | msRest.ServiceCallback<Models.VirtualMachineListResponse>, callback?: msRest.ServiceCallback<Models.VirtualMachineListResponse>): Promise<Models.VirtualMachinesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.VirtualMachinesListBySubscriptionResponse>;
  }

  /**
   * Returns list of virtual machine within resource group
   * @summary Implements list virtual machine within RG method
   * @param resourceGroupName The name of the resource group
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachinesListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: Models.VirtualMachinesListByResourceGroupOptionalParams): Promise<Models.VirtualMachinesListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.VirtualMachineListResponse>): void;
  /**
   * @param resourceGroupName The name of the resource group
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: Models.VirtualMachinesListByResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.VirtualMachineListResponse>): void;
  listByResourceGroup(resourceGroupName: string, options?: Models.VirtualMachinesListByResourceGroupOptionalParams | msRest.ServiceCallback<Models.VirtualMachineListResponse>, callback?: msRest.ServiceCallback<Models.VirtualMachineListResponse>): Promise<Models.VirtualMachinesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.VirtualMachinesListByResourceGroupResponse>;
  }

  /**
   * Get virtual machine
   * @summary Implements virtual machine GET method
   * @param resourceGroupName The name of the resource group
   * @param virtualMachineName virtual machine name
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachinesGetResponse>
   */
  get(resourceGroupName: string, virtualMachineName: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group
   * @param virtualMachineName virtual machine name
   * @param callback The callback
   */
  get(resourceGroupName: string, virtualMachineName: string, callback: msRest.ServiceCallback<Models.VirtualMachine>): void;
  /**
   * @param resourceGroupName The name of the resource group
   * @param virtualMachineName virtual machine name
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, virtualMachineName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VirtualMachine>): void;
  get(resourceGroupName: string, virtualMachineName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VirtualMachine>, callback?: msRest.ServiceCallback<Models.VirtualMachine>): Promise<Models.VirtualMachinesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        virtualMachineName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.VirtualMachinesGetResponse>;
  }

  /**
   * Create Or Update Virtual Machine
   * @summary Implements virtual machine PUT method
   * @param resourceGroupName The name of the resource group
   * @param virtualMachineName virtual machine name
   * @param virtualMachineRequest Create or Update Virtual Machine request
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachinesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, virtualMachineName: string, virtualMachineRequest: Models.VirtualMachine, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,virtualMachineName,virtualMachineRequest,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualMachinesCreateOrUpdateResponse>;
  }

  /**
   * Delete virtual machine
   * @summary Implements virtual machine DELETE method
   * @param resourceGroupName The name of the resource group
   * @param virtualMachineName virtual machine name
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachinesDeleteResponse>
   */
  deleteMethod(resourceGroupName: string, virtualMachineName: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesDeleteResponse> {
    return this.beginDeleteMethod(resourceGroupName,virtualMachineName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualMachinesDeleteResponse>;
  }

  /**
   * Patch virtual machine properties
   * @summary Implements virtual machine PATCH method
   * @param resourceGroupName The name of the resource group
   * @param virtualMachineName virtual machine name
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachinesUpdateResponse>
   */
  update(resourceGroupName: string, virtualMachineName: string, options?: Models.VirtualMachinesUpdateOptionalParams): Promise<Models.VirtualMachinesUpdateResponse> {
    return this.beginUpdate(resourceGroupName,virtualMachineName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualMachinesUpdateResponse>;
  }

  /**
   * Power on virtual machine
   * @summary Implements a start method for a virtual machine
   * @param resourceGroupName The name of the resource group
   * @param virtualMachineName virtual machine name
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachinesStartResponse>
   */
  start(resourceGroupName: string, virtualMachineName: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesStartResponse> {
    return this.beginStart(resourceGroupName,virtualMachineName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualMachinesStartResponse>;
  }

  /**
   * Power off virtual machine, options: shutdown, poweroff, and suspend
   * @summary Implements shutdown, poweroff, and suspend method for a virtual machine
   * @param resourceGroupName The name of the resource group
   * @param virtualMachineName virtual machine name
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachinesStopResponse>
   */
  stop(resourceGroupName: string, virtualMachineName: string, options?: Models.VirtualMachinesStopOptionalParams): Promise<Models.VirtualMachinesStopResponse> {
    return this.beginStop(resourceGroupName,virtualMachineName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualMachinesStopResponse>;
  }

  /**
   * Create Or Update Virtual Machine
   * @summary Implements virtual machine PUT method
   * @param resourceGroupName The name of the resource group
   * @param virtualMachineName virtual machine name
   * @param virtualMachineRequest Create or Update Virtual Machine request
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, virtualMachineName: string, virtualMachineRequest: Models.VirtualMachine, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        virtualMachineName,
        virtualMachineRequest,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Delete virtual machine
   * @summary Implements virtual machine DELETE method
   * @param resourceGroupName The name of the resource group
   * @param virtualMachineName virtual machine name
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, virtualMachineName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        virtualMachineName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Patch virtual machine properties
   * @summary Implements virtual machine PATCH method
   * @param resourceGroupName The name of the resource group
   * @param virtualMachineName virtual machine name
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, virtualMachineName: string, options?: Models.VirtualMachinesBeginUpdateOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        virtualMachineName,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Power on virtual machine
   * @summary Implements a start method for a virtual machine
   * @param resourceGroupName The name of the resource group
   * @param virtualMachineName virtual machine name
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginStart(resourceGroupName: string, virtualMachineName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        virtualMachineName,
        options
      },
      beginStartOperationSpec,
      options);
  }

  /**
   * Power off virtual machine, options: shutdown, poweroff, and suspend
   * @summary Implements shutdown, poweroff, and suspend method for a virtual machine
   * @param resourceGroupName The name of the resource group
   * @param virtualMachineName virtual machine name
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginStop(resourceGroupName: string, virtualMachineName: string, options?: Models.VirtualMachinesBeginStopOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        virtualMachineName,
        options
      },
      beginStopOperationSpec,
      options);
  }

  /**
   * Returns list virtual machine within subscription
   * @summary Implements list virtual machine within subscription method
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachinesListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.VirtualMachineListResponse>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VirtualMachineListResponse>): void;
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VirtualMachineListResponse>, callback?: msRest.ServiceCallback<Models.VirtualMachineListResponse>): Promise<Models.VirtualMachinesListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.VirtualMachinesListBySubscriptionNextResponse>;
  }

  /**
   * Returns list of virtual machine within resource group
   * @summary Implements list virtual machine within RG method
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachinesListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.VirtualMachineListResponse>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VirtualMachineListResponse>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VirtualMachineListResponse>, callback?: msRest.ServiceCallback<Models.VirtualMachineListResponse>): Promise<Models.VirtualMachinesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.VirtualMachinesListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/virtualMachines",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachineListResponse
    },
    default: {
      bodyMapper: Mappers.CSRPError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachineListResponse
    },
    default: {
      bodyMapper: Mappers.CSRPError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualMachineName0
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachine
    },
    default: {
      bodyMapper: Mappers.CSRPError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualMachineName1
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.referer,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "virtualMachineRequest",
    mapper: {
      ...Mappers.VirtualMachine,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachine,
      headersMapper: Mappers.VirtualMachinesCreateOrUpdateHeaders
    },
    201: {
      bodyMapper: Mappers.VirtualMachine,
      headersMapper: Mappers.VirtualMachinesCreateOrUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.CSRPError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualMachineName0
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.referer,
    Parameters.acceptLanguage
  ],
  responses: {
    202: {
      headersMapper: Mappers.VirtualMachinesDeleteHeaders
    },
    204: {
      headersMapper: Mappers.VirtualMachinesDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.CSRPError
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualMachineName0
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      tags: [
        "options",
        "tags"
      ]
    },
    mapper: {
      ...Mappers.PatchPayload,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachine
    },
    default: {
      bodyMapper: Mappers.CSRPError
    }
  },
  serializer
};

const beginStartOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}/start",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualMachineName0
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.referer,
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      headersMapper: Mappers.VirtualMachinesStartHeaders
    },
    202: {
      headersMapper: Mappers.VirtualMachinesStartHeaders
    },
    default: {
      bodyMapper: Mappers.CSRPError
    }
  },
  serializer
};

const beginStopOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}/stop",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualMachineName0
  ],
  queryParameters: [
    Parameters.mode,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.referer,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      mode: [
        "options",
        "mode1"
      ]
    },
    mapper: Mappers.VirtualMachineStopMode
  },
  responses: {
    200: {
      headersMapper: Mappers.VirtualMachinesStopHeaders
    },
    202: {
      headersMapper: Mappers.VirtualMachinesStopHeaders
    },
    default: {
      bodyMapper: Mappers.CSRPError
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachineListResponse
    },
    default: {
      bodyMapper: Mappers.CSRPError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualMachineListResponse
    },
    default: {
      bodyMapper: Mappers.CSRPError
    }
  },
  serializer
};
