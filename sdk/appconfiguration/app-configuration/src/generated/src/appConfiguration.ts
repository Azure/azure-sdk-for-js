/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { AppConfigurationContext } from "./appConfigurationContext";

class AppConfiguration extends AppConfigurationContext {
  /**
   * Initializes a new instance of the AppConfiguration class.
   * @param apiVersion The API version to be used with the HTTP request.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param [options] The parameter options
   */
  constructor(credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials, apiVersion: string, options?: Models.AppConfigurationOptions) {
    super(credentials, apiVersion, options);
  }

  /**
   * @summary Gets a list of keys.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetKeysResponse>
   */
  getKeys(options?: Models.AppConfigurationGetKeysOptionalParams): Promise<Models.GetKeysResponse>;
  /**
   * @param callback The callback
   */
  getKeys(callback: coreHttp.ServiceCallback<Models.KeyListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getKeys(options: Models.AppConfigurationGetKeysOptionalParams, callback: coreHttp.ServiceCallback<Models.KeyListResult>): void;
  getKeys(options?: Models.AppConfigurationGetKeysOptionalParams | coreHttp.ServiceCallback<Models.KeyListResult>, callback?: coreHttp.ServiceCallback<Models.KeyListResult>): Promise<Models.GetKeysResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getKeysOperationSpec,
      callback) as Promise<Models.GetKeysResponse>;
  }

  /**
   * @summary Requests the headers and status of the given resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.CheckKeysResponse>
   */
  checkKeys(options?: Models.AppConfigurationCheckKeysOptionalParams): Promise<Models.CheckKeysResponse>;
  /**
   * @param callback The callback
   */
  checkKeys(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  checkKeys(options: Models.AppConfigurationCheckKeysOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  checkKeys(options?: Models.AppConfigurationCheckKeysOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.CheckKeysResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      checkKeysOperationSpec,
      callback) as Promise<Models.CheckKeysResponse>;
  }

  /**
   * @summary Gets a list of key-values.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetKeyValuesResponse>
   */
  getKeyValues(options?: Models.AppConfigurationGetKeyValuesOptionalParams): Promise<Models.GetKeyValuesResponse>;
  /**
   * @param callback The callback
   */
  getKeyValues(callback: coreHttp.ServiceCallback<Models.KeyValueListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getKeyValues(options: Models.AppConfigurationGetKeyValuesOptionalParams, callback: coreHttp.ServiceCallback<Models.KeyValueListResult>): void;
  getKeyValues(options?: Models.AppConfigurationGetKeyValuesOptionalParams | coreHttp.ServiceCallback<Models.KeyValueListResult>, callback?: coreHttp.ServiceCallback<Models.KeyValueListResult>): Promise<Models.GetKeyValuesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getKeyValuesOperationSpec,
      callback) as Promise<Models.GetKeyValuesResponse>;
  }

  /**
   * @summary Requests the headers and status of the given resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.CheckKeyValuesResponse>
   */
  checkKeyValues(options?: Models.AppConfigurationCheckKeyValuesOptionalParams): Promise<Models.CheckKeyValuesResponse>;
  /**
   * @param callback The callback
   */
  checkKeyValues(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  checkKeyValues(options: Models.AppConfigurationCheckKeyValuesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  checkKeyValues(options?: Models.AppConfigurationCheckKeyValuesOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.CheckKeyValuesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      checkKeyValuesOperationSpec,
      callback) as Promise<Models.CheckKeyValuesResponse>;
  }

  /**
   * @summary Gets a single key-value.
   * @param key The key of the key-value to retrieve.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetKeyValueResponse>
   */
  getKeyValue(key: string, options?: Models.AppConfigurationGetKeyValueOptionalParams): Promise<Models.GetKeyValueResponse>;
  /**
   * @param key The key of the key-value to retrieve.
   * @param callback The callback
   */
  getKeyValue(key: string, callback: coreHttp.ServiceCallback<Models.KeyValue>): void;
  /**
   * @param key The key of the key-value to retrieve.
   * @param options The optional parameters
   * @param callback The callback
   */
  getKeyValue(key: string, options: Models.AppConfigurationGetKeyValueOptionalParams, callback: coreHttp.ServiceCallback<Models.KeyValue>): void;
  getKeyValue(key: string, options?: Models.AppConfigurationGetKeyValueOptionalParams | coreHttp.ServiceCallback<Models.KeyValue>, callback?: coreHttp.ServiceCallback<Models.KeyValue>): Promise<Models.GetKeyValueResponse> {
    return this.sendOperationRequest(
      {
        key,
        options
      },
      getKeyValueOperationSpec,
      callback) as Promise<Models.GetKeyValueResponse>;
  }

  /**
   * @summary Creates a key-value.
   * @param key The key of the key-value to create.
   * @param [options] The optional parameters
   * @returns Promise<Models.PutKeyValueResponse>
   */
  putKeyValue(key: string, options?: Models.AppConfigurationPutKeyValueOptionalParams): Promise<Models.PutKeyValueResponse>;
  /**
   * @param key The key of the key-value to create.
   * @param callback The callback
   */
  putKeyValue(key: string, callback: coreHttp.ServiceCallback<Models.KeyValue>): void;
  /**
   * @param key The key of the key-value to create.
   * @param options The optional parameters
   * @param callback The callback
   */
  putKeyValue(key: string, options: Models.AppConfigurationPutKeyValueOptionalParams, callback: coreHttp.ServiceCallback<Models.KeyValue>): void;
  putKeyValue(key: string, options?: Models.AppConfigurationPutKeyValueOptionalParams | coreHttp.ServiceCallback<Models.KeyValue>, callback?: coreHttp.ServiceCallback<Models.KeyValue>): Promise<Models.PutKeyValueResponse> {
    return this.sendOperationRequest(
      {
        key,
        options
      },
      putKeyValueOperationSpec,
      callback) as Promise<Models.PutKeyValueResponse>;
  }

  /**
   * @summary Deletes a key-value.
   * @param key The key of the key-value to delete.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteKeyValueResponse>
   */
  deleteKeyValue(key: string, options?: Models.AppConfigurationDeleteKeyValueOptionalParams): Promise<Models.DeleteKeyValueResponse>;
  /**
   * @param key The key of the key-value to delete.
   * @param callback The callback
   */
  deleteKeyValue(key: string, callback: coreHttp.ServiceCallback<Models.KeyValue>): void;
  /**
   * @param key The key of the key-value to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteKeyValue(key: string, options: Models.AppConfigurationDeleteKeyValueOptionalParams, callback: coreHttp.ServiceCallback<Models.KeyValue>): void;
  deleteKeyValue(key: string, options?: Models.AppConfigurationDeleteKeyValueOptionalParams | coreHttp.ServiceCallback<Models.KeyValue>, callback?: coreHttp.ServiceCallback<Models.KeyValue>): Promise<Models.DeleteKeyValueResponse> {
    return this.sendOperationRequest(
      {
        key,
        options
      },
      deleteKeyValueOperationSpec,
      callback) as Promise<Models.DeleteKeyValueResponse>;
  }

  /**
   * @summary Requests the headers and status of the given resource.
   * @param key The key of the key-value to retrieve.
   * @param [options] The optional parameters
   * @returns Promise<Models.CheckKeyValueResponse>
   */
  checkKeyValue(key: string, options?: Models.AppConfigurationCheckKeyValueOptionalParams): Promise<Models.CheckKeyValueResponse>;
  /**
   * @param key The key of the key-value to retrieve.
   * @param callback The callback
   */
  checkKeyValue(key: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param key The key of the key-value to retrieve.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkKeyValue(key: string, options: Models.AppConfigurationCheckKeyValueOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  checkKeyValue(key: string, options?: Models.AppConfigurationCheckKeyValueOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.CheckKeyValueResponse> {
    return this.sendOperationRequest(
      {
        key,
        options
      },
      checkKeyValueOperationSpec,
      callback) as Promise<Models.CheckKeyValueResponse>;
  }

  /**
   * @summary Gets a list of labels.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetLabelsResponse>
   */
  getLabels(options?: Models.AppConfigurationGetLabelsOptionalParams): Promise<Models.GetLabelsResponse>;
  /**
   * @param callback The callback
   */
  getLabels(callback: coreHttp.ServiceCallback<Models.LabelListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getLabels(options: Models.AppConfigurationGetLabelsOptionalParams, callback: coreHttp.ServiceCallback<Models.LabelListResult>): void;
  getLabels(options?: Models.AppConfigurationGetLabelsOptionalParams | coreHttp.ServiceCallback<Models.LabelListResult>, callback?: coreHttp.ServiceCallback<Models.LabelListResult>): Promise<Models.GetLabelsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getLabelsOperationSpec,
      callback) as Promise<Models.GetLabelsResponse>;
  }

  /**
   * @summary Requests the headers and status of the given resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.CheckLabelsResponse>
   */
  checkLabels(options?: Models.AppConfigurationCheckLabelsOptionalParams): Promise<Models.CheckLabelsResponse>;
  /**
   * @param callback The callback
   */
  checkLabels(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  checkLabels(options: Models.AppConfigurationCheckLabelsOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  checkLabels(options?: Models.AppConfigurationCheckLabelsOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.CheckLabelsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      checkLabelsOperationSpec,
      callback) as Promise<Models.CheckLabelsResponse>;
  }

  /**
   * @summary Locks a key-value.
   * @param key The key of the key-value to lock.
   * @param [options] The optional parameters
   * @returns Promise<Models.PutLockResponse>
   */
  putLock(key: string, options?: Models.AppConfigurationPutLockOptionalParams): Promise<Models.PutLockResponse>;
  /**
   * @param key The key of the key-value to lock.
   * @param callback The callback
   */
  putLock(key: string, callback: coreHttp.ServiceCallback<Models.KeyValue>): void;
  /**
   * @param key The key of the key-value to lock.
   * @param options The optional parameters
   * @param callback The callback
   */
  putLock(key: string, options: Models.AppConfigurationPutLockOptionalParams, callback: coreHttp.ServiceCallback<Models.KeyValue>): void;
  putLock(key: string, options?: Models.AppConfigurationPutLockOptionalParams | coreHttp.ServiceCallback<Models.KeyValue>, callback?: coreHttp.ServiceCallback<Models.KeyValue>): Promise<Models.PutLockResponse> {
    return this.sendOperationRequest(
      {
        key,
        options
      },
      putLockOperationSpec,
      callback) as Promise<Models.PutLockResponse>;
  }

  /**
   * @summary Unlocks a key-value.
   * @param key The key of the key-value to unlock.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeleteLockResponse>
   */
  deleteLock(key: string, options?: Models.AppConfigurationDeleteLockOptionalParams): Promise<Models.DeleteLockResponse>;
  /**
   * @param key The key of the key-value to unlock.
   * @param callback The callback
   */
  deleteLock(key: string, callback: coreHttp.ServiceCallback<Models.KeyValue>): void;
  /**
   * @param key The key of the key-value to unlock.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteLock(key: string, options: Models.AppConfigurationDeleteLockOptionalParams, callback: coreHttp.ServiceCallback<Models.KeyValue>): void;
  deleteLock(key: string, options?: Models.AppConfigurationDeleteLockOptionalParams | coreHttp.ServiceCallback<Models.KeyValue>, callback?: coreHttp.ServiceCallback<Models.KeyValue>): Promise<Models.DeleteLockResponse> {
    return this.sendOperationRequest(
      {
        key,
        options
      },
      deleteLockOperationSpec,
      callback) as Promise<Models.DeleteLockResponse>;
  }

  /**
   * @summary Gets a list of key-value revisions.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetRevisionsResponse>
   */
  getRevisions(options?: Models.AppConfigurationGetRevisionsOptionalParams): Promise<Models.GetRevisionsResponse>;
  /**
   * @param callback The callback
   */
  getRevisions(callback: coreHttp.ServiceCallback<Models.KeyValueListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getRevisions(options: Models.AppConfigurationGetRevisionsOptionalParams, callback: coreHttp.ServiceCallback<Models.KeyValueListResult>): void;
  getRevisions(options?: Models.AppConfigurationGetRevisionsOptionalParams | coreHttp.ServiceCallback<Models.KeyValueListResult>, callback?: coreHttp.ServiceCallback<Models.KeyValueListResult>): Promise<Models.GetRevisionsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getRevisionsOperationSpec,
      callback) as Promise<Models.GetRevisionsResponse>;
  }

  /**
   * @summary Requests the headers and status of the given resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.CheckRevisionsResponse>
   */
  checkRevisions(options?: Models.AppConfigurationCheckRevisionsOptionalParams): Promise<Models.CheckRevisionsResponse>;
  /**
   * @param callback The callback
   */
  checkRevisions(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  checkRevisions(options: Models.AppConfigurationCheckRevisionsOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  checkRevisions(options?: Models.AppConfigurationCheckRevisionsOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.CheckRevisionsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      checkRevisionsOperationSpec,
      callback) as Promise<Models.CheckRevisionsResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const getKeysOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "keys",
  queryParameters: [
    Parameters.name,
    Parameters.apiVersion,
    Parameters.after
  ],
  headerParameters: [
    Parameters.syncToken,
    Parameters.acceptDatetime
  ],
  responses: {
    200: {
      bodyMapper: Mappers.KeyListResult,
      headersMapper: Mappers.GetKeysHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const checkKeysOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "HEAD",
  path: "keys",
  queryParameters: [
    Parameters.name,
    Parameters.apiVersion,
    Parameters.after
  ],
  headerParameters: [
    Parameters.syncToken,
    Parameters.acceptDatetime
  ],
  responses: {
    200: {
      headersMapper: Mappers.CheckKeysHeaders
    },
    default: {}
  },
  serializer
};

const getKeyValuesOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "kv",
  queryParameters: [
    Parameters.key0,
    Parameters.label,
    Parameters.apiVersion,
    Parameters.after,
    Parameters.select
  ],
  headerParameters: [
    Parameters.syncToken,
    Parameters.acceptDatetime
  ],
  responses: {
    200: {
      bodyMapper: Mappers.KeyValueListResult,
      headersMapper: Mappers.GetKeyValuesHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const checkKeyValuesOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "HEAD",
  path: "kv",
  queryParameters: [
    Parameters.key0,
    Parameters.label,
    Parameters.apiVersion,
    Parameters.after,
    Parameters.select
  ],
  headerParameters: [
    Parameters.syncToken,
    Parameters.acceptDatetime
  ],
  responses: {
    200: {
      headersMapper: Mappers.CheckKeyValuesHeaders
    },
    default: {}
  },
  serializer
};

const getKeyValueOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "kv/{key}",
  urlParameters: [
    Parameters.key1
  ],
  queryParameters: [
    Parameters.label,
    Parameters.apiVersion,
    Parameters.select
  ],
  headerParameters: [
    Parameters.syncToken,
    Parameters.acceptDatetime,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.KeyValue,
      headersMapper: Mappers.GetKeyValueHeaders
    },
    304: {
      headersMapper: Mappers.GetKeyValueHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const putKeyValueOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "kv/{key}",
  urlParameters: [
    Parameters.key1
  ],
  queryParameters: [
    Parameters.label,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.syncToken,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  requestBody: {
    parameterPath: [
      "options",
      "entity"
    ],
    mapper: Mappers.KeyValue
  },
  responses: {
    200: {
      bodyMapper: Mappers.KeyValue,
      headersMapper: Mappers.PutKeyValueHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const deleteKeyValueOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "kv/{key}",
  urlParameters: [
    Parameters.key1
  ],
  queryParameters: [
    Parameters.label,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.syncToken,
    Parameters.ifMatch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.KeyValue,
      headersMapper: Mappers.DeleteKeyValueHeaders
    },
    204: {
      headersMapper: Mappers.DeleteKeyValueHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const checkKeyValueOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "HEAD",
  path: "kv/{key}",
  urlParameters: [
    Parameters.key1
  ],
  queryParameters: [
    Parameters.label,
    Parameters.apiVersion,
    Parameters.select
  ],
  headerParameters: [
    Parameters.syncToken,
    Parameters.acceptDatetime,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  responses: {
    200: {
      headersMapper: Mappers.CheckKeyValueHeaders
    },
    304: {
      headersMapper: Mappers.CheckKeyValueHeaders
    },
    default: {}
  },
  serializer
};

const getLabelsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "labels",
  queryParameters: [
    Parameters.name,
    Parameters.apiVersion,
    Parameters.after,
    Parameters.select
  ],
  headerParameters: [
    Parameters.syncToken,
    Parameters.acceptDatetime
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LabelListResult,
      headersMapper: Mappers.GetLabelsHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const checkLabelsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "HEAD",
  path: "labels",
  queryParameters: [
    Parameters.name,
    Parameters.apiVersion,
    Parameters.after,
    Parameters.select
  ],
  headerParameters: [
    Parameters.syncToken,
    Parameters.acceptDatetime
  ],
  responses: {
    200: {
      headersMapper: Mappers.CheckLabelsHeaders
    },
    default: {}
  },
  serializer
};

const putLockOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "locks/{key}",
  urlParameters: [
    Parameters.key1
  ],
  queryParameters: [
    Parameters.label,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.syncToken,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.KeyValue,
      headersMapper: Mappers.PutLockHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const deleteLockOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "locks/{key}",
  urlParameters: [
    Parameters.key1
  ],
  queryParameters: [
    Parameters.label,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.syncToken,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  responses: {
    200: {
      bodyMapper: Mappers.KeyValue,
      headersMapper: Mappers.DeleteLockHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getRevisionsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "revisions",
  queryParameters: [
    Parameters.key0,
    Parameters.label,
    Parameters.apiVersion,
    Parameters.after,
    Parameters.select
  ],
  headerParameters: [
    Parameters.syncToken,
    Parameters.acceptDatetime
  ],
  responses: {
    200: {
      bodyMapper: Mappers.KeyValueListResult,
      headersMapper: Mappers.GetRevisionsHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const checkRevisionsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "HEAD",
  path: "revisions",
  queryParameters: [
    Parameters.key0,
    Parameters.label,
    Parameters.apiVersion,
    Parameters.after,
    Parameters.select
  ],
  headerParameters: [
    Parameters.syncToken,
    Parameters.acceptDatetime
  ],
  responses: {
    200: {
      headersMapper: Mappers.CheckRevisionsHeaders
    },
    default: {}
  },
  serializer
};

export {
  AppConfiguration,
  AppConfigurationContext,
  Models as AppConfigurationModels,
  Mappers as AppConfigurationMappers
};
