/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Snapshots } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AppConfigurationManagementClient } from "../appConfigurationManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  SnapshotsGetOptionalParams,
  SnapshotsGetResponse,
  Snapshot,
  SnapshotsCreateOptionalParams,
  SnapshotsCreateResponse,
} from "../models";

/** Class containing Snapshots operations. */
export class SnapshotsImpl implements Snapshots {
  private readonly client: AppConfigurationManagementClient;

  /**
   * Initialize a new instance of the class Snapshots class.
   * @param client Reference to the service client
   */
  constructor(client: AppConfigurationManagementClient) {
    this.client = client;
  }

  /**
   * Gets the properties of the specified snapshot. NOTE: This operation is intended for use in Azure
   * Resource Manager (ARM) Template deployments. For all other scenarios involving App Configuration
   * snapshots the data plane API should be used instead.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param configStoreName The name of the configuration store.
   * @param snapshotName The name of the snapshot.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    configStoreName: string,
    snapshotName: string,
    options?: SnapshotsGetOptionalParams,
  ): Promise<SnapshotsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, configStoreName, snapshotName, options },
      getOperationSpec,
    );
  }

  /**
   * Creates a snapshot. NOTE: This operation is intended for use in Azure Resource Manager (ARM)
   * Template deployments. For all other scenarios involving App Configuration snapshots the data plane
   * API should be used instead.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param configStoreName The name of the configuration store.
   * @param snapshotName The name of the snapshot.
   * @param body The parameters for creating a snapshot.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    configStoreName: string,
    snapshotName: string,
    body: Snapshot,
    options?: SnapshotsCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SnapshotsCreateResponse>,
      SnapshotsCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SnapshotsCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, configStoreName, snapshotName, body, options },
      spec: createOperationSpec,
    });
    const poller = await createHttpPoller<
      SnapshotsCreateResponse,
      OperationState<SnapshotsCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates a snapshot. NOTE: This operation is intended for use in Azure Resource Manager (ARM)
   * Template deployments. For all other scenarios involving App Configuration snapshots the data plane
   * API should be used instead.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param configStoreName The name of the configuration store.
   * @param snapshotName The name of the snapshot.
   * @param body The parameters for creating a snapshot.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    configStoreName: string,
    snapshotName: string,
    body: Snapshot,
    options?: SnapshotsCreateOptionalParams,
  ): Promise<SnapshotsCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      configStoreName,
      snapshotName,
      body,
      options,
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/snapshots/{snapshotName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Snapshot,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.configStoreName,
    Parameters.resourceGroupName1,
    Parameters.snapshotName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/snapshots/{snapshotName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Snapshot,
    },
    201: {
      bodyMapper: Mappers.Snapshot,
    },
    202: {
      bodyMapper: Mappers.Snapshot,
    },
    204: {
      bodyMapper: Mappers.Snapshot,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.configStoreName,
    Parameters.resourceGroupName1,
    Parameters.snapshotName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
