/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/keyValuesMappers";
import * as Parameters from "../models/parameters";
import { AppConfigurationManagementClientContext } from "../appConfigurationManagementClientContext";

/** Class representing a KeyValues. */
export class KeyValues {
  private readonly client: AppConfigurationManagementClientContext;

  /**
   * Create a KeyValues.
   * @param {AppConfigurationManagementClientContext} client Reference to the service client.
   */
  constructor(client: AppConfigurationManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists the key-values for a given configuration store.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param configStoreName The name of the configuration store.
   * @param [options] The optional parameters
   * @returns Promise<Models.KeyValuesListByConfigurationStoreResponse>
   */
  listByConfigurationStore(resourceGroupName: string, configStoreName: string, options?: Models.KeyValuesListByConfigurationStoreOptionalParams): Promise<Models.KeyValuesListByConfigurationStoreResponse>;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param configStoreName The name of the configuration store.
   * @param callback The callback
   */
  listByConfigurationStore(resourceGroupName: string, configStoreName: string, callback: msRest.ServiceCallback<Models.KeyValueListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param configStoreName The name of the configuration store.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByConfigurationStore(resourceGroupName: string, configStoreName: string, options: Models.KeyValuesListByConfigurationStoreOptionalParams, callback: msRest.ServiceCallback<Models.KeyValueListResult>): void;
  listByConfigurationStore(resourceGroupName: string, configStoreName: string, options?: Models.KeyValuesListByConfigurationStoreOptionalParams | msRest.ServiceCallback<Models.KeyValueListResult>, callback?: msRest.ServiceCallback<Models.KeyValueListResult>): Promise<Models.KeyValuesListByConfigurationStoreResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        configStoreName,
        options
      },
      listByConfigurationStoreOperationSpec,
      callback) as Promise<Models.KeyValuesListByConfigurationStoreResponse>;
  }

  /**
   * Gets the properties of the specified key-value.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param configStoreName The name of the configuration store.
   * @param keyValueName Identifier of key and label combination. Key and label are joined by $
   * character. Label is optional.
   * @param [options] The optional parameters
   * @returns Promise<Models.KeyValuesGetResponse>
   */
  get(resourceGroupName: string, configStoreName: string, keyValueName: string, options?: msRest.RequestOptionsBase): Promise<Models.KeyValuesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param configStoreName The name of the configuration store.
   * @param keyValueName Identifier of key and label combination. Key and label are joined by $
   * character. Label is optional.
   * @param callback The callback
   */
  get(resourceGroupName: string, configStoreName: string, keyValueName: string, callback: msRest.ServiceCallback<Models.KeyValue>): void;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param configStoreName The name of the configuration store.
   * @param keyValueName Identifier of key and label combination. Key and label are joined by $
   * character. Label is optional.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, configStoreName: string, keyValueName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.KeyValue>): void;
  get(resourceGroupName: string, configStoreName: string, keyValueName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.KeyValue>, callback?: msRest.ServiceCallback<Models.KeyValue>): Promise<Models.KeyValuesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        configStoreName,
        keyValueName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.KeyValuesGetResponse>;
  }

  /**
   * Creates a key-value.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param configStoreName The name of the configuration store.
   * @param keyValueName Identifier of key and label combination. Key and label are joined by $
   * character. Label is optional.
   * @param [options] The optional parameters
   * @returns Promise<Models.KeyValuesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, configStoreName: string, keyValueName: string, options?: Models.KeyValuesCreateOrUpdateOptionalParams): Promise<Models.KeyValuesCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param configStoreName The name of the configuration store.
   * @param keyValueName Identifier of key and label combination. Key and label are joined by $
   * character. Label is optional.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, configStoreName: string, keyValueName: string, callback: msRest.ServiceCallback<Models.KeyValue>): void;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param configStoreName The name of the configuration store.
   * @param keyValueName Identifier of key and label combination. Key and label are joined by $
   * character. Label is optional.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, configStoreName: string, keyValueName: string, options: Models.KeyValuesCreateOrUpdateOptionalParams, callback: msRest.ServiceCallback<Models.KeyValue>): void;
  createOrUpdate(resourceGroupName: string, configStoreName: string, keyValueName: string, options?: Models.KeyValuesCreateOrUpdateOptionalParams | msRest.ServiceCallback<Models.KeyValue>, callback?: msRest.ServiceCallback<Models.KeyValue>): Promise<Models.KeyValuesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        configStoreName,
        keyValueName,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.KeyValuesCreateOrUpdateResponse>;
  }

  /**
   * Deletes a key-value.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param configStoreName The name of the configuration store.
   * @param keyValueName Identifier of key and label combination. Key and label are joined by $
   * character. Label is optional.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, configStoreName: string, keyValueName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,configStoreName,keyValueName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Deletes a key-value.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param configStoreName The name of the configuration store.
   * @param keyValueName Identifier of key and label combination. Key and label are joined by $
   * character. Label is optional.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, configStoreName: string, keyValueName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        configStoreName,
        keyValueName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Lists the key-values for a given configuration store.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.KeyValuesListByConfigurationStoreNextResponse>
   */
  listByConfigurationStoreNext(nextPageLink: string, options?: Models.KeyValuesListByConfigurationStoreNextOptionalParams): Promise<Models.KeyValuesListByConfigurationStoreNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByConfigurationStoreNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.KeyValueListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByConfigurationStoreNext(nextPageLink: string, options: Models.KeyValuesListByConfigurationStoreNextOptionalParams, callback: msRest.ServiceCallback<Models.KeyValueListResult>): void;
  listByConfigurationStoreNext(nextPageLink: string, options?: Models.KeyValuesListByConfigurationStoreNextOptionalParams | msRest.ServiceCallback<Models.KeyValueListResult>, callback?: msRest.ServiceCallback<Models.KeyValueListResult>): Promise<Models.KeyValuesListByConfigurationStoreNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByConfigurationStoreNextOperationSpec,
      callback) as Promise<Models.KeyValuesListByConfigurationStoreNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByConfigurationStoreOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/keyValues",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.configStoreName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.KeyValueListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/keyValues/{keyValueName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.configStoreName,
    Parameters.keyValueName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.KeyValue
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/keyValues/{keyValueName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.configStoreName,
    Parameters.keyValueName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "keyValueParameters"
    ],
    mapper: Mappers.KeyValue
  },
  responses: {
    200: {
      bodyMapper: Mappers.KeyValue
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/keyValues/{keyValueName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.configStoreName,
    Parameters.keyValueName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByConfigurationStoreNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.KeyValueListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
