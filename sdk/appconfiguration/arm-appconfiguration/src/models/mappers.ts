/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ConfigurationStore: msRest.CompositeMapper = {
  serializedName: "ConfigurationStore",
  type: {
    name: "Composite",
    className: "ConfigurationStore",
    modelProperties: {
      ...Resource.type.modelProperties,
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      creationDate: {
        readOnly: true,
        serializedName: "properties.creationDate",
        type: {
          name: "DateTime"
        }
      },
      endpoint: {
        readOnly: true,
        serializedName: "properties.endpoint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConfigurationStoreUpdateParameters: msRest.CompositeMapper = {
  serializedName: "ConfigurationStoreUpdateParameters",
  type: {
    name: "Composite",
    className: "ConfigurationStoreUpdateParameters",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Object"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const CheckNameAvailabilityParameters: msRest.CompositeMapper = {
  serializedName: "CheckNameAvailabilityParameters",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityParameters",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        isConstant: true,
        serializedName: "type",
        defaultValue: 'Microsoft.AppConfiguration/configurationStores',
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NameAvailabilityStatus: msRest.CompositeMapper = {
  serializedName: "NameAvailabilityStatus",
  type: {
    name: "Composite",
    className: "NameAvailabilityStatus",
    modelProperties: {
      nameAvailable: {
        readOnly: true,
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      reason: {
        readOnly: true,
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiKey: msRest.CompositeMapper = {
  serializedName: "ApiKey",
  type: {
    name: "Composite",
    className: "ApiKey",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      connectionString: {
        readOnly: true,
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      },
      lastModified: {
        readOnly: true,
        serializedName: "lastModified",
        type: {
          name: "DateTime"
        }
      },
      readOnly: {
        readOnly: true,
        serializedName: "readOnly",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const RegenerateKeyParameters: msRest.CompositeMapper = {
  serializedName: "RegenerateKeyParameters",
  type: {
    name: "Composite",
    className: "RegenerateKeyParameters",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListKeyValueParameters: msRest.CompositeMapper = {
  serializedName: "ListKeyValueParameters",
  type: {
    name: "Composite",
    className: "ListKeyValueParameters",
    modelProperties: {
      key: {
        required: true,
        serializedName: "key",
        type: {
          name: "String"
        }
      },
      label: {
        serializedName: "label",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyValue: msRest.CompositeMapper = {
  serializedName: "KeyValue",
  type: {
    name: "Composite",
    className: "KeyValue",
    modelProperties: {
      key: {
        readOnly: true,
        serializedName: "key",
        type: {
          name: "String"
        }
      },
      label: {
        readOnly: true,
        serializedName: "label",
        type: {
          name: "String"
        }
      },
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      contentType: {
        readOnly: true,
        serializedName: "contentType",
        type: {
          name: "String"
        }
      },
      eTag: {
        readOnly: true,
        serializedName: "eTag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        readOnly: true,
        serializedName: "lastModified",
        type: {
          name: "DateTime"
        }
      },
      locked: {
        readOnly: true,
        serializedName: "locked",
        type: {
          name: "Boolean"
        }
      },
      tags: {
        readOnly: true,
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const OperationDefinitionDisplay: msRest.CompositeMapper = {
  serializedName: "OperationDefinitionDisplay",
  type: {
    name: "Composite",
    className: "OperationDefinitionDisplay",
    modelProperties: {
      provider: {
        readOnly: true,
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDefinition: msRest.CompositeMapper = {
  serializedName: "OperationDefinition",
  type: {
    name: "Composite",
    className: "OperationDefinition",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDefinitionDisplay"
        }
      }
    }
  }
};

export const ErrorModel: msRest.CompositeMapper = {
  serializedName: "Error",
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConfigurationStoreListResult: msRest.CompositeMapper = {
  serializedName: "ConfigurationStoreListResult",
  type: {
    name: "Composite",
    className: "ConfigurationStoreListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConfigurationStore"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiKeyListResult: msRest.CompositeMapper = {
  serializedName: "ApiKeyListResult",
  type: {
    name: "Composite",
    className: "ApiKeyListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApiKey"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDefinitionListResult: msRest.CompositeMapper = {
  serializedName: "OperationDefinitionListResult",
  type: {
    name: "Composite",
    className: "OperationDefinitionListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationDefinition"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};
