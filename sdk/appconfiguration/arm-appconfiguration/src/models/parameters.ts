/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  ConfigurationStore as ConfigurationStoreMapper,
  ConfigurationStoreUpdateParameters as ConfigurationStoreUpdateParametersMapper,
  RegenerateKeyParameters as RegenerateKeyParametersMapper,
  CheckNameAvailabilityParameters as CheckNameAvailabilityParametersMapper,
  PrivateEndpointConnection as PrivateEndpointConnectionMapper,
  KeyValue as KeyValueMapper,
  Replica as ReplicaMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2023-03-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const skipToken: OperationQueryParameter = {
  parameterPath: ["options", "skipToken"],
  mapper: {
    serializedName: "$skipToken",
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const configStoreName: OperationURLParameter = {
  parameterPath: "configStoreName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9_-]*$"),
      MaxLength: 50,
      MinLength: 5
    },
    serializedName: "configStoreName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const configStoreCreationParameters: OperationParameter = {
  parameterPath: "configStoreCreationParameters",
  mapper: ConfigurationStoreMapper
};

export const configStoreUpdateParameters: OperationParameter = {
  parameterPath: "configStoreUpdateParameters",
  mapper: ConfigurationStoreUpdateParametersMapper
};

export const regenerateKeyParameters: OperationParameter = {
  parameterPath: "regenerateKeyParameters",
  mapper: RegenerateKeyParametersMapper
};

export const location: OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    serializedName: "location",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const checkNameAvailabilityParameters: OperationParameter = {
  parameterPath: "checkNameAvailabilityParameters",
  mapper: CheckNameAvailabilityParametersMapper
};

export const privateEndpointConnectionName: OperationURLParameter = {
  parameterPath: "privateEndpointConnectionName",
  mapper: {
    serializedName: "privateEndpointConnectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const privateEndpointConnection: OperationParameter = {
  parameterPath: "privateEndpointConnection",
  mapper: PrivateEndpointConnectionMapper
};

export const groupName: OperationURLParameter = {
  parameterPath: "groupName",
  mapper: {
    serializedName: "groupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const keyValueName: OperationURLParameter = {
  parameterPath: "keyValueName",
  mapper: {
    serializedName: "keyValueName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const keyValueParameters: OperationParameter = {
  parameterPath: ["options", "keyValueParameters"],
  mapper: KeyValueMapper
};

export const replicaName: OperationURLParameter = {
  parameterPath: "replicaName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9]*$")
    },
    serializedName: "replicaName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const replicaCreationParameters: OperationParameter = {
  parameterPath: "replicaCreationParameters",
  mapper: ReplicaMapper
};

export const replicaName1: OperationURLParameter = {
  parameterPath: "replicaName",
  mapper: {
    serializedName: "replicaName",
    required: true,
    type: {
      name: "String"
    }
  }
};
