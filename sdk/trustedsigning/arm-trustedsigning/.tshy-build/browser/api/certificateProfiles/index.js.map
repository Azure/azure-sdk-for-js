{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/api/certificateProfiles/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport {\n  certificateProfilePropertiesSerializer,\n  CertificateProfile,\n  RevokeCertificate,\n  _CertificateProfileListResult,\n} from \"../../models/models.js\";\nimport { CodeSigningContext as Client } from \"../index.js\";\nimport {\n  StreamableMethod,\n  operationOptionsToRequestParameters,\n  PathUncheckedResponse,\n  createRestError,\n} from \"@azure-rest/core-client\";\nimport {\n  PagedAsyncIterableIterator,\n  buildPagedAsyncIterator,\n} from \"../../static-helpers/pagingHelpers.js\";\nimport { getLongRunningPoller } from \"../../static-helpers/pollingHelpers.js\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  CertificateProfilesGetOptionalParams,\n  CertificateProfilesCreateOptionalParams,\n  CertificateProfilesDeleteOptionalParams,\n  CertificateProfilesListByCodeSigningAccountOptionalParams,\n  CertificateProfilesRevokeCertificateOptionalParams,\n} from \"../../models/options.js\";\n\nexport function _getSend(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  accountName: string,\n  profileName: string,\n  options: CertificateProfilesGetOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\n      \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}\",\n      subscriptionId,\n      resourceGroupName,\n      accountName,\n      profileName,\n    )\n    .get({ ...operationOptionsToRequestParameters(options) });\n}\n\nexport async function _getDeserialize(result: PathUncheckedResponse): Promise<CertificateProfile> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return {\n    id: result.body[\"id\"],\n    name: result.body[\"name\"],\n    type: result.body[\"type\"],\n    systemData: !result.body.systemData\n      ? undefined\n      : {\n          createdBy: result.body.systemData?.[\"createdBy\"],\n          createdByType: result.body.systemData?.[\"createdByType\"],\n          createdAt:\n            result.body.systemData?.[\"createdAt\"] !== undefined\n              ? new Date(result.body.systemData?.[\"createdAt\"])\n              : undefined,\n          lastModifiedBy: result.body.systemData?.[\"lastModifiedBy\"],\n          lastModifiedByType: result.body.systemData?.[\"lastModifiedByType\"],\n          lastModifiedAt:\n            result.body.systemData?.[\"lastModifiedAt\"] !== undefined\n              ? new Date(result.body.systemData?.[\"lastModifiedAt\"])\n              : undefined,\n        },\n    properties: !result.body.properties\n      ? undefined\n      : {\n          profileType: result.body.properties?.[\"profileType\"],\n          commonName: result.body.properties?.[\"commonName\"],\n          organization: result.body.properties?.[\"organization\"],\n          organizationUnit: result.body.properties?.[\"organizationUnit\"],\n          streetAddress: result.body.properties?.[\"streetAddress\"],\n          includeStreetAddress: result.body.properties?.[\"includeStreetAddress\"],\n          city: result.body.properties?.[\"city\"],\n          includeCity: result.body.properties?.[\"includeCity\"],\n          state: result.body.properties?.[\"state\"],\n          includeState: result.body.properties?.[\"includeState\"],\n          country: result.body.properties?.[\"country\"],\n          includeCountry: result.body.properties?.[\"includeCountry\"],\n          postalCode: result.body.properties?.[\"postalCode\"],\n          includePostalCode: result.body.properties?.[\"includePostalCode\"],\n          enhancedKeyUsage: result.body.properties?.[\"enhancedKeyUsage\"],\n          identityValidationId: result.body.properties?.[\"identityValidationId\"],\n          provisioningState: result.body.properties?.[\"provisioningState\"],\n          status: result.body.properties?.[\"status\"],\n          certificates:\n            result.body.properties?.[\"certificates\"] === undefined\n              ? result.body.properties?.[\"certificates\"]\n              : result.body.properties?.[\"certificates\"].map((p: any) => {\n                  return {\n                    serialNumber: p[\"serialNumber\"],\n                    subjectName: p[\"subjectName\"],\n                    thumbprint: p[\"thumbprint\"],\n                    createdDate: p[\"createdDate\"],\n                    expiryDate: p[\"expiryDate\"],\n                    status: p[\"status\"],\n                    revocation: !p.revocation\n                      ? undefined\n                      : {\n                          requestedAt:\n                            p.revocation?.[\"requestedAt\"] !== undefined\n                              ? new Date(p.revocation?.[\"requestedAt\"])\n                              : undefined,\n                          effectiveAt:\n                            p.revocation?.[\"effectiveAt\"] !== undefined\n                              ? new Date(p.revocation?.[\"effectiveAt\"])\n                              : undefined,\n                          reason: p.revocation?.[\"reason\"],\n                          remarks: p.revocation?.[\"remarks\"],\n                          status: p.revocation?.[\"status\"],\n                          failureReason: p.revocation?.[\"failureReason\"],\n                        },\n                  };\n                }),\n        },\n  };\n}\n\n/** Get details of a certificate profile. */\nexport async function get(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  accountName: string,\n  profileName: string,\n  options: CertificateProfilesGetOptionalParams = { requestOptions: {} },\n): Promise<CertificateProfile> {\n  const result = await _getSend(\n    context,\n    subscriptionId,\n    resourceGroupName,\n    accountName,\n    profileName,\n    options,\n  );\n  return _getDeserialize(result);\n}\n\nexport function _createSend(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  accountName: string,\n  profileName: string,\n  resource: CertificateProfile,\n  options: CertificateProfilesCreateOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\n      \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}\",\n      subscriptionId,\n      resourceGroupName,\n      accountName,\n      profileName,\n    )\n    .put({\n      ...operationOptionsToRequestParameters(options),\n      body: {\n        properties: !resource.properties\n          ? resource.properties\n          : certificateProfilePropertiesSerializer(resource.properties),\n      },\n    });\n}\n\nexport async function _createDeserialize(\n  result: PathUncheckedResponse,\n): Promise<CertificateProfile> {\n  const expectedStatuses = [\"200\", \"201\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return {\n    id: result.body[\"id\"],\n    name: result.body[\"name\"],\n    type: result.body[\"type\"],\n    systemData: !result.body.systemData\n      ? undefined\n      : {\n          createdBy: result.body.systemData?.[\"createdBy\"],\n          createdByType: result.body.systemData?.[\"createdByType\"],\n          createdAt:\n            result.body.systemData?.[\"createdAt\"] !== undefined\n              ? new Date(result.body.systemData?.[\"createdAt\"])\n              : undefined,\n          lastModifiedBy: result.body.systemData?.[\"lastModifiedBy\"],\n          lastModifiedByType: result.body.systemData?.[\"lastModifiedByType\"],\n          lastModifiedAt:\n            result.body.systemData?.[\"lastModifiedAt\"] !== undefined\n              ? new Date(result.body.systemData?.[\"lastModifiedAt\"])\n              : undefined,\n        },\n    properties: !result.body.properties\n      ? undefined\n      : {\n          profileType: result.body.properties?.[\"profileType\"],\n          commonName: result.body.properties?.[\"commonName\"],\n          organization: result.body.properties?.[\"organization\"],\n          organizationUnit: result.body.properties?.[\"organizationUnit\"],\n          streetAddress: result.body.properties?.[\"streetAddress\"],\n          includeStreetAddress: result.body.properties?.[\"includeStreetAddress\"],\n          city: result.body.properties?.[\"city\"],\n          includeCity: result.body.properties?.[\"includeCity\"],\n          state: result.body.properties?.[\"state\"],\n          includeState: result.body.properties?.[\"includeState\"],\n          country: result.body.properties?.[\"country\"],\n          includeCountry: result.body.properties?.[\"includeCountry\"],\n          postalCode: result.body.properties?.[\"postalCode\"],\n          includePostalCode: result.body.properties?.[\"includePostalCode\"],\n          enhancedKeyUsage: result.body.properties?.[\"enhancedKeyUsage\"],\n          identityValidationId: result.body.properties?.[\"identityValidationId\"],\n          provisioningState: result.body.properties?.[\"provisioningState\"],\n          status: result.body.properties?.[\"status\"],\n          certificates:\n            result.body.properties?.[\"certificates\"] === undefined\n              ? result.body.properties?.[\"certificates\"]\n              : result.body.properties?.[\"certificates\"].map((p: any) => {\n                  return {\n                    serialNumber: p[\"serialNumber\"],\n                    subjectName: p[\"subjectName\"],\n                    thumbprint: p[\"thumbprint\"],\n                    createdDate: p[\"createdDate\"],\n                    expiryDate: p[\"expiryDate\"],\n                    status: p[\"status\"],\n                    revocation: !p.revocation\n                      ? undefined\n                      : {\n                          requestedAt:\n                            p.revocation?.[\"requestedAt\"] !== undefined\n                              ? new Date(p.revocation?.[\"requestedAt\"])\n                              : undefined,\n                          effectiveAt:\n                            p.revocation?.[\"effectiveAt\"] !== undefined\n                              ? new Date(p.revocation?.[\"effectiveAt\"])\n                              : undefined,\n                          reason: p.revocation?.[\"reason\"],\n                          remarks: p.revocation?.[\"remarks\"],\n                          status: p.revocation?.[\"status\"],\n                          failureReason: p.revocation?.[\"failureReason\"],\n                        },\n                  };\n                }),\n        },\n  };\n}\n\n/** Create a certificate profile. */\nexport function create(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  accountName: string,\n  profileName: string,\n  resource: CertificateProfile,\n  options: CertificateProfilesCreateOptionalParams = { requestOptions: {} },\n): PollerLike<OperationState<CertificateProfile>, CertificateProfile> {\n  return getLongRunningPoller(context, _createDeserialize, [\"200\", \"201\"], {\n    updateIntervalInMs: options?.updateIntervalInMs,\n    abortSignal: options?.abortSignal,\n    getInitialResponse: () =>\n      _createSend(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        accountName,\n        profileName,\n        resource,\n        options,\n      ),\n    resourceLocationConfig: \"azure-async-operation\",\n  }) as PollerLike<OperationState<CertificateProfile>, CertificateProfile>;\n}\n\nexport function _$deleteSend(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  accountName: string,\n  profileName: string,\n  options: CertificateProfilesDeleteOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\n      \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}\",\n      subscriptionId,\n      resourceGroupName,\n      accountName,\n      profileName,\n    )\n    .delete({ ...operationOptionsToRequestParameters(options) });\n}\n\nexport async function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void> {\n  const expectedStatuses = [\"202\", \"204\", \"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return;\n}\n\n/** Delete a certificate profile. */\n/**\n *  @fixme delete is a reserved word that cannot be used as an operation name.\n *         Please add @clientName(\"clientName\") or @clientName(\"<JS-Specific-Name>\", \"javascript\")\n *         to the operation to override the generated name.\n */\nexport function $delete(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  accountName: string,\n  profileName: string,\n  options: CertificateProfilesDeleteOptionalParams = { requestOptions: {} },\n): PollerLike<OperationState<void>, void> {\n  return getLongRunningPoller(context, _$deleteDeserialize, [\"202\", \"204\", \"200\"], {\n    updateIntervalInMs: options?.updateIntervalInMs,\n    abortSignal: options?.abortSignal,\n    getInitialResponse: () =>\n      _$deleteSend(context, subscriptionId, resourceGroupName, accountName, profileName, options),\n    resourceLocationConfig: \"location\",\n  }) as PollerLike<OperationState<void>, void>;\n}\n\nexport function _listByCodeSigningAccountSend(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  accountName: string,\n  options: CertificateProfilesListByCodeSigningAccountOptionalParams = {\n    requestOptions: {},\n  },\n): StreamableMethod {\n  return context\n    .path(\n      \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles\",\n      subscriptionId,\n      resourceGroupName,\n      accountName,\n    )\n    .get({ ...operationOptionsToRequestParameters(options) });\n}\n\nexport async function _listByCodeSigningAccountDeserialize(\n  result: PathUncheckedResponse,\n): Promise<_CertificateProfileListResult> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return {\n    value: result.body[\"value\"].map((p: any) => {\n      return {\n        id: p[\"id\"],\n        name: p[\"name\"],\n        type: p[\"type\"],\n        systemData: !p.systemData\n          ? undefined\n          : {\n              createdBy: p.systemData?.[\"createdBy\"],\n              createdByType: p.systemData?.[\"createdByType\"],\n              createdAt:\n                p.systemData?.[\"createdAt\"] !== undefined\n                  ? new Date(p.systemData?.[\"createdAt\"])\n                  : undefined,\n              lastModifiedBy: p.systemData?.[\"lastModifiedBy\"],\n              lastModifiedByType: p.systemData?.[\"lastModifiedByType\"],\n              lastModifiedAt:\n                p.systemData?.[\"lastModifiedAt\"] !== undefined\n                  ? new Date(p.systemData?.[\"lastModifiedAt\"])\n                  : undefined,\n            },\n        properties: !p.properties\n          ? undefined\n          : {\n              profileType: p.properties?.[\"profileType\"],\n              commonName: p.properties?.[\"commonName\"],\n              organization: p.properties?.[\"organization\"],\n              organizationUnit: p.properties?.[\"organizationUnit\"],\n              streetAddress: p.properties?.[\"streetAddress\"],\n              includeStreetAddress: p.properties?.[\"includeStreetAddress\"],\n              city: p.properties?.[\"city\"],\n              includeCity: p.properties?.[\"includeCity\"],\n              state: p.properties?.[\"state\"],\n              includeState: p.properties?.[\"includeState\"],\n              country: p.properties?.[\"country\"],\n              includeCountry: p.properties?.[\"includeCountry\"],\n              postalCode: p.properties?.[\"postalCode\"],\n              includePostalCode: p.properties?.[\"includePostalCode\"],\n              enhancedKeyUsage: p.properties?.[\"enhancedKeyUsage\"],\n              identityValidationId: p.properties?.[\"identityValidationId\"],\n              provisioningState: p.properties?.[\"provisioningState\"],\n              status: p.properties?.[\"status\"],\n              certificates:\n                p.properties?.[\"certificates\"] === undefined\n                  ? p.properties?.[\"certificates\"]\n                  : p.properties?.[\"certificates\"].map((p: any) => {\n                      return {\n                        serialNumber: p[\"serialNumber\"],\n                        subjectName: p[\"subjectName\"],\n                        thumbprint: p[\"thumbprint\"],\n                        createdDate: p[\"createdDate\"],\n                        expiryDate: p[\"expiryDate\"],\n                        status: p[\"status\"],\n                        revocation: !p.revocation\n                          ? undefined\n                          : {\n                              requestedAt:\n                                p.revocation?.[\"requestedAt\"] !== undefined\n                                  ? new Date(p.revocation?.[\"requestedAt\"])\n                                  : undefined,\n                              effectiveAt:\n                                p.revocation?.[\"effectiveAt\"] !== undefined\n                                  ? new Date(p.revocation?.[\"effectiveAt\"])\n                                  : undefined,\n                              reason: p.revocation?.[\"reason\"],\n                              remarks: p.revocation?.[\"remarks\"],\n                              status: p.revocation?.[\"status\"],\n                              failureReason: p.revocation?.[\"failureReason\"],\n                            },\n                      };\n                    }),\n            },\n      };\n    }),\n    nextLink: result.body[\"nextLink\"],\n  };\n}\n\n/** List certificate profiles under a trusted signing account. */\nexport function listByCodeSigningAccount(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  accountName: string,\n  options: CertificateProfilesListByCodeSigningAccountOptionalParams = {\n    requestOptions: {},\n  },\n): PagedAsyncIterableIterator<CertificateProfile> {\n  return buildPagedAsyncIterator(\n    context,\n    () =>\n      _listByCodeSigningAccountSend(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        accountName,\n        options,\n      ),\n    _listByCodeSigningAccountDeserialize,\n    [\"200\"],\n    { itemName: \"value\", nextLinkName: \"nextLink\" },\n  );\n}\n\nexport function _revokeCertificateSend(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  accountName: string,\n  profileName: string,\n  body: RevokeCertificate,\n  options: CertificateProfilesRevokeCertificateOptionalParams = {\n    requestOptions: {},\n  },\n): StreamableMethod {\n  return context\n    .path(\n      \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}/revokeCertificate\",\n      subscriptionId,\n      resourceGroupName,\n      accountName,\n      profileName,\n    )\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      body: {\n        serialNumber: body[\"serialNumber\"],\n        thumbprint: body[\"thumbprint\"],\n        effectiveAt: body[\"effectiveAt\"].toISOString(),\n        reason: body[\"reason\"],\n        remarks: body[\"remarks\"],\n      },\n    });\n}\n\nexport async function _revokeCertificateDeserialize(result: PathUncheckedResponse): Promise<void> {\n  const expectedStatuses = [\"204\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return;\n}\n\n/** Revoke a certificate under a certificate profile. */\nexport async function revokeCertificate(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  accountName: string,\n  profileName: string,\n  body: RevokeCertificate,\n  options: CertificateProfilesRevokeCertificateOptionalParams = {\n    requestOptions: {},\n  },\n): Promise<void> {\n  const result = await _revokeCertificateSend(\n    context,\n    subscriptionId,\n    resourceGroupName,\n    accountName,\n    profileName,\n    body,\n    options,\n  );\n  return _revokeCertificateDeserialize(result);\n}\n"]}