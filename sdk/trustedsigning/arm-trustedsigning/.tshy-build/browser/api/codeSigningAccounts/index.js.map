{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/api/codeSigningAccounts/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport {\n  codeSigningAccountPropertiesSerializer,\n  codeSigningAccountPatchPropertiesSerializer,\n  CodeSigningAccount,\n  CodeSigningAccountPatch,\n  CheckNameAvailability,\n  CheckNameAvailabilityResult,\n  _CodeSigningAccountListResult,\n} from \"../../models/models.js\";\nimport { CodeSigningContext as Client } from \"../index.js\";\nimport {\n  StreamableMethod,\n  operationOptionsToRequestParameters,\n  PathUncheckedResponse,\n  createRestError,\n} from \"@azure-rest/core-client\";\nimport { serializeRecord } from \"../../helpers/serializerHelpers.js\";\nimport {\n  PagedAsyncIterableIterator,\n  buildPagedAsyncIterator,\n} from \"../../static-helpers/pagingHelpers.js\";\nimport { getLongRunningPoller } from \"../../static-helpers/pollingHelpers.js\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  CodeSigningAccountsGetOptionalParams,\n  CodeSigningAccountsCreateOptionalParams,\n  CodeSigningAccountsUpdateOptionalParams,\n  CodeSigningAccountsDeleteOptionalParams,\n  CodeSigningAccountsListByResourceGroupOptionalParams,\n  CodeSigningAccountsListBySubscriptionOptionalParams,\n  CodeSigningAccountsCheckNameAvailabilityOptionalParams,\n} from \"../../models/options.js\";\n\nexport function _getSend(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  accountName: string,\n  options: CodeSigningAccountsGetOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\n      \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}\",\n      subscriptionId,\n      resourceGroupName,\n      accountName,\n    )\n    .get({ ...operationOptionsToRequestParameters(options) });\n}\n\nexport async function _getDeserialize(result: PathUncheckedResponse): Promise<CodeSigningAccount> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return {\n    tags: result.body[\"tags\"],\n    location: result.body[\"location\"],\n    id: result.body[\"id\"],\n    name: result.body[\"name\"],\n    type: result.body[\"type\"],\n    systemData: !result.body.systemData\n      ? undefined\n      : {\n          createdBy: result.body.systemData?.[\"createdBy\"],\n          createdByType: result.body.systemData?.[\"createdByType\"],\n          createdAt:\n            result.body.systemData?.[\"createdAt\"] !== undefined\n              ? new Date(result.body.systemData?.[\"createdAt\"])\n              : undefined,\n          lastModifiedBy: result.body.systemData?.[\"lastModifiedBy\"],\n          lastModifiedByType: result.body.systemData?.[\"lastModifiedByType\"],\n          lastModifiedAt:\n            result.body.systemData?.[\"lastModifiedAt\"] !== undefined\n              ? new Date(result.body.systemData?.[\"lastModifiedAt\"])\n              : undefined,\n        },\n    properties: !result.body.properties\n      ? undefined\n      : {\n          accountUri: result.body.properties?.[\"accountUri\"],\n          sku: !result.body.properties?.sku\n            ? undefined\n            : { name: result.body.properties?.sku?.[\"name\"] },\n          provisioningState: result.body.properties?.[\"provisioningState\"],\n        },\n  };\n}\n\n/** Get a trusted Signing Account. */\nexport async function get(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  accountName: string,\n  options: CodeSigningAccountsGetOptionalParams = { requestOptions: {} },\n): Promise<CodeSigningAccount> {\n  const result = await _getSend(context, subscriptionId, resourceGroupName, accountName, options);\n  return _getDeserialize(result);\n}\n\nexport function _createSend(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  accountName: string,\n  resource: CodeSigningAccount,\n  options: CodeSigningAccountsCreateOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\n      \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}\",\n      subscriptionId,\n      resourceGroupName,\n      accountName,\n    )\n    .put({\n      ...operationOptionsToRequestParameters(options),\n      body: {\n        tags: !resource.tags ? resource.tags : (serializeRecord(resource.tags as any) as any),\n        location: resource[\"location\"],\n        properties: !resource.properties\n          ? resource.properties\n          : codeSigningAccountPropertiesSerializer(resource.properties),\n      },\n    });\n}\n\nexport async function _createDeserialize(\n  result: PathUncheckedResponse,\n): Promise<CodeSigningAccount> {\n  const expectedStatuses = [\"200\", \"201\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return {\n    tags: result.body[\"tags\"],\n    location: result.body[\"location\"],\n    id: result.body[\"id\"],\n    name: result.body[\"name\"],\n    type: result.body[\"type\"],\n    systemData: !result.body.systemData\n      ? undefined\n      : {\n          createdBy: result.body.systemData?.[\"createdBy\"],\n          createdByType: result.body.systemData?.[\"createdByType\"],\n          createdAt:\n            result.body.systemData?.[\"createdAt\"] !== undefined\n              ? new Date(result.body.systemData?.[\"createdAt\"])\n              : undefined,\n          lastModifiedBy: result.body.systemData?.[\"lastModifiedBy\"],\n          lastModifiedByType: result.body.systemData?.[\"lastModifiedByType\"],\n          lastModifiedAt:\n            result.body.systemData?.[\"lastModifiedAt\"] !== undefined\n              ? new Date(result.body.systemData?.[\"lastModifiedAt\"])\n              : undefined,\n        },\n    properties: !result.body.properties\n      ? undefined\n      : {\n          accountUri: result.body.properties?.[\"accountUri\"],\n          sku: !result.body.properties?.sku\n            ? undefined\n            : { name: result.body.properties?.sku?.[\"name\"] },\n          provisioningState: result.body.properties?.[\"provisioningState\"],\n        },\n  };\n}\n\n/** Create a trusted Signing Account. */\nexport function create(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  accountName: string,\n  resource: CodeSigningAccount,\n  options: CodeSigningAccountsCreateOptionalParams = { requestOptions: {} },\n): PollerLike<OperationState<CodeSigningAccount>, CodeSigningAccount> {\n  return getLongRunningPoller(context, _createDeserialize, [\"200\", \"201\"], {\n    updateIntervalInMs: options?.updateIntervalInMs,\n    abortSignal: options?.abortSignal,\n    getInitialResponse: () =>\n      _createSend(context, subscriptionId, resourceGroupName, accountName, resource, options),\n    resourceLocationConfig: \"azure-async-operation\",\n  }) as PollerLike<OperationState<CodeSigningAccount>, CodeSigningAccount>;\n}\n\nexport function _updateSend(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  accountName: string,\n  properties: CodeSigningAccountPatch,\n  options: CodeSigningAccountsUpdateOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\n      \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}\",\n      subscriptionId,\n      resourceGroupName,\n      accountName,\n    )\n    .patch({\n      ...operationOptionsToRequestParameters(options),\n      body: {\n        tags: !properties.tags ? properties.tags : (serializeRecord(properties.tags as any) as any),\n        properties: !properties.properties\n          ? properties.properties\n          : codeSigningAccountPatchPropertiesSerializer(properties.properties),\n      },\n    });\n}\n\nexport async function _updateDeserialize(\n  result: PathUncheckedResponse,\n): Promise<CodeSigningAccount> {\n  const expectedStatuses = [\"200\", \"202\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return {\n    tags: result.body[\"tags\"],\n    location: result.body[\"location\"],\n    id: result.body[\"id\"],\n    name: result.body[\"name\"],\n    type: result.body[\"type\"],\n    systemData: !result.body.systemData\n      ? undefined\n      : {\n          createdBy: result.body.systemData?.[\"createdBy\"],\n          createdByType: result.body.systemData?.[\"createdByType\"],\n          createdAt:\n            result.body.systemData?.[\"createdAt\"] !== undefined\n              ? new Date(result.body.systemData?.[\"createdAt\"])\n              : undefined,\n          lastModifiedBy: result.body.systemData?.[\"lastModifiedBy\"],\n          lastModifiedByType: result.body.systemData?.[\"lastModifiedByType\"],\n          lastModifiedAt:\n            result.body.systemData?.[\"lastModifiedAt\"] !== undefined\n              ? new Date(result.body.systemData?.[\"lastModifiedAt\"])\n              : undefined,\n        },\n    properties: !result.body.properties\n      ? undefined\n      : {\n          accountUri: result.body.properties?.[\"accountUri\"],\n          sku: !result.body.properties?.sku\n            ? undefined\n            : { name: result.body.properties?.sku?.[\"name\"] },\n          provisioningState: result.body.properties?.[\"provisioningState\"],\n        },\n  };\n}\n\n/** Update a trusted signing account. */\nexport function update(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  accountName: string,\n  properties: CodeSigningAccountPatch,\n  options: CodeSigningAccountsUpdateOptionalParams = { requestOptions: {} },\n): PollerLike<OperationState<CodeSigningAccount>, CodeSigningAccount> {\n  return getLongRunningPoller(context, _updateDeserialize, [\"200\", \"202\"], {\n    updateIntervalInMs: options?.updateIntervalInMs,\n    abortSignal: options?.abortSignal,\n    getInitialResponse: () =>\n      _updateSend(context, subscriptionId, resourceGroupName, accountName, properties, options),\n    resourceLocationConfig: \"location\",\n  }) as PollerLike<OperationState<CodeSigningAccount>, CodeSigningAccount>;\n}\n\nexport function _$deleteSend(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  accountName: string,\n  options: CodeSigningAccountsDeleteOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  return context\n    .path(\n      \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}\",\n      subscriptionId,\n      resourceGroupName,\n      accountName,\n    )\n    .delete({ ...operationOptionsToRequestParameters(options) });\n}\n\nexport async function _$deleteDeserialize(result: PathUncheckedResponse): Promise<void> {\n  const expectedStatuses = [\"202\", \"204\", \"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return;\n}\n\n/** Delete a trusted signing account. */\n/**\n *  @fixme delete is a reserved word that cannot be used as an operation name.\n *         Please add @clientName(\"clientName\") or @clientName(\"<JS-Specific-Name>\", \"javascript\")\n *         to the operation to override the generated name.\n */\nexport function $delete(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  accountName: string,\n  options: CodeSigningAccountsDeleteOptionalParams = { requestOptions: {} },\n): PollerLike<OperationState<void>, void> {\n  return getLongRunningPoller(context, _$deleteDeserialize, [\"202\", \"204\", \"200\"], {\n    updateIntervalInMs: options?.updateIntervalInMs,\n    abortSignal: options?.abortSignal,\n    getInitialResponse: () =>\n      _$deleteSend(context, subscriptionId, resourceGroupName, accountName, options),\n    resourceLocationConfig: \"location\",\n  }) as PollerLike<OperationState<void>, void>;\n}\n\nexport function _listByResourceGroupSend(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  options: CodeSigningAccountsListByResourceGroupOptionalParams = {\n    requestOptions: {},\n  },\n): StreamableMethod {\n  return context\n    .path(\n      \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts\",\n      subscriptionId,\n      resourceGroupName,\n    )\n    .get({ ...operationOptionsToRequestParameters(options) });\n}\n\nexport async function _listByResourceGroupDeserialize(\n  result: PathUncheckedResponse,\n): Promise<_CodeSigningAccountListResult> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return {\n    value: result.body[\"value\"].map((p: any) => {\n      return {\n        tags: p[\"tags\"],\n        location: p[\"location\"],\n        id: p[\"id\"],\n        name: p[\"name\"],\n        type: p[\"type\"],\n        systemData: !p.systemData\n          ? undefined\n          : {\n              createdBy: p.systemData?.[\"createdBy\"],\n              createdByType: p.systemData?.[\"createdByType\"],\n              createdAt:\n                p.systemData?.[\"createdAt\"] !== undefined\n                  ? new Date(p.systemData?.[\"createdAt\"])\n                  : undefined,\n              lastModifiedBy: p.systemData?.[\"lastModifiedBy\"],\n              lastModifiedByType: p.systemData?.[\"lastModifiedByType\"],\n              lastModifiedAt:\n                p.systemData?.[\"lastModifiedAt\"] !== undefined\n                  ? new Date(p.systemData?.[\"lastModifiedAt\"])\n                  : undefined,\n            },\n        properties: !p.properties\n          ? undefined\n          : {\n              accountUri: p.properties?.[\"accountUri\"],\n              sku: !p.properties?.sku ? undefined : { name: p.properties?.sku?.[\"name\"] },\n              provisioningState: p.properties?.[\"provisioningState\"],\n            },\n      };\n    }),\n    nextLink: result.body[\"nextLink\"],\n  };\n}\n\n/** Lists trusted signing accounts within a resource group. */\nexport function listByResourceGroup(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  options: CodeSigningAccountsListByResourceGroupOptionalParams = {\n    requestOptions: {},\n  },\n): PagedAsyncIterableIterator<CodeSigningAccount> {\n  return buildPagedAsyncIterator(\n    context,\n    () => _listByResourceGroupSend(context, subscriptionId, resourceGroupName, options),\n    _listByResourceGroupDeserialize,\n    [\"200\"],\n    { itemName: \"value\", nextLinkName: \"nextLink\" },\n  );\n}\n\nexport function _listBySubscriptionSend(\n  context: Client,\n  subscriptionId: string,\n  options: CodeSigningAccountsListBySubscriptionOptionalParams = {\n    requestOptions: {},\n  },\n): StreamableMethod {\n  return context\n    .path(\n      \"/subscriptions/{subscriptionId}/providers/Microsoft.CodeSigning/codeSigningAccounts\",\n      subscriptionId,\n    )\n    .get({ ...operationOptionsToRequestParameters(options) });\n}\n\nexport async function _listBySubscriptionDeserialize(\n  result: PathUncheckedResponse,\n): Promise<_CodeSigningAccountListResult> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return {\n    value: result.body[\"value\"].map((p: any) => {\n      return {\n        tags: p[\"tags\"],\n        location: p[\"location\"],\n        id: p[\"id\"],\n        name: p[\"name\"],\n        type: p[\"type\"],\n        systemData: !p.systemData\n          ? undefined\n          : {\n              createdBy: p.systemData?.[\"createdBy\"],\n              createdByType: p.systemData?.[\"createdByType\"],\n              createdAt:\n                p.systemData?.[\"createdAt\"] !== undefined\n                  ? new Date(p.systemData?.[\"createdAt\"])\n                  : undefined,\n              lastModifiedBy: p.systemData?.[\"lastModifiedBy\"],\n              lastModifiedByType: p.systemData?.[\"lastModifiedByType\"],\n              lastModifiedAt:\n                p.systemData?.[\"lastModifiedAt\"] !== undefined\n                  ? new Date(p.systemData?.[\"lastModifiedAt\"])\n                  : undefined,\n            },\n        properties: !p.properties\n          ? undefined\n          : {\n              accountUri: p.properties?.[\"accountUri\"],\n              sku: !p.properties?.sku ? undefined : { name: p.properties?.sku?.[\"name\"] },\n              provisioningState: p.properties?.[\"provisioningState\"],\n            },\n      };\n    }),\n    nextLink: result.body[\"nextLink\"],\n  };\n}\n\n/** Lists trusted signing accounts within a subscription. */\nexport function listBySubscription(\n  context: Client,\n  subscriptionId: string,\n  options: CodeSigningAccountsListBySubscriptionOptionalParams = {\n    requestOptions: {},\n  },\n): PagedAsyncIterableIterator<CodeSigningAccount> {\n  return buildPagedAsyncIterator(\n    context,\n    () => _listBySubscriptionSend(context, subscriptionId, options),\n    _listBySubscriptionDeserialize,\n    [\"200\"],\n    { itemName: \"value\", nextLinkName: \"nextLink\" },\n  );\n}\n\nexport function _checkNameAvailabilitySend(\n  context: Client,\n  subscriptionId: string,\n  body: CheckNameAvailability,\n  options: CodeSigningAccountsCheckNameAvailabilityOptionalParams = {\n    requestOptions: {},\n  },\n): StreamableMethod {\n  return context\n    .path(\n      \"/subscriptions/{subscriptionId}/providers/Microsoft.CodeSigning/checkNameAvailability\",\n      subscriptionId,\n    )\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      body: { name: body[\"name\"] },\n    });\n}\n\nexport async function _checkNameAvailabilityDeserialize(\n  result: PathUncheckedResponse,\n): Promise<CheckNameAvailabilityResult> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return {\n    nameAvailable: result.body[\"nameAvailable\"],\n    reason: result.body[\"reason\"],\n    message: result.body[\"message\"],\n  };\n}\n\n/** Checks that the trusted signing account name is valid and is not already in use. */\nexport async function checkNameAvailability(\n  context: Client,\n  subscriptionId: string,\n  body: CheckNameAvailability,\n  options: CodeSigningAccountsCheckNameAvailabilityOptionalParams = {\n    requestOptions: {},\n  },\n): Promise<CheckNameAvailabilityResult> {\n  const result = await _checkNameAvailabilitySend(context, subscriptionId, body, options);\n  return _checkNameAvailabilityDeserialize(result);\n}\n"]}