{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/certificateProfiles/index.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAIlC,OAAO,EACL,GAAG,EACH,MAAM,EACN,OAAO,EACP,wBAAwB,EACxB,iBAAiB,GAClB,MAAM,wCAAwC,CAAC;AAwDhD,MAAM,UAAU,sBAAsB,CAAC,OAA2B,EAAE,cAAsB;IACxF,OAAO;QACL,GAAG,EAAE,CACH,iBAAyB,EACzB,WAAmB,EACnB,WAAmB,EACnB,OAA8C,EAC9C,EAAE,CAAC,GAAG,CAAC,OAAO,EAAE,cAAc,EAAE,iBAAiB,EAAE,WAAW,EAAE,WAAW,EAAE,OAAO,CAAC;QACvF,MAAM,EAAE,CACN,iBAAyB,EACzB,WAAmB,EACnB,WAAmB,EACnB,QAA4B,EAC5B,OAAiD,EACjD,EAAE,CACF,MAAM,CACJ,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,WAAW,EACX,QAAQ,EACR,OAAO,CACR;QACH,MAAM,EAAE,CACN,iBAAyB,EACzB,WAAmB,EACnB,WAAmB,EACnB,OAAiD,EACjD,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE,cAAc,EAAE,iBAAiB,EAAE,WAAW,EAAE,WAAW,EAAE,OAAO,CAAC;QAC3F,wBAAwB,EAAE,CACxB,iBAAyB,EACzB,WAAmB,EACnB,OAAmE,EACnE,EAAE,CAAC,wBAAwB,CAAC,OAAO,EAAE,cAAc,EAAE,iBAAiB,EAAE,WAAW,EAAE,OAAO,CAAC;QAC/F,iBAAiB,EAAE,CACjB,iBAAyB,EACzB,WAAmB,EACnB,WAAmB,EACnB,IAAuB,EACvB,OAA4D,EAC5D,EAAE,CACF,iBAAiB,CACf,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,WAAW,EACX,IAAI,EACJ,OAAO,CACR;KACJ,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,gCAAgC,CAC9C,OAA2B,EAC3B,cAAsB;IAEtB,yBACK,sBAAsB,CAAC,OAAO,EAAE,cAAc,CAAC,EAClD;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { CodeSigningContext } from \"../../api/codeSigningContext.js\";\nimport { CertificateProfile, RevokeCertificate } from \"../../models/models.js\";\nimport {\n  get,\n  create,\n  $delete,\n  listByCodeSigningAccount,\n  revokeCertificate,\n} from \"../../api/certificateProfiles/index.js\";\nimport { PagedAsyncIterableIterator } from \"../../static-helpers/pagingHelpers.js\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  CertificateProfilesGetOptionalParams,\n  CertificateProfilesCreateOptionalParams,\n  CertificateProfilesDeleteOptionalParams,\n  CertificateProfilesListByCodeSigningAccountOptionalParams,\n  CertificateProfilesRevokeCertificateOptionalParams,\n} from \"../../models/options.js\";\n\n/** Interface representing a CertificateProfiles operations. */\nexport interface CertificateProfilesOperations {\n  /** Get details of a certificate profile. */\n  get: (\n    resourceGroupName: string,\n    accountName: string,\n    profileName: string,\n    options?: CertificateProfilesGetOptionalParams,\n  ) => Promise<CertificateProfile>;\n  /** Create a certificate profile. */\n  create: (\n    resourceGroupName: string,\n    accountName: string,\n    profileName: string,\n    resource: CertificateProfile,\n    options?: CertificateProfilesCreateOptionalParams,\n  ) => PollerLike<OperationState<CertificateProfile>, CertificateProfile>;\n  /** Delete a certificate profile. */\n  /**\n   *  @fixme delete is a reserved word that cannot be used as an operation name.\n   *         Please add @clientName(\"clientName\") or @clientName(\"<JS-Specific-Name>\", \"javascript\")\n   *         to the operation to override the generated name.\n   */\n  delete: (\n    resourceGroupName: string,\n    accountName: string,\n    profileName: string,\n    options?: CertificateProfilesDeleteOptionalParams,\n  ) => PollerLike<OperationState<void>, void>;\n  /** List certificate profiles under a trusted signing account. */\n  listByCodeSigningAccount: (\n    resourceGroupName: string,\n    accountName: string,\n    options?: CertificateProfilesListByCodeSigningAccountOptionalParams,\n  ) => PagedAsyncIterableIterator<CertificateProfile>;\n  /** Revoke a certificate under a certificate profile. */\n  revokeCertificate: (\n    resourceGroupName: string,\n    accountName: string,\n    profileName: string,\n    body: RevokeCertificate,\n    options?: CertificateProfilesRevokeCertificateOptionalParams,\n  ) => Promise<void>;\n}\n\nexport function getCertificateProfiles(context: CodeSigningContext, subscriptionId: string) {\n  return {\n    get: (\n      resourceGroupName: string,\n      accountName: string,\n      profileName: string,\n      options?: CertificateProfilesGetOptionalParams,\n    ) => get(context, subscriptionId, resourceGroupName, accountName, profileName, options),\n    create: (\n      resourceGroupName: string,\n      accountName: string,\n      profileName: string,\n      resource: CertificateProfile,\n      options?: CertificateProfilesCreateOptionalParams,\n    ) =>\n      create(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        accountName,\n        profileName,\n        resource,\n        options,\n      ),\n    delete: (\n      resourceGroupName: string,\n      accountName: string,\n      profileName: string,\n      options?: CertificateProfilesDeleteOptionalParams,\n    ) => $delete(context, subscriptionId, resourceGroupName, accountName, profileName, options),\n    listByCodeSigningAccount: (\n      resourceGroupName: string,\n      accountName: string,\n      options?: CertificateProfilesListByCodeSigningAccountOptionalParams,\n    ) => listByCodeSigningAccount(context, subscriptionId, resourceGroupName, accountName, options),\n    revokeCertificate: (\n      resourceGroupName: string,\n      accountName: string,\n      profileName: string,\n      body: RevokeCertificate,\n      options?: CertificateProfilesRevokeCertificateOptionalParams,\n    ) =>\n      revokeCertificate(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        accountName,\n        profileName,\n        body,\n        options,\n      ),\n  };\n}\n\nexport function getCertificateProfilesOperations(\n  context: CodeSigningContext,\n  subscriptionId: string,\n): CertificateProfilesOperations {\n  return {\n    ...getCertificateProfiles(context, subscriptionId),\n  };\n}\n"]}