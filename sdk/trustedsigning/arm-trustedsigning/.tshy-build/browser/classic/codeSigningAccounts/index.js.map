{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/codeSigningAccounts/index.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AASlC,OAAO,EACL,GAAG,EACH,MAAM,EACN,MAAM,EACN,OAAO,EACP,mBAAmB,EACnB,kBAAkB,EAClB,qBAAqB,GACtB,MAAM,wCAAwC,CAAC;AA8DhD,MAAM,UAAU,sBAAsB,CAAC,OAA2B,EAAE,cAAsB;IACxF,OAAO;QACL,GAAG,EAAE,CACH,iBAAyB,EACzB,WAAmB,EACnB,OAA8C,EAC9C,EAAE,CAAC,GAAG,CAAC,OAAO,EAAE,cAAc,EAAE,iBAAiB,EAAE,WAAW,EAAE,OAAO,CAAC;QAC1E,MAAM,EAAE,CACN,iBAAyB,EACzB,WAAmB,EACnB,QAA4B,EAC5B,OAAiD,EACjD,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,cAAc,EAAE,iBAAiB,EAAE,WAAW,EAAE,QAAQ,EAAE,OAAO,CAAC;QACvF,MAAM,EAAE,CACN,iBAAyB,EACzB,WAAmB,EACnB,UAAmC,EACnC,OAAiD,EACjD,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,cAAc,EAAE,iBAAiB,EAAE,WAAW,EAAE,UAAU,EAAE,OAAO,CAAC;QACzF,MAAM,EAAE,CACN,iBAAyB,EACzB,WAAmB,EACnB,OAAiD,EACjD,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE,cAAc,EAAE,iBAAiB,EAAE,WAAW,EAAE,OAAO,CAAC;QAC9E,mBAAmB,EAAE,CACnB,iBAAyB,EACzB,OAA8D,EAC9D,EAAE,CAAC,mBAAmB,CAAC,OAAO,EAAE,cAAc,EAAE,iBAAiB,EAAE,OAAO,CAAC;QAC7E,kBAAkB,EAAE,CAAC,OAA6D,EAAE,EAAE,CACpF,kBAAkB,CAAC,OAAO,EAAE,cAAc,EAAE,OAAO,CAAC;QACtD,qBAAqB,EAAE,CACrB,IAA2B,EAC3B,OAAgE,EAChE,EAAE,CAAC,qBAAqB,CAAC,OAAO,EAAE,cAAc,EAAE,IAAI,EAAE,OAAO,CAAC;KACnE,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,gCAAgC,CAC9C,OAA2B,EAC3B,cAAsB;IAEtB,yBACK,sBAAsB,CAAC,OAAO,EAAE,cAAc,CAAC,EAClD;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { CodeSigningContext } from \"../../api/codeSigningContext.js\";\nimport {\n  CodeSigningAccount,\n  CodeSigningAccountPatch,\n  CheckNameAvailability,\n  CheckNameAvailabilityResult,\n} from \"../../models/models.js\";\nimport {\n  get,\n  create,\n  update,\n  $delete,\n  listByResourceGroup,\n  listBySubscription,\n  checkNameAvailability,\n} from \"../../api/codeSigningAccounts/index.js\";\nimport { PagedAsyncIterableIterator } from \"../../static-helpers/pagingHelpers.js\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  CodeSigningAccountsGetOptionalParams,\n  CodeSigningAccountsCreateOptionalParams,\n  CodeSigningAccountsUpdateOptionalParams,\n  CodeSigningAccountsDeleteOptionalParams,\n  CodeSigningAccountsListByResourceGroupOptionalParams,\n  CodeSigningAccountsListBySubscriptionOptionalParams,\n  CodeSigningAccountsCheckNameAvailabilityOptionalParams,\n} from \"../../models/options.js\";\n\n/** Interface representing a CodeSigningAccounts operations. */\nexport interface CodeSigningAccountsOperations {\n  /** Get a trusted Signing Account. */\n  get: (\n    resourceGroupName: string,\n    accountName: string,\n    options?: CodeSigningAccountsGetOptionalParams,\n  ) => Promise<CodeSigningAccount>;\n  /** Create a trusted Signing Account. */\n  create: (\n    resourceGroupName: string,\n    accountName: string,\n    resource: CodeSigningAccount,\n    options?: CodeSigningAccountsCreateOptionalParams,\n  ) => PollerLike<OperationState<CodeSigningAccount>, CodeSigningAccount>;\n  /** Update a trusted signing account. */\n  update: (\n    resourceGroupName: string,\n    accountName: string,\n    properties: CodeSigningAccountPatch,\n    options?: CodeSigningAccountsUpdateOptionalParams,\n  ) => PollerLike<OperationState<CodeSigningAccount>, CodeSigningAccount>;\n  /** Delete a trusted signing account. */\n  /**\n   *  @fixme delete is a reserved word that cannot be used as an operation name.\n   *         Please add @clientName(\"clientName\") or @clientName(\"<JS-Specific-Name>\", \"javascript\")\n   *         to the operation to override the generated name.\n   */\n  delete: (\n    resourceGroupName: string,\n    accountName: string,\n    options?: CodeSigningAccountsDeleteOptionalParams,\n  ) => PollerLike<OperationState<void>, void>;\n  /** Lists trusted signing accounts within a resource group. */\n  listByResourceGroup: (\n    resourceGroupName: string,\n    options?: CodeSigningAccountsListByResourceGroupOptionalParams,\n  ) => PagedAsyncIterableIterator<CodeSigningAccount>;\n  /** Lists trusted signing accounts within a subscription. */\n  listBySubscription: (\n    options?: CodeSigningAccountsListBySubscriptionOptionalParams,\n  ) => PagedAsyncIterableIterator<CodeSigningAccount>;\n  /** Checks that the trusted signing account name is valid and is not already in use. */\n  checkNameAvailability: (\n    body: CheckNameAvailability,\n    options?: CodeSigningAccountsCheckNameAvailabilityOptionalParams,\n  ) => Promise<CheckNameAvailabilityResult>;\n}\n\nexport function getCodeSigningAccounts(context: CodeSigningContext, subscriptionId: string) {\n  return {\n    get: (\n      resourceGroupName: string,\n      accountName: string,\n      options?: CodeSigningAccountsGetOptionalParams,\n    ) => get(context, subscriptionId, resourceGroupName, accountName, options),\n    create: (\n      resourceGroupName: string,\n      accountName: string,\n      resource: CodeSigningAccount,\n      options?: CodeSigningAccountsCreateOptionalParams,\n    ) => create(context, subscriptionId, resourceGroupName, accountName, resource, options),\n    update: (\n      resourceGroupName: string,\n      accountName: string,\n      properties: CodeSigningAccountPatch,\n      options?: CodeSigningAccountsUpdateOptionalParams,\n    ) => update(context, subscriptionId, resourceGroupName, accountName, properties, options),\n    delete: (\n      resourceGroupName: string,\n      accountName: string,\n      options?: CodeSigningAccountsDeleteOptionalParams,\n    ) => $delete(context, subscriptionId, resourceGroupName, accountName, options),\n    listByResourceGroup: (\n      resourceGroupName: string,\n      options?: CodeSigningAccountsListByResourceGroupOptionalParams,\n    ) => listByResourceGroup(context, subscriptionId, resourceGroupName, options),\n    listBySubscription: (options?: CodeSigningAccountsListBySubscriptionOptionalParams) =>\n      listBySubscription(context, subscriptionId, options),\n    checkNameAvailability: (\n      body: CheckNameAvailability,\n      options?: CodeSigningAccountsCheckNameAvailabilityOptionalParams,\n    ) => checkNameAvailability(context, subscriptionId, body, options),\n  };\n}\n\nexport function getCodeSigningAccountsOperations(\n  context: CodeSigningContext,\n  subscriptionId: string,\n): CodeSigningAccountsOperations {\n  return {\n    ...getCodeSigningAccounts(context, subscriptionId),\n  };\n}\n"]}