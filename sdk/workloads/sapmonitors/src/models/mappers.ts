/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const MonitorListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MonitorListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Monitor"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedServiceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedServiceIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" }
          }
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const ErrorModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorModel"
            }
          }
        }
      },
      innerError: {
        serializedName: "innerError",
        type: {
          name: "Composite",
          className: "ErrorInnerError"
        }
      }
    }
  }
};

export const ErrorInnerError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorInnerError",
    modelProperties: {
      innerError: {
        serializedName: "innerError",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      }
    }
  }
};

export const ManagedRGConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedRGConfiguration",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const UpdateMonitorRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateMonitorRequest",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      }
    }
  }
};

export const ProviderInstanceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProviderInstanceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProviderInstance"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Health: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Health",
    modelProperties: {
      healthState: {
        serializedName: "healthState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      impactingReasons: {
        serializedName: "impactingReasons",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProviderSpecificProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProviderSpecificProperties",
    uberParent: "ProviderSpecificProperties",
    polymorphicDiscriminator: {
      serializedName: "providerType",
      clientName: "providerType"
    },
    modelProperties: {
      providerType: {
        serializedName: "providerType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SapLandscapeMonitorPropertiesGrouping: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SapLandscapeMonitorPropertiesGrouping",
    modelProperties: {
      landscape: {
        serializedName: "landscape",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SapLandscapeMonitorSidMapping"
            }
          }
        }
      },
      sapApplication: {
        serializedName: "sapApplication",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SapLandscapeMonitorSidMapping"
            }
          }
        }
      }
    }
  }
};

export const SapLandscapeMonitorSidMapping: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SapLandscapeMonitorSidMapping",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      topSid: {
        serializedName: "topSid",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SapLandscapeMonitorMetricThresholds: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SapLandscapeMonitorMetricThresholds",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      green: {
        serializedName: "green",
        type: {
          name: "Number"
        }
      },
      yellow: {
        serializedName: "yellow",
        type: {
          name: "Number"
        }
      },
      red: {
        serializedName: "red",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SapLandscapeMonitorListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SapLandscapeMonitorListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SapLandscapeMonitor"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationsDisplayDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationsDisplayDefinition",
    modelProperties: {
      provider: {
        serializedName: "provider",
        required: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        required: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationsDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationsDefinition",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationsDefinitionDisplay"
        }
      },
      actionType: {
        serializedName: "actionType",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "any"
        }
      }
    }
  }
};

export const OperationsDefinitionArrayResponseWithContinuation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationsDefinitionArrayResponseWithContinuation",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationsDefinition"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Tags: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Tags",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const MonitorPropertiesErrors: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MonitorPropertiesErrors",
    modelProperties: {
      ...ErrorModel.type.modelProperties
    }
  }
};

export const ProviderInstancePropertiesErrors: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProviderInstancePropertiesErrors",
    modelProperties: {
      ...ErrorModel.type.modelProperties
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const OperationsContent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationsContent",
    modelProperties: {
      ...Resource.type.modelProperties,
      namePropertiesName: {
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "properties.isDataAction",
        type: {
          name: "Boolean"
        }
      },
      origin: {
        serializedName: "properties.origin",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "properties.display",
        type: {
          name: "Composite",
          className: "OperationsDefinitionDisplay"
        }
      },
      actionType: {
        serializedName: "properties.actionType",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties.properties",
        type: {
          name: "any"
        }
      }
    }
  }
};

export const HanaDbProviderInstanceProperties: coreClient.CompositeMapper = {
  serializedName: "SapHana",
  type: {
    name: "Composite",
    className: "HanaDbProviderInstanceProperties",
    uberParent: "ProviderSpecificProperties",
    polymorphicDiscriminator:
      ProviderSpecificProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProviderSpecificProperties.type.modelProperties,
      hostname: {
        serializedName: "hostname",
        type: {
          name: "String"
        }
      },
      dbName: {
        serializedName: "dbName",
        type: {
          name: "String"
        }
      },
      sqlPort: {
        serializedName: "sqlPort",
        type: {
          name: "String"
        }
      },
      instanceNumber: {
        serializedName: "instanceNumber",
        type: {
          name: "String"
        }
      },
      dbUsername: {
        serializedName: "dbUsername",
        type: {
          name: "String"
        }
      },
      dbPassword: {
        serializedName: "dbPassword",
        type: {
          name: "String"
        }
      },
      dbPasswordUri: {
        serializedName: "dbPasswordUri",
        type: {
          name: "String"
        }
      },
      sslCertificateUri: {
        serializedName: "sslCertificateUri",
        type: {
          name: "String"
        }
      },
      sslHostNameInCertificate: {
        serializedName: "sslHostNameInCertificate",
        type: {
          name: "String"
        }
      },
      sslPreference: {
        serializedName: "sslPreference",
        type: {
          name: "String"
        }
      },
      sapSid: {
        serializedName: "sapSid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SapNetWeaverProviderInstanceProperties: coreClient.CompositeMapper = {
  serializedName: "SapNetWeaver",
  type: {
    name: "Composite",
    className: "SapNetWeaverProviderInstanceProperties",
    uberParent: "ProviderSpecificProperties",
    polymorphicDiscriminator:
      ProviderSpecificProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProviderSpecificProperties.type.modelProperties,
      sapSid: {
        serializedName: "sapSid",
        type: {
          name: "String"
        }
      },
      sapHostname: {
        serializedName: "sapHostname",
        type: {
          name: "String"
        }
      },
      sapInstanceNr: {
        serializedName: "sapInstanceNr",
        type: {
          name: "String"
        }
      },
      sapHostFileEntries: {
        serializedName: "sapHostFileEntries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      sapUsername: {
        serializedName: "sapUsername",
        type: {
          name: "String"
        }
      },
      sapPassword: {
        serializedName: "sapPassword",
        type: {
          name: "String"
        }
      },
      sapPasswordUri: {
        serializedName: "sapPasswordUri",
        type: {
          name: "String"
        }
      },
      sapClientId: {
        serializedName: "sapClientId",
        type: {
          name: "String"
        }
      },
      sapPortNumber: {
        serializedName: "sapPortNumber",
        type: {
          name: "String"
        }
      },
      sslCertificateUri: {
        serializedName: "sslCertificateUri",
        type: {
          name: "String"
        }
      },
      sslPreference: {
        serializedName: "sslPreference",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrometheusOSProviderInstanceProperties: coreClient.CompositeMapper = {
  serializedName: "PrometheusOS",
  type: {
    name: "Composite",
    className: "PrometheusOSProviderInstanceProperties",
    uberParent: "ProviderSpecificProperties",
    polymorphicDiscriminator:
      ProviderSpecificProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProviderSpecificProperties.type.modelProperties,
      prometheusUrl: {
        serializedName: "prometheusUrl",
        type: {
          name: "String"
        }
      },
      sslPreference: {
        serializedName: "sslPreference",
        type: {
          name: "String"
        }
      },
      sslCertificateUri: {
        serializedName: "sslCertificateUri",
        type: {
          name: "String"
        }
      },
      sapSid: {
        serializedName: "sapSid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DB2ProviderInstanceProperties: coreClient.CompositeMapper = {
  serializedName: "Db2",
  type: {
    name: "Composite",
    className: "DB2ProviderInstanceProperties",
    uberParent: "ProviderSpecificProperties",
    polymorphicDiscriminator:
      ProviderSpecificProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProviderSpecificProperties.type.modelProperties,
      hostname: {
        serializedName: "hostname",
        type: {
          name: "String"
        }
      },
      dbName: {
        serializedName: "dbName",
        type: {
          name: "String"
        }
      },
      dbPort: {
        serializedName: "dbPort",
        type: {
          name: "String"
        }
      },
      dbUsername: {
        serializedName: "dbUsername",
        type: {
          name: "String"
        }
      },
      dbPassword: {
        serializedName: "dbPassword",
        type: {
          name: "String"
        }
      },
      dbPasswordUri: {
        serializedName: "dbPasswordUri",
        type: {
          name: "String"
        }
      },
      sapSid: {
        serializedName: "sapSid",
        type: {
          name: "String"
        }
      },
      sslPreference: {
        serializedName: "sslPreference",
        type: {
          name: "String"
        }
      },
      sslCertificateUri: {
        serializedName: "sslCertificateUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrometheusHaClusterProviderInstanceProperties: coreClient.CompositeMapper = {
  serializedName: "PrometheusHaCluster",
  type: {
    name: "Composite",
    className: "PrometheusHaClusterProviderInstanceProperties",
    uberParent: "ProviderSpecificProperties",
    polymorphicDiscriminator:
      ProviderSpecificProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProviderSpecificProperties.type.modelProperties,
      prometheusUrl: {
        serializedName: "prometheusUrl",
        type: {
          name: "String"
        }
      },
      hostname: {
        serializedName: "hostname",
        type: {
          name: "String"
        }
      },
      sid: {
        serializedName: "sid",
        type: {
          name: "String"
        }
      },
      clusterName: {
        serializedName: "clusterName",
        type: {
          name: "String"
        }
      },
      sslPreference: {
        serializedName: "sslPreference",
        type: {
          name: "String"
        }
      },
      sslCertificateUri: {
        serializedName: "sslCertificateUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MsSqlServerProviderInstanceProperties: coreClient.CompositeMapper = {
  serializedName: "MsSqlServer",
  type: {
    name: "Composite",
    className: "MsSqlServerProviderInstanceProperties",
    uberParent: "ProviderSpecificProperties",
    polymorphicDiscriminator:
      ProviderSpecificProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProviderSpecificProperties.type.modelProperties,
      hostname: {
        serializedName: "hostname",
        type: {
          name: "String"
        }
      },
      dbPort: {
        serializedName: "dbPort",
        type: {
          name: "String"
        }
      },
      dbUsername: {
        serializedName: "dbUsername",
        type: {
          name: "String"
        }
      },
      dbPassword: {
        serializedName: "dbPassword",
        type: {
          name: "String"
        }
      },
      dbPasswordUri: {
        serializedName: "dbPasswordUri",
        type: {
          name: "String"
        }
      },
      sapSid: {
        serializedName: "sapSid",
        type: {
          name: "String"
        }
      },
      sslPreference: {
        serializedName: "sslPreference",
        type: {
          name: "String"
        }
      },
      sslCertificateUri: {
        serializedName: "sslCertificateUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationsDefinitionDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationsDefinitionDisplay",
    modelProperties: {
      ...OperationsDisplayDefinition.type.modelProperties
    }
  }
};

export const Monitor: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Monitor",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errors: {
        serializedName: "properties.errors",
        type: {
          name: "Composite",
          className: "MonitorPropertiesErrors"
        }
      },
      appLocation: {
        serializedName: "properties.appLocation",
        type: {
          name: "String"
        }
      },
      routingPreference: {
        serializedName: "properties.routingPreference",
        type: {
          name: "String"
        }
      },
      zoneRedundancyPreference: {
        serializedName: "properties.zoneRedundancyPreference",
        type: {
          name: "String"
        }
      },
      managedResourceGroupConfiguration: {
        serializedName: "properties.managedResourceGroupConfiguration",
        type: {
          name: "Composite",
          className: "ManagedRGConfiguration"
        }
      },
      logAnalyticsWorkspaceArmId: {
        serializedName: "properties.logAnalyticsWorkspaceArmId",
        type: {
          name: "String"
        }
      },
      monitorSubnet: {
        serializedName: "properties.monitorSubnet",
        type: {
          name: "String"
        }
      },
      msiArmId: {
        serializedName: "properties.msiArmId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storageAccountArmId: {
        serializedName: "properties.storageAccountArmId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProviderInstance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProviderInstance",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      health: {
        serializedName: "properties.health",
        type: {
          name: "Composite",
          className: "Health"
        }
      },
      errors: {
        serializedName: "properties.errors",
        type: {
          name: "Composite",
          className: "ProviderInstancePropertiesErrors"
        }
      },
      providerSettings: {
        serializedName: "properties.providerSettings",
        type: {
          name: "Composite",
          className: "ProviderSpecificProperties"
        }
      }
    }
  }
};

export const SapLandscapeMonitor: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SapLandscapeMonitor",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      grouping: {
        serializedName: "properties.grouping",
        type: {
          name: "Composite",
          className: "SapLandscapeMonitorPropertiesGrouping"
        }
      },
      topMetricsThresholds: {
        serializedName: "properties.topMetricsThresholds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SapLandscapeMonitorMetricThresholds"
            }
          }
        }
      }
    }
  }
};

export const MonitorsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MonitorsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProviderInstancesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProviderInstancesDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  ProviderSpecificProperties: ProviderSpecificProperties,
  "ProviderSpecificProperties.SapHana": HanaDbProviderInstanceProperties,
  "ProviderSpecificProperties.SapNetWeaver": SapNetWeaverProviderInstanceProperties,
  "ProviderSpecificProperties.PrometheusOS": PrometheusOSProviderInstanceProperties,
  "ProviderSpecificProperties.Db2": DB2ProviderInstanceProperties,
  "ProviderSpecificProperties.PrometheusHaCluster": PrometheusHaClusterProviderInstanceProperties,
  "ProviderSpecificProperties.MsSqlServer": MsSqlServerProviderInstanceProperties
};
