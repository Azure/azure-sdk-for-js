"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkloadsClient = void 0;
const tslib_1 = require("tslib");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const coreRestPipeline = tslib_1.__importStar(require("@azure/core-rest-pipeline"));
const index_js_1 = require("./operations/index.js");
const Parameters = tslib_1.__importStar(require("./models/parameters.js"));
const Mappers = tslib_1.__importStar(require("./models/mappers.js"));
class WorkloadsClient extends coreClient.ServiceClient {
    /**
     * Initializes a new instance of the WorkloadsClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-workloads/1.0.1`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2023-04-01";
        this.sAPVirtualInstances = new index_js_1.SAPVirtualInstancesImpl(this);
        this.sAPCentralInstances = new index_js_1.SAPCentralInstancesImpl(this);
        this.sAPDatabaseInstances = new index_js_1.SAPDatabaseInstancesImpl(this);
        this.sAPApplicationServerInstances = new index_js_1.SAPApplicationServerInstancesImpl(this);
        this.monitors = new index_js_1.MonitorsImpl(this);
        this.providerInstances = new index_js_1.ProviderInstancesImpl(this);
        this.sapLandscapeMonitorOperations = new index_js_1.SapLandscapeMonitorOperationsImpl(this);
        this.operations = new index_js_1.OperationsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            async sendRequest(request, next) {
                const param = request.url.split("?");
                if (param.length > 1) {
                    const newParams = param[1].split("&").map((item) => {
                        if (item.indexOf("api-version") > -1) {
                            return "api-version=" + apiVersion;
                        }
                        else {
                            return item;
                        }
                    });
                    request.url = param[0] + "?" + newParams.join("&");
                }
                return next(request);
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
    /**
     * Get SAP sizing recommendations by providing input SAPS for application tier and memory required for
     * database tier
     * @param location The name of Azure region.
     * @param options The options parameters.
     */
    sAPSizingRecommendations(location, options) {
        return this.sendOperationRequest({ location, options }, sAPSizingRecommendationsOperationSpec);
    }
    /**
     * Get a list of SAP supported SKUs for ASCS, Application and Database tier.
     * @param location The name of Azure region.
     * @param options The options parameters.
     */
    sAPSupportedSku(location, options) {
        return this.sendOperationRequest({ location, options }, sAPSupportedSkuOperationSpec);
    }
    /**
     * Get the SAP Disk Configuration Layout prod/non-prod SAP System.
     * @param location The name of Azure region.
     * @param options The options parameters.
     */
    sAPDiskConfigurations(location, options) {
        return this.sendOperationRequest({ location, options }, sAPDiskConfigurationsOperationSpec);
    }
    /**
     * Get the recommended SAP Availability Zone Pair Details for your region.
     * @param location The name of Azure region.
     * @param options The options parameters.
     */
    sAPAvailabilityZoneDetails(location, options) {
        return this.sendOperationRequest({ location, options }, sAPAvailabilityZoneDetailsOperationSpec);
    }
}
exports.WorkloadsClient = WorkloadsClient;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const sAPSizingRecommendationsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getSizingRecommendations",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.SAPSizingRecommendationResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.sAPSizingRecommendation,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const sAPSupportedSkuOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getSapSupportedSku",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.SAPSupportedResourceSkusResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.sAPSupportedSku,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const sAPDiskConfigurationsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getDiskConfigurations",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.SAPDiskConfigurationsResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.sAPDiskConfigurations,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const sAPAvailabilityZoneDetailsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getAvailabilityZoneDetails",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.SAPAvailabilityZoneDetailsResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.sAPAvailabilityZoneDetails,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
//# sourceMappingURL=workloadsClient.js.map