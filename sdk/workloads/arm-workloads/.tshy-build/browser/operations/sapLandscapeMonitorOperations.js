/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
/** Class containing SapLandscapeMonitorOperations operations. */
export class SapLandscapeMonitorOperationsImpl {
    /**
     * Initialize a new instance of the class SapLandscapeMonitorOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets configuration values for Single Pane Of Glass for SAP monitor for the specified subscription,
     * resource group, and resource name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Name of the SAP monitor resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, monitorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, options }, getOperationSpec);
    }
    /**
     * Creates a SAP Landscape Monitor Dashboard for the specified subscription, resource group, and
     * resource name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Name of the SAP monitor resource.
     * @param sapLandscapeMonitorParameter Request body representing a configuration for Sap Landscape
     *                                     Monitor Dashboard
     * @param options The options parameters.
     */
    create(resourceGroupName, monitorName, sapLandscapeMonitorParameter, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, sapLandscapeMonitorParameter, options }, createOperationSpec);
    }
    /**
     * Deletes a SAP Landscape Monitor Dashboard with the specified subscription, resource group, and SAP
     * monitor name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Name of the SAP monitor resource.
     * @param options The options parameters.
     */
    delete(resourceGroupName, monitorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, options }, deleteOperationSpec);
    }
    /**
     * Patches the SAP Landscape Monitor Dashboard for the specified subscription, resource group, and SAP
     * monitor name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Name of the SAP monitor resource.
     * @param sapLandscapeMonitorParameter Request body representing a configuration for Sap Landscape
     *                                     Monitor Dashboard
     * @param options The options parameters.
     */
    update(resourceGroupName, monitorName, sapLandscapeMonitorParameter, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, sapLandscapeMonitorParameter, options }, updateOperationSpec);
    }
    /**
     * Gets configuration values for Single Pane Of Glass for SAP monitor for the specified subscription,
     * resource group, and resource name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Name of the SAP monitor resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, monitorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, options }, listOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/monitors/{monitorName}/sapLandscapeMonitor/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SapLandscapeMonitor
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.monitorName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/monitors/{monitorName}/sapLandscapeMonitor/default",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.SapLandscapeMonitor
        },
        201: {
            bodyMapper: Mappers.SapLandscapeMonitor
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.sapLandscapeMonitorParameter,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.monitorName
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/monitors/{monitorName}/sapLandscapeMonitor/default",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.monitorName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/monitors/{monitorName}/sapLandscapeMonitor/default",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.SapLandscapeMonitor
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.sapLandscapeMonitorParameter,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.monitorName
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/monitors/{monitorName}/sapLandscapeMonitor",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SapLandscapeMonitorListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.monitorName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=sapLandscapeMonitorOperations.js.map