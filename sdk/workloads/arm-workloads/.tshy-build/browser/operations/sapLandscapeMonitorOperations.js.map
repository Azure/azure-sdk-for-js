{"version":3,"file":"sapLandscapeMonitorOperations.js","sourceRoot":"","sources":["../../../src/operations/sapLandscapeMonitorOperations.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { SapLandscapeMonitorOperations } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { WorkloadsClient } from \"../workloadsClient.js\";\nimport {\n  SapLandscapeMonitorGetOptionalParams,\n  SapLandscapeMonitorGetResponse,\n  SapLandscapeMonitor,\n  SapLandscapeMonitorCreateOptionalParams,\n  SapLandscapeMonitorCreateResponse,\n  SapLandscapeMonitorDeleteOptionalParams,\n  SapLandscapeMonitorUpdateOptionalParams,\n  SapLandscapeMonitorUpdateResponse,\n  SapLandscapeMonitorListOptionalParams,\n  SapLandscapeMonitorListResponse\n} from \"../models/index.js\";\n\n/** Class containing SapLandscapeMonitorOperations operations. */\nexport class SapLandscapeMonitorOperationsImpl\n  implements SapLandscapeMonitorOperations {\n  private readonly client: WorkloadsClient;\n\n  /**\n   * Initialize a new instance of the class SapLandscapeMonitorOperations class.\n   * @param client Reference to the service client\n   */\n  constructor(client: WorkloadsClient) {\n    this.client = client;\n  }\n\n  /**\n   * Gets configuration values for Single Pane Of Glass for SAP monitor for the specified subscription,\n   * resource group, and resource name.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param monitorName Name of the SAP monitor resource.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    monitorName: string,\n    options?: SapLandscapeMonitorGetOptionalParams\n  ): Promise<SapLandscapeMonitorGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, monitorName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Creates a SAP Landscape Monitor Dashboard for the specified subscription, resource group, and\n   * resource name.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param monitorName Name of the SAP monitor resource.\n   * @param sapLandscapeMonitorParameter Request body representing a configuration for Sap Landscape\n   *                                     Monitor Dashboard\n   * @param options The options parameters.\n   */\n  create(\n    resourceGroupName: string,\n    monitorName: string,\n    sapLandscapeMonitorParameter: SapLandscapeMonitor,\n    options?: SapLandscapeMonitorCreateOptionalParams\n  ): Promise<SapLandscapeMonitorCreateResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, monitorName, sapLandscapeMonitorParameter, options },\n      createOperationSpec\n    );\n  }\n\n  /**\n   * Deletes a SAP Landscape Monitor Dashboard with the specified subscription, resource group, and SAP\n   * monitor name.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param monitorName Name of the SAP monitor resource.\n   * @param options The options parameters.\n   */\n  delete(\n    resourceGroupName: string,\n    monitorName: string,\n    options?: SapLandscapeMonitorDeleteOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, monitorName, options },\n      deleteOperationSpec\n    );\n  }\n\n  /**\n   * Patches the SAP Landscape Monitor Dashboard for the specified subscription, resource group, and SAP\n   * monitor name.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param monitorName Name of the SAP monitor resource.\n   * @param sapLandscapeMonitorParameter Request body representing a configuration for Sap Landscape\n   *                                     Monitor Dashboard\n   * @param options The options parameters.\n   */\n  update(\n    resourceGroupName: string,\n    monitorName: string,\n    sapLandscapeMonitorParameter: SapLandscapeMonitor,\n    options?: SapLandscapeMonitorUpdateOptionalParams\n  ): Promise<SapLandscapeMonitorUpdateResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, monitorName, sapLandscapeMonitorParameter, options },\n      updateOperationSpec\n    );\n  }\n\n  /**\n   * Gets configuration values for Single Pane Of Glass for SAP monitor for the specified subscription,\n   * resource group, and resource name.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param monitorName Name of the SAP monitor resource.\n   * @param options The options parameters.\n   */\n  list(\n    resourceGroupName: string,\n    monitorName: string,\n    options?: SapLandscapeMonitorListOptionalParams\n  ): Promise<SapLandscapeMonitorListResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, monitorName, options },\n      listOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/monitors/{monitorName}/sapLandscapeMonitor/default\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SapLandscapeMonitor\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.monitorName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/monitors/{monitorName}/sapLandscapeMonitor/default\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SapLandscapeMonitor\n    },\n    201: {\n      bodyMapper: Mappers.SapLandscapeMonitor\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.sapLandscapeMonitorParameter,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.monitorName\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/monitors/{monitorName}/sapLandscapeMonitor/default\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.monitorName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/monitors/{monitorName}/sapLandscapeMonitor/default\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SapLandscapeMonitor\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.sapLandscapeMonitorParameter,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.monitorName\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/monitors/{monitorName}/sapLandscapeMonitor\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SapLandscapeMonitorListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.monitorName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n"]}