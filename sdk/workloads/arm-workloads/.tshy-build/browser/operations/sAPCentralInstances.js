/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { createHttpPoller } from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
/// <reference lib="esnext.asynciterable" />
/** Class containing SAPCentralInstances operations. */
export class SAPCentralInstancesImpl {
    /**
     * Initialize a new instance of the class SAPCentralInstances class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the SAP Central Services Instance resource for the given Virtual Instance for SAP solutions
     * resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
     * @param options The options parameters.
     */
    list(resourceGroupName, sapVirtualInstanceName, options) {
        const iter = this.listPagingAll(resourceGroupName, sapVirtualInstanceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, sapVirtualInstanceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, sapVirtualInstanceName, options, settings) {
        return __asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._list(resourceGroupName, sapVirtualInstanceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listNext(resourceGroupName, sapVirtualInstanceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, sapVirtualInstanceName, options) {
        return __asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listPagingPage(resourceGroupName, sapVirtualInstanceName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the SAP Central Services Instance resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for
     *                            auto generation to work correctly.
     * @param options The options parameters.
     */
    get(resourceGroupName, sapVirtualInstanceName, centralInstanceName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            sapVirtualInstanceName,
            centralInstanceName,
            options
        }, getOperationSpec);
    }
    /**
     * Creates the SAP Central Services Instance resource. <br><br>This will be used by service only. PUT
     * operation on this resource by end user will return a Bad Request error.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for
     *                            auto generation to work correctly.
     * @param options The options parameters.
     */
    async beginCreate(resourceGroupName, sapVirtualInstanceName, centralInstanceName, options) {
        const directSendOperation = async (args, spec) => {
            return this.client.sendOperationRequest(args, spec);
        };
        const sendOperationFn = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON()
                }
            };
        };
        const lro = createLroSpec({
            sendOperationFn,
            args: {
                resourceGroupName,
                sapVirtualInstanceName,
                centralInstanceName,
                options
            },
            spec: createOperationSpec
        });
        const poller = await createHttpPoller(lro, {
            restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
        });
        await poller.poll();
        return poller;
    }
    /**
     * Creates the SAP Central Services Instance resource. <br><br>This will be used by service only. PUT
     * operation on this resource by end user will return a Bad Request error.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for
     *                            auto generation to work correctly.
     * @param options The options parameters.
     */
    async beginCreateAndWait(resourceGroupName, sapVirtualInstanceName, centralInstanceName, options) {
        const poller = await this.beginCreate(resourceGroupName, sapVirtualInstanceName, centralInstanceName, options);
        return poller.pollUntilDone();
    }
    /**
     * Updates the SAP Central Services Instance resource. <br><br>This can be used to update tags on the
     * resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for
     *                            auto generation to work correctly.
     * @param options The options parameters.
     */
    async beginUpdate(resourceGroupName, sapVirtualInstanceName, centralInstanceName, options) {
        const directSendOperation = async (args, spec) => {
            return this.client.sendOperationRequest(args, spec);
        };
        const sendOperationFn = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON()
                }
            };
        };
        const lro = createLroSpec({
            sendOperationFn,
            args: {
                resourceGroupName,
                sapVirtualInstanceName,
                centralInstanceName,
                options
            },
            spec: updateOperationSpec
        });
        const poller = await createHttpPoller(lro, {
            restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
        });
        await poller.poll();
        return poller;
    }
    /**
     * Updates the SAP Central Services Instance resource. <br><br>This can be used to update tags on the
     * resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for
     *                            auto generation to work correctly.
     * @param options The options parameters.
     */
    async beginUpdateAndWait(resourceGroupName, sapVirtualInstanceName, centralInstanceName, options) {
        const poller = await this.beginUpdate(resourceGroupName, sapVirtualInstanceName, centralInstanceName, options);
        return poller.pollUntilDone();
    }
    /**
     * Deletes the SAP Central Services Instance resource. <br><br>This will be used by service only.
     * Delete operation on this resource by end user will return a Bad Request error. You can delete the
     * parent resource, which is the Virtual Instance for SAP solutions resource, using the delete
     * operation on it.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for
     *                            auto generation to work correctly.
     * @param options The options parameters.
     */
    async beginDelete(resourceGroupName, sapVirtualInstanceName, centralInstanceName, options) {
        const directSendOperation = async (args, spec) => {
            return this.client.sendOperationRequest(args, spec);
        };
        const sendOperationFn = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON()
                }
            };
        };
        const lro = createLroSpec({
            sendOperationFn,
            args: {
                resourceGroupName,
                sapVirtualInstanceName,
                centralInstanceName,
                options
            },
            spec: deleteOperationSpec
        });
        const poller = await createHttpPoller(lro, {
            restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            resourceLocationConfig: "azure-async-operation"
        });
        await poller.poll();
        return poller;
    }
    /**
     * Deletes the SAP Central Services Instance resource. <br><br>This will be used by service only.
     * Delete operation on this resource by end user will return a Bad Request error. You can delete the
     * parent resource, which is the Virtual Instance for SAP solutions resource, using the delete
     * operation on it.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for
     *                            auto generation to work correctly.
     * @param options The options parameters.
     */
    async beginDeleteAndWait(resourceGroupName, sapVirtualInstanceName, centralInstanceName, options) {
        const poller = await this.beginDelete(resourceGroupName, sapVirtualInstanceName, centralInstanceName, options);
        return poller.pollUntilDone();
    }
    /**
     * Lists the SAP Central Services Instance resource for the given Virtual Instance for SAP solutions
     * resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
     * @param options The options parameters.
     */
    _list(resourceGroupName, sapVirtualInstanceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, sapVirtualInstanceName, options }, listOperationSpec);
    }
    /**
     * Starts the SAP Central Services Instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for
     *                            auto generation to work correctly.
     * @param options The options parameters.
     */
    async beginStartInstance(resourceGroupName, sapVirtualInstanceName, centralInstanceName, options) {
        const directSendOperation = async (args, spec) => {
            return this.client.sendOperationRequest(args, spec);
        };
        const sendOperationFn = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON()
                }
            };
        };
        const lro = createLroSpec({
            sendOperationFn,
            args: {
                resourceGroupName,
                sapVirtualInstanceName,
                centralInstanceName,
                options
            },
            spec: startInstanceOperationSpec
        });
        const poller = await createHttpPoller(lro, {
            restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            resourceLocationConfig: "azure-async-operation"
        });
        await poller.poll();
        return poller;
    }
    /**
     * Starts the SAP Central Services Instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for
     *                            auto generation to work correctly.
     * @param options The options parameters.
     */
    async beginStartInstanceAndWait(resourceGroupName, sapVirtualInstanceName, centralInstanceName, options) {
        const poller = await this.beginStartInstance(resourceGroupName, sapVirtualInstanceName, centralInstanceName, options);
        return poller.pollUntilDone();
    }
    /**
     * Stops the SAP Central Services Instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for
     *                            auto generation to work correctly.
     * @param options The options parameters.
     */
    async beginStopInstance(resourceGroupName, sapVirtualInstanceName, centralInstanceName, options) {
        const directSendOperation = async (args, spec) => {
            return this.client.sendOperationRequest(args, spec);
        };
        const sendOperationFn = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON()
                }
            };
        };
        const lro = createLroSpec({
            sendOperationFn,
            args: {
                resourceGroupName,
                sapVirtualInstanceName,
                centralInstanceName,
                options
            },
            spec: stopInstanceOperationSpec
        });
        const poller = await createHttpPoller(lro, {
            restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            resourceLocationConfig: "azure-async-operation"
        });
        await poller.poll();
        return poller;
    }
    /**
     * Stops the SAP Central Services Instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
     * @param centralInstanceName Central Services Instance resource name string modeled as parameter for
     *                            auto generation to work correctly.
     * @param options The options parameters.
     */
    async beginStopInstanceAndWait(resourceGroupName, sapVirtualInstanceName, centralInstanceName, options) {
        const poller = await this.beginStopInstance(resourceGroupName, sapVirtualInstanceName, centralInstanceName, options);
        return poller.pollUntilDone();
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, sapVirtualInstanceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, sapVirtualInstanceName, nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/centralInstances/{centralInstanceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SAPCentralServerInstance
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.sapVirtualInstanceName,
        Parameters.centralInstanceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/centralInstances/{centralInstanceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.SAPCentralServerInstance
        },
        201: {
            bodyMapper: Mappers.SAPCentralServerInstance
        },
        202: {
            bodyMapper: Mappers.SAPCentralServerInstance
        },
        204: {
            bodyMapper: Mappers.SAPCentralServerInstance
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.body3,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.sapVirtualInstanceName,
        Parameters.centralInstanceName
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/centralInstances/{centralInstanceName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.SAPCentralServerInstance
        },
        201: {
            bodyMapper: Mappers.SAPCentralServerInstance
        },
        202: {
            bodyMapper: Mappers.SAPCentralServerInstance
        },
        204: {
            bodyMapper: Mappers.SAPCentralServerInstance
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.body4,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.sapVirtualInstanceName,
        Parameters.centralInstanceName
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/centralInstances/{centralInstanceName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatusResult
        },
        201: {
            bodyMapper: Mappers.OperationStatusResult
        },
        202: {
            bodyMapper: Mappers.OperationStatusResult
        },
        204: {
            bodyMapper: Mappers.OperationStatusResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.sapVirtualInstanceName,
        Parameters.centralInstanceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/centralInstances",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SAPCentralInstanceList
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.sapVirtualInstanceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const startInstanceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/centralInstances/{centralInstanceName}/start",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatusResult
        },
        201: {
            bodyMapper: Mappers.OperationStatusResult
        },
        202: {
            bodyMapper: Mappers.OperationStatusResult
        },
        204: {
            bodyMapper: Mappers.OperationStatusResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.sapVirtualInstanceName,
        Parameters.centralInstanceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const stopInstanceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/centralInstances/{centralInstanceName}/stop",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.OperationStatusResult
        },
        201: {
            bodyMapper: Mappers.OperationStatusResult
        },
        202: {
            bodyMapper: Mappers.OperationStatusResult
        },
        204: {
            bodyMapper: Mappers.OperationStatusResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.body2,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.sapVirtualInstanceName,
        Parameters.centralInstanceName
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SAPCentralInstanceList
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.sapVirtualInstanceName,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=sAPCentralInstances.js.map