/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const PhpWorkloadResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PhpWorkloadResourceList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PhpWorkloadResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedRGConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedRGConfiguration",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserProfile",
    modelProperties: {
      userName: {
        serializedName: "userName",
        required: true,
        type: {
          name: "String"
        }
      },
      sshPublicKey: {
        serializedName: "sshPublicKey",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NodeProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeProfile",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      nodeSku: {
        serializedName: "nodeSku",
        required: true,
        type: {
          name: "String"
        }
      },
      osImage: {
        serializedName: "osImage",
        type: {
          name: "Composite",
          className: "OsImageProfile"
        }
      },
      osDisk: {
        serializedName: "osDisk",
        type: {
          name: "Composite",
          className: "DiskInfo"
        }
      },
      dataDisks: {
        serializedName: "dataDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiskInfo"
            }
          }
        }
      },
      nodeResourceIds: {
        serializedName: "nodeResourceIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const OsImageProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OsImageProfile",
    modelProperties: {
      publisher: {
        serializedName: "publisher",
        type: {
          name: "String"
        }
      },
      offer: {
        serializedName: "offer",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiskInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskInfo",
    modelProperties: {
      storageType: {
        serializedName: "storageType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Premium_LRS", "Standard_LRS", "StandardSSD_LRS"]
        }
      },
      sizeInGB: {
        serializedName: "sizeInGB",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const NetworkProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkProfile",
    modelProperties: {
      loadBalancerType: {
        serializedName: "loadBalancerType",
        required: true,
        type: {
          name: "String"
        }
      },
      loadBalancerSku: {
        serializedName: "loadBalancerSku",
        type: {
          name: "String"
        }
      },
      loadBalancerTier: {
        serializedName: "loadBalancerTier",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      },
      azureFrontDoorEnabled: {
        serializedName: "azureFrontDoorEnabled",
        type: {
          name: "String"
        }
      },
      vNetResourceId: {
        serializedName: "vNetResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      loadBalancerResourceId: {
        serializedName: "loadBalancerResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      azureFrontDoorResourceId: {
        serializedName: "azureFrontDoorResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      frontEndPublicIpResourceId: {
        serializedName: "frontEndPublicIpResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      outboundPublicIpResourceIds: {
        serializedName: "outboundPublicIpResourceIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DatabaseProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseProfile",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      serverName: {
        serializedName: "serverName",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        required: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Burstable", "GeneralPurpose", "MemoryOptimized"]
        }
      },
      haEnabled: {
        serializedName: "haEnabled",
        type: {
          name: "String"
        }
      },
      storageSku: {
        serializedName: "storageSku",
        type: {
          name: "String"
        }
      },
      storageInGB: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "storageInGB",
        type: {
          name: "Number"
        }
      },
      storageIops: {
        serializedName: "storageIops",
        type: {
          name: "Number"
        }
      },
      backupRetentionDays: {
        serializedName: "backupRetentionDays",
        type: {
          name: "Number"
        }
      },
      sslEnforcementEnabled: {
        serializedName: "sslEnforcementEnabled",
        type: {
          name: "String"
        }
      },
      serverResourceId: {
        serializedName: "serverResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SiteProfile",
    modelProperties: {
      domainName: {
        serializedName: "domainName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileshareProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileshareProfile",
    modelProperties: {
      shareType: {
        serializedName: "shareType",
        required: true,
        type: {
          name: "String"
        }
      },
      storageType: {
        serializedName: "storageType",
        required: true,
        type: {
          name: "String"
        }
      },
      shareSizeInGB: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "shareSizeInGB",
        type: {
          name: "Number"
        }
      },
      storageResourceId: {
        serializedName: "storageResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      shareName: {
        serializedName: "shareName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PhpProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PhpProfile",
    modelProperties: {
      version: {
        serializedName: "version",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CacheProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CacheProfile",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      skuName: {
        serializedName: "skuName",
        required: true,
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        required: true,
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        required: true,
        type: {
          name: "Number"
        }
      },
      cacheResourceId: {
        serializedName: "cacheResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupProfile",
    modelProperties: {
      backupEnabled: {
        serializedName: "backupEnabled",
        required: true,
        type: {
          name: "String"
        }
      },
      vaultResourceId: {
        serializedName: "vaultResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "Enum",
          allowedValues: ["Free", "Basic", "Standard", "Premium"]
        }
      },
      size: {
        serializedName: "size",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UserAssignedServiceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedServiceIdentity",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" }
          }
        }
      }
    }
  }
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const PatchResourceRequestBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PatchResourceRequestBody",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "PatchResourceRequestBodyIdentity"
        }
      }
    }
  }
};

export const WordpressInstanceResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WordpressInstanceResourceList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WordpressInstanceResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SAPSizingRecommendationRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPSizingRecommendationRequest",
    modelProperties: {
      appLocation: {
        serializedName: "appLocation",
        required: true,
        type: {
          name: "String"
        }
      },
      environment: {
        serializedName: "environment",
        required: true,
        type: {
          name: "String"
        }
      },
      sapProduct: {
        serializedName: "sapProduct",
        required: true,
        type: {
          name: "String"
        }
      },
      deploymentType: {
        serializedName: "deploymentType",
        required: true,
        type: {
          name: "String"
        }
      },
      saps: {
        serializedName: "saps",
        required: true,
        type: {
          name: "Number"
        }
      },
      dbMemory: {
        serializedName: "dbMemory",
        required: true,
        type: {
          name: "Number"
        }
      },
      databaseType: {
        serializedName: "databaseType",
        required: true,
        type: {
          name: "String"
        }
      },
      dbScaleMethod: {
        serializedName: "dbScaleMethod",
        type: {
          name: "String"
        }
      },
      highAvailabilityType: {
        serializedName: "highAvailabilityType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SAPSizingRecommendationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPSizingRecommendationResult",
    uberParent: "SAPSizingRecommendationResult",
    polymorphicDiscriminator: {
      serializedName: "deploymentType",
      clientName: "deploymentType"
    },
    modelProperties: {
      deploymentType: {
        serializedName: "deploymentType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SAPSupportedSkusRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPSupportedSkusRequest",
    modelProperties: {
      appLocation: {
        serializedName: "appLocation",
        required: true,
        type: {
          name: "String"
        }
      },
      environment: {
        serializedName: "environment",
        required: true,
        type: {
          name: "String"
        }
      },
      sapProduct: {
        serializedName: "sapProduct",
        required: true,
        type: {
          name: "String"
        }
      },
      deploymentType: {
        serializedName: "deploymentType",
        required: true,
        type: {
          name: "String"
        }
      },
      databaseType: {
        serializedName: "databaseType",
        required: true,
        type: {
          name: "String"
        }
      },
      highAvailabilityType: {
        serializedName: "highAvailabilityType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SAPSupportedResourceSkusResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPSupportedResourceSkusResult",
    modelProperties: {
      supportedSkus: {
        serializedName: "supportedSkus",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SAPSupportedSku"
            }
          }
        }
      }
    }
  }
};

export const SAPSupportedSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPSupportedSku",
    modelProperties: {
      vmSku: {
        serializedName: "vmSku",
        type: {
          name: "String"
        }
      },
      isAppServerCertified: {
        serializedName: "isAppServerCertified",
        type: {
          name: "Boolean"
        }
      },
      isDatabaseCertified: {
        serializedName: "isDatabaseCertified",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SAPDiskConfigurationsRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPDiskConfigurationsRequest",
    modelProperties: {
      appLocation: {
        serializedName: "appLocation",
        required: true,
        type: {
          name: "String"
        }
      },
      environment: {
        serializedName: "environment",
        required: true,
        type: {
          name: "String"
        }
      },
      sapProduct: {
        serializedName: "sapProduct",
        required: true,
        type: {
          name: "String"
        }
      },
      databaseType: {
        serializedName: "databaseType",
        required: true,
        type: {
          name: "String"
        }
      },
      deploymentType: {
        serializedName: "deploymentType",
        required: true,
        type: {
          name: "String"
        }
      },
      dbVmSku: {
        serializedName: "dbVmSku",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SAPDiskConfigurationsResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPDiskConfigurationsResult",
    modelProperties: {
      diskConfigurations: {
        serializedName: "diskConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SAPDiskConfiguration"
            }
          }
        }
      }
    }
  }
};

export const SAPDiskConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPDiskConfiguration",
    modelProperties: {
      volume: {
        serializedName: "volume",
        type: {
          name: "String"
        }
      },
      diskType: {
        serializedName: "diskType",
        type: {
          name: "String"
        }
      },
      diskCount: {
        serializedName: "diskCount",
        type: {
          name: "Number"
        }
      },
      diskSizeGB: {
        serializedName: "diskSizeGB",
        type: {
          name: "Number"
        }
      },
      diskIopsReadWrite: {
        serializedName: "diskIopsReadWrite",
        type: {
          name: "Number"
        }
      },
      diskMBpsReadWrite: {
        serializedName: "diskMBpsReadWrite",
        type: {
          name: "Number"
        }
      },
      diskStorageType: {
        serializedName: "diskStorageType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SAPAvailabilityZoneDetailsRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPAvailabilityZoneDetailsRequest",
    modelProperties: {
      appLocation: {
        serializedName: "appLocation",
        required: true,
        type: {
          name: "String"
        }
      },
      sapProduct: {
        serializedName: "sapProduct",
        required: true,
        type: {
          name: "String"
        }
      },
      databaseType: {
        serializedName: "databaseType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SAPAvailabilityZoneDetailsResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPAvailabilityZoneDetailsResult",
    modelProperties: {
      availabilityZonePairs: {
        serializedName: "availabilityZonePairs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SAPAvailabilityZonePair"
            }
          }
        }
      }
    }
  }
};

export const SAPAvailabilityZonePair: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPAvailabilityZonePair",
    modelProperties: {
      zoneA: {
        serializedName: "zoneA",
        type: {
          name: "Number"
        }
      },
      zoneB: {
        serializedName: "zoneB",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SAPConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPConfiguration",
    uberParent: "SAPConfiguration",
    polymorphicDiscriminator: {
      serializedName: "configurationType",
      clientName: "configurationType"
    },
    modelProperties: {
      configurationType: {
        serializedName: "configurationType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SAPVirtualInstanceError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPVirtualInstanceError",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ErrorDefinition"
        }
      }
    }
  }
};

export const ErrorDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDefinition",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDefinition"
            }
          }
        }
      }
    }
  }
};

export const UpdateSAPVirtualInstanceRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateSAPVirtualInstanceRequest",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "UserAssignedServiceIdentity"
        }
      }
    }
  }
};

export const OperationStatusResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationStatusResult",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "String"
        }
      },
      percentComplete: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "percentComplete",
        type: {
          name: "Number"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      operations: {
        serializedName: "operations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationStatusResult"
            }
          }
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const SAPVirtualInstanceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPVirtualInstanceList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SAPVirtualInstance"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MessageServerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MessageServerProperties",
    modelProperties: {
      msPort: {
        serializedName: "msPort",
        readOnly: true,
        nullable: true,
        type: {
          name: "Number"
        }
      },
      internalMsPort: {
        serializedName: "internalMsPort",
        readOnly: true,
        nullable: true,
        type: {
          name: "Number"
        }
      },
      httpPort: {
        serializedName: "httpPort",
        readOnly: true,
        nullable: true,
        type: {
          name: "Number"
        }
      },
      httpsPort: {
        serializedName: "httpsPort",
        readOnly: true,
        nullable: true,
        type: {
          name: "Number"
        }
      },
      hostname: {
        serializedName: "hostname",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      health: {
        serializedName: "health",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnqueueServerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnqueueServerProperties",
    modelProperties: {
      hostname: {
        serializedName: "hostname",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        readOnly: true,
        nullable: true,
        type: {
          name: "Number"
        }
      },
      health: {
        serializedName: "health",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GatewayServerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewayServerProperties",
    modelProperties: {
      port: {
        serializedName: "port",
        readOnly: true,
        nullable: true,
        type: {
          name: "Number"
        }
      },
      health: {
        serializedName: "health",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnqueueReplicationServerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnqueueReplicationServerProperties",
    modelProperties: {
      ersVersion: {
        serializedName: "ersVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceNo: {
        serializedName: "instanceNo",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hostname: {
        serializedName: "hostname",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kernelVersion: {
        serializedName: "kernelVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kernelPatch: {
        serializedName: "kernelPatch",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      health: {
        serializedName: "health",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CentralServerVmDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CentralServerVmDetails",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      virtualMachineId: {
        serializedName: "virtualMachineId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateSAPCentralInstanceRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateSAPCentralInstanceRequest",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const SAPCentralInstanceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPCentralInstanceList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SAPCentralServerInstance"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseVmDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseVmDetails",
    modelProperties: {
      virtualMachineId: {
        serializedName: "virtualMachineId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateSAPDatabaseInstanceRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateSAPDatabaseInstanceRequest",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const SAPDatabaseInstanceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPDatabaseInstanceList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SAPDatabaseInstance"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateSAPApplicationInstanceRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateSAPApplicationInstanceRequest",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const SAPApplicationServerInstanceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPApplicationServerInstanceList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SAPApplicationServerInstance"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StopRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StopRequest",
    modelProperties: {
      hardStop: {
        defaultValue: false,
        serializedName: "hardStop",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MonitorListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MonitorListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Monitor"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorModel"
            }
          }
        }
      },
      innerError: {
        serializedName: "innerError",
        type: {
          name: "Composite",
          className: "ErrorInnerError"
        }
      }
    }
  }
};

export const ErrorInnerError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorInnerError",
    modelProperties: {
      innerError: {
        serializedName: "innerError",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      }
    }
  }
};

export const UpdateMonitorRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateMonitorRequest",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "UserAssignedServiceIdentity"
        }
      }
    }
  }
};

export const ProviderInstanceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProviderInstanceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProviderInstance"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProviderSpecificProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProviderSpecificProperties",
    uberParent: "ProviderSpecificProperties",
    polymorphicDiscriminator: {
      serializedName: "providerType",
      clientName: "providerType"
    },
    modelProperties: {
      providerType: {
        serializedName: "providerType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkusListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkusListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuDefinition"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuDefinition",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      resourceType: {
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "size",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      locations: {
        serializedName: "locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      locationInfo: {
        serializedName: "locationInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuLocationAndZones"
            }
          }
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      costs: {
        serializedName: "costs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuCost"
            }
          }
        }
      },
      capabilities: {
        serializedName: "capabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuCapability"
            }
          }
        }
      },
      restrictions: {
        serializedName: "restrictions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuRestriction"
            }
          }
        }
      }
    }
  }
};

export const SkuLocationAndZones: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuLocationAndZones",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      zoneDetails: {
        serializedName: "zoneDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuZoneDetail"
            }
          }
        }
      },
      extendedLocations: {
        serializedName: "extendedLocations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuZoneDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuZoneDetail",
    modelProperties: {
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      capabilities: {
        serializedName: "capabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuCapability"
            }
          }
        }
      }
    }
  }
};

export const SkuCapability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuCapability",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuCost: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuCost",
    modelProperties: {
      meterId: {
        serializedName: "meterId",
        type: {
          name: "String"
        }
      },
      quantity: {
        serializedName: "quantity",
        type: {
          name: "Number"
        }
      },
      extendedUnit: {
        serializedName: "extendedUnit",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuRestriction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuRestriction",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      restrictionInfo: {
        serializedName: "restrictionInfo",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      reasonCode: {
        serializedName: "reasonCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageReference",
    modelProperties: {
      publisher: {
        serializedName: "publisher",
        type: {
          name: "String"
        }
      },
      offer: {
        serializedName: "offer",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      exactVersion: {
        serializedName: "exactVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sharedGalleryImageId: {
        serializedName: "sharedGalleryImageId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OSConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OSConfiguration",
    uberParent: "OSConfiguration",
    polymorphicDiscriminator: {
      serializedName: "osType",
      clientName: "osType"
    },
    modelProperties: {
      osType: {
        serializedName: "osType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SshPublicKey: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SshPublicKey",
    modelProperties: {
      keyData: {
        serializedName: "keyData",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SshConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SshConfiguration",
    modelProperties: {
      publicKeys: {
        serializedName: "publicKeys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SshPublicKey"
            }
          }
        }
      }
    }
  }
};

export const SshKeyPair: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SshKeyPair",
    modelProperties: {
      publicKey: {
        serializedName: "publicKey",
        type: {
          name: "String"
        }
      },
      privateKey: {
        serializedName: "privateKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OSProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OSProfile",
    modelProperties: {
      adminUsername: {
        serializedName: "adminUsername",
        type: {
          name: "String"
        }
      },
      adminPassword: {
        serializedName: "adminPassword",
        type: {
          name: "String"
        }
      },
      osConfiguration: {
        serializedName: "osConfiguration",
        type: {
          name: "Composite",
          className: "OSConfiguration"
        }
      }
    }
  }
};

export const VirtualMachineConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineConfiguration",
    modelProperties: {
      vmSize: {
        serializedName: "vmSize",
        required: true,
        type: {
          name: "String"
        }
      },
      imageReference: {
        serializedName: "imageReference",
        type: {
          name: "Composite",
          className: "ImageReference"
        }
      },
      osProfile: {
        serializedName: "osProfile",
        type: {
          name: "Composite",
          className: "OSProfile"
        }
      }
    }
  }
};

export const NetworkConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkConfiguration",
    modelProperties: {
      isSecondaryIpEnabled: {
        defaultValue: false,
        serializedName: "isSecondaryIpEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const InfrastructureConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InfrastructureConfiguration",
    uberParent: "InfrastructureConfiguration",
    polymorphicDiscriminator: {
      serializedName: "deploymentType",
      clientName: "deploymentType"
    },
    modelProperties: {
      deploymentType: {
        serializedName: "deploymentType",
        required: true,
        type: {
          name: "String"
        }
      },
      appResourceGroup: {
        serializedName: "appResourceGroup",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CentralServerConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CentralServerConfiguration",
    modelProperties: {
      subnetId: {
        serializedName: "subnetId",
        required: true,
        type: {
          name: "String"
        }
      },
      virtualMachineConfiguration: {
        serializedName: "virtualMachineConfiguration",
        type: {
          name: "Composite",
          className: "VirtualMachineConfiguration"
        }
      },
      instanceCount: {
        serializedName: "instanceCount",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DatabaseConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseConfiguration",
    modelProperties: {
      databaseType: {
        serializedName: "databaseType",
        type: {
          name: "String"
        }
      },
      subnetId: {
        serializedName: "subnetId",
        required: true,
        type: {
          name: "String"
        }
      },
      virtualMachineConfiguration: {
        serializedName: "virtualMachineConfiguration",
        type: {
          name: "Composite",
          className: "VirtualMachineConfiguration"
        }
      },
      instanceCount: {
        serializedName: "instanceCount",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ApplicationServerConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationServerConfiguration",
    modelProperties: {
      subnetId: {
        serializedName: "subnetId",
        required: true,
        type: {
          name: "String"
        }
      },
      virtualMachineConfiguration: {
        serializedName: "virtualMachineConfiguration",
        type: {
          name: "Composite",
          className: "VirtualMachineConfiguration"
        }
      },
      instanceCount: {
        serializedName: "instanceCount",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const HighAvailabilityConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HighAvailabilityConfiguration",
    modelProperties: {
      highAvailabilityType: {
        serializedName: "highAvailabilityType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SoftwareConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SoftwareConfiguration",
    uberParent: "SoftwareConfiguration",
    polymorphicDiscriminator: {
      serializedName: "softwareInstallationType",
      clientName: "softwareInstallationType"
    },
    modelProperties: {
      softwareInstallationType: {
        serializedName: "softwareInstallationType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HighAvailabilitySoftwareConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HighAvailabilitySoftwareConfiguration",
    modelProperties: {
      fencingClientId: {
        serializedName: "fencingClientId",
        required: true,
        type: {
          name: "String"
        }
      },
      fencingClientPassword: {
        serializedName: "fencingClientPassword",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OsSapConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OsSapConfiguration",
    modelProperties: {
      deployerVmPackages: {
        serializedName: "deployerVmPackages",
        type: {
          name: "Composite",
          className: "DeployerVmPackages"
        }
      },
      sapFqdn: {
        serializedName: "sapFqdn",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeployerVmPackages: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeployerVmPackages",
    modelProperties: {
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      storageAccountId: {
        serializedName: "storageAccountId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationsDisplayDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationsDisplayDefinition",
    modelProperties: {
      provider: {
        serializedName: "provider",
        required: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        required: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationsDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationsDefinition",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationsDefinitionDisplay"
        }
      },
      actionType: {
        serializedName: "actionType",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "any"
        }
      }
    }
  }
};

export const OperationsDefinitionArrayResponseWithContinuation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationsDefinitionArrayResponseWithContinuation",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationsDefinition"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Tags: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Tags",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const RestrictionInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestrictionInfo",
    modelProperties: {
      locations: {
        serializedName: "locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SkuCapacity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuCapacity",
    modelProperties: {
      minimum: {
        serializedName: "minimum",
        type: {
          name: "Number"
        }
      },
      maximum: {
        serializedName: "maximum",
        type: {
          name: "Number"
        }
      },
      default: {
        serializedName: "default",
        type: {
          name: "Number"
        }
      },
      scaleType: {
        serializedName: "scaleType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VmssNodesProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VmssNodesProfile",
    modelProperties: {
      ...NodeProfile.type.modelProperties,
      autoScaleMinCount: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "autoScaleMinCount",
        type: {
          name: "Number"
        }
      },
      autoScaleMaxCount: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "autoScaleMaxCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SearchProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SearchProfile",
    modelProperties: {
      ...NodeProfile.type.modelProperties,
      searchType: {
        serializedName: "searchType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PhpWorkloadResourceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PhpWorkloadResourceIdentity",
    modelProperties: {
      ...UserAssignedServiceIdentity.type.modelProperties
    }
  }
};

export const PatchResourceRequestBodyIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PatchResourceRequestBodyIdentity",
    modelProperties: {
      ...UserAssignedServiceIdentity.type.modelProperties
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const OperationsContent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationsContent",
    modelProperties: {
      ...Resource.type.modelProperties,
      namePropertiesName: {
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "properties.isDataAction",
        type: {
          name: "Boolean"
        }
      },
      origin: {
        serializedName: "properties.origin",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "properties.display",
        type: {
          name: "Composite",
          className: "OperationsDefinitionDisplay"
        }
      },
      actionType: {
        serializedName: "properties.actionType",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties.properties",
        type: {
          name: "any"
        }
      }
    }
  }
};

export const SingleServerRecommendationResult: coreClient.CompositeMapper = {
  serializedName: "SingleServer",
  type: {
    name: "Composite",
    className: "SingleServerRecommendationResult",
    uberParent: "SAPSizingRecommendationResult",
    polymorphicDiscriminator:
      SAPSizingRecommendationResult.type.polymorphicDiscriminator,
    modelProperties: {
      ...SAPSizingRecommendationResult.type.modelProperties,
      vmSku: {
        serializedName: "vmSku",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ThreeTierRecommendationResult: coreClient.CompositeMapper = {
  serializedName: "ThreeTier",
  type: {
    name: "Composite",
    className: "ThreeTierRecommendationResult",
    uberParent: "SAPSizingRecommendationResult",
    polymorphicDiscriminator:
      SAPSizingRecommendationResult.type.polymorphicDiscriminator,
    modelProperties: {
      ...SAPSizingRecommendationResult.type.modelProperties,
      dbVmSku: {
        serializedName: "dbVmSku",
        type: {
          name: "String"
        }
      },
      databaseInstanceCount: {
        serializedName: "databaseInstanceCount",
        type: {
          name: "Number"
        }
      },
      centralServerVmSku: {
        serializedName: "centralServerVmSku",
        type: {
          name: "String"
        }
      },
      centralServerInstanceCount: {
        serializedName: "centralServerInstanceCount",
        type: {
          name: "Number"
        }
      },
      applicationServerVmSku: {
        serializedName: "applicationServerVmSku",
        type: {
          name: "String"
        }
      },
      applicationServerInstanceCount: {
        serializedName: "applicationServerInstanceCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DiscoveryConfiguration: coreClient.CompositeMapper = {
  serializedName: "Discovery",
  type: {
    name: "Composite",
    className: "DiscoveryConfiguration",
    uberParent: "SAPConfiguration",
    polymorphicDiscriminator: SAPConfiguration.type.polymorphicDiscriminator,
    modelProperties: {
      ...SAPConfiguration.type.modelProperties,
      centralServerVmId: {
        serializedName: "centralServerVmId",
        type: {
          name: "String"
        }
      },
      appLocation: {
        serializedName: "appLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeploymentConfiguration: coreClient.CompositeMapper = {
  serializedName: "Deployment",
  type: {
    name: "Composite",
    className: "DeploymentConfiguration",
    uberParent: "SAPConfiguration",
    polymorphicDiscriminator: SAPConfiguration.type.polymorphicDiscriminator,
    modelProperties: {
      ...SAPConfiguration.type.modelProperties,
      appLocation: {
        serializedName: "appLocation",
        type: {
          name: "String"
        }
      },
      infrastructureConfiguration: {
        serializedName: "infrastructureConfiguration",
        type: {
          name: "Composite",
          className: "InfrastructureConfiguration"
        }
      },
      softwareConfiguration: {
        serializedName: "softwareConfiguration",
        type: {
          name: "Composite",
          className: "SoftwareConfiguration"
        }
      }
    }
  }
};

export const DeploymentWithOSConfiguration: coreClient.CompositeMapper = {
  serializedName: "DeploymentWithOSConfig",
  type: {
    name: "Composite",
    className: "DeploymentWithOSConfiguration",
    uberParent: "SAPConfiguration",
    polymorphicDiscriminator: SAPConfiguration.type.polymorphicDiscriminator,
    modelProperties: {
      ...SAPConfiguration.type.modelProperties,
      appLocation: {
        serializedName: "appLocation",
        type: {
          name: "String"
        }
      },
      infrastructureConfiguration: {
        serializedName: "infrastructureConfiguration",
        type: {
          name: "Composite",
          className: "InfrastructureConfiguration"
        }
      },
      softwareConfiguration: {
        serializedName: "softwareConfiguration",
        type: {
          name: "Composite",
          className: "SoftwareConfiguration"
        }
      },
      osSapConfiguration: {
        serializedName: "osSapConfiguration",
        type: {
          name: "Composite",
          className: "OsSapConfiguration"
        }
      }
    }
  }
};

export const MonitorPropertiesErrors: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MonitorPropertiesErrors",
    modelProperties: {
      ...ErrorModel.type.modelProperties
    }
  }
};

export const ProviderInstancePropertiesErrors: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProviderInstancePropertiesErrors",
    modelProperties: {
      ...ErrorModel.type.modelProperties
    }
  }
};

export const HanaDbProviderInstanceProperties: coreClient.CompositeMapper = {
  serializedName: "SapHana",
  type: {
    name: "Composite",
    className: "HanaDbProviderInstanceProperties",
    uberParent: "ProviderSpecificProperties",
    polymorphicDiscriminator:
      ProviderSpecificProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProviderSpecificProperties.type.modelProperties,
      hostname: {
        serializedName: "hostname",
        type: {
          name: "String"
        }
      },
      dbName: {
        serializedName: "dbName",
        type: {
          name: "String"
        }
      },
      sqlPort: {
        serializedName: "sqlPort",
        type: {
          name: "String"
        }
      },
      instanceNumber: {
        serializedName: "instanceNumber",
        type: {
          name: "String"
        }
      },
      dbUsername: {
        serializedName: "dbUsername",
        type: {
          name: "String"
        }
      },
      dbPassword: {
        serializedName: "dbPassword",
        type: {
          name: "String"
        }
      },
      dbPasswordUri: {
        serializedName: "dbPasswordUri",
        type: {
          name: "String"
        }
      },
      dbSslCertificateUri: {
        serializedName: "dbSslCertificateUri",
        type: {
          name: "String"
        }
      },
      sslHostNameInCertificate: {
        serializedName: "sslHostNameInCertificate",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SapNetWeaverProviderInstanceProperties: coreClient.CompositeMapper = {
  serializedName: "SapNetWeaver",
  type: {
    name: "Composite",
    className: "SapNetWeaverProviderInstanceProperties",
    uberParent: "ProviderSpecificProperties",
    polymorphicDiscriminator:
      ProviderSpecificProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProviderSpecificProperties.type.modelProperties,
      sapSid: {
        serializedName: "sapSid",
        type: {
          name: "String"
        }
      },
      sapHostname: {
        serializedName: "sapHostname",
        type: {
          name: "String"
        }
      },
      sapInstanceNr: {
        serializedName: "sapInstanceNr",
        type: {
          name: "String"
        }
      },
      sapHostFileEntries: {
        serializedName: "sapHostFileEntries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      sapUsername: {
        serializedName: "sapUsername",
        type: {
          name: "String"
        }
      },
      sapPassword: {
        serializedName: "sapPassword",
        type: {
          name: "String"
        }
      },
      sapPasswordUri: {
        serializedName: "sapPasswordUri",
        type: {
          name: "String"
        }
      },
      sapClientId: {
        serializedName: "sapClientId",
        type: {
          name: "String"
        }
      },
      sapPortNumber: {
        serializedName: "sapPortNumber",
        type: {
          name: "String"
        }
      },
      sapSslCertificateUri: {
        serializedName: "sapSslCertificateUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrometheusOSProviderInstanceProperties: coreClient.CompositeMapper = {
  serializedName: "PrometheusOS",
  type: {
    name: "Composite",
    className: "PrometheusOSProviderInstanceProperties",
    uberParent: "ProviderSpecificProperties",
    polymorphicDiscriminator:
      ProviderSpecificProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProviderSpecificProperties.type.modelProperties,
      prometheusUrl: {
        serializedName: "prometheusUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DB2ProviderInstanceProperties: coreClient.CompositeMapper = {
  serializedName: "Db2",
  type: {
    name: "Composite",
    className: "DB2ProviderInstanceProperties",
    uberParent: "ProviderSpecificProperties",
    polymorphicDiscriminator:
      ProviderSpecificProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProviderSpecificProperties.type.modelProperties,
      hostname: {
        serializedName: "hostname",
        type: {
          name: "String"
        }
      },
      dbName: {
        serializedName: "dbName",
        type: {
          name: "String"
        }
      },
      dbPort: {
        serializedName: "dbPort",
        type: {
          name: "String"
        }
      },
      dbUsername: {
        serializedName: "dbUsername",
        type: {
          name: "String"
        }
      },
      dbPassword: {
        serializedName: "dbPassword",
        type: {
          name: "String"
        }
      },
      dbPasswordUri: {
        serializedName: "dbPasswordUri",
        type: {
          name: "String"
        }
      },
      sapSid: {
        serializedName: "sapSid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrometheusHaClusterProviderInstanceProperties: coreClient.CompositeMapper = {
  serializedName: "PrometheusHaCluster",
  type: {
    name: "Composite",
    className: "PrometheusHaClusterProviderInstanceProperties",
    uberParent: "ProviderSpecificProperties",
    polymorphicDiscriminator:
      ProviderSpecificProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProviderSpecificProperties.type.modelProperties,
      prometheusUrl: {
        serializedName: "prometheusUrl",
        type: {
          name: "String"
        }
      },
      hostname: {
        serializedName: "hostname",
        type: {
          name: "String"
        }
      },
      sid: {
        serializedName: "sid",
        type: {
          name: "String"
        }
      },
      clusterName: {
        serializedName: "clusterName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MsSqlServerProviderInstanceProperties: coreClient.CompositeMapper = {
  serializedName: "MsSqlServer",
  type: {
    name: "Composite",
    className: "MsSqlServerProviderInstanceProperties",
    uberParent: "ProviderSpecificProperties",
    polymorphicDiscriminator:
      ProviderSpecificProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProviderSpecificProperties.type.modelProperties,
      hostname: {
        serializedName: "hostname",
        type: {
          name: "String"
        }
      },
      dbPort: {
        serializedName: "dbPort",
        type: {
          name: "String"
        }
      },
      dbUsername: {
        serializedName: "dbUsername",
        type: {
          name: "String"
        }
      },
      dbPassword: {
        serializedName: "dbPassword",
        type: {
          name: "String"
        }
      },
      dbPasswordUri: {
        serializedName: "dbPasswordUri",
        type: {
          name: "String"
        }
      },
      sapSid: {
        serializedName: "sapSid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WindowsConfiguration: coreClient.CompositeMapper = {
  serializedName: "Windows",
  type: {
    name: "Composite",
    className: "WindowsConfiguration",
    uberParent: "OSConfiguration",
    polymorphicDiscriminator: OSConfiguration.type.polymorphicDiscriminator,
    modelProperties: {
      ...OSConfiguration.type.modelProperties
    }
  }
};

export const LinuxConfiguration: coreClient.CompositeMapper = {
  serializedName: "Linux",
  type: {
    name: "Composite",
    className: "LinuxConfiguration",
    uberParent: "OSConfiguration",
    polymorphicDiscriminator: OSConfiguration.type.polymorphicDiscriminator,
    modelProperties: {
      ...OSConfiguration.type.modelProperties,
      disablePasswordAuthentication: {
        serializedName: "disablePasswordAuthentication",
        type: {
          name: "Boolean"
        }
      },
      ssh: {
        serializedName: "ssh",
        type: {
          name: "Composite",
          className: "SshConfiguration"
        }
      },
      sshKeyPair: {
        serializedName: "sshKeyPair",
        type: {
          name: "Composite",
          className: "SshKeyPair"
        }
      }
    }
  }
};

export const SingleServerConfiguration: coreClient.CompositeMapper = {
  serializedName: "SingleServer",
  type: {
    name: "Composite",
    className: "SingleServerConfiguration",
    uberParent: "InfrastructureConfiguration",
    polymorphicDiscriminator:
      InfrastructureConfiguration.type.polymorphicDiscriminator,
    modelProperties: {
      ...InfrastructureConfiguration.type.modelProperties,
      networkConfiguration: {
        serializedName: "networkConfiguration",
        type: {
          name: "Composite",
          className: "NetworkConfiguration"
        }
      },
      databaseType: {
        serializedName: "databaseType",
        type: {
          name: "String"
        }
      },
      subnetId: {
        serializedName: "subnetId",
        required: true,
        type: {
          name: "String"
        }
      },
      virtualMachineConfiguration: {
        serializedName: "virtualMachineConfiguration",
        type: {
          name: "Composite",
          className: "VirtualMachineConfiguration"
        }
      }
    }
  }
};

export const ThreeTierConfiguration: coreClient.CompositeMapper = {
  serializedName: "ThreeTier",
  type: {
    name: "Composite",
    className: "ThreeTierConfiguration",
    uberParent: "InfrastructureConfiguration",
    polymorphicDiscriminator:
      InfrastructureConfiguration.type.polymorphicDiscriminator,
    modelProperties: {
      ...InfrastructureConfiguration.type.modelProperties,
      networkConfiguration: {
        serializedName: "networkConfiguration",
        type: {
          name: "Composite",
          className: "NetworkConfiguration"
        }
      },
      centralServer: {
        serializedName: "centralServer",
        type: {
          name: "Composite",
          className: "CentralServerConfiguration"
        }
      },
      applicationServer: {
        serializedName: "applicationServer",
        type: {
          name: "Composite",
          className: "ApplicationServerConfiguration"
        }
      },
      databaseServer: {
        serializedName: "databaseServer",
        type: {
          name: "Composite",
          className: "DatabaseConfiguration"
        }
      },
      highAvailabilityConfig: {
        serializedName: "highAvailabilityConfig",
        type: {
          name: "Composite",
          className: "HighAvailabilityConfiguration"
        }
      }
    }
  }
};

export const ServiceInitiatedSoftwareConfiguration: coreClient.CompositeMapper = {
  serializedName: "ServiceInitiated",
  type: {
    name: "Composite",
    className: "ServiceInitiatedSoftwareConfiguration",
    uberParent: "SoftwareConfiguration",
    polymorphicDiscriminator:
      SoftwareConfiguration.type.polymorphicDiscriminator,
    modelProperties: {
      ...SoftwareConfiguration.type.modelProperties,
      bomUrl: {
        serializedName: "bomUrl",
        required: true,
        type: {
          name: "String"
        }
      },
      softwareVersion: {
        serializedName: "softwareVersion",
        required: true,
        type: {
          name: "String"
        }
      },
      sapBitsStorageAccountId: {
        serializedName: "sapBitsStorageAccountId",
        required: true,
        type: {
          name: "String"
        }
      },
      sapFqdn: {
        serializedName: "sapFqdn",
        required: true,
        type: {
          name: "String"
        }
      },
      sshPrivateKey: {
        serializedName: "sshPrivateKey",
        required: true,
        type: {
          name: "String"
        }
      },
      highAvailabilitySoftwareConfiguration: {
        serializedName: "highAvailabilitySoftwareConfiguration",
        type: {
          name: "Composite",
          className: "HighAvailabilitySoftwareConfiguration"
        }
      }
    }
  }
};

export const SAPInstallWithoutOSConfigSoftwareConfiguration: coreClient.CompositeMapper = {
  serializedName: "SAPInstallWithoutOSConfig",
  type: {
    name: "Composite",
    className: "SAPInstallWithoutOSConfigSoftwareConfiguration",
    uberParent: "SoftwareConfiguration",
    polymorphicDiscriminator:
      SoftwareConfiguration.type.polymorphicDiscriminator,
    modelProperties: {
      ...SoftwareConfiguration.type.modelProperties,
      bomUrl: {
        serializedName: "bomUrl",
        required: true,
        type: {
          name: "String"
        }
      },
      sapBitsStorageAccountId: {
        serializedName: "sapBitsStorageAccountId",
        required: true,
        type: {
          name: "String"
        }
      },
      softwareVersion: {
        serializedName: "softwareVersion",
        required: true,
        type: {
          name: "String"
        }
      },
      highAvailabilitySoftwareConfiguration: {
        serializedName: "highAvailabilitySoftwareConfiguration",
        type: {
          name: "Composite",
          className: "HighAvailabilitySoftwareConfiguration"
        }
      }
    }
  }
};

export const OperationsDefinitionDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationsDefinitionDisplay",
    modelProperties: {
      ...OperationsDisplayDefinition.type.modelProperties
    }
  }
};

export const PhpWorkloadResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PhpWorkloadResource",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "PhpWorkloadResourceIdentity"
        }
      },
      appLocation: {
        serializedName: "properties.appLocation",
        type: {
          name: "String"
        }
      },
      managedResourceGroupConfiguration: {
        serializedName: "properties.managedResourceGroupConfiguration",
        type: {
          name: "Composite",
          className: "ManagedRGConfiguration"
        }
      },
      adminUserProfile: {
        serializedName: "properties.adminUserProfile",
        type: {
          name: "Composite",
          className: "UserProfile"
        }
      },
      webNodesProfile: {
        serializedName: "properties.webNodesProfile",
        type: {
          name: "Composite",
          className: "VmssNodesProfile"
        }
      },
      controllerProfile: {
        serializedName: "properties.controllerProfile",
        type: {
          name: "Composite",
          className: "NodeProfile"
        }
      },
      networkProfile: {
        serializedName: "properties.networkProfile",
        type: {
          name: "Composite",
          className: "NetworkProfile"
        }
      },
      databaseProfile: {
        serializedName: "properties.databaseProfile",
        type: {
          name: "Composite",
          className: "DatabaseProfile"
        }
      },
      siteProfile: {
        serializedName: "properties.siteProfile",
        type: {
          name: "Composite",
          className: "SiteProfile"
        }
      },
      fileshareProfile: {
        serializedName: "properties.fileshareProfile",
        type: {
          name: "Composite",
          className: "FileshareProfile"
        }
      },
      phpProfile: {
        serializedName: "properties.phpProfile",
        type: {
          name: "Composite",
          className: "PhpProfile"
        }
      },
      searchProfile: {
        serializedName: "properties.searchProfile",
        type: {
          name: "Composite",
          className: "SearchProfile"
        }
      },
      cacheProfile: {
        serializedName: "properties.cacheProfile",
        type: {
          name: "Composite",
          className: "CacheProfile"
        }
      },
      backupProfile: {
        serializedName: "properties.backupProfile",
        type: {
          name: "Composite",
          className: "BackupProfile"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SAPVirtualInstance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPVirtualInstance",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "UserAssignedServiceIdentity"
        }
      },
      environment: {
        serializedName: "properties.environment",
        required: true,
        type: {
          name: "String"
        }
      },
      sapProduct: {
        serializedName: "properties.sapProduct",
        required: true,
        type: {
          name: "String"
        }
      },
      configuration: {
        serializedName: "properties.configuration",
        type: {
          name: "Composite",
          className: "SAPConfiguration"
        }
      },
      managedResourceGroupConfiguration: {
        serializedName: "properties.managedResourceGroupConfiguration",
        type: {
          name: "Composite",
          className: "ManagedRGConfiguration"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      health: {
        serializedName: "properties.health",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errors: {
        serializedName: "properties.errors",
        type: {
          name: "Composite",
          className: "SAPVirtualInstanceError"
        }
      }
    }
  }
};

export const SAPCentralServerInstance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPCentralServerInstance",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      instanceNo: {
        serializedName: "properties.instanceNo",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "properties.subnet",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      messageServerProperties: {
        serializedName: "properties.messageServerProperties",
        type: {
          name: "Composite",
          className: "MessageServerProperties"
        }
      },
      enqueueServerProperties: {
        serializedName: "properties.enqueueServerProperties",
        type: {
          name: "Composite",
          className: "EnqueueServerProperties"
        }
      },
      gatewayServerProperties: {
        serializedName: "properties.gatewayServerProperties",
        type: {
          name: "Composite",
          className: "GatewayServerProperties"
        }
      },
      enqueueReplicationServerProperties: {
        serializedName: "properties.enqueueReplicationServerProperties",
        type: {
          name: "Composite",
          className: "EnqueueReplicationServerProperties"
        }
      },
      kernelVersion: {
        serializedName: "properties.kernelVersion",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      kernelPatch: {
        serializedName: "properties.kernelPatch",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      vmDetails: {
        serializedName: "properties.vmDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CentralServerVmDetails"
            }
          }
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      health: {
        serializedName: "properties.health",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errors: {
        serializedName: "properties.errors",
        type: {
          name: "Composite",
          className: "SAPVirtualInstanceError"
        }
      }
    }
  }
};

export const SAPDatabaseInstance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPDatabaseInstance",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      subnet: {
        serializedName: "properties.subnet",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      databaseSid: {
        serializedName: "properties.databaseSid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      databaseType: {
        serializedName: "properties.databaseType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "properties.ipAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vmDetails: {
        serializedName: "properties.vmDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseVmDetails"
            }
          }
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errors: {
        serializedName: "properties.errors",
        type: {
          name: "Composite",
          className: "SAPVirtualInstanceError"
        }
      }
    }
  }
};

export const SAPApplicationServerInstance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SAPApplicationServerInstance",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      instanceNo: {
        serializedName: "properties.instanceNo",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "properties.subnet",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hostname: {
        serializedName: "properties.hostname",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kernelVersion: {
        serializedName: "properties.kernelVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kernelPatch: {
        serializedName: "properties.kernelPatch",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "properties.ipAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      gatewayPort: {
        serializedName: "properties.gatewayPort",
        readOnly: true,
        nullable: true,
        type: {
          name: "Number"
        }
      },
      icmHttpPort: {
        serializedName: "properties.icmHttpPort",
        readOnly: true,
        nullable: true,
        type: {
          name: "Number"
        }
      },
      icmHttpsPort: {
        serializedName: "properties.icmHttpsPort",
        readOnly: true,
        nullable: true,
        type: {
          name: "Number"
        }
      },
      virtualMachineId: {
        serializedName: "properties.virtualMachineId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      health: {
        serializedName: "properties.health",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errors: {
        serializedName: "properties.errors",
        type: {
          name: "Composite",
          className: "SAPVirtualInstanceError"
        }
      }
    }
  }
};

export const Monitor: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Monitor",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "UserAssignedServiceIdentity"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errors: {
        serializedName: "properties.errors",
        type: {
          name: "Composite",
          className: "MonitorPropertiesErrors"
        }
      },
      appLocation: {
        serializedName: "properties.appLocation",
        type: {
          name: "String"
        }
      },
      routingPreference: {
        serializedName: "properties.routingPreference",
        type: {
          name: "String"
        }
      },
      managedResourceGroupConfiguration: {
        serializedName: "properties.managedResourceGroupConfiguration",
        type: {
          name: "Composite",
          className: "ManagedRGConfiguration"
        }
      },
      logAnalyticsWorkspaceArmId: {
        serializedName: "properties.logAnalyticsWorkspaceArmId",
        type: {
          name: "String"
        }
      },
      monitorSubnet: {
        serializedName: "properties.monitorSubnet",
        type: {
          name: "String"
        }
      },
      msiArmId: {
        serializedName: "properties.msiArmId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WordpressInstanceResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WordpressInstanceResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      version: {
        serializedName: "properties.version",
        type: {
          name: "String"
        }
      },
      databaseName: {
        serializedName: "properties.databaseName",
        type: {
          name: "String"
        }
      },
      databaseUser: {
        serializedName: "properties.databaseUser",
        type: {
          name: "String"
        }
      },
      siteUrl: {
        serializedName: "properties.siteUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProviderInstance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProviderInstance",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "UserAssignedServiceIdentity"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errors: {
        serializedName: "properties.errors",
        type: {
          name: "Composite",
          className: "ProviderInstancePropertiesErrors"
        }
      },
      providerSettings: {
        serializedName: "properties.providerSettings",
        type: {
          name: "Composite",
          className: "ProviderSpecificProperties"
        }
      }
    }
  }
};

export let discriminators = {
  SAPSizingRecommendationResult: SAPSizingRecommendationResult,
  SAPConfiguration: SAPConfiguration,
  ProviderSpecificProperties: ProviderSpecificProperties,
  OSConfiguration: OSConfiguration,
  InfrastructureConfiguration: InfrastructureConfiguration,
  SoftwareConfiguration: SoftwareConfiguration,
  "SAPSizingRecommendationResult.SingleServer": SingleServerRecommendationResult,
  "SAPSizingRecommendationResult.ThreeTier": ThreeTierRecommendationResult,
  "SAPConfiguration.Discovery": DiscoveryConfiguration,
  "SAPConfiguration.Deployment": DeploymentConfiguration,
  "SAPConfiguration.DeploymentWithOSConfig": DeploymentWithOSConfiguration,
  "ProviderSpecificProperties.SapHana": HanaDbProviderInstanceProperties,
  "ProviderSpecificProperties.SapNetWeaver": SapNetWeaverProviderInstanceProperties,
  "ProviderSpecificProperties.PrometheusOS": PrometheusOSProviderInstanceProperties,
  "ProviderSpecificProperties.Db2": DB2ProviderInstanceProperties,
  "ProviderSpecificProperties.PrometheusHaCluster": PrometheusHaClusterProviderInstanceProperties,
  "ProviderSpecificProperties.MsSqlServer": MsSqlServerProviderInstanceProperties,
  "OSConfiguration.Windows": WindowsConfiguration,
  "OSConfiguration.Linux": LinuxConfiguration,
  "InfrastructureConfiguration.SingleServer": SingleServerConfiguration,
  "InfrastructureConfiguration.ThreeTier": ThreeTierConfiguration,
  "SoftwareConfiguration.ServiceInitiated": ServiceInitiatedSoftwareConfiguration,
  "SoftwareConfiguration.SAPInstallWithoutOSConfig": SAPInstallWithoutOSConfigSoftwareConfiguration
};
