/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Connector,
  ConnectorsListByResourceGroupOptionalParams,
  ConnectorsListBySubscriptionOptionalParams,
  ConnectorsCreateOptionalParams,
  ConnectorsCreateResponse,
  ConnectorsGetOptionalParams,
  ConnectorsGetResponse,
  ConnectorsUpdateOptionalParams,
  ConnectorsUpdateResponse,
  ConnectorsDeleteOptionalParams,
  ConnectorsDeleteResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Connectors. */
export interface Connectors {
  /**
   * Gets all connector resources in a Resource Group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: ConnectorsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<Connector>;
  /**
   * Gets all connector resources in a Subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: ConnectorsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<Connector>;
  /**
   * Creates a connector resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectorName The name of the connector resource
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    connectorName: string,
    options?: ConnectorsCreateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<ConnectorsCreateResponse>,
      ConnectorsCreateResponse
    >
  >;
  /**
   * Creates a connector resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectorName The name of the connector resource
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    connectorName: string,
    options?: ConnectorsCreateOptionalParams
  ): Promise<ConnectorsCreateResponse>;
  /**
   * Gets a connector resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectorName The name of the connector resource
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    connectorName: string,
    options?: ConnectorsGetOptionalParams
  ): Promise<ConnectorsGetResponse>;
  /**
   * Updates a connector resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectorName The name of the connector resource
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    connectorName: string,
    options?: ConnectorsUpdateOptionalParams
  ): Promise<ConnectorsUpdateResponse>;
  /**
   * Deletes a connector resource and its child resources, which are the associated connection resources.
   * All the child resources have to be deleted before deleting the connector resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectorName The name of the connector resource
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    connectorName: string,
    options?: ConnectorsDeleteOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<ConnectorsDeleteResponse>,
      ConnectorsDeleteResponse
    >
  >;
  /**
   * Deletes a connector resource and its child resources, which are the associated connection resources.
   * All the child resources have to be deleted before deleting the connector resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param connectorName The name of the connector resource
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    connectorName: string,
    options?: ConnectorsDeleteOptionalParams
  ): Promise<ConnectorsDeleteResponse>;
}
