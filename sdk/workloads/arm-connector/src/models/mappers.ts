/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const UserAssignedServiceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedServiceIdentity",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" }
          }
        }
      }
    }
  }
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const ConnectorErrorDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectorErrorDefinition",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectorErrorDefinition"
            }
          }
        }
      }
    }
  }
};

export const ManagedRGConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedRGConfiguration",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const UpdateConnectorRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateConnectorRequest",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "UserAssignedServiceIdentity"
        }
      }
    }
  }
};

export const ConnectorList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectorList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Connector"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupData",
    uberParent: "BackupData",
    polymorphicDiscriminator: {
      serializedName: "backupType",
      clientName: "backupType"
    },
    modelProperties: {
      backupType: {
        serializedName: "backupType",
        required: true,
        type: {
          name: "String"
        }
      },
      recoveryServicesVault: {
        serializedName: "recoveryServicesVault",
        type: {
          name: "Composite",
          className: "RecoveryServicesVaultProperties"
        }
      }
    }
  }
};

export const RecoveryServicesVaultProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryServicesVaultProperties",
    uberParent: "RecoveryServicesVaultProperties",
    polymorphicDiscriminator: {
      serializedName: "vaultType",
      clientName: "vaultType"
    },
    modelProperties: {
      vaultType: {
        serializedName: "vaultType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateAcssBackupConnectionRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateAcssBackupConnectionRequest",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const AcssBackupConnectionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AcssBackupConnectionList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AcssBackupConnection"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMBackupPolicyProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMBackupPolicyProperties",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      protectedItemsCount: {
        serializedName: "properties.protectedItemsCount",
        type: {
          name: "Number"
        }
      },
      backupManagementType: {
        serializedName: "properties.backupManagementType",
        type: {
          name: "String"
        }
      },
      resourceGuardOperationRequests: {
        serializedName: "properties.resourceGuardOperationRequests",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      instantRPDetails: {
        serializedName: "properties.instantRPDetails",
        type: {
          name: "Composite",
          className: "InstantRPAdditionalDetails"
        }
      },
      schedulePolicy: {
        serializedName: "properties.schedulePolicy",
        type: {
          name: "Composite",
          className: "SchedulePolicy"
        }
      },
      retentionPolicy: {
        serializedName: "properties.retentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      },
      tieringPolicy: {
        serializedName: "properties.tieringPolicy",
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "TieringPolicy" } }
        }
      },
      instantRpRetentionRangeInDays: {
        serializedName: "properties.instantRpRetentionRangeInDays",
        type: {
          name: "Number"
        }
      },
      timeZone: {
        serializedName: "properties.timeZone",
        type: {
          name: "String"
        }
      },
      policyType: {
        serializedName: "properties.policyType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InstantRPAdditionalDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InstantRPAdditionalDetails",
    modelProperties: {
      azureBackupRGNamePrefix: {
        serializedName: "azureBackupRGNamePrefix",
        type: {
          name: "String"
        }
      },
      azureBackupRGNameSuffix: {
        serializedName: "azureBackupRGNameSuffix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SchedulePolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SchedulePolicy",
    uberParent: "SchedulePolicy",
    polymorphicDiscriminator: {
      serializedName: "schedulePolicyType",
      clientName: "schedulePolicyType"
    },
    modelProperties: {
      schedulePolicyType: {
        serializedName: "schedulePolicyType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RetentionPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RetentionPolicy",
    uberParent: "RetentionPolicy",
    polymorphicDiscriminator: {
      serializedName: "retentionPolicyType",
      clientName: "retentionPolicyType"
    },
    modelProperties: {
      retentionPolicyType: {
        serializedName: "retentionPolicyType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TieringPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TieringPolicy",
    modelProperties: {
      tieringMode: {
        serializedName: "tieringMode",
        type: {
          name: "String"
        }
      },
      duration: {
        serializedName: "duration",
        type: {
          name: "Number"
        }
      },
      durationType: {
        serializedName: "durationType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectionPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectionPolicy",
    uberParent: "ProtectionPolicy",
    polymorphicDiscriminator: {
      serializedName: "backupManagementType",
      clientName: "backupManagementType"
    },
    modelProperties: {
      protectedItemsCount: {
        serializedName: "protectedItemsCount",
        type: {
          name: "Number"
        }
      },
      backupManagementType: {
        serializedName: "backupManagementType",
        required: true,
        type: {
          name: "String"
        }
      },
      resourceGuardOperationRequests: {
        serializedName: "resourceGuardOperationRequests",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DiskExclusionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskExclusionProperties",
    modelProperties: {
      diskLunList: {
        serializedName: "diskLunList",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      isInclusionList: {
        serializedName: "isInclusionList",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DBBackupPolicyProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DBBackupPolicyProperties",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      protectedItemsCount: {
        serializedName: "properties.protectedItemsCount",
        type: {
          name: "Number"
        }
      },
      backupManagementType: {
        serializedName: "properties.backupManagementType",
        type: {
          name: "String"
        }
      },
      resourceGuardOperationRequests: {
        serializedName: "properties.resourceGuardOperationRequests",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      workLoadType: {
        serializedName: "properties.workLoadType",
        type: {
          name: "String"
        }
      },
      settings: {
        serializedName: "properties.settings",
        type: {
          name: "Composite",
          className: "Settings"
        }
      },
      subProtectionPolicy: {
        serializedName: "properties.subProtectionPolicy",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubProtectionPolicy"
            }
          }
        }
      },
      makePolicyConsistent: {
        serializedName: "properties.makePolicyConsistent",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Settings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Settings",
    modelProperties: {
      timeZone: {
        serializedName: "timeZone",
        type: {
          name: "String"
        }
      },
      issqlcompression: {
        serializedName: "issqlcompression",
        type: {
          name: "Boolean"
        }
      },
      isCompression: {
        serializedName: "isCompression",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SubProtectionPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubProtectionPolicy",
    modelProperties: {
      policyType: {
        serializedName: "policyType",
        type: {
          name: "String"
        }
      },
      schedulePolicy: {
        serializedName: "schedulePolicy",
        type: {
          name: "Composite",
          className: "SchedulePolicy"
        }
      },
      retentionPolicy: {
        serializedName: "retentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      },
      tieringPolicy: {
        serializedName: "tieringPolicy",
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "TieringPolicy" } }
        }
      },
      snapshotBackupAdditionalDetails: {
        serializedName: "snapshotBackupAdditionalDetails",
        type: {
          name: "Composite",
          className: "SnapshotBackupAdditionalDetails"
        }
      }
    }
  }
};

export const SnapshotBackupAdditionalDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SnapshotBackupAdditionalDetails",
    modelProperties: {
      instantRpRetentionRangeInDays: {
        serializedName: "instantRpRetentionRangeInDays",
        type: {
          name: "Number"
        }
      },
      instantRPDetails: {
        serializedName: "instantRPDetails",
        type: {
          name: "String"
        }
      },
      userAssignedManagedIdentityDetails: {
        serializedName: "userAssignedManagedIdentityDetails",
        type: {
          name: "Composite",
          className: "UserAssignedManagedIdentityDetails"
        }
      }
    }
  }
};

export const UserAssignedManagedIdentityDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedManagedIdentityDetails",
    modelProperties: {
      identityArmId: {
        serializedName: "identityArmId",
        type: {
          name: "String"
        }
      },
      identityName: {
        serializedName: "identityName",
        type: {
          name: "String"
        }
      },
      userAssignedIdentityProperties: {
        serializedName: "userAssignedIdentityProperties",
        type: {
          name: "Composite",
          className: "UserAssignedIdentityProperties"
        }
      }
    }
  }
};

export const UserAssignedIdentityProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentityProperties",
    modelProperties: {
      clientId: {
        serializedName: "clientId",
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "principalId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SSLConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SSLConfiguration",
    modelProperties: {
      sslKeyStore: {
        serializedName: "sslKeyStore",
        type: {
          name: "String"
        }
      },
      sslTrustStore: {
        serializedName: "sslTrustStore",
        type: {
          name: "String"
        }
      },
      sslHostNameInCertificate: {
        serializedName: "sslHostNameInCertificate",
        type: {
          name: "String"
        }
      },
      sslCryptoProvider: {
        serializedName: "sslCryptoProvider",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HourlySchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HourlySchedule",
    modelProperties: {
      interval: {
        serializedName: "interval",
        type: {
          name: "Number"
        }
      },
      scheduleWindowStartTime: {
        serializedName: "scheduleWindowStartTime",
        type: {
          name: "DateTime"
        }
      },
      scheduleWindowDuration: {
        serializedName: "scheduleWindowDuration",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DailySchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DailySchedule",
    modelProperties: {
      scheduleRunTimes: {
        serializedName: "scheduleRunTimes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      }
    }
  }
};

export const WeeklySchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WeeklySchedule",
    modelProperties: {
      scheduleRunDays: {
        serializedName: "scheduleRunDays",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday"
              ]
            }
          }
        }
      },
      scheduleRunTimes: {
        serializedName: "scheduleRunTimes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      }
    }
  }
};

export const DailyRetentionSchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DailyRetentionSchedule",
    modelProperties: {
      retentionTimes: {
        serializedName: "retentionTimes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      },
      retentionDuration: {
        serializedName: "retentionDuration",
        type: {
          name: "Composite",
          className: "RetentionDuration"
        }
      }
    }
  }
};

export const RetentionDuration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RetentionDuration",
    modelProperties: {
      count: {
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      durationType: {
        serializedName: "durationType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WeeklyRetentionSchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WeeklyRetentionSchedule",
    modelProperties: {
      daysOfTheWeek: {
        serializedName: "daysOfTheWeek",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday"
              ]
            }
          }
        }
      },
      retentionTimes: {
        serializedName: "retentionTimes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      },
      retentionDuration: {
        serializedName: "retentionDuration",
        type: {
          name: "Composite",
          className: "RetentionDuration"
        }
      }
    }
  }
};

export const MonthlyRetentionSchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MonthlyRetentionSchedule",
    modelProperties: {
      retentionScheduleFormatType: {
        serializedName: "retentionScheduleFormatType",
        type: {
          name: "String"
        }
      },
      retentionScheduleDaily: {
        serializedName: "retentionScheduleDaily",
        type: {
          name: "Composite",
          className: "DailyRetentionFormat"
        }
      },
      retentionScheduleWeekly: {
        serializedName: "retentionScheduleWeekly",
        type: {
          name: "Composite",
          className: "WeeklyRetentionFormat"
        }
      },
      retentionTimes: {
        serializedName: "retentionTimes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      },
      retentionDuration: {
        serializedName: "retentionDuration",
        type: {
          name: "Composite",
          className: "RetentionDuration"
        }
      }
    }
  }
};

export const DailyRetentionFormat: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DailyRetentionFormat",
    modelProperties: {
      daysOfTheMonth: {
        serializedName: "daysOfTheMonth",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Day"
            }
          }
        }
      }
    }
  }
};

export const Day: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Day",
    modelProperties: {
      date: {
        serializedName: "date",
        type: {
          name: "Number"
        }
      },
      isLast: {
        serializedName: "isLast",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const WeeklyRetentionFormat: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WeeklyRetentionFormat",
    modelProperties: {
      daysOfTheWeek: {
        serializedName: "daysOfTheWeek",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday"
              ]
            }
          }
        }
      },
      weeksOfTheMonth: {
        serializedName: "weeksOfTheMonth",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "First",
                "Second",
                "Third",
                "Fourth",
                "Last",
                "Invalid"
              ]
            }
          }
        }
      }
    }
  }
};

export const YearlyRetentionSchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "YearlyRetentionSchedule",
    modelProperties: {
      retentionScheduleFormatType: {
        serializedName: "retentionScheduleFormatType",
        type: {
          name: "String"
        }
      },
      monthsOfYear: {
        serializedName: "monthsOfYear",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "Invalid",
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December"
              ]
            }
          }
        }
      },
      retentionScheduleDaily: {
        serializedName: "retentionScheduleDaily",
        type: {
          name: "Composite",
          className: "DailyRetentionFormat"
        }
      },
      retentionScheduleWeekly: {
        serializedName: "retentionScheduleWeekly",
        type: {
          name: "Composite",
          className: "WeeklyRetentionFormat"
        }
      },
      retentionTimes: {
        serializedName: "retentionTimes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      },
      retentionDuration: {
        serializedName: "retentionDuration",
        type: {
          name: "Composite",
          className: "RetentionDuration"
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMBackupData: coreClient.CompositeMapper = {
  serializedName: "VM",
  type: {
    name: "Composite",
    className: "VMBackupData",
    uberParent: "BackupData",
    polymorphicDiscriminator: BackupData.type.polymorphicDiscriminator,
    modelProperties: {
      ...BackupData.type.modelProperties,
      backupPolicy: {
        serializedName: "backupPolicy",
        type: {
          name: "Composite",
          className: "VMBackupPolicyProperties"
        }
      },
      diskExclusionProperties: {
        serializedName: "diskExclusionProperties",
        type: {
          name: "Composite",
          className: "DiskExclusionProperties"
        }
      }
    }
  }
};

export const HanaBackupData: coreClient.CompositeMapper = {
  serializedName: "HANA",
  type: {
    name: "Composite",
    className: "HanaBackupData",
    uberParent: "BackupData",
    polymorphicDiscriminator: BackupData.type.polymorphicDiscriminator,
    modelProperties: {
      ...BackupData.type.modelProperties,
      sslConfiguration: {
        serializedName: "sslConfiguration",
        type: {
          name: "Composite",
          className: "SSLConfiguration"
        }
      },
      backupPolicy: {
        serializedName: "backupPolicy",
        type: {
          name: "Composite",
          className: "DBBackupPolicyProperties"
        }
      },
      hdbuserstoreKeyName: {
        serializedName: "hdbuserstoreKeyName",
        required: true,
        type: {
          name: "String"
        }
      },
      instanceNumber: {
        serializedName: "instanceNumber",
        type: {
          name: "String"
        }
      },
      dbInstanceSnapshotBackupPolicy: {
        serializedName: "dbInstanceSnapshotBackupPolicy",
        type: {
          name: "Composite",
          className: "DBBackupPolicyProperties"
        }
      }
    }
  }
};

export const SqlBackupData: coreClient.CompositeMapper = {
  serializedName: "SQL",
  type: {
    name: "Composite",
    className: "SqlBackupData",
    uberParent: "BackupData",
    polymorphicDiscriminator: BackupData.type.polymorphicDiscriminator,
    modelProperties: {
      ...BackupData.type.modelProperties,
      backupPolicy: {
        serializedName: "backupPolicy",
        type: {
          name: "Composite",
          className: "DBBackupPolicyProperties"
        }
      }
    }
  }
};

export const NewRecoveryServicesVault: coreClient.CompositeMapper = {
  serializedName: "New",
  type: {
    name: "Composite",
    className: "NewRecoveryServicesVault",
    uberParent: "RecoveryServicesVaultProperties",
    polymorphicDiscriminator:
      RecoveryServicesVaultProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryServicesVaultProperties.type.modelProperties,
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        serializedName: "resourceGroup",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExistingRecoveryServicesVault: coreClient.CompositeMapper = {
  serializedName: "Existing",
  type: {
    name: "Composite",
    className: "ExistingRecoveryServicesVault",
    uberParent: "RecoveryServicesVaultProperties",
    polymorphicDiscriminator:
      RecoveryServicesVaultProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryServicesVaultProperties.type.modelProperties,
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SimpleSchedulePolicy: coreClient.CompositeMapper = {
  serializedName: "SimpleSchedulePolicy",
  type: {
    name: "Composite",
    className: "SimpleSchedulePolicy",
    uberParent: "SchedulePolicy",
    polymorphicDiscriminator: SchedulePolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...SchedulePolicy.type.modelProperties,
      scheduleRunFrequency: {
        serializedName: "scheduleRunFrequency",
        type: {
          name: "String"
        }
      },
      scheduleRunDays: {
        serializedName: "scheduleRunDays",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday"
              ]
            }
          }
        }
      },
      scheduleRunTimes: {
        serializedName: "scheduleRunTimes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      },
      hourlySchedule: {
        serializedName: "hourlySchedule",
        type: {
          name: "Composite",
          className: "HourlySchedule"
        }
      },
      scheduleWeeklyFrequency: {
        serializedName: "scheduleWeeklyFrequency",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SimpleSchedulePolicyV2: coreClient.CompositeMapper = {
  serializedName: "SimpleSchedulePolicyV2",
  type: {
    name: "Composite",
    className: "SimpleSchedulePolicyV2",
    uberParent: "SchedulePolicy",
    polymorphicDiscriminator: SchedulePolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...SchedulePolicy.type.modelProperties,
      scheduleRunFrequency: {
        serializedName: "scheduleRunFrequency",
        type: {
          name: "String"
        }
      },
      hourlySchedule: {
        serializedName: "hourlySchedule",
        type: {
          name: "Composite",
          className: "HourlySchedule"
        }
      },
      dailySchedule: {
        serializedName: "dailySchedule",
        type: {
          name: "Composite",
          className: "DailySchedule"
        }
      },
      weeklySchedule: {
        serializedName: "weeklySchedule",
        type: {
          name: "Composite",
          className: "WeeklySchedule"
        }
      }
    }
  }
};

export const LongTermSchedulePolicy: coreClient.CompositeMapper = {
  serializedName: "LongTermSchedulePolicy",
  type: {
    name: "Composite",
    className: "LongTermSchedulePolicy",
    uberParent: "SchedulePolicy",
    polymorphicDiscriminator: SchedulePolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...SchedulePolicy.type.modelProperties
    }
  }
};

export const LogSchedulePolicy: coreClient.CompositeMapper = {
  serializedName: "LogSchedulePolicy",
  type: {
    name: "Composite",
    className: "LogSchedulePolicy",
    uberParent: "SchedulePolicy",
    polymorphicDiscriminator: SchedulePolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...SchedulePolicy.type.modelProperties,
      scheduleFrequencyInMins: {
        serializedName: "scheduleFrequencyInMins",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const LongTermRetentionPolicy: coreClient.CompositeMapper = {
  serializedName: "LongTermRetentionPolicy",
  type: {
    name: "Composite",
    className: "LongTermRetentionPolicy",
    uberParent: "RetentionPolicy",
    polymorphicDiscriminator: RetentionPolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...RetentionPolicy.type.modelProperties,
      dailySchedule: {
        serializedName: "dailySchedule",
        type: {
          name: "Composite",
          className: "DailyRetentionSchedule"
        }
      },
      weeklySchedule: {
        serializedName: "weeklySchedule",
        type: {
          name: "Composite",
          className: "WeeklyRetentionSchedule"
        }
      },
      monthlySchedule: {
        serializedName: "monthlySchedule",
        type: {
          name: "Composite",
          className: "MonthlyRetentionSchedule"
        }
      },
      yearlySchedule: {
        serializedName: "yearlySchedule",
        type: {
          name: "Composite",
          className: "YearlyRetentionSchedule"
        }
      }
    }
  }
};

export const SimpleRetentionPolicy: coreClient.CompositeMapper = {
  serializedName: "SimpleRetentionPolicy",
  type: {
    name: "Composite",
    className: "SimpleRetentionPolicy",
    uberParent: "RetentionPolicy",
    polymorphicDiscriminator: RetentionPolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...RetentionPolicy.type.modelProperties,
      retentionDuration: {
        serializedName: "retentionDuration",
        type: {
          name: "Composite",
          className: "RetentionDuration"
        }
      }
    }
  }
};

export const AzureIaaSVMProtectionPolicy: coreClient.CompositeMapper = {
  serializedName: "AzureIaasVM",
  type: {
    name: "Composite",
    className: "AzureIaaSVMProtectionPolicy",
    uberParent: "ProtectionPolicy",
    polymorphicDiscriminator: ProtectionPolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProtectionPolicy.type.modelProperties,
      instantRPDetails: {
        serializedName: "instantRPDetails",
        type: {
          name: "Composite",
          className: "InstantRPAdditionalDetails"
        }
      },
      schedulePolicy: {
        serializedName: "schedulePolicy",
        type: {
          name: "Composite",
          className: "SchedulePolicy"
        }
      },
      retentionPolicy: {
        serializedName: "retentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      },
      tieringPolicy: {
        serializedName: "tieringPolicy",
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "TieringPolicy" } }
        }
      },
      instantRpRetentionRangeInDays: {
        serializedName: "instantRpRetentionRangeInDays",
        type: {
          name: "Number"
        }
      },
      timeZone: {
        serializedName: "timeZone",
        type: {
          name: "String"
        }
      },
      policyType: {
        serializedName: "policyType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureVmWorkloadProtectionPolicy: coreClient.CompositeMapper = {
  serializedName: "AzureWorkload",
  type: {
    name: "Composite",
    className: "AzureVmWorkloadProtectionPolicy",
    uberParent: "ProtectionPolicy",
    polymorphicDiscriminator: ProtectionPolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProtectionPolicy.type.modelProperties,
      workLoadType: {
        serializedName: "workLoadType",
        type: {
          name: "String"
        }
      },
      settings: {
        serializedName: "settings",
        type: {
          name: "Composite",
          className: "Settings"
        }
      },
      subProtectionPolicy: {
        serializedName: "subProtectionPolicy",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubProtectionPolicy"
            }
          }
        }
      },
      makePolicyConsistent: {
        serializedName: "makePolicyConsistent",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Connector: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Connector",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "UserAssignedServiceIdentity"
        }
      },
      sourceResourceId: {
        serializedName: "properties.sourceResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errors: {
        serializedName: "properties.errors",
        type: {
          name: "Composite",
          className: "ConnectorErrorDefinition"
        }
      },
      managedResourceGroupConfiguration: {
        serializedName: "properties.managedResourceGroupConfiguration",
        type: {
          name: "Composite",
          className: "ManagedRGConfiguration"
        }
      }
    }
  }
};

export const AcssBackupConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AcssBackupConnection",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      backupData: {
        serializedName: "properties.backupData",
        type: {
          name: "Composite",
          className: "BackupData"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errors: {
        serializedName: "properties.errors",
        type: {
          name: "Composite",
          className: "ConnectorErrorDefinition"
        }
      }
    }
  }
};

export const ConnectorsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectorsDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AcssBackupConnectionsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AcssBackupConnectionsUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AcssBackupConnectionsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AcssBackupConnectionsDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  BackupData: BackupData,
  RecoveryServicesVaultProperties: RecoveryServicesVaultProperties,
  SchedulePolicy: SchedulePolicy,
  RetentionPolicy: RetentionPolicy,
  ProtectionPolicy: ProtectionPolicy,
  "BackupData.VM": VMBackupData,
  "BackupData.HANA": HanaBackupData,
  "BackupData.SQL": SqlBackupData,
  "RecoveryServicesVaultProperties.New": NewRecoveryServicesVault,
  "RecoveryServicesVaultProperties.Existing": ExistingRecoveryServicesVault,
  "SchedulePolicy.SimpleSchedulePolicy": SimpleSchedulePolicy,
  "SchedulePolicy.SimpleSchedulePolicyV2": SimpleSchedulePolicyV2,
  "SchedulePolicy.LongTermSchedulePolicy": LongTermSchedulePolicy,
  "SchedulePolicy.LogSchedulePolicy": LogSchedulePolicy,
  "RetentionPolicy.LongTermRetentionPolicy": LongTermRetentionPolicy,
  "RetentionPolicy.SimpleRetentionPolicy": SimpleRetentionPolicy,
  "ProtectionPolicy.AzureIaasVM": AzureIaaSVMProtectionPolicy,
  "ProtectionPolicy.AzureWorkload": AzureVmWorkloadProtectionPolicy
};
