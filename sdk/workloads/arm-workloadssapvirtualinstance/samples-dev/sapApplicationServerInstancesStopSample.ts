/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import {
  StopRequest,
  SapApplicationServerInstancesStopOptionalParams,
  WorkloadsClient,
} from "@azure/arm-workloadssapvirtualinstance";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";

dotenv.config();

/**
 * This sample demonstrates how to Stops the SAP Application Server Instance.
 *
 * @summary Stops the SAP Application Server Instance.
 * x-ms-original-file: specification/workloads/resource-manager/Microsoft.Workloads/SAPVirtualInstance/stable/2024-09-01/examples/SapApplicationServerInstances_StopInstanceSoft.json
 */
async function softStopTheSapApplicationServerInstance() {
  const subscriptionId =
    process.env["WORKLOADS_SUBSCRIPTION_ID"] ||
    "8e17e36c-42e9-4cd5-a078-7b44883414e0";
  const resourceGroupName =
    process.env["WORKLOADS_RESOURCE_GROUP"] || "test-rg";
  const sapVirtualInstanceName = "X00";
  const applicationInstanceName = "app01";
  const body: StopRequest = { softStopTimeoutSeconds: 300 };
  const options: SapApplicationServerInstancesStopOptionalParams = { body };
  const credential = new DefaultAzureCredential();
  const client = new WorkloadsClient(credential, subscriptionId);
  const result = await client.sapApplicationServerInstances.beginStopAndWait(
    resourceGroupName,
    sapVirtualInstanceName,
    applicationInstanceName,
    options,
  );
  console.log(result);
}

/**
 * This sample demonstrates how to Stops the SAP Application Server Instance.
 *
 * @summary Stops the SAP Application Server Instance.
 * x-ms-original-file: specification/workloads/resource-manager/Microsoft.Workloads/SAPVirtualInstance/stable/2024-09-01/examples/SapApplicationServerInstances_StopInstanceSoftInfrastructure.json
 */
async function softStopTheSapApplicationServerInstanceAndItInfrastructure() {
  const subscriptionId =
    process.env["WORKLOADS_SUBSCRIPTION_ID"] ||
    "8e17e36c-42e9-4cd5-a078-7b44883414e0";
  const resourceGroupName =
    process.env["WORKLOADS_RESOURCE_GROUP"] || "test-rg";
  const sapVirtualInstanceName = "X00";
  const applicationInstanceName = "app01";
  const body: StopRequest = { deallocateVm: true, softStopTimeoutSeconds: 300 };
  const options: SapApplicationServerInstancesStopOptionalParams = { body };
  const credential = new DefaultAzureCredential();
  const client = new WorkloadsClient(credential, subscriptionId);
  const result = await client.sapApplicationServerInstances.beginStopAndWait(
    resourceGroupName,
    sapVirtualInstanceName,
    applicationInstanceName,
    options,
  );
  console.log(result);
}

/**
 * This sample demonstrates how to Stops the SAP Application Server Instance.
 *
 * @summary Stops the SAP Application Server Instance.
 * x-ms-original-file: specification/workloads/resource-manager/Microsoft.Workloads/SAPVirtualInstance/stable/2024-09-01/examples/SapApplicationServerInstances_StopInstance.json
 */
async function stopTheSapApplicationServerInstance() {
  const subscriptionId =
    process.env["WORKLOADS_SUBSCRIPTION_ID"] ||
    "8e17e36c-42e9-4cd5-a078-7b44883414e0";
  const resourceGroupName =
    process.env["WORKLOADS_RESOURCE_GROUP"] || "test-rg";
  const sapVirtualInstanceName = "X00";
  const applicationInstanceName = "app01";
  const body: StopRequest = { softStopTimeoutSeconds: 0 };
  const options: SapApplicationServerInstancesStopOptionalParams = { body };
  const credential = new DefaultAzureCredential();
  const client = new WorkloadsClient(credential, subscriptionId);
  const result = await client.sapApplicationServerInstances.beginStopAndWait(
    resourceGroupName,
    sapVirtualInstanceName,
    applicationInstanceName,
    options,
  );
  console.log(result);
}

/**
 * This sample demonstrates how to Stops the SAP Application Server Instance.
 *
 * @summary Stops the SAP Application Server Instance.
 * x-ms-original-file: specification/workloads/resource-manager/Microsoft.Workloads/SAPVirtualInstance/stable/2024-09-01/examples/SapApplicationServerInstances_StopInstanceInfrastructure.json
 */
async function stopTheSapApplicationServerInstanceAndItInfrastructure() {
  const subscriptionId =
    process.env["WORKLOADS_SUBSCRIPTION_ID"] ||
    "8e17e36c-42e9-4cd5-a078-7b44883414e0";
  const resourceGroupName =
    process.env["WORKLOADS_RESOURCE_GROUP"] || "test-rg";
  const sapVirtualInstanceName = "X00";
  const applicationInstanceName = "app01";
  const body: StopRequest = { deallocateVm: true, softStopTimeoutSeconds: 0 };
  const options: SapApplicationServerInstancesStopOptionalParams = { body };
  const credential = new DefaultAzureCredential();
  const client = new WorkloadsClient(credential, subscriptionId);
  const result = await client.sapApplicationServerInstances.beginStopAndWait(
    resourceGroupName,
    sapVirtualInstanceName,
    applicationInstanceName,
    options,
  );
  console.log(result);
}

async function main() {
  softStopTheSapApplicationServerInstance();
  softStopTheSapApplicationServerInstanceAndItInfrastructure();
  stopTheSapApplicationServerInstance();
  stopTheSapApplicationServerInstanceAndItInfrastructure();
}

main().catch(console.error);
