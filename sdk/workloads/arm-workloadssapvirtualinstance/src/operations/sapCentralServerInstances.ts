/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { SapCentralServerInstances } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { WorkloadsClient } from "../workloadsClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  SAPCentralServerInstance,
  SapCentralServerInstancesListNextOptionalParams,
  SapCentralServerInstancesListOptionalParams,
  SapCentralServerInstancesListResponse,
  SapCentralServerInstancesGetOptionalParams,
  SapCentralServerInstancesGetResponse,
  SapCentralServerInstancesCreateOptionalParams,
  SapCentralServerInstancesCreateResponse,
  UpdateSAPCentralInstanceRequest,
  SapCentralServerInstancesUpdateOptionalParams,
  SapCentralServerInstancesUpdateResponse,
  SapCentralServerInstancesDeleteOptionalParams,
  SapCentralServerInstancesDeleteResponse,
  SapCentralServerInstancesStartOptionalParams,
  SapCentralServerInstancesStartResponse,
  SapCentralServerInstancesStopOptionalParams,
  SapCentralServerInstancesStopResponse,
  SapCentralServerInstancesListNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SapCentralServerInstances operations. */
export class SapCentralServerInstancesImpl
  implements SapCentralServerInstances
{
  private readonly client: WorkloadsClient;

  /**
   * Initialize a new instance of the class SapCentralServerInstances class.
   * @param client Reference to the service client
   */
  constructor(client: WorkloadsClient) {
    this.client = client;
  }

  /**
   * Lists the SAP Central Services Instance resource for the given Virtual Instance for SAP solutions
   * resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    options?: SapCentralServerInstancesListOptionalParams,
  ): PagedAsyncIterableIterator<SAPCentralServerInstance> {
    const iter = this.listPagingAll(
      resourceGroupName,
      sapVirtualInstanceName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          sapVirtualInstanceName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    options?: SapCentralServerInstancesListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<SAPCentralServerInstance[]> {
    let result: SapCentralServerInstancesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(
        resourceGroupName,
        sapVirtualInstanceName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        sapVirtualInstanceName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    options?: SapCentralServerInstancesListOptionalParams,
  ): AsyncIterableIterator<SAPCentralServerInstance> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      sapVirtualInstanceName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists the SAP Central Services Instance resource for the given Virtual Instance for SAP solutions
   * resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    options?: SapCentralServerInstancesListOptionalParams,
  ): Promise<SapCentralServerInstancesListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sapVirtualInstanceName, options },
      listOperationSpec,
    );
  }

  /**
   * Gets the SAP Central Services Instance resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param centralInstanceName Central Services Instance resource name string modeled as parameter for
   *                            auto generation to work correctly.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    centralInstanceName: string,
    options?: SapCentralServerInstancesGetOptionalParams,
  ): Promise<SapCentralServerInstancesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sapVirtualInstanceName,
        centralInstanceName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * Creates the SAP Central Services Instance resource. &lt;br&gt;&lt;br&gt;This will be used by service
   * only. PUT operation on this resource by end user will return a Bad Request error.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param centralInstanceName Central Services Instance resource name string modeled as parameter for
   *                            auto generation to work correctly.
   * @param resource The SAP Central Services Instance request body.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    centralInstanceName: string,
    resource: SAPCentralServerInstance,
    options?: SapCentralServerInstancesCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SapCentralServerInstancesCreateResponse>,
      SapCentralServerInstancesCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SapCentralServerInstancesCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        sapVirtualInstanceName,
        centralInstanceName,
        resource,
        options,
      },
      spec: createOperationSpec,
    });
    const poller = await createHttpPoller<
      SapCentralServerInstancesCreateResponse,
      OperationState<SapCentralServerInstancesCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates the SAP Central Services Instance resource. &lt;br&gt;&lt;br&gt;This will be used by service
   * only. PUT operation on this resource by end user will return a Bad Request error.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param centralInstanceName Central Services Instance resource name string modeled as parameter for
   *                            auto generation to work correctly.
   * @param resource The SAP Central Services Instance request body.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    centralInstanceName: string,
    resource: SAPCentralServerInstance,
    options?: SapCentralServerInstancesCreateOptionalParams,
  ): Promise<SapCentralServerInstancesCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      sapVirtualInstanceName,
      centralInstanceName,
      resource,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates the SAP Central Services Instance resource. &lt;br&gt;&lt;br&gt;This can be used to update
   * tags on the resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param centralInstanceName Central Services Instance resource name string modeled as parameter for
   *                            auto generation to work correctly.
   * @param properties The SAP Central Services Instance resource request body.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    centralInstanceName: string,
    properties: UpdateSAPCentralInstanceRequest,
    options?: SapCentralServerInstancesUpdateOptionalParams,
  ): Promise<SapCentralServerInstancesUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sapVirtualInstanceName,
        centralInstanceName,
        properties,
        options,
      },
      updateOperationSpec,
    );
  }

  /**
   * Deletes the SAP Central Services Instance resource. &lt;br&gt;&lt;br&gt;This will be used by service
   * only. Delete operation on this resource by end user will return a Bad Request error. You can delete
   * the parent resource, which is the Virtual Instance for SAP solutions resource, using the delete
   * operation on it.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param centralInstanceName Central Services Instance resource name string modeled as parameter for
   *                            auto generation to work correctly.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    centralInstanceName: string,
    options?: SapCentralServerInstancesDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SapCentralServerInstancesDeleteResponse>,
      SapCentralServerInstancesDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SapCentralServerInstancesDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        sapVirtualInstanceName,
        centralInstanceName,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      SapCentralServerInstancesDeleteResponse,
      OperationState<SapCentralServerInstancesDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes the SAP Central Services Instance resource. &lt;br&gt;&lt;br&gt;This will be used by service
   * only. Delete operation on this resource by end user will return a Bad Request error. You can delete
   * the parent resource, which is the Virtual Instance for SAP solutions resource, using the delete
   * operation on it.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param centralInstanceName Central Services Instance resource name string modeled as parameter for
   *                            auto generation to work correctly.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    centralInstanceName: string,
    options?: SapCentralServerInstancesDeleteOptionalParams,
  ): Promise<SapCentralServerInstancesDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      sapVirtualInstanceName,
      centralInstanceName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Starts the SAP Central Services Instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param centralInstanceName Central Services Instance resource name string modeled as parameter for
   *                            auto generation to work correctly.
   * @param options The options parameters.
   */
  async beginStart(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    centralInstanceName: string,
    options?: SapCentralServerInstancesStartOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SapCentralServerInstancesStartResponse>,
      SapCentralServerInstancesStartResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SapCentralServerInstancesStartResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        sapVirtualInstanceName,
        centralInstanceName,
        options,
      },
      spec: startOperationSpec,
    });
    const poller = await createHttpPoller<
      SapCentralServerInstancesStartResponse,
      OperationState<SapCentralServerInstancesStartResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Starts the SAP Central Services Instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param centralInstanceName Central Services Instance resource name string modeled as parameter for
   *                            auto generation to work correctly.
   * @param options The options parameters.
   */
  async beginStartAndWait(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    centralInstanceName: string,
    options?: SapCentralServerInstancesStartOptionalParams,
  ): Promise<SapCentralServerInstancesStartResponse> {
    const poller = await this.beginStart(
      resourceGroupName,
      sapVirtualInstanceName,
      centralInstanceName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Stops the SAP Central Services Instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param centralInstanceName Central Services Instance resource name string modeled as parameter for
   *                            auto generation to work correctly.
   * @param options The options parameters.
   */
  async beginStop(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    centralInstanceName: string,
    options?: SapCentralServerInstancesStopOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SapCentralServerInstancesStopResponse>,
      SapCentralServerInstancesStopResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SapCentralServerInstancesStopResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        sapVirtualInstanceName,
        centralInstanceName,
        options,
      },
      spec: stopOperationSpec,
    });
    const poller = await createHttpPoller<
      SapCentralServerInstancesStopResponse,
      OperationState<SapCentralServerInstancesStopResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Stops the SAP Central Services Instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param centralInstanceName Central Services Instance resource name string modeled as parameter for
   *                            auto generation to work correctly.
   * @param options The options parameters.
   */
  async beginStopAndWait(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    centralInstanceName: string,
    options?: SapCentralServerInstancesStopOptionalParams,
  ): Promise<SapCentralServerInstancesStopResponse> {
    const poller = await this.beginStop(
      resourceGroupName,
      sapVirtualInstanceName,
      centralInstanceName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    nextLink: string,
    options?: SapCentralServerInstancesListNextOptionalParams,
  ): Promise<SapCentralServerInstancesListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sapVirtualInstanceName, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/centralInstances",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SAPCentralServerInstanceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapVirtualInstanceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/centralInstances/{centralInstanceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SAPCentralServerInstance,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapVirtualInstanceName,
    Parameters.centralInstanceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/centralInstances/{centralInstanceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SAPCentralServerInstance,
    },
    201: {
      bodyMapper: Mappers.SAPCentralServerInstance,
    },
    202: {
      bodyMapper: Mappers.SAPCentralServerInstance,
    },
    204: {
      bodyMapper: Mappers.SAPCentralServerInstance,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapVirtualInstanceName,
    Parameters.centralInstanceName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/centralInstances/{centralInstanceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SAPCentralServerInstance,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapVirtualInstanceName,
    Parameters.centralInstanceName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/centralInstances/{centralInstanceName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.SapCentralServerInstancesDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.SapCentralServerInstancesDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.SapCentralServerInstancesDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.SapCentralServerInstancesDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapVirtualInstanceName,
    Parameters.centralInstanceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const startOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/centralInstances/{centralInstanceName}/start",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    201: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    202: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    204: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapVirtualInstanceName,
    Parameters.centralInstanceName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const stopOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/centralInstances/{centralInstanceName}/stop",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    201: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    202: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    204: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapVirtualInstanceName,
    Parameters.centralInstanceName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SAPCentralServerInstanceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapVirtualInstanceName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
