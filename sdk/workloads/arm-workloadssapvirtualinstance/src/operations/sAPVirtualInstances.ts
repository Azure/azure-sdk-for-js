/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { SapVirtualInstances } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { WorkloadsClient } from "../workloadsClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  SAPVirtualInstance,
  SapVirtualInstancesListBySubscriptionNextOptionalParams,
  SapVirtualInstancesListBySubscriptionOptionalParams,
  SapVirtualInstancesListBySubscriptionResponse,
  SapVirtualInstancesListByResourceGroupNextOptionalParams,
  SapVirtualInstancesListByResourceGroupOptionalParams,
  SapVirtualInstancesListByResourceGroupResponse,
  SAPAvailabilityZoneDetailsRequest,
  SapVirtualInstancesInvokeAvailabilityZoneDetailsOptionalParams,
  SapVirtualInstancesInvokeAvailabilityZoneDetailsResponse,
  SAPDiskConfigurationsRequest,
  SapVirtualInstancesInvokeDiskConfigurationsOptionalParams,
  SapVirtualInstancesInvokeDiskConfigurationsResponse,
  SAPSupportedSkusRequest,
  SapVirtualInstancesInvokeSapSupportedSkuOptionalParams,
  SapVirtualInstancesInvokeSapSupportedSkuResponse,
  SAPSizingRecommendationRequest,
  SapVirtualInstancesInvokeSizingRecommendationsOptionalParams,
  SapVirtualInstancesInvokeSizingRecommendationsResponse,
  SapVirtualInstancesGetOptionalParams,
  SapVirtualInstancesGetResponse,
  SapVirtualInstancesCreateOptionalParams,
  SapVirtualInstancesCreateResponse,
  UpdateSAPVirtualInstanceRequest,
  SapVirtualInstancesUpdateOptionalParams,
  SapVirtualInstancesUpdateResponse,
  SapVirtualInstancesDeleteOptionalParams,
  SapVirtualInstancesDeleteResponse,
  SapVirtualInstancesStartOptionalParams,
  SapVirtualInstancesStartResponse,
  SapVirtualInstancesStopOptionalParams,
  SapVirtualInstancesStopResponse,
  SapVirtualInstancesListBySubscriptionNextResponse,
  SapVirtualInstancesListByResourceGroupNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SapVirtualInstances operations. */
export class SapVirtualInstancesImpl implements SapVirtualInstances {
  private readonly client: WorkloadsClient;

  /**
   * Initialize a new instance of the class SapVirtualInstances class.
   * @param client Reference to the service client
   */
  constructor(client: WorkloadsClient) {
    this.client = client;
  }

  /**
   * Gets all Virtual Instances for SAP solutions resources in a Subscription.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: SapVirtualInstancesListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<SAPVirtualInstance> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: SapVirtualInstancesListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<SAPVirtualInstance[]> {
    let result: SapVirtualInstancesListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: SapVirtualInstancesListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<SAPVirtualInstance> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets all Virtual Instances for SAP solutions resources in a Resource Group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: SapVirtualInstancesListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<SAPVirtualInstance> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: SapVirtualInstancesListByResourceGroupOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<SAPVirtualInstance[]> {
    let result: SapVirtualInstancesListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: SapVirtualInstancesListByResourceGroupOptionalParams,
  ): AsyncIterableIterator<SAPVirtualInstance> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Get the recommended SAP Availability Zone Pair Details for your region.
   * @param location The name of the Azure region.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  invokeAvailabilityZoneDetails(
    location: string,
    body: SAPAvailabilityZoneDetailsRequest,
    options?: SapVirtualInstancesInvokeAvailabilityZoneDetailsOptionalParams,
  ): Promise<SapVirtualInstancesInvokeAvailabilityZoneDetailsResponse> {
    return this.client.sendOperationRequest(
      { location, body, options },
      invokeAvailabilityZoneDetailsOperationSpec,
    );
  }

  /**
   * Get the SAP Disk Configuration Layout prod/non-prod SAP System.
   * @param location The name of the Azure region.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  invokeDiskConfigurations(
    location: string,
    body: SAPDiskConfigurationsRequest,
    options?: SapVirtualInstancesInvokeDiskConfigurationsOptionalParams,
  ): Promise<SapVirtualInstancesInvokeDiskConfigurationsResponse> {
    return this.client.sendOperationRequest(
      { location, body, options },
      invokeDiskConfigurationsOperationSpec,
    );
  }

  /**
   * Get a list of SAP supported SKUs for ASCS, Application and Database tier.
   * @param location The name of the Azure region.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  invokeSapSupportedSku(
    location: string,
    body: SAPSupportedSkusRequest,
    options?: SapVirtualInstancesInvokeSapSupportedSkuOptionalParams,
  ): Promise<SapVirtualInstancesInvokeSapSupportedSkuResponse> {
    return this.client.sendOperationRequest(
      { location, body, options },
      invokeSapSupportedSkuOperationSpec,
    );
  }

  /**
   * Gets the sizing recommendations.
   * @param location The name of the Azure region.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  invokeSizingRecommendations(
    location: string,
    body: SAPSizingRecommendationRequest,
    options?: SapVirtualInstancesInvokeSizingRecommendationsOptionalParams,
  ): Promise<SapVirtualInstancesInvokeSizingRecommendationsResponse> {
    return this.client.sendOperationRequest(
      { location, body, options },
      invokeSizingRecommendationsOperationSpec,
    );
  }

  /**
   * Gets all Virtual Instances for SAP solutions resources in a Subscription.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: SapVirtualInstancesListBySubscriptionOptionalParams,
  ): Promise<SapVirtualInstancesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec,
    );
  }

  /**
   * Gets all Virtual Instances for SAP solutions resources in a Resource Group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: SapVirtualInstancesListByResourceGroupOptionalParams,
  ): Promise<SapVirtualInstancesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec,
    );
  }

  /**
   * Gets a Virtual Instance for SAP solutions resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    options?: SapVirtualInstancesGetOptionalParams,
  ): Promise<SapVirtualInstancesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sapVirtualInstanceName, options },
      getOperationSpec,
    );
  }

  /**
   * Creates a Virtual Instance for SAP solutions (VIS) resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param resource Virtual Instance for SAP solutions resource request body.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    resource: SAPVirtualInstance,
    options?: SapVirtualInstancesCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SapVirtualInstancesCreateResponse>,
      SapVirtualInstancesCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SapVirtualInstancesCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, sapVirtualInstanceName, resource, options },
      spec: createOperationSpec,
    });
    const poller = await createHttpPoller<
      SapVirtualInstancesCreateResponse,
      OperationState<SapVirtualInstancesCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates a Virtual Instance for SAP solutions (VIS) resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param resource Virtual Instance for SAP solutions resource request body.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    resource: SAPVirtualInstance,
    options?: SapVirtualInstancesCreateOptionalParams,
  ): Promise<SapVirtualInstancesCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      sapVirtualInstanceName,
      resource,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates a Virtual Instance for SAP solutions resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param properties Request body to update a Virtual Instance for SAP solutions resource.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    properties: UpdateSAPVirtualInstanceRequest,
    options?: SapVirtualInstancesUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SapVirtualInstancesUpdateResponse>,
      SapVirtualInstancesUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SapVirtualInstancesUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, sapVirtualInstanceName, properties, options },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      SapVirtualInstancesUpdateResponse,
      OperationState<SapVirtualInstancesUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates a Virtual Instance for SAP solutions resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param properties Request body to update a Virtual Instance for SAP solutions resource.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    properties: UpdateSAPVirtualInstanceRequest,
    options?: SapVirtualInstancesUpdateOptionalParams,
  ): Promise<SapVirtualInstancesUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      sapVirtualInstanceName,
      properties,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes a Virtual Instance for SAP solutions resource and its child resources, that is the
   * associated Central Services Instance, Application Server Instances and Database Instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    options?: SapVirtualInstancesDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SapVirtualInstancesDeleteResponse>,
      SapVirtualInstancesDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SapVirtualInstancesDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, sapVirtualInstanceName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      SapVirtualInstancesDeleteResponse,
      OperationState<SapVirtualInstancesDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes a Virtual Instance for SAP solutions resource and its child resources, that is the
   * associated Central Services Instance, Application Server Instances and Database Instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    options?: SapVirtualInstancesDeleteOptionalParams,
  ): Promise<SapVirtualInstancesDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      sapVirtualInstanceName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Starts the SAP application, that is the Central Services instance and Application server instances.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param options The options parameters.
   */
  async beginStart(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    options?: SapVirtualInstancesStartOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SapVirtualInstancesStartResponse>,
      SapVirtualInstancesStartResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SapVirtualInstancesStartResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, sapVirtualInstanceName, options },
      spec: startOperationSpec,
    });
    const poller = await createHttpPoller<
      SapVirtualInstancesStartResponse,
      OperationState<SapVirtualInstancesStartResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Starts the SAP application, that is the Central Services instance and Application server instances.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param options The options parameters.
   */
  async beginStartAndWait(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    options?: SapVirtualInstancesStartOptionalParams,
  ): Promise<SapVirtualInstancesStartResponse> {
    const poller = await this.beginStart(
      resourceGroupName,
      sapVirtualInstanceName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Stops the SAP Application, that is the Application server instances and Central Services instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param options The options parameters.
   */
  async beginStop(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    options?: SapVirtualInstancesStopOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SapVirtualInstancesStopResponse>,
      SapVirtualInstancesStopResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SapVirtualInstancesStopResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, sapVirtualInstanceName, options },
      spec: stopOperationSpec,
    });
    const poller = await createHttpPoller<
      SapVirtualInstancesStopResponse,
      OperationState<SapVirtualInstancesStopResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Stops the SAP Application, that is the Application server instances and Central Services instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param options The options parameters.
   */
  async beginStopAndWait(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    options?: SapVirtualInstancesStopOptionalParams,
  ): Promise<SapVirtualInstancesStopResponse> {
    const poller = await this.beginStop(
      resourceGroupName,
      sapVirtualInstanceName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: SapVirtualInstancesListBySubscriptionNextOptionalParams,
  ): Promise<SapVirtualInstancesListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: SapVirtualInstancesListByResourceGroupNextOptionalParams,
  ): Promise<SapVirtualInstancesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const invokeAvailabilityZoneDetailsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getAvailabilityZoneDetails",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SAPAvailabilityZoneDetailsResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const invokeDiskConfigurationsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getDiskConfigurations",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SAPDiskConfigurationsResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const invokeSapSupportedSkuOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getSapSupportedSku",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SAPSupportedResourceSkusResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const invokeSizingRecommendationsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getSizingRecommendations",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SAPSizingRecommendationResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Workloads/sapVirtualInstances",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SAPVirtualInstanceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SAPVirtualInstanceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SAPVirtualInstance,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapVirtualInstanceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SAPVirtualInstance,
    },
    201: {
      bodyMapper: Mappers.SAPVirtualInstance,
    },
    202: {
      bodyMapper: Mappers.SAPVirtualInstance,
    },
    204: {
      bodyMapper: Mappers.SAPVirtualInstance,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapVirtualInstanceName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SAPVirtualInstance,
    },
    201: {
      bodyMapper: Mappers.SAPVirtualInstance,
    },
    202: {
      bodyMapper: Mappers.SAPVirtualInstance,
    },
    204: {
      bodyMapper: Mappers.SAPVirtualInstance,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapVirtualInstanceName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.SapVirtualInstancesDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.SapVirtualInstancesDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.SapVirtualInstancesDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.SapVirtualInstancesDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapVirtualInstanceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const startOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/start",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    201: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    202: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    204: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapVirtualInstanceName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const stopOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/stop",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    201: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    202: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    204: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapVirtualInstanceName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SAPVirtualInstanceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SAPVirtualInstanceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
