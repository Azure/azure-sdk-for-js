/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { SapDatabaseInstances } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { WorkloadsClient } from "../workloadsClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  SAPDatabaseInstance,
  SapDatabaseInstancesListNextOptionalParams,
  SapDatabaseInstancesListOptionalParams,
  SapDatabaseInstancesListResponse,
  SapDatabaseInstancesGetOptionalParams,
  SapDatabaseInstancesGetResponse,
  SapDatabaseInstancesCreateOptionalParams,
  SapDatabaseInstancesCreateResponse,
  UpdateSAPDatabaseInstanceRequest,
  SapDatabaseInstancesUpdateOptionalParams,
  SapDatabaseInstancesUpdateResponse,
  SapDatabaseInstancesDeleteOptionalParams,
  SapDatabaseInstancesDeleteResponse,
  SapDatabaseInstancesStartOptionalParams,
  SapDatabaseInstancesStartResponse,
  SapDatabaseInstancesStopOptionalParams,
  SapDatabaseInstancesStopResponse,
  SapDatabaseInstancesListNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SapDatabaseInstances operations. */
export class SapDatabaseInstancesImpl implements SapDatabaseInstances {
  private readonly client: WorkloadsClient;

  /**
   * Initialize a new instance of the class SapDatabaseInstances class.
   * @param client Reference to the service client
   */
  constructor(client: WorkloadsClient) {
    this.client = client;
  }

  /**
   * Lists the Database resources associated with a Virtual Instance for SAP solutions resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    options?: SapDatabaseInstancesListOptionalParams,
  ): PagedAsyncIterableIterator<SAPDatabaseInstance> {
    const iter = this.listPagingAll(
      resourceGroupName,
      sapVirtualInstanceName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          sapVirtualInstanceName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    options?: SapDatabaseInstancesListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<SAPDatabaseInstance[]> {
    let result: SapDatabaseInstancesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(
        resourceGroupName,
        sapVirtualInstanceName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        sapVirtualInstanceName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    options?: SapDatabaseInstancesListOptionalParams,
  ): AsyncIterableIterator<SAPDatabaseInstance> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      sapVirtualInstanceName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists the Database resources associated with a Virtual Instance for SAP solutions resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    options?: SapDatabaseInstancesListOptionalParams,
  ): Promise<SapDatabaseInstancesListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sapVirtualInstanceName, options },
      listOperationSpec,
    );
  }

  /**
   * Gets the SAP Database Instance resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param databaseInstanceName Database resource name string modeled as parameter for auto generation
   *                             to work correctly.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    databaseInstanceName: string,
    options?: SapDatabaseInstancesGetOptionalParams,
  ): Promise<SapDatabaseInstancesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sapVirtualInstanceName,
        databaseInstanceName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * Creates the Database resource corresponding to the Virtual Instance for SAP solutions resource.
   * &lt;br&gt;&lt;br&gt;This will be used by service only. PUT by end user will return a Bad Request
   * error.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param databaseInstanceName Database resource name string modeled as parameter for auto generation
   *                             to work correctly.
   * @param resource Request body of Database resource of a SAP system.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    databaseInstanceName: string,
    resource: SAPDatabaseInstance,
    options?: SapDatabaseInstancesCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SapDatabaseInstancesCreateResponse>,
      SapDatabaseInstancesCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SapDatabaseInstancesCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        sapVirtualInstanceName,
        databaseInstanceName,
        resource,
        options,
      },
      spec: createOperationSpec,
    });
    const poller = await createHttpPoller<
      SapDatabaseInstancesCreateResponse,
      OperationState<SapDatabaseInstancesCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates the Database resource corresponding to the Virtual Instance for SAP solutions resource.
   * &lt;br&gt;&lt;br&gt;This will be used by service only. PUT by end user will return a Bad Request
   * error.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param databaseInstanceName Database resource name string modeled as parameter for auto generation
   *                             to work correctly.
   * @param resource Request body of Database resource of a SAP system.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    databaseInstanceName: string,
    resource: SAPDatabaseInstance,
    options?: SapDatabaseInstancesCreateOptionalParams,
  ): Promise<SapDatabaseInstancesCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      sapVirtualInstanceName,
      databaseInstanceName,
      resource,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates the Database resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param databaseInstanceName Database resource name string modeled as parameter for auto generation
   *                             to work correctly.
   * @param properties Database resource update request body.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    databaseInstanceName: string,
    properties: UpdateSAPDatabaseInstanceRequest,
    options?: SapDatabaseInstancesUpdateOptionalParams,
  ): Promise<SapDatabaseInstancesUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sapVirtualInstanceName,
        databaseInstanceName,
        properties,
        options,
      },
      updateOperationSpec,
    );
  }

  /**
   * Deletes the Database resource corresponding to a Virtual Instance for SAP solutions resource.
   * &lt;br&gt;&lt;br&gt;This will be used by service only. Delete by end user will return a Bad Request
   * error.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param databaseInstanceName Database resource name string modeled as parameter for auto generation
   *                             to work correctly.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    databaseInstanceName: string,
    options?: SapDatabaseInstancesDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SapDatabaseInstancesDeleteResponse>,
      SapDatabaseInstancesDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SapDatabaseInstancesDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        sapVirtualInstanceName,
        databaseInstanceName,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      SapDatabaseInstancesDeleteResponse,
      OperationState<SapDatabaseInstancesDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes the Database resource corresponding to a Virtual Instance for SAP solutions resource.
   * &lt;br&gt;&lt;br&gt;This will be used by service only. Delete by end user will return a Bad Request
   * error.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param databaseInstanceName Database resource name string modeled as parameter for auto generation
   *                             to work correctly.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    databaseInstanceName: string,
    options?: SapDatabaseInstancesDeleteOptionalParams,
  ): Promise<SapDatabaseInstancesDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      sapVirtualInstanceName,
      databaseInstanceName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Starts the database instance of the SAP system.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param databaseInstanceName Database resource name string modeled as parameter for auto generation
   *                             to work correctly.
   * @param options The options parameters.
   */
  async beginStart(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    databaseInstanceName: string,
    options?: SapDatabaseInstancesStartOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SapDatabaseInstancesStartResponse>,
      SapDatabaseInstancesStartResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SapDatabaseInstancesStartResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        sapVirtualInstanceName,
        databaseInstanceName,
        options,
      },
      spec: startOperationSpec,
    });
    const poller = await createHttpPoller<
      SapDatabaseInstancesStartResponse,
      OperationState<SapDatabaseInstancesStartResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Starts the database instance of the SAP system.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param databaseInstanceName Database resource name string modeled as parameter for auto generation
   *                             to work correctly.
   * @param options The options parameters.
   */
  async beginStartAndWait(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    databaseInstanceName: string,
    options?: SapDatabaseInstancesStartOptionalParams,
  ): Promise<SapDatabaseInstancesStartResponse> {
    const poller = await this.beginStart(
      resourceGroupName,
      sapVirtualInstanceName,
      databaseInstanceName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Stops the database instance of the SAP system.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param databaseInstanceName Database resource name string modeled as parameter for auto generation
   *                             to work correctly.
   * @param options The options parameters.
   */
  async beginStop(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    databaseInstanceName: string,
    options?: SapDatabaseInstancesStopOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SapDatabaseInstancesStopResponse>,
      SapDatabaseInstancesStopResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SapDatabaseInstancesStopResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        sapVirtualInstanceName,
        databaseInstanceName,
        options,
      },
      spec: stopOperationSpec,
    });
    const poller = await createHttpPoller<
      SapDatabaseInstancesStopResponse,
      OperationState<SapDatabaseInstancesStopResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Stops the database instance of the SAP system.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param databaseInstanceName Database resource name string modeled as parameter for auto generation
   *                             to work correctly.
   * @param options The options parameters.
   */
  async beginStopAndWait(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    databaseInstanceName: string,
    options?: SapDatabaseInstancesStopOptionalParams,
  ): Promise<SapDatabaseInstancesStopResponse> {
    const poller = await this.beginStop(
      resourceGroupName,
      sapVirtualInstanceName,
      databaseInstanceName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param sapVirtualInstanceName The name of the Virtual Instances for SAP solutions resource
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    sapVirtualInstanceName: string,
    nextLink: string,
    options?: SapDatabaseInstancesListNextOptionalParams,
  ): Promise<SapDatabaseInstancesListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sapVirtualInstanceName, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/databaseInstances",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SAPDatabaseInstanceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapVirtualInstanceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/databaseInstances/{databaseInstanceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SAPDatabaseInstance,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapVirtualInstanceName,
    Parameters.databaseInstanceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/databaseInstances/{databaseInstanceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SAPDatabaseInstance,
    },
    201: {
      bodyMapper: Mappers.SAPDatabaseInstance,
    },
    202: {
      bodyMapper: Mappers.SAPDatabaseInstance,
    },
    204: {
      bodyMapper: Mappers.SAPDatabaseInstance,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapVirtualInstanceName,
    Parameters.databaseInstanceName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/databaseInstances/{databaseInstanceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SAPDatabaseInstance,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapVirtualInstanceName,
    Parameters.databaseInstanceName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/databaseInstances/{databaseInstanceName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.SapDatabaseInstancesDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.SapDatabaseInstancesDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.SapDatabaseInstancesDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.SapDatabaseInstancesDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapVirtualInstanceName,
    Parameters.databaseInstanceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const startOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/databaseInstances/{databaseInstanceName}/start",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    201: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    202: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    204: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapVirtualInstanceName,
    Parameters.databaseInstanceName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const stopOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}/databaseInstances/{databaseInstanceName}/stop",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    201: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    202: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    204: {
      bodyMapper: Mappers.OperationStatusResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapVirtualInstanceName,
    Parameters.databaseInstanceName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SAPDatabaseInstanceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapVirtualInstanceName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
