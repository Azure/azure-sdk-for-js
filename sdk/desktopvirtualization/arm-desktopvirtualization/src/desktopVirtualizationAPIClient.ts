/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import { TokenCredential } from "@azure/core-auth";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as operations from "./operations";
import { DesktopVirtualizationAPIClientContext } from "./desktopVirtualizationAPIClientContext";


class DesktopVirtualizationAPIClient extends DesktopVirtualizationAPIClientContext {
  // Operation groups
  operations: operations.Operations;
  workspaces: operations.Workspaces;
  scalingPlans: operations.ScalingPlans;
  applicationGroups: operations.ApplicationGroups;
  startMenuItems: operations.StartMenuItems;
  applications: operations.Applications;
  desktops: operations.Desktops;
  hostPools: operations.HostPools;
  userSessions: operations.UserSessions;
  sessionHosts: operations.SessionHosts;
  mSIXPackages: operations.MSIXPackages;
  msixImages: operations.MsixImages;
  privateEndpointConnections: operations.PrivateEndpointConnections;
  privateLinkResources: operations.PrivateLinkResources;

  /**
   * Initializes a new instance of the DesktopVirtualizationAPIClient class.
   * @param credentials Credentials needed for the client to connect to Azure. Credentials
   * implementing the TokenCredential interface from the @azure/identity package are recommended. For
   * more information about these credentials, see
   * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
   * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
   * @azure/ms-rest-browserauth are also supported.
   * @param subscriptionId The ID of the target subscription.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials | TokenCredential, subscriptionId: string, options?: Models.DesktopVirtualizationAPIClientOptions) {
    super(credentials, subscriptionId, options);
    this.operations = new operations.Operations(this);
    this.workspaces = new operations.Workspaces(this);
    this.scalingPlans = new operations.ScalingPlans(this);
    this.applicationGroups = new operations.ApplicationGroups(this);
    this.startMenuItems = new operations.StartMenuItems(this);
    this.applications = new operations.Applications(this);
    this.desktops = new operations.Desktops(this);
    this.hostPools = new operations.HostPools(this);
    this.userSessions = new operations.UserSessions(this);
    this.sessionHosts = new operations.SessionHosts(this);
    this.mSIXPackages = new operations.MSIXPackages(this);
    this.msixImages = new operations.MsixImages(this);
    this.privateEndpointConnections = new operations.PrivateEndpointConnections(this);
    this.privateLinkResources = new operations.PrivateLinkResources(this);
  }
}

// Operation Specifications

export {
  DesktopVirtualizationAPIClient,
  DesktopVirtualizationAPIClientContext,
  Models as DesktopVirtualizationAPIModels,
  Mappers as DesktopVirtualizationAPIMappers
};
export * from "./operations";
