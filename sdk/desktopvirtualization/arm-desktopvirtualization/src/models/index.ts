/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Result of the request to list operations. */
export interface ResourceProviderOperationList {
  /** List of operations supported by this resource provider. */
  value?: ResourceProviderOperation[];
  /**
   * Link to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Supported operation of this resource provider. */
export interface ResourceProviderOperation {
  /** Operation name, in format of {provider}/{resource}/{operation} */
  name?: string;
  /** Display metadata associated with the operation. */
  display?: ResourceProviderOperationDisplay;
  /** Is a data action. */
  isDataAction?: boolean;
  /** Properties of the operation */
  properties?: OperationProperties;
}

/** Display metadata associated with the operation. */
export interface ResourceProviderOperationDisplay {
  /** Resource provider: Microsoft Desktop Virtualization. */
  provider?: string;
  /** Resource on which the operation is performed. */
  resource?: string;
  /** Type of operation: get, read, delete, etc. */
  operation?: string;
  /** Description of this operation. */
  description?: string;
}

/** Properties of the operation */
export interface OperationProperties {
  /** Service specification payload */
  serviceSpecification?: ServiceSpecification;
}

/** Service specification payload */
export interface ServiceSpecification {
  /** Specifications of the Log for Azure Monitoring */
  logSpecifications?: LogSpecification[];
}

/** Specifications of the Log for Azure Monitoring */
export interface LogSpecification {
  /** Name of the log */
  name?: string;
  /** Localized friendly display name of the log */
  displayName?: string;
  /** Blob duration of the log */
  blobDuration?: string;
}

/** Cloud error object. */
export interface CloudError {
  /** Cloud error object properties. */
  error?: CloudErrorProperties;
}

/** Cloud error object properties. */
export interface CloudErrorProperties {
  /** Error code */
  code?: string;
  /** Error message indicating why the operation failed. */
  message?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** The resource model definition containing the full set of allowed properties for a resource. Except properties bag, there cannot be a top level property outside of this set. */
export interface ResourceModelWithAllowedPropertySet {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The geo-location where the resource lives */
  location?: string;
  /** The fully qualified resource ID of the resource that manages this resource. Indicates if this resource is managed by another Azure resource. If this is present, complete mode deployment will not delete the resource if it is removed from the template since it is managed by another resource. */
  managedBy?: string;
  /** Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value. */
  kind?: string;
  /**
   * The etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly etag?: string;
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  identity?: ResourceModelWithAllowedPropertySetIdentity;
  sku?: ResourceModelWithAllowedPropertySetSku;
  plan?: ResourceModelWithAllowedPropertySetPlan;
}

/** Identity for the resource. */
export interface Identity {
  /**
   * The principal ID of resource identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** The identity type. */
  type?: "SystemAssigned";
}

/** The resource model definition representing SKU */
export interface Sku {
  /** The name of the SKU. Ex - P3. It is typically a letter+number code */
  name: string;
  /** This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT. */
  tier?: SkuTier;
  /** The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. */
  size?: string;
  /** If the service has different generations of hardware, for the same SKU, then that can be captured here. */
  family?: string;
  /** If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted. */
  capacity?: number;
}

/** Plan for the resource. */
export interface Plan {
  /** A user defined name of the 3rd Party Artifact that is being procured. */
  name: string;
  /** The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic */
  publisher: string;
  /** The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. */
  product: string;
  /** A publisher provided promotion code as provisioned in Data Market for the said product/artifact. */
  promotionCode?: string;
  /** The version of the desired product/artifact. */
  version?: string;
}

/** Workspace properties that can be patched. */
export interface WorkspacePatch {
  /** tags to be updated */
  tags?: { [propertyName: string]: string };
  /** Description of Workspace. */
  description?: string;
  /** Friendly name of Workspace. */
  friendlyName?: string;
  /** List of applicationGroup links. */
  applicationGroupReferences?: string[];
  /** Enabled to allow this resource to be access from the public network */
  publicNetworkAccess?: PublicNetworkAccess;
}

/** List of Workspace definitions. */
export interface WorkspaceList {
  /** List of Workspace definitions. */
  value?: Workspace[];
  /**
   * Link to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Scaling plan schedule. */
export interface ScalingSchedule {
  /** Name of the scaling schedule. */
  name?: string;
  /** Set of days of the week on which this schedule is active. */
  daysOfWeek?: ScalingScheduleDaysOfWeekItem[];
  /** Starting time for ramp up period. */
  rampUpStartTime?: Time;
  /** Load balancing algorithm for ramp up period. */
  rampUpLoadBalancingAlgorithm?: SessionHostLoadBalancingAlgorithm;
  /** Minimum host percentage for ramp up period. */
  rampUpMinimumHostsPct?: number;
  /** Capacity threshold for ramp up period. */
  rampUpCapacityThresholdPct?: number;
  /** Starting time for peak period. */
  peakStartTime?: Time;
  /** Load balancing algorithm for peak period. */
  peakLoadBalancingAlgorithm?: SessionHostLoadBalancingAlgorithm;
  /** Starting time for ramp down period. */
  rampDownStartTime?: Time;
  /** Load balancing algorithm for ramp down period. */
  rampDownLoadBalancingAlgorithm?: SessionHostLoadBalancingAlgorithm;
  /** Minimum host percentage for ramp down period. */
  rampDownMinimumHostsPct?: number;
  /** Capacity threshold for ramp down period. */
  rampDownCapacityThresholdPct?: number;
  /** Should users be logged off forcefully from hosts. */
  rampDownForceLogoffUsers?: boolean;
  /** Specifies when to stop hosts during ramp down period. */
  rampDownStopHostsWhen?: StopHostsWhen;
  /** Number of minutes to wait to stop hosts during ramp down period. */
  rampDownWaitTimeMinutes?: number;
  /** Notification message for users during ramp down period. */
  rampDownNotificationMessage?: string;
  /** Starting time for off-peak period. */
  offPeakStartTime?: Time;
  /** Load balancing algorithm for off-peak period. */
  offPeakLoadBalancingAlgorithm?: SessionHostLoadBalancingAlgorithm;
}

/** The time for a scaling action to occur. */
export interface Time {
  /** The hour. */
  hour: number;
  /** The minute. */
  minute: number;
}

/** Scaling plan reference to hostpool. */
export interface ScalingHostPoolReference {
  /** Arm path of referenced hostpool. */
  hostPoolArmPath?: string;
  /** Is the scaling plan enabled for this hostpool. */
  scalingPlanEnabled?: boolean;
}

/** Scaling plan properties that can be patched. */
export interface ScalingPlanPatch {
  /** tags to be updated */
  tags?: { [propertyName: string]: string };
  /** Description of scaling plan. */
  description?: string;
  /** User friendly name of scaling plan. */
  friendlyName?: string;
  /** Timezone of the scaling plan. */
  timeZone?: string;
  /** Exclusion tag for scaling plan. */
  exclusionTag?: string;
  /** List of ScalingSchedule definitions. */
  schedules?: ScalingSchedule[];
  /** List of ScalingHostPoolReference definitions. */
  hostPoolReferences?: ScalingHostPoolReference[];
}

/** List of scaling plan definitions. */
export interface ScalingPlanList {
  /** List of scaling plan definitions. */
  value?: ScalingPlan[];
  /**
   * Link to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Properties for arm migration. */
export interface MigrationRequestProperties {
  /** The type of operation for migration. */
  operation?: Operation;
  /** The path to the legacy object to migrate. */
  migrationPath?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** List of ApplicationGroup definitions. */
export interface ApplicationGroupList {
  /** List of ApplicationGroup definitions. */
  value?: ApplicationGroup[];
  /**
   * Link to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** List of StartMenuItem definitions. */
export interface StartMenuItemList {
  /** List of StartMenuItem definitions. */
  value?: StartMenuItem[];
  /**
   * Link to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Application properties that can be patched. */
export interface ApplicationPatch {
  /** tags to be updated */
  tags?: { [propertyName: string]: string };
  /** Description of Application. */
  description?: string;
  /** Friendly name of Application. */
  friendlyName?: string;
  /** Specifies a path for the executable file for the application. */
  filePath?: string;
  /** Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all. */
  commandLineSetting?: CommandLineSetting;
  /** Command Line Arguments for Application. */
  commandLineArguments?: string;
  /** Specifies whether to show the RemoteApp program in the RD Web Access server. */
  showInPortal?: boolean;
  /** Path to icon. */
  iconPath?: string;
  /** Index of the icon. */
  iconIndex?: number;
  /** Specifies the package family name for MSIX applications */
  msixPackageFamilyName?: string;
  /** Specifies the package application Id for MSIX applications */
  msixPackageApplicationId?: string;
  /** Resource Type of Application. */
  applicationType?: RemoteApplicationType;
}

/** List of Application definitions. */
export interface ApplicationList {
  /** List of Application definitions. */
  value?: Application[];
  /**
   * Link to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Desktop properties that can be patched. */
export interface DesktopPatch {
  /** tags to be updated */
  tags?: { [propertyName: string]: string };
  /** Description of Desktop. */
  description?: string;
  /** Friendly name of Desktop. */
  friendlyName?: string;
}

/** List of Desktop definitions. */
export interface DesktopList {
  /** List of Desktop definitions. */
  value?: Desktop[];
  /**
   * Link to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Represents a RegistrationInfo definition. */
export interface RegistrationInfo {
  /** Expiration time of registration token. */
  expirationTime?: Date;
  /** The registration token base64 encoded string. */
  token?: string;
  /** The type of resetting the token. */
  registrationTokenOperation?: RegistrationTokenOperation;
}

/** Represents a RegistrationInfo definition. */
export interface RegistrationInfoPatch {
  /** Expiration time of registration token. */
  expirationTime?: Date;
  /** The type of resetting the token. */
  registrationTokenOperation?: RegistrationTokenOperation;
}

/** List of HostPool definitions. */
export interface HostPoolList {
  /** List of HostPool definitions. */
  value?: HostPool[];
  /**
   * Link to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** List of UserSession definitions. */
export interface UserSessionList {
  /** List of UserSession definitions. */
  value?: UserSession[];
  /**
   * Link to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The report for session host information. */
export interface SessionHostHealthCheckReport {
  /**
   * Represents the name of the health check operation performed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly healthCheckName?: HealthCheckName;
  /**
   * Represents the Health state of the health check we performed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly healthCheckResult?: HealthCheckResult;
  /**
   * Additional detailed information on the failure.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalFailureDetails?: SessionHostHealthCheckFailureDetails;
}

/** Contains details on the failure. */
export interface SessionHostHealthCheckFailureDetails {
  /**
   * Failure message: hints on what is wrong and how to recover.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * Error code corresponding for the failure.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorCode?: number;
  /**
   * The timestamp of the last update.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastHealthCheckDateTime?: Date;
}

/** List of SessionHost definitions. */
export interface SessionHostList {
  /** List of SessionHost definitions. */
  value?: SessionHost[];
  /**
   * Link to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Schema for MSIX Package Dependencies properties. */
export interface MsixPackageDependencies {
  /** Name of package dependency. */
  dependencyName?: string;
  /** Name of dependency publisher. */
  publisher?: string;
  /** Dependency version required. */
  minVersion?: string;
}

/** Schema for MSIX Package Application properties. */
export interface MsixPackageApplications {
  /** Package Application Id, found in appxmanifest.xml. */
  appId?: string;
  /** Description of Package Application. */
  description?: string;
  /** Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml. */
  appUserModelID?: string;
  /** User friendly name. */
  friendlyName?: string;
  /** User friendly name. */
  iconImageName?: string;
  /** the icon a 64 bit string as a byte array. */
  rawIcon?: Uint8Array;
  /** the icon a 64 bit string as a byte array. */
  rawPng?: Uint8Array;
}

/** List of MSIX Package definitions. */
export interface MsixPackageList {
  /** List of MSIX Package definitions. */
  value?: MsixPackage[];
  /**
   * Link to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Represents URI referring to MSIX Image */
export interface MsixImageURI {
  /** URI to Image */
  uri?: string;
}

/** List of MSIX package properties retrieved from MSIX Image expansion. */
export interface ExpandMsixImageList {
  /** List of MSIX package properties from give MSIX Image. */
  value?: ExpandMsixImage[];
  /**
   * Link to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Represents message sent to a UserSession. */
export interface SendMessage {
  /** Title of message. */
  messageTitle?: string;
  /** Body of message. */
  messageBody?: string;
}

/** List of private endpoint connection associated with the specified storage account */
export interface PrivateEndpointConnectionListResultWithSystemData {
  /** Array of private endpoint connections */
  value?: PrivateEndpointConnectionWithSystemData[];
  /**
   * Link to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The Private Endpoint resource. */
export interface PrivateEndpoint {
  /**
   * The ARM identifier for Private Endpoint
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** A collection of information about the state of the connection between service consumer and provider. */
export interface PrivateLinkServiceConnectionState {
  /** Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. */
  status?: PrivateEndpointServiceConnectionStatus;
  /** The reason for approval/rejection of the connection. */
  description?: string;
  /** A message indicating if changes on the service provider require any updates on the consumer. */
  actionsRequired?: string;
}

/** A list of private link resources */
export interface PrivateLinkResourceListResult {
  /** Array of private link resources */
  value?: PrivateLinkResource[];
  /**
   * Link to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Represents a Workspace definition. */
export interface Workspace extends ResourceModelWithAllowedPropertySet {
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * ObjectId of Workspace. (internal use)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly objectId?: string;
  /** Description of Workspace. */
  description?: string;
  /** Friendly name of Workspace. */
  friendlyName?: string;
  /** List of applicationGroup resource Ids. */
  applicationGroupReferences?: string[];
  /**
   * Is cloud pc resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cloudPcResource?: boolean;
  /** Enabled allows this resource to be accessed from both public and private networks, Disabled allows this resource to only be accessed via private endpoints */
  publicNetworkAccess?: PublicNetworkAccess;
}

/** Represents a scaling plan definition. */
export interface ScalingPlan extends ResourceModelWithAllowedPropertySet {
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * ObjectId of scaling plan. (internal use)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly objectId?: string;
  /** Description of scaling plan. */
  description?: string;
  /** User friendly name of scaling plan. */
  friendlyName?: string;
  /** Timezone of the scaling plan. */
  timeZone?: string;
  /** HostPool type for desktop. */
  hostPoolType?: ScalingHostPoolType;
  /** Exclusion tag for scaling plan. */
  exclusionTag?: string;
  /** List of ScalingSchedule definitions. */
  schedules?: ScalingSchedule[];
  /** List of ScalingHostPoolReference definitions. */
  hostPoolReferences?: ScalingHostPoolReference[];
}

/** Represents a ApplicationGroup definition. */
export interface ApplicationGroup extends ResourceModelWithAllowedPropertySet {
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * ObjectId of ApplicationGroup. (internal use)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly objectId?: string;
  /** Description of ApplicationGroup. */
  description?: string;
  /** Friendly name of ApplicationGroup. */
  friendlyName?: string;
  /** HostPool arm path of ApplicationGroup. */
  hostPoolArmPath: string;
  /**
   * Workspace arm path of ApplicationGroup.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly workspaceArmPath?: string;
  /** Resource Type of ApplicationGroup. */
  applicationGroupType: ApplicationGroupType;
  /** The registration info of HostPool. */
  migrationRequest?: MigrationRequestProperties;
  /**
   * Is cloud pc resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cloudPcResource?: boolean;
}

/** Represents a HostPool definition. */
export interface HostPool extends ResourceModelWithAllowedPropertySet {
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * ObjectId of HostPool. (internal use)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly objectId?: string;
  /** Friendly name of HostPool. */
  friendlyName?: string;
  /** Description of HostPool. */
  description?: string;
  /** HostPool type for desktop. */
  hostPoolType: HostPoolType;
  /** PersonalDesktopAssignment type for HostPool. */
  personalDesktopAssignmentType?: PersonalDesktopAssignmentType;
  /** Custom rdp property of HostPool. */
  customRdpProperty?: string;
  /** The max session limit of HostPool. */
  maxSessionLimit?: number;
  /** The type of the load balancer. */
  loadBalancerType: LoadBalancerType;
  /** The ring number of HostPool. */
  ring?: number;
  /** Is validation environment. */
  validationEnvironment?: boolean;
  /** The registration info of HostPool. */
  registrationInfo?: RegistrationInfo;
  /** VM template for sessionhosts configuration within hostpool. */
  vmTemplate?: string;
  /**
   * List of applicationGroup links.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly applicationGroupReferences?: string[];
  /** URL to customer ADFS server for signing WVD SSO certificates. */
  ssoadfsAuthority?: string;
  /** ClientId for the registered Relying Party used to issue WVD SSO certificates. */
  ssoClientId?: string;
  /** Path to Azure KeyVault storing the secret used for communication to ADFS. */
  ssoClientSecretKeyVaultPath?: string;
  /** The type of single sign on Secret Type. */
  ssoSecretType?: SSOSecretType;
  /** The type of preferred application group type, default to Desktop Application Group */
  preferredAppGroupType: PreferredAppGroupType;
  /** The flag to turn on/off StartVMOnConnect feature. */
  startVMOnConnect?: boolean;
  /** The registration info of HostPool. */
  migrationRequest?: MigrationRequestProperties;
  /**
   * Is cloud pc resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cloudPcResource?: boolean;
  /** Enabled allows this resource to be accessed from both public and private networks, Disabled allows this resource to only be accessed via private endpoints */
  publicNetworkAccess?: PublicNetworkAccess;
}

export interface ResourceModelWithAllowedPropertySetIdentity extends Identity {}

export interface ResourceModelWithAllowedPropertySetSku extends Sku {}

export interface ResourceModelWithAllowedPropertySetPlan extends Plan {}

/** ApplicationGroup properties that can be patched. */
export interface ApplicationGroupPatch extends Resource {
  /** tags to be updated */
  tags?: { [propertyName: string]: string };
  /** Description of ApplicationGroup. */
  description?: string;
  /** Friendly name of ApplicationGroup. */
  friendlyName?: string;
}

/** Represents a StartMenuItem definition. */
export interface StartMenuItem extends Resource {
  /** Alias of StartMenuItem. */
  appAlias?: string;
  /** Path to the file of StartMenuItem. */
  filePath?: string;
  /** Command line arguments for StartMenuItem. */
  commandLineArguments?: string;
  /** Path to the icon. */
  iconPath?: string;
  /** Index of the icon. */
  iconIndex?: number;
}

/** Schema for Application properties. */
export interface Application extends Resource {
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * ObjectId of Application. (internal use)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly objectId?: string;
  /** Description of Application. */
  description?: string;
  /** Friendly name of Application. */
  friendlyName?: string;
  /** Specifies a path for the executable file for the application. */
  filePath?: string;
  /** Specifies the package family name for MSIX applications */
  msixPackageFamilyName?: string;
  /** Specifies the package application Id for MSIX applications */
  msixPackageApplicationId?: string;
  /** Resource Type of Application. */
  applicationType?: RemoteApplicationType;
  /** Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all. */
  commandLineSetting: CommandLineSetting;
  /** Command Line Arguments for Application. */
  commandLineArguments?: string;
  /** Specifies whether to show the RemoteApp program in the RD Web Access server. */
  showInPortal?: boolean;
  /** Path to icon. */
  iconPath?: string;
  /** Index of the icon. */
  iconIndex?: number;
  /**
   * Hash of the icon.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly iconHash?: string;
  /**
   * the icon a 64 bit string as a byte array.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly iconContent?: Uint8Array;
}

/** Schema for Desktop properties. */
export interface Desktop extends Resource {
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * ObjectId of Desktop. (internal use)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly objectId?: string;
  /** Description of Desktop. */
  description?: string;
  /** Friendly name of Desktop. */
  friendlyName?: string;
  /**
   * Hash of the icon.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly iconHash?: string;
  /**
   * The icon a 64 bit string as a byte array.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly iconContent?: Uint8Array;
}

/** HostPool properties that can be patched. */
export interface HostPoolPatch extends Resource {
  /** tags to be updated */
  tags?: { [propertyName: string]: string };
  /** Friendly name of HostPool. */
  friendlyName?: string;
  /** Description of HostPool. */
  description?: string;
  /** Custom rdp property of HostPool. */
  customRdpProperty?: string;
  /** The max session limit of HostPool. */
  maxSessionLimit?: number;
  /** PersonalDesktopAssignment type for HostPool. */
  personalDesktopAssignmentType?: PersonalDesktopAssignmentType;
  /** The type of the load balancer. */
  loadBalancerType?: LoadBalancerType;
  /** The ring number of HostPool. */
  ring?: number;
  /** Is validation environment. */
  validationEnvironment?: boolean;
  /** The registration info of HostPool. */
  registrationInfo?: RegistrationInfoPatch;
  /** VM template for sessionhosts configuration within hostpool. */
  vmTemplate?: string;
  /** URL to customer ADFS server for signing WVD SSO certificates. */
  ssoadfsAuthority?: string;
  /** ClientId for the registered Relying Party used to issue WVD SSO certificates. */
  ssoClientId?: string;
  /** Path to Azure KeyVault storing the secret used for communication to ADFS. */
  ssoClientSecretKeyVaultPath?: string;
  /** The type of single sign on Secret Type. */
  ssoSecretType?: SSOSecretType;
  /** The type of preferred application group type, default to Desktop Application Group */
  preferredAppGroupType?: PreferredAppGroupType;
  /** The flag to turn on/off StartVMOnConnect feature. */
  startVMOnConnect?: boolean;
  /** Enabled to allow this resource to be access from the public network */
  publicNetworkAccess?: PublicNetworkAccess;
}

/** Represents a UserSession definition. */
export interface UserSession extends Resource {
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * ObjectId of user session. (internal use)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly objectId?: string;
  /** The user principal name. */
  userPrincipalName?: string;
  /** Application type of application. */
  applicationType?: ApplicationType;
  /** State of user session. */
  sessionState?: SessionState;
  /** The active directory user name. */
  activeDirectoryUserName?: string;
  /** The timestamp of the user session create. */
  createTime?: Date;
}

/** Represents a SessionHost definition. */
export interface SessionHost extends Resource {
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * ObjectId of SessionHost. (internal use)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly objectId?: string;
  /** Last heart beat from SessionHost. */
  lastHeartBeat?: Date;
  /** Number of sessions on SessionHost. */
  sessions?: number;
  /** Version of agent on SessionHost. */
  agentVersion?: string;
  /** Allow a new session. */
  allowNewSession?: boolean;
  /**
   * Virtual Machine Id of SessionHost's underlying virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly virtualMachineId?: string;
  /**
   * Resource Id of SessionHost's underlying virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceId?: string;
  /** User assigned to SessionHost. */
  assignedUser?: string;
  /** Status for a SessionHost. */
  status?: Status;
  /**
   * The timestamp of the status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusTimestamp?: Date;
  /** The version of the OS on the session host. */
  osVersion?: string;
  /** The version of the side by side stack on the session host. */
  sxSStackVersion?: string;
  /** Update state of a SessionHost. */
  updateState?: UpdateState;
  /**
   * The timestamp of the last update.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastUpdateTime?: Date;
  /** The error message. */
  updateErrorMessage?: string;
  /**
   * List of SessionHostHealthCheckReports
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sessionHostHealthCheckResults?: SessionHostHealthCheckReport[];
}

/** SessionHost properties that can be patched. */
export interface SessionHostPatch extends Resource {
  /** Allow a new session. */
  allowNewSession?: boolean;
  /** User assigned to SessionHost. */
  assignedUser?: string;
}

/** Schema for MSIX Package properties. */
export interface MsixPackage extends Resource {
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** VHD/CIM image path on Network Share. */
  imagePath?: string;
  /** Package Name from appxmanifest.xml. */
  packageName?: string;
  /** Package Family Name from appxmanifest.xml. Contains Package Name and Publisher name. */
  packageFamilyName?: string;
  /** User friendly Name to be displayed in the portal. */
  displayName?: string;
  /** Relative Path to the package inside the image. */
  packageRelativePath?: string;
  /** Specifies how to register Package in feed. */
  isRegularRegistration?: boolean;
  /** Make this version of the package the active one across the hostpool. */
  isActive?: boolean;
  /** List of package dependencies. */
  packageDependencies?: MsixPackageDependencies[];
  /** Package Version found in the appxmanifest.xml. */
  version?: string;
  /** Date Package was last updated, found in the appxmanifest.xml. */
  lastUpdated?: Date;
  /** List of package applications. */
  packageApplications?: MsixPackageApplications[];
}

/** MSIX Package properties that can be patched. */
export interface MsixPackagePatch extends Resource {
  /** Set a version of the package to be active across hostpool. */
  isActive?: boolean;
  /** Set Registration mode. Regular or Delayed. */
  isRegularRegistration?: boolean;
  /** Display name for MSIX Package. */
  displayName?: string;
}

/** Represents the definition of contents retrieved after expanding the MSIX Image. */
export interface ExpandMsixImage extends Resource {
  /** Alias of MSIX Package. */
  packageAlias?: string;
  /** VHD/CIM image path on Network Share. */
  imagePath?: string;
  /** Package Name from appxmanifest.xml. */
  packageName?: string;
  /** Package Family Name from appxmanifest.xml. Contains Package Name and Publisher name. */
  packageFamilyName?: string;
  /** Package Full Name from appxmanifest.xml. */
  packageFullName?: string;
  /** User friendly Name to be displayed in the portal. */
  displayName?: string;
  /** Relative Path to the package inside the image. */
  packageRelativePath?: string;
  /** Specifies how to register Package in feed. */
  isRegularRegistration?: boolean;
  /** Make this version of the package the active one across the hostpool. */
  isActive?: boolean;
  /** List of package dependencies. */
  packageDependencies?: MsixPackageDependencies[];
  /** Package Version found in the appxmanifest.xml. */
  version?: string;
  /** Date Package was last updated, found in the appxmanifest.xml. */
  lastUpdated?: Date;
  /** List of package applications. */
  packageApplications?: MsixPackageApplications[];
}

/** The Private Endpoint Connection resource. */
export interface PrivateEndpointConnection extends Resource {
  /** The resource of private end point. */
  privateEndpoint?: PrivateEndpoint;
  /** A collection of information about the state of the connection between service consumer and provider. */
  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
  /** The provisioning state of the private endpoint connection resource. */
  provisioningState?: PrivateEndpointConnectionProvisioningState;
}

/** A private link resource */
export interface PrivateLinkResource extends Resource {
  /**
   * The private link resource group id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly groupId?: string;
  /**
   * The private link resource required member names.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly requiredMembers?: string[];
  /** The private link resource Private link DNS zone name. */
  requiredZoneNames?: string[];
}

/** The Private Endpoint Connection resource. */
export interface PrivateEndpointConnectionWithSystemData
  extends PrivateEndpointConnection {
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export enum KnownPublicNetworkAccess {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type PublicNetworkAccess = string;

/** Known values of {@link ScalingHostPoolType} that the service accepts. */
export enum KnownScalingHostPoolType {
  /** Users get a new (random) SessionHost every time it connects to the HostPool. */
  Pooled = "Pooled"
}

/**
 * Defines values for ScalingHostPoolType. \
 * {@link KnownScalingHostPoolType} can be used interchangeably with ScalingHostPoolType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pooled**: Users get a new (random) SessionHost every time it connects to the HostPool.
 */
export type ScalingHostPoolType = string;

/** Known values of {@link ScalingScheduleDaysOfWeekItem} that the service accepts. */
export enum KnownScalingScheduleDaysOfWeekItem {
  /** Sunday */
  Sunday = "Sunday",
  /** Monday */
  Monday = "Monday",
  /** Tuesday */
  Tuesday = "Tuesday",
  /** Wednesday */
  Wednesday = "Wednesday",
  /** Thursday */
  Thursday = "Thursday",
  /** Friday */
  Friday = "Friday",
  /** Saturday */
  Saturday = "Saturday"
}

/**
 * Defines values for ScalingScheduleDaysOfWeekItem. \
 * {@link KnownScalingScheduleDaysOfWeekItem} can be used interchangeably with ScalingScheduleDaysOfWeekItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Sunday** \
 * **Monday** \
 * **Tuesday** \
 * **Wednesday** \
 * **Thursday** \
 * **Friday** \
 * **Saturday**
 */
export type ScalingScheduleDaysOfWeekItem = string;

/** Known values of {@link SessionHostLoadBalancingAlgorithm} that the service accepts. */
export enum KnownSessionHostLoadBalancingAlgorithm {
  /** BreadthFirst */
  BreadthFirst = "BreadthFirst",
  /** DepthFirst */
  DepthFirst = "DepthFirst"
}

/**
 * Defines values for SessionHostLoadBalancingAlgorithm. \
 * {@link KnownSessionHostLoadBalancingAlgorithm} can be used interchangeably with SessionHostLoadBalancingAlgorithm,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BreadthFirst** \
 * **DepthFirst**
 */
export type SessionHostLoadBalancingAlgorithm = string;

/** Known values of {@link StopHostsWhen} that the service accepts. */
export enum KnownStopHostsWhen {
  /** ZeroSessions */
  ZeroSessions = "ZeroSessions",
  /** ZeroActiveSessions */
  ZeroActiveSessions = "ZeroActiveSessions"
}

/**
 * Defines values for StopHostsWhen. \
 * {@link KnownStopHostsWhen} can be used interchangeably with StopHostsWhen,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ZeroSessions** \
 * **ZeroActiveSessions**
 */
export type StopHostsWhen = string;

/** Known values of {@link ApplicationGroupType} that the service accepts. */
export enum KnownApplicationGroupType {
  /** RemoteApp */
  RemoteApp = "RemoteApp",
  /** Desktop */
  Desktop = "Desktop"
}

/**
 * Defines values for ApplicationGroupType. \
 * {@link KnownApplicationGroupType} can be used interchangeably with ApplicationGroupType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **RemoteApp** \
 * **Desktop**
 */
export type ApplicationGroupType = string;

/** Known values of {@link Operation} that the service accepts. */
export enum KnownOperation {
  /** Start the migration. */
  Start = "Start",
  /** Revoke the migration. */
  Revoke = "Revoke",
  /** Complete the migration. */
  Complete = "Complete",
  /** Hide the hostpool. */
  Hide = "Hide",
  /** Unhide the hostpool. */
  Unhide = "Unhide"
}

/**
 * Defines values for Operation. \
 * {@link KnownOperation} can be used interchangeably with Operation,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Start**: Start the migration. \
 * **Revoke**: Revoke the migration. \
 * **Complete**: Complete the migration. \
 * **Hide**: Hide the hostpool. \
 * **Unhide**: Unhide the hostpool.
 */
export type Operation = string;

/** Known values of {@link RemoteApplicationType} that the service accepts. */
export enum KnownRemoteApplicationType {
  /** InBuilt */
  InBuilt = "InBuilt",
  /** MsixApplication */
  MsixApplication = "MsixApplication"
}

/**
 * Defines values for RemoteApplicationType. \
 * {@link KnownRemoteApplicationType} can be used interchangeably with RemoteApplicationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InBuilt** \
 * **MsixApplication**
 */
export type RemoteApplicationType = string;

/** Known values of {@link CommandLineSetting} that the service accepts. */
export enum KnownCommandLineSetting {
  /** DoNotAllow */
  DoNotAllow = "DoNotAllow",
  /** Allow */
  Allow = "Allow",
  /** Require */
  Require = "Require"
}

/**
 * Defines values for CommandLineSetting. \
 * {@link KnownCommandLineSetting} can be used interchangeably with CommandLineSetting,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DoNotAllow** \
 * **Allow** \
 * **Require**
 */
export type CommandLineSetting = string;

/** Known values of {@link HostPoolType} that the service accepts. */
export enum KnownHostPoolType {
  /** Users will be assigned a SessionHost either by administrators (PersonalDesktopAssignmentType = Direct) or upon connecting to the pool (PersonalDesktopAssignmentType = Automatic). They will always be redirected to their assigned SessionHost. */
  Personal = "Personal",
  /** Users get a new (random) SessionHost every time it connects to the HostPool. */
  Pooled = "Pooled",
  /** Users assign their own machines, load balancing logic remains the same as Personal. PersonalDesktopAssignmentType must be Direct. */
  BYODesktop = "BYODesktop"
}

/**
 * Defines values for HostPoolType. \
 * {@link KnownHostPoolType} can be used interchangeably with HostPoolType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Personal**: Users will be assigned a SessionHost either by administrators (PersonalDesktopAssignmentType = Direct) or upon connecting to the pool (PersonalDesktopAssignmentType = Automatic). They will always be redirected to their assigned SessionHost. \
 * **Pooled**: Users get a new (random) SessionHost every time it connects to the HostPool. \
 * **BYODesktop**: Users assign their own machines, load balancing logic remains the same as Personal. PersonalDesktopAssignmentType must be Direct.
 */
export type HostPoolType = string;

/** Known values of {@link PersonalDesktopAssignmentType} that the service accepts. */
export enum KnownPersonalDesktopAssignmentType {
  /** Automatic */
  Automatic = "Automatic",
  /** Direct */
  Direct = "Direct"
}

/**
 * Defines values for PersonalDesktopAssignmentType. \
 * {@link KnownPersonalDesktopAssignmentType} can be used interchangeably with PersonalDesktopAssignmentType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Automatic** \
 * **Direct**
 */
export type PersonalDesktopAssignmentType = string;

/** Known values of {@link LoadBalancerType} that the service accepts. */
export enum KnownLoadBalancerType {
  /** BreadthFirst */
  BreadthFirst = "BreadthFirst",
  /** DepthFirst */
  DepthFirst = "DepthFirst",
  /** Persistent */
  Persistent = "Persistent"
}

/**
 * Defines values for LoadBalancerType. \
 * {@link KnownLoadBalancerType} can be used interchangeably with LoadBalancerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BreadthFirst** \
 * **DepthFirst** \
 * **Persistent**
 */
export type LoadBalancerType = string;

/** Known values of {@link RegistrationTokenOperation} that the service accepts. */
export enum KnownRegistrationTokenOperation {
  /** Delete */
  Delete = "Delete",
  /** None */
  None = "None",
  /** Update */
  Update = "Update"
}

/**
 * Defines values for RegistrationTokenOperation. \
 * {@link KnownRegistrationTokenOperation} can be used interchangeably with RegistrationTokenOperation,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Delete** \
 * **None** \
 * **Update**
 */
export type RegistrationTokenOperation = string;

/** Known values of {@link SSOSecretType} that the service accepts. */
export enum KnownSSOSecretType {
  /** SharedKey */
  SharedKey = "SharedKey",
  /** Certificate */
  Certificate = "Certificate",
  /** SharedKeyInKeyVault */
  SharedKeyInKeyVault = "SharedKeyInKeyVault",
  /** CertificateInKeyVault */
  CertificateInKeyVault = "CertificateInKeyVault"
}

/**
 * Defines values for SSOSecretType. \
 * {@link KnownSSOSecretType} can be used interchangeably with SSOSecretType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SharedKey** \
 * **Certificate** \
 * **SharedKeyInKeyVault** \
 * **CertificateInKeyVault**
 */
export type SSOSecretType = string;

/** Known values of {@link PreferredAppGroupType} that the service accepts. */
export enum KnownPreferredAppGroupType {
  /** None */
  None = "None",
  /** Desktop */
  Desktop = "Desktop",
  /** RailApplications */
  RailApplications = "RailApplications"
}

/**
 * Defines values for PreferredAppGroupType. \
 * {@link KnownPreferredAppGroupType} can be used interchangeably with PreferredAppGroupType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Desktop** \
 * **RailApplications**
 */
export type PreferredAppGroupType = string;

/** Known values of {@link ApplicationType} that the service accepts. */
export enum KnownApplicationType {
  /** RemoteApp */
  RemoteApp = "RemoteApp",
  /** Desktop */
  Desktop = "Desktop"
}

/**
 * Defines values for ApplicationType. \
 * {@link KnownApplicationType} can be used interchangeably with ApplicationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **RemoteApp** \
 * **Desktop**
 */
export type ApplicationType = string;

/** Known values of {@link SessionState} that the service accepts. */
export enum KnownSessionState {
  /** Unknown */
  Unknown = "Unknown",
  /** Active */
  Active = "Active",
  /** Disconnected */
  Disconnected = "Disconnected",
  /** Pending */
  Pending = "Pending",
  /** LogOff */
  LogOff = "LogOff",
  /** UserProfileDiskMounted */
  UserProfileDiskMounted = "UserProfileDiskMounted"
}

/**
 * Defines values for SessionState. \
 * {@link KnownSessionState} can be used interchangeably with SessionState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Active** \
 * **Disconnected** \
 * **Pending** \
 * **LogOff** \
 * **UserProfileDiskMounted**
 */
export type SessionState = string;

/** Known values of {@link Status} that the service accepts. */
export enum KnownStatus {
  /** Session Host has passed all the health checks and is available to handle connections. */
  Available = "Available",
  /** Session Host is either turned off or has failed critical health checks which is causing service not to be able to route connections to this session host. Note this replaces previous 'NoHeartBeat' status. */
  Unavailable = "Unavailable",
  /** Session Host is shutdown - RD Agent reported session host to be stopped or deallocated. */
  Shutdown = "Shutdown",
  /** The Session Host is unavailable because it is currently disconnected. */
  Disconnected = "Disconnected",
  /** Session Host is unavailable because currently an upgrade of RDAgent/side-by-side stack is in progress. Note: this state will be removed once the upgrade completes and the host is able to accept connections. */
  Upgrading = "Upgrading",
  /** Session Host is unavailable because the critical component upgrade (agent, side-by-side stack, etc.) failed. */
  UpgradeFailed = "UpgradeFailed",
  /** The Session Host is not heart beating. */
  NoHeartbeat = "NoHeartbeat",
  /** SessionHost is not joined to domain. */
  NotJoinedToDomain = "NotJoinedToDomain",
  /** SessionHost's domain trust relationship lost */
  DomainTrustRelationshipLost = "DomainTrustRelationshipLost",
  /** SxS stack installed on the SessionHost is not ready to receive connections. */
  SxSStackListenerNotReady = "SxSStackListenerNotReady",
  /** FSLogix is in an unhealthy state on the session host. */
  FSLogixNotHealthy = "FSLogixNotHealthy",
  /** New status to inform admins that the health on their endpoint needs to be fixed. The connections might not fail, as these issues are not fatal. */
  NeedsAssistance = "NeedsAssistance"
}

/**
 * Defines values for Status. \
 * {@link KnownStatus} can be used interchangeably with Status,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Available**: Session Host has passed all the health checks and is available to handle connections. \
 * **Unavailable**: Session Host is either turned off or has failed critical health checks which is causing service not to be able to route connections to this session host. Note this replaces previous 'NoHeartBeat' status. \
 * **Shutdown**: Session Host is shutdown - RD Agent reported session host to be stopped or deallocated. \
 * **Disconnected**: The Session Host is unavailable because it is currently disconnected. \
 * **Upgrading**: Session Host is unavailable because currently an upgrade of RDAgent\/side-by-side stack is in progress. Note: this state will be removed once the upgrade completes and the host is able to accept connections. \
 * **UpgradeFailed**: Session Host is unavailable because the critical component upgrade (agent, side-by-side stack, etc.) failed. \
 * **NoHeartbeat**: The Session Host is not heart beating. \
 * **NotJoinedToDomain**: SessionHost is not joined to domain. \
 * **DomainTrustRelationshipLost**: SessionHost's domain trust relationship lost \
 * **SxSStackListenerNotReady**: SxS stack installed on the SessionHost is not ready to receive connections. \
 * **FSLogixNotHealthy**: FSLogix is in an unhealthy state on the session host. \
 * **NeedsAssistance**: New status to inform admins that the health on their endpoint needs to be fixed. The connections might not fail, as these issues are not fatal.
 */
export type Status = string;

/** Known values of {@link UpdateState} that the service accepts. */
export enum KnownUpdateState {
  /** Initial */
  Initial = "Initial",
  /** Pending */
  Pending = "Pending",
  /** Started */
  Started = "Started",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed"
}

/**
 * Defines values for UpdateState. \
 * {@link KnownUpdateState} can be used interchangeably with UpdateState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Initial** \
 * **Pending** \
 * **Started** \
 * **Succeeded** \
 * **Failed**
 */
export type UpdateState = string;

/** Known values of {@link HealthCheckName} that the service accepts. */
export enum KnownHealthCheckName {
  /** Verifies the SessionHost is joined to a domain. If this check fails is classified as fatal as no connection can succeed if the SessionHost is not joined to the domain. */
  DomainJoinedCheck = "DomainJoinedCheck",
  /** Verifies the SessionHost is not experiencing domain trust issues that will prevent authentication on SessionHost at connection time when session is created. If this check fails is classified as fatal as no connection can succeed if we cannot reach the domain for authentication on the SessionHost. */
  DomainTrustCheck = "DomainTrustCheck",
  /** Verifies the FSLogix service is up and running to make sure users' profiles are loaded in the session. If this check fails is classified as fatal as even if the connection can succeed, user experience is bad as the user profile cannot be loaded and user will get a temporary profile in the session. */
  FSLogixHealthCheck = "FSLogixHealthCheck",
  /** Verifies that the SxS stack is up and running so connections can succeed. If this check fails is classified as fatal as no connection can succeed if the SxS stack is not ready. */
  SxSStackListenerCheck = "SxSStackListenerCheck",
  /** Verifies that the required WVD service and Geneva URLs are reachable from the SessionHost. These URLs are: RdTokenUri, RdBrokerURI, RdDiagnosticsUri and storage blob URLs for agent monitoring (geneva). If this check fails, it is non fatal and the machine still can service connections, main issue may be that monitoring agent is unable to store warm path data (logs, operations ...). */
  UrlsAccessibleCheck = "UrlsAccessibleCheck",
  /** Verifies that the required Geneva agent is running. If this check fails, it is non fatal and the machine still can service connections, main issue may be that monitoring agent is missing or running (possibly) older version. */
  MonitoringAgentCheck = "MonitoringAgentCheck",
  /** Verifies the domain the SessionHost is joined to is still reachable. If this check fails is classified as fatal as no connection can succeed if the domain the SessionHost is joined is not reachable at the time of connection. */
  DomainReachable = "DomainReachable",
  /** Verifies whether the WebRTCRedirector component is healthy. The WebRTCRedirector component is used to optimize video and audio performance in Microsoft Teams. This checks whether the component is still running, and whether there is a higher version available. If this check fails, it is non fatal and the machine still can service connections, main issue may be the WebRTCRedirector component has to be restarted or updated. */
  WebRTCRedirectorCheck = "WebRTCRedirectorCheck",
  /** Verifies the value of SecurityLayer registration key. If the value is 0 (SecurityLayer.RDP) this check fails with Error code = NativeMethodErrorCode.E_FAIL and is fatal. If the value is 1 (SecurityLayer.Negotiate) this check fails with Error code = NativeMethodErrorCode.ERROR_SUCCESS and is non fatal. */
  SupportedEncryptionCheck = "SupportedEncryptionCheck",
  /** Verifies the metadata service is accessible and return compute properties. */
  MetaDataServiceCheck = "MetaDataServiceCheck",
  /** Verifies that the AppAttachService is healthy (there were no issues during package staging). The AppAttachService is used to enable the staging/registration (and eventual deregistration/destaging) of MSIX apps that have been set up by the tenant admin. This checks whether the component had any failures during package staging. Failures in staging will prevent some MSIX apps from working properly for the end user. If this check fails, it is non fatal and the machine still can service connections, main issue may be certain apps will not work for end-users. */
  AppAttachHealthCheck = "AppAttachHealthCheck"
}

/**
 * Defines values for HealthCheckName. \
 * {@link KnownHealthCheckName} can be used interchangeably with HealthCheckName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DomainJoinedCheck**: Verifies the SessionHost is joined to a domain. If this check fails is classified as fatal as no connection can succeed if the SessionHost is not joined to the domain. \
 * **DomainTrustCheck**: Verifies the SessionHost is not experiencing domain trust issues that will prevent authentication on SessionHost at connection time when session is created. If this check fails is classified as fatal as no connection can succeed if we cannot reach the domain for authentication on the SessionHost. \
 * **FSLogixHealthCheck**: Verifies the FSLogix service is up and running to make sure users' profiles are loaded in the session. If this check fails is classified as fatal as even if the connection can succeed, user experience is bad as the user profile cannot be loaded and user will get a temporary profile in the session. \
 * **SxSStackListenerCheck**: Verifies that the SxS stack is up and running so connections can succeed. If this check fails is classified as fatal as no connection can succeed if the SxS stack is not ready. \
 * **UrlsAccessibleCheck**: Verifies that the required WVD service and Geneva URLs are reachable from the SessionHost. These URLs are: RdTokenUri, RdBrokerURI, RdDiagnosticsUri and storage blob URLs for agent monitoring (geneva). If this check fails, it is non fatal and the machine still can service connections, main issue may be that monitoring agent is unable to store warm path data (logs, operations ...). \
 * **MonitoringAgentCheck**: Verifies that the required Geneva agent is running. If this check fails, it is non fatal and the machine still can service connections, main issue may be that monitoring agent is missing or running (possibly) older version. \
 * **DomainReachable**: Verifies the domain the SessionHost is joined to is still reachable. If this check fails is classified as fatal as no connection can succeed if the domain the SessionHost is joined is not reachable at the time of connection. \
 * **WebRTCRedirectorCheck**: Verifies whether the WebRTCRedirector component is healthy. The WebRTCRedirector component is used to optimize video and audio performance in Microsoft Teams. This checks whether the component is still running, and whether there is a higher version available. If this check fails, it is non fatal and the machine still can service connections, main issue may be the WebRTCRedirector component has to be restarted or updated. \
 * **SupportedEncryptionCheck**: Verifies the value of SecurityLayer registration key. If the value is 0 (SecurityLayer.RDP) this check fails with Error code = NativeMethodErrorCode.E_FAIL and is fatal. If the value is 1 (SecurityLayer.Negotiate) this check fails with Error code = NativeMethodErrorCode.ERROR_SUCCESS and is non fatal. \
 * **MetaDataServiceCheck**: Verifies the metadata service is accessible and return compute properties. \
 * **AppAttachHealthCheck**: Verifies that the AppAttachService is healthy (there were no issues during package staging). The AppAttachService is used to enable the staging\/registration (and eventual deregistration\/destaging) of MSIX apps that have been set up by the tenant admin. This checks whether the component had any failures during package staging. Failures in staging will prevent some MSIX apps from working properly for the end user. If this check fails, it is non fatal and the machine still can service connections, main issue may be certain apps will not work for end-users.
 */
export type HealthCheckName = string;

/** Known values of {@link HealthCheckResult} that the service accepts. */
export enum KnownHealthCheckResult {
  /** Health check result is not currently known. */
  Unknown = "Unknown",
  /** Health check passed. */
  HealthCheckSucceeded = "HealthCheckSucceeded",
  /** Health check failed. */
  HealthCheckFailed = "HealthCheckFailed",
  /** We received a Shutdown notification. */
  SessionHostShutdown = "SessionHostShutdown"
}

/**
 * Defines values for HealthCheckResult. \
 * {@link KnownHealthCheckResult} can be used interchangeably with HealthCheckResult,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown**: Health check result is not currently known. \
 * **HealthCheckSucceeded**: Health check passed. \
 * **HealthCheckFailed**: Health check failed. \
 * **SessionHostShutdown**: We received a Shutdown notification.
 */
export type HealthCheckResult = string;

/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
export enum KnownPrivateEndpointServiceConnectionStatus {
  /** Pending */
  Pending = "Pending",
  /** Approved */
  Approved = "Approved",
  /** Rejected */
  Rejected = "Rejected"
}

/**
 * Defines values for PrivateEndpointServiceConnectionStatus. \
 * {@link KnownPrivateEndpointServiceConnectionStatus} can be used interchangeably with PrivateEndpointServiceConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected**
 */
export type PrivateEndpointServiceConnectionStatus = string;

/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export enum KnownPrivateEndpointConnectionProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Creating */
  Creating = "Creating",
  /** Deleting */
  Deleting = "Deleting",
  /** Failed */
  Failed = "Failed"
}

/**
 * Defines values for PrivateEndpointConnectionProvisioningState. \
 * {@link KnownPrivateEndpointConnectionProvisioningState} can be used interchangeably with PrivateEndpointConnectionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Creating** \
 * **Deleting** \
 * **Failed**
 */
export type PrivateEndpointConnectionProvisioningState = string;
/** Defines values for SkuTier. */
export type SkuTier = "Free" | "Basic" | "Standard" | "Premium";

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = ResourceProviderOperationList;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = ResourceProviderOperationList;

/** Optional parameters. */
export interface WorkspacesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type WorkspacesGetResponse = Workspace;

/** Optional parameters. */
export interface WorkspacesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type WorkspacesCreateOrUpdateResponse = Workspace;

/** Optional parameters. */
export interface WorkspacesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface WorkspacesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Object containing Workspace definitions. */
  workspace?: WorkspacePatch;
}

/** Contains response data for the update operation. */
export type WorkspacesUpdateResponse = Workspace;

/** Optional parameters. */
export interface WorkspacesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type WorkspacesListByResourceGroupResponse = WorkspaceList;

/** Optional parameters. */
export interface WorkspacesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type WorkspacesListBySubscriptionResponse = WorkspaceList;

/** Optional parameters. */
export interface WorkspacesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type WorkspacesListByResourceGroupNextResponse = WorkspaceList;

/** Optional parameters. */
export interface WorkspacesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type WorkspacesListBySubscriptionNextResponse = WorkspaceList;

/** Optional parameters. */
export interface ScalingPlansGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ScalingPlansGetResponse = ScalingPlan;

/** Optional parameters. */
export interface ScalingPlansCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type ScalingPlansCreateResponse = ScalingPlan;

/** Optional parameters. */
export interface ScalingPlansDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ScalingPlansUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Object containing scaling plan definitions. */
  scalingPlan?: ScalingPlanPatch;
}

/** Contains response data for the update operation. */
export type ScalingPlansUpdateResponse = ScalingPlan;

/** Optional parameters. */
export interface ScalingPlansListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type ScalingPlansListByResourceGroupResponse = ScalingPlanList;

/** Optional parameters. */
export interface ScalingPlansListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type ScalingPlansListBySubscriptionResponse = ScalingPlanList;

/** Optional parameters. */
export interface ScalingPlansListByHostPoolOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHostPool operation. */
export type ScalingPlansListByHostPoolResponse = ScalingPlanList;

/** Optional parameters. */
export interface ScalingPlansListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ScalingPlansListByResourceGroupNextResponse = ScalingPlanList;

/** Optional parameters. */
export interface ScalingPlansListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type ScalingPlansListBySubscriptionNextResponse = ScalingPlanList;

/** Optional parameters. */
export interface ScalingPlansListByHostPoolNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHostPoolNext operation. */
export type ScalingPlansListByHostPoolNextResponse = ScalingPlanList;

/** Optional parameters. */
export interface ApplicationGroupsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ApplicationGroupsGetResponse = ApplicationGroup;

/** Optional parameters. */
export interface ApplicationGroupsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ApplicationGroupsCreateOrUpdateResponse = ApplicationGroup;

/** Optional parameters. */
export interface ApplicationGroupsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ApplicationGroupsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Object containing ApplicationGroup definitions. */
  applicationGroup?: ApplicationGroupPatch;
}

/** Contains response data for the update operation. */
export type ApplicationGroupsUpdateResponse = ApplicationGroup;

/** Optional parameters. */
export interface ApplicationGroupsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** OData filter expression. Valid properties for filtering are applicationGroupType. */
  filter?: string;
}

/** Contains response data for the listByResourceGroup operation. */
export type ApplicationGroupsListByResourceGroupResponse = ApplicationGroupList;

/** Optional parameters. */
export interface ApplicationGroupsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** OData filter expression. Valid properties for filtering are applicationGroupType. */
  filter?: string;
}

/** Contains response data for the listBySubscription operation. */
export type ApplicationGroupsListBySubscriptionResponse = ApplicationGroupList;

/** Optional parameters. */
export interface ApplicationGroupsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {
  /** OData filter expression. Valid properties for filtering are applicationGroupType. */
  filter?: string;
}

/** Contains response data for the listByResourceGroupNext operation. */
export type ApplicationGroupsListByResourceGroupNextResponse = ApplicationGroupList;

/** Optional parameters. */
export interface ApplicationGroupsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {
  /** OData filter expression. Valid properties for filtering are applicationGroupType. */
  filter?: string;
}

/** Contains response data for the listBySubscriptionNext operation. */
export type ApplicationGroupsListBySubscriptionNextResponse = ApplicationGroupList;

/** Optional parameters. */
export interface StartMenuItemsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type StartMenuItemsListResponse = StartMenuItemList;

/** Optional parameters. */
export interface StartMenuItemsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type StartMenuItemsListNextResponse = StartMenuItemList;

/** Optional parameters. */
export interface ApplicationsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ApplicationsGetResponse = Application;

/** Optional parameters. */
export interface ApplicationsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ApplicationsCreateOrUpdateResponse = Application;

/** Optional parameters. */
export interface ApplicationsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ApplicationsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Object containing Application definitions. */
  application?: ApplicationPatch;
}

/** Contains response data for the update operation. */
export type ApplicationsUpdateResponse = Application;

/** Optional parameters. */
export interface ApplicationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ApplicationsListResponse = ApplicationList;

/** Optional parameters. */
export interface ApplicationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ApplicationsListNextResponse = ApplicationList;

/** Optional parameters. */
export interface DesktopsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DesktopsGetResponse = Desktop;

/** Optional parameters. */
export interface DesktopsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Object containing Desktop definitions. */
  desktop?: DesktopPatch;
}

/** Contains response data for the update operation. */
export type DesktopsUpdateResponse = Desktop;

/** Optional parameters. */
export interface DesktopsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type DesktopsListResponse = DesktopList;

/** Optional parameters. */
export interface DesktopsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type DesktopsListNextResponse = DesktopList;

/** Optional parameters. */
export interface HostPoolsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type HostPoolsGetResponse = HostPool;

/** Optional parameters. */
export interface HostPoolsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type HostPoolsCreateOrUpdateResponse = HostPool;

/** Optional parameters. */
export interface HostPoolsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Force flag to delete sessionHost. */
  force?: boolean;
}

/** Optional parameters. */
export interface HostPoolsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Object containing HostPool definitions. */
  hostPool?: HostPoolPatch;
}

/** Contains response data for the update operation. */
export type HostPoolsUpdateResponse = HostPool;

/** Optional parameters. */
export interface HostPoolsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type HostPoolsListByResourceGroupResponse = HostPoolList;

/** Optional parameters. */
export interface HostPoolsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type HostPoolsListResponse = HostPoolList;

/** Optional parameters. */
export interface HostPoolsRetrieveRegistrationTokenOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the retrieveRegistrationToken operation. */
export type HostPoolsRetrieveRegistrationTokenResponse = RegistrationInfo;

/** Optional parameters. */
export interface HostPoolsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type HostPoolsListByResourceGroupNextResponse = HostPoolList;

/** Optional parameters. */
export interface HostPoolsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type HostPoolsListNextResponse = HostPoolList;

/** Optional parameters. */
export interface UserSessionsListByHostPoolOptionalParams
  extends coreClient.OperationOptions {
  /** OData filter expression. Valid properties for filtering are userprincipalname and sessionstate. */
  filter?: string;
}

/** Contains response data for the listByHostPool operation. */
export type UserSessionsListByHostPoolResponse = UserSessionList;

/** Optional parameters. */
export interface UserSessionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type UserSessionsGetResponse = UserSession;

/** Optional parameters. */
export interface UserSessionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Force flag to login off userSession. */
  force?: boolean;
}

/** Optional parameters. */
export interface UserSessionsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type UserSessionsListResponse = UserSessionList;

/** Optional parameters. */
export interface UserSessionsDisconnectOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface UserSessionsSendMessageOptionalParams
  extends coreClient.OperationOptions {
  /** Object containing message includes title and message body */
  sendMessage?: SendMessage;
}

/** Optional parameters. */
export interface UserSessionsListByHostPoolNextOptionalParams
  extends coreClient.OperationOptions {
  /** OData filter expression. Valid properties for filtering are userprincipalname and sessionstate. */
  filter?: string;
}

/** Contains response data for the listByHostPoolNext operation. */
export type UserSessionsListByHostPoolNextResponse = UserSessionList;

/** Optional parameters. */
export interface UserSessionsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type UserSessionsListNextResponse = UserSessionList;

/** Optional parameters. */
export interface SessionHostsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SessionHostsGetResponse = SessionHost;

/** Optional parameters. */
export interface SessionHostsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Force flag to force sessionHost deletion even when userSession exists. */
  force?: boolean;
}

/** Optional parameters. */
export interface SessionHostsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Force flag to update assign, unassign or reassign personal desktop. */
  force?: boolean;
  /** Object containing SessionHost definitions. */
  sessionHost?: SessionHostPatch;
}

/** Contains response data for the update operation. */
export type SessionHostsUpdateResponse = SessionHost;

/** Optional parameters. */
export interface SessionHostsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type SessionHostsListResponse = SessionHostList;

/** Optional parameters. */
export interface SessionHostsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type SessionHostsListNextResponse = SessionHostList;

/** Optional parameters. */
export interface MsixPackagesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type MsixPackagesGetResponse = MsixPackage;

/** Optional parameters. */
export interface MsixPackagesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type MsixPackagesCreateOrUpdateResponse = MsixPackage;

/** Optional parameters. */
export interface MsixPackagesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface MsixPackagesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Object containing MSIX Package definitions. */
  msixPackage?: MsixPackagePatch;
}

/** Contains response data for the update operation. */
export type MsixPackagesUpdateResponse = MsixPackage;

/** Optional parameters. */
export interface MsixPackagesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type MsixPackagesListResponse = MsixPackageList;

/** Optional parameters. */
export interface MsixPackagesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type MsixPackagesListNextResponse = MsixPackageList;

/** Optional parameters. */
export interface MsixImagesExpandOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the expand operation. */
export type MsixImagesExpandResponse = ExpandMsixImageList;

/** Optional parameters. */
export interface MsixImagesExpandNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the expandNext operation. */
export type MsixImagesExpandNextResponse = ExpandMsixImageList;

/** Optional parameters. */
export interface PrivateEndpointConnectionsListByHostPoolOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHostPool operation. */
export type PrivateEndpointConnectionsListByHostPoolResponse = PrivateEndpointConnectionListResultWithSystemData;

/** Optional parameters. */
export interface PrivateEndpointConnectionsGetByHostPoolOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getByHostPool operation. */
export type PrivateEndpointConnectionsGetByHostPoolResponse = PrivateEndpointConnectionWithSystemData;

/** Optional parameters. */
export interface PrivateEndpointConnectionsDeleteByHostPoolOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface PrivateEndpointConnectionsUpdateByHostPoolOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateByHostPool operation. */
export type PrivateEndpointConnectionsUpdateByHostPoolResponse = PrivateEndpointConnectionWithSystemData;

/** Optional parameters. */
export interface PrivateEndpointConnectionsListByWorkspaceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByWorkspace operation. */
export type PrivateEndpointConnectionsListByWorkspaceResponse = PrivateEndpointConnectionListResultWithSystemData;

/** Optional parameters. */
export interface PrivateEndpointConnectionsGetByWorkspaceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getByWorkspace operation. */
export type PrivateEndpointConnectionsGetByWorkspaceResponse = PrivateEndpointConnectionWithSystemData;

/** Optional parameters. */
export interface PrivateEndpointConnectionsDeleteByWorkspaceOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface PrivateEndpointConnectionsUpdateByWorkspaceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateByWorkspace operation. */
export type PrivateEndpointConnectionsUpdateByWorkspaceResponse = PrivateEndpointConnectionWithSystemData;

/** Optional parameters. */
export interface PrivateEndpointConnectionsListByHostPoolNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHostPoolNext operation. */
export type PrivateEndpointConnectionsListByHostPoolNextResponse = PrivateEndpointConnectionListResultWithSystemData;

/** Optional parameters. */
export interface PrivateEndpointConnectionsListByWorkspaceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByWorkspaceNext operation. */
export type PrivateEndpointConnectionsListByWorkspaceNextResponse = PrivateEndpointConnectionListResultWithSystemData;

/** Optional parameters. */
export interface PrivateLinkResourcesListByHostPoolOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHostPool operation. */
export type PrivateLinkResourcesListByHostPoolResponse = PrivateLinkResourceListResult;

/** Optional parameters. */
export interface PrivateLinkResourcesListByWorkspaceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByWorkspace operation. */
export type PrivateLinkResourcesListByWorkspaceResponse = PrivateLinkResourceListResult;

/** Optional parameters. */
export interface PrivateLinkResourcesListByHostPoolNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHostPoolNext operation. */
export type PrivateLinkResourcesListByHostPoolNextResponse = PrivateLinkResourceListResult;

/** Optional parameters. */
export interface PrivateLinkResourcesListByWorkspaceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByWorkspaceNext operation. */
export type PrivateLinkResourcesListByWorkspaceNextResponse = PrivateLinkResourceListResult;

/** Optional parameters. */
export interface DesktopVirtualizationAPIClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
