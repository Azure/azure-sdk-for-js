/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const ResourceProviderOperationList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceProviderOperationList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceProviderOperation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceProviderOperation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceProviderOperation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "ResourceProviderOperationDisplay"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "OperationProperties"
        }
      }
    }
  }
};

export const ResourceProviderOperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceProviderOperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationProperties",
    modelProperties: {
      serviceSpecification: {
        serializedName: "serviceSpecification",
        type: {
          name: "Composite",
          className: "ServiceSpecification"
        }
      }
    }
  }
};

export const ServiceSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceSpecification",
    modelProperties: {
      logSpecifications: {
        serializedName: "logSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LogSpecification"
            }
          }
        }
      }
    }
  }
};

export const LogSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      blobDuration: {
        serializedName: "blobDuration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorProperties"
        }
      }
    }
  }
};

export const CloudErrorProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudErrorProperties",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ResourceModelWithAllowedPropertySet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceModelWithAllowedPropertySet",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      managedBy: {
        serializedName: "managedBy",
        type: {
          name: "String"
        }
      },
      kind: {
        constraints: {
          Pattern: new RegExp("^[-\\w\\._,\\(\\)]+$")
        },
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ResourceModelWithAllowedPropertySetIdentity"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "ResourceModelWithAllowedPropertySetSku"
        }
      },
      plan: {
        serializedName: "plan",
        type: {
          name: "Composite",
          className: "ResourceModelWithAllowedPropertySetPlan"
        }
      }
    }
  }
};

export const Identity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Identity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "SystemAssigned",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "Enum",
          allowedValues: ["Free", "Basic", "Standard", "Premium"]
        }
      },
      size: {
        serializedName: "size",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Plan: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Plan",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      publisher: {
        serializedName: "publisher",
        required: true,
        type: {
          name: "String"
        }
      },
      product: {
        serializedName: "product",
        required: true,
        type: {
          name: "String"
        }
      },
      promotionCode: {
        serializedName: "promotionCode",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspacePatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspacePatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      applicationGroupReferences: {
        serializedName: "properties.applicationGroupReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const WorkspaceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspaceList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Workspace"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScalingSchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScalingSchedule",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      daysOfWeek: {
        serializedName: "daysOfWeek",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      rampUpStartTime: {
        serializedName: "rampUpStartTime",
        type: {
          name: "Composite",
          className: "Time"
        }
      },
      rampUpLoadBalancingAlgorithm: {
        serializedName: "rampUpLoadBalancingAlgorithm",
        type: {
          name: "String"
        }
      },
      rampUpMinimumHostsPct: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "rampUpMinimumHostsPct",
        type: {
          name: "Number"
        }
      },
      rampUpCapacityThresholdPct: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 1
        },
        serializedName: "rampUpCapacityThresholdPct",
        type: {
          name: "Number"
        }
      },
      peakStartTime: {
        serializedName: "peakStartTime",
        type: {
          name: "Composite",
          className: "Time"
        }
      },
      peakLoadBalancingAlgorithm: {
        serializedName: "peakLoadBalancingAlgorithm",
        type: {
          name: "String"
        }
      },
      rampDownStartTime: {
        serializedName: "rampDownStartTime",
        type: {
          name: "Composite",
          className: "Time"
        }
      },
      rampDownLoadBalancingAlgorithm: {
        serializedName: "rampDownLoadBalancingAlgorithm",
        type: {
          name: "String"
        }
      },
      rampDownMinimumHostsPct: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "rampDownMinimumHostsPct",
        type: {
          name: "Number"
        }
      },
      rampDownCapacityThresholdPct: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "rampDownCapacityThresholdPct",
        type: {
          name: "Number"
        }
      },
      rampDownForceLogoffUsers: {
        serializedName: "rampDownForceLogoffUsers",
        type: {
          name: "Boolean"
        }
      },
      rampDownStopHostsWhen: {
        serializedName: "rampDownStopHostsWhen",
        type: {
          name: "String"
        }
      },
      rampDownWaitTimeMinutes: {
        serializedName: "rampDownWaitTimeMinutes",
        type: {
          name: "Number"
        }
      },
      rampDownNotificationMessage: {
        serializedName: "rampDownNotificationMessage",
        type: {
          name: "String"
        }
      },
      offPeakStartTime: {
        serializedName: "offPeakStartTime",
        type: {
          name: "Composite",
          className: "Time"
        }
      },
      offPeakLoadBalancingAlgorithm: {
        serializedName: "offPeakLoadBalancingAlgorithm",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Time: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Time",
    modelProperties: {
      hour: {
        constraints: {
          InclusiveMaximum: 23,
          InclusiveMinimum: 0
        },
        serializedName: "hour",
        required: true,
        type: {
          name: "Number"
        }
      },
      minute: {
        constraints: {
          InclusiveMaximum: 59,
          InclusiveMinimum: 0
        },
        serializedName: "minute",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ScalingHostPoolReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScalingHostPoolReference",
    modelProperties: {
      hostPoolArmPath: {
        serializedName: "hostPoolArmPath",
        type: {
          name: "String"
        }
      },
      scalingPlanEnabled: {
        serializedName: "scalingPlanEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ScalingPlanPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScalingPlanPatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      timeZone: {
        serializedName: "properties.timeZone",
        type: {
          name: "String"
        }
      },
      exclusionTag: {
        serializedName: "properties.exclusionTag",
        type: {
          name: "String"
        }
      },
      schedules: {
        serializedName: "properties.schedules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScalingSchedule"
            }
          }
        }
      },
      hostPoolReferences: {
        serializedName: "properties.hostPoolReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScalingHostPoolReference"
            }
          }
        }
      }
    }
  }
};

export const ScalingPlanList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScalingPlanList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScalingPlan"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScalingPlanPooledScheduleList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScalingPlanPooledScheduleList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScalingPlanPooledSchedule"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGroupList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGroupList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationGroup"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StartMenuItemList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StartMenuItemList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StartMenuItem"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationPatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      filePath: {
        serializedName: "properties.filePath",
        type: {
          name: "String"
        }
      },
      commandLineSetting: {
        serializedName: "properties.commandLineSetting",
        type: {
          name: "String"
        }
      },
      commandLineArguments: {
        serializedName: "properties.commandLineArguments",
        type: {
          name: "String"
        }
      },
      showInPortal: {
        serializedName: "properties.showInPortal",
        type: {
          name: "Boolean"
        }
      },
      iconPath: {
        serializedName: "properties.iconPath",
        type: {
          name: "String"
        }
      },
      iconIndex: {
        serializedName: "properties.iconIndex",
        type: {
          name: "Number"
        }
      },
      msixPackageFamilyName: {
        serializedName: "properties.msixPackageFamilyName",
        nullable: true,
        type: {
          name: "String"
        }
      },
      msixPackageApplicationId: {
        serializedName: "properties.msixPackageApplicationId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      applicationType: {
        serializedName: "properties.applicationType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Application"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DesktopPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DesktopPatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DesktopList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DesktopList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Desktop"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegistrationInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegistrationInfo",
    modelProperties: {
      expirationTime: {
        serializedName: "expirationTime",
        type: {
          name: "DateTime"
        }
      },
      token: {
        serializedName: "token",
        type: {
          name: "String"
        }
      },
      registrationTokenOperation: {
        serializedName: "registrationTokenOperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentUpdateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentUpdateProperties",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      useSessionHostLocalTime: {
        serializedName: "useSessionHostLocalTime",
        type: {
          name: "Boolean"
        }
      },
      maintenanceWindowTimeZone: {
        serializedName: "maintenanceWindowTimeZone",
        type: {
          name: "String"
        }
      },
      maintenanceWindows: {
        serializedName: "maintenanceWindows",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MaintenanceWindowProperties"
            }
          }
        }
      }
    }
  }
};

export const MaintenanceWindowProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MaintenanceWindowProperties",
    modelProperties: {
      hour: {
        serializedName: "hour",
        type: {
          name: "Number"
        }
      },
      dayOfWeek: {
        serializedName: "dayOfWeek",
        type: {
          name: "Enum",
          allowedValues: [
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday"
          ]
        }
      }
    }
  }
};

export const RegistrationInfoPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegistrationInfoPatch",
    modelProperties: {
      expirationTime: {
        serializedName: "expirationTime",
        type: {
          name: "DateTime"
        }
      },
      registrationTokenOperation: {
        serializedName: "registrationTokenOperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentUpdatePatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentUpdatePatchProperties",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      useSessionHostLocalTime: {
        serializedName: "useSessionHostLocalTime",
        type: {
          name: "Boolean"
        }
      },
      maintenanceWindowTimeZone: {
        serializedName: "maintenanceWindowTimeZone",
        type: {
          name: "String"
        }
      },
      maintenanceWindows: {
        serializedName: "maintenanceWindows",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MaintenanceWindowPatchProperties"
            }
          }
        }
      }
    }
  }
};

export const MaintenanceWindowPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MaintenanceWindowPatchProperties",
    modelProperties: {
      hour: {
        serializedName: "hour",
        type: {
          name: "Number"
        }
      },
      dayOfWeek: {
        serializedName: "dayOfWeek",
        type: {
          name: "Enum",
          allowedValues: [
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday"
          ]
        }
      }
    }
  }
};

export const HostPoolList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HostPoolList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HostPool"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserSessionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserSessionList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UserSession"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SessionHostHealthCheckReport: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SessionHostHealthCheckReport",
    modelProperties: {
      healthCheckName: {
        serializedName: "healthCheckName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthCheckResult: {
        serializedName: "healthCheckResult",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      additionalFailureDetails: {
        serializedName: "additionalFailureDetails",
        type: {
          name: "Composite",
          className: "SessionHostHealthCheckFailureDetails"
        }
      }
    }
  }
};

export const SessionHostHealthCheckFailureDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SessionHostHealthCheckFailureDetails",
    modelProperties: {
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "errorCode",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      lastHealthCheckDateTime: {
        serializedName: "lastHealthCheckDateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const SessionHostList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SessionHostList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SessionHost"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MsixPackageDependencies: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MsixPackageDependencies",
    modelProperties: {
      dependencyName: {
        serializedName: "dependencyName",
        type: {
          name: "String"
        }
      },
      publisher: {
        serializedName: "publisher",
        type: {
          name: "String"
        }
      },
      minVersion: {
        serializedName: "minVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MsixPackageApplications: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MsixPackageApplications",
    modelProperties: {
      appId: {
        serializedName: "appId",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      appUserModelID: {
        serializedName: "appUserModelID",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      iconImageName: {
        serializedName: "iconImageName",
        type: {
          name: "String"
        }
      },
      rawIcon: {
        serializedName: "rawIcon",
        type: {
          name: "ByteArray"
        }
      },
      rawPng: {
        serializedName: "rawPng",
        type: {
          name: "ByteArray"
        }
      }
    }
  }
};

export const MsixPackageList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MsixPackageList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MsixPackage"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MsixImageURI: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MsixImageURI",
    modelProperties: {
      uri: {
        serializedName: "uri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpandMsixImageList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpandMsixImageList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpandMsixImage"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SendMessage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SendMessage",
    modelProperties: {
      messageTitle: {
        serializedName: "messageTitle",
        type: {
          name: "String"
        }
      },
      messageBody: {
        serializedName: "messageBody",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Workspace: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Workspace",
    modelProperties: {
      ...ResourceModelWithAllowedPropertySet.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      objectId: {
        serializedName: "properties.objectId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      applicationGroupReferences: {
        serializedName: "properties.applicationGroupReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      cloudPcResource: {
        serializedName: "properties.cloudPcResource",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ScalingPlan: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScalingPlan",
    modelProperties: {
      ...ResourceModelWithAllowedPropertySet.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      objectId: {
        serializedName: "properties.objectId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      timeZone: {
        serializedName: "properties.timeZone",
        required: true,
        type: {
          name: "String"
        }
      },
      hostPoolType: {
        defaultValue: "Pooled",
        serializedName: "properties.hostPoolType",
        type: {
          name: "String"
        }
      },
      exclusionTag: {
        serializedName: "properties.exclusionTag",
        type: {
          name: "String"
        }
      },
      schedules: {
        serializedName: "properties.schedules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScalingSchedule"
            }
          }
        }
      },
      hostPoolReferences: {
        serializedName: "properties.hostPoolReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScalingHostPoolReference"
            }
          }
        }
      }
    }
  }
};

export const ApplicationGroup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGroup",
    modelProperties: {
      ...ResourceModelWithAllowedPropertySet.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      objectId: {
        serializedName: "properties.objectId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      hostPoolArmPath: {
        serializedName: "properties.hostPoolArmPath",
        required: true,
        type: {
          name: "String"
        }
      },
      workspaceArmPath: {
        serializedName: "properties.workspaceArmPath",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      applicationGroupType: {
        serializedName: "properties.applicationGroupType",
        required: true,
        type: {
          name: "String"
        }
      },
      cloudPcResource: {
        serializedName: "properties.cloudPcResource",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const HostPool: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HostPool",
    modelProperties: {
      ...ResourceModelWithAllowedPropertySet.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      objectId: {
        serializedName: "properties.objectId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      hostPoolType: {
        serializedName: "properties.hostPoolType",
        required: true,
        type: {
          name: "String"
        }
      },
      personalDesktopAssignmentType: {
        serializedName: "properties.personalDesktopAssignmentType",
        type: {
          name: "String"
        }
      },
      customRdpProperty: {
        serializedName: "properties.customRdpProperty",
        type: {
          name: "String"
        }
      },
      maxSessionLimit: {
        serializedName: "properties.maxSessionLimit",
        type: {
          name: "Number"
        }
      },
      loadBalancerType: {
        serializedName: "properties.loadBalancerType",
        required: true,
        type: {
          name: "String"
        }
      },
      ring: {
        serializedName: "properties.ring",
        type: {
          name: "Number"
        }
      },
      validationEnvironment: {
        serializedName: "properties.validationEnvironment",
        type: {
          name: "Boolean"
        }
      },
      registrationInfo: {
        serializedName: "properties.registrationInfo",
        type: {
          name: "Composite",
          className: "RegistrationInfo"
        }
      },
      vmTemplate: {
        serializedName: "properties.vmTemplate",
        type: {
          name: "String"
        }
      },
      applicationGroupReferences: {
        serializedName: "properties.applicationGroupReferences",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      ssoadfsAuthority: {
        serializedName: "properties.ssoadfsAuthority",
        type: {
          name: "String"
        }
      },
      ssoClientId: {
        serializedName: "properties.ssoClientId",
        type: {
          name: "String"
        }
      },
      ssoClientSecretKeyVaultPath: {
        serializedName: "properties.ssoClientSecretKeyVaultPath",
        type: {
          name: "String"
        }
      },
      ssoSecretType: {
        serializedName: "properties.ssoSecretType",
        type: {
          name: "String"
        }
      },
      preferredAppGroupType: {
        serializedName: "properties.preferredAppGroupType",
        required: true,
        type: {
          name: "String"
        }
      },
      startVMOnConnect: {
        serializedName: "properties.startVMOnConnect",
        type: {
          name: "Boolean"
        }
      },
      cloudPcResource: {
        serializedName: "properties.cloudPcResource",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      agentUpdate: {
        serializedName: "properties.agentUpdate",
        type: {
          name: "Composite",
          className: "AgentUpdateProperties"
        }
      }
    }
  }
};

export const ResourceModelWithAllowedPropertySetIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceModelWithAllowedPropertySetIdentity",
    modelProperties: {
      ...Identity.type.modelProperties
    }
  }
};

export const ResourceModelWithAllowedPropertySetSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceModelWithAllowedPropertySetSku",
    modelProperties: {
      ...Sku.type.modelProperties
    }
  }
};

export const ResourceModelWithAllowedPropertySetPlan: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceModelWithAllowedPropertySetPlan",
    modelProperties: {
      ...Plan.type.modelProperties
    }
  }
};

export const ScalingPlanPooledSchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScalingPlanPooledSchedule",
    modelProperties: {
      ...Resource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      daysOfWeek: {
        serializedName: "properties.daysOfWeek",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday",
                "Sunday"
              ]
            }
          }
        }
      },
      rampUpStartTime: {
        serializedName: "properties.rampUpStartTime",
        type: {
          name: "Composite",
          className: "Time"
        }
      },
      rampUpLoadBalancingAlgorithm: {
        serializedName: "properties.rampUpLoadBalancingAlgorithm",
        type: {
          name: "String"
        }
      },
      rampUpMinimumHostsPct: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "properties.rampUpMinimumHostsPct",
        type: {
          name: "Number"
        }
      },
      rampUpCapacityThresholdPct: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 1
        },
        serializedName: "properties.rampUpCapacityThresholdPct",
        type: {
          name: "Number"
        }
      },
      peakStartTime: {
        serializedName: "properties.peakStartTime",
        type: {
          name: "Composite",
          className: "Time"
        }
      },
      peakLoadBalancingAlgorithm: {
        serializedName: "properties.peakLoadBalancingAlgorithm",
        type: {
          name: "String"
        }
      },
      rampDownStartTime: {
        serializedName: "properties.rampDownStartTime",
        type: {
          name: "Composite",
          className: "Time"
        }
      },
      rampDownLoadBalancingAlgorithm: {
        serializedName: "properties.rampDownLoadBalancingAlgorithm",
        type: {
          name: "String"
        }
      },
      rampDownMinimumHostsPct: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "properties.rampDownMinimumHostsPct",
        type: {
          name: "Number"
        }
      },
      rampDownCapacityThresholdPct: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "properties.rampDownCapacityThresholdPct",
        type: {
          name: "Number"
        }
      },
      rampDownForceLogoffUsers: {
        serializedName: "properties.rampDownForceLogoffUsers",
        type: {
          name: "Boolean"
        }
      },
      rampDownStopHostsWhen: {
        serializedName: "properties.rampDownStopHostsWhen",
        type: {
          name: "String"
        }
      },
      rampDownWaitTimeMinutes: {
        serializedName: "properties.rampDownWaitTimeMinutes",
        type: {
          name: "Number"
        }
      },
      rampDownNotificationMessage: {
        serializedName: "properties.rampDownNotificationMessage",
        type: {
          name: "String"
        }
      },
      offPeakStartTime: {
        serializedName: "properties.offPeakStartTime",
        type: {
          name: "Composite",
          className: "Time"
        }
      },
      offPeakLoadBalancingAlgorithm: {
        serializedName: "properties.offPeakLoadBalancingAlgorithm",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScalingPlanPooledSchedulePatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScalingPlanPooledSchedulePatch",
    modelProperties: {
      ...Resource.type.modelProperties,
      daysOfWeek: {
        serializedName: "properties.daysOfWeek",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday",
                "Sunday"
              ]
            }
          }
        }
      },
      rampUpStartTime: {
        serializedName: "properties.rampUpStartTime",
        type: {
          name: "Composite",
          className: "Time"
        }
      },
      rampUpLoadBalancingAlgorithm: {
        serializedName: "properties.rampUpLoadBalancingAlgorithm",
        type: {
          name: "String"
        }
      },
      rampUpMinimumHostsPct: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "properties.rampUpMinimumHostsPct",
        type: {
          name: "Number"
        }
      },
      rampUpCapacityThresholdPct: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 1
        },
        serializedName: "properties.rampUpCapacityThresholdPct",
        type: {
          name: "Number"
        }
      },
      peakStartTime: {
        serializedName: "properties.peakStartTime",
        type: {
          name: "Composite",
          className: "Time"
        }
      },
      peakLoadBalancingAlgorithm: {
        serializedName: "properties.peakLoadBalancingAlgorithm",
        type: {
          name: "String"
        }
      },
      rampDownStartTime: {
        serializedName: "properties.rampDownStartTime",
        type: {
          name: "Composite",
          className: "Time"
        }
      },
      rampDownLoadBalancingAlgorithm: {
        serializedName: "properties.rampDownLoadBalancingAlgorithm",
        type: {
          name: "String"
        }
      },
      rampDownMinimumHostsPct: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "properties.rampDownMinimumHostsPct",
        type: {
          name: "Number"
        }
      },
      rampDownCapacityThresholdPct: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "properties.rampDownCapacityThresholdPct",
        type: {
          name: "Number"
        }
      },
      rampDownForceLogoffUsers: {
        serializedName: "properties.rampDownForceLogoffUsers",
        type: {
          name: "Boolean"
        }
      },
      rampDownStopHostsWhen: {
        serializedName: "properties.rampDownStopHostsWhen",
        type: {
          name: "String"
        }
      },
      rampDownWaitTimeMinutes: {
        serializedName: "properties.rampDownWaitTimeMinutes",
        type: {
          name: "Number"
        }
      },
      rampDownNotificationMessage: {
        serializedName: "properties.rampDownNotificationMessage",
        type: {
          name: "String"
        }
      },
      offPeakStartTime: {
        serializedName: "properties.offPeakStartTime",
        type: {
          name: "Composite",
          className: "Time"
        }
      },
      offPeakLoadBalancingAlgorithm: {
        serializedName: "properties.offPeakLoadBalancingAlgorithm",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationGroupPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGroupPatch",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StartMenuItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StartMenuItem",
    modelProperties: {
      ...Resource.type.modelProperties,
      appAlias: {
        serializedName: "properties.appAlias",
        type: {
          name: "String"
        }
      },
      filePath: {
        serializedName: "properties.filePath",
        type: {
          name: "String"
        }
      },
      commandLineArguments: {
        serializedName: "properties.commandLineArguments",
        type: {
          name: "String"
        }
      },
      iconPath: {
        serializedName: "properties.iconPath",
        type: {
          name: "String"
        }
      },
      iconIndex: {
        serializedName: "properties.iconIndex",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Application: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Application",
    modelProperties: {
      ...Resource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      objectId: {
        serializedName: "properties.objectId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      filePath: {
        serializedName: "properties.filePath",
        type: {
          name: "String"
        }
      },
      msixPackageFamilyName: {
        serializedName: "properties.msixPackageFamilyName",
        nullable: true,
        type: {
          name: "String"
        }
      },
      msixPackageApplicationId: {
        serializedName: "properties.msixPackageApplicationId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      applicationType: {
        serializedName: "properties.applicationType",
        type: {
          name: "String"
        }
      },
      commandLineSetting: {
        serializedName: "properties.commandLineSetting",
        required: true,
        type: {
          name: "String"
        }
      },
      commandLineArguments: {
        serializedName: "properties.commandLineArguments",
        type: {
          name: "String"
        }
      },
      showInPortal: {
        serializedName: "properties.showInPortal",
        type: {
          name: "Boolean"
        }
      },
      iconPath: {
        serializedName: "properties.iconPath",
        type: {
          name: "String"
        }
      },
      iconIndex: {
        serializedName: "properties.iconIndex",
        type: {
          name: "Number"
        }
      },
      iconHash: {
        serializedName: "properties.iconHash",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      iconContent: {
        serializedName: "properties.iconContent",
        readOnly: true,
        type: {
          name: "ByteArray"
        }
      }
    }
  }
};

export const Desktop: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Desktop",
    modelProperties: {
      ...Resource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      objectId: {
        serializedName: "properties.objectId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      iconHash: {
        serializedName: "properties.iconHash",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      iconContent: {
        serializedName: "properties.iconContent",
        readOnly: true,
        type: {
          name: "ByteArray"
        }
      }
    }
  }
};

export const HostPoolPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HostPoolPatch",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      customRdpProperty: {
        serializedName: "properties.customRdpProperty",
        type: {
          name: "String"
        }
      },
      maxSessionLimit: {
        serializedName: "properties.maxSessionLimit",
        type: {
          name: "Number"
        }
      },
      personalDesktopAssignmentType: {
        serializedName: "properties.personalDesktopAssignmentType",
        type: {
          name: "String"
        }
      },
      loadBalancerType: {
        serializedName: "properties.loadBalancerType",
        type: {
          name: "String"
        }
      },
      ring: {
        serializedName: "properties.ring",
        type: {
          name: "Number"
        }
      },
      validationEnvironment: {
        serializedName: "properties.validationEnvironment",
        type: {
          name: "Boolean"
        }
      },
      registrationInfo: {
        serializedName: "properties.registrationInfo",
        type: {
          name: "Composite",
          className: "RegistrationInfoPatch"
        }
      },
      vmTemplate: {
        serializedName: "properties.vmTemplate",
        type: {
          name: "String"
        }
      },
      ssoadfsAuthority: {
        serializedName: "properties.ssoadfsAuthority",
        type: {
          name: "String"
        }
      },
      ssoClientId: {
        serializedName: "properties.ssoClientId",
        type: {
          name: "String"
        }
      },
      ssoClientSecretKeyVaultPath: {
        serializedName: "properties.ssoClientSecretKeyVaultPath",
        type: {
          name: "String"
        }
      },
      ssoSecretType: {
        serializedName: "properties.ssoSecretType",
        type: {
          name: "String"
        }
      },
      preferredAppGroupType: {
        serializedName: "properties.preferredAppGroupType",
        type: {
          name: "String"
        }
      },
      startVMOnConnect: {
        serializedName: "properties.startVMOnConnect",
        type: {
          name: "Boolean"
        }
      },
      agentUpdate: {
        serializedName: "properties.agentUpdate",
        type: {
          name: "Composite",
          className: "AgentUpdatePatchProperties"
        }
      }
    }
  }
};

export const UserSession: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserSession",
    modelProperties: {
      ...Resource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      objectId: {
        serializedName: "properties.objectId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      userPrincipalName: {
        serializedName: "properties.userPrincipalName",
        type: {
          name: "String"
        }
      },
      applicationType: {
        serializedName: "properties.applicationType",
        type: {
          name: "String"
        }
      },
      sessionState: {
        serializedName: "properties.sessionState",
        type: {
          name: "String"
        }
      },
      activeDirectoryUserName: {
        serializedName: "properties.activeDirectoryUserName",
        type: {
          name: "String"
        }
      },
      createTime: {
        serializedName: "properties.createTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const SessionHost: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SessionHost",
    modelProperties: {
      ...Resource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      objectId: {
        serializedName: "properties.objectId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastHeartBeat: {
        serializedName: "properties.lastHeartBeat",
        type: {
          name: "DateTime"
        }
      },
      sessions: {
        serializedName: "properties.sessions",
        type: {
          name: "Number"
        }
      },
      agentVersion: {
        serializedName: "properties.agentVersion",
        type: {
          name: "String"
        }
      },
      allowNewSession: {
        serializedName: "properties.allowNewSession",
        type: {
          name: "Boolean"
        }
      },
      virtualMachineId: {
        serializedName: "properties.virtualMachineId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "properties.resourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      assignedUser: {
        serializedName: "properties.assignedUser",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      statusTimestamp: {
        serializedName: "properties.statusTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      osVersion: {
        serializedName: "properties.osVersion",
        type: {
          name: "String"
        }
      },
      sxSStackVersion: {
        serializedName: "properties.sxSStackVersion",
        type: {
          name: "String"
        }
      },
      updateState: {
        serializedName: "properties.updateState",
        type: {
          name: "String"
        }
      },
      lastUpdateTime: {
        serializedName: "properties.lastUpdateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      updateErrorMessage: {
        serializedName: "properties.updateErrorMessage",
        type: {
          name: "String"
        }
      },
      sessionHostHealthCheckResults: {
        serializedName: "properties.sessionHostHealthCheckResults",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SessionHostHealthCheckReport"
            }
          }
        }
      }
    }
  }
};

export const SessionHostPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SessionHostPatch",
    modelProperties: {
      ...Resource.type.modelProperties,
      allowNewSession: {
        serializedName: "properties.allowNewSession",
        type: {
          name: "Boolean"
        }
      },
      assignedUser: {
        serializedName: "properties.assignedUser",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MsixPackage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MsixPackage",
    modelProperties: {
      ...Resource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      imagePath: {
        serializedName: "properties.imagePath",
        type: {
          name: "String"
        }
      },
      packageName: {
        serializedName: "properties.packageName",
        type: {
          name: "String"
        }
      },
      packageFamilyName: {
        serializedName: "properties.packageFamilyName",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        nullable: true,
        type: {
          name: "String"
        }
      },
      packageRelativePath: {
        serializedName: "properties.packageRelativePath",
        type: {
          name: "String"
        }
      },
      isRegularRegistration: {
        serializedName: "properties.isRegularRegistration",
        type: {
          name: "Boolean"
        }
      },
      isActive: {
        serializedName: "properties.isActive",
        type: {
          name: "Boolean"
        }
      },
      packageDependencies: {
        serializedName: "properties.packageDependencies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MsixPackageDependencies"
            }
          }
        }
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "String"
        }
      },
      lastUpdated: {
        serializedName: "properties.lastUpdated",
        type: {
          name: "DateTime"
        }
      },
      packageApplications: {
        serializedName: "properties.packageApplications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MsixPackageApplications"
            }
          }
        }
      }
    }
  }
};

export const MsixPackagePatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MsixPackagePatch",
    modelProperties: {
      ...Resource.type.modelProperties,
      isActive: {
        serializedName: "properties.isActive",
        type: {
          name: "Boolean"
        }
      },
      isRegularRegistration: {
        serializedName: "properties.isRegularRegistration",
        type: {
          name: "Boolean"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpandMsixImage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpandMsixImage",
    modelProperties: {
      ...Resource.type.modelProperties,
      packageAlias: {
        serializedName: "properties.packageAlias",
        type: {
          name: "String"
        }
      },
      imagePath: {
        serializedName: "properties.imagePath",
        type: {
          name: "String"
        }
      },
      packageName: {
        serializedName: "properties.packageName",
        type: {
          name: "String"
        }
      },
      packageFamilyName: {
        serializedName: "properties.packageFamilyName",
        type: {
          name: "String"
        }
      },
      packageFullName: {
        serializedName: "properties.packageFullName",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        nullable: true,
        type: {
          name: "String"
        }
      },
      packageRelativePath: {
        serializedName: "properties.packageRelativePath",
        type: {
          name: "String"
        }
      },
      isRegularRegistration: {
        serializedName: "properties.isRegularRegistration",
        type: {
          name: "Boolean"
        }
      },
      isActive: {
        serializedName: "properties.isActive",
        type: {
          name: "Boolean"
        }
      },
      packageDependencies: {
        serializedName: "properties.packageDependencies",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MsixPackageDependencies"
            }
          }
        }
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "String"
        }
      },
      lastUpdated: {
        serializedName: "properties.lastUpdated",
        type: {
          name: "DateTime"
        }
      },
      packageApplications: {
        serializedName: "properties.packageApplications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MsixPackageApplications"
            }
          }
        }
      }
    }
  }
};
