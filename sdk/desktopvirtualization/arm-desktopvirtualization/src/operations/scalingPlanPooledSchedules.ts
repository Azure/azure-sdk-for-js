/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ScalingPlanPooledSchedules } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DesktopVirtualizationAPIClient } from "../desktopVirtualizationAPIClient";
import {
  ScalingPlanPooledSchedule,
  ScalingPlanPooledSchedulesListNextOptionalParams,
  ScalingPlanPooledSchedulesListOptionalParams,
  ScalingPlanPooledSchedulesListResponse,
  ScalingPlanPooledSchedulesGetOptionalParams,
  ScalingPlanPooledSchedulesGetResponse,
  ScalingPlanPooledSchedulesCreateOptionalParams,
  ScalingPlanPooledSchedulesCreateResponse,
  ScalingPlanPooledSchedulesDeleteOptionalParams,
  ScalingPlanPooledSchedulesUpdateOptionalParams,
  ScalingPlanPooledSchedulesUpdateResponse,
  ScalingPlanPooledSchedulesListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ScalingPlanPooledSchedules operations. */
export class ScalingPlanPooledSchedulesImpl
  implements ScalingPlanPooledSchedules {
  private readonly client: DesktopVirtualizationAPIClient;

  /**
   * Initialize a new instance of the class ScalingPlanPooledSchedules class.
   * @param client Reference to the service client
   */
  constructor(client: DesktopVirtualizationAPIClient) {
    this.client = client;
  }

  /**
   * List ScalingPlanPooledSchedules.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param scalingPlanName The name of the scaling plan.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    scalingPlanName: string,
    options?: ScalingPlanPooledSchedulesListOptionalParams
  ): PagedAsyncIterableIterator<ScalingPlanPooledSchedule> {
    const iter = this.listPagingAll(
      resourceGroupName,
      scalingPlanName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          scalingPlanName,
          options,
          settings
        );
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    scalingPlanName: string,
    options?: ScalingPlanPooledSchedulesListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ScalingPlanPooledSchedule[]> {
    let result: ScalingPlanPooledSchedulesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceGroupName, scalingPlanName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        scalingPlanName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    scalingPlanName: string,
    options?: ScalingPlanPooledSchedulesListOptionalParams
  ): AsyncIterableIterator<ScalingPlanPooledSchedule> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      scalingPlanName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get a ScalingPlanPooledSchedule.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param scalingPlanName The name of the scaling plan.
   * @param scalingPlanScheduleName The name of the ScalingPlanSchedule
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    scalingPlanName: string,
    scalingPlanScheduleName: string,
    options?: ScalingPlanPooledSchedulesGetOptionalParams
  ): Promise<ScalingPlanPooledSchedulesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, scalingPlanName, scalingPlanScheduleName, options },
      getOperationSpec
    );
  }

  /**
   * Create or update a ScalingPlanPooledSchedule.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param scalingPlanName The name of the scaling plan.
   * @param scalingPlanScheduleName The name of the ScalingPlanSchedule
   * @param scalingPlanSchedule Object containing ScalingPlanPooledSchedule definitions.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    scalingPlanName: string,
    scalingPlanScheduleName: string,
    scalingPlanSchedule: ScalingPlanPooledSchedule,
    options?: ScalingPlanPooledSchedulesCreateOptionalParams
  ): Promise<ScalingPlanPooledSchedulesCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        scalingPlanName,
        scalingPlanScheduleName,
        scalingPlanSchedule,
        options
      },
      createOperationSpec
    );
  }

  /**
   * Remove a ScalingPlanPooledSchedule.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param scalingPlanName The name of the scaling plan.
   * @param scalingPlanScheduleName The name of the ScalingPlanSchedule
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    scalingPlanName: string,
    scalingPlanScheduleName: string,
    options?: ScalingPlanPooledSchedulesDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, scalingPlanName, scalingPlanScheduleName, options },
      deleteOperationSpec
    );
  }

  /**
   * Update a ScalingPlanPooledSchedule.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param scalingPlanName The name of the scaling plan.
   * @param scalingPlanScheduleName The name of the ScalingPlanSchedule
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    scalingPlanName: string,
    scalingPlanScheduleName: string,
    options?: ScalingPlanPooledSchedulesUpdateOptionalParams
  ): Promise<ScalingPlanPooledSchedulesUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, scalingPlanName, scalingPlanScheduleName, options },
      updateOperationSpec
    );
  }

  /**
   * List ScalingPlanPooledSchedules.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param scalingPlanName The name of the scaling plan.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    scalingPlanName: string,
    options?: ScalingPlanPooledSchedulesListOptionalParams
  ): Promise<ScalingPlanPooledSchedulesListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, scalingPlanName, options },
      listOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param scalingPlanName The name of the scaling plan.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    scalingPlanName: string,
    nextLink: string,
    options?: ScalingPlanPooledSchedulesListNextOptionalParams
  ): Promise<ScalingPlanPooledSchedulesListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, scalingPlanName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}/pooledSchedules/{scalingPlanScheduleName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScalingPlanPooledSchedule
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.scalingPlanName,
    Parameters.scalingPlanScheduleName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}/pooledSchedules/{scalingPlanScheduleName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ScalingPlanPooledSchedule
    },
    201: {
      bodyMapper: Mappers.ScalingPlanPooledSchedule
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.scalingPlanSchedule,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.scalingPlanName,
    Parameters.scalingPlanScheduleName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}/pooledSchedules/{scalingPlanScheduleName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.scalingPlanName,
    Parameters.scalingPlanScheduleName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}/pooledSchedules/{scalingPlanScheduleName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ScalingPlanPooledSchedule
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.scalingPlanSchedule1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.scalingPlanName,
    Parameters.scalingPlanScheduleName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}/pooledSchedules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScalingPlanPooledScheduleList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.pageSize,
    Parameters.isDescending,
    Parameters.initialSkip
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.scalingPlanName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScalingPlanPooledScheduleList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.scalingPlanName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
