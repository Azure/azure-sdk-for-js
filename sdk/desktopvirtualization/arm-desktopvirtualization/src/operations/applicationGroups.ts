/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/applicationGroupsMappers";
import * as Parameters from "../models/parameters";
import { DesktopVirtualizationAPIClientContext } from "../desktopVirtualizationAPIClientContext";

/** Class representing a ApplicationGroups. */
export class ApplicationGroups {
  private readonly client: DesktopVirtualizationAPIClientContext;

  /**
   * Create a ApplicationGroups.
   * @param {DesktopVirtualizationAPIClientContext} client Reference to the service client.
   */
  constructor(client: DesktopVirtualizationAPIClientContext) {
    this.client = client;
  }

  /**
   * Get an application group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param [options] The optional parameters
   * @returns Promise<Models.ApplicationGroupsGetResponse>
   */
  get(resourceGroupName: string, applicationGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.ApplicationGroupsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param callback The callback
   */
  get(resourceGroupName: string, applicationGroupName: string, callback: msRest.ServiceCallback<Models.ApplicationGroup>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, applicationGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationGroup>): void;
  get(resourceGroupName: string, applicationGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ApplicationGroup>, callback?: msRest.ServiceCallback<Models.ApplicationGroup>): Promise<Models.ApplicationGroupsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        applicationGroupName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ApplicationGroupsGetResponse>;
  }

  /**
   * Create or update an applicationGroup.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param applicationGroup Object containing ApplicationGroup definitions.
   * @param [options] The optional parameters
   * @returns Promise<Models.ApplicationGroupsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, applicationGroupName: string, applicationGroup: Models.ApplicationGroup, options?: msRest.RequestOptionsBase): Promise<Models.ApplicationGroupsCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param applicationGroup Object containing ApplicationGroup definitions.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, applicationGroupName: string, applicationGroup: Models.ApplicationGroup, callback: msRest.ServiceCallback<Models.ApplicationGroup>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param applicationGroup Object containing ApplicationGroup definitions.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, applicationGroupName: string, applicationGroup: Models.ApplicationGroup, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationGroup>): void;
  createOrUpdate(resourceGroupName: string, applicationGroupName: string, applicationGroup: Models.ApplicationGroup, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ApplicationGroup>, callback?: msRest.ServiceCallback<Models.ApplicationGroup>): Promise<Models.ApplicationGroupsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        applicationGroupName,
        applicationGroup,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.ApplicationGroupsCreateOrUpdateResponse>;
  }

  /**
   * Remove an applicationGroup.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, applicationGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, applicationGroupName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, applicationGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, applicationGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        applicationGroupName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Update an applicationGroup.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param [options] The optional parameters
   * @returns Promise<Models.ApplicationGroupsUpdateResponse>
   */
  update(resourceGroupName: string, applicationGroupName: string, options?: Models.ApplicationGroupsUpdateOptionalParams): Promise<Models.ApplicationGroupsUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param callback The callback
   */
  update(resourceGroupName: string, applicationGroupName: string, callback: msRest.ServiceCallback<Models.ApplicationGroup>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, applicationGroupName: string, options: Models.ApplicationGroupsUpdateOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationGroup>): void;
  update(resourceGroupName: string, applicationGroupName: string, options?: Models.ApplicationGroupsUpdateOptionalParams | msRest.ServiceCallback<Models.ApplicationGroup>, callback?: msRest.ServiceCallback<Models.ApplicationGroup>): Promise<Models.ApplicationGroupsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        applicationGroupName,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.ApplicationGroupsUpdateResponse>;
  }

  /**
   * List applicationGroups.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.ApplicationGroupsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: Models.ApplicationGroupsListByResourceGroupOptionalParams): Promise<Models.ApplicationGroupsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.ApplicationGroupList>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: Models.ApplicationGroupsListByResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationGroupList>): void;
  listByResourceGroup(resourceGroupName: string, options?: Models.ApplicationGroupsListByResourceGroupOptionalParams | msRest.ServiceCallback<Models.ApplicationGroupList>, callback?: msRest.ServiceCallback<Models.ApplicationGroupList>): Promise<Models.ApplicationGroupsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.ApplicationGroupsListByResourceGroupResponse>;
  }

  /**
   * List applicationGroups in subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.ApplicationGroupsListBySubscriptionResponse>
   */
  listBySubscription(options?: Models.ApplicationGroupsListBySubscriptionOptionalParams): Promise<Models.ApplicationGroupsListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.ApplicationGroupList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: Models.ApplicationGroupsListBySubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationGroupList>): void;
  listBySubscription(options?: Models.ApplicationGroupsListBySubscriptionOptionalParams | msRest.ServiceCallback<Models.ApplicationGroupList>, callback?: msRest.ServiceCallback<Models.ApplicationGroupList>): Promise<Models.ApplicationGroupsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.ApplicationGroupsListBySubscriptionResponse>;
  }

  /**
   * List applicationGroups.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ApplicationGroupsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: Models.ApplicationGroupsListByResourceGroupNextOptionalParams): Promise<Models.ApplicationGroupsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ApplicationGroupList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: Models.ApplicationGroupsListByResourceGroupNextOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationGroupList>): void;
  listByResourceGroupNext(nextPageLink: string, options?: Models.ApplicationGroupsListByResourceGroupNextOptionalParams | msRest.ServiceCallback<Models.ApplicationGroupList>, callback?: msRest.ServiceCallback<Models.ApplicationGroupList>): Promise<Models.ApplicationGroupsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.ApplicationGroupsListByResourceGroupNextResponse>;
  }

  /**
   * List applicationGroups in subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ApplicationGroupsListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: Models.ApplicationGroupsListBySubscriptionNextOptionalParams): Promise<Models.ApplicationGroupsListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ApplicationGroupList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: Models.ApplicationGroupsListBySubscriptionNextOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationGroupList>): void;
  listBySubscriptionNext(nextPageLink: string, options?: Models.ApplicationGroupsListBySubscriptionNextOptionalParams | msRest.ServiceCallback<Models.ApplicationGroupList>, callback?: msRest.ServiceCallback<Models.ApplicationGroupList>): Promise<Models.ApplicationGroupsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.ApplicationGroupsListBySubscriptionNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.applicationGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationGroup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.applicationGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "applicationGroup",
    mapper: {
      ...Mappers.ApplicationGroup,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationGroup
    },
    201: {
      bodyMapper: Mappers.ApplicationGroup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.applicationGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.applicationGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "applicationGroup"
    ],
    mapper: Mappers.ApplicationGroupPatch
  },
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationGroup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationGroupList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.DesktopVirtualization/applicationGroups",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationGroupList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationGroupList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationGroupList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
