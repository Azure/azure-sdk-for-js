/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/hostPoolsMappers";
import * as Parameters from "../models/parameters";
import { DesktopVirtualizationAPIClientContext } from "../desktopVirtualizationAPIClientContext";

/** Class representing a HostPools. */
export class HostPools {
  private readonly client: DesktopVirtualizationAPIClientContext;

  /**
   * Create a HostPools.
   * @param {DesktopVirtualizationAPIClientContext} client Reference to the service client.
   */
  constructor(client: DesktopVirtualizationAPIClientContext) {
    this.client = client;
  }

  /**
   * Get a host pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param [options] The optional parameters
   * @returns Promise<Models.HostPoolsGetResponse>
   */
  get(resourceGroupName: string, hostPoolName: string, options?: msRest.RequestOptionsBase): Promise<Models.HostPoolsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param callback The callback
   */
  get(resourceGroupName: string, hostPoolName: string, callback: msRest.ServiceCallback<Models.HostPool>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, hostPoolName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostPool>): void;
  get(resourceGroupName: string, hostPoolName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostPool>, callback?: msRest.ServiceCallback<Models.HostPool>): Promise<Models.HostPoolsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hostPoolName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.HostPoolsGetResponse>;
  }

  /**
   * Create or update a host pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param hostPool Object containing HostPool definitions.
   * @param [options] The optional parameters
   * @returns Promise<Models.HostPoolsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, hostPoolName: string, hostPool: Models.HostPool, options?: msRest.RequestOptionsBase): Promise<Models.HostPoolsCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param hostPool Object containing HostPool definitions.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, hostPoolName: string, hostPool: Models.HostPool, callback: msRest.ServiceCallback<Models.HostPool>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param hostPool Object containing HostPool definitions.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, hostPoolName: string, hostPool: Models.HostPool, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostPool>): void;
  createOrUpdate(resourceGroupName: string, hostPoolName: string, hostPool: Models.HostPool, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostPool>, callback?: msRest.ServiceCallback<Models.HostPool>): Promise<Models.HostPoolsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hostPoolName,
        hostPool,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.HostPoolsCreateOrUpdateResponse>;
  }

  /**
   * Remove a host pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, hostPoolName: string, options?: Models.HostPoolsDeleteMethodOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, hostPoolName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, hostPoolName: string, options: Models.HostPoolsDeleteMethodOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, hostPoolName: string, options?: Models.HostPoolsDeleteMethodOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hostPoolName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Update a host pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param [options] The optional parameters
   * @returns Promise<Models.HostPoolsUpdateResponse>
   */
  update(resourceGroupName: string, hostPoolName: string, options?: Models.HostPoolsUpdateOptionalParams): Promise<Models.HostPoolsUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param callback The callback
   */
  update(resourceGroupName: string, hostPoolName: string, callback: msRest.ServiceCallback<Models.HostPool>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, hostPoolName: string, options: Models.HostPoolsUpdateOptionalParams, callback: msRest.ServiceCallback<Models.HostPool>): void;
  update(resourceGroupName: string, hostPoolName: string, options?: Models.HostPoolsUpdateOptionalParams | msRest.ServiceCallback<Models.HostPool>, callback?: msRest.ServiceCallback<Models.HostPool>): Promise<Models.HostPoolsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hostPoolName,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.HostPoolsUpdateResponse>;
  }

  /**
   * List hostPools.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.HostPoolsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.HostPoolsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.HostPoolList>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostPoolList>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostPoolList>, callback?: msRest.ServiceCallback<Models.HostPoolList>): Promise<Models.HostPoolsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.HostPoolsListByResourceGroupResponse>;
  }

  /**
   * List hostPools in subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.HostPoolsListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.HostPoolsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.HostPoolList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostPoolList>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostPoolList>, callback?: msRest.ServiceCallback<Models.HostPoolList>): Promise<Models.HostPoolsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.HostPoolsListResponse>;
  }

  /**
   * Registration token of the host pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param [options] The optional parameters
   * @returns Promise<Models.HostPoolsRetrieveRegistrationTokenResponse>
   */
  retrieveRegistrationToken(resourceGroupName: string, hostPoolName: string, options?: msRest.RequestOptionsBase): Promise<Models.HostPoolsRetrieveRegistrationTokenResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param callback The callback
   */
  retrieveRegistrationToken(resourceGroupName: string, hostPoolName: string, callback: msRest.ServiceCallback<Models.RegistrationInfo>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param options The optional parameters
   * @param callback The callback
   */
  retrieveRegistrationToken(resourceGroupName: string, hostPoolName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RegistrationInfo>): void;
  retrieveRegistrationToken(resourceGroupName: string, hostPoolName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RegistrationInfo>, callback?: msRest.ServiceCallback<Models.RegistrationInfo>): Promise<Models.HostPoolsRetrieveRegistrationTokenResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hostPoolName,
        options
      },
      retrieveRegistrationTokenOperationSpec,
      callback) as Promise<Models.HostPoolsRetrieveRegistrationTokenResponse>;
  }

  /**
   * List hostPools.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.HostPoolsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.HostPoolsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.HostPoolList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostPoolList>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostPoolList>, callback?: msRest.ServiceCallback<Models.HostPoolList>): Promise<Models.HostPoolsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.HostPoolsListByResourceGroupNextResponse>;
  }

  /**
   * List hostPools in subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.HostPoolsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.HostPoolsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.HostPoolList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostPoolList>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostPoolList>, callback?: msRest.ServiceCallback<Models.HostPoolList>): Promise<Models.HostPoolsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.HostPoolsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.hostPoolName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HostPool
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.hostPoolName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "hostPool",
    mapper: {
      ...Mappers.HostPool,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HostPool
    },
    201: {
      bodyMapper: Mappers.HostPool
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.hostPoolName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.force
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.hostPoolName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "hostPool"
    ],
    mapper: Mappers.HostPoolPatch
  },
  responses: {
    200: {
      bodyMapper: Mappers.HostPool
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HostPoolList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.DesktopVirtualization/hostPools",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HostPoolList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const retrieveRegistrationTokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/retrieveRegistrationToken",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.hostPoolName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RegistrationInfo
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HostPoolList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HostPoolList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
