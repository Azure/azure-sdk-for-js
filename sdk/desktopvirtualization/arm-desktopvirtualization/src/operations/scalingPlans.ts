/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ScalingPlans } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DesktopVirtualizationAPIClient } from "../desktopVirtualizationAPIClient";
import {
  ScalingPlan,
  ScalingPlansListByResourceGroupNextOptionalParams,
  ScalingPlansListByResourceGroupOptionalParams,
  ScalingPlansListByResourceGroupResponse,
  ScalingPlansListBySubscriptionNextOptionalParams,
  ScalingPlansListBySubscriptionOptionalParams,
  ScalingPlansListBySubscriptionResponse,
  ScalingPlansListByHostPoolNextOptionalParams,
  ScalingPlansListByHostPoolOptionalParams,
  ScalingPlansListByHostPoolResponse,
  ScalingPlansGetOptionalParams,
  ScalingPlansGetResponse,
  ScalingPlansCreateOptionalParams,
  ScalingPlansCreateResponse,
  ScalingPlansDeleteOptionalParams,
  ScalingPlansUpdateOptionalParams,
  ScalingPlansUpdateResponse,
  ScalingPlansListByResourceGroupNextResponse,
  ScalingPlansListBySubscriptionNextResponse,
  ScalingPlansListByHostPoolNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ScalingPlans operations. */
export class ScalingPlansImpl implements ScalingPlans {
  private readonly client: DesktopVirtualizationAPIClient;

  /**
   * Initialize a new instance of the class ScalingPlans class.
   * @param client Reference to the service client
   */
  constructor(client: DesktopVirtualizationAPIClient) {
    this.client = client;
  }

  /**
   * List scaling plans.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: ScalingPlansListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<ScalingPlan> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: ScalingPlansListByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ScalingPlan[]> {
    let result: ScalingPlansListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: ScalingPlansListByResourceGroupOptionalParams
  ): AsyncIterableIterator<ScalingPlan> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List scaling plans in subscription.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: ScalingPlansListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<ScalingPlan> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: ScalingPlansListBySubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ScalingPlan[]> {
    let result: ScalingPlansListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: ScalingPlansListBySubscriptionOptionalParams
  ): AsyncIterableIterator<ScalingPlan> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List scaling plan associated with hostpool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param options The options parameters.
   */
  public listByHostPool(
    resourceGroupName: string,
    hostPoolName: string,
    options?: ScalingPlansListByHostPoolOptionalParams
  ): PagedAsyncIterableIterator<ScalingPlan> {
    const iter = this.listByHostPoolPagingAll(
      resourceGroupName,
      hostPoolName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByHostPoolPagingPage(
          resourceGroupName,
          hostPoolName,
          options,
          settings
        );
      }
    };
  }

  private async *listByHostPoolPagingPage(
    resourceGroupName: string,
    hostPoolName: string,
    options?: ScalingPlansListByHostPoolOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ScalingPlan[]> {
    let result: ScalingPlansListByHostPoolResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByHostPool(
        resourceGroupName,
        hostPoolName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByHostPoolNext(
        resourceGroupName,
        hostPoolName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByHostPoolPagingAll(
    resourceGroupName: string,
    hostPoolName: string,
    options?: ScalingPlansListByHostPoolOptionalParams
  ): AsyncIterableIterator<ScalingPlan> {
    for await (const page of this.listByHostPoolPagingPage(
      resourceGroupName,
      hostPoolName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get a scaling plan.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param scalingPlanName The name of the scaling plan.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    scalingPlanName: string,
    options?: ScalingPlansGetOptionalParams
  ): Promise<ScalingPlansGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, scalingPlanName, options },
      getOperationSpec
    );
  }

  /**
   * Create or update a scaling plan.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param scalingPlanName The name of the scaling plan.
   * @param scalingPlan Object containing scaling plan definitions.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    scalingPlanName: string,
    scalingPlan: ScalingPlan,
    options?: ScalingPlansCreateOptionalParams
  ): Promise<ScalingPlansCreateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, scalingPlanName, scalingPlan, options },
      createOperationSpec
    );
  }

  /**
   * Remove a scaling plan.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param scalingPlanName The name of the scaling plan.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    scalingPlanName: string,
    options?: ScalingPlansDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, scalingPlanName, options },
      deleteOperationSpec
    );
  }

  /**
   * Update a scaling plan.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param scalingPlanName The name of the scaling plan.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    scalingPlanName: string,
    options?: ScalingPlansUpdateOptionalParams
  ): Promise<ScalingPlansUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, scalingPlanName, options },
      updateOperationSpec
    );
  }

  /**
   * List scaling plans.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: ScalingPlansListByResourceGroupOptionalParams
  ): Promise<ScalingPlansListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * List scaling plans in subscription.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: ScalingPlansListBySubscriptionOptionalParams
  ): Promise<ScalingPlansListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * List scaling plan associated with hostpool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param options The options parameters.
   */
  private _listByHostPool(
    resourceGroupName: string,
    hostPoolName: string,
    options?: ScalingPlansListByHostPoolOptionalParams
  ): Promise<ScalingPlansListByHostPoolResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, hostPoolName, options },
      listByHostPoolOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ScalingPlansListByResourceGroupNextOptionalParams
  ): Promise<ScalingPlansListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: ScalingPlansListBySubscriptionNextOptionalParams
  ): Promise<ScalingPlansListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }

  /**
   * ListByHostPoolNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param nextLink The nextLink from the previous successful call to the ListByHostPool method.
   * @param options The options parameters.
   */
  private _listByHostPoolNext(
    resourceGroupName: string,
    hostPoolName: string,
    nextLink: string,
    options?: ScalingPlansListByHostPoolNextOptionalParams
  ): Promise<ScalingPlansListByHostPoolNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, hostPoolName, nextLink, options },
      listByHostPoolNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScalingPlan
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.scalingPlanName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ScalingPlan
    },
    201: {
      bodyMapper: Mappers.ScalingPlan
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.scalingPlan,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.scalingPlanName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.scalingPlanName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ScalingPlan
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.scalingPlan1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.scalingPlanName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScalingPlanList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.DesktopVirtualization/scalingPlans",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScalingPlanList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByHostPoolOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/scalingPlans",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScalingPlanList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.hostPoolName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScalingPlanList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScalingPlanList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByHostPoolNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScalingPlanList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.hostPoolName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
