/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/sessionHostsMappers";
import * as Parameters from "../models/parameters";
import { DesktopVirtualizationAPIClientContext } from "../desktopVirtualizationAPIClientContext";

/** Class representing a SessionHosts. */
export class SessionHosts {
  private readonly client: DesktopVirtualizationAPIClientContext;

  /**
   * Create a SessionHosts.
   * @param {DesktopVirtualizationAPIClientContext} client Reference to the service client.
   */
  constructor(client: DesktopVirtualizationAPIClientContext) {
    this.client = client;
  }

  /**
   * Get a session host.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param sessionHostName The name of the session host within the specified host pool
   * @param [options] The optional parameters
   * @returns Promise<Models.SessionHostsGetResponse>
   */
  get(resourceGroupName: string, hostPoolName: string, sessionHostName: string, options?: msRest.RequestOptionsBase): Promise<Models.SessionHostsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param sessionHostName The name of the session host within the specified host pool
   * @param callback The callback
   */
  get(resourceGroupName: string, hostPoolName: string, sessionHostName: string, callback: msRest.ServiceCallback<Models.SessionHost>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param sessionHostName The name of the session host within the specified host pool
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, hostPoolName: string, sessionHostName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SessionHost>): void;
  get(resourceGroupName: string, hostPoolName: string, sessionHostName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SessionHost>, callback?: msRest.ServiceCallback<Models.SessionHost>): Promise<Models.SessionHostsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hostPoolName,
        sessionHostName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.SessionHostsGetResponse>;
  }

  /**
   * Remove a SessionHost.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param sessionHostName The name of the session host within the specified host pool
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, hostPoolName: string, sessionHostName: string, options?: Models.SessionHostsDeleteMethodOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param sessionHostName The name of the session host within the specified host pool
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, hostPoolName: string, sessionHostName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param sessionHostName The name of the session host within the specified host pool
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, hostPoolName: string, sessionHostName: string, options: Models.SessionHostsDeleteMethodOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, hostPoolName: string, sessionHostName: string, options?: Models.SessionHostsDeleteMethodOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hostPoolName,
        sessionHostName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Update a session host.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param sessionHostName The name of the session host within the specified host pool
   * @param [options] The optional parameters
   * @returns Promise<Models.SessionHostsUpdateResponse>
   */
  update(resourceGroupName: string, hostPoolName: string, sessionHostName: string, options?: Models.SessionHostsUpdateOptionalParams): Promise<Models.SessionHostsUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param sessionHostName The name of the session host within the specified host pool
   * @param callback The callback
   */
  update(resourceGroupName: string, hostPoolName: string, sessionHostName: string, callback: msRest.ServiceCallback<Models.SessionHost>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param sessionHostName The name of the session host within the specified host pool
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, hostPoolName: string, sessionHostName: string, options: Models.SessionHostsUpdateOptionalParams, callback: msRest.ServiceCallback<Models.SessionHost>): void;
  update(resourceGroupName: string, hostPoolName: string, sessionHostName: string, options?: Models.SessionHostsUpdateOptionalParams | msRest.ServiceCallback<Models.SessionHost>, callback?: msRest.ServiceCallback<Models.SessionHost>): Promise<Models.SessionHostsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hostPoolName,
        sessionHostName,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.SessionHostsUpdateResponse>;
  }

  /**
   * List sessionHosts.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param [options] The optional parameters
   * @returns Promise<Models.SessionHostsListResponse>
   */
  list(resourceGroupName: string, hostPoolName: string, options?: msRest.RequestOptionsBase): Promise<Models.SessionHostsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param callback The callback
   */
  list(resourceGroupName: string, hostPoolName: string, callback: msRest.ServiceCallback<Models.SessionHostList>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param hostPoolName The name of the host pool within the specified resource group
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, hostPoolName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SessionHostList>): void;
  list(resourceGroupName: string, hostPoolName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SessionHostList>, callback?: msRest.ServiceCallback<Models.SessionHostList>): Promise<Models.SessionHostsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hostPoolName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.SessionHostsListResponse>;
  }

  /**
   * List sessionHosts.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SessionHostsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SessionHostsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SessionHostList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SessionHostList>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SessionHostList>, callback?: msRest.ServiceCallback<Models.SessionHostList>): Promise<Models.SessionHostsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.SessionHostsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts/{sessionHostName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.hostPoolName,
    Parameters.sessionHostName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SessionHost
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts/{sessionHostName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.hostPoolName,
    Parameters.sessionHostName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.force
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts/{sessionHostName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.hostPoolName,
    Parameters.sessionHostName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.force
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "sessionHost"
    ],
    mapper: Mappers.SessionHostPatch
  },
  responses: {
    200: {
      bodyMapper: Mappers.SessionHost
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.hostPoolName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SessionHostList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SessionHostList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
