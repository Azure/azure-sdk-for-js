/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ScalingPlanPersonalSchedules } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DesktopVirtualizationAPIClient } from "../desktopVirtualizationAPIClient";
import {
  ScalingPlanPersonalSchedule,
  ScalingPlanPersonalSchedulesListNextOptionalParams,
  ScalingPlanPersonalSchedulesListOptionalParams,
  ScalingPlanPersonalSchedulesListResponse,
  ScalingPlanPersonalSchedulesGetOptionalParams,
  ScalingPlanPersonalSchedulesGetResponse,
  ScalingPlanPersonalSchedulesCreateOptionalParams,
  ScalingPlanPersonalSchedulesCreateResponse,
  ScalingPlanPersonalSchedulesDeleteOptionalParams,
  ScalingPlanPersonalSchedulesUpdateOptionalParams,
  ScalingPlanPersonalSchedulesUpdateResponse,
  ScalingPlanPersonalSchedulesListNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ScalingPlanPersonalSchedules operations. */
export class ScalingPlanPersonalSchedulesImpl
  implements ScalingPlanPersonalSchedules
{
  private readonly client: DesktopVirtualizationAPIClient;

  /**
   * Initialize a new instance of the class ScalingPlanPersonalSchedules class.
   * @param client Reference to the service client
   */
  constructor(client: DesktopVirtualizationAPIClient) {
    this.client = client;
  }

  /**
   * List ScalingPlanPersonalSchedules.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param scalingPlanName The name of the scaling plan.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    scalingPlanName: string,
    options?: ScalingPlanPersonalSchedulesListOptionalParams,
  ): PagedAsyncIterableIterator<ScalingPlanPersonalSchedule> {
    const iter = this.listPagingAll(
      resourceGroupName,
      scalingPlanName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          scalingPlanName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    scalingPlanName: string,
    options?: ScalingPlanPersonalSchedulesListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ScalingPlanPersonalSchedule[]> {
    let result: ScalingPlanPersonalSchedulesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceGroupName, scalingPlanName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        scalingPlanName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    scalingPlanName: string,
    options?: ScalingPlanPersonalSchedulesListOptionalParams,
  ): AsyncIterableIterator<ScalingPlanPersonalSchedule> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      scalingPlanName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Get a ScalingPlanPersonalSchedule.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param scalingPlanName The name of the scaling plan.
   * @param scalingPlanScheduleName The name of the ScalingPlanSchedule
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    scalingPlanName: string,
    scalingPlanScheduleName: string,
    options?: ScalingPlanPersonalSchedulesGetOptionalParams,
  ): Promise<ScalingPlanPersonalSchedulesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, scalingPlanName, scalingPlanScheduleName, options },
      getOperationSpec,
    );
  }

  /**
   * Create or update a ScalingPlanPersonalSchedule.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param scalingPlanName The name of the scaling plan.
   * @param scalingPlanScheduleName The name of the ScalingPlanSchedule
   * @param scalingPlanSchedule Object containing ScalingPlanPersonalSchedule definitions.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    scalingPlanName: string,
    scalingPlanScheduleName: string,
    scalingPlanSchedule: ScalingPlanPersonalSchedule,
    options?: ScalingPlanPersonalSchedulesCreateOptionalParams,
  ): Promise<ScalingPlanPersonalSchedulesCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        scalingPlanName,
        scalingPlanScheduleName,
        scalingPlanSchedule,
        options,
      },
      createOperationSpec,
    );
  }

  /**
   * Remove a ScalingPlanPersonalSchedule.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param scalingPlanName The name of the scaling plan.
   * @param scalingPlanScheduleName The name of the ScalingPlanSchedule
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    scalingPlanName: string,
    scalingPlanScheduleName: string,
    options?: ScalingPlanPersonalSchedulesDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, scalingPlanName, scalingPlanScheduleName, options },
      deleteOperationSpec,
    );
  }

  /**
   * Update a ScalingPlanPersonalSchedule.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param scalingPlanName The name of the scaling plan.
   * @param scalingPlanScheduleName The name of the ScalingPlanSchedule
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    scalingPlanName: string,
    scalingPlanScheduleName: string,
    options?: ScalingPlanPersonalSchedulesUpdateOptionalParams,
  ): Promise<ScalingPlanPersonalSchedulesUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, scalingPlanName, scalingPlanScheduleName, options },
      updateOperationSpec,
    );
  }

  /**
   * List ScalingPlanPersonalSchedules.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param scalingPlanName The name of the scaling plan.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    scalingPlanName: string,
    options?: ScalingPlanPersonalSchedulesListOptionalParams,
  ): Promise<ScalingPlanPersonalSchedulesListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, scalingPlanName, options },
      listOperationSpec,
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param scalingPlanName The name of the scaling plan.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    scalingPlanName: string,
    nextLink: string,
    options?: ScalingPlanPersonalSchedulesListNextOptionalParams,
  ): Promise<ScalingPlanPersonalSchedulesListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, scalingPlanName, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}/personalSchedules/{scalingPlanScheduleName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScalingPlanPersonalSchedule,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.scalingPlanName,
    Parameters.scalingPlanScheduleName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}/personalSchedules/{scalingPlanScheduleName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ScalingPlanPersonalSchedule,
    },
    201: {
      bodyMapper: Mappers.ScalingPlanPersonalSchedule,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.scalingPlanSchedule2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.scalingPlanName,
    Parameters.scalingPlanScheduleName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}/personalSchedules/{scalingPlanScheduleName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.scalingPlanName,
    Parameters.scalingPlanScheduleName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}/personalSchedules/{scalingPlanScheduleName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ScalingPlanPersonalSchedule,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.scalingPlanSchedule3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.scalingPlanName,
    Parameters.scalingPlanScheduleName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}/personalSchedules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScalingPlanPersonalScheduleList,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.pageSize,
    Parameters.isDescending,
    Parameters.initialSkip,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.scalingPlanName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScalingPlanPersonalScheduleList,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.scalingPlanName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
