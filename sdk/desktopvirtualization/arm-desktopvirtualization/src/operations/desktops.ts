/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/desktopsMappers";
import * as Parameters from "../models/parameters";
import { DesktopVirtualizationAPIClientContext } from "../desktopVirtualizationAPIClientContext";

/** Class representing a Desktops. */
export class Desktops {
  private readonly client: DesktopVirtualizationAPIClientContext;

  /**
   * Create a Desktops.
   * @param {DesktopVirtualizationAPIClientContext} client Reference to the service client.
   */
  constructor(client: DesktopVirtualizationAPIClientContext) {
    this.client = client;
  }

  /**
   * Get a desktop.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param desktopName The name of the desktop within the specified desktop group
   * @param [options] The optional parameters
   * @returns Promise<Models.DesktopsGetResponse>
   */
  get(resourceGroupName: string, applicationGroupName: string, desktopName: string, options?: msRest.RequestOptionsBase): Promise<Models.DesktopsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param desktopName The name of the desktop within the specified desktop group
   * @param callback The callback
   */
  get(resourceGroupName: string, applicationGroupName: string, desktopName: string, callback: msRest.ServiceCallback<Models.Desktop>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param desktopName The name of the desktop within the specified desktop group
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, applicationGroupName: string, desktopName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Desktop>): void;
  get(resourceGroupName: string, applicationGroupName: string, desktopName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Desktop>, callback?: msRest.ServiceCallback<Models.Desktop>): Promise<Models.DesktopsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        applicationGroupName,
        desktopName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.DesktopsGetResponse>;
  }

  /**
   * Update a desktop.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param desktopName The name of the desktop within the specified desktop group
   * @param [options] The optional parameters
   * @returns Promise<Models.DesktopsUpdateResponse>
   */
  update(resourceGroupName: string, applicationGroupName: string, desktopName: string, options?: Models.DesktopsUpdateOptionalParams): Promise<Models.DesktopsUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param desktopName The name of the desktop within the specified desktop group
   * @param callback The callback
   */
  update(resourceGroupName: string, applicationGroupName: string, desktopName: string, callback: msRest.ServiceCallback<Models.Desktop>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param desktopName The name of the desktop within the specified desktop group
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, applicationGroupName: string, desktopName: string, options: Models.DesktopsUpdateOptionalParams, callback: msRest.ServiceCallback<Models.Desktop>): void;
  update(resourceGroupName: string, applicationGroupName: string, desktopName: string, options?: Models.DesktopsUpdateOptionalParams | msRest.ServiceCallback<Models.Desktop>, callback?: msRest.ServiceCallback<Models.Desktop>): Promise<Models.DesktopsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        applicationGroupName,
        desktopName,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.DesktopsUpdateResponse>;
  }

  /**
   * List desktops.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param [options] The optional parameters
   * @returns Promise<Models.DesktopsListResponse>
   */
  list(resourceGroupName: string, applicationGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.DesktopsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param callback The callback
   */
  list(resourceGroupName: string, applicationGroupName: string, callback: msRest.ServiceCallback<Models.DesktopList>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, applicationGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DesktopList>): void;
  list(resourceGroupName: string, applicationGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DesktopList>, callback?: msRest.ServiceCallback<Models.DesktopList>): Promise<Models.DesktopsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        applicationGroupName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.DesktopsListResponse>;
  }

  /**
   * List desktops.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DesktopsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DesktopsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DesktopList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DesktopList>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DesktopList>, callback?: msRest.ServiceCallback<Models.DesktopList>): Promise<Models.DesktopsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.DesktopsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}/desktops/{desktopName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.applicationGroupName,
    Parameters.desktopName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Desktop
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}/desktops/{desktopName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.applicationGroupName,
    Parameters.desktopName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "desktop"
    ],
    mapper: Mappers.DesktopPatch
  },
  responses: {
    200: {
      bodyMapper: Mappers.Desktop
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}/desktops",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.applicationGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DesktopList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DesktopList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
