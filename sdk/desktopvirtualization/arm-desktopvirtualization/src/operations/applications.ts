/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/applicationsMappers";
import * as Parameters from "../models/parameters";
import { DesktopVirtualizationAPIClientContext } from "../desktopVirtualizationAPIClientContext";

/** Class representing a Applications. */
export class Applications {
  private readonly client: DesktopVirtualizationAPIClientContext;

  /**
   * Create a Applications.
   * @param {DesktopVirtualizationAPIClientContext} client Reference to the service client.
   */
  constructor(client: DesktopVirtualizationAPIClientContext) {
    this.client = client;
  }

  /**
   * Get an application.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param applicationName The name of the application within the specified application group
   * @param [options] The optional parameters
   * @returns Promise<Models.ApplicationsGetResponse>
   */
  get(resourceGroupName: string, applicationGroupName: string, applicationName: string, options?: msRest.RequestOptionsBase): Promise<Models.ApplicationsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param applicationName The name of the application within the specified application group
   * @param callback The callback
   */
  get(resourceGroupName: string, applicationGroupName: string, applicationName: string, callback: msRest.ServiceCallback<Models.Application>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param applicationName The name of the application within the specified application group
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, applicationGroupName: string, applicationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Application>): void;
  get(resourceGroupName: string, applicationGroupName: string, applicationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Application>, callback?: msRest.ServiceCallback<Models.Application>): Promise<Models.ApplicationsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        applicationGroupName,
        applicationName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ApplicationsGetResponse>;
  }

  /**
   * Create or update an application.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param applicationName The name of the application within the specified application group
   * @param application Object containing Application definitions.
   * @param [options] The optional parameters
   * @returns Promise<Models.ApplicationsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, applicationGroupName: string, applicationName: string, application: Models.Application, options?: msRest.RequestOptionsBase): Promise<Models.ApplicationsCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param applicationName The name of the application within the specified application group
   * @param application Object containing Application definitions.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, applicationGroupName: string, applicationName: string, application: Models.Application, callback: msRest.ServiceCallback<Models.Application>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param applicationName The name of the application within the specified application group
   * @param application Object containing Application definitions.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, applicationGroupName: string, applicationName: string, application: Models.Application, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Application>): void;
  createOrUpdate(resourceGroupName: string, applicationGroupName: string, applicationName: string, application: Models.Application, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Application>, callback?: msRest.ServiceCallback<Models.Application>): Promise<Models.ApplicationsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        applicationGroupName,
        applicationName,
        application,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.ApplicationsCreateOrUpdateResponse>;
  }

  /**
   * Remove an application.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param applicationName The name of the application within the specified application group
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, applicationGroupName: string, applicationName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param applicationName The name of the application within the specified application group
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, applicationGroupName: string, applicationName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param applicationName The name of the application within the specified application group
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, applicationGroupName: string, applicationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, applicationGroupName: string, applicationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        applicationGroupName,
        applicationName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Update an application.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param applicationName The name of the application within the specified application group
   * @param [options] The optional parameters
   * @returns Promise<Models.ApplicationsUpdateResponse>
   */
  update(resourceGroupName: string, applicationGroupName: string, applicationName: string, options?: Models.ApplicationsUpdateOptionalParams): Promise<Models.ApplicationsUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param applicationName The name of the application within the specified application group
   * @param callback The callback
   */
  update(resourceGroupName: string, applicationGroupName: string, applicationName: string, callback: msRest.ServiceCallback<Models.Application>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param applicationName The name of the application within the specified application group
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, applicationGroupName: string, applicationName: string, options: Models.ApplicationsUpdateOptionalParams, callback: msRest.ServiceCallback<Models.Application>): void;
  update(resourceGroupName: string, applicationGroupName: string, applicationName: string, options?: Models.ApplicationsUpdateOptionalParams | msRest.ServiceCallback<Models.Application>, callback?: msRest.ServiceCallback<Models.Application>): Promise<Models.ApplicationsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        applicationGroupName,
        applicationName,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.ApplicationsUpdateResponse>;
  }

  /**
   * List applications.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param [options] The optional parameters
   * @returns Promise<Models.ApplicationsListResponse>
   */
  list(resourceGroupName: string, applicationGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.ApplicationsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param callback The callback
   */
  list(resourceGroupName: string, applicationGroupName: string, callback: msRest.ServiceCallback<Models.ApplicationList>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param applicationGroupName The name of the application group
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, applicationGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationList>): void;
  list(resourceGroupName: string, applicationGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ApplicationList>, callback?: msRest.ServiceCallback<Models.ApplicationList>): Promise<Models.ApplicationsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        applicationGroupName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.ApplicationsListResponse>;
  }

  /**
   * List applications.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ApplicationsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ApplicationsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ApplicationList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationList>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ApplicationList>, callback?: msRest.ServiceCallback<Models.ApplicationList>): Promise<Models.ApplicationsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.ApplicationsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}/applications/{applicationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.applicationGroupName,
    Parameters.applicationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Application
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}/applications/{applicationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.applicationGroupName,
    Parameters.applicationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "application",
    mapper: {
      ...Mappers.Application,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Application
    },
    201: {
      bodyMapper: Mappers.Application
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}/applications/{applicationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.applicationGroupName,
    Parameters.applicationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}/applications/{applicationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.applicationGroupName,
    Parameters.applicationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "application"
    ],
    mapper: Mappers.ApplicationPatch
  },
  responses: {
    200: {
      bodyMapper: Mappers.Application
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}/applications",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.applicationGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
