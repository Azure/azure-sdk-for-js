/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/channelsMappers";
import * as Parameters from "../models/parameters";
import { AzureBotServiceContext } from "../azureBotServiceContext";

/** Class representing a Channels. */
export class Channels {
  private readonly client: AzureBotServiceContext;

  /**
   * Create a Channels.
   * @param {AzureBotServiceContext} client Reference to the service client.
   */
  constructor(client: AzureBotServiceContext) {
    this.client = client;
  }

  /**
   * Creates a Channel registration for a Bot Service
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param resourceName The name of the Bot resource.
   * @param channelName The name of the Channel resource. Possible values include: 'AlexaChannel',
   * 'FacebookChannel', 'EmailChannel', 'KikChannel', 'TelegramChannel', 'SlackChannel',
   * 'MsTeamsChannel', 'SkypeChannel', 'WebChatChannel', 'DirectLineChannel', 'SmsChannel',
   * 'LineChannel', 'DirectLineSpeechChannel'
   * @param parameters The parameters to provide for the created bot.
   * @param [options] The optional parameters
   * @returns Promise<Models.ChannelsCreateResponse>
   */
  create(resourceGroupName: string, resourceName: string, channelName: Models.ChannelName, parameters: Models.BotChannel, options?: msRest.RequestOptionsBase): Promise<Models.ChannelsCreateResponse>;
  /**
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param resourceName The name of the Bot resource.
   * @param channelName The name of the Channel resource. Possible values include: 'AlexaChannel',
   * 'FacebookChannel', 'EmailChannel', 'KikChannel', 'TelegramChannel', 'SlackChannel',
   * 'MsTeamsChannel', 'SkypeChannel', 'WebChatChannel', 'DirectLineChannel', 'SmsChannel',
   * 'LineChannel', 'DirectLineSpeechChannel'
   * @param parameters The parameters to provide for the created bot.
   * @param callback The callback
   */
  create(resourceGroupName: string, resourceName: string, channelName: Models.ChannelName, parameters: Models.BotChannel, callback: msRest.ServiceCallback<Models.BotChannel>): void;
  /**
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param resourceName The name of the Bot resource.
   * @param channelName The name of the Channel resource. Possible values include: 'AlexaChannel',
   * 'FacebookChannel', 'EmailChannel', 'KikChannel', 'TelegramChannel', 'SlackChannel',
   * 'MsTeamsChannel', 'SkypeChannel', 'WebChatChannel', 'DirectLineChannel', 'SmsChannel',
   * 'LineChannel', 'DirectLineSpeechChannel'
   * @param parameters The parameters to provide for the created bot.
   * @param options The optional parameters
   * @param callback The callback
   */
  create(resourceGroupName: string, resourceName: string, channelName: Models.ChannelName, parameters: Models.BotChannel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BotChannel>): void;
  create(resourceGroupName: string, resourceName: string, channelName: Models.ChannelName, parameters: Models.BotChannel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BotChannel>, callback?: msRest.ServiceCallback<Models.BotChannel>): Promise<Models.ChannelsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        channelName,
        parameters,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.ChannelsCreateResponse>;
  }

  /**
   * Updates a Channel registration for a Bot Service
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param resourceName The name of the Bot resource.
   * @param channelName The name of the Channel resource. Possible values include: 'AlexaChannel',
   * 'FacebookChannel', 'EmailChannel', 'KikChannel', 'TelegramChannel', 'SlackChannel',
   * 'MsTeamsChannel', 'SkypeChannel', 'WebChatChannel', 'DirectLineChannel', 'SmsChannel',
   * 'LineChannel', 'DirectLineSpeechChannel'
   * @param [options] The optional parameters
   * @returns Promise<Models.ChannelsUpdateResponse>
   */
  update(resourceGroupName: string, resourceName: string, channelName: Models.ChannelName, options?: Models.ChannelsUpdateOptionalParams): Promise<Models.ChannelsUpdateResponse>;
  /**
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param resourceName The name of the Bot resource.
   * @param channelName The name of the Channel resource. Possible values include: 'AlexaChannel',
   * 'FacebookChannel', 'EmailChannel', 'KikChannel', 'TelegramChannel', 'SlackChannel',
   * 'MsTeamsChannel', 'SkypeChannel', 'WebChatChannel', 'DirectLineChannel', 'SmsChannel',
   * 'LineChannel', 'DirectLineSpeechChannel'
   * @param callback The callback
   */
  update(resourceGroupName: string, resourceName: string, channelName: Models.ChannelName, callback: msRest.ServiceCallback<Models.BotChannel>): void;
  /**
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param resourceName The name of the Bot resource.
   * @param channelName The name of the Channel resource. Possible values include: 'AlexaChannel',
   * 'FacebookChannel', 'EmailChannel', 'KikChannel', 'TelegramChannel', 'SlackChannel',
   * 'MsTeamsChannel', 'SkypeChannel', 'WebChatChannel', 'DirectLineChannel', 'SmsChannel',
   * 'LineChannel', 'DirectLineSpeechChannel'
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, resourceName: string, channelName: Models.ChannelName, options: Models.ChannelsUpdateOptionalParams, callback: msRest.ServiceCallback<Models.BotChannel>): void;
  update(resourceGroupName: string, resourceName: string, channelName: Models.ChannelName, options?: Models.ChannelsUpdateOptionalParams | msRest.ServiceCallback<Models.BotChannel>, callback?: msRest.ServiceCallback<Models.BotChannel>): Promise<Models.ChannelsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        channelName,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.ChannelsUpdateResponse>;
  }

  /**
   * Deletes a Channel registration from a Bot Service
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param resourceName The name of the Bot resource.
   * @param channelName The name of the Bot resource.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, resourceName: string, channelName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param resourceName The name of the Bot resource.
   * @param channelName The name of the Bot resource.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, resourceName: string, channelName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param resourceName The name of the Bot resource.
   * @param channelName The name of the Bot resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, resourceName: string, channelName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, resourceName: string, channelName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        channelName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Returns a BotService Channel registration specified by the parameters.
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param resourceName The name of the Bot resource.
   * @param channelName The name of the Bot resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.ChannelsGetResponse>
   */
  get(resourceGroupName: string, resourceName: string, channelName: string, options?: msRest.RequestOptionsBase): Promise<Models.ChannelsGetResponse>;
  /**
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param resourceName The name of the Bot resource.
   * @param channelName The name of the Bot resource.
   * @param callback The callback
   */
  get(resourceGroupName: string, resourceName: string, channelName: string, callback: msRest.ServiceCallback<Models.BotChannel>): void;
  /**
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param resourceName The name of the Bot resource.
   * @param channelName The name of the Bot resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, resourceName: string, channelName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BotChannel>): void;
  get(resourceGroupName: string, resourceName: string, channelName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BotChannel>, callback?: msRest.ServiceCallback<Models.BotChannel>): Promise<Models.ChannelsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        channelName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ChannelsGetResponse>;
  }

  /**
   * Lists a Channel registration for a Bot Service including secrets
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param resourceName The name of the Bot resource.
   * @param channelName The name of the Channel resource. Possible values include: 'AlexaChannel',
   * 'FacebookChannel', 'EmailChannel', 'KikChannel', 'TelegramChannel', 'SlackChannel',
   * 'MsTeamsChannel', 'SkypeChannel', 'WebChatChannel', 'DirectLineChannel', 'SmsChannel',
   * 'LineChannel', 'DirectLineSpeechChannel'
   * @param [options] The optional parameters
   * @returns Promise<Models.ChannelsListWithKeysResponse>
   */
  listWithKeys(resourceGroupName: string, resourceName: string, channelName: Models.ChannelName, options?: msRest.RequestOptionsBase): Promise<Models.ChannelsListWithKeysResponse>;
  /**
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param resourceName The name of the Bot resource.
   * @param channelName The name of the Channel resource. Possible values include: 'AlexaChannel',
   * 'FacebookChannel', 'EmailChannel', 'KikChannel', 'TelegramChannel', 'SlackChannel',
   * 'MsTeamsChannel', 'SkypeChannel', 'WebChatChannel', 'DirectLineChannel', 'SmsChannel',
   * 'LineChannel', 'DirectLineSpeechChannel'
   * @param callback The callback
   */
  listWithKeys(resourceGroupName: string, resourceName: string, channelName: Models.ChannelName, callback: msRest.ServiceCallback<Models.BotChannel>): void;
  /**
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param resourceName The name of the Bot resource.
   * @param channelName The name of the Channel resource. Possible values include: 'AlexaChannel',
   * 'FacebookChannel', 'EmailChannel', 'KikChannel', 'TelegramChannel', 'SlackChannel',
   * 'MsTeamsChannel', 'SkypeChannel', 'WebChatChannel', 'DirectLineChannel', 'SmsChannel',
   * 'LineChannel', 'DirectLineSpeechChannel'
   * @param options The optional parameters
   * @param callback The callback
   */
  listWithKeys(resourceGroupName: string, resourceName: string, channelName: Models.ChannelName, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BotChannel>): void;
  listWithKeys(resourceGroupName: string, resourceName: string, channelName: Models.ChannelName, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BotChannel>, callback?: msRest.ServiceCallback<Models.BotChannel>): Promise<Models.ChannelsListWithKeysResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        channelName,
        options
      },
      listWithKeysOperationSpec,
      callback) as Promise<Models.ChannelsListWithKeysResponse>;
  }

  /**
   * Returns all the Channel registrations of a particular BotService resource
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param resourceName The name of the Bot resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.ChannelsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase): Promise<Models.ChannelsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param resourceName The name of the Bot resource.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, resourceName: string, callback: msRest.ServiceCallback<Models.ChannelResponseList>): void;
  /**
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param resourceName The name of the Bot resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, resourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ChannelResponseList>): void;
  listByResourceGroup(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ChannelResponseList>, callback?: msRest.ServiceCallback<Models.ChannelResponseList>): Promise<Models.ChannelsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.ChannelsListByResourceGroupResponse>;
  }

  /**
   * Returns all the Channel registrations of a particular BotService resource
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ChannelsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ChannelsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ChannelResponseList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ChannelResponseList>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ChannelResponseList>, callback?: msRest.ServiceCallback<Models.ChannelResponseList>): Promise<Models.ChannelsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.ChannelsListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.channelName0,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.BotChannel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.BotChannel
    },
    201: {
      bodyMapper: Mappers.BotChannel
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.channelName0,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      location: [
        "options",
        "location"
      ],
      tags: [
        "options",
        "tags"
      ],
      sku: [
        "options",
        "sku"
      ],
      kind: [
        "options",
        "kind"
      ],
      etag: [
        "options",
        "etag"
      ],
      properties: [
        "options",
        "properties"
      ]
    },
    mapper: {
      ...Mappers.BotChannel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.BotChannel
    },
    201: {
      bodyMapper: Mappers.BotChannel
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.channelName1,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.channelName1,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BotChannel
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listWithKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}/listChannelWithKeys",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.channelName0,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BotChannel
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ChannelResponseList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ChannelResponseList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
