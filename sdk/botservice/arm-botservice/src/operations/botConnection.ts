/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { BotConnection } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureBotService } from "../azureBotService";
import {
  ConnectionSetting,
  BotConnectionListByBotServiceNextOptionalParams,
  BotConnectionListByBotServiceOptionalParams,
  BotConnectionListByBotServiceResponse,
  BotConnectionListServiceProvidersOptionalParams,
  BotConnectionListServiceProvidersResponse,
  BotConnectionListWithSecretsOptionalParams,
  BotConnectionListWithSecretsResponse,
  BotConnectionCreateOptionalParams,
  BotConnectionCreateResponse,
  BotConnectionUpdateOptionalParams,
  BotConnectionUpdateResponse,
  BotConnectionGetOptionalParams,
  BotConnectionGetResponse,
  BotConnectionDeleteOptionalParams,
  BotConnectionListByBotServiceNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing BotConnection operations. */
export class BotConnectionImpl implements BotConnection {
  private readonly client: AzureBotService;

  /**
   * Initialize a new instance of the class BotConnection class.
   * @param client Reference to the service client
   */
  constructor(client: AzureBotService) {
    this.client = client;
  }

  /**
   * Returns all the Connection Settings registered to a particular BotService resource
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param resourceName The name of the Bot resource.
   * @param options The options parameters.
   */
  public listByBotService(
    resourceGroupName: string,
    resourceName: string,
    options?: BotConnectionListByBotServiceOptionalParams
  ): PagedAsyncIterableIterator<ConnectionSetting> {
    const iter = this.listByBotServicePagingAll(
      resourceGroupName,
      resourceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByBotServicePagingPage(
          resourceGroupName,
          resourceName,
          options,
          settings
        );
      }
    };
  }

  private async *listByBotServicePagingPage(
    resourceGroupName: string,
    resourceName: string,
    options?: BotConnectionListByBotServiceOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ConnectionSetting[]> {
    let result: BotConnectionListByBotServiceResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByBotService(
        resourceGroupName,
        resourceName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByBotServiceNext(
        resourceGroupName,
        resourceName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByBotServicePagingAll(
    resourceGroupName: string,
    resourceName: string,
    options?: BotConnectionListByBotServiceOptionalParams
  ): AsyncIterableIterator<ConnectionSetting> {
    for await (const page of this.listByBotServicePagingPage(
      resourceGroupName,
      resourceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the available Service Providers for creating Connection Settings
   * @param options The options parameters.
   */
  listServiceProviders(
    options?: BotConnectionListServiceProvidersOptionalParams
  ): Promise<BotConnectionListServiceProvidersResponse> {
    return this.client.sendOperationRequest(
      { options },
      listServiceProvidersOperationSpec
    );
  }

  /**
   * Get a Connection Setting registration for a Bot Service
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param resourceName The name of the Bot resource.
   * @param connectionName The name of the Bot Service Connection Setting resource.
   * @param options The options parameters.
   */
  listWithSecrets(
    resourceGroupName: string,
    resourceName: string,
    connectionName: string,
    options?: BotConnectionListWithSecretsOptionalParams
  ): Promise<BotConnectionListWithSecretsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, connectionName, options },
      listWithSecretsOperationSpec
    );
  }

  /**
   * Register a new Auth Connection for a Bot Service
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param resourceName The name of the Bot resource.
   * @param connectionName The name of the Bot Service Connection Setting resource.
   * @param parameters The parameters to provide for creating the Connection Setting.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    resourceName: string,
    connectionName: string,
    parameters: ConnectionSetting,
    options?: BotConnectionCreateOptionalParams
  ): Promise<BotConnectionCreateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, connectionName, parameters, options },
      createOperationSpec
    );
  }

  /**
   * Updates a Connection Setting registration for a Bot Service
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param resourceName The name of the Bot resource.
   * @param connectionName The name of the Bot Service Connection Setting resource.
   * @param parameters The parameters to provide for updating the Connection Setting.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    resourceName: string,
    connectionName: string,
    parameters: ConnectionSetting,
    options?: BotConnectionUpdateOptionalParams
  ): Promise<BotConnectionUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, connectionName, parameters, options },
      updateOperationSpec
    );
  }

  /**
   * Get a Connection Setting registration for a Bot Service
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param resourceName The name of the Bot resource.
   * @param connectionName The name of the Bot Service Connection Setting resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    resourceName: string,
    connectionName: string,
    options?: BotConnectionGetOptionalParams
  ): Promise<BotConnectionGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, connectionName, options },
      getOperationSpec
    );
  }

  /**
   * Deletes a Connection Setting registration for a Bot Service
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param resourceName The name of the Bot resource.
   * @param connectionName The name of the Bot Service Connection Setting resource.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    resourceName: string,
    connectionName: string,
    options?: BotConnectionDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, connectionName, options },
      deleteOperationSpec
    );
  }

  /**
   * Returns all the Connection Settings registered to a particular BotService resource
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param resourceName The name of the Bot resource.
   * @param options The options parameters.
   */
  private _listByBotService(
    resourceGroupName: string,
    resourceName: string,
    options?: BotConnectionListByBotServiceOptionalParams
  ): Promise<BotConnectionListByBotServiceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      listByBotServiceOperationSpec
    );
  }

  /**
   * ListByBotServiceNext
   * @param resourceGroupName The name of the Bot resource group in the user subscription.
   * @param resourceName The name of the Bot resource.
   * @param nextLink The nextLink from the previous successful call to the ListByBotService method.
   * @param options The options parameters.
   */
  private _listByBotServiceNext(
    resourceGroupName: string,
    resourceName: string,
    nextLink: string,
    options?: BotConnectionListByBotServiceNextOptionalParams
  ): Promise<BotConnectionListByBotServiceNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, nextLink, options },
      listByBotServiceNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listServiceProvidersOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.BotService/listAuthServiceProviders",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ServiceProviderResponseList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listWithSecretsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/connections/{connectionName}/listWithSecrets",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionSetting
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.subscriptionId,
    Parameters.connectionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/connections/{connectionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionSetting
    },
    201: {
      bodyMapper: Mappers.ConnectionSetting
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.parameters6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.subscriptionId,
    Parameters.connectionName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/connections/{connectionName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionSetting
    },
    201: {
      bodyMapper: Mappers.ConnectionSetting
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.parameters6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.subscriptionId,
    Parameters.connectionName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/connections/{connectionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionSetting
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.subscriptionId,
    Parameters.connectionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/connections/{connectionName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.subscriptionId,
    Parameters.connectionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByBotServiceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/connections",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionSettingResponseList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByBotServiceNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionSettingResponseList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
