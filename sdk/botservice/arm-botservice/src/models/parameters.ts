/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  Bot as BotMapper,
  CheckNameAvailabilityRequestBody as CheckNameAvailabilityRequestBodyMapper,
  BotChannel as BotChannelMapper,
  SiteInfo as SiteInfoMapper,
  ConnectionSetting as ConnectionSettingMapper,
  QnAMakerEndpointKeysRequestBody as QnAMakerEndpointKeysRequestBodyMapper,
  PrivateEndpointConnection as PrivateEndpointConnectionMapper
} from "../models/mappers";

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const parameters: OperationParameter = {
  parameterPath: "parameters",
  mapper: BotMapper
};

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
      MaxLength: 64,
      MinLength: 2
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceName: OperationURLParameter = {
  parameterPath: "resourceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
      MaxLength: 64,
      MinLength: 2
    },
    serializedName: "resourceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2022-09-15",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const location: OperationParameter = {
  parameterPath: ["options", "location"],
  mapper: BotMapper
};

export const tags: OperationParameter = {
  parameterPath: ["options", "tags"],
  mapper: BotMapper
};

export const sku: OperationParameter = {
  parameterPath: ["options", "sku"],
  mapper: BotMapper
};

export const kind: OperationParameter = {
  parameterPath: ["options", "kind"],
  mapper: BotMapper
};

export const etag: OperationParameter = {
  parameterPath: ["options", "etag"],
  mapper: BotMapper
};

export const properties: OperationParameter = {
  parameterPath: ["options", "properties"],
  mapper: BotMapper
};

export const parameters2: OperationParameter = {
  parameterPath: "parameters",
  mapper: CheckNameAvailabilityRequestBodyMapper
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters3: OperationParameter = {
  parameterPath: "parameters",
  mapper: BotChannelMapper
};

export const channelName: OperationURLParameter = {
  parameterPath: "channelName",
  mapper: {
    serializedName: "channelName",
    required: true,
    type: {
      name: "Enum",
      allowedValues: [
        "AlexaChannel",
        "FacebookChannel",
        "EmailChannel",
        "KikChannel",
        "TelegramChannel",
        "SlackChannel",
        "MsTeamsChannel",
        "SkypeChannel",
        "WebChatChannel",
        "DirectLineChannel",
        "SmsChannel",
        "LineChannel",
        "DirectLineSpeechChannel",
        "OutlookChannel",
        "Omnichannel",
        "TelephonyChannel",
        "AcsChatChannel",
        "SearchAssistant",
        "M365Extensions"
      ]
    }
  }
};

export const location1: OperationParameter = {
  parameterPath: ["options", "location"],
  mapper: BotChannelMapper
};

export const tags1: OperationParameter = {
  parameterPath: ["options", "tags"],
  mapper: BotChannelMapper
};

export const sku1: OperationParameter = {
  parameterPath: ["options", "sku"],
  mapper: BotChannelMapper
};

export const kind1: OperationParameter = {
  parameterPath: ["options", "kind"],
  mapper: BotChannelMapper
};

export const etag1: OperationParameter = {
  parameterPath: ["options", "etag"],
  mapper: BotChannelMapper
};

export const properties1: OperationParameter = {
  parameterPath: ["options", "properties"],
  mapper: BotChannelMapper
};

export const channelName1: OperationURLParameter = {
  parameterPath: "channelName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9_.-]*$"),
      MaxLength: 64,
      MinLength: 2
    },
    serializedName: "channelName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters5: OperationParameter = {
  parameterPath: "parameters",
  mapper: SiteInfoMapper
};

export const channelName2: OperationURLParameter = {
  parameterPath: "channelName",
  mapper: {
    serializedName: "channelName",
    required: true,
    type: {
      name: "Enum",
      allowedValues: ["WebChatChannel", "DirectLineChannel"]
    }
  }
};

export const connectionName: OperationURLParameter = {
  parameterPath: "connectionName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][\\sa-zA-Z0-9_.-]*$"),
      MaxLength: 64,
      MinLength: 2
    },
    serializedName: "connectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters6: OperationParameter = {
  parameterPath: "parameters",
  mapper: ConnectionSettingMapper
};

export const parameters7: OperationParameter = {
  parameterPath: "parameters",
  mapper: QnAMakerEndpointKeysRequestBodyMapper
};

export const operationResultId: OperationURLParameter = {
  parameterPath: "operationResultId",
  mapper: {
    serializedName: "operationResultId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const privateEndpointConnectionName: OperationURLParameter = {
  parameterPath: "privateEndpointConnectionName",
  mapper: {
    serializedName: "privateEndpointConnectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const properties2: OperationParameter = {
  parameterPath: "properties",
  mapper: PrivateEndpointConnectionMapper
};
