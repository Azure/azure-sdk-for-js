/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const BotProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BotProperties",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      iconUrl: {
        defaultValue: "",
        serializedName: "iconUrl",
        type: {
          name: "String"
        }
      },
      endpoint: {
        serializedName: "endpoint",
        required: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      endpointVersion: {
        serializedName: "endpointVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      allSettings: {
        serializedName: "allSettings",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      manifestUrl: {
        serializedName: "manifestUrl",
        type: {
          name: "String"
        }
      },
      msaAppType: {
        serializedName: "msaAppType",
        type: {
          name: "String"
        }
      },
      msaAppId: {
        serializedName: "msaAppId",
        required: true,
        type: {
          name: "String"
        }
      },
      msaAppTenantId: {
        serializedName: "msaAppTenantId",
        type: {
          name: "String"
        }
      },
      msaAppMSIResourceId: {
        serializedName: "msaAppMSIResourceId",
        type: {
          name: "String"
        }
      },
      configuredChannels: {
        serializedName: "configuredChannels",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      enabledChannels: {
        serializedName: "enabledChannels",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      developerAppInsightKey: {
        serializedName: "developerAppInsightKey",
        type: {
          name: "String"
        }
      },
      developerAppInsightsApiKey: {
        serializedName: "developerAppInsightsApiKey",
        type: {
          name: "String"
        }
      },
      developerAppInsightsApplicationId: {
        serializedName: "developerAppInsightsApplicationId",
        type: {
          name: "String"
        }
      },
      luisAppIds: {
        serializedName: "luisAppIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      luisKey: {
        serializedName: "luisKey",
        type: {
          name: "String"
        }
      },
      isCmekEnabled: {
        defaultValue: false,
        serializedName: "isCmekEnabled",
        type: {
          name: "Boolean"
        }
      },
      cmekKeyVaultUrl: {
        serializedName: "cmekKeyVaultUrl",
        type: {
          name: "String"
        }
      },
      cmekEncryptionStatus: {
        serializedName: "cmekEncryptionStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      publicNetworkAccess: {
        defaultValue: "Enabled",
        serializedName: "publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      isStreamingSupported: {
        defaultValue: false,
        serializedName: "isStreamingSupported",
        type: {
          name: "Boolean"
        }
      },
      isDeveloperAppInsightsApiKeySet: {
        serializedName: "isDeveloperAppInsightsApiKeySet",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      migrationToken: {
        serializedName: "migrationToken",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      disableLocalAuth: {
        serializedName: "disableLocalAuth",
        type: {
          name: "Boolean"
        }
      },
      schemaTransformationVersion: {
        serializedName: "schemaTransformationVersion",
        nullable: true,
        type: {
          name: "String"
        }
      },
      storageResourceId: {
        serializedName: "storageResourceId",
        type: {
          name: "String"
        }
      },
      privateEndpointConnections: {
        serializedName: "privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      openWithHint: {
        serializedName: "openWithHint",
        type: {
          name: "String"
        }
      },
      appPasswordHint: {
        serializedName: "appPasswordHint",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publishingCredentials: {
        serializedName: "publishingCredentials",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResourceBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceBase",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      kind: {
        serializedName: "kind",
        nullable: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      zones: {
        serializedName: "zones",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorBody"
        }
      }
    }
  }
};

export const ErrorBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BotResponseList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BotResponseList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Bot"
            }
          }
        }
      }
    }
  }
};

export const Channel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Channel",
    uberParent: "Channel",
    polymorphicDiscriminator: {
      serializedName: "channelName",
      clientName: "channelName"
    },
    modelProperties: {
      channelName: {
        serializedName: "channelName",
        required: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        nullable: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        defaultValue: "global",
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ChannelSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ChannelSettings",
    modelProperties: {
      extensionKey1: {
        defaultValue: "",
        serializedName: "extensionKey1",
        type: {
          name: "String"
        }
      },
      extensionKey2: {
        defaultValue: "",
        serializedName: "extensionKey2",
        type: {
          name: "String"
        }
      },
      sites: {
        serializedName: "sites",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Site"
            }
          }
        }
      },
      channelId: {
        serializedName: "channelId",
        type: {
          name: "String"
        }
      },
      channelDisplayName: {
        serializedName: "channelDisplayName",
        type: {
          name: "String"
        }
      },
      botId: {
        serializedName: "botId",
        type: {
          name: "String"
        }
      },
      botIconUrl: {
        serializedName: "botIconUrl",
        type: {
          name: "String"
        }
      },
      isEnabled: {
        serializedName: "isEnabled",
        type: {
          name: "Boolean"
        }
      },
      disableLocalAuth: {
        serializedName: "disableLocalAuth",
        type: {
          name: "Boolean"
        }
      },
      requireTermsAgreement: {
        serializedName: "requireTermsAgreement",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Site: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Site",
    modelProperties: {
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      siteId: {
        serializedName: "siteId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      siteName: {
        serializedName: "siteName",
        required: true,
        type: {
          name: "String"
        }
      },
      key: {
        serializedName: "key",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      key2: {
        serializedName: "key2",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isEnabled: {
        serializedName: "isEnabled",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      isTokenEnabled: {
        serializedName: "isTokenEnabled",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      isEndpointParametersEnabled: {
        serializedName: "isEndpointParametersEnabled",
        type: {
          name: "Boolean"
        }
      },
      isDetailedLoggingEnabled: {
        serializedName: "isDetailedLoggingEnabled",
        type: {
          name: "Boolean"
        }
      },
      isBlockUserUploadEnabled: {
        serializedName: "isBlockUserUploadEnabled",
        nullable: true,
        type: {
          name: "Boolean"
        }
      },
      isNoStorageEnabled: {
        serializedName: "isNoStorageEnabled",
        type: {
          name: "Boolean"
        }
      },
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      },
      appId: {
        serializedName: "appId",
        type: {
          name: "String"
        }
      },
      isV1Enabled: {
        serializedName: "isV1Enabled",
        type: {
          name: "Boolean"
        }
      },
      isV3Enabled: {
        serializedName: "isV3Enabled",
        type: {
          name: "Boolean"
        }
      },
      isSecureSiteEnabled: {
        serializedName: "isSecureSiteEnabled",
        type: {
          name: "Boolean"
        }
      },
      trustedOrigins: {
        serializedName: "trustedOrigins",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      isWebChatSpeechEnabled: {
        defaultValue: false,
        serializedName: "isWebChatSpeechEnabled",
        type: {
          name: "Boolean"
        }
      },
      isWebchatPreviewEnabled: {
        defaultValue: false,
        serializedName: "isWebchatPreviewEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ChannelResponseList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ChannelResponseList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BotChannel"
            }
          }
        }
      }
    }
  }
};

export const SiteInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SiteInfo",
    modelProperties: {
      siteName: {
        serializedName: "siteName",
        required: true,
        type: {
          name: "String"
        }
      },
      key: {
        serializedName: "key",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["key1", "key2"]
        }
      }
    }
  }
};

export const CreateEmailSignInUrlResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateEmailSignInUrlResponse",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CreateEmailSignInUrlResponseProperties"
        }
      }
    }
  }
};

export const CreateEmailSignInUrlResponseProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateEmailSignInUrlResponseProperties",
    modelProperties: {
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityRequestBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityRequestBody",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityResponseBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResponseBody",
    modelProperties: {
      valid: {
        serializedName: "valid",
        type: {
          name: "Boolean"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      absCode: {
        serializedName: "absCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationEntityListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationEntityListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationEntity"
            }
          }
        }
      }
    }
  }
};

export const OperationEntity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationEntity",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplayInfo"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const OperationDisplayInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplayInfo",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceProviderResponseList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceProviderResponseList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceProvider"
            }
          }
        }
      }
    }
  }
};

export const ServiceProvider: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceProvider",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ServiceProviderProperties"
        }
      }
    }
  }
};

export const ServiceProviderProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceProviderProperties",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceProviderName: {
        serializedName: "serviceProviderName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      devPortalUrl: {
        serializedName: "devPortalUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      iconUrl: {
        defaultValue: "",
        serializedName: "iconUrl",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceProviderParameter"
            }
          }
        }
      }
    }
  }
};

export const ServiceProviderParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceProviderParameter",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      helpUrl: {
        serializedName: "helpUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      default: {
        serializedName: "default",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Composite",
          className: "ServiceProviderParameterMetadata"
        }
      }
    }
  }
};

export const ServiceProviderParameterMetadata: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceProviderParameterMetadata",
    modelProperties: {
      constraints: {
        serializedName: "constraints",
        type: {
          name: "Composite",
          className: "ServiceProviderParameterMetadataConstraints"
        }
      }
    }
  }
};

export const ServiceProviderParameterMetadataConstraints: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceProviderParameterMetadataConstraints",
    modelProperties: {
      required: {
        serializedName: "required",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const QnAMakerEndpointKeysRequestBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QnAMakerEndpointKeysRequestBody",
    modelProperties: {
      hostname: {
        serializedName: "hostname",
        type: {
          name: "String"
        }
      },
      authkey: {
        serializedName: "authkey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QnAMakerEndpointKeysResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QnAMakerEndpointKeysResponse",
    modelProperties: {
      primaryEndpointKey: {
        serializedName: "primaryEndpointKey",
        type: {
          name: "String"
        }
      },
      secondaryEndpointKey: {
        serializedName: "secondaryEndpointKey",
        type: {
          name: "String"
        }
      },
      installedVersion: {
        serializedName: "installedVersion",
        type: {
          name: "String"
        }
      },
      lastStableVersion: {
        serializedName: "lastStableVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionSettingProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionSettingProperties",
    modelProperties: {
      clientId: {
        serializedName: "clientId",
        type: {
          name: "String"
        }
      },
      settingId: {
        serializedName: "settingId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clientSecret: {
        serializedName: "clientSecret",
        type: {
          name: "String"
        }
      },
      scopes: {
        defaultValue: "",
        serializedName: "scopes",
        type: {
          name: "String"
        }
      },
      serviceProviderId: {
        serializedName: "serviceProviderId",
        type: {
          name: "String"
        }
      },
      serviceProviderDisplayName: {
        serializedName: "serviceProviderDisplayName",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionSettingParameter"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionSettingParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionSettingParameter",
    modelProperties: {
      key: {
        serializedName: "key",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionSettingResponseList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionSettingResponseList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionSetting"
            }
          }
        }
      }
    }
  }
};

export const HostSettingsResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HostSettingsResponse",
    modelProperties: {
      oAuthUrl: {
        serializedName: "OAuthUrl",
        type: {
          name: "String"
        }
      },
      toBotFromChannelOpenIdMetadataUrl: {
        serializedName: "ToBotFromChannelOpenIdMetadataUrl",
        type: {
          name: "String"
        }
      },
      toBotFromChannelTokenIssuer: {
        serializedName: "ToBotFromChannelTokenIssuer",
        type: {
          name: "String"
        }
      },
      toBotFromEmulatorOpenIdMetadataUrl: {
        serializedName: "ToBotFromEmulatorOpenIdMetadataUrl",
        type: {
          name: "String"
        }
      },
      toChannelFromBotLoginUrl: {
        serializedName: "ToChannelFromBotLoginUrl",
        type: {
          name: "String"
        }
      },
      toChannelFromBotOAuthScope: {
        serializedName: "ToChannelFromBotOAuthScope",
        type: {
          name: "String"
        }
      },
      validateAuthority: {
        serializedName: "ValidateAuthority",
        type: {
          name: "Boolean"
        }
      },
      botOpenIdMetadata: {
        serializedName: "BotOpenIdMetadata",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationResultsDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationResultsDescription",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      }
    }
  }
};

export const PrivateLinkResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      }
    }
  }
};

export const AlexaChannelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AlexaChannelProperties",
    modelProperties: {
      alexaSkillId: {
        serializedName: "alexaSkillId",
        required: true,
        type: {
          name: "String"
        }
      },
      urlFragment: {
        serializedName: "urlFragment",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceEndpointUri: {
        serializedName: "serviceEndpointUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isEnabled: {
        serializedName: "isEnabled",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const FacebookChannelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FacebookChannelProperties",
    modelProperties: {
      verifyToken: {
        serializedName: "verifyToken",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      pages: {
        serializedName: "pages",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FacebookPage"
            }
          }
        }
      },
      appId: {
        serializedName: "appId",
        required: true,
        type: {
          name: "String"
        }
      },
      appSecret: {
        serializedName: "appSecret",
        type: {
          name: "String"
        }
      },
      callbackUrl: {
        serializedName: "callbackUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isEnabled: {
        serializedName: "isEnabled",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const FacebookPage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FacebookPage",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      accessToken: {
        serializedName: "accessToken",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EmailChannelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EmailChannelProperties",
    modelProperties: {
      emailAddress: {
        serializedName: "emailAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      authMethod: {
        serializedName: "authMethod",
        type: {
          name: "Enum",
          allowedValues: [0, 1]
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      magicCode: {
        serializedName: "magicCode",
        type: {
          name: "String"
        }
      },
      isEnabled: {
        serializedName: "isEnabled",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const MsTeamsChannelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MsTeamsChannelProperties",
    modelProperties: {
      enableCalling: {
        defaultValue: false,
        serializedName: "enableCalling",
        type: {
          name: "Boolean"
        }
      },
      callingWebhook: {
        serializedName: "callingWebhook",
        type: {
          name: "String"
        }
      },
      isEnabled: {
        serializedName: "isEnabled",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      incomingCallRoute: {
        serializedName: "incomingCallRoute",
        type: {
          name: "String"
        }
      },
      deploymentEnvironment: {
        defaultValue: "FallbackDeploymentEnvironment",
        serializedName: "deploymentEnvironment",
        type: {
          name: "String"
        }
      },
      acceptedTerms: {
        serializedName: "acceptedTerms",
        nullable: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SkypeChannelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkypeChannelProperties",
    modelProperties: {
      enableMessaging: {
        serializedName: "enableMessaging",
        type: {
          name: "Boolean"
        }
      },
      enableMediaCards: {
        serializedName: "enableMediaCards",
        type: {
          name: "Boolean"
        }
      },
      enableVideo: {
        serializedName: "enableVideo",
        type: {
          name: "Boolean"
        }
      },
      enableCalling: {
        defaultValue: false,
        serializedName: "enableCalling",
        type: {
          name: "Boolean"
        }
      },
      enableScreenSharing: {
        serializedName: "enableScreenSharing",
        type: {
          name: "Boolean"
        }
      },
      enableGroups: {
        serializedName: "enableGroups",
        type: {
          name: "Boolean"
        }
      },
      groupsMode: {
        serializedName: "groupsMode",
        type: {
          name: "String"
        }
      },
      callingWebHook: {
        serializedName: "callingWebHook",
        type: {
          name: "String"
        }
      },
      incomingCallRoute: {
        serializedName: "incomingCallRoute",
        type: {
          name: "String"
        }
      },
      isEnabled: {
        serializedName: "isEnabled",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const KikChannelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KikChannelProperties",
    modelProperties: {
      userName: {
        serializedName: "userName",
        required: true,
        type: {
          name: "String"
        }
      },
      apiKey: {
        serializedName: "apiKey",
        type: {
          name: "String"
        }
      },
      isValidated: {
        serializedName: "isValidated",
        type: {
          name: "Boolean"
        }
      },
      isEnabled: {
        serializedName: "isEnabled",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const WebChatChannelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WebChatChannelProperties",
    modelProperties: {
      webChatEmbedCode: {
        serializedName: "webChatEmbedCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sites: {
        serializedName: "sites",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WebChatSite"
            }
          }
        }
      }
    }
  }
};

export const DirectLineChannelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DirectLineChannelProperties",
    modelProperties: {
      sites: {
        serializedName: "sites",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DirectLineSite"
            }
          }
        }
      },
      extensionKey1: {
        defaultValue: "",
        serializedName: "extensionKey1",
        type: {
          name: "String"
        }
      },
      extensionKey2: {
        defaultValue: "",
        serializedName: "extensionKey2",
        type: {
          name: "String"
        }
      },
      directLineEmbedCode: {
        serializedName: "DirectLineEmbedCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TelegramChannelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TelegramChannelProperties",
    modelProperties: {
      accessToken: {
        serializedName: "accessToken",
        type: {
          name: "String"
        }
      },
      isValidated: {
        serializedName: "isValidated",
        type: {
          name: "Boolean"
        }
      },
      isEnabled: {
        serializedName: "isEnabled",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SmsChannelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SmsChannelProperties",
    modelProperties: {
      phone: {
        serializedName: "phone",
        required: true,
        type: {
          name: "String"
        }
      },
      accountSID: {
        serializedName: "accountSID",
        required: true,
        type: {
          name: "String"
        }
      },
      authToken: {
        serializedName: "authToken",
        type: {
          name: "String"
        }
      },
      isValidated: {
        serializedName: "isValidated",
        type: {
          name: "Boolean"
        }
      },
      isEnabled: {
        serializedName: "isEnabled",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SlackChannelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SlackChannelProperties",
    modelProperties: {
      clientId: {
        serializedName: "clientId",
        type: {
          name: "String"
        }
      },
      clientSecret: {
        serializedName: "clientSecret",
        type: {
          name: "String"
        }
      },
      verificationToken: {
        serializedName: "verificationToken",
        type: {
          name: "String"
        }
      },
      scopes: {
        serializedName: "scopes",
        type: {
          name: "String"
        }
      },
      landingPageUrl: {
        serializedName: "landingPageUrl",
        type: {
          name: "String"
        }
      },
      redirectAction: {
        serializedName: "redirectAction",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastSubmissionId: {
        serializedName: "lastSubmissionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      registerBeforeOAuthFlow: {
        serializedName: "registerBeforeOAuthFlow",
        type: {
          name: "Boolean"
        }
      },
      isValidated: {
        serializedName: "IsValidated",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      signingSecret: {
        serializedName: "signingSecret",
        type: {
          name: "String"
        }
      },
      isEnabled: {
        serializedName: "isEnabled",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const LineChannelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LineChannelProperties",
    modelProperties: {
      lineRegistrations: {
        serializedName: "lineRegistrations",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LineRegistration"
            }
          }
        }
      },
      callbackUrl: {
        serializedName: "callbackUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isValidated: {
        serializedName: "isValidated",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const LineRegistration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LineRegistration",
    modelProperties: {
      generatedId: {
        serializedName: "generatedId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      channelSecret: {
        serializedName: "channelSecret",
        type: {
          name: "String"
        }
      },
      channelAccessToken: {
        serializedName: "channelAccessToken",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DirectLineSpeechChannelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DirectLineSpeechChannelProperties",
    modelProperties: {
      cognitiveServiceResourceId: {
        serializedName: "cognitiveServiceResourceId",
        type: {
          name: "String"
        }
      },
      cognitiveServiceRegion: {
        serializedName: "cognitiveServiceRegion",
        nullable: true,
        type: {
          name: "String"
        }
      },
      cognitiveServiceSubscriptionKey: {
        serializedName: "cognitiveServiceSubscriptionKey",
        nullable: true,
        type: {
          name: "String"
        }
      },
      isEnabled: {
        serializedName: "isEnabled",
        type: {
          name: "Boolean"
        }
      },
      customVoiceDeploymentId: {
        serializedName: "customVoiceDeploymentId",
        type: {
          name: "String"
        }
      },
      customSpeechModelId: {
        serializedName: "customSpeechModelId",
        type: {
          name: "String"
        }
      },
      isDefaultBotForCogSvcAccount: {
        serializedName: "isDefaultBotForCogSvcAccount",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const TelephonyChannelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TelephonyChannelProperties",
    modelProperties: {
      phoneNumbers: {
        serializedName: "phoneNumbers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TelephonyPhoneNumbers"
            }
          }
        }
      },
      apiConfigurations: {
        serializedName: "apiConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TelephonyChannelResourceApiConfiguration"
            }
          }
        }
      },
      cognitiveServiceSubscriptionKey: {
        serializedName: "cognitiveServiceSubscriptionKey",
        nullable: true,
        type: {
          name: "String"
        }
      },
      cognitiveServiceRegion: {
        serializedName: "cognitiveServiceRegion",
        nullable: true,
        type: {
          name: "String"
        }
      },
      defaultLocale: {
        serializedName: "defaultLocale",
        nullable: true,
        type: {
          name: "String"
        }
      },
      premiumSKU: {
        serializedName: "premiumSKU",
        nullable: true,
        type: {
          name: "String"
        }
      },
      isEnabled: {
        serializedName: "isEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const TelephonyPhoneNumbers: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TelephonyPhoneNumbers",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      phoneNumber: {
        serializedName: "phoneNumber",
        type: {
          name: "String"
        }
      },
      acsEndpoint: {
        serializedName: "acsEndpoint",
        nullable: true,
        type: {
          name: "String"
        }
      },
      acsSecret: {
        serializedName: "acsSecret",
        nullable: true,
        type: {
          name: "String"
        }
      },
      acsResourceId: {
        serializedName: "acsResourceId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      cognitiveServiceSubscriptionKey: {
        serializedName: "cognitiveServiceSubscriptionKey",
        nullable: true,
        type: {
          name: "String"
        }
      },
      cognitiveServiceRegion: {
        serializedName: "cognitiveServiceRegion",
        nullable: true,
        type: {
          name: "String"
        }
      },
      cognitiveServiceResourceId: {
        serializedName: "cognitiveServiceResourceId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      defaultLocale: {
        serializedName: "defaultLocale",
        nullable: true,
        type: {
          name: "String"
        }
      },
      offerType: {
        serializedName: "offerType",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TelephonyChannelResourceApiConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TelephonyChannelResourceApiConfiguration",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      providerName: {
        serializedName: "providerName",
        nullable: true,
        type: {
          name: "String"
        }
      },
      cognitiveServiceSubscriptionKey: {
        serializedName: "cognitiveServiceSubscriptionKey",
        nullable: true,
        type: {
          name: "String"
        }
      },
      cognitiveServiceRegion: {
        serializedName: "cognitiveServiceRegion",
        nullable: true,
        type: {
          name: "String"
        }
      },
      cognitiveServiceResourceId: {
        serializedName: "cognitiveServiceResourceId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      defaultLocale: {
        serializedName: "defaultLocale",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionItemName: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionItemName",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...PrivateLinkResourceBase.type.modelProperties,
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      groupIds: {
        serializedName: "properties.groupIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const PrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...PrivateLinkResourceBase.type.modelProperties,
      groupId: {
        serializedName: "properties.groupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        serializedName: "properties.requiredMembers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      requiredZoneNames: {
        serializedName: "properties.requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Bot: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Bot",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "BotProperties"
        }
      }
    }
  }
};

export const BotChannel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BotChannel",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "Channel"
        }
      }
    }
  }
};

export const ConnectionSetting: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionSetting",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ConnectionSettingProperties"
        }
      }
    }
  }
};

export const AlexaChannel: coreClient.CompositeMapper = {
  serializedName: "AlexaChannel",
  type: {
    name: "Composite",
    className: "AlexaChannel",
    uberParent: "Channel",
    polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Channel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AlexaChannelProperties"
        }
      }
    }
  }
};

export const FacebookChannel: coreClient.CompositeMapper = {
  serializedName: "FacebookChannel",
  type: {
    name: "Composite",
    className: "FacebookChannel",
    uberParent: "Channel",
    polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Channel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "FacebookChannelProperties"
        }
      }
    }
  }
};

export const EmailChannel: coreClient.CompositeMapper = {
  serializedName: "EmailChannel",
  type: {
    name: "Composite",
    className: "EmailChannel",
    uberParent: "Channel",
    polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Channel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "EmailChannelProperties"
        }
      }
    }
  }
};

export const OutlookChannel: coreClient.CompositeMapper = {
  serializedName: "OutlookChannel",
  type: {
    name: "Composite",
    className: "OutlookChannel",
    uberParent: "Channel",
    polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Channel.type.modelProperties
    }
  }
};

export const MsTeamsChannel: coreClient.CompositeMapper = {
  serializedName: "MsTeamsChannel",
  type: {
    name: "Composite",
    className: "MsTeamsChannel",
    uberParent: "Channel",
    polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Channel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MsTeamsChannelProperties"
        }
      }
    }
  }
};

export const SkypeChannel: coreClient.CompositeMapper = {
  serializedName: "SkypeChannel",
  type: {
    name: "Composite",
    className: "SkypeChannel",
    uberParent: "Channel",
    polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Channel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SkypeChannelProperties"
        }
      }
    }
  }
};

export const KikChannel: coreClient.CompositeMapper = {
  serializedName: "KikChannel",
  type: {
    name: "Composite",
    className: "KikChannel",
    uberParent: "Channel",
    polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Channel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "KikChannelProperties"
        }
      }
    }
  }
};

export const WebChatChannel: coreClient.CompositeMapper = {
  serializedName: "WebChatChannel",
  type: {
    name: "Composite",
    className: "WebChatChannel",
    uberParent: "Channel",
    polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Channel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "WebChatChannelProperties"
        }
      }
    }
  }
};

export const DirectLineChannel: coreClient.CompositeMapper = {
  serializedName: "DirectLineChannel",
  type: {
    name: "Composite",
    className: "DirectLineChannel",
    uberParent: "Channel",
    polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Channel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DirectLineChannelProperties"
        }
      }
    }
  }
};

export const TelegramChannel: coreClient.CompositeMapper = {
  serializedName: "TelegramChannel",
  type: {
    name: "Composite",
    className: "TelegramChannel",
    uberParent: "Channel",
    polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Channel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "TelegramChannelProperties"
        }
      }
    }
  }
};

export const SmsChannel: coreClient.CompositeMapper = {
  serializedName: "SmsChannel",
  type: {
    name: "Composite",
    className: "SmsChannel",
    uberParent: "Channel",
    polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Channel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SmsChannelProperties"
        }
      }
    }
  }
};

export const SlackChannel: coreClient.CompositeMapper = {
  serializedName: "SlackChannel",
  type: {
    name: "Composite",
    className: "SlackChannel",
    uberParent: "Channel",
    polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Channel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SlackChannelProperties"
        }
      }
    }
  }
};

export const LineChannel: coreClient.CompositeMapper = {
  serializedName: "LineChannel",
  type: {
    name: "Composite",
    className: "LineChannel",
    uberParent: "Channel",
    polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Channel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "LineChannelProperties"
        }
      }
    }
  }
};

export const DirectLineSpeechChannel: coreClient.CompositeMapper = {
  serializedName: "DirectLineSpeechChannel",
  type: {
    name: "Composite",
    className: "DirectLineSpeechChannel",
    uberParent: "Channel",
    polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Channel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DirectLineSpeechChannelProperties"
        }
      }
    }
  }
};

export const Omnichannel: coreClient.CompositeMapper = {
  serializedName: "Omnichannel",
  type: {
    name: "Composite",
    className: "Omnichannel",
    uberParent: "Channel",
    polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Channel.type.modelProperties
    }
  }
};

export const TelephonyChannel: coreClient.CompositeMapper = {
  serializedName: "TelephonyChannel",
  type: {
    name: "Composite",
    className: "TelephonyChannel",
    uberParent: "Channel",
    polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Channel.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "TelephonyChannelProperties"
        }
      }
    }
  }
};

export const AcsChatChannel: coreClient.CompositeMapper = {
  serializedName: "AcsChatChannel",
  type: {
    name: "Composite",
    className: "AcsChatChannel",
    uberParent: "Channel",
    polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Channel.type.modelProperties
    }
  }
};

export const SearchAssistant: coreClient.CompositeMapper = {
  serializedName: "SearchAssistant",
  type: {
    name: "Composite",
    className: "SearchAssistant",
    uberParent: "Channel",
    polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Channel.type.modelProperties
    }
  }
};

export const M365Extensions: coreClient.CompositeMapper = {
  serializedName: "M365Extensions",
  type: {
    name: "Composite",
    className: "M365Extensions",
    uberParent: "Channel",
    polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
    modelProperties: {
      ...Channel.type.modelProperties
    }
  }
};

export const WebChatSite: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WebChatSite",
    modelProperties: {
      ...Site.type.modelProperties
    }
  }
};

export const DirectLineSite: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DirectLineSite",
    modelProperties: {
      ...Site.type.modelProperties
    }
  }
};

export const ListChannelWithKeysResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListChannelWithKeysResponse",
    modelProperties: {
      ...BotChannel.type.modelProperties,
      resource: {
        serializedName: "resource",
        type: {
          name: "Composite",
          className: "Channel"
        }
      },
      setting: {
        serializedName: "setting",
        type: {
          name: "Composite",
          className: "ChannelSettings"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      },
      entityTag: {
        serializedName: "entityTag",
        type: {
          name: "String"
        }
      },
      changedTime: {
        serializedName: "changedTime",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  Channel: Channel,
  "Channel.AlexaChannel": AlexaChannel,
  "Channel.FacebookChannel": FacebookChannel,
  "Channel.EmailChannel": EmailChannel,
  "Channel.OutlookChannel": OutlookChannel,
  "Channel.MsTeamsChannel": MsTeamsChannel,
  "Channel.SkypeChannel": SkypeChannel,
  "Channel.KikChannel": KikChannel,
  "Channel.WebChatChannel": WebChatChannel,
  "Channel.DirectLineChannel": DirectLineChannel,
  "Channel.TelegramChannel": TelegramChannel,
  "Channel.SmsChannel": SmsChannel,
  "Channel.SlackChannel": SlackChannel,
  "Channel.LineChannel": LineChannel,
  "Channel.DirectLineSpeechChannel": DirectLineSpeechChannel,
  "Channel.Omnichannel": Omnichannel,
  "Channel.TelephonyChannel": TelephonyChannel,
  "Channel.AcsChatChannel": AcsChatChannel,
  "Channel.SearchAssistant": SearchAssistant,
  "Channel.M365Extensions": M365Extensions
};
