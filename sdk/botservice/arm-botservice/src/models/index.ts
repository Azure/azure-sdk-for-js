/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type ChannelUnion =
  | Channel
  | AlexaChannel
  | FacebookChannel
  | EmailChannel
  | MsTeamsChannel
  | SkypeChannel
  | KikChannel
  | WebChatChannel
  | DirectLineChannel
  | TelegramChannel
  | SmsChannel
  | SlackChannel
  | LineChannel
  | DirectLineSpeechChannel;

/** The parameters to provide for the Bot. */
export interface BotProperties {
  /** The Name of the bot */
  displayName: string;
  /** The description of the bot */
  description?: string;
  /** The Icon Url of the bot */
  iconUrl?: string;
  /** The bot's endpoint */
  endpoint: string;
  /**
   * The bot's endpoint version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endpointVersion?: string;
  /** Contains resource all settings defined as key/value pairs. */
  allSettings?: { [propertyName: string]: string };
  /** Contains resource parameters defined as key/value pairs. */
  parameters?: { [propertyName: string]: string };
  /** The bot's manifest url */
  manifestUrl?: string;
  /** Microsoft App Type for the bot */
  msaAppType?: MsaAppType;
  /** Microsoft App Id for the bot */
  msaAppId: string;
  /** Microsoft App Tenant Id for the bot */
  msaAppTenantId?: string;
  /** Microsoft App Managed Identity Resource Id for the bot */
  msaAppMSIResourceId?: string;
  /**
   * Collection of channels for which the bot is configured
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configuredChannels?: string[];
  /**
   * Collection of channels for which the bot is enabled
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly enabledChannels?: string[];
  /** The Application Insights key */
  developerAppInsightKey?: string;
  /** The Application Insights Api Key */
  developerAppInsightsApiKey?: string;
  /** The Application Insights App Id */
  developerAppInsightsApplicationId?: string;
  /** Collection of LUIS App Ids */
  luisAppIds?: string[];
  /** The LUIS Key */
  luisKey?: string;
  /** Whether Cmek is enabled */
  isCmekEnabled?: boolean;
  /** The CMK Url */
  cmekKeyVaultUrl?: string;
  /**
   * The CMK encryption status
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cmekEncryptionStatus?: string;
  /** Whether the bot is in an isolated network */
  publicNetworkAccess?: PublicNetworkAccess;
  /** Whether the bot is streaming supported */
  isStreamingSupported?: boolean;
  /**
   * Whether the bot is developerAppInsightsApiKey set
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDeveloperAppInsightsApiKeySet?: boolean;
  /**
   * Token used to migrate non Azure bot to azure subscription
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly migrationToken?: string;
  /** Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication. */
  disableLocalAuth?: boolean;
  /** The channel schema transformation version for the bot */
  schemaTransformationVersion?: string;
  /** The storage resourceId for the bot */
  storageResourceId?: string;
  /**
   * List of Private Endpoint Connections configured for the bot
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateEndpointConnections?: PrivateEndpointConnection[];
  /** The hint to browser (e.g. protocol handler) on how to open the bot for authoring */
  openWithHint?: string;
  /** The hint (e.g. keyVault secret resourceId) on how to fetch the app secret */
  appPasswordHint?: string;
  /**
   * Provisioning state of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** Publishing credentials of the resource */
  publishingCredentials?: string;
}

/** The Private Endpoint resource. */
export interface PrivateEndpoint {
  /**
   * The ARM identifier for Private Endpoint
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** A collection of information about the state of the connection between service consumer and provider. */
export interface PrivateLinkServiceConnectionState {
  /** Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. */
  status?: PrivateEndpointServiceConnectionStatus;
  /** The reason for approval/rejection of the connection. */
  description?: string;
  /** A message indicating if changes on the service provider require any updates on the consumer. */
  actionsRequired?: string;
}

/** Common fields that are returned in the response for all BotService Private Link Resources */
export interface PrivateLinkResourceBase {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** Azure resource */
export interface Resource {
  /**
   * Specifies the resource ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Specifies the name of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /** Specifies the location of the resource. */
  location?: string;
  /**
   * Specifies the type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Contains resource tags defined as key/value pairs. */
  tags?: { [propertyName: string]: string };
  /** Gets or sets the SKU of the resource. */
  sku?: Sku;
  /** Required. Gets or sets the Kind of the resource. */
  kind?: Kind;
  /** Entity Tag */
  etag?: string;
  /**
   * Entity zones
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly zones?: string[];
}

/** The SKU of the cognitive services account. */
export interface Sku {
  /** The sku name */
  name: SkuName;
  /**
   * Gets the sku tier. This is based on the SKU name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tier?: SkuTier;
}

/** Bot Service error object. */
export interface ErrorModel {
  /** The error body. */
  error?: ErrorBody;
}

/** Bot Service error body. */
export interface ErrorBody {
  /** error code */
  code: string;
  /** error message */
  message: string;
}

/** The list of  bot service operation response. */
export interface BotResponseList {
  /** The link used to get the next page of bot service resources. */
  nextLink?: string;
  /**
   * Gets the list of bot service results and their properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Bot[];
}

/** Channel definition */
export interface Channel {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  channelName:
    | "AlexaChannel"
    | "FacebookChannel"
    | "EmailChannel"
    | "MsTeamsChannel"
    | "SkypeChannel"
    | "KikChannel"
    | "WebChatChannel"
    | "DirectLineChannel"
    | "TelegramChannel"
    | "SmsChannel"
    | "SlackChannel"
    | "LineChannel"
    | "DirectLineSpeechChannel";
  /** Entity Tag of the resource */
  etag?: string;
  /**
   * Provisioning state of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** Specifies the location of the resource. */
  location?: string;
}

/** Channel settings definition */
export interface ChannelSettings {
  /** The extensionKey1 */
  extensionKey1?: string;
  /** The extensionKey2 */
  extensionKey2?: string;
  /** The list of sites */
  sites?: Site[];
  /** The channel id */
  channelId?: string;
  /** The channel display name */
  channelDisplayName?: string;
  /** The bot id */
  botId?: string;
  /** The bot icon url */
  botIconUrl?: string;
  /** Whether this channel is enabled for the bot */
  isEnabled?: boolean;
  /** Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication. */
  disableLocalAuth?: boolean;
}

/** A site for the Webchat channel */
export interface WebChatSite {
  /**
   * Site Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly siteId?: string;
  /** Site name */
  siteName: string;
  /**
   * Primary key. Value only returned through POST to the action Channel List API, otherwise empty.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly key?: string;
  /**
   * Secondary key. Value only returned through POST to the action Channel List API, otherwise empty.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly key2?: string;
  /** Whether this site is enabled for DirectLine channel */
  isEnabled: boolean;
  /** Whether this site is enabled for preview versions of Webchat */
  isWebchatPreviewEnabled: boolean;
}

/** A site for the Direct Line channel */
export interface DirectLineSite {
  /**
   * Site Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly siteId?: string;
  /** Site name */
  siteName: string;
  /**
   * Primary key. Value only returned through POST to the action Channel List API, otherwise empty.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly key?: string;
  /**
   * Secondary key. Value only returned through POST to the action Channel List API, otherwise empty.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly key2?: string;
  /** Whether this site is enabled for DirectLine channel. */
  isEnabled: boolean;
  /** Whether this site is enabled for Bot Framework V1 protocol. */
  isV1Enabled: boolean;
  /** Whether this site is enabled for Bot Framework V1 protocol. */
  isV3Enabled: boolean;
  /** Whether this site is enabled for authentication with Bot Framework. */
  isSecureSiteEnabled?: boolean;
  /** Whether this site is enabled for block user upload. */
  isBlockUserUploadEnabled?: boolean;
  /** List of Trusted Origin URLs for this site. This field is applicable only if isSecureSiteEnabled is True. */
  trustedOrigins?: string[];
}

/** The list of bot service channel operation response. */
export interface ChannelResponseList {
  /** The link used to get the next page of bot service channel resources. */
  nextLink?: string;
  /**
   * Gets the list of bot service channel results and their properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: BotChannel[];
}

/** Site information for WebChat or DirectLine Channels to identify which site to regenerate keys for. */
export interface SiteInfo {
  /** The site name */
  siteName: string;
  /** Determines which key is to be regenerated */
  key: Key;
}

/** The request body for a request to Bot Service Management to check availability of a bot name. */
export interface CheckNameAvailabilityRequestBody {
  /** the name of the bot for which availability needs to be checked. */
  name?: string;
  /** the type of the bot for which availability needs to be checked */
  type?: string;
}

/** The response body returned for a request to Bot Service Management to check availability of a bot name. */
export interface CheckNameAvailabilityResponseBody {
  /** indicates if the bot name is valid. */
  valid?: boolean;
  /** additional message from the bot management api showing why a bot name is not available */
  message?: string;
}

/** The list of bot service operation response. */
export interface OperationEntityListResult {
  /** The link used to get the next page of operations. */
  nextLink?: string;
  /** The list of operations. */
  value?: OperationEntity[];
}

/** The operations supported by Bot Service Management. */
export interface OperationEntity {
  /** Operation name: {provider}/{resource}/{operation}. */
  name?: string;
  /** The operation supported by Bot Service Management. */
  display?: OperationDisplayInfo;
  /** The origin of the operation. */
  origin?: string;
  /** Additional properties. */
  properties?: Record<string, unknown>;
}

/** The operation supported by Bot Service Management. */
export interface OperationDisplayInfo {
  /** The description of the operation. */
  description?: string;
  /** The action that users can perform, based on their permission level. */
  operation?: string;
  /** Service provider: Microsoft Bot Service. */
  provider?: string;
  /** Resource on which the operation is performed. */
  resource?: string;
}

/** The list of bot service providers response. */
export interface ServiceProviderResponseList {
  /** The link used to get the next page of bot service providers. */
  nextLink?: string;
  /**
   * Gets the list of bot service providers and their properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: ServiceProvider[];
}

/** Service Provider Definition */
export interface ServiceProvider {
  /** The Properties of a Service Provider Object */
  properties?: ServiceProviderProperties;
}

/** The Object used to describe a Service Provider supported by Bot Service */
export interface ServiceProviderProperties {
  /**
   * Id for Service Provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Display Name of the Service Provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly displayName?: string;
  /**
   * Display Name of the Service Provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serviceProviderName?: string;
  /**
   * Display Name of the Service Provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly devPortalUrl?: string;
  /**
   * Display Name of the Service Provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly iconUrl?: string;
  /** The list of parameters for the Service Provider */
  parameters?: ServiceProviderParameter[];
}

/** Extra Parameters specific to each Service Provider */
export interface ServiceProviderParameter {
  /**
   * Name of the Service Provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Type of the Service Provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Display Name of the Service Provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly displayName?: string;
  /**
   * Description of the Service Provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
  /**
   * Help Url for the  Service Provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly helpUrl?: string;
  /**
   * Default Name for the Service Provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly default?: string;
  /**
   * Meta data for the Service Provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly metadata?: ServiceProviderParameterMetadata;
}

/** Meta data for the Service Provider */
export interface ServiceProviderParameterMetadata {
  /** the constraints of the bot meta data. */
  constraints?: ServiceProviderParameterMetadataConstraints;
}

/** the constraints of the bot meta data. */
export interface ServiceProviderParameterMetadataConstraints {
  /** Whether required the constraints of the bot meta data. */
  required?: boolean;
}

/** Properties for a Connection Setting Item */
export interface ConnectionSettingProperties {
  /** Id associated with the Connection Setting. */
  id?: string;
  /** Name associated with the Connection Setting. */
  name?: string;
  /** Client Id associated with the Connection Setting. */
  clientId?: string;
  /**
   * Setting Id set by the service for the Connection Setting.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly settingId?: string;
  /** Client Secret associated with the Connection Setting */
  clientSecret?: string;
  /** Scopes associated with the Connection Setting */
  scopes?: string;
  /** Service Provider Id associated with the Connection Setting */
  serviceProviderId?: string;
  /** Service Provider Display Name associated with the Connection Setting */
  serviceProviderDisplayName?: string;
  /** Service Provider Parameters associated with the Connection Setting */
  parameters?: ConnectionSettingParameter[];
  /** Provisioning state of the resource */
  provisioningState?: string;
}

/** Extra Parameter in a Connection Setting Properties to indicate service provider specific properties */
export interface ConnectionSettingParameter {
  /** Key for the Connection Setting Parameter. */
  key?: string;
  /** Value associated with the Connection Setting Parameter. */
  value?: string;
}

/** The list of bot service connection settings response. */
export interface ConnectionSettingResponseList {
  /** The link used to get the next page of bot service connection setting resources. */
  nextLink?: string;
  /**
   * Gets the list of bot service connection settings and their properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: ConnectionSetting[];
}

/** The response body returned for a request to Bot Service Management to check per subscription hostSettings */
export interface HostSettingsResponse {
  /** For in-conversation bot user authentication */
  oAuthUrl?: string;
  /** For verifying incoming tokens from the channels */
  toBotFromChannelOpenIdMetadataUrl?: string;
  /** For verifying incoming tokens from the channels */
  toBotFromChannelTokenIssuer?: string;
  /** For verifying incoming tokens from bot emulator */
  toBotFromEmulatorOpenIdMetadataUrl?: string;
  /** For getting access token to channels from bot host */
  toChannelFromBotLoginUrl?: string;
  /** For getting access token to channels from bot host */
  toChannelFromBotOAuthScope?: string;
  /** Per cloud OAuth setting on whether authority is validated */
  validateAuthority?: boolean;
  /** Same as toBotFromChannelOpenIdMetadataUrl, used by SDK < v4.12 */
  botOpenIdMetadata?: string;
}

/** The properties indicating the operation result of an operation on a service. */
export interface OperationResultsDescription {
  /**
   * The ID of the operation returned.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the operation result.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The status of the operation being performed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: OperationResultStatus;
  /**
   * The time that the operation was started.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startTime?: Date;
}

/** List of private endpoint connection associated with the specified storage account */
export interface PrivateEndpointConnectionListResult {
  /** Array of private endpoint connections */
  value?: PrivateEndpointConnection[];
}

/** A list of private link resources */
export interface PrivateLinkResourceListResult {
  /** Array of private link resources */
  value?: PrivateLinkResource[];
}

/** The parameters to provide for the Alexa channel. */
export interface AlexaChannelProperties {
  /** The Alexa skill Id */
  alexaSkillId: string;
  /**
   * Url fragment used in part of the Uri configured in Alexa
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly urlFragment?: string;
  /**
   * Full Uri used to configured the skill in Alexa
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serviceEndpointUri?: string;
  /** Whether this channel is enabled for the bot */
  isEnabled: boolean;
}

/** The parameters to provide for the Facebook channel. */
export interface FacebookChannelProperties {
  /**
   * Verify token. Value only returned through POST to the action Channel List API, otherwise empty.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly verifyToken?: string;
  /** The list of Facebook pages */
  pages?: FacebookPage[];
  /** Facebook application id */
  appId: string;
  /** Facebook application secret. Value only returned through POST to the action Channel List API, otherwise empty. */
  appSecret?: string;
  /**
   * Callback Url
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly callbackUrl?: string;
  /** Whether this channel is enabled for the bot */
  isEnabled: boolean;
}

/** A Facebook page for Facebook channel registration */
export interface FacebookPage {
  /** Page id */
  id: string;
  /** Facebook application access token. Value only returned through POST to the action Channel List API, otherwise empty. */
  accessToken?: string;
}

/** The parameters to provide for the Email channel. */
export interface EmailChannelProperties {
  /** The email address */
  emailAddress: string;
  /** The password for the email address. Value only returned through POST to the action Channel List API, otherwise empty. */
  password?: string;
  /** Whether this channel is enabled for the bot */
  isEnabled: boolean;
}

/** The parameters to provide for the Microsoft Teams channel. */
export interface MsTeamsChannelProperties {
  /** Enable calling for Microsoft Teams channel */
  enableCalling?: boolean;
  /** Webhook for Microsoft Teams channel calls */
  callingWebHook?: string;
  /** Whether this channel is enabled for the bot */
  isEnabled: boolean;
  /** Webhook for Microsoft Teams channel calls */
  incomingCallRoute?: string;
  /** Deployment environment for Microsoft Teams channel calls */
  deploymentEnvironment?: string;
  /** Whether this channel accepted terms */
  acceptedTerms?: boolean;
}

/** The parameters to provide for the Microsoft Teams channel. */
export interface SkypeChannelProperties {
  /** Enable messaging for Skype channel */
  enableMessaging?: boolean;
  /** Enable media cards for Skype channel */
  enableMediaCards?: boolean;
  /** Enable video for Skype channel */
  enableVideo?: boolean;
  /** Enable calling for Skype channel */
  enableCalling?: boolean;
  /** Enable screen sharing for Skype channel */
  enableScreenSharing?: boolean;
  /** Enable groups for Skype channel */
  enableGroups?: boolean;
  /** Group mode for Skype channel */
  groupsMode?: string;
  /** Calling web hook for Skype channel */
  callingWebHook?: string;
  /** Incoming call route for Skype channel */
  incomingCallRoute?: string;
  /** Whether this channel is enabled for the bot */
  isEnabled: boolean;
}

/** The parameters to provide for the Kik channel. */
export interface KikChannelProperties {
  /** The Kik user name */
  userName: string;
  /** Kik API key. Value only returned through POST to the action Channel List API, otherwise empty. */
  apiKey?: string;
  /** Whether this channel is validated for the bot */
  isValidated?: boolean;
  /** Whether this channel is enabled for the bot */
  isEnabled: boolean;
}

/** The parameters to provide for the Web Chat channel. */
export interface WebChatChannelProperties {
  /**
   * Web chat control embed code
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly webChatEmbedCode?: string;
  /** The list of Web Chat sites */
  sites?: WebChatSite[];
}

/** The parameters to provide for the Direct Line channel. */
export interface DirectLineChannelProperties {
  /** The list of Direct Line sites */
  sites?: DirectLineSite[];
  /** Direct Line embed code of the resource */
  directLineEmbedCode?: string;
}

/** The parameters to provide for the Telegram channel. */
export interface TelegramChannelProperties {
  /** The Telegram access token. Value only returned through POST to the action Channel List API, otherwise empty. */
  accessToken?: string;
  /** Whether this channel is validated for the bot */
  isValidated?: boolean;
  /** Whether this channel is enabled for the bot */
  isEnabled: boolean;
}

/** The parameters to provide for the Sms channel. */
export interface SmsChannelProperties {
  /** The Sms phone */
  phone: string;
  /** The Sms account SID. Value only returned through POST to the action Channel List API, otherwise empty. */
  accountSID: string;
  /** The Sms auth token. Value only returned through POST to the action Channel List API, otherwise empty. */
  authToken?: string;
  /** Whether this channel is validated for the bot */
  isValidated?: boolean;
  /** Whether this channel is enabled for the bot */
  isEnabled: boolean;
}

/** The parameters to provide for the Slack channel. */
export interface SlackChannelProperties {
  /** The Slack client id */
  clientId?: string;
  /** The Slack client secret. Value only returned through POST to the action Channel List API, otherwise empty. */
  clientSecret?: string;
  /** The Slack verification token. Value only returned through POST to the action Channel List API, otherwise empty. */
  verificationToken?: string;
  /** The Slack permission scopes. */
  scopes?: string;
  /** The Slack landing page Url */
  landingPageUrl?: string;
  /**
   * The Slack redirect action
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly redirectAction?: string;
  /**
   * The Sms auth token
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastSubmissionId?: string;
  /**
   * Whether to register the settings before OAuth validation is performed. Recommended to True.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly registerBeforeOAuthFlow?: boolean;
  /**
   * Whether this channel is validated for the bot
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isValidated?: boolean;
  /** The Slack signing secret. */
  signingSecret?: string;
  /** Whether this channel is enabled for the bot */
  isEnabled: boolean;
}

/** The parameters to provide for the Line channel. */
export interface LineChannelProperties {
  /** The list of line channel registrations */
  lineRegistrations: LineRegistration[];
  /**
   * Callback Url to enter in line registration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly callbackUrl?: string;
  /**
   * Whether this channel is validated for the bot
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isValidated?: boolean;
}

/** The properties corresponding to a line channel registration */
export interface LineRegistration {
  /**
   * Id generated for the line channel registration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly generatedId?: string;
  /** Secret for the line channel registration */
  channelSecret?: string;
  /** Access token for the line channel registration */
  channelAccessToken?: string;
}

/** The parameters to provide for the DirectLine Speech channel. */
export interface DirectLineSpeechChannelProperties {
  /** The cognitive service region with this channel registration. */
  cognitiveServiceRegion: string;
  /** The cognitive service subscription key to use with this channel registration. */
  cognitiveServiceSubscriptionKey: string;
  /** Whether this channel is enabled or not. */
  isEnabled?: boolean;
  /** Custom speech model id (optional). */
  customVoiceDeploymentId?: string;
  /** Custom voice deployment id (optional). */
  customSpeechModelId?: string;
  /** Make this a default bot for chosen cognitive service account. */
  isDefaultBotForCogSvcAccount?: boolean;
}

/** The display name of a connection Item Setting registered with the Bot */
export interface ConnectionItemName {
  /**
   * Connection Item name that has been added in the API
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
}

/** The Private Endpoint Connection resource. */
export type PrivateEndpointConnection = PrivateLinkResourceBase & {
  /** The resource of private end point. */
  privateEndpoint?: PrivateEndpoint;
  /** A collection of information about the state of the connection between service consumer and provider. */
  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
  /**
   * The provisioning state of the private endpoint connection resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: PrivateEndpointConnectionProvisioningState;
};

/** A private link resource */
export type PrivateLinkResource = PrivateLinkResourceBase & {
  /**
   * The private link resource group id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly groupId?: string;
  /**
   * The private link resource required member names.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly requiredMembers?: string[];
  /** The private link resource Private link DNS zone name. */
  requiredZoneNames?: string[];
};

/** Bot resource definition */
export type Bot = Resource & {
  /** The set of properties specific to bot resource */
  properties?: BotProperties;
};

/** Bot channel resource definition */
export type BotChannel = Resource & {
  /** The set of properties specific to bot channel resource */
  properties?: ChannelUnion;
};

/** Bot channel resource definition */
export type ConnectionSetting = Resource & {
  /** The set of properties specific to bot channel resource */
  properties?: ConnectionSettingProperties;
};

/** Alexa channel definition */
export type AlexaChannel = Channel & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  channelName: "AlexaChannel";
  /** The set of properties specific to Alexa channel resource */
  properties?: AlexaChannelProperties;
};

/** Facebook channel definition */
export type FacebookChannel = Channel & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  channelName: "FacebookChannel";
  /** The set of properties specific to bot facebook channel */
  properties?: FacebookChannelProperties;
};

/** Email channel definition */
export type EmailChannel = Channel & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  channelName: "EmailChannel";
  /** The set of properties specific to email channel resource */
  properties?: EmailChannelProperties;
};

/** Microsoft Teams channel definition */
export type MsTeamsChannel = Channel & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  channelName: "MsTeamsChannel";
  /** The set of properties specific to Microsoft Teams channel resource */
  properties?: MsTeamsChannelProperties;
};

/** Skype channel definition */
export type SkypeChannel = Channel & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  channelName: "SkypeChannel";
  /** The set of properties specific to Skype channel resource */
  properties?: SkypeChannelProperties;
};

/** Kik channel definition */
export type KikChannel = Channel & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  channelName: "KikChannel";
  /** The set of properties specific to Kik channel resource */
  properties?: KikChannelProperties;
};

/** Web Chat channel definition */
export type WebChatChannel = Channel & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  channelName: "WebChatChannel";
  /** The set of properties specific to Web Chat channel resource */
  properties?: WebChatChannelProperties;
};

/** Direct Line channel definition */
export type DirectLineChannel = Channel & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  channelName: "DirectLineChannel";
  /** The set of properties specific to Direct Line channel resource */
  properties?: DirectLineChannelProperties;
};

/** Telegram channel definition */
export type TelegramChannel = Channel & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  channelName: "TelegramChannel";
  /** The set of properties specific to Telegram channel resource */
  properties?: TelegramChannelProperties;
};

/** Sms channel definition */
export type SmsChannel = Channel & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  channelName: "SmsChannel";
  /** The set of properties specific to Sms channel resource */
  properties?: SmsChannelProperties;
};

/** Slack channel definition */
export type SlackChannel = Channel & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  channelName: "SlackChannel";
  /** The set of properties specific to Slack channel resource */
  properties?: SlackChannelProperties;
};

/** Line channel definition */
export type LineChannel = Channel & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  channelName: "LineChannel";
  /** The set of properties specific to line channel resource */
  properties?: LineChannelProperties;
};

/** DirectLine Speech channel definition */
export type DirectLineSpeechChannel = Channel & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  channelName: "DirectLineSpeechChannel";
  /** The set of properties specific to DirectLine Speech channel resource */
  properties?: DirectLineSpeechChannelProperties;
};

/** A site for the channel */
export type Site = WebChatSite &
  DirectLineSite & {
    /** Whether this site is token enabled for channel */
    isTokenEnabled?: boolean;
    /** Entity Tag */
    eTag?: string;
  };

/** The ARM channel of list channel with keys operation response. */
export type ListChannelWithKeysResponse = BotChannel & {
  /** The set of properties specific to bot channel resource */
  resource?: ChannelUnion;
  /** Channel settings */
  setting?: ChannelSettings;
  /** Provisioning state of the resource */
  provisioningState?: string;
  /** Entity tag of the resource */
  entityTag?: string;
  /** Changed time of the resource */
  changedTime?: string;
};

/** Known values of {@link MsaAppType} that the service accepts. */
export enum KnownMsaAppType {
  UserAssignedMSI = "UserAssignedMSI",
  SingleTenant = "SingleTenant",
  MultiTenant = "MultiTenant"
}

/**
 * Defines values for MsaAppType. \
 * {@link KnownMsaAppType} can be used interchangeably with MsaAppType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **UserAssignedMSI** \
 * **SingleTenant** \
 * **MultiTenant**
 */
export type MsaAppType = string;

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export enum KnownPublicNetworkAccess {
  Enabled = "Enabled",
  Disabled = "Disabled"
}

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type PublicNetworkAccess = string;

/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
export enum KnownPrivateEndpointServiceConnectionStatus {
  Pending = "Pending",
  Approved = "Approved",
  Rejected = "Rejected"
}

/**
 * Defines values for PrivateEndpointServiceConnectionStatus. \
 * {@link KnownPrivateEndpointServiceConnectionStatus} can be used interchangeably with PrivateEndpointServiceConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected**
 */
export type PrivateEndpointServiceConnectionStatus = string;

/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export enum KnownPrivateEndpointConnectionProvisioningState {
  Succeeded = "Succeeded",
  Creating = "Creating",
  Deleting = "Deleting",
  Failed = "Failed"
}

/**
 * Defines values for PrivateEndpointConnectionProvisioningState. \
 * {@link KnownPrivateEndpointConnectionProvisioningState} can be used interchangeably with PrivateEndpointConnectionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Creating** \
 * **Deleting** \
 * **Failed**
 */
export type PrivateEndpointConnectionProvisioningState = string;

/** Known values of {@link SkuName} that the service accepts. */
export enum KnownSkuName {
  F0 = "F0",
  S1 = "S1"
}

/**
 * Defines values for SkuName. \
 * {@link KnownSkuName} can be used interchangeably with SkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **F0** \
 * **S1**
 */
export type SkuName = string;

/** Known values of {@link SkuTier} that the service accepts. */
export enum KnownSkuTier {
  Free = "Free",
  Standard = "Standard"
}

/**
 * Defines values for SkuTier. \
 * {@link KnownSkuTier} can be used interchangeably with SkuTier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Free** \
 * **Standard**
 */
export type SkuTier = string;

/** Known values of {@link Kind} that the service accepts. */
export enum KnownKind {
  Sdk = "sdk",
  Designer = "designer",
  Bot = "bot",
  Function = "function",
  Azurebot = "azurebot"
}

/**
 * Defines values for Kind. \
 * {@link KnownKind} can be used interchangeably with Kind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **sdk** \
 * **designer** \
 * **bot** \
 * **function** \
 * **azurebot**
 */
export type Kind = string;

/** Known values of {@link OperationResultStatus} that the service accepts. */
export enum KnownOperationResultStatus {
  Canceled = "Canceled",
  Succeeded = "Succeeded",
  Failed = "Failed",
  Requested = "Requested",
  Running = "Running"
}

/**
 * Defines values for OperationResultStatus. \
 * {@link KnownOperationResultStatus} can be used interchangeably with OperationResultStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Canceled** \
 * **Succeeded** \
 * **Failed** \
 * **Requested** \
 * **Running**
 */
export type OperationResultStatus = string;
/** Defines values for ChannelName. */
export type ChannelName =
  | "AlexaChannel"
  | "FacebookChannel"
  | "EmailChannel"
  | "KikChannel"
  | "TelegramChannel"
  | "SlackChannel"
  | "MsTeamsChannel"
  | "SkypeChannel"
  | "WebChatChannel"
  | "DirectLineChannel"
  | "SmsChannel"
  | "LineChannel"
  | "DirectLineSpeechChannel"
  | "OutlookChannel";
/** Defines values for RegenerateKeysChannelName. */
export type RegenerateKeysChannelName = "WebChatChannel" | "DirectLineChannel";
/** Defines values for Key. */
export type Key = "key1" | "key2";

/** Optional parameters. */
export interface BotsCreateOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type BotsCreateResponse = Bot;

/** Optional parameters. */
export interface BotsUpdateOptionalParams extends coreClient.OperationOptions {
  /** Specifies the location of the resource. */
  location?: string;
  /** Contains resource tags defined as key/value pairs. */
  tags?: { [propertyName: string]: string };
  /** Gets or sets the SKU of the resource. */
  sku?: Sku;
  /** Required. Gets or sets the Kind of the resource. */
  kind?: Kind;
  /** Entity Tag */
  etag?: string;
  /** The set of properties specific to bot resource */
  properties?: BotProperties;
}

/** Contains response data for the update operation. */
export type BotsUpdateResponse = Bot;

/** Optional parameters. */
export interface BotsDeleteOptionalParams extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface BotsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type BotsGetResponse = Bot;

/** Optional parameters. */
export interface BotsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type BotsListByResourceGroupResponse = BotResponseList;

/** Optional parameters. */
export interface BotsListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type BotsListResponse = BotResponseList;

/** Optional parameters. */
export interface BotsGetCheckNameAvailabilityOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getCheckNameAvailability operation. */
export type BotsGetCheckNameAvailabilityResponse = CheckNameAvailabilityResponseBody;

/** Optional parameters. */
export interface BotsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type BotsListByResourceGroupNextResponse = BotResponseList;

/** Optional parameters. */
export interface BotsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type BotsListNextResponse = BotResponseList;

/** Optional parameters. */
export interface ChannelsCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type ChannelsCreateResponse = BotChannel;

/** Optional parameters. */
export interface ChannelsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Specifies the location of the resource. */
  location?: string;
  /** Contains resource tags defined as key/value pairs. */
  tags?: { [propertyName: string]: string };
  /** Gets or sets the SKU of the resource. */
  sku?: Sku;
  /** Required. Gets or sets the Kind of the resource. */
  kind?: Kind;
  /** Entity Tag */
  etag?: string;
  /** The set of properties specific to bot channel resource */
  properties?: ChannelUnion;
}

/** Contains response data for the update operation. */
export type ChannelsUpdateResponse = BotChannel;

/** Optional parameters. */
export interface ChannelsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ChannelsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ChannelsGetResponse = BotChannel;

/** Optional parameters. */
export interface ChannelsListWithKeysOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listWithKeys operation. */
export type ChannelsListWithKeysResponse = ListChannelWithKeysResponse;

/** Optional parameters. */
export interface ChannelsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type ChannelsListByResourceGroupResponse = ChannelResponseList;

/** Optional parameters. */
export interface ChannelsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ChannelsListByResourceGroupNextResponse = ChannelResponseList;

/** Optional parameters. */
export interface DirectLineRegenerateKeysOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the regenerateKeys operation. */
export type DirectLineRegenerateKeysResponse = BotChannel;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationEntityListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationEntityListResult;

/** Optional parameters. */
export interface BotConnectionListServiceProvidersOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listServiceProviders operation. */
export type BotConnectionListServiceProvidersResponse = ServiceProviderResponseList;

/** Optional parameters. */
export interface BotConnectionListWithSecretsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listWithSecrets operation. */
export type BotConnectionListWithSecretsResponse = ConnectionSetting;

/** Optional parameters. */
export interface BotConnectionCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type BotConnectionCreateResponse = ConnectionSetting;

/** Optional parameters. */
export interface BotConnectionUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type BotConnectionUpdateResponse = ConnectionSetting;

/** Optional parameters. */
export interface BotConnectionGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type BotConnectionGetResponse = ConnectionSetting;

/** Optional parameters. */
export interface BotConnectionDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface BotConnectionListByBotServiceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByBotService operation. */
export type BotConnectionListByBotServiceResponse = ConnectionSettingResponseList;

/** Optional parameters. */
export interface BotConnectionListByBotServiceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByBotServiceNext operation. */
export type BotConnectionListByBotServiceNextResponse = ConnectionSettingResponseList;

/** Optional parameters. */
export interface HostSettingsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type HostSettingsGetResponse = HostSettingsResponse;

/** Optional parameters. */
export interface OperationResultsGetOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the get operation. */
export type OperationResultsGetResponse = OperationResultsDescription;

/** Optional parameters. */
export interface PrivateEndpointConnectionsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type PrivateEndpointConnectionsListResponse = PrivateEndpointConnectionListResult;

/** Optional parameters. */
export interface PrivateEndpointConnectionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;

/** Optional parameters. */
export interface PrivateEndpointConnectionsCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type PrivateEndpointConnectionsCreateResponse = PrivateEndpointConnection;

/** Optional parameters. */
export interface PrivateEndpointConnectionsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface PrivateLinkResourcesListByBotResourceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByBotResource operation. */
export type PrivateLinkResourcesListByBotResourceResponse = PrivateLinkResourceListResult;

/** Optional parameters. */
export interface AzureBotServiceOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
