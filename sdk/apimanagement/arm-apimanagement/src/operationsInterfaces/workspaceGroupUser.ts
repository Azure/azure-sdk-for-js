/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  UserContract,
  WorkspaceGroupUserListOptionalParams,
  WorkspaceGroupUserCheckEntityExistsOptionalParams,
  WorkspaceGroupUserCheckEntityExistsResponse,
  WorkspaceGroupUserCreateOptionalParams,
  WorkspaceGroupUserCreateResponse,
  WorkspaceGroupUserDeleteOptionalParams,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a WorkspaceGroupUser. */
export interface WorkspaceGroupUser {
  /**
   * Lists a collection of user entities associated with the group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of the API Management service.
   * @param workspaceId Workspace identifier. Must be unique in the current API Management service
   *                    instance.
   * @param groupId Group identifier. Must be unique in the current API Management service instance.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    serviceName: string,
    workspaceId: string,
    groupId: string,
    options?: WorkspaceGroupUserListOptionalParams,
  ): PagedAsyncIterableIterator<UserContract>;
  /**
   * Checks that user entity specified by identifier is associated with the group entity.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of the API Management service.
   * @param workspaceId Workspace identifier. Must be unique in the current API Management service
   *                    instance.
   * @param groupId Group identifier. Must be unique in the current API Management service instance.
   * @param userId User identifier. Must be unique in the current API Management service instance.
   * @param options The options parameters.
   */
  checkEntityExists(
    resourceGroupName: string,
    serviceName: string,
    workspaceId: string,
    groupId: string,
    userId: string,
    options?: WorkspaceGroupUserCheckEntityExistsOptionalParams,
  ): Promise<WorkspaceGroupUserCheckEntityExistsResponse>;
  /**
   * Add existing user to existing group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of the API Management service.
   * @param workspaceId Workspace identifier. Must be unique in the current API Management service
   *                    instance.
   * @param groupId Group identifier. Must be unique in the current API Management service instance.
   * @param userId User identifier. Must be unique in the current API Management service instance.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    serviceName: string,
    workspaceId: string,
    groupId: string,
    userId: string,
    options?: WorkspaceGroupUserCreateOptionalParams,
  ): Promise<WorkspaceGroupUserCreateResponse>;
  /**
   * Remove existing user from existing group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of the API Management service.
   * @param workspaceId Workspace identifier. Must be unique in the current API Management service
   *                    instance.
   * @param groupId Group identifier. Must be unique in the current API Management service instance.
   * @param userId User identifier. Must be unique in the current API Management service instance.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    serviceName: string,
    workspaceId: string,
    groupId: string,
    userId: string,
    options?: WorkspaceGroupUserDeleteOptionalParams,
  ): Promise<void>;
}
