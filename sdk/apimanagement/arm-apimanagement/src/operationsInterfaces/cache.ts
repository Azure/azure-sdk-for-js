/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  CacheContract,
  CacheListByServiceOptionalParams,
  CacheGetEntityTagOptionalParams,
  CacheGetEntityTagResponse,
  CacheGetOptionalParams,
  CacheGetResponse,
  CacheCreateOrUpdateOptionalParams,
  CacheCreateOrUpdateResponse,
  CacheUpdateParameters,
  CacheUpdateOptionalParams,
  CacheUpdateResponse,
  CacheDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Cache. */
export interface Cache {
  /**
   * Lists a collection of all external Caches in the specified service instance.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param options The options parameters.
   */
  listByService(
    resourceGroupName: string,
    serviceName: string,
    options?: CacheListByServiceOptionalParams
  ): PagedAsyncIterableIterator<CacheContract>;
  /**
   * Gets the entity state (Etag) version of the Cache specified by its identifier.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param cacheId Identifier of the Cache entity. Cache identifier (should be either 'default' or valid
   *                Azure region identifier).
   * @param options The options parameters.
   */
  getEntityTag(
    resourceGroupName: string,
    serviceName: string,
    cacheId: string,
    options?: CacheGetEntityTagOptionalParams
  ): Promise<CacheGetEntityTagResponse>;
  /**
   * Gets the details of the Cache specified by its identifier.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param cacheId Identifier of the Cache entity. Cache identifier (should be either 'default' or valid
   *                Azure region identifier).
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    serviceName: string,
    cacheId: string,
    options?: CacheGetOptionalParams
  ): Promise<CacheGetResponse>;
  /**
   * Creates or updates an External Cache to be used in Api Management instance.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param cacheId Identifier of the Cache entity. Cache identifier (should be either 'default' or valid
   *                Azure region identifier).
   * @param parameters Create or Update parameters.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    serviceName: string,
    cacheId: string,
    parameters: CacheContract,
    options?: CacheCreateOrUpdateOptionalParams
  ): Promise<CacheCreateOrUpdateResponse>;
  /**
   * Updates the details of the cache specified by its identifier.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param cacheId Identifier of the Cache entity. Cache identifier (should be either 'default' or valid
   *                Azure region identifier).
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   *                response of the GET request or it should be * for unconditional update.
   * @param parameters Update parameters.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    serviceName: string,
    cacheId: string,
    ifMatch: string,
    parameters: CacheUpdateParameters,
    options?: CacheUpdateOptionalParams
  ): Promise<CacheUpdateResponse>;
  /**
   * Deletes specific Cache.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param cacheId Identifier of the Cache entity. Cache identifier (should be either 'default' or valid
   *                Azure region identifier).
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   *                response of the GET request or it should be * for unconditional update.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    serviceName: string,
    cacheId: string,
    ifMatch: string,
    options?: CacheDeleteOptionalParams
  ): Promise<void>;
}
