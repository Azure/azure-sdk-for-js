/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  GlobalSchemaContract,
  WorkspaceGlobalSchemaListByServiceOptionalParams,
  WorkspaceGlobalSchemaGetEntityTagOptionalParams,
  WorkspaceGlobalSchemaGetEntityTagResponse,
  WorkspaceGlobalSchemaGetOptionalParams,
  WorkspaceGlobalSchemaGetResponse,
  WorkspaceGlobalSchemaCreateOrUpdateOptionalParams,
  WorkspaceGlobalSchemaCreateOrUpdateResponse,
  WorkspaceGlobalSchemaDeleteOptionalParams,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a WorkspaceGlobalSchema. */
export interface WorkspaceGlobalSchema {
  /**
   * Lists a collection of schemas registered with workspace in a service instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of the API Management service.
   * @param workspaceId Workspace identifier. Must be unique in the current API Management service
   *                    instance.
   * @param options The options parameters.
   */
  listByService(
    resourceGroupName: string,
    serviceName: string,
    workspaceId: string,
    options?: WorkspaceGlobalSchemaListByServiceOptionalParams,
  ): PagedAsyncIterableIterator<GlobalSchemaContract>;
  /**
   * Gets the entity state (Etag) version of the Schema specified by its identifier.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of the API Management service.
   * @param workspaceId Workspace identifier. Must be unique in the current API Management service
   *                    instance.
   * @param schemaId Schema id identifier. Must be unique in the current API Management service instance.
   * @param options The options parameters.
   */
  getEntityTag(
    resourceGroupName: string,
    serviceName: string,
    workspaceId: string,
    schemaId: string,
    options?: WorkspaceGlobalSchemaGetEntityTagOptionalParams,
  ): Promise<WorkspaceGlobalSchemaGetEntityTagResponse>;
  /**
   * Gets the details of the Schema specified by its identifier.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of the API Management service.
   * @param workspaceId Workspace identifier. Must be unique in the current API Management service
   *                    instance.
   * @param schemaId Schema id identifier. Must be unique in the current API Management service instance.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    serviceName: string,
    workspaceId: string,
    schemaId: string,
    options?: WorkspaceGlobalSchemaGetOptionalParams,
  ): Promise<WorkspaceGlobalSchemaGetResponse>;
  /**
   * Creates new or updates existing specified Schema of the workspace in an API Management service
   * instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of the API Management service.
   * @param workspaceId Workspace identifier. Must be unique in the current API Management service
   *                    instance.
   * @param schemaId Schema id identifier. Must be unique in the current API Management service instance.
   * @param parameters Create or update parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    serviceName: string,
    workspaceId: string,
    schemaId: string,
    parameters: GlobalSchemaContract,
    options?: WorkspaceGlobalSchemaCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<WorkspaceGlobalSchemaCreateOrUpdateResponse>,
      WorkspaceGlobalSchemaCreateOrUpdateResponse
    >
  >;
  /**
   * Creates new or updates existing specified Schema of the workspace in an API Management service
   * instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of the API Management service.
   * @param workspaceId Workspace identifier. Must be unique in the current API Management service
   *                    instance.
   * @param schemaId Schema id identifier. Must be unique in the current API Management service instance.
   * @param parameters Create or update parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    serviceName: string,
    workspaceId: string,
    schemaId: string,
    parameters: GlobalSchemaContract,
    options?: WorkspaceGlobalSchemaCreateOrUpdateOptionalParams,
  ): Promise<WorkspaceGlobalSchemaCreateOrUpdateResponse>;
  /**
   * Deletes specific Schema.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of the API Management service.
   * @param workspaceId Workspace identifier. Must be unique in the current API Management service
   *                    instance.
   * @param schemaId Schema id identifier. Must be unique in the current API Management service instance.
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   *                response of the GET request or it should be * for unconditional update.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    serviceName: string,
    workspaceId: string,
    schemaId: string,
    ifMatch: string,
    options?: WorkspaceGlobalSchemaDeleteOptionalParams,
  ): Promise<void>;
}
