/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  NotificationName,
  NotificationRecipientUserListByNotificationOptionalParams,
  NotificationRecipientUserListByNotificationResponse,
  NotificationRecipientUserCheckEntityExistsOptionalParams,
  NotificationRecipientUserCheckEntityExistsResponse,
  NotificationRecipientUserCreateOrUpdateOptionalParams,
  NotificationRecipientUserCreateOrUpdateResponse,
  NotificationRecipientUserDeleteOptionalParams
} from "../models";

/** Interface representing a NotificationRecipientUser. */
export interface NotificationRecipientUser {
  /**
   * Gets the list of the Notification Recipient User subscribed to the notification.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param notificationName Notification Name Identifier.
   * @param options The options parameters.
   */
  listByNotification(
    resourceGroupName: string,
    serviceName: string,
    notificationName: NotificationName,
    options?: NotificationRecipientUserListByNotificationOptionalParams
  ): Promise<NotificationRecipientUserListByNotificationResponse>;
  /**
   * Determine if the Notification Recipient User is subscribed to the notification.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param notificationName Notification Name Identifier.
   * @param userId User identifier. Must be unique in the current API Management service instance.
   * @param options The options parameters.
   */
  checkEntityExists(
    resourceGroupName: string,
    serviceName: string,
    notificationName: NotificationName,
    userId: string,
    options?: NotificationRecipientUserCheckEntityExistsOptionalParams
  ): Promise<NotificationRecipientUserCheckEntityExistsResponse>;
  /**
   * Adds the API Management User to the list of Recipients for the Notification.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param notificationName Notification Name Identifier.
   * @param userId User identifier. Must be unique in the current API Management service instance.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    serviceName: string,
    notificationName: NotificationName,
    userId: string,
    options?: NotificationRecipientUserCreateOrUpdateOptionalParams
  ): Promise<NotificationRecipientUserCreateOrUpdateResponse>;
  /**
   * Removes the API Management user from the list of Notification.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param notificationName Notification Name Identifier.
   * @param userId User identifier. Must be unique in the current API Management service instance.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    serviceName: string,
    notificationName: NotificationName,
    userId: string,
    options?: NotificationRecipientUserDeleteOptionalParams
  ): Promise<void>;
}
