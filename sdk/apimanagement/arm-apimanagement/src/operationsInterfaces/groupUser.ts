/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  UserContract,
  GroupUserListOptionalParams,
  GroupUserCheckEntityExistsOptionalParams,
  GroupUserCheckEntityExistsResponse,
  GroupUserCreateOptionalParams,
  GroupUserCreateResponse,
  GroupUserDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a GroupUser. */
export interface GroupUser {
  /**
   * Lists a collection of user entities associated with the group.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param groupId Group identifier. Must be unique in the current API Management service instance.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    serviceName: string,
    groupId: string,
    options?: GroupUserListOptionalParams
  ): PagedAsyncIterableIterator<UserContract>;
  /**
   * Checks that user entity specified by identifier is associated with the group entity.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param groupId Group identifier. Must be unique in the current API Management service instance.
   * @param userId User identifier. Must be unique in the current API Management service instance.
   * @param options The options parameters.
   */
  checkEntityExists(
    resourceGroupName: string,
    serviceName: string,
    groupId: string,
    userId: string,
    options?: GroupUserCheckEntityExistsOptionalParams
  ): Promise<GroupUserCheckEntityExistsResponse>;
  /**
   * Add existing user to existing group
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param groupId Group identifier. Must be unique in the current API Management service instance.
   * @param userId User identifier. Must be unique in the current API Management service instance.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    serviceName: string,
    groupId: string,
    userId: string,
    options?: GroupUserCreateOptionalParams
  ): Promise<GroupUserCreateResponse>;
  /**
   * Remove existing user from existing group.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param groupId Group identifier. Must be unique in the current API Management service instance.
   * @param userId User identifier. Must be unique in the current API Management service instance.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    serviceName: string,
    groupId: string,
    userId: string,
    options?: GroupUserDeleteOptionalParams
  ): Promise<void>;
}
