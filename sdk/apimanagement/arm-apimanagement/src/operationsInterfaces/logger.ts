/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  LoggerContract,
  LoggerListByServiceOptionalParams,
  LoggerGetEntityTagOptionalParams,
  LoggerGetEntityTagResponse,
  LoggerGetOptionalParams,
  LoggerGetResponse,
  LoggerCreateOrUpdateOptionalParams,
  LoggerCreateOrUpdateResponse,
  LoggerUpdateContract,
  LoggerUpdateOptionalParams,
  LoggerUpdateResponse,
  LoggerDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Logger. */
export interface Logger {
  /**
   * Lists a collection of loggers in the specified service instance.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param options The options parameters.
   */
  listByService(
    resourceGroupName: string,
    serviceName: string,
    options?: LoggerListByServiceOptionalParams
  ): PagedAsyncIterableIterator<LoggerContract>;
  /**
   * Gets the entity state (Etag) version of the logger specified by its identifier.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param loggerId Logger identifier. Must be unique in the API Management service instance.
   * @param options The options parameters.
   */
  getEntityTag(
    resourceGroupName: string,
    serviceName: string,
    loggerId: string,
    options?: LoggerGetEntityTagOptionalParams
  ): Promise<LoggerGetEntityTagResponse>;
  /**
   * Gets the details of the logger specified by its identifier.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param loggerId Logger identifier. Must be unique in the API Management service instance.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    serviceName: string,
    loggerId: string,
    options?: LoggerGetOptionalParams
  ): Promise<LoggerGetResponse>;
  /**
   * Creates or Updates a logger.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param loggerId Logger identifier. Must be unique in the API Management service instance.
   * @param parameters Create parameters.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    serviceName: string,
    loggerId: string,
    parameters: LoggerContract,
    options?: LoggerCreateOrUpdateOptionalParams
  ): Promise<LoggerCreateOrUpdateResponse>;
  /**
   * Updates an existing logger.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param loggerId Logger identifier. Must be unique in the API Management service instance.
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   *                response of the GET request or it should be * for unconditional update.
   * @param parameters Update parameters.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    serviceName: string,
    loggerId: string,
    ifMatch: string,
    parameters: LoggerUpdateContract,
    options?: LoggerUpdateOptionalParams
  ): Promise<LoggerUpdateResponse>;
  /**
   * Deletes the specified logger.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param loggerId Logger identifier. Must be unique in the API Management service instance.
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   *                response of the GET request or it should be * for unconditional update.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    serviceName: string,
    loggerId: string,
    ifMatch: string,
    options?: LoggerDeleteOptionalParams
  ): Promise<void>;
}
