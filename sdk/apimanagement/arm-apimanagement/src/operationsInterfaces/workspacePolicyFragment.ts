/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  PolicyFragmentContract,
  WorkspacePolicyFragmentListByServiceOptionalParams,
  WorkspacePolicyFragmentGetEntityTagOptionalParams,
  WorkspacePolicyFragmentGetEntityTagResponse,
  WorkspacePolicyFragmentGetOptionalParams,
  WorkspacePolicyFragmentGetResponse,
  WorkspacePolicyFragmentCreateOrUpdateOptionalParams,
  WorkspacePolicyFragmentCreateOrUpdateResponse,
  WorkspacePolicyFragmentDeleteOptionalParams,
  WorkspacePolicyFragmentListReferencesOptionalParams,
  WorkspacePolicyFragmentListReferencesResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a WorkspacePolicyFragment. */
export interface WorkspacePolicyFragment {
  /**
   * Gets all policy fragments defined within a workspace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of the API Management service.
   * @param workspaceId Workspace identifier. Must be unique in the current API Management service
   *                    instance.
   * @param options The options parameters.
   */
  listByService(
    resourceGroupName: string,
    serviceName: string,
    workspaceId: string,
    options?: WorkspacePolicyFragmentListByServiceOptionalParams,
  ): PagedAsyncIterableIterator<PolicyFragmentContract>;
  /**
   * Gets the entity state (Etag) version of a policy fragment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of the API Management service.
   * @param workspaceId Workspace identifier. Must be unique in the current API Management service
   *                    instance.
   * @param id A resource identifier.
   * @param options The options parameters.
   */
  getEntityTag(
    resourceGroupName: string,
    serviceName: string,
    workspaceId: string,
    id: string,
    options?: WorkspacePolicyFragmentGetEntityTagOptionalParams,
  ): Promise<WorkspacePolicyFragmentGetEntityTagResponse>;
  /**
   * Gets a policy fragment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of the API Management service.
   * @param workspaceId Workspace identifier. Must be unique in the current API Management service
   *                    instance.
   * @param id A resource identifier.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    serviceName: string,
    workspaceId: string,
    id: string,
    options?: WorkspacePolicyFragmentGetOptionalParams,
  ): Promise<WorkspacePolicyFragmentGetResponse>;
  /**
   * Creates or updates a policy fragment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of the API Management service.
   * @param workspaceId Workspace identifier. Must be unique in the current API Management service
   *                    instance.
   * @param id A resource identifier.
   * @param parameters The policy fragment contents to apply.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    serviceName: string,
    workspaceId: string,
    id: string,
    parameters: PolicyFragmentContract,
    options?: WorkspacePolicyFragmentCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<WorkspacePolicyFragmentCreateOrUpdateResponse>,
      WorkspacePolicyFragmentCreateOrUpdateResponse
    >
  >;
  /**
   * Creates or updates a policy fragment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of the API Management service.
   * @param workspaceId Workspace identifier. Must be unique in the current API Management service
   *                    instance.
   * @param id A resource identifier.
   * @param parameters The policy fragment contents to apply.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    serviceName: string,
    workspaceId: string,
    id: string,
    parameters: PolicyFragmentContract,
    options?: WorkspacePolicyFragmentCreateOrUpdateOptionalParams,
  ): Promise<WorkspacePolicyFragmentCreateOrUpdateResponse>;
  /**
   * Deletes a policy fragment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of the API Management service.
   * @param workspaceId Workspace identifier. Must be unique in the current API Management service
   *                    instance.
   * @param id A resource identifier.
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   *                response of the GET request or it should be * for unconditional update.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    serviceName: string,
    workspaceId: string,
    id: string,
    ifMatch: string,
    options?: WorkspacePolicyFragmentDeleteOptionalParams,
  ): Promise<void>;
  /**
   * Lists policy resources that reference the policy fragment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of the API Management service.
   * @param workspaceId Workspace identifier. Must be unique in the current API Management service
   *                    instance.
   * @param id A resource identifier.
   * @param options The options parameters.
   */
  listReferences(
    resourceGroupName: string,
    serviceName: string,
    workspaceId: string,
    id: string,
    options?: WorkspacePolicyFragmentListReferencesOptionalParams,
  ): Promise<WorkspacePolicyFragmentListReferencesResponse>;
}
