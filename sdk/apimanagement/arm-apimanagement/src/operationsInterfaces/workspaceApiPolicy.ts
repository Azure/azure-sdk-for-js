/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  PolicyContract,
  WorkspaceApiPolicyListByApiOptionalParams,
  PolicyIdName,
  WorkspaceApiPolicyGetEntityTagOptionalParams,
  WorkspaceApiPolicyGetEntityTagResponse,
  WorkspaceApiPolicyGetOptionalParams,
  WorkspaceApiPolicyGetResponse,
  WorkspaceApiPolicyCreateOrUpdateOptionalParams,
  WorkspaceApiPolicyCreateOrUpdateResponse,
  WorkspaceApiPolicyDeleteOptionalParams,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a WorkspaceApiPolicy. */
export interface WorkspaceApiPolicy {
  /**
   * Get the policy configuration at the API level.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of the API Management service.
   * @param workspaceId Workspace identifier. Must be unique in the current API Management service
   *                    instance.
   * @param apiId API revision identifier. Must be unique in the current API Management service instance.
   *              Non-current revision has ;rev=n as a suffix where n is the revision number.
   * @param options The options parameters.
   */
  listByApi(
    resourceGroupName: string,
    serviceName: string,
    workspaceId: string,
    apiId: string,
    options?: WorkspaceApiPolicyListByApiOptionalParams,
  ): PagedAsyncIterableIterator<PolicyContract>;
  /**
   * Gets the entity state (Etag) version of the API policy specified by its identifier.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of the API Management service.
   * @param workspaceId Workspace identifier. Must be unique in the current API Management service
   *                    instance.
   * @param apiId API revision identifier. Must be unique in the current API Management service instance.
   *              Non-current revision has ;rev=n as a suffix where n is the revision number.
   * @param policyId The identifier of the Policy.
   * @param options The options parameters.
   */
  getEntityTag(
    resourceGroupName: string,
    serviceName: string,
    workspaceId: string,
    apiId: string,
    policyId: PolicyIdName,
    options?: WorkspaceApiPolicyGetEntityTagOptionalParams,
  ): Promise<WorkspaceApiPolicyGetEntityTagResponse>;
  /**
   * Get the policy configuration at the API level.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of the API Management service.
   * @param workspaceId Workspace identifier. Must be unique in the current API Management service
   *                    instance.
   * @param apiId API revision identifier. Must be unique in the current API Management service instance.
   *              Non-current revision has ;rev=n as a suffix where n is the revision number.
   * @param policyId The identifier of the Policy.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    serviceName: string,
    workspaceId: string,
    apiId: string,
    policyId: PolicyIdName,
    options?: WorkspaceApiPolicyGetOptionalParams,
  ): Promise<WorkspaceApiPolicyGetResponse>;
  /**
   * Creates or updates policy configuration for the API.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of the API Management service.
   * @param workspaceId Workspace identifier. Must be unique in the current API Management service
   *                    instance.
   * @param apiId API revision identifier. Must be unique in the current API Management service instance.
   *              Non-current revision has ;rev=n as a suffix where n is the revision number.
   * @param policyId The identifier of the Policy.
   * @param parameters The policy contents to apply.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    serviceName: string,
    workspaceId: string,
    apiId: string,
    policyId: PolicyIdName,
    parameters: PolicyContract,
    options?: WorkspaceApiPolicyCreateOrUpdateOptionalParams,
  ): Promise<WorkspaceApiPolicyCreateOrUpdateResponse>;
  /**
   * Deletes the policy configuration at the Api.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceName The name of the API Management service.
   * @param workspaceId Workspace identifier. Must be unique in the current API Management service
   *                    instance.
   * @param apiId API revision identifier. Must be unique in the current API Management service instance.
   *              Non-current revision has ;rev=n as a suffix where n is the revision number.
   * @param policyId The identifier of the Policy.
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   *                response of the GET request or it should be * for unconditional update.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    serviceName: string,
    workspaceId: string,
    apiId: string,
    policyId: PolicyIdName,
    ifMatch: string,
    options?: WorkspaceApiPolicyDeleteOptionalParams,
  ): Promise<void>;
}
