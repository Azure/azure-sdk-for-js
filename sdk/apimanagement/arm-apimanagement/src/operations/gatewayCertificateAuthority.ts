/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/gatewayCertificateAuthorityMappers";
import * as Parameters from "../models/parameters";
import { ApiManagementClientContext } from "../apiManagementClientContext";

/** Class representing a GatewayCertificateAuthority. */
export class GatewayCertificateAuthority {
  private readonly client: ApiManagementClientContext;

  /**
   * Create a GatewayCertificateAuthority.
   * @param {ApiManagementClientContext} client Reference to the service client.
   */
  constructor(client: ApiManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists the collection of Certificate Authorities for the specified Gateway entity.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param [options] The optional parameters
   * @returns Promise<Models.GatewayCertificateAuthorityListByServiceResponse>
   */
  listByService(resourceGroupName: string, serviceName: string, gatewayId: string, options?: Models.GatewayCertificateAuthorityListByServiceOptionalParams): Promise<Models.GatewayCertificateAuthorityListByServiceResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param callback The callback
   */
  listByService(resourceGroupName: string, serviceName: string, gatewayId: string, callback: msRest.ServiceCallback<Models.GatewayCertificateAuthorityCollection>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param options The optional parameters
   * @param callback The callback
   */
  listByService(resourceGroupName: string, serviceName: string, gatewayId: string, options: Models.GatewayCertificateAuthorityListByServiceOptionalParams, callback: msRest.ServiceCallback<Models.GatewayCertificateAuthorityCollection>): void;
  listByService(resourceGroupName: string, serviceName: string, gatewayId: string, options?: Models.GatewayCertificateAuthorityListByServiceOptionalParams | msRest.ServiceCallback<Models.GatewayCertificateAuthorityCollection>, callback?: msRest.ServiceCallback<Models.GatewayCertificateAuthorityCollection>): Promise<Models.GatewayCertificateAuthorityListByServiceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        gatewayId,
        options
      },
      listByServiceOperationSpec,
      callback) as Promise<Models.GatewayCertificateAuthorityListByServiceResponse>;
  }

  /**
   * Checks if Certificate entity is assigned to Gateway entity as Certificate Authority.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param certificateId Identifier of the certificate entity. Must be unique in the current API
   * Management service instance.
   * @param [options] The optional parameters
   * @returns Promise<Models.GatewayCertificateAuthorityGetEntityTagResponse>
   */
  getEntityTag(resourceGroupName: string, serviceName: string, gatewayId: string, certificateId: string, options?: msRest.RequestOptionsBase): Promise<Models.GatewayCertificateAuthorityGetEntityTagResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param certificateId Identifier of the certificate entity. Must be unique in the current API
   * Management service instance.
   * @param callback The callback
   */
  getEntityTag(resourceGroupName: string, serviceName: string, gatewayId: string, certificateId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param certificateId Identifier of the certificate entity. Must be unique in the current API
   * Management service instance.
   * @param options The optional parameters
   * @param callback The callback
   */
  getEntityTag(resourceGroupName: string, serviceName: string, gatewayId: string, certificateId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getEntityTag(resourceGroupName: string, serviceName: string, gatewayId: string, certificateId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.GatewayCertificateAuthorityGetEntityTagResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        gatewayId,
        certificateId,
        options
      },
      getEntityTagOperationSpec,
      callback) as Promise<Models.GatewayCertificateAuthorityGetEntityTagResponse>;
  }

  /**
   * Get assigned Gateway Certificate Authority details.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param certificateId Identifier of the certificate entity. Must be unique in the current API
   * Management service instance.
   * @param [options] The optional parameters
   * @returns Promise<Models.GatewayCertificateAuthorityGetResponse>
   */
  get(resourceGroupName: string, serviceName: string, gatewayId: string, certificateId: string, options?: msRest.RequestOptionsBase): Promise<Models.GatewayCertificateAuthorityGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param certificateId Identifier of the certificate entity. Must be unique in the current API
   * Management service instance.
   * @param callback The callback
   */
  get(resourceGroupName: string, serviceName: string, gatewayId: string, certificateId: string, callback: msRest.ServiceCallback<Models.GatewayCertificateAuthorityContract>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param certificateId Identifier of the certificate entity. Must be unique in the current API
   * Management service instance.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, serviceName: string, gatewayId: string, certificateId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GatewayCertificateAuthorityContract>): void;
  get(resourceGroupName: string, serviceName: string, gatewayId: string, certificateId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GatewayCertificateAuthorityContract>, callback?: msRest.ServiceCallback<Models.GatewayCertificateAuthorityContract>): Promise<Models.GatewayCertificateAuthorityGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        gatewayId,
        certificateId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.GatewayCertificateAuthorityGetResponse>;
  }

  /**
   * Assign Certificate entity to Gateway entity as Certificate Authority.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param certificateId Identifier of the certificate entity. Must be unique in the current API
   * Management service instance.
   * @param parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.GatewayCertificateAuthorityCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, serviceName: string, gatewayId: string, certificateId: string, parameters: Models.GatewayCertificateAuthorityContract, options?: Models.GatewayCertificateAuthorityCreateOrUpdateOptionalParams): Promise<Models.GatewayCertificateAuthorityCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param certificateId Identifier of the certificate entity. Must be unique in the current API
   * Management service instance.
   * @param parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, serviceName: string, gatewayId: string, certificateId: string, parameters: Models.GatewayCertificateAuthorityContract, callback: msRest.ServiceCallback<Models.GatewayCertificateAuthorityContract>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param certificateId Identifier of the certificate entity. Must be unique in the current API
   * Management service instance.
   * @param parameters
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, serviceName: string, gatewayId: string, certificateId: string, parameters: Models.GatewayCertificateAuthorityContract, options: Models.GatewayCertificateAuthorityCreateOrUpdateOptionalParams, callback: msRest.ServiceCallback<Models.GatewayCertificateAuthorityContract>): void;
  createOrUpdate(resourceGroupName: string, serviceName: string, gatewayId: string, certificateId: string, parameters: Models.GatewayCertificateAuthorityContract, options?: Models.GatewayCertificateAuthorityCreateOrUpdateOptionalParams | msRest.ServiceCallback<Models.GatewayCertificateAuthorityContract>, callback?: msRest.ServiceCallback<Models.GatewayCertificateAuthorityContract>): Promise<Models.GatewayCertificateAuthorityCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        gatewayId,
        certificateId,
        parameters,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.GatewayCertificateAuthorityCreateOrUpdateResponse>;
  }

  /**
   * Remove relationship between Certificate Authority and Gateway entity.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param certificateId Identifier of the certificate entity. Must be unique in the current API
   * Management service instance.
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   * response of the GET request or it should be * for unconditional update.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, serviceName: string, gatewayId: string, certificateId: string, ifMatch: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param certificateId Identifier of the certificate entity. Must be unique in the current API
   * Management service instance.
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   * response of the GET request or it should be * for unconditional update.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, serviceName: string, gatewayId: string, certificateId: string, ifMatch: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param certificateId Identifier of the certificate entity. Must be unique in the current API
   * Management service instance.
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   * response of the GET request or it should be * for unconditional update.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, serviceName: string, gatewayId: string, certificateId: string, ifMatch: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, serviceName: string, gatewayId: string, certificateId: string, ifMatch: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        gatewayId,
        certificateId,
        ifMatch,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Lists the collection of Certificate Authorities for the specified Gateway entity.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.GatewayCertificateAuthorityListByServiceNextResponse>
   */
  listByServiceNext(nextPageLink: string, options?: Models.GatewayCertificateAuthorityListByServiceNextOptionalParams): Promise<Models.GatewayCertificateAuthorityListByServiceNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByServiceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.GatewayCertificateAuthorityCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByServiceNext(nextPageLink: string, options: Models.GatewayCertificateAuthorityListByServiceNextOptionalParams, callback: msRest.ServiceCallback<Models.GatewayCertificateAuthorityCollection>): void;
  listByServiceNext(nextPageLink: string, options?: Models.GatewayCertificateAuthorityListByServiceNextOptionalParams | msRest.ServiceCallback<Models.GatewayCertificateAuthorityCollection>, callback?: msRest.ServiceCallback<Models.GatewayCertificateAuthorityCollection>): Promise<Models.GatewayCertificateAuthorityListByServiceNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByServiceNextOperationSpec,
      callback) as Promise<Models.GatewayCertificateAuthorityListByServiceNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/certificateAuthorities",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.gatewayId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.filter0,
    Parameters.top,
    Parameters.skip,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GatewayCertificateAuthorityCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getEntityTagOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/certificateAuthorities/{certificateId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.gatewayId,
    Parameters.certificateId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      headersMapper: Mappers.GatewayCertificateAuthorityGetEntityTagHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.GatewayCertificateAuthorityGetEntityTagHeaders
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/certificateAuthorities/{certificateId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.gatewayId,
    Parameters.certificateId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GatewayCertificateAuthorityContract,
      headersMapper: Mappers.GatewayCertificateAuthorityGetHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.GatewayCertificateAuthorityGetHeaders
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/certificateAuthorities/{certificateId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.gatewayId,
    Parameters.certificateId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch0,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.GatewayCertificateAuthorityContract,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.GatewayCertificateAuthorityContract,
      headersMapper: Mappers.GatewayCertificateAuthorityCreateOrUpdateHeaders
    },
    201: {
      bodyMapper: Mappers.GatewayCertificateAuthorityContract,
      headersMapper: Mappers.GatewayCertificateAuthorityCreateOrUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.GatewayCertificateAuthorityCreateOrUpdateHeaders
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/certificateAuthorities/{certificateId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.gatewayId,
    Parameters.certificateId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch1,
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByServiceNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.filter0,
    Parameters.top,
    Parameters.skip,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GatewayCertificateAuthorityCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
