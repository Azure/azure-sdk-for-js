/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/notificationRecipientUserMappers";
import * as Parameters from "../models/parameters";
import { ApiManagementClientContext } from "../apiManagementClientContext";

/** Class representing a NotificationRecipientUser. */
export class NotificationRecipientUser {
  private readonly client: ApiManagementClientContext;

  /**
   * Create a NotificationRecipientUser.
   * @param {ApiManagementClientContext} client Reference to the service client.
   */
  constructor(client: ApiManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets the list of the Notification Recipient User subscribed to the notification.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param notificationName Notification Name Identifier. Possible values include:
   * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
   * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
   * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
   * @param [options] The optional parameters
   * @returns Promise<Models.NotificationRecipientUserListByNotificationResponse>
   */
  listByNotification(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, options?: msRest.RequestOptionsBase): Promise<Models.NotificationRecipientUserListByNotificationResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param notificationName Notification Name Identifier. Possible values include:
   * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
   * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
   * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
   * @param callback The callback
   */
  listByNotification(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, callback: msRest.ServiceCallback<Models.RecipientUserCollection>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param notificationName Notification Name Identifier. Possible values include:
   * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
   * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
   * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
   * @param options The optional parameters
   * @param callback The callback
   */
  listByNotification(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RecipientUserCollection>): void;
  listByNotification(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RecipientUserCollection>, callback?: msRest.ServiceCallback<Models.RecipientUserCollection>): Promise<Models.NotificationRecipientUserListByNotificationResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        notificationName,
        options
      },
      listByNotificationOperationSpec,
      callback) as Promise<Models.NotificationRecipientUserListByNotificationResponse>;
  }

  /**
   * Determine if the Notification Recipient User is subscribed to the notification.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param notificationName Notification Name Identifier. Possible values include:
   * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
   * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
   * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
   * @param userId User identifier. Must be unique in the current API Management service instance.
   * @param [options] The optional parameters
   * @returns Promise<Models.NotificationRecipientUserCheckEntityExistsResponse>
   */
  checkEntityExists(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, userId: string, options?: msRest.RequestOptionsBase): Promise<Models.NotificationRecipientUserCheckEntityExistsResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param notificationName Notification Name Identifier. Possible values include:
   * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
   * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
   * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
   * @param userId User identifier. Must be unique in the current API Management service instance.
   * @param callback The callback
   */
  checkEntityExists(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, userId: string, callback: msRest.ServiceCallback<boolean>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param notificationName Notification Name Identifier. Possible values include:
   * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
   * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
   * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
   * @param userId User identifier. Must be unique in the current API Management service instance.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkEntityExists(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;
  checkEntityExists(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, userId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.NotificationRecipientUserCheckEntityExistsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        notificationName,
        userId,
        options
      },
      checkEntityExistsOperationSpec,
      callback) as Promise<Models.NotificationRecipientUserCheckEntityExistsResponse>;
  }

  /**
   * Adds the API Management User to the list of Recipients for the Notification.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param notificationName Notification Name Identifier. Possible values include:
   * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
   * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
   * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
   * @param userId User identifier. Must be unique in the current API Management service instance.
   * @param [options] The optional parameters
   * @returns Promise<Models.NotificationRecipientUserCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, userId: string, options?: msRest.RequestOptionsBase): Promise<Models.NotificationRecipientUserCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param notificationName Notification Name Identifier. Possible values include:
   * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
   * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
   * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
   * @param userId User identifier. Must be unique in the current API Management service instance.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, userId: string, callback: msRest.ServiceCallback<Models.RecipientUserContract>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param notificationName Notification Name Identifier. Possible values include:
   * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
   * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
   * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
   * @param userId User identifier. Must be unique in the current API Management service instance.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RecipientUserContract>): void;
  createOrUpdate(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, userId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RecipientUserContract>, callback?: msRest.ServiceCallback<Models.RecipientUserContract>): Promise<Models.NotificationRecipientUserCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        notificationName,
        userId,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.NotificationRecipientUserCreateOrUpdateResponse>;
  }

  /**
   * Removes the API Management user from the list of Notification.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param notificationName Notification Name Identifier. Possible values include:
   * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
   * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
   * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
   * @param userId User identifier. Must be unique in the current API Management service instance.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param notificationName Notification Name Identifier. Possible values include:
   * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
   * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
   * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
   * @param userId User identifier. Must be unique in the current API Management service instance.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, userId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param notificationName Notification Name Identifier. Possible values include:
   * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
   * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
   * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
   * @param userId User identifier. Must be unique in the current API Management service instance.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, userId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        notificationName,
        userId,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByNotificationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/notifications/{notificationName}/recipientUsers",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.notificationName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RecipientUserCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const checkEntityExistsOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/notifications/{notificationName}/recipientUsers/{userId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.notificationName,
    Parameters.userId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/notifications/{notificationName}/recipientUsers/{userId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.notificationName,
    Parameters.userId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RecipientUserContract
    },
    201: {
      bodyMapper: Mappers.RecipientUserContract
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/notifications/{notificationName}/recipientUsers/{userId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.notificationName,
    Parameters.userId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
