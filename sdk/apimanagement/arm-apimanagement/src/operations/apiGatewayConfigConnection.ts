/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { ApiGatewayConfigConnection } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { ApiManagementClient } from "../apiManagementClient.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  ApiManagementGatewayConfigConnectionResource,
  ApiGatewayConfigConnectionListByGatewayNextOptionalParams,
  ApiGatewayConfigConnectionListByGatewayOptionalParams,
  ApiGatewayConfigConnectionListByGatewayResponse,
  ApiGatewayConfigConnectionGetOptionalParams,
  ApiGatewayConfigConnectionGetResponse,
  ApiGatewayConfigConnectionCreateOrUpdateOptionalParams,
  ApiGatewayConfigConnectionCreateOrUpdateResponse,
  ApiGatewayConfigConnectionDeleteOptionalParams,
  ApiGatewayConfigConnectionDeleteResponse,
  ApiGatewayConfigConnectionListByGatewayNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing ApiGatewayConfigConnection operations. */
export class ApiGatewayConfigConnectionImpl
  implements ApiGatewayConfigConnection
{
  private readonly client: ApiManagementClient;

  /**
   * Initialize a new instance of the class ApiGatewayConfigConnection class.
   * @param client Reference to the service client
   */
  constructor(client: ApiManagementClient) {
    this.client = client;
  }

  /**
   * List all API Management gateway config connections within a gateway.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param gatewayName The name of the API Management gateway.
   * @param options The options parameters.
   */
  public listByGateway(
    resourceGroupName: string,
    gatewayName: string,
    options?: ApiGatewayConfigConnectionListByGatewayOptionalParams,
  ): PagedAsyncIterableIterator<ApiManagementGatewayConfigConnectionResource> {
    const iter = this.listByGatewayPagingAll(
      resourceGroupName,
      gatewayName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByGatewayPagingPage(
          resourceGroupName,
          gatewayName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByGatewayPagingPage(
    resourceGroupName: string,
    gatewayName: string,
    options?: ApiGatewayConfigConnectionListByGatewayOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ApiManagementGatewayConfigConnectionResource[]> {
    let result: ApiGatewayConfigConnectionListByGatewayResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByGateway(
        resourceGroupName,
        gatewayName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByGatewayNext(
        resourceGroupName,
        gatewayName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByGatewayPagingAll(
    resourceGroupName: string,
    gatewayName: string,
    options?: ApiGatewayConfigConnectionListByGatewayOptionalParams,
  ): AsyncIterableIterator<ApiManagementGatewayConfigConnectionResource> {
    for await (const page of this.listByGatewayPagingPage(
      resourceGroupName,
      gatewayName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List all API Management gateway config connections within a gateway.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param gatewayName The name of the API Management gateway.
   * @param options The options parameters.
   */
  private _listByGateway(
    resourceGroupName: string,
    gatewayName: string,
    options?: ApiGatewayConfigConnectionListByGatewayOptionalParams,
  ): Promise<ApiGatewayConfigConnectionListByGatewayResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, gatewayName, options },
      listByGatewayOperationSpec,
    );
  }

  /**
   * Gets an API Management gateway config connection resource description.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param gatewayName The name of the API Management gateway.
   * @param configConnectionName The name of the API Management gateway config connection.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    gatewayName: string,
    configConnectionName: string,
    options?: ApiGatewayConfigConnectionGetOptionalParams,
  ): Promise<ApiGatewayConfigConnectionGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, gatewayName, configConnectionName, options },
      getOperationSpec,
    );
  }

  /**
   * Creates or updates an API Management gateway config connection. This is long running operation and
   * could take several minutes to complete.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param gatewayName The name of the API Management gateway.
   * @param configConnectionName The name of the API Management gateway config connection.
   * @param parameters Parameters supplied to the CreateOrUpdate API Management gateway config connection
   *                   operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    gatewayName: string,
    configConnectionName: string,
    parameters: ApiManagementGatewayConfigConnectionResource,
    options?: ApiGatewayConfigConnectionCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ApiGatewayConfigConnectionCreateOrUpdateResponse>,
      ApiGatewayConfigConnectionCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ApiGatewayConfigConnectionCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        gatewayName,
        configConnectionName,
        parameters,
        options,
      },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      ApiGatewayConfigConnectionCreateOrUpdateResponse,
      OperationState<ApiGatewayConfigConnectionCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates or updates an API Management gateway config connection. This is long running operation and
   * could take several minutes to complete.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param gatewayName The name of the API Management gateway.
   * @param configConnectionName The name of the API Management gateway config connection.
   * @param parameters Parameters supplied to the CreateOrUpdate API Management gateway config connection
   *                   operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    gatewayName: string,
    configConnectionName: string,
    parameters: ApiManagementGatewayConfigConnectionResource,
    options?: ApiGatewayConfigConnectionCreateOrUpdateOptionalParams,
  ): Promise<ApiGatewayConfigConnectionCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      gatewayName,
      configConnectionName,
      parameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes an existing API Management gateway config connection.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param gatewayName The name of the API Management gateway.
   * @param configConnectionName The name of the API Management gateway config connection.
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   *                response of the GET request or it should be * for unconditional update.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    gatewayName: string,
    configConnectionName: string,
    ifMatch: string,
    options?: ApiGatewayConfigConnectionDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ApiGatewayConfigConnectionDeleteResponse>,
      ApiGatewayConfigConnectionDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ApiGatewayConfigConnectionDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        gatewayName,
        configConnectionName,
        ifMatch,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      ApiGatewayConfigConnectionDeleteResponse,
      OperationState<ApiGatewayConfigConnectionDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes an existing API Management gateway config connection.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param gatewayName The name of the API Management gateway.
   * @param configConnectionName The name of the API Management gateway config connection.
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   *                response of the GET request or it should be * for unconditional update.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    gatewayName: string,
    configConnectionName: string,
    ifMatch: string,
    options?: ApiGatewayConfigConnectionDeleteOptionalParams,
  ): Promise<ApiGatewayConfigConnectionDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      gatewayName,
      configConnectionName,
      ifMatch,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByGatewayNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param gatewayName The name of the API Management gateway.
   * @param nextLink The nextLink from the previous successful call to the ListByGateway method.
   * @param options The options parameters.
   */
  private _listByGatewayNext(
    resourceGroupName: string,
    gatewayName: string,
    nextLink: string,
    options?: ApiGatewayConfigConnectionListByGatewayNextOptionalParams,
  ): Promise<ApiGatewayConfigConnectionListByGatewayNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, gatewayName, nextLink, options },
      listByGatewayNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByGatewayOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/gateways/{gatewayName}/configConnections",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApiManagementGatewayConfigConnectionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.gatewayName,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/gateways/{gatewayName}/configConnections/{configConnectionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApiManagementGatewayConfigConnectionResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.gatewayName,
    Parameters.subscriptionId,
    Parameters.configConnectionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/gateways/{gatewayName}/configConnections/{configConnectionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ApiManagementGatewayConfigConnectionResource,
    },
    201: {
      bodyMapper: Mappers.ApiManagementGatewayConfigConnectionResource,
    },
    202: {
      bodyMapper: Mappers.ApiManagementGatewayConfigConnectionResource,
    },
    204: {
      bodyMapper: Mappers.ApiManagementGatewayConfigConnectionResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters46,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.gatewayName,
    Parameters.subscriptionId,
    Parameters.configConnectionName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/gateways/{gatewayName}/configConnections/{configConnectionName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.ApiGatewayConfigConnectionDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.ApiGatewayConfigConnectionDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.ApiGatewayConfigConnectionDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.ApiGatewayConfigConnectionDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.gatewayName,
    Parameters.subscriptionId,
    Parameters.configConnectionName,
  ],
  headerParameters: [Parameters.accept, Parameters.ifMatch1],
  serializer,
};
const listByGatewayNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApiManagementGatewayConfigConnectionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.gatewayName,
    Parameters.subscriptionId,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
