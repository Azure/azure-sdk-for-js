/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { ApiManagementGatewaySkus } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { ApiManagementClient } from "../apiManagementClient.js";
import {
  GatewayResourceSkuResult,
  ApiManagementGatewaySkusListAvailableSkusNextOptionalParams,
  ApiManagementGatewaySkusListAvailableSkusOptionalParams,
  ApiManagementGatewaySkusListAvailableSkusResponse,
  ApiManagementGatewaySkusListAvailableSkusNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing ApiManagementGatewaySkus operations. */
export class ApiManagementGatewaySkusImpl implements ApiManagementGatewaySkus {
  private readonly client: ApiManagementClient;

  /**
   * Initialize a new instance of the class ApiManagementGatewaySkus class.
   * @param client Reference to the service client
   */
  constructor(client: ApiManagementClient) {
    this.client = client;
  }

  /**
   * Gets all available SKU for a given API Management gateway
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param gatewayName The name of the API Management gateway.
   * @param options The options parameters.
   */
  public listAvailableSkus(
    resourceGroupName: string,
    gatewayName: string,
    options?: ApiManagementGatewaySkusListAvailableSkusOptionalParams,
  ): PagedAsyncIterableIterator<GatewayResourceSkuResult> {
    const iter = this.listAvailableSkusPagingAll(
      resourceGroupName,
      gatewayName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listAvailableSkusPagingPage(
          resourceGroupName,
          gatewayName,
          options,
          settings,
        );
      },
    };
  }

  private async *listAvailableSkusPagingPage(
    resourceGroupName: string,
    gatewayName: string,
    options?: ApiManagementGatewaySkusListAvailableSkusOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<GatewayResourceSkuResult[]> {
    let result: ApiManagementGatewaySkusListAvailableSkusResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listAvailableSkus(
        resourceGroupName,
        gatewayName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listAvailableSkusNext(
        resourceGroupName,
        gatewayName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listAvailableSkusPagingAll(
    resourceGroupName: string,
    gatewayName: string,
    options?: ApiManagementGatewaySkusListAvailableSkusOptionalParams,
  ): AsyncIterableIterator<GatewayResourceSkuResult> {
    for await (const page of this.listAvailableSkusPagingPage(
      resourceGroupName,
      gatewayName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets all available SKU for a given API Management gateway
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param gatewayName The name of the API Management gateway.
   * @param options The options parameters.
   */
  private _listAvailableSkus(
    resourceGroupName: string,
    gatewayName: string,
    options?: ApiManagementGatewaySkusListAvailableSkusOptionalParams,
  ): Promise<ApiManagementGatewaySkusListAvailableSkusResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, gatewayName, options },
      listAvailableSkusOperationSpec,
    );
  }

  /**
   * ListAvailableSkusNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param gatewayName The name of the API Management gateway.
   * @param nextLink The nextLink from the previous successful call to the ListAvailableSkus method.
   * @param options The options parameters.
   */
  private _listAvailableSkusNext(
    resourceGroupName: string,
    gatewayName: string,
    nextLink: string,
    options?: ApiManagementGatewaySkusListAvailableSkusNextOptionalParams,
  ): Promise<ApiManagementGatewaySkusListAvailableSkusNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, gatewayName, nextLink, options },
      listAvailableSkusNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listAvailableSkusOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/gateways/{gatewayName}/skus",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GatewayResourceSkuResults,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.gatewayName,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listAvailableSkusNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GatewayResourceSkuResults,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.gatewayName,
    Parameters.subscriptionId,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
