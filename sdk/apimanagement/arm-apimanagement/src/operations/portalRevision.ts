/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/portalRevisionMappers";
import * as Parameters from "../models/parameters";
import { ApiManagementClientContext } from "../apiManagementClientContext";

/** Class representing a PortalRevision. */
export class PortalRevision {
  private readonly client: ApiManagementClientContext;

  /**
   * Create a PortalRevision.
   * @param {ApiManagementClientContext} client Reference to the service client.
   */
  constructor(client: ApiManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists a collection of developer portal revision entities.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param [options] The optional parameters
   * @returns Promise<Models.PortalRevisionListByServiceResponse>
   */
  listByService(resourceGroupName: string, serviceName: string, options?: Models.PortalRevisionListByServiceOptionalParams): Promise<Models.PortalRevisionListByServiceResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param callback The callback
   */
  listByService(resourceGroupName: string, serviceName: string, callback: msRest.ServiceCallback<Models.PortalRevisionCollection>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByService(resourceGroupName: string, serviceName: string, options: Models.PortalRevisionListByServiceOptionalParams, callback: msRest.ServiceCallback<Models.PortalRevisionCollection>): void;
  listByService(resourceGroupName: string, serviceName: string, options?: Models.PortalRevisionListByServiceOptionalParams | msRest.ServiceCallback<Models.PortalRevisionCollection>, callback?: msRest.ServiceCallback<Models.PortalRevisionCollection>): Promise<Models.PortalRevisionListByServiceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        options
      },
      listByServiceOperationSpec,
      callback) as Promise<Models.PortalRevisionListByServiceResponse>;
  }

  /**
   * Gets developer portal revision specified by its identifier.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param portalRevisionId Portal revision identifier. Must be unique in the current API Management
   * service instance.
   * @param [options] The optional parameters
   * @returns Promise<Models.PortalRevisionGetEntityTagResponse>
   */
  getEntityTag(resourceGroupName: string, serviceName: string, portalRevisionId: string, options?: msRest.RequestOptionsBase): Promise<Models.PortalRevisionGetEntityTagResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param portalRevisionId Portal revision identifier. Must be unique in the current API Management
   * service instance.
   * @param callback The callback
   */
  getEntityTag(resourceGroupName: string, serviceName: string, portalRevisionId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param portalRevisionId Portal revision identifier. Must be unique in the current API Management
   * service instance.
   * @param options The optional parameters
   * @param callback The callback
   */
  getEntityTag(resourceGroupName: string, serviceName: string, portalRevisionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getEntityTag(resourceGroupName: string, serviceName: string, portalRevisionId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.PortalRevisionGetEntityTagResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        portalRevisionId,
        options
      },
      getEntityTagOperationSpec,
      callback) as Promise<Models.PortalRevisionGetEntityTagResponse>;
  }

  /**
   * Gets developer portal revision specified by its identifier.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param portalRevisionId Portal revision identifier. Must be unique in the current API Management
   * service instance.
   * @param [options] The optional parameters
   * @returns Promise<Models.PortalRevisionGetResponse>
   */
  get(resourceGroupName: string, serviceName: string, portalRevisionId: string, options?: msRest.RequestOptionsBase): Promise<Models.PortalRevisionGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param portalRevisionId Portal revision identifier. Must be unique in the current API Management
   * service instance.
   * @param callback The callback
   */
  get(resourceGroupName: string, serviceName: string, portalRevisionId: string, callback: msRest.ServiceCallback<Models.PortalRevisionContract>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param portalRevisionId Portal revision identifier. Must be unique in the current API Management
   * service instance.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, serviceName: string, portalRevisionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PortalRevisionContract>): void;
  get(resourceGroupName: string, serviceName: string, portalRevisionId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PortalRevisionContract>, callback?: msRest.ServiceCallback<Models.PortalRevisionContract>): Promise<Models.PortalRevisionGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        portalRevisionId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.PortalRevisionGetResponse>;
  }

  /**
   * Creates a new developer portal revision.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param portalRevisionId Portal revision identifier. Must be unique in the current API Management
   * service instance.
   * @param parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.PortalRevisionCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, serviceName: string, portalRevisionId: string, parameters: Models.PortalRevisionContract, options?: msRest.RequestOptionsBase): Promise<Models.PortalRevisionCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,serviceName,portalRevisionId,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.PortalRevisionCreateOrUpdateResponse>;
  }

  /**
   * Updates the description of specified portal revision or makes it current.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param portalRevisionId Portal revision identifier. Must be unique in the current API Management
   * service instance.
   * @param parameters
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   * response of the GET request or it should be * for unconditional update.
   * @param [options] The optional parameters
   * @returns Promise<Models.PortalRevisionUpdateResponse>
   */
  update(resourceGroupName: string, serviceName: string, portalRevisionId: string, parameters: Models.PortalRevisionContract, ifMatch: string, options?: msRest.RequestOptionsBase): Promise<Models.PortalRevisionUpdateResponse> {
    return this.beginUpdate(resourceGroupName,serviceName,portalRevisionId,parameters,ifMatch,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.PortalRevisionUpdateResponse>;
  }

  /**
   * Creates a new developer portal revision.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param portalRevisionId Portal revision identifier. Must be unique in the current API Management
   * service instance.
   * @param parameters
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, serviceName: string, portalRevisionId: string, parameters: Models.PortalRevisionContract, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        serviceName,
        portalRevisionId,
        parameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Updates the description of specified portal revision or makes it current.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param portalRevisionId Portal revision identifier. Must be unique in the current API Management
   * service instance.
   * @param parameters
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   * response of the GET request or it should be * for unconditional update.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, serviceName: string, portalRevisionId: string, parameters: Models.PortalRevisionContract, ifMatch: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        serviceName,
        portalRevisionId,
        parameters,
        ifMatch,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Lists a collection of developer portal revision entities.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PortalRevisionListByServiceNextResponse>
   */
  listByServiceNext(nextPageLink: string, options?: Models.PortalRevisionListByServiceNextOptionalParams): Promise<Models.PortalRevisionListByServiceNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByServiceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PortalRevisionCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByServiceNext(nextPageLink: string, options: Models.PortalRevisionListByServiceNextOptionalParams, callback: msRest.ServiceCallback<Models.PortalRevisionCollection>): void;
  listByServiceNext(nextPageLink: string, options?: Models.PortalRevisionListByServiceNextOptionalParams | msRest.ServiceCallback<Models.PortalRevisionCollection>, callback?: msRest.ServiceCallback<Models.PortalRevisionCollection>): Promise<Models.PortalRevisionListByServiceNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByServiceNextOperationSpec,
      callback) as Promise<Models.PortalRevisionListByServiceNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/portalRevisions",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.filter0,
    Parameters.top,
    Parameters.skip,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PortalRevisionCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getEntityTagOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/portalRevisions/{portalRevisionId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.portalRevisionId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      headersMapper: Mappers.PortalRevisionGetEntityTagHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.PortalRevisionGetEntityTagHeaders
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/portalRevisions/{portalRevisionId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.portalRevisionId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PortalRevisionContract,
      headersMapper: Mappers.PortalRevisionGetHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.PortalRevisionGetHeaders
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/portalRevisions/{portalRevisionId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.portalRevisionId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.PortalRevisionContract,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.PortalRevisionContract,
      headersMapper: Mappers.PortalRevisionCreateOrUpdateHeaders
    },
    202: {
      headersMapper: Mappers.PortalRevisionCreateOrUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.PortalRevisionCreateOrUpdateHeaders
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/portalRevisions/{portalRevisionId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.portalRevisionId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch1,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.PortalRevisionContract,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PortalRevisionContract,
      headersMapper: Mappers.PortalRevisionUpdateHeaders
    },
    202: {
      headersMapper: Mappers.PortalRevisionUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.PortalRevisionUpdateHeaders
    }
  },
  serializer
};

const listByServiceNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.filter0,
    Parameters.top,
    Parameters.skip,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PortalRevisionCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
