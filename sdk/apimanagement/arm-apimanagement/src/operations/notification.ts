/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/notificationMappers";
import * as Parameters from "../models/parameters";
import { ApiManagementClientContext } from "../apiManagementClientContext";

/** Class representing a Notification. */
export class Notification {
  private readonly client: ApiManagementClientContext;

  /**
   * Create a Notification.
   * @param {ApiManagementClientContext} client Reference to the service client.
   */
  constructor(client: ApiManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists a collection of properties defined within a service instance.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param [options] The optional parameters
   * @returns Promise<Models.NotificationListByServiceResponse>
   */
  listByService(resourceGroupName: string, serviceName: string, options?: Models.NotificationListByServiceOptionalParams): Promise<Models.NotificationListByServiceResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param callback The callback
   */
  listByService(resourceGroupName: string, serviceName: string, callback: coreHttp.ServiceCallback<Models.NotificationCollection>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByService(resourceGroupName: string, serviceName: string, options: Models.NotificationListByServiceOptionalParams, callback: coreHttp.ServiceCallback<Models.NotificationCollection>): void;
  listByService(resourceGroupName: string, serviceName: string, options?: Models.NotificationListByServiceOptionalParams | coreHttp.ServiceCallback<Models.NotificationCollection>, callback?: coreHttp.ServiceCallback<Models.NotificationCollection>): Promise<Models.NotificationListByServiceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        options
      },
      listByServiceOperationSpec,
      callback) as Promise<Models.NotificationListByServiceResponse>;
  }

  /**
   * Gets the details of the Notification specified by its identifier.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param notificationName Notification Name Identifier. Possible values include:
   * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
   * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
   * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
   * @param [options] The optional parameters
   * @returns Promise<Models.NotificationGetResponse>
   */
  get(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, options?: coreHttp.RequestOptionsBase): Promise<Models.NotificationGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param notificationName Notification Name Identifier. Possible values include:
   * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
   * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
   * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
   * @param callback The callback
   */
  get(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, callback: coreHttp.ServiceCallback<Models.NotificationContract>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param notificationName Notification Name Identifier. Possible values include:
   * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
   * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
   * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.NotificationContract>): void;
  get(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.NotificationContract>, callback?: coreHttp.ServiceCallback<Models.NotificationContract>): Promise<Models.NotificationGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        notificationName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.NotificationGetResponse>;
  }

  /**
   * Create or Update API Management publisher notification.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param notificationName Notification Name Identifier. Possible values include:
   * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
   * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
   * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
   * @param [options] The optional parameters
   * @returns Promise<Models.NotificationCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, options?: Models.NotificationCreateOrUpdateOptionalParams): Promise<Models.NotificationCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param notificationName Notification Name Identifier. Possible values include:
   * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
   * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
   * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, callback: coreHttp.ServiceCallback<Models.NotificationContract>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param notificationName Notification Name Identifier. Possible values include:
   * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
   * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
   * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, options: Models.NotificationCreateOrUpdateOptionalParams, callback: coreHttp.ServiceCallback<Models.NotificationContract>): void;
  createOrUpdate(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, options?: Models.NotificationCreateOrUpdateOptionalParams | coreHttp.ServiceCallback<Models.NotificationContract>, callback?: coreHttp.ServiceCallback<Models.NotificationContract>): Promise<Models.NotificationCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        notificationName,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.NotificationCreateOrUpdateResponse>;
  }

  /**
   * Lists a collection of properties defined within a service instance.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.NotificationListByServiceNextResponse>
   */
  listByServiceNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase): Promise<Models.NotificationListByServiceNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByServiceNext(nextPageLink: string, callback: coreHttp.ServiceCallback<Models.NotificationCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByServiceNext(nextPageLink: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.NotificationCollection>): void;
  listByServiceNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.NotificationCollection>, callback?: coreHttp.ServiceCallback<Models.NotificationCollection>): Promise<Models.NotificationListByServiceNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByServiceNextOperationSpec,
      callback) as Promise<Models.NotificationListByServiceNextResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const listByServiceOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/notifications",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NotificationCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/notifications/{notificationName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.notificationName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NotificationContract
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/notifications/{notificationName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.notificationName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch0,
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NotificationContract
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByServiceNextOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NotificationCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
