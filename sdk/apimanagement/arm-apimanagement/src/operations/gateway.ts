/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/gatewayMappers";
import * as Parameters from "../models/parameters";
import { ApiManagementClientContext } from "../apiManagementClientContext";

/** Class representing a Gateway. */
export class Gateway {
  private readonly client: ApiManagementClientContext;

  /**
   * Create a Gateway.
   * @param {ApiManagementClientContext} client Reference to the service client.
   */
  constructor(client: ApiManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists a collection of gateways registered with service instance.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param [options] The optional parameters
   * @returns Promise<Models.GatewayListByServiceResponse>
   */
  listByService(resourceGroupName: string, serviceName: string, options?: Models.GatewayListByServiceOptionalParams): Promise<Models.GatewayListByServiceResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param callback The callback
   */
  listByService(resourceGroupName: string, serviceName: string, callback: msRest.ServiceCallback<Models.GatewayCollection>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByService(resourceGroupName: string, serviceName: string, options: Models.GatewayListByServiceOptionalParams, callback: msRest.ServiceCallback<Models.GatewayCollection>): void;
  listByService(resourceGroupName: string, serviceName: string, options?: Models.GatewayListByServiceOptionalParams | msRest.ServiceCallback<Models.GatewayCollection>, callback?: msRest.ServiceCallback<Models.GatewayCollection>): Promise<Models.GatewayListByServiceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        options
      },
      listByServiceOperationSpec,
      callback) as Promise<Models.GatewayListByServiceResponse>;
  }

  /**
   * Gets the entity state (Etag) version of the Gateway specified by its identifier.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param [options] The optional parameters
   * @returns Promise<Models.GatewayGetEntityTagResponse>
   */
  getEntityTag(resourceGroupName: string, serviceName: string, gatewayId: string, options?: msRest.RequestOptionsBase): Promise<Models.GatewayGetEntityTagResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param callback The callback
   */
  getEntityTag(resourceGroupName: string, serviceName: string, gatewayId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param options The optional parameters
   * @param callback The callback
   */
  getEntityTag(resourceGroupName: string, serviceName: string, gatewayId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getEntityTag(resourceGroupName: string, serviceName: string, gatewayId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.GatewayGetEntityTagResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        gatewayId,
        options
      },
      getEntityTagOperationSpec,
      callback) as Promise<Models.GatewayGetEntityTagResponse>;
  }

  /**
   * Gets the details of the Gateway specified by its identifier.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param [options] The optional parameters
   * @returns Promise<Models.GatewayGetResponse>
   */
  get(resourceGroupName: string, serviceName: string, gatewayId: string, options?: msRest.RequestOptionsBase): Promise<Models.GatewayGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param callback The callback
   */
  get(resourceGroupName: string, serviceName: string, gatewayId: string, callback: msRest.ServiceCallback<Models.GatewayContract>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, serviceName: string, gatewayId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GatewayContract>): void;
  get(resourceGroupName: string, serviceName: string, gatewayId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GatewayContract>, callback?: msRest.ServiceCallback<Models.GatewayContract>): Promise<Models.GatewayGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        gatewayId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.GatewayGetResponse>;
  }

  /**
   * Creates or updates a Gateway to be used in Api Management instance.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.GatewayCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: Models.GatewayContract, options?: Models.GatewayCreateOrUpdateOptionalParams): Promise<Models.GatewayCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: Models.GatewayContract, callback: msRest.ServiceCallback<Models.GatewayContract>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param parameters
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: Models.GatewayContract, options: Models.GatewayCreateOrUpdateOptionalParams, callback: msRest.ServiceCallback<Models.GatewayContract>): void;
  createOrUpdate(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: Models.GatewayContract, options?: Models.GatewayCreateOrUpdateOptionalParams | msRest.ServiceCallback<Models.GatewayContract>, callback?: msRest.ServiceCallback<Models.GatewayContract>): Promise<Models.GatewayCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        gatewayId,
        parameters,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.GatewayCreateOrUpdateResponse>;
  }

  /**
   * Updates the details of the gateway specified by its identifier.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param parameters
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   * response of the GET request or it should be * for unconditional update.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  update(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: Models.GatewayContract, ifMatch: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param parameters
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   * response of the GET request or it should be * for unconditional update.
   * @param callback The callback
   */
  update(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: Models.GatewayContract, ifMatch: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param parameters
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   * response of the GET request or it should be * for unconditional update.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: Models.GatewayContract, ifMatch: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  update(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: Models.GatewayContract, ifMatch: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        gatewayId,
        parameters,
        ifMatch,
        options
      },
      updateOperationSpec,
      callback);
  }

  /**
   * Deletes specific Gateway.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   * response of the GET request or it should be * for unconditional update.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, serviceName: string, gatewayId: string, ifMatch: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   * response of the GET request or it should be * for unconditional update.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, serviceName: string, gatewayId: string, ifMatch: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   * response of the GET request or it should be * for unconditional update.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, serviceName: string, gatewayId: string, ifMatch: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, serviceName: string, gatewayId: string, ifMatch: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        gatewayId,
        ifMatch,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Retrieves gateway keys.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param [options] The optional parameters
   * @returns Promise<Models.GatewayListKeysResponse>
   */
  listKeys(resourceGroupName: string, serviceName: string, gatewayId: string, options?: msRest.RequestOptionsBase): Promise<Models.GatewayListKeysResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param callback The callback
   */
  listKeys(resourceGroupName: string, serviceName: string, gatewayId: string, callback: msRest.ServiceCallback<Models.GatewayKeysContract>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param options The optional parameters
   * @param callback The callback
   */
  listKeys(resourceGroupName: string, serviceName: string, gatewayId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GatewayKeysContract>): void;
  listKeys(resourceGroupName: string, serviceName: string, gatewayId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GatewayKeysContract>, callback?: msRest.ServiceCallback<Models.GatewayKeysContract>): Promise<Models.GatewayListKeysResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        gatewayId,
        options
      },
      listKeysOperationSpec,
      callback) as Promise<Models.GatewayListKeysResponse>;
  }

  /**
   * Regenerates specified gateway key invalidating any tokens created with it.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param parameters
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  regenerateKey(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: Models.GatewayKeyRegenerationRequestContract, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param parameters
   * @param callback The callback
   */
  regenerateKey(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: Models.GatewayKeyRegenerationRequestContract, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param parameters
   * @param options The optional parameters
   * @param callback The callback
   */
  regenerateKey(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: Models.GatewayKeyRegenerationRequestContract, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  regenerateKey(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: Models.GatewayKeyRegenerationRequestContract, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        gatewayId,
        parameters,
        options
      },
      regenerateKeyOperationSpec,
      callback);
  }

  /**
   * Gets the Shared Access Authorization Token for the gateway.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.GatewayGenerateTokenResponse>
   */
  generateToken(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: Models.GatewayTokenRequestContract, options?: msRest.RequestOptionsBase): Promise<Models.GatewayGenerateTokenResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param parameters
   * @param callback The callback
   */
  generateToken(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: Models.GatewayTokenRequestContract, callback: msRest.ServiceCallback<Models.GatewayTokenContract>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param parameters
   * @param options The optional parameters
   * @param callback The callback
   */
  generateToken(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: Models.GatewayTokenRequestContract, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GatewayTokenContract>): void;
  generateToken(resourceGroupName: string, serviceName: string, gatewayId: string, parameters: Models.GatewayTokenRequestContract, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GatewayTokenContract>, callback?: msRest.ServiceCallback<Models.GatewayTokenContract>): Promise<Models.GatewayGenerateTokenResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        gatewayId,
        parameters,
        options
      },
      generateTokenOperationSpec,
      callback) as Promise<Models.GatewayGenerateTokenResponse>;
  }

  /**
   * Lists a collection of gateways registered with service instance.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.GatewayListByServiceNextResponse>
   */
  listByServiceNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.GatewayListByServiceNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByServiceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.GatewayCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByServiceNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GatewayCollection>): void;
  listByServiceNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GatewayCollection>, callback?: msRest.ServiceCallback<Models.GatewayCollection>): Promise<Models.GatewayListByServiceNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByServiceNextOperationSpec,
      callback) as Promise<Models.GatewayListByServiceNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GatewayCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getEntityTagOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.gatewayId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      headersMapper: Mappers.GatewayGetEntityTagHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.gatewayId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GatewayContract,
      headersMapper: Mappers.GatewayGetHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.gatewayId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch0,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.GatewayContract,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.GatewayContract,
      headersMapper: Mappers.GatewayCreateOrUpdateHeaders
    },
    201: {
      bodyMapper: Mappers.GatewayContract,
      headersMapper: Mappers.GatewayCreateOrUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.gatewayId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch1,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.GatewayContract,
      required: true
    }
  },
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.gatewayId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch1,
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/listKeys",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.gatewayId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GatewayKeysContract,
      headersMapper: Mappers.GatewayListKeysHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const regenerateKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/regenerateKey",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.gatewayId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.GatewayKeyRegenerationRequestContract,
      required: true
    }
  },
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const generateTokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/generateToken",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.gatewayId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.GatewayTokenRequestContract,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.GatewayTokenContract
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByServiceNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GatewayCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
