/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/gatewayHostnameConfigurationMappers";
import * as Parameters from "../models/parameters";
import { ApiManagementClientContext } from "../apiManagementClientContext";

/** Class representing a GatewayHostnameConfiguration. */
export class GatewayHostnameConfiguration {
  private readonly client: ApiManagementClientContext;

  /**
   * Create a GatewayHostnameConfiguration.
   * @param {ApiManagementClientContext} client Reference to the service client.
   */
  constructor(client: ApiManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists the collection of hostname configurations for the specified gateway.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param [options] The optional parameters
   * @returns Promise<Models.GatewayHostnameConfigurationListByServiceResponse>
   */
  listByService(resourceGroupName: string, serviceName: string, gatewayId: string, options?: Models.GatewayHostnameConfigurationListByServiceOptionalParams): Promise<Models.GatewayHostnameConfigurationListByServiceResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param callback The callback
   */
  listByService(resourceGroupName: string, serviceName: string, gatewayId: string, callback: msRest.ServiceCallback<Models.GatewayHostnameConfigurationCollection>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param options The optional parameters
   * @param callback The callback
   */
  listByService(resourceGroupName: string, serviceName: string, gatewayId: string, options: Models.GatewayHostnameConfigurationListByServiceOptionalParams, callback: msRest.ServiceCallback<Models.GatewayHostnameConfigurationCollection>): void;
  listByService(resourceGroupName: string, serviceName: string, gatewayId: string, options?: Models.GatewayHostnameConfigurationListByServiceOptionalParams | msRest.ServiceCallback<Models.GatewayHostnameConfigurationCollection>, callback?: msRest.ServiceCallback<Models.GatewayHostnameConfigurationCollection>): Promise<Models.GatewayHostnameConfigurationListByServiceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        gatewayId,
        options
      },
      listByServiceOperationSpec,
      callback) as Promise<Models.GatewayHostnameConfigurationListByServiceResponse>;
  }

  /**
   * Checks that hostname configuration entity specified by identifier exists for specified Gateway
   * entity.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent
   * Gateway entity.
   * @param [options] The optional parameters
   * @returns Promise<Models.GatewayHostnameConfigurationGetEntityTagResponse>
   */
  getEntityTag(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, options?: msRest.RequestOptionsBase): Promise<Models.GatewayHostnameConfigurationGetEntityTagResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent
   * Gateway entity.
   * @param callback The callback
   */
  getEntityTag(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent
   * Gateway entity.
   * @param options The optional parameters
   * @param callback The callback
   */
  getEntityTag(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getEntityTag(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.GatewayHostnameConfigurationGetEntityTagResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        gatewayId,
        hcId,
        options
      },
      getEntityTagOperationSpec,
      callback) as Promise<Models.GatewayHostnameConfigurationGetEntityTagResponse>;
  }

  /**
   * Get details of a hostname configuration
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent
   * Gateway entity.
   * @param [options] The optional parameters
   * @returns Promise<Models.GatewayHostnameConfigurationGetResponse>
   */
  get(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, options?: msRest.RequestOptionsBase): Promise<Models.GatewayHostnameConfigurationGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent
   * Gateway entity.
   * @param callback The callback
   */
  get(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, callback: msRest.ServiceCallback<Models.GatewayHostnameConfigurationContract>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent
   * Gateway entity.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GatewayHostnameConfigurationContract>): void;
  get(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GatewayHostnameConfigurationContract>, callback?: msRest.ServiceCallback<Models.GatewayHostnameConfigurationContract>): Promise<Models.GatewayHostnameConfigurationGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        gatewayId,
        hcId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.GatewayHostnameConfigurationGetResponse>;
  }

  /**
   * Creates of updates hostname configuration for a Gateway.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent
   * Gateway entity.
   * @param parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.GatewayHostnameConfigurationCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, parameters: Models.GatewayHostnameConfigurationContract, options?: Models.GatewayHostnameConfigurationCreateOrUpdateOptionalParams): Promise<Models.GatewayHostnameConfigurationCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent
   * Gateway entity.
   * @param parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, parameters: Models.GatewayHostnameConfigurationContract, callback: msRest.ServiceCallback<Models.GatewayHostnameConfigurationContract>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent
   * Gateway entity.
   * @param parameters
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, parameters: Models.GatewayHostnameConfigurationContract, options: Models.GatewayHostnameConfigurationCreateOrUpdateOptionalParams, callback: msRest.ServiceCallback<Models.GatewayHostnameConfigurationContract>): void;
  createOrUpdate(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, parameters: Models.GatewayHostnameConfigurationContract, options?: Models.GatewayHostnameConfigurationCreateOrUpdateOptionalParams | msRest.ServiceCallback<Models.GatewayHostnameConfigurationContract>, callback?: msRest.ServiceCallback<Models.GatewayHostnameConfigurationContract>): Promise<Models.GatewayHostnameConfigurationCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        gatewayId,
        hcId,
        parameters,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.GatewayHostnameConfigurationCreateOrUpdateResponse>;
  }

  /**
   * Deletes the specified hostname configuration from the specified Gateway.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent
   * Gateway entity.
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   * response of the GET request or it should be * for unconditional update.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, ifMatch: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent
   * Gateway entity.
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   * response of the GET request or it should be * for unconditional update.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, ifMatch: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service
   * instance. Must not have value 'managed'
   * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent
   * Gateway entity.
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   * response of the GET request or it should be * for unconditional update.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, ifMatch: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, serviceName: string, gatewayId: string, hcId: string, ifMatch: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        gatewayId,
        hcId,
        ifMatch,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Lists the collection of hostname configurations for the specified gateway.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.GatewayHostnameConfigurationListByServiceNextResponse>
   */
  listByServiceNext(nextPageLink: string, options?: Models.GatewayHostnameConfigurationListByServiceNextOptionalParams): Promise<Models.GatewayHostnameConfigurationListByServiceNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByServiceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.GatewayHostnameConfigurationCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByServiceNext(nextPageLink: string, options: Models.GatewayHostnameConfigurationListByServiceNextOptionalParams, callback: msRest.ServiceCallback<Models.GatewayHostnameConfigurationCollection>): void;
  listByServiceNext(nextPageLink: string, options?: Models.GatewayHostnameConfigurationListByServiceNextOptionalParams | msRest.ServiceCallback<Models.GatewayHostnameConfigurationCollection>, callback?: msRest.ServiceCallback<Models.GatewayHostnameConfigurationCollection>): Promise<Models.GatewayHostnameConfigurationListByServiceNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByServiceNextOperationSpec,
      callback) as Promise<Models.GatewayHostnameConfigurationListByServiceNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/hostnameConfigurations",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.gatewayId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.filter0,
    Parameters.top,
    Parameters.skip,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GatewayHostnameConfigurationCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getEntityTagOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/hostnameConfigurations/{hcId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.gatewayId,
    Parameters.hcId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      headersMapper: Mappers.GatewayHostnameConfigurationGetEntityTagHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.GatewayHostnameConfigurationGetEntityTagHeaders
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/hostnameConfigurations/{hcId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.gatewayId,
    Parameters.hcId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GatewayHostnameConfigurationContract,
      headersMapper: Mappers.GatewayHostnameConfigurationGetHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.GatewayHostnameConfigurationGetHeaders
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/hostnameConfigurations/{hcId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.gatewayId,
    Parameters.hcId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch0,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.GatewayHostnameConfigurationContract,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.GatewayHostnameConfigurationContract,
      headersMapper: Mappers.GatewayHostnameConfigurationCreateOrUpdateHeaders
    },
    201: {
      bodyMapper: Mappers.GatewayHostnameConfigurationContract,
      headersMapper: Mappers.GatewayHostnameConfigurationCreateOrUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.GatewayHostnameConfigurationCreateOrUpdateHeaders
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/hostnameConfigurations/{hcId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.gatewayId,
    Parameters.hcId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch1,
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByServiceNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.filter0,
    Parameters.top,
    Parameters.skip,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GatewayHostnameConfigurationCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
