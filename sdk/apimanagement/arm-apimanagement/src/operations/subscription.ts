/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/subscriptionMappers";
import * as Parameters from "../models/parameters";
import { ApiManagementClientContext } from "../apiManagementClientContext";

/** Class representing a Subscription. */
export class Subscription {
  private readonly client: ApiManagementClientContext;

  /**
   * Create a Subscription.
   * @param {ApiManagementClientContext} client Reference to the service client.
   */
  constructor(client: ApiManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists all subscriptions of the API Management service instance.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionListResponse>
   */
  list(resourceGroupName: string, serviceName: string, options?: Models.SubscriptionListOptionalParams): Promise<Models.SubscriptionListResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param callback The callback
   */
  list(resourceGroupName: string, serviceName: string, callback: msRest.ServiceCallback<Models.SubscriptionCollection>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, serviceName: string, options: Models.SubscriptionListOptionalParams, callback: msRest.ServiceCallback<Models.SubscriptionCollection>): void;
  list(resourceGroupName: string, serviceName: string, options?: Models.SubscriptionListOptionalParams | msRest.ServiceCallback<Models.SubscriptionCollection>, callback?: msRest.ServiceCallback<Models.SubscriptionCollection>): Promise<Models.SubscriptionListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.SubscriptionListResponse>;
  }

  /**
   * Gets the entity state (Etag) version of the apimanagement subscription specified by its
   * identifier.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param sid Subscription entity Identifier. The entity represents the association between a user
   * and a product in API Management.
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionGetEntityTagResponse>
   */
  getEntityTag(resourceGroupName: string, serviceName: string, sid: string, options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionGetEntityTagResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param sid Subscription entity Identifier. The entity represents the association between a user
   * and a product in API Management.
   * @param callback The callback
   */
  getEntityTag(resourceGroupName: string, serviceName: string, sid: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param sid Subscription entity Identifier. The entity represents the association between a user
   * and a product in API Management.
   * @param options The optional parameters
   * @param callback The callback
   */
  getEntityTag(resourceGroupName: string, serviceName: string, sid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getEntityTag(resourceGroupName: string, serviceName: string, sid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.SubscriptionGetEntityTagResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        sid,
        options
      },
      getEntityTagOperationSpec,
      callback) as Promise<Models.SubscriptionGetEntityTagResponse>;
  }

  /**
   * Gets the specified Subscription entity.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param sid Subscription entity Identifier. The entity represents the association between a user
   * and a product in API Management.
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionGetResponse>
   */
  get(resourceGroupName: string, serviceName: string, sid: string, options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param sid Subscription entity Identifier. The entity represents the association between a user
   * and a product in API Management.
   * @param callback The callback
   */
  get(resourceGroupName: string, serviceName: string, sid: string, callback: msRest.ServiceCallback<Models.SubscriptionContract>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param sid Subscription entity Identifier. The entity represents the association between a user
   * and a product in API Management.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, serviceName: string, sid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SubscriptionContract>): void;
  get(resourceGroupName: string, serviceName: string, sid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SubscriptionContract>, callback?: msRest.ServiceCallback<Models.SubscriptionContract>): Promise<Models.SubscriptionGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        sid,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.SubscriptionGetResponse>;
  }

  /**
   * Creates or updates the subscription of specified user to the specified product.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param sid Subscription entity Identifier. The entity represents the association between a user
   * and a product in API Management.
   * @param parameters Create parameters.
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, serviceName: string, sid: string, parameters: Models.SubscriptionCreateParameters, options?: Models.SubscriptionCreateOrUpdateOptionalParams): Promise<Models.SubscriptionCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param sid Subscription entity Identifier. The entity represents the association between a user
   * and a product in API Management.
   * @param parameters Create parameters.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, serviceName: string, sid: string, parameters: Models.SubscriptionCreateParameters, callback: msRest.ServiceCallback<Models.SubscriptionContract>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param sid Subscription entity Identifier. The entity represents the association between a user
   * and a product in API Management.
   * @param parameters Create parameters.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, serviceName: string, sid: string, parameters: Models.SubscriptionCreateParameters, options: Models.SubscriptionCreateOrUpdateOptionalParams, callback: msRest.ServiceCallback<Models.SubscriptionContract>): void;
  createOrUpdate(resourceGroupName: string, serviceName: string, sid: string, parameters: Models.SubscriptionCreateParameters, options?: Models.SubscriptionCreateOrUpdateOptionalParams | msRest.ServiceCallback<Models.SubscriptionContract>, callback?: msRest.ServiceCallback<Models.SubscriptionContract>): Promise<Models.SubscriptionCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        sid,
        parameters,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.SubscriptionCreateOrUpdateResponse>;
  }

  /**
   * Updates the details of a subscription specified by its identifier.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param sid Subscription entity Identifier. The entity represents the association between a user
   * and a product in API Management.
   * @param parameters Update parameters.
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   * response of the GET request or it should be * for unconditional update.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  update(resourceGroupName: string, serviceName: string, sid: string, parameters: Models.SubscriptionUpdateParameters, ifMatch: string, options?: Models.SubscriptionUpdateOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param sid Subscription entity Identifier. The entity represents the association between a user
   * and a product in API Management.
   * @param parameters Update parameters.
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   * response of the GET request or it should be * for unconditional update.
   * @param callback The callback
   */
  update(resourceGroupName: string, serviceName: string, sid: string, parameters: Models.SubscriptionUpdateParameters, ifMatch: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param sid Subscription entity Identifier. The entity represents the association between a user
   * and a product in API Management.
   * @param parameters Update parameters.
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   * response of the GET request or it should be * for unconditional update.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, serviceName: string, sid: string, parameters: Models.SubscriptionUpdateParameters, ifMatch: string, options: Models.SubscriptionUpdateOptionalParams, callback: msRest.ServiceCallback<void>): void;
  update(resourceGroupName: string, serviceName: string, sid: string, parameters: Models.SubscriptionUpdateParameters, ifMatch: string, options?: Models.SubscriptionUpdateOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        sid,
        parameters,
        ifMatch,
        options
      },
      updateOperationSpec,
      callback);
  }

  /**
   * Deletes the specified subscription.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param sid Subscription entity Identifier. The entity represents the association between a user
   * and a product in API Management.
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   * response of the GET request or it should be * for unconditional update.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, serviceName: string, sid: string, ifMatch: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param sid Subscription entity Identifier. The entity represents the association between a user
   * and a product in API Management.
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   * response of the GET request or it should be * for unconditional update.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, serviceName: string, sid: string, ifMatch: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param sid Subscription entity Identifier. The entity represents the association between a user
   * and a product in API Management.
   * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
   * response of the GET request or it should be * for unconditional update.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, serviceName: string, sid: string, ifMatch: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, serviceName: string, sid: string, ifMatch: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        sid,
        ifMatch,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Regenerates primary key of existing subscription of the API Management service instance.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param sid Subscription entity Identifier. The entity represents the association between a user
   * and a product in API Management.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  regeneratePrimaryKey(resourceGroupName: string, serviceName: string, sid: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param sid Subscription entity Identifier. The entity represents the association between a user
   * and a product in API Management.
   * @param callback The callback
   */
  regeneratePrimaryKey(resourceGroupName: string, serviceName: string, sid: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param sid Subscription entity Identifier. The entity represents the association between a user
   * and a product in API Management.
   * @param options The optional parameters
   * @param callback The callback
   */
  regeneratePrimaryKey(resourceGroupName: string, serviceName: string, sid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  regeneratePrimaryKey(resourceGroupName: string, serviceName: string, sid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        sid,
        options
      },
      regeneratePrimaryKeyOperationSpec,
      callback);
  }

  /**
   * Regenerates secondary key of existing subscription of the API Management service instance.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param sid Subscription entity Identifier. The entity represents the association between a user
   * and a product in API Management.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  regenerateSecondaryKey(resourceGroupName: string, serviceName: string, sid: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param sid Subscription entity Identifier. The entity represents the association between a user
   * and a product in API Management.
   * @param callback The callback
   */
  regenerateSecondaryKey(resourceGroupName: string, serviceName: string, sid: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param sid Subscription entity Identifier. The entity represents the association between a user
   * and a product in API Management.
   * @param options The optional parameters
   * @param callback The callback
   */
  regenerateSecondaryKey(resourceGroupName: string, serviceName: string, sid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  regenerateSecondaryKey(resourceGroupName: string, serviceName: string, sid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        sid,
        options
      },
      regenerateSecondaryKeyOperationSpec,
      callback);
  }

  /**
   * Gets the subscription keys.
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param sid Subscription entity Identifier. The entity represents the association between a user
   * and a product in API Management.
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionListSecretsResponse>
   */
  listSecrets(resourceGroupName: string, serviceName: string, sid: string, options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionListSecretsResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param sid Subscription entity Identifier. The entity represents the association between a user
   * and a product in API Management.
   * @param callback The callback
   */
  listSecrets(resourceGroupName: string, serviceName: string, sid: string, callback: msRest.ServiceCallback<Models.SubscriptionKeysContract>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param serviceName The name of the API Management service.
   * @param sid Subscription entity Identifier. The entity represents the association between a user
   * and a product in API Management.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSecrets(resourceGroupName: string, serviceName: string, sid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SubscriptionKeysContract>): void;
  listSecrets(resourceGroupName: string, serviceName: string, sid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SubscriptionKeysContract>, callback?: msRest.ServiceCallback<Models.SubscriptionKeysContract>): Promise<Models.SubscriptionListSecretsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        sid,
        options
      },
      listSecretsOperationSpec,
      callback) as Promise<Models.SubscriptionListSecretsResponse>;
  }

  /**
   * Lists all subscriptions of the API Management service instance.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SubscriptionCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SubscriptionCollection>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SubscriptionCollection>, callback?: msRest.ServiceCallback<Models.SubscriptionCollection>): Promise<Models.SubscriptionListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.SubscriptionListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.filter0,
    Parameters.top,
    Parameters.skip,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getEntityTagOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.sid,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      headersMapper: Mappers.SubscriptionGetEntityTagHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.sid,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionContract,
      headersMapper: Mappers.SubscriptionGetHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.sid,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.notify,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch0,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.SubscriptionCreateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionContract,
      headersMapper: Mappers.SubscriptionCreateOrUpdateHeaders
    },
    201: {
      bodyMapper: Mappers.SubscriptionContract,
      headersMapper: Mappers.SubscriptionCreateOrUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.sid,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.notify,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch1,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.SubscriptionUpdateParameters,
      required: true
    }
  },
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.sid,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch1,
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const regeneratePrimaryKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}/regeneratePrimaryKey",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.sid,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const regenerateSecondaryKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}/regenerateSecondaryKey",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.sid,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listSecretsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}/listSecrets",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.sid,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionKeysContract
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
