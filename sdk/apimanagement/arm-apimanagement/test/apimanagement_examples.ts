/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  record,
  RecorderEnvironmentSetup,
  Recorder
} from "@azure-tools/test-recorder";
import * as assert from "assert";
import { ClientSecretCredential } from "@azure/identity";
import { ApiManagementClient } from "../src/apiManagementClient";

const recorderEnvSetup: RecorderEnvironmentSetup = {
  replaceableVariables: {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
  },
  customizationsOnRecordings: [
    (recording: any): any =>
      recording.replace(
        /"access_token":"[^"]*"/g,
        `"access_token":"access_token"`
      )
  ],
  queryParametersToSkip: []
};

describe("My test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: ApiManagementClient;
  let location: string;
  let resourceGroupName: string;
  let serviceName: string;

  beforeEach(async function() {
    recorder = record(this, recorderEnvSetup);
    subscriptionId = env.SUBSCRIPTION_ID;
    // This is an example of how the environment variables are used
    const credential = new ClientSecretCredential(
      env.AZURE_TENANT_ID,
      env.AZURE_CLIENT_ID,
      env.AZURE_CLIENT_SECRET
    );
    client = new ApiManagementClient(credential, subscriptionId);
    location = "eastus";
    resourceGroupName = "myjstest1";
    serviceName = "myservicexxx1"
  });

  afterEach(async function() {
    await recorder.stop();
  });

  it("apiManagementService create test", async function() {
    const res = await client.apiManagementService.beginCreateOrUpdateAndWait(resourceGroupName,serviceName,{
      location: location,
        sku: {
            name: "Standard",
            capacity: 1
        },
        publisherEmail: "foo@contoso.com",
        publisherName: "foo",
        
    });
    console.log(res);
  });

  it("apiManagementService get test", async function() {
    const res = await client.apiManagementService.get(resourceGroupName,serviceName);
    console.log(res);
  });

  it("apiManagementService listByResourceGroup test", async function() {
    for await (let item of client.apiManagementService.listByResourceGroup(resourceGroupName)){
        console.log(item);
    }
  });

  it("apiManagementService update test", async function() {
    const res = await client.apiManagementService.beginUpdateAndWait(resourceGroupName,serviceName,{
      customProperties: {
            "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10": "false"
        }
    });
    console.log(res);
  });

  it("apiManagementService delete test", async function() {
    const res = await client.apiManagementService.beginDeleteAndWait(resourceGroupName,serviceName);
    console.log(res);
  });
});
