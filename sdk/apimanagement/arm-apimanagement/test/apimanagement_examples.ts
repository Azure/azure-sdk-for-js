/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { createTestCredential } from "@azure-tools/test-credential";
import {
    delay,
    env,
    isPlaybackMode,
    Recorder,
    RecorderStartOptions,
} from "@azure-tools/test-recorder";
import { ApiManagementClient } from "../src/apiManagementClient.js";
import { assert } from "vitest";

const replaceableVariables: Record<string, string> = {
    SUBSCRIPTION_ID: "88888888-8888-8888-8888-888888888888",
};

const recorderOptions: RecorderStartOptions = {
    envSetupForPlayback: replaceableVariables,
    removeCentralSanitizers: [
        "AZSDK3493", // .name in the body is not a secret and is listed below in the beforeEach section
        "AZSDK3430", // .id in the body is not a secret and is listed below in the beforeEach section
    ],
};

export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("Apimanagement test", () => {
    let recorder: Recorder;
    let subscriptionId: string;
    let client: ApiManagementClient;
    let location: string;
    let resourceGroupName: string;
    let serviceName: string;


    beforeEach(async function(ctx) {
        recorder = new Recorder(ctx);
        await recorder.start(recorderOptions);
        subscriptionId = env.SUBSCRIPTION_ID || '';
        // This is an example of how the environment variables are used
        const credential = createTestCredential();
        client = new ApiManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
        location = "eastus";
        resourceGroupName = "myjstest";
        serviceName = "myserviceyyy1";
    });

    afterEach(async function() {
        await recorder.stop();
    });


    it("apiManagementService create test", async function() {
        const res = await client.apiManagementService.beginCreateOrUpdateAndWait(resourceGroupName, serviceName, {
            location: location,
            sku: {
                name: "Standard",
                capacity: 1
            },
            publisherEmail: "foo@contoso.com",
            publisherName: "foo"
        }, testPollingOptions);
        assert.equal(res.name, serviceName);
    }).timeout(3600000);

    it("apiManagementService get test", async function() {
        const res = await client.apiManagementService.get(resourceGroupName, serviceName);
        assert.equal(res.name, serviceName);
    });

    it("apiManagementService listByResourceGroup test", async function() {
        const resArray = new Array();
        for await (let item of client.apiManagementService.listByResourceGroup(resourceGroupName)) {
            resArray.push(item);
        }
        assert.equal(resArray.length, 1);
    });

    it("apiManagementService update test", async function() {
        // this.timeout(3600000);
        let count = 0;
        while (count < 20) {
            count++;
            const res = await client.apiManagementService.get(resourceGroupName, serviceName);
            if (res.provisioningState == "Succeeded") {
                const res = await client.apiManagementService.beginUpdateAndWait(resourceGroupName, serviceName, {
                    customProperties: {
                        "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10": "false"
                    }
                }, testPollingOptions);
                assert.equal(res.type, "Microsoft.ApiManagement/service");
                break;
            } else {
                // The resource is activating
                await delay(isPlaybackMode() ? 1000 : 300000)
            }
        }
    }).timeout(3600000);


    it("backend create test1", async function() {
    })

    it("backend create test2", async function() {
    })

    it("backend list test", async function() {
        const resArray = new Array();
        for await (let item of client.backend.listByService(resourceGroupName, serviceName, { top: 1 })) {
            resArray.push(item);
        }
        assert.equal(resArray.length, 2);
    })

    it("backend delete test", async function() {
        const resArray = new Array();
        for await (let item of client.backend.listByService(resourceGroupName, serviceName)) {
            resArray.push(item);
        }
        assert.equal(resArray.length, 0);
    })

    it("apiManagementService delete test", async function() {
        let count = 0;
        while (count < 20) {
            count++;
            const res = await client.apiManagementService.get(resourceGroupName, serviceName);
            if (res.provisioningState == "Succeeded") {
                const resArray = new Array();
                for await (let item of client.apiManagementService.listByResourceGroup(resourceGroupName)) {
                    resArray.push(item);
                }
                assert.equal(resArray.length, 0);
                break;
            } else {
                // The resource is activating
                await delay(isPlaybackMode() ? 1000 : 300000);
            }
        }
    }).timeout(3600000);
});
