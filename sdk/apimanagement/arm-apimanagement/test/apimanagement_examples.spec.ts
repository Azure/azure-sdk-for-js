/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { createTestCredential } from "@azure-tools/test-credential";
import type { RecorderStartOptions } from "@azure-tools/test-recorder";
import { delay, env, isPlaybackMode, Recorder } from "@azure-tools/test-recorder";
import { ApiManagementClient } from "../src/apiManagementClient.js";
import { describe, it, assert, beforeEach, afterEach } from "vitest";

const replaceableVariables: Record<string, string> = {
  SUBSCRIPTION_ID: "88888888-8888-8888-8888-888888888888",
};

const recorderOptions: RecorderStartOptions = {
  envSetupForPlayback: replaceableVariables,
  removeCentralSanitizers: [
    "AZSDK3493", // .name in the body is not a secret and is listed below in the beforeEach section
    "AZSDK3430", // .id in the body is not a secret and is listed below in the beforeEach section
  ],
};

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("Apimanagement test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: ApiManagementClient;
  let location: string;
  let resourceGroupName: string;
  let serviceName: string;

  beforeEach(async (ctx) => {
    recorder = new Recorder(ctx);
    await recorder.start(recorderOptions);
    subscriptionId = env.SUBSCRIPTION_ID || "";
    // This is an example of how the environment variables are used
    const credential = createTestCredential();
    client = new ApiManagementClient(
      credential,
      subscriptionId,
      recorder.configureClientOptions({}),
    );
    location = "eastus";
    resourceGroupName = "myjstest";
    serviceName = "myserviceyyy1";
  });

  afterEach(async () => {
    await recorder.stop();
  });

  it("apiManagementService create test", { timeout: 3600000 }, async () => {
    const res = await client.apiManagementService.beginCreateOrUpdateAndWait(
      resourceGroupName,
      serviceName,
      {
        location: location,
        sku: {
          name: "Standard",
          capacity: 1,
        },
        publisherEmail: "foo@contoso.com",
        publisherName: "foo",
      },
      testPollingOptions,
    );
    assert.equal(res.name, serviceName);
  });

  it("apiManagementService get test", async () => {
    const res = await client.apiManagementService.get(resourceGroupName, serviceName);
    assert.equal(res.name, serviceName);
  });

  it("apiManagementService listByResourceGroup test", async () => {
    const resArray = new Array();
    for await (const item of client.apiManagementService.listByResourceGroup(resourceGroupName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("apiManagementService update test", { timeout: 3600000 }, async () => {
    let count = 0;
    while (count < 20) {
      count++;
      const res = await client.apiManagementService.get(resourceGroupName, serviceName);
      if (res.provisioningState === "Succeeded") {
        const updateResult = await client.apiManagementService.beginUpdateAndWait(
          resourceGroupName,
          serviceName,
          {
            customProperties: {
              "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10": "false",
            },
          },
          testPollingOptions,
        );
        assert.equal(updateResult.type, "Microsoft.ApiManagement/service");
        break;
      } else {
        // The resource is activating
        await delay(isPlaybackMode() ? 1000 : 300000);
      }
    }
  });

  it("backend create test1", async () => {});

  it("backend create test2", async () => {});

  it("backend list test", async () => {
    const resArray = new Array();
    for await (const item of client.backend.listByService(resourceGroupName, serviceName, {
      top: 1,
    })) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 2);
  });

  it("backend delete test", async () => {
    const resArray = new Array();
    for await (const item of client.backend.listByService(resourceGroupName, serviceName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });

  it("apiManagementService delete test", { timeout: 3600000 }, async () => {
    let count = 0;
    while (count < 20) {
      count++;
      const res = await client.apiManagementService.get(resourceGroupName, serviceName);
      if (res.provisioningState === "Succeeded") {
        const resArray = new Array();
        for await (const item of client.apiManagementService.listByResourceGroup(
          resourceGroupName,
        )) {
          resArray.push(item);
        }
        assert.equal(resArray.length, 0);
        break;
      } else {
        // The resource is activating
        await delay(isPlaybackMode() ? 1000 : 300000);
      }
    }
  });
});
