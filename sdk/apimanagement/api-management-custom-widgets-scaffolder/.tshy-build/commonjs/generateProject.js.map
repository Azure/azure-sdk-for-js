{"version":3,"file":"generateProject.js","sourceRoot":"","sources":["../../src/generateProject.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { ServiceInformation, Options, WidgetConfig } from \"./scaffolding.js\";\nimport {\n  OVERRIDE_DEFAULT_PORT,\n  OVERRIDE_PORT_KEY,\n  displayNameToName,\n  widgetFolderName,\n} from \"./scaffolding.js\";\nimport { sourceDir } from \"./sourceDir.js\";\nimport { join as joinPath, parse as parsePath } from \"node:path\";\nimport * as fs from \"node:fs/promises\";\nimport { getTemplates } from \"./getTemplates.js\";\nimport mustache from \"mustache\";\n\nconst templateSuffix = \".mustache\";\n\n/**\n * Generates a scaffold project of Custom widget for API Managements' Dev Portal.\n *\n * @param widgetConfig - JSON object with data required by DevPortal to handle a widget integration.\n * @param deploymentConfig - JSON object with data for deployment.\n * @param options - JSON object with other data, which will not be stored in the DevPortal.\n */\nexport async function generateProject(\n  widgetConfig: WidgetConfig,\n  deploymentConfig: ServiceInformation,\n  options: Options = {},\n): Promise<void> {\n  const { openUrl, configAdvancedTenantId, configAdvancedRedirectUri } = options;\n  const openUrlParsed = openUrl ? new URL(openUrl) : null;\n  if (openUrlParsed) {\n    openUrlParsed.searchParams.append(OVERRIDE_PORT_KEY, String(OVERRIDE_DEFAULT_PORT));\n  }\n\n  const name = displayNameToName(widgetConfig.displayName);\n  const serverSettings = {\n    port: OVERRIDE_DEFAULT_PORT,\n    open: openUrlParsed ? openUrlParsed.toString() : true,\n  };\n\n  const configAdditional = {\n    interactiveBrowserCredentialOptions: { redirectUri: \"http://localhost:1337\" } as {\n      redirectUri: string;\n      tenantId?: string;\n    },\n  };\n  if (configAdvancedTenantId) {\n    configAdditional.interactiveBrowserCredentialOptions.tenantId = configAdvancedTenantId;\n  }\n  if (configAdvancedRedirectUri) {\n    configAdditional.interactiveBrowserCredentialOptions.redirectUri = configAdvancedRedirectUri;\n  }\n\n  const renderTemplate = async (file: string): Promise<void> => {\n    const isTemplate = file.endsWith(templateSuffix);\n    const encoding = file.endsWith(\".ttf\") ? \"binary\" : \"utf8\";\n    let fileData = await fs.readFile(file, { encoding });\n    if (isTemplate) {\n      fileData = mustache.render(fileData, {\n        name,\n        displayName: widgetConfig.displayName,\n        config: JSON.stringify({ ...widgetConfig, name }, null, \"\\t\"),\n        configDeploy: JSON.stringify(deploymentConfig, null, \"\\t\"),\n        configAdditional: JSON.stringify(configAdditional, null, \"\\t\"),\n        serverSettings: JSON.stringify(serverSettings, null, \"\\t\"),\n      });\n    }\n\n    let relativePath = file;\n    if (sourceDir.includes(\"\\\\\")) {\n      relativePath = relativePath.replace(/\\//g, \"\\\\\");\n    }\n    relativePath = relativePath\n      .replace(joinPath(sourceDir, \"..\", \"templates\", \"_shared\"), \"\")\n      .replace(joinPath(sourceDir, \"..\", \"templates\", widgetConfig.technology), \"\")\n      .replace(templateSuffix, \"\");\n    const newFilePath = joinPath(process.cwd(), widgetFolderName(name), relativePath);\n    const dir = parsePath(newFilePath).dir;\n\n    await fs.mkdir(dir, { recursive: true });\n    await fs.writeFile(newFilePath, fileData, { encoding });\n  };\n\n  const templates = await getTemplates(widgetConfig.technology);\n  for (const file of Object.values(templates)) {\n    await renderTemplate(file);\n  }\n\n  return;\n}\n"]}