{"version":3,"file":"execute.js","sourceRoot":"","sources":["../../../src/bin/execute.ts"],"names":[],"mappings":";;AAEA,uCAAuC;AACvC,kCAAkC;;;AAGlC,6DAAsD;AACtD,6DAQ8B;AAC9B,0DAA0B;AAC1B,8DAAwD;AAExD,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;AACxB,MAAM,KAAK,GAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,eAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;AAClD,MAAM,KAAK,GAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,eAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;AAClD,MAAM,GAAG,GAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,eAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;AAC9C,MAAM,IAAI,GAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,eAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;AAEhD,KAAK,UAAU,IAAI;IACjB,KAAK,CACH,sKAAsK,CACvK,CAAC;IAEF,MAAM,SAAS,GAAG,IAAA,mCAAc,EAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAE5C,KAAK,CAAC,0CAA0C,CAAC,CAAC;IAClD,MAAM,YAAY,GAAG,MAAM,SAAS,CAAC,uCAAkB,EAAE,yCAAoB,CAAC,CAAC;IAC/E,KAAK,CAAC,yDAAyD,CAAC,CAAC;IACjE,MAAM,kBAAkB,GAAG,MAAM,SAAS,CAAC,6CAAwB,EAAE,yCAAoB,CAAC,CAAC;IAC3F,KAAK,CAAC,uBAAuB,CAAC,CAAC;IAC/B,MAAM,UAAU,GAAG,MAAM,SAAS,CAAC,qCAAgB,EAAE,uCAAkB,CAAC,CAAC;IAEzE,IAAI,kBAAkB,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;QAC7C,kBAAkB,CAAC,UAAU,GAAG,kBAAkB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACzE,CAAC;IACD,IAAI,kBAAkB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;QACpD,kBAAkB,CAAC,UAAU,GAAG,kBAAkB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC7E,CAAC;IACD,IAAI,kBAAkB,CAAC,UAAU,KAAK,EAAE,EAAE,CAAC;QACzC,OAAO,kBAAkB,CAAC,UAAU,CAAC;IACvC,CAAC;IAED,kBAAkB,CAAC,qBAAqB,GAAG,IAAA,sCAAiB,EAC1D,kBAAkB,CAAC,qBAAqB,CACzC,CAAC;IAEF,UAAU,CAAC,OAAO,GAAG,UAAU,CAAC,OAAO;QACrC,CAAC,CAAC,IAAA,sCAAiB,EAAC,UAAU,CAAC,OAAO,CAAC;QACvC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC;IAEvB,OAAO,IAAA,oCAAe,EAAC,YAAY,EAAE,kBAAkB,EAAE,UAAU,CAAC;SACjE,IAAI,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,wEAAwE,CAAC,CAAC;SAC3F,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC1B,CAAC;AAED,IAAI,EAAE;KACH,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KAC3B,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;IACb,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACnB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC","sourcesContent":["#!/usr/bin/env node\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { Log } from \"./execute-helpers.js\";\nimport { buildGetConfig } from \"./execute-helpers.js\";\nimport {\n  prefixUrlProtocol,\n  promptServiceInformation,\n  promptMiscConfig,\n  promptWidgetConfig,\n  validateDeployConfig,\n  validateMiscConfig,\n  validateWidgetConfig,\n} from \"./execute-configs.js\";\nimport chalk from \"chalk\";\nimport { generateProject } from \"../generateProject.js\";\n\nconst log = console.log;\nconst white: Log = (msg) => log(chalk.white(msg));\nconst green: Log = (msg) => log(chalk.green(msg));\nconst red: Log = (msg) => log(chalk.red(msg));\nconst gray: Log = (msg) => log(chalk.gray(msg));\n\nasync function main(): Promise<void> {\n  green(\n    \"\\nThis tool generates code scaffold for custom widgets in the Azure API Management’s developer portal. Learn more at https://aka.ms/apimdocs/portal/customwidgets.\\n\",\n  );\n\n  const getConfig = buildGetConfig(gray, red);\n\n  white(\"Specify the custom widget configuration.\");\n  const widgetConfig = await getConfig(promptWidgetConfig, validateWidgetConfig);\n  white(\"Specify the Azure API Management service configuration.\");\n  const serviceInformation = await getConfig(promptServiceInformation, validateDeployConfig);\n  white(\"Specify other options\");\n  const miscConfig = await getConfig(promptMiscConfig, validateMiscConfig);\n\n  if (serviceInformation.resourceId[0] === \"/\") {\n    serviceInformation.resourceId = serviceInformation.resourceId.slice(1);\n  }\n  if (serviceInformation.resourceId.slice(-1) === \"/\") {\n    serviceInformation.resourceId = serviceInformation.resourceId.slice(0, -1);\n  }\n  if (serviceInformation.apiVersion === \"\") {\n    delete serviceInformation.apiVersion;\n  }\n\n  serviceInformation.managementApiEndpoint = prefixUrlProtocol(\n    serviceInformation.managementApiEndpoint,\n  );\n\n  miscConfig.openUrl = miscConfig.openUrl\n    ? prefixUrlProtocol(miscConfig.openUrl)\n    : miscConfig.openUrl;\n\n  return generateProject(widgetConfig, serviceInformation, miscConfig)\n    .then(() => green(\"\\nThe custom widget’s code scaffold has been successfully generated.\\n\"))\n    .catch(console.error);\n}\n\nmain()\n  .then(() => process.exit(0))\n  .catch((err) => {\n    console.error(err);\n    process.exit(1);\n  });\n"]}