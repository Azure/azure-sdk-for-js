{"version":3,"file":"execute-helpers.js","sourceRoot":"","sources":["../../../src/bin/execute-helpers.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;;AAGlC,6DAAqD;AAErD,2CAAwC;AACxC,wEAAuC;AAEhC,MAAM,qBAAqB,GAAG,CACnC,IAA2B,EAC3B,cAAiC,EACjC,GAA0B,EAC6B,EAAE;IACzD,MAAM,aAAa,GAAqB,EAAE,CAAC;IAC3C,IAAI,OAAO,GAAY,KAAK,CAAC;IAE7B,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE;QAClD,MAAM,QAAQ,GAAG,CAAgB,CAAC;QAClC,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;QACxB,MAAM,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;QAEjC,IAAI,QAAQ,KAAK,IAAI,EAAE,CAAC;YACtB,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;gBAC1C,aAAa,CAAC,GAAkC,CAAC,GAAG,KAAK,CAAC;YAC5D,CAAC;QACH,CAAC;aAAM,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;YACjD,OAAO,GAAG,IAAI,CAAC;QACjB,CAAC;aAAM,CAAC;YACN,OAAO,GAAG,IAAI,CAAC;YACf,GAAG,CAAC,IAAI,KAAK,+BAA+B,GAAG,GAAG,CAAC,CAAC;YACpD,IAAI,OAAO,QAAQ,KAAK,QAAQ;gBAAE,GAAG,CAAC,QAAQ,CAAC,CAAC;QAClD,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,EAAE,aAAa,EAAE,OAAO,EAAE,CAAC;AACpC,CAAC,CAAC;AA3BW,QAAA,qBAAqB,yBA2BhC;AAQK,MAAM,cAAc,GAAG,CAAC,IAAS,EAAE,GAAQ,EAAU,EAAE;IAC5D,MAAM,IAAI,GAAG,IAAA,sBAAW,EAAC,IAAA,iBAAO,EAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;IAChD,OAAO,KAAK,EACV,eAAoD,EACpD,cAA2B,EAC3B,EAAE;QACF,MAAM,EAAE,aAAa,EAAE,OAAO,EAAE,GAAG,IAAA,6BAAqB,EAAC,IAAI,EAAE,cAAc,EAAE,GAAG,CAAC,CAAC;QAEpF,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,MAAM,EAAE,CAAC;YACpD,OAAO,eAAe,CAAC,aAAa,CAAC,CAAC;QACxC,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,uCAAuC,CAAC,CAAC;YAC9C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,OAAO,CACnC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,WAAC,OAAA,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,GAAG,MAAA,kCAAa,CAAC,GAAG,CAAC,mCAAI,GAAG,KAAK,KAAK,EAAE,CAAC,CAAA,EAAA,CAClF,CAAC;YACF,OAAO,aAAkB,CAAC;QAC5B,CAAC;IACH,CAAC,CAAC;AACJ,CAAC,CAAC;AAlBW,QAAA,cAAc,kBAkBzB","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { ReplaceTypesPreserveOptional, Validate, ValidateFnc } from \"./execute-configs.js\";\nimport { fieldIdToName } from \"./execute-configs.js\";\nimport type { Configs } from \"../scaffolding.js\";\nimport { hideBin } from \"yargs/helpers\";\nimport yargsParser from \"yargs-parser\";\n\nexport const extractConfigFromArgs = <TConfig extends Configs>(\n  argv: yargsParser.Arguments,\n  validateConfig: Validate<TConfig>,\n  red: (msg: string) => void,\n): { configPartial: Partial<TConfig>; missing: boolean } => {\n  const configPartial: Partial<TConfig> = {};\n  let missing: boolean = false;\n\n  Object.entries(validateConfig).forEach(([key, v]) => {\n    const validate = v as ValidateFnc;\n    const value = argv[key];\n    const response = validate(value);\n\n    if (response === true) {\n      if (value !== null && value !== undefined) {\n        configPartial[key as keyof typeof validateConfig] = value;\n      }\n    } else if (value === null || value === undefined) {\n      missing = true;\n    } else {\n      missing = true;\n      red(`\"${value}\" is not a valid value for \"${key}\"`);\n      if (typeof response === \"string\") red(response);\n    }\n  });\n\n  return { configPartial, missing };\n};\n\nexport type Log = (msg: string) => void;\ntype Config = <C extends Configs>(\n  promptForConfig: (partial: Partial<C>) => Promise<C>,\n  validateConfig: ReplaceTypesPreserveOptional<C, ValidateFnc>,\n) => Promise<C>;\n\nexport const buildGetConfig = (gray: Log, red: Log): Config => {\n  const argv = yargsParser(hideBin(process.argv));\n  return async <C extends Configs>(\n    promptForConfig: (partial: Partial<C>) => Promise<C>,\n    validateConfig: Validate<C>,\n  ) => {\n    const { configPartial, missing } = extractConfigFromArgs(argv, validateConfig, red);\n\n    if (missing || !Object.values(configPartial).length) {\n      return promptForConfig(configPartial);\n    } else {\n      gray(\"Retrieved from the command parameters\");\n      Object.entries(configPartial).forEach(\n        ([key, value]) => value != null && gray(`${fieldIdToName[key] ?? key}: ${value}`),\n      );\n      return configPartial as C;\n    }\n  };\n};\n"]}