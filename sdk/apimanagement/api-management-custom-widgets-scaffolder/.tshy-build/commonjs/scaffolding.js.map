{"version":3,"file":"scaffolding.js","sourceRoot":"","sources":["../../src/scaffolding.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAElC;;GAEG;AACU,QAAA,iBAAiB,GAAG,2BAA2B,CAAC;AAC7D;;GAEG;AACU,QAAA,qBAAqB,GAAG,IAAI,CAAC;AAK1C,kEAAkE;AACrD,QAAA,YAAY,GAAmB,CAAC,YAAY,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;AAkC3E;;;;;GAKG;AACI,MAAM,iBAAiB,GAAG,CAAC,WAAmB,EAAU,EAAE,CAC/D,kBAAkB,CAChB,CAAC,KAAK,GAAG,WAAW,CAAC;KAClB,SAAS,CAAC,KAAK,CAAC;KAChB,WAAW,EAAE;KACb,OAAO,CAAC,kBAAkB,EAAE,EAAE,CAAC;KAC/B,OAAO,CAAC,aAAa,EAAE,GAAG,CAAC,CAC/B,CAAC;AAPS,QAAA,iBAAiB,qBAO1B;AAEJ;;;;GAIG;AACI,MAAM,gBAAgB,GAAG,CAAC,IAAY,EAAU,EAAE,CAAC,+BAA+B,IAAI,EAAE,CAAC;AAAnF,QAAA,gBAAgB,oBAAmE","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Unique identifier under which is specified which port to use for injecting locally hosted custom widget to a running DevPortal instance.\n */\nexport const OVERRIDE_PORT_KEY = \"MS_APIM_CW_localhost_port\";\n/**\n * Default port for running local dev server on.\n */\nexport const OVERRIDE_DEFAULT_PORT = 3000;\n\n/** All supported technologies to scaffold a widget in. */\nexport type ScaffoldTech = \"typescript\" | \"react\" | \"vue\";\n\n/** List of all supported technologies to scaffold a widget in. */\nexport const TECHNOLOGIES: ScaffoldTech[] = [\"typescript\", \"react\", \"vue\"];\n\n/** Main data which DevPortal needs for every custom widget.  */\nexport interface WidgetConfig {\n  /** Name of the custom widget which is displayed in DevPortal. */\n  displayName: string;\n  /** Technology to use to scaffold the widget. */\n  technology: ScaffoldTech;\n  /** Optional URL for a custom icon, which will be displayed in DevPortal widget list. */\n  iconUrl?: string;\n}\n\n/** Data needed for deployment. */\nexport interface ServiceInformation {\n  /** Management API endpoint to use (e.g. management.azure.com). */\n  managementApiEndpoint: string;\n  /** resourceId of your APIM service, must be in this format: subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.ApiManagement/service/<service-name> */\n  resourceId: string;\n  /** optional override which API version to use during deployment */\n  apiVersion?: string;\n}\n\n/** Miscellaneous data for scaffolding of a custom widget which will not be stored in DevPortal. */\nexport interface Options {\n  /** The URL to open after development server of the widget is started (URL of your Developer Portal). If you don't want to use this feature, set it to `false`. If you want to open just the widget page, set it to `true`. */\n  openUrl?: string;\n  /** advance configuration option for the deploy function - tenant ID for InteractiveBrowserCredentialNodeOptions */\n  configAdvancedTenantId?: string;\n  /** advance configuration option for the deploy function - redirect URI for InteractiveBrowserCredentialNodeOptions */\n  configAdvancedRedirectUri?: string;\n}\n\nexport type Configs = WidgetConfig | ServiceInformation | Options;\n\n/**\n * Converts user defined name of a custom widget to a unique ID, which is in context of Dev Portal known as \"name\".\n * Prefix \"cw-\" to avoid conflicts with existing widgets.\n *\n * @param displayName - User defined name of the custom widget.\n */\nexport const displayNameToName = (displayName: string): string =>\n  encodeURIComponent(\n    (\"cw-\" + displayName)\n      .normalize(\"NFD\")\n      .toLowerCase()\n      .replace(/[\\u0300-\\u036f]/g, \"\")\n      .replace(/[^a-z0-9-]/g, \"-\"),\n  );\n\n/**\n * Returns name of the folder for widget project.\n *\n * @param name - name of the widget\n */\nexport const widgetFolderName = (name: string): string => `azure-api-management-widget-${name}`;\n"]}