/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/extensionsMappers";
import * as Parameters from "../models/parameters";
import { AzureStackHCIClientContext } from "../azureStackHCIClientContext";

/** Class representing a Extensions. */
export class Extensions {
  private readonly client: AzureStackHCIClientContext;

  /**
   * Create a Extensions.
   * @param {AzureStackHCIClientContext} client Reference to the service client.
   */
  constructor(client: AzureStackHCIClientContext) {
    this.client = client;
  }

  /**
   * List all Extensions under ArcSetting resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting
   * information.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExtensionsListByArcSettingResponse>
   */
  listByArcSetting(resourceGroupName: string, clusterName: string, arcSettingName: string, options?: msRest.RequestOptionsBase): Promise<Models.ExtensionsListByArcSettingResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting
   * information.
   * @param callback The callback
   */
  listByArcSetting(resourceGroupName: string, clusterName: string, arcSettingName: string, callback: msRest.ServiceCallback<Models.ExtensionList>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting
   * information.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByArcSetting(resourceGroupName: string, clusterName: string, arcSettingName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExtensionList>): void;
  listByArcSetting(resourceGroupName: string, clusterName: string, arcSettingName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExtensionList>, callback?: msRest.ServiceCallback<Models.ExtensionList>): Promise<Models.ExtensionsListByArcSettingResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterName,
        arcSettingName,
        options
      },
      listByArcSettingOperationSpec,
      callback) as Promise<Models.ExtensionsListByArcSettingResponse>;
  }

  /**
   * Get particular Arc Extension of HCI Cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting
   * information.
   * @param extensionName The name of the machine extension.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExtensionsGetResponse>
   */
  get(resourceGroupName: string, clusterName: string, arcSettingName: string, extensionName: string, options?: msRest.RequestOptionsBase): Promise<Models.ExtensionsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting
   * information.
   * @param extensionName The name of the machine extension.
   * @param callback The callback
   */
  get(resourceGroupName: string, clusterName: string, arcSettingName: string, extensionName: string, callback: msRest.ServiceCallback<Models.Extension>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting
   * information.
   * @param extensionName The name of the machine extension.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, clusterName: string, arcSettingName: string, extensionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Extension>): void;
  get(resourceGroupName: string, clusterName: string, arcSettingName: string, extensionName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Extension>, callback?: msRest.ServiceCallback<Models.Extension>): Promise<Models.ExtensionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterName,
        arcSettingName,
        extensionName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ExtensionsGetResponse>;
  }

  /**
   * Create Extension for HCI cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting
   * information.
   * @param extensionName The name of the machine extension.
   * @param extension Details of the Machine Extension to be created.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExtensionsCreateResponse>
   */
  create(resourceGroupName: string, clusterName: string, arcSettingName: string, extensionName: string, extension: Models.Extension, options?: msRest.RequestOptionsBase): Promise<Models.ExtensionsCreateResponse> {
    return this.beginCreate(resourceGroupName,clusterName,arcSettingName,extensionName,extension,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ExtensionsCreateResponse>;
  }

  /**
   * Update Extension for HCI cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting
   * information.
   * @param extensionName The name of the machine extension.
   * @param extension Details of the Machine Extension to be created.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExtensionsUpdateResponse>
   */
  update(resourceGroupName: string, clusterName: string, arcSettingName: string, extensionName: string, extension: Models.Extension, options?: msRest.RequestOptionsBase): Promise<Models.ExtensionsUpdateResponse> {
    return this.beginUpdate(resourceGroupName,clusterName,arcSettingName,extensionName,extension,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ExtensionsUpdateResponse>;
  }

  /**
   * Delete particular Arc Extension of HCI Cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting
   * information.
   * @param extensionName The name of the machine extension.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, clusterName: string, arcSettingName: string, extensionName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,clusterName,arcSettingName,extensionName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Create Extension for HCI cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting
   * information.
   * @param extensionName The name of the machine extension.
   * @param extension Details of the Machine Extension to be created.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(resourceGroupName: string, clusterName: string, arcSettingName: string, extensionName: string, extension: Models.Extension, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        clusterName,
        arcSettingName,
        extensionName,
        extension,
        options
      },
      beginCreateOperationSpec,
      options);
  }

  /**
   * Update Extension for HCI cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting
   * information.
   * @param extensionName The name of the machine extension.
   * @param extension Details of the Machine Extension to be created.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, clusterName: string, arcSettingName: string, extensionName: string, extension: Models.Extension, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        clusterName,
        arcSettingName,
        extensionName,
        extension,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Delete particular Arc Extension of HCI Cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting
   * information.
   * @param extensionName The name of the machine extension.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, clusterName: string, arcSettingName: string, extensionName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        clusterName,
        arcSettingName,
        extensionName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * List all Extensions under ArcSetting resource.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExtensionsListByArcSettingNextResponse>
   */
  listByArcSettingNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ExtensionsListByArcSettingNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByArcSettingNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ExtensionList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByArcSettingNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExtensionList>): void;
  listByArcSettingNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExtensionList>, callback?: msRest.ServiceCallback<Models.ExtensionList>): Promise<Models.ExtensionsListByArcSettingNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByArcSettingNextOperationSpec,
      callback) as Promise<Models.ExtensionsListByArcSettingNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByArcSettingOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}/arcSettings/{arcSettingName}/extensions",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.arcSettingName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}/arcSettings/{arcSettingName}/extensions/{extensionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.arcSettingName,
    Parameters.extensionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Extension
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}/arcSettings/{arcSettingName}/extensions/{extensionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.arcSettingName,
    Parameters.extensionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "extension",
    mapper: {
      ...Mappers.Extension,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Extension
    },
    201: {
      bodyMapper: Mappers.Extension
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}/arcSettings/{arcSettingName}/extensions/{extensionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.arcSettingName,
    Parameters.extensionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "extension",
    mapper: {
      ...Mappers.Extension,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.Extension
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}/arcSettings/{arcSettingName}/extensions/{extensionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.arcSettingName,
    Parameters.extensionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByArcSettingNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
