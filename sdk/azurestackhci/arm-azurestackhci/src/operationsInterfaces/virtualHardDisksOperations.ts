/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  VirtualHardDisks,
  VirtualHardDisksListOptionalParams,
  VirtualHardDisksListAllOptionalParams,
  VirtualHardDisksGetOptionalParams,
  VirtualHardDisksGetResponse,
  VirtualHardDisksCreateOrUpdateOptionalParams,
  VirtualHardDisksCreateOrUpdateResponse,
  VirtualHardDisksDeleteOptionalParams,
  VirtualHardDisksDeleteResponse,
  VirtualHardDisksUpdateRequest,
  VirtualHardDisksUpdateOptionalParams,
  VirtualHardDisksUpdateResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a VirtualHardDisksOperations. */
export interface VirtualHardDisksOperations {
  /**
   * Lists all of the virtual hard disks in the specified resource group. Use the nextLink property in
   * the response to get the next page of virtual hard disks.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    options?: VirtualHardDisksListOptionalParams
  ): PagedAsyncIterableIterator<VirtualHardDisks>;
  /**
   * Lists all of the virtual hard disks in the specified subscription. Use the nextLink property in the
   * response to get the next page of virtual hard disks.
   * @param options The options parameters.
   */
  listAll(
    options?: VirtualHardDisksListAllOptionalParams
  ): PagedAsyncIterableIterator<VirtualHardDisks>;
  /**
   * Gets a virtual hard disk
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualHardDiskName Name of the virtual hard disk
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    virtualHardDiskName: string,
    options?: VirtualHardDisksGetOptionalParams
  ): Promise<VirtualHardDisksGetResponse>;
  /**
   * The operation to create or update a virtual hard disk. Please note some properties can be set only
   * during virtual hard disk creation.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualHardDiskName Name of the virtual hard disk
   * @param virtualHardDisks The virtual hard disk resource definition.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    virtualHardDiskName: string,
    virtualHardDisks: VirtualHardDisks,
    options?: VirtualHardDisksCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<VirtualHardDisksCreateOrUpdateResponse>,
      VirtualHardDisksCreateOrUpdateResponse
    >
  >;
  /**
   * The operation to create or update a virtual hard disk. Please note some properties can be set only
   * during virtual hard disk creation.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualHardDiskName Name of the virtual hard disk
   * @param virtualHardDisks The virtual hard disk resource definition.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    virtualHardDiskName: string,
    virtualHardDisks: VirtualHardDisks,
    options?: VirtualHardDisksCreateOrUpdateOptionalParams
  ): Promise<VirtualHardDisksCreateOrUpdateResponse>;
  /**
   * The operation to delete a virtual hard disk.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualHardDiskName Name of the virtual hard disk
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    virtualHardDiskName: string,
    options?: VirtualHardDisksDeleteOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<VirtualHardDisksDeleteResponse>,
      VirtualHardDisksDeleteResponse
    >
  >;
  /**
   * The operation to delete a virtual hard disk.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualHardDiskName Name of the virtual hard disk
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    virtualHardDiskName: string,
    options?: VirtualHardDisksDeleteOptionalParams
  ): Promise<VirtualHardDisksDeleteResponse>;
  /**
   * The operation to update a virtual hard disk.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualHardDiskName Name of the virtual hard disk
   * @param virtualHardDisks The virtual hard disk resource patch definition.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    virtualHardDiskName: string,
    virtualHardDisks: VirtualHardDisksUpdateRequest,
    options?: VirtualHardDisksUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<VirtualHardDisksUpdateResponse>,
      VirtualHardDisksUpdateResponse
    >
  >;
  /**
   * The operation to update a virtual hard disk.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param virtualHardDiskName Name of the virtual hard disk
   * @param virtualHardDisks The virtual hard disk resource patch definition.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    virtualHardDiskName: string,
    virtualHardDisks: VirtualHardDisksUpdateRequest,
    options?: VirtualHardDisksUpdateOptionalParams
  ): Promise<VirtualHardDisksUpdateResponse>;
}
