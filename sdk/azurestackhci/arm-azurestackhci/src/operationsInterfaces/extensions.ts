/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  Extension,
  ExtensionsListByArcSettingOptionalParams,
  ExtensionsGetOptionalParams,
  ExtensionsGetResponse,
  ExtensionsCreateOptionalParams,
  ExtensionsCreateResponse,
  ExtensionsUpdateOptionalParams,
  ExtensionsUpdateResponse,
  ExtensionsDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Extensions. */
export interface Extensions {
  /**
   * List all Extensions under ArcSetting resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
   * @param options The options parameters.
   */
  listByArcSetting(
    resourceGroupName: string,
    clusterName: string,
    arcSettingName: string,
    options?: ExtensionsListByArcSettingOptionalParams
  ): PagedAsyncIterableIterator<Extension>;
  /**
   * Get particular Arc Extension of HCI Cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
   * @param extensionName The name of the machine extension.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    clusterName: string,
    arcSettingName: string,
    extensionName: string,
    options?: ExtensionsGetOptionalParams
  ): Promise<ExtensionsGetResponse>;
  /**
   * Create Extension for HCI cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
   * @param extensionName The name of the machine extension.
   * @param extension Details of the Machine Extension to be created.
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    clusterName: string,
    arcSettingName: string,
    extensionName: string,
    extension: Extension,
    options?: ExtensionsCreateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ExtensionsCreateResponse>,
      ExtensionsCreateResponse
    >
  >;
  /**
   * Create Extension for HCI cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
   * @param extensionName The name of the machine extension.
   * @param extension Details of the Machine Extension to be created.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    clusterName: string,
    arcSettingName: string,
    extensionName: string,
    extension: Extension,
    options?: ExtensionsCreateOptionalParams
  ): Promise<ExtensionsCreateResponse>;
  /**
   * Update Extension for HCI cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
   * @param extensionName The name of the machine extension.
   * @param extension Details of the Machine Extension to be created.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    clusterName: string,
    arcSettingName: string,
    extensionName: string,
    extension: Extension,
    options?: ExtensionsUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ExtensionsUpdateResponse>,
      ExtensionsUpdateResponse
    >
  >;
  /**
   * Update Extension for HCI cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
   * @param extensionName The name of the machine extension.
   * @param extension Details of the Machine Extension to be created.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    clusterName: string,
    arcSettingName: string,
    extensionName: string,
    extension: Extension,
    options?: ExtensionsUpdateOptionalParams
  ): Promise<ExtensionsUpdateResponse>;
  /**
   * Delete particular Arc Extension of HCI Cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
   * @param extensionName The name of the machine extension.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    clusterName: string,
    arcSettingName: string,
    extensionName: string,
    options?: ExtensionsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Delete particular Arc Extension of HCI Cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
   * @param extensionName The name of the machine extension.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    clusterName: string,
    arcSettingName: string,
    extensionName: string,
    options?: ExtensionsDeleteOptionalParams
  ): Promise<void>;
}
