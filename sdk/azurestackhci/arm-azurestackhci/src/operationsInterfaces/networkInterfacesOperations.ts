/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  NetworkInterfaces,
  NetworkInterfacesListOptionalParams,
  NetworkInterfacesListAllOptionalParams,
  NetworkInterfacesGetOptionalParams,
  NetworkInterfacesGetResponse,
  NetworkInterfacesCreateOrUpdateOptionalParams,
  NetworkInterfacesCreateOrUpdateResponse,
  NetworkInterfacesDeleteOptionalParams,
  NetworkInterfacesDeleteResponse,
  NetworkInterfacesUpdateRequest,
  NetworkInterfacesUpdateOptionalParams,
  NetworkInterfacesUpdateResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a NetworkInterfacesOperations. */
export interface NetworkInterfacesOperations {
  /**
   * Lists all of the network interfaces in the specified resource group. Use the nextLink property in
   * the response to get the next page of network interfaces.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    options?: NetworkInterfacesListOptionalParams
  ): PagedAsyncIterableIterator<NetworkInterfaces>;
  /**
   * Lists all of the network interfaces in the specified subscription. Use the nextLink property in the
   * response to get the next page of network interfaces.
   * @param options The options parameters.
   */
  listAll(
    options?: NetworkInterfacesListAllOptionalParams
  ): PagedAsyncIterableIterator<NetworkInterfaces>;
  /**
   * Gets a network interface
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkInterfaceName Name of the network interface
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    networkInterfaceName: string,
    options?: NetworkInterfacesGetOptionalParams
  ): Promise<NetworkInterfacesGetResponse>;
  /**
   * The operation to create or update a network interface. Please note some properties can be set only
   * during network interface creation.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkInterfaceName Name of the network interface
   * @param networkInterfaces The network interface resource definition.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    networkInterfaceName: string,
    networkInterfaces: NetworkInterfaces,
    options?: NetworkInterfacesCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<NetworkInterfacesCreateOrUpdateResponse>,
      NetworkInterfacesCreateOrUpdateResponse
    >
  >;
  /**
   * The operation to create or update a network interface. Please note some properties can be set only
   * during network interface creation.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkInterfaceName Name of the network interface
   * @param networkInterfaces The network interface resource definition.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    networkInterfaceName: string,
    networkInterfaces: NetworkInterfaces,
    options?: NetworkInterfacesCreateOrUpdateOptionalParams
  ): Promise<NetworkInterfacesCreateOrUpdateResponse>;
  /**
   * The operation to delete a network interface.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkInterfaceName Name of the network interface
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    networkInterfaceName: string,
    options?: NetworkInterfacesDeleteOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<NetworkInterfacesDeleteResponse>,
      NetworkInterfacesDeleteResponse
    >
  >;
  /**
   * The operation to delete a network interface.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkInterfaceName Name of the network interface
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    networkInterfaceName: string,
    options?: NetworkInterfacesDeleteOptionalParams
  ): Promise<NetworkInterfacesDeleteResponse>;
  /**
   * The operation to update a network interface.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkInterfaceName Name of the network interface
   * @param networkInterfaces The network interface resource patch definition.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    networkInterfaceName: string,
    networkInterfaces: NetworkInterfacesUpdateRequest,
    options?: NetworkInterfacesUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<NetworkInterfacesUpdateResponse>,
      NetworkInterfacesUpdateResponse
    >
  >;
  /**
   * The operation to update a network interface.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkInterfaceName Name of the network interface
   * @param networkInterfaces The network interface resource patch definition.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    networkInterfaceName: string,
    networkInterfaces: NetworkInterfacesUpdateRequest,
    options?: NetworkInterfacesUpdateOptionalParams
  ): Promise<NetworkInterfacesUpdateResponse>;
}
