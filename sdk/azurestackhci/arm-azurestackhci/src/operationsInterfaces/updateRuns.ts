/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  UpdateRun,
  UpdateRunsListOptionalParams,
  UpdateRunsDeleteOptionalParams,
  UpdateRunsPutOptionalParams,
  UpdateRunsPutResponse,
  UpdateRunsGetOptionalParams,
  UpdateRunsGetResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a UpdateRuns. */
export interface UpdateRuns {
  /**
   * List all Update runs for a specified update
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param updateName The name of the Update
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    clusterName: string,
    updateName: string,
    options?: UpdateRunsListOptionalParams,
  ): PagedAsyncIterableIterator<UpdateRun>;
  /**
   * Delete specified Update Run
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param updateName The name of the Update
   * @param updateRunName The name of the Update Run
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    clusterName: string,
    updateName: string,
    updateRunName: string,
    options?: UpdateRunsDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Delete specified Update Run
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param updateName The name of the Update
   * @param updateRunName The name of the Update Run
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    clusterName: string,
    updateName: string,
    updateRunName: string,
    options?: UpdateRunsDeleteOptionalParams,
  ): Promise<void>;
  /**
   * Put Update runs for a specified update
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param updateName The name of the Update
   * @param updateRunName The name of the Update Run
   * @param updateRunsProperties Properties of the updateRuns object
   * @param options The options parameters.
   */
  put(
    resourceGroupName: string,
    clusterName: string,
    updateName: string,
    updateRunName: string,
    updateRunsProperties: UpdateRun,
    options?: UpdateRunsPutOptionalParams,
  ): Promise<UpdateRunsPutResponse>;
  /**
   * Get the Update run for a specified update
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the cluster.
   * @param updateName The name of the Update
   * @param updateRunName The name of the Update Run
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    clusterName: string,
    updateName: string,
    updateRunName: string,
    options?: UpdateRunsGetOptionalParams,
  ): Promise<UpdateRunsGetResponse>;
}
