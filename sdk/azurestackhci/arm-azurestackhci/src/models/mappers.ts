/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const ArcSettingList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArcSettingList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ArcSetting",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PerNodeState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PerNodeState",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      arcInstance: {
        serializedName: "arcInstance",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      arcNodeServicePrincipalObjectId: {
        serializedName: "arcNodeServicePrincipalObjectId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DefaultExtensionDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DefaultExtensionDetails",
    modelProperties: {
      category: {
        serializedName: "category",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      consentTime: {
        serializedName: "consentTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const ArcSettingsPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArcSettingsPatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      connectivityProperties: {
        serializedName: "properties.connectivityProperties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const PasswordCredential: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PasswordCredential",
    modelProperties: {
      secretText: {
        serializedName: "secretText",
        type: {
          name: "String",
        },
      },
      keyId: {
        serializedName: "keyId",
        type: {
          name: "String",
        },
      },
      startDateTime: {
        serializedName: "startDateTime",
        type: {
          name: "DateTime",
        },
      },
      endDateTime: {
        serializedName: "endDateTime",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const ArcIdentityResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArcIdentityResponse",
    modelProperties: {
      arcApplicationClientId: {
        serializedName: "properties.arcApplicationClientId",
        type: {
          name: "String",
        },
      },
      arcApplicationTenantId: {
        serializedName: "properties.arcApplicationTenantId",
        type: {
          name: "String",
        },
      },
      arcServicePrincipalObjectId: {
        serializedName: "properties.arcServicePrincipalObjectId",
        type: {
          name: "String",
        },
      },
      arcApplicationObjectId: {
        serializedName: "properties.arcApplicationObjectId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClusterList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Cluster",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
    },
  },
};

export const SoftwareAssuranceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SoftwareAssuranceProperties",
    modelProperties: {
      softwareAssuranceStatus: {
        serializedName: "softwareAssuranceStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      softwareAssuranceIntent: {
        serializedName: "softwareAssuranceIntent",
        type: {
          name: "String",
        },
      },
      lastUpdated: {
        serializedName: "lastUpdated",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const LogCollectionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogCollectionProperties",
    modelProperties: {
      fromDate: {
        serializedName: "fromDate",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      toDate: {
        serializedName: "toDate",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      lastLogGenerated: {
        serializedName: "lastLogGenerated",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      logCollectionSessionDetails: {
        serializedName: "logCollectionSessionDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LogCollectionSession",
            },
          },
        },
      },
    },
  },
};

export const LogCollectionSession: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogCollectionSession",
    modelProperties: {
      logStartTime: {
        serializedName: "logStartTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      logEndTime: {
        serializedName: "logEndTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      timeCollected: {
        serializedName: "timeCollected",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      logSize: {
        serializedName: "logSize",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      logCollectionStatus: {
        serializedName: "logCollectionStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      logCollectionJobType: {
        serializedName: "logCollectionJobType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      correlationId: {
        serializedName: "correlationId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      endTimeCollected: {
        serializedName: "endTimeCollected",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      logCollectionError: {
        serializedName: "logCollectionError",
        type: {
          name: "Composite",
          className: "LogCollectionError",
        },
      },
    },
  },
};

export const LogCollectionError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogCollectionError",
    modelProperties: {
      errorCode: {
        serializedName: "errorCode",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      errorMessage: {
        serializedName: "errorMessage",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const RemoteSupportProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RemoteSupportProperties",
    modelProperties: {
      accessLevel: {
        serializedName: "accessLevel",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      expirationTimeStamp: {
        serializedName: "expirationTimeStamp",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      remoteSupportType: {
        serializedName: "remoteSupportType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      remoteSupportNodeSettings: {
        serializedName: "remoteSupportNodeSettings",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RemoteSupportNodeSettings",
            },
          },
        },
      },
      remoteSupportSessionDetails: {
        serializedName: "remoteSupportSessionDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PerNodeRemoteSupportSession",
            },
          },
        },
      },
    },
  },
};

export const RemoteSupportNodeSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RemoteSupportNodeSettings",
    modelProperties: {
      arcResourceId: {
        serializedName: "arcResourceId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      updatedAt: {
        serializedName: "updatedAt",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      connectionStatus: {
        serializedName: "connectionStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      connectionErrorMessage: {
        serializedName: "connectionErrorMessage",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      transcriptLocation: {
        serializedName: "transcriptLocation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PerNodeRemoteSupportSession: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PerNodeRemoteSupportSession",
    modelProperties: {
      sessionStartTime: {
        serializedName: "sessionStartTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      sessionEndTime: {
        serializedName: "sessionEndTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      nodeName: {
        serializedName: "nodeName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      duration: {
        serializedName: "duration",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      accessLevel: {
        serializedName: "accessLevel",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClusterDesiredProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterDesiredProperties",
    modelProperties: {
      windowsServerSubscription: {
        serializedName: "windowsServerSubscription",
        type: {
          name: "String",
        },
      },
      diagnosticLevel: {
        serializedName: "diagnosticLevel",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClusterReportedProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterReportedProperties",
    modelProperties: {
      clusterName: {
        serializedName: "clusterName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      clusterId: {
        serializedName: "clusterId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      clusterVersion: {
        serializedName: "clusterVersion",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      nodes: {
        serializedName: "nodes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClusterNode",
            },
          },
        },
      },
      lastUpdated: {
        serializedName: "lastUpdated",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      imdsAttestation: {
        serializedName: "imdsAttestation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      diagnosticLevel: {
        serializedName: "diagnosticLevel",
        type: {
          name: "String",
        },
      },
      supportedCapabilities: {
        serializedName: "supportedCapabilities",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      clusterType: {
        serializedName: "clusterType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      manufacturer: {
        serializedName: "manufacturer",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      oemActivation: {
        serializedName: "oemActivation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClusterNode: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterNode",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      windowsServerSubscription: {
        serializedName: "windowsServerSubscription",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      nodeType: {
        serializedName: "nodeType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      ehcResourceId: {
        serializedName: "ehcResourceId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      manufacturer: {
        serializedName: "manufacturer",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      model: {
        serializedName: "model",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      osName: {
        serializedName: "osName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      osVersion: {
        serializedName: "osVersion",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      osDisplayVersion: {
        serializedName: "osDisplayVersion",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      serialNumber: {
        serializedName: "serialNumber",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      coreCount: {
        serializedName: "coreCount",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      memoryInGiB: {
        serializedName: "memoryInGiB",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      lastLicensingTimestamp: {
        serializedName: "lastLicensingTimestamp",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      oemActivation: {
        serializedName: "oemActivation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const IsolatedVmAttestationConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IsolatedVmAttestationConfiguration",
    modelProperties: {
      attestationResourceId: {
        serializedName: "attestationResourceId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      relyingPartyServiceEndpoint: {
        serializedName: "relyingPartyServiceEndpoint",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      attestationServiceEndpoint: {
        serializedName: "attestationServiceEndpoint",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClusterPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      cloudManagementEndpoint: {
        serializedName: "properties.cloudManagementEndpoint",
        type: {
          name: "String",
        },
      },
      aadClientId: {
        serializedName: "properties.aadClientId",
        type: {
          name: "String",
        },
      },
      aadTenantId: {
        serializedName: "properties.aadTenantId",
        type: {
          name: "String",
        },
      },
      desiredProperties: {
        serializedName: "properties.desiredProperties",
        type: {
          name: "Composite",
          className: "ClusterDesiredProperties",
        },
      },
      principalId: {
        serializedName: "identity.principalId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      tenantId: {
        serializedName: "identity.tenantId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      type: {
        serializedName: "identity.type",
        type: {
          name: "String",
        },
      },
      userAssignedIdentities: {
        serializedName: "identity.userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" },
          },
        },
      },
    },
  },
};

export const UploadCertificateRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UploadCertificateRequest",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RawCertificateData",
        },
      },
    },
  },
};

export const RawCertificateData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RawCertificateData",
    modelProperties: {
      certificates: {
        serializedName: "certificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const ClusterIdentityResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterIdentityResponse",
    modelProperties: {
      aadClientId: {
        serializedName: "properties.aadClientId",
        type: {
          name: "String",
        },
      },
      aadTenantId: {
        serializedName: "properties.aadTenantId",
        type: {
          name: "String",
        },
      },
      aadServicePrincipalObjectId: {
        serializedName: "properties.aadServicePrincipalObjectId",
        type: {
          name: "String",
        },
      },
      aadApplicationObjectId: {
        serializedName: "properties.aadApplicationObjectId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SoftwareAssuranceChangeRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SoftwareAssuranceChangeRequest",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SoftwareAssuranceChangeRequestProperties",
        },
      },
    },
  },
};

export const SoftwareAssuranceChangeRequestProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "SoftwareAssuranceChangeRequestProperties",
      modelProperties: {
        softwareAssuranceIntent: {
          serializedName: "softwareAssuranceIntent",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const LogCollectionRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogCollectionRequest",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "LogCollectionRequestProperties",
        },
      },
    },
  },
};

export const LogCollectionRequestProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogCollectionRequestProperties",
    modelProperties: {
      fromDate: {
        serializedName: "fromDate",
        required: true,
        type: {
          name: "DateTime",
        },
      },
      toDate: {
        serializedName: "toDate",
        required: true,
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const RemoteSupportRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RemoteSupportRequest",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RemoteSupportRequestProperties",
        },
      },
    },
  },
};

export const RemoteSupportRequestProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RemoteSupportRequestProperties",
    modelProperties: {
      accessLevel: {
        serializedName: "accessLevel",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      expirationTimeStamp: {
        serializedName: "expirationTimeStamp",
        type: {
          name: "DateTime",
        },
      },
      remoteSupportType: {
        serializedName: "remoteSupportType",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DeploymentSettingListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentSettingListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeploymentSetting",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DeploymentConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentConfiguration",
    modelProperties: {
      version: {
        serializedName: "version",
        type: {
          name: "String",
        },
      },
      scaleUnits: {
        serializedName: "scaleUnits",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScaleUnits",
            },
          },
        },
      },
    },
  },
};

export const ScaleUnits: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScaleUnits",
    modelProperties: {
      deploymentData: {
        serializedName: "deploymentData",
        type: {
          name: "Composite",
          className: "DeploymentData",
        },
      },
      sbePartnerInfo: {
        serializedName: "sbePartnerInfo",
        type: {
          name: "Composite",
          className: "SbePartnerInfo",
        },
      },
    },
  },
};

export const DeploymentData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentData",
    modelProperties: {
      securitySettings: {
        serializedName: "securitySettings",
        type: {
          name: "Composite",
          className: "DeploymentSecuritySettings",
        },
      },
      observability: {
        serializedName: "observability",
        type: {
          name: "Composite",
          className: "Observability",
        },
      },
      cluster: {
        serializedName: "cluster",
        type: {
          name: "Composite",
          className: "DeploymentCluster",
        },
      },
      storage: {
        serializedName: "storage",
        type: {
          name: "Composite",
          className: "Storage",
        },
      },
      namingPrefix: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9-]{1,8}$"),
        },
        serializedName: "namingPrefix",
        type: {
          name: "String",
        },
      },
      domainFqdn: {
        serializedName: "domainFqdn",
        type: {
          name: "String",
        },
      },
      infrastructureNetwork: {
        serializedName: "infrastructureNetwork",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InfrastructureNetwork",
            },
          },
        },
      },
      physicalNodes: {
        serializedName: "physicalNodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PhysicalNodes",
            },
          },
        },
      },
      hostNetwork: {
        serializedName: "hostNetwork",
        type: {
          name: "Composite",
          className: "DeploymentSettingHostNetwork",
        },
      },
      sdnIntegration: {
        serializedName: "sdnIntegration",
        type: {
          name: "Composite",
          className: "SdnIntegration",
        },
      },
      adouPath: {
        serializedName: "adouPath",
        type: {
          name: "String",
        },
      },
      secretsLocation: {
        serializedName: "secretsLocation",
        type: {
          name: "String",
        },
      },
      secrets: {
        serializedName: "secrets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EceDeploymentSecrets",
            },
          },
        },
      },
      optionalServices: {
        serializedName: "optionalServices",
        type: {
          name: "Composite",
          className: "OptionalServices",
        },
      },
    },
  },
};

export const DeploymentSecuritySettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentSecuritySettings",
    modelProperties: {
      hvciProtection: {
        defaultValue: true,
        serializedName: "hvciProtection",
        type: {
          name: "Boolean",
        },
      },
      drtmProtection: {
        defaultValue: true,
        serializedName: "drtmProtection",
        type: {
          name: "Boolean",
        },
      },
      driftControlEnforced: {
        defaultValue: true,
        serializedName: "driftControlEnforced",
        type: {
          name: "Boolean",
        },
      },
      credentialGuardEnforced: {
        defaultValue: false,
        serializedName: "credentialGuardEnforced",
        type: {
          name: "Boolean",
        },
      },
      smbSigningEnforced: {
        defaultValue: true,
        serializedName: "smbSigningEnforced",
        type: {
          name: "Boolean",
        },
      },
      smbClusterEncryption: {
        defaultValue: false,
        serializedName: "smbClusterEncryption",
        type: {
          name: "Boolean",
        },
      },
      sideChannelMitigationEnforced: {
        defaultValue: true,
        serializedName: "sideChannelMitigationEnforced",
        type: {
          name: "Boolean",
        },
      },
      bitlockerBootVolume: {
        defaultValue: true,
        serializedName: "bitlockerBootVolume",
        type: {
          name: "Boolean",
        },
      },
      bitlockerDataVolumes: {
        defaultValue: true,
        serializedName: "bitlockerDataVolumes",
        type: {
          name: "Boolean",
        },
      },
      wdacEnforced: {
        defaultValue: true,
        serializedName: "wdacEnforced",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const Observability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Observability",
    modelProperties: {
      streamingDataClient: {
        defaultValue: true,
        serializedName: "streamingDataClient",
        type: {
          name: "Boolean",
        },
      },
      euLocation: {
        defaultValue: false,
        serializedName: "euLocation",
        type: {
          name: "Boolean",
        },
      },
      episodicDataUpload: {
        defaultValue: true,
        serializedName: "episodicDataUpload",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const DeploymentCluster: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentCluster",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      witnessType: {
        serializedName: "witnessType",
        type: {
          name: "String",
        },
      },
      witnessPath: {
        serializedName: "witnessPath",
        type: {
          name: "String",
        },
      },
      cloudAccountName: {
        serializedName: "cloudAccountName",
        type: {
          name: "String",
        },
      },
      azureServiceEndpoint: {
        serializedName: "azureServiceEndpoint",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Storage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Storage",
    modelProperties: {
      configurationMode: {
        defaultValue: "Express",
        serializedName: "configurationMode",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const InfrastructureNetwork: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InfrastructureNetwork",
    modelProperties: {
      subnetMask: {
        serializedName: "subnetMask",
        type: {
          name: "String",
        },
      },
      gateway: {
        serializedName: "gateway",
        type: {
          name: "String",
        },
      },
      ipPools: {
        serializedName: "ipPools",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpPools",
            },
          },
        },
      },
      dnsServers: {
        serializedName: "dnsServers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      useDhcp: {
        serializedName: "useDhcp",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const IpPools: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpPools",
    modelProperties: {
      startingAddress: {
        serializedName: "startingAddress",
        type: {
          name: "String",
        },
      },
      endingAddress: {
        serializedName: "endingAddress",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PhysicalNodes: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PhysicalNodes",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      ipv4Address: {
        serializedName: "ipv4Address",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DeploymentSettingHostNetwork: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentSettingHostNetwork",
    modelProperties: {
      intents: {
        serializedName: "intents",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeploymentSettingIntents",
            },
          },
        },
      },
      storageNetworks: {
        serializedName: "storageNetworks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeploymentSettingStorageNetworks",
            },
          },
        },
      },
      storageConnectivitySwitchless: {
        defaultValue: false,
        serializedName: "storageConnectivitySwitchless",
        type: {
          name: "Boolean",
        },
      },
      enableStorageAutoIp: {
        defaultValue: false,
        serializedName: "enableStorageAutoIp",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const DeploymentSettingIntents: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentSettingIntents",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      trafficType: {
        serializedName: "trafficType",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      adapter: {
        serializedName: "adapter",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      overrideVirtualSwitchConfiguration: {
        defaultValue: false,
        serializedName: "overrideVirtualSwitchConfiguration",
        type: {
          name: "Boolean",
        },
      },
      virtualSwitchConfigurationOverrides: {
        serializedName: "virtualSwitchConfigurationOverrides",
        type: {
          name: "Composite",
          className: "DeploymentSettingVirtualSwitchConfigurationOverrides",
        },
      },
      overrideQosPolicy: {
        defaultValue: false,
        serializedName: "overrideQosPolicy",
        type: {
          name: "Boolean",
        },
      },
      qosPolicyOverrides: {
        serializedName: "qosPolicyOverrides",
        type: {
          name: "Composite",
          className: "QosPolicyOverrides",
        },
      },
      overrideAdapterProperty: {
        defaultValue: false,
        serializedName: "overrideAdapterProperty",
        type: {
          name: "Boolean",
        },
      },
      adapterPropertyOverrides: {
        serializedName: "adapterPropertyOverrides",
        type: {
          name: "Composite",
          className: "DeploymentSettingAdapterPropertyOverrides",
        },
      },
    },
  },
};

export const DeploymentSettingVirtualSwitchConfigurationOverrides: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "DeploymentSettingVirtualSwitchConfigurationOverrides",
      modelProperties: {
        enableIov: {
          serializedName: "enableIov",
          type: {
            name: "String",
          },
        },
        loadBalancingAlgorithm: {
          serializedName: "loadBalancingAlgorithm",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const QosPolicyOverrides: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QosPolicyOverrides",
    modelProperties: {
      priorityValue8021ActionCluster: {
        serializedName: "priorityValue8021Action_Cluster",
        type: {
          name: "String",
        },
      },
      priorityValue8021ActionSMB: {
        serializedName: "priorityValue8021Action_SMB",
        type: {
          name: "String",
        },
      },
      bandwidthPercentageSMB: {
        serializedName: "bandwidthPercentage_SMB",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DeploymentSettingAdapterPropertyOverrides: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "DeploymentSettingAdapterPropertyOverrides",
      modelProperties: {
        jumboPacket: {
          serializedName: "jumboPacket",
          type: {
            name: "String",
          },
        },
        networkDirect: {
          serializedName: "networkDirect",
          type: {
            name: "String",
          },
        },
        networkDirectTechnology: {
          serializedName: "networkDirectTechnology",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const DeploymentSettingStorageNetworks: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentSettingStorageNetworks",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      networkAdapterName: {
        serializedName: "networkAdapterName",
        type: {
          name: "String",
        },
      },
      vlanId: {
        serializedName: "vlanId",
        type: {
          name: "String",
        },
      },
      storageAdapterIPInfo: {
        serializedName: "storageAdapterIPInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeploymentSettingStorageAdapterIPInfo",
            },
          },
        },
      },
    },
  },
};

export const DeploymentSettingStorageAdapterIPInfo: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "DeploymentSettingStorageAdapterIPInfo",
      modelProperties: {
        physicalNode: {
          serializedName: "physicalNode",
          type: {
            name: "String",
          },
        },
        ipv4Address: {
          serializedName: "ipv4Address",
          type: {
            name: "String",
          },
        },
        subnetMask: {
          serializedName: "subnetMask",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const SdnIntegration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SdnIntegration",
    modelProperties: {
      networkController: {
        serializedName: "networkController",
        type: {
          name: "Composite",
          className: "NetworkController",
        },
      },
    },
  },
};

export const NetworkController: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkController",
    modelProperties: {
      macAddressPoolStart: {
        serializedName: "macAddressPoolStart",
        type: {
          name: "String",
        },
      },
      macAddressPoolStop: {
        serializedName: "macAddressPoolStop",
        type: {
          name: "String",
        },
      },
      networkVirtualizationEnabled: {
        serializedName: "networkVirtualizationEnabled",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const EceDeploymentSecrets: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EceDeploymentSecrets",
    modelProperties: {
      secretName: {
        serializedName: "secretName",
        type: {
          name: "String",
        },
      },
      eceSecretName: {
        serializedName: "eceSecretName",
        type: {
          name: "String",
        },
      },
      secretLocation: {
        serializedName: "secretLocation",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OptionalServices: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OptionalServices",
    modelProperties: {
      customLocation: {
        serializedName: "customLocation",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SbePartnerInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SbePartnerInfo",
    modelProperties: {
      sbeDeploymentInfo: {
        serializedName: "sbeDeploymentInfo",
        type: {
          name: "Composite",
          className: "SbeDeploymentInfo",
        },
      },
      partnerProperties: {
        serializedName: "partnerProperties",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SbePartnerProperties",
            },
          },
        },
      },
      credentialList: {
        serializedName: "credentialList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SbeCredentials",
            },
          },
        },
      },
    },
  },
};

export const SbeDeploymentInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SbeDeploymentInfo",
    modelProperties: {
      version: {
        serializedName: "version",
        type: {
          name: "String",
        },
      },
      family: {
        serializedName: "family",
        type: {
          name: "String",
        },
      },
      publisher: {
        serializedName: "publisher",
        type: {
          name: "String",
        },
      },
      sbeManifestSource: {
        serializedName: "sbeManifestSource",
        type: {
          name: "String",
        },
      },
      sbeManifestCreationDate: {
        serializedName: "sbeManifestCreationDate",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const SbePartnerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SbePartnerProperties",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      value: {
        serializedName: "value",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SbeCredentials: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SbeCredentials",
    modelProperties: {
      secretName: {
        serializedName: "secretName",
        type: {
          name: "String",
        },
      },
      eceSecretName: {
        serializedName: "eceSecretName",
        type: {
          name: "String",
        },
      },
      secretLocation: {
        serializedName: "secretLocation",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const EceReportedProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EceReportedProperties",
    modelProperties: {
      validationStatus: {
        serializedName: "validationStatus",
        type: {
          name: "Composite",
          className: "EceActionStatus",
        },
      },
      deploymentStatus: {
        serializedName: "deploymentStatus",
        type: {
          name: "Composite",
          className: "EceActionStatus",
        },
      },
    },
  },
};

export const EceActionStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EceActionStatus",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      steps: {
        serializedName: "steps",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeploymentStep",
            },
          },
        },
      },
    },
  },
};

export const DeploymentStep: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentStep",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      fullStepIndex: {
        serializedName: "fullStepIndex",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      startTimeUtc: {
        serializedName: "startTimeUtc",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      endTimeUtc: {
        serializedName: "endTimeUtc",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      steps: {
        serializedName: "steps",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeploymentStep",
            },
          },
        },
      },
      exception: {
        serializedName: "exception",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const EdgeDeviceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EdgeDeviceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EdgeDevice",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ValidateRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ValidateRequest",
    modelProperties: {
      edgeDeviceIds: {
        serializedName: "edgeDeviceIds",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ValidateResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ValidateResponse",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ExtensionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtensionList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Extension",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PerNodeExtensionState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PerNodeExtensionState",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      extension: {
        serializedName: "extension",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      typeHandlerVersion: {
        serializedName: "typeHandlerVersion",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      instanceView: {
        serializedName: "instanceView",
        type: {
          name: "Composite",
          className: "ExtensionInstanceView",
        },
      },
    },
  },
};

export const ExtensionInstanceView: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtensionInstanceView",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
      typeHandlerVersion: {
        serializedName: "typeHandlerVersion",
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "status",
        type: {
          name: "Composite",
          className: "ExtensionInstanceViewStatus",
        },
      },
    },
  },
};

export const ExtensionInstanceViewStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtensionInstanceViewStatus",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String",
        },
      },
      level: {
        serializedName: "level",
        type: {
          name: "String",
        },
      },
      displayStatus: {
        serializedName: "displayStatus",
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        type: {
          name: "String",
        },
      },
      time: {
        serializedName: "time",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const ExtensionPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtensionPatch",
    modelProperties: {
      extensionParameters: {
        serializedName: "properties.extensionParameters",
        type: {
          name: "Composite",
          className: "ExtensionPatchParameters",
        },
      },
    },
  },
};

export const ExtensionPatchParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtensionPatchParameters",
    modelProperties: {
      typeHandlerVersion: {
        serializedName: "typeHandlerVersion",
        type: {
          name: "String",
        },
      },
      enableAutomaticUpgrade: {
        serializedName: "enableAutomaticUpgrade",
        type: {
          name: "Boolean",
        },
      },
      settings: {
        serializedName: "settings",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
      protectedSettings: {
        serializedName: "protectedSettings",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const ExtensionUpgradeParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtensionUpgradeParameters",
    modelProperties: {
      targetVersion: {
        serializedName: "targetVersion",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OfferList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OfferList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Offer",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SkuMappings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuMappings",
    modelProperties: {
      catalogPlanId: {
        serializedName: "catalogPlanId",
        type: {
          name: "String",
        },
      },
      marketplaceSkuId: {
        serializedName: "marketplaceSkuId",
        type: {
          name: "String",
        },
      },
      marketplaceSkuVersions: {
        serializedName: "marketplaceSkuVersions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay",
        },
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PublisherList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PublisherList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Publisher",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SecuritySettingListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecuritySettingListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SecuritySetting",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SecurityComplianceStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityComplianceStatus",
    modelProperties: {
      securedCoreCompliance: {
        serializedName: "securedCoreCompliance",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      wdacCompliance: {
        serializedName: "wdacCompliance",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      dataAtRestEncrypted: {
        serializedName: "dataAtRestEncrypted",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      dataInTransitProtected: {
        serializedName: "dataInTransitProtected",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      lastUpdated: {
        serializedName: "lastUpdated",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const SkuList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Sku",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const UpdateRunList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateRunList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateRun",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Step: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Step",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        type: {
          name: "String",
        },
      },
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "status",
        type: {
          name: "String",
        },
      },
      startTimeUtc: {
        serializedName: "startTimeUtc",
        type: {
          name: "DateTime",
        },
      },
      endTimeUtc: {
        serializedName: "endTimeUtc",
        type: {
          name: "DateTime",
        },
      },
      lastUpdatedTimeUtc: {
        serializedName: "lastUpdatedTimeUtc",
        type: {
          name: "DateTime",
        },
      },
      expectedExecutionTime: {
        serializedName: "expectedExecutionTime",
        type: {
          name: "String",
        },
      },
      steps: {
        serializedName: "steps",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Step",
            },
          },
        },
      },
    },
  },
};

export const UpdateSummariesList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateSummariesList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateSummaries",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PackageVersionInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PackageVersionInfo",
    modelProperties: {
      packageType: {
        serializedName: "packageType",
        type: {
          name: "String",
        },
      },
      version: {
        serializedName: "version",
        type: {
          name: "String",
        },
      },
      lastUpdated: {
        serializedName: "lastUpdated",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const PrecheckResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrecheckResult",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String",
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Composite",
          className: "PrecheckResultTags",
        },
      },
      healthCheckTags: {
        serializedName: "healthCheckTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
      title: {
        serializedName: "title",
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "status",
        type: {
          name: "String",
        },
      },
      severity: {
        serializedName: "severity",
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        type: {
          name: "String",
        },
      },
      remediation: {
        serializedName: "remediation",
        type: {
          name: "String",
        },
      },
      targetResourceID: {
        serializedName: "targetResourceID",
        type: {
          name: "String",
        },
      },
      targetResourceName: {
        serializedName: "targetResourceName",
        type: {
          name: "String",
        },
      },
      targetResourceType: {
        serializedName: "targetResourceType",
        type: {
          name: "String",
        },
      },
      timestamp: {
        serializedName: "timestamp",
        type: {
          name: "DateTime",
        },
      },
      additionalData: {
        serializedName: "additionalData",
        type: {
          name: "String",
        },
      },
      healthCheckSource: {
        serializedName: "healthCheckSource",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrecheckResultTags: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrecheckResultTags",
    modelProperties: {
      key: {
        serializedName: "key",
        type: {
          name: "String",
        },
      },
      value: {
        serializedName: "value",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const UpdateList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Update",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const UpdatePrerequisite: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdatePrerequisite",
    modelProperties: {
      updateType: {
        serializedName: "updateType",
        type: {
          name: "String",
        },
      },
      version: {
        serializedName: "version",
        type: {
          name: "String",
        },
      },
      packageName: {
        serializedName: "packageName",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ArcConnectivityProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArcConnectivityProperties",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean",
        },
      },
      serviceConfigurations: {
        serializedName: "serviceConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceConfiguration",
            },
          },
        },
      },
    },
  },
};

export const ServiceConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceConfiguration",
    modelProperties: {
      serviceName: {
        serializedName: "serviceName",
        required: true,
        type: {
          name: "String",
        },
      },
      port: {
        serializedName: "port",
        required: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const HciEdgeDeviceAdapterPropertyOverrides: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "HciEdgeDeviceAdapterPropertyOverrides",
      modelProperties: {
        jumboPacket: {
          serializedName: "jumboPacket",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        networkDirect: {
          serializedName: "networkDirect",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        networkDirectTechnology: {
          serializedName: "networkDirectTechnology",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const DeviceConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeviceConfiguration",
    modelProperties: {
      nicDetails: {
        serializedName: "nicDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NicDetail",
            },
          },
        },
      },
      deviceMetadata: {
        serializedName: "deviceMetadata",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const NicDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NicDetail",
    modelProperties: {
      adapterName: {
        serializedName: "adapterName",
        type: {
          name: "String",
        },
      },
      interfaceDescription: {
        serializedName: "interfaceDescription",
        type: {
          name: "String",
        },
      },
      componentId: {
        serializedName: "componentId",
        type: {
          name: "String",
        },
      },
      driverVersion: {
        serializedName: "driverVersion",
        type: {
          name: "String",
        },
      },
      ip4Address: {
        serializedName: "ip4Address",
        type: {
          name: "String",
        },
      },
      subnetMask: {
        serializedName: "subnetMask",
        type: {
          name: "String",
        },
      },
      defaultGateway: {
        serializedName: "defaultGateway",
        type: {
          name: "String",
        },
      },
      dnsServers: {
        serializedName: "dnsServers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      defaultIsolationId: {
        serializedName: "defaultIsolationId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const EdgeDeviceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EdgeDeviceProperties",
    modelProperties: {
      deviceConfiguration: {
        serializedName: "deviceConfiguration",
        type: {
          name: "Composite",
          className: "DeviceConfiguration",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const HciValidationFailureDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HciValidationFailureDetail",
    modelProperties: {
      exception: {
        serializedName: "exception",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const HciEdgeDeviceArcExtension: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HciEdgeDeviceArcExtension",
    modelProperties: {
      extensionName: {
        serializedName: "extensionName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      errorDetails: {
        serializedName: "errorDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HciValidationFailureDetail",
            },
          },
        },
      },
      extensionResourceId: {
        serializedName: "extensionResourceId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      typeHandlerVersion: {
        serializedName: "typeHandlerVersion",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      managedBy: {
        serializedName: "managedBy",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ExtensionProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtensionProfile",
    modelProperties: {
      extensions: {
        serializedName: "extensions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HciEdgeDeviceArcExtension",
            },
          },
        },
      },
    },
  },
};

export const HciNetworkProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HciNetworkProfile",
    modelProperties: {
      nicDetails: {
        serializedName: "nicDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HciNicDetail",
            },
          },
        },
      },
      switchDetails: {
        serializedName: "switchDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SwitchDetail",
            },
          },
        },
      },
      hostNetwork: {
        serializedName: "hostNetwork",
        type: {
          name: "Composite",
          className: "HciEdgeDeviceHostNetwork",
        },
      },
    },
  },
};

export const HciNicDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HciNicDetail",
    modelProperties: {
      adapterName: {
        serializedName: "adapterName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      interfaceDescription: {
        serializedName: "interfaceDescription",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      componentId: {
        serializedName: "componentId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      driverVersion: {
        serializedName: "driverVersion",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      ip4Address: {
        serializedName: "ip4Address",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      subnetMask: {
        serializedName: "subnetMask",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      defaultGateway: {
        serializedName: "defaultGateway",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      dnsServers: {
        serializedName: "dnsServers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      defaultIsolationId: {
        serializedName: "defaultIsolationId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      macAddress: {
        serializedName: "macAddress",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      slot: {
        serializedName: "slot",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      switchName: {
        serializedName: "switchName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      nicType: {
        serializedName: "nicType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      vlanId: {
        serializedName: "vlanId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      nicStatus: {
        serializedName: "nicStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SwitchDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SwitchDetail",
    modelProperties: {
      switchName: {
        serializedName: "switchName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      switchType: {
        serializedName: "switchType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      extensions: {
        serializedName: "extensions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SwitchExtension",
            },
          },
        },
      },
    },
  },
};

export const SwitchExtension: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SwitchExtension",
    modelProperties: {
      switchId: {
        serializedName: "switchId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      extensionName: {
        serializedName: "extensionName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      extensionEnabled: {
        serializedName: "extensionEnabled",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const HciEdgeDeviceHostNetwork: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HciEdgeDeviceHostNetwork",
    modelProperties: {
      intents: {
        serializedName: "intents",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HciEdgeDeviceIntents",
            },
          },
        },
      },
      storageNetworks: {
        serializedName: "storageNetworks",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HciEdgeDeviceStorageNetworks",
            },
          },
        },
      },
      storageConnectivitySwitchless: {
        serializedName: "storageConnectivitySwitchless",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      enableStorageAutoIp: {
        serializedName: "enableStorageAutoIp",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const HciEdgeDeviceIntents: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HciEdgeDeviceIntents",
    modelProperties: {
      scope: {
        serializedName: "scope",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      intentType: {
        serializedName: "intentType",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      isComputeIntentSet: {
        serializedName: "isComputeIntentSet",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      isStorageIntentSet: {
        serializedName: "isStorageIntentSet",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      isOnlyStorage: {
        serializedName: "isOnlyStorage",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      isManagementIntentSet: {
        serializedName: "isManagementIntentSet",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      isStretchIntentSet: {
        serializedName: "isStretchIntentSet",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      isOnlyStretch: {
        serializedName: "isOnlyStretch",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      isNetworkIntentType: {
        serializedName: "isNetworkIntentType",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      intentName: {
        serializedName: "intentName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      intentAdapters: {
        serializedName: "intentAdapters",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      overrideVirtualSwitchConfiguration: {
        serializedName: "overrideVirtualSwitchConfiguration",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      virtualSwitchConfigurationOverrides: {
        serializedName: "virtualSwitchConfigurationOverrides",
        type: {
          name: "Composite",
          className: "HciEdgeDeviceVirtualSwitchConfigurationOverrides",
        },
      },
      overrideQosPolicy: {
        serializedName: "overrideQosPolicy",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      qosPolicyOverrides: {
        serializedName: "qosPolicyOverrides",
        type: {
          name: "Composite",
          className: "QosPolicyOverrides",
        },
      },
      overrideAdapterProperty: {
        serializedName: "overrideAdapterProperty",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      adapterPropertyOverrides: {
        serializedName: "adapterPropertyOverrides",
        type: {
          name: "Composite",
          className: "HciEdgeDeviceAdapterPropertyOverrides",
        },
      },
    },
  },
};

export const HciEdgeDeviceVirtualSwitchConfigurationOverrides: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "HciEdgeDeviceVirtualSwitchConfigurationOverrides",
      modelProperties: {
        enableIov: {
          serializedName: "enableIov",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        loadBalancingAlgorithm: {
          serializedName: "loadBalancingAlgorithm",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const HciEdgeDeviceStorageNetworks: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HciEdgeDeviceStorageNetworks",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      networkAdapterName: {
        serializedName: "networkAdapterName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      storageVlanId: {
        serializedName: "storageVlanId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      storageAdapterIPInfo: {
        serializedName: "storageAdapterIPInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HciEdgeDeviceStorageAdapterIPInfo",
            },
          },
        },
      },
    },
  },
};

export const HciEdgeDeviceStorageAdapterIPInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HciEdgeDeviceStorageAdapterIPInfo",
    modelProperties: {
      physicalNode: {
        serializedName: "physicalNode",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      ipv4Address: {
        serializedName: "ipv4Address",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      subnetMask: {
        serializedName: "subnetMask",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const HciOsProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HciOsProfile",
    modelProperties: {
      bootType: {
        serializedName: "bootType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      assemblyVersion: {
        serializedName: "assemblyVersion",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SbeDeploymentPackageInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SbeDeploymentPackageInfo",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      sbeManifest: {
        serializedName: "sbeManifest",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ReportedProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReportedProperties",
    modelProperties: {
      deviceState: {
        serializedName: "deviceState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      extensionProfile: {
        serializedName: "extensionProfile",
        type: {
          name: "Composite",
          className: "ExtensionProfile",
        },
      },
    },
  },
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
    },
  },
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const HciEdgeDeviceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HciEdgeDeviceProperties",
    modelProperties: {
      ...EdgeDeviceProperties.type.modelProperties,
      reportedProperties: {
        serializedName: "reportedProperties",
        type: {
          name: "Composite",
          className: "HciReportedProperties",
        },
      },
    },
  },
};

export const HciReportedProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HciReportedProperties",
    modelProperties: {
      ...ReportedProperties.type.modelProperties,
      networkProfile: {
        serializedName: "networkProfile",
        type: {
          name: "Composite",
          className: "HciNetworkProfile",
        },
      },
      osProfile: {
        serializedName: "osProfile",
        type: {
          name: "Composite",
          className: "HciOsProfile",
        },
      },
      sbeDeploymentPackageInfo: {
        serializedName: "sbeDeploymentPackageInfo",
        type: {
          name: "Composite",
          className: "SbeDeploymentPackageInfo",
        },
      },
    },
  },
};

export const ArcSetting: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArcSetting",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      arcInstanceResourceGroup: {
        serializedName: "properties.arcInstanceResourceGroup",
        type: {
          name: "String",
        },
      },
      arcApplicationClientId: {
        serializedName: "properties.arcApplicationClientId",
        type: {
          name: "String",
        },
      },
      arcApplicationTenantId: {
        serializedName: "properties.arcApplicationTenantId",
        type: {
          name: "String",
        },
      },
      arcServicePrincipalObjectId: {
        serializedName: "properties.arcServicePrincipalObjectId",
        type: {
          name: "String",
        },
      },
      arcApplicationObjectId: {
        serializedName: "properties.arcApplicationObjectId",
        type: {
          name: "String",
        },
      },
      aggregateState: {
        serializedName: "properties.aggregateState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      perNodeDetails: {
        serializedName: "properties.perNodeDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PerNodeState",
            },
          },
        },
      },
      connectivityProperties: {
        serializedName: "properties.connectivityProperties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
      defaultExtensions: {
        serializedName: "properties.defaultExtensions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DefaultExtensionDetails",
            },
          },
        },
      },
    },
  },
};

export const DeploymentSetting: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentSetting",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      arcNodeResourceIds: {
        serializedName: "properties.arcNodeResourceIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      deploymentMode: {
        defaultValue: "Deploy",
        serializedName: "properties.deploymentMode",
        type: {
          name: "String",
        },
      },
      operationType: {
        defaultValue: "ClusterProvisioning",
        serializedName: "properties.operationType",
        type: {
          name: "String",
        },
      },
      deploymentConfiguration: {
        serializedName: "properties.deploymentConfiguration",
        type: {
          name: "Composite",
          className: "DeploymentConfiguration",
        },
      },
      reportedProperties: {
        serializedName: "properties.reportedProperties",
        type: {
          name: "Composite",
          className: "EceReportedProperties",
        },
      },
    },
  },
};

export const EdgeDevice: coreClient.CompositeMapper = {
  serializedName: "EdgeDevice",
  type: {
    name: "Composite",
    className: "EdgeDevice",
    uberParent: "ProxyResource",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind",
    },
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        defaultValue: "HCI",
        serializedName: "kind",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Extension: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Extension",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      aggregateState: {
        serializedName: "properties.aggregateState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      perNodeExtensionDetails: {
        serializedName: "properties.perNodeExtensionDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PerNodeExtensionState",
            },
          },
        },
      },
      managedBy: {
        serializedName: "properties.managedBy",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      forceUpdateTag: {
        serializedName: "properties.extensionParameters.forceUpdateTag",
        type: {
          name: "String",
        },
      },
      publisher: {
        serializedName: "properties.extensionParameters.publisher",
        type: {
          name: "String",
        },
      },
      typePropertiesExtensionParametersType: {
        serializedName: "properties.extensionParameters.type",
        type: {
          name: "String",
        },
      },
      typeHandlerVersion: {
        serializedName: "properties.extensionParameters.typeHandlerVersion",
        type: {
          name: "String",
        },
      },
      autoUpgradeMinorVersion: {
        serializedName:
          "properties.extensionParameters.autoUpgradeMinorVersion",
        type: {
          name: "Boolean",
        },
      },
      settings: {
        serializedName: "properties.extensionParameters.settings",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
      protectedSettings: {
        serializedName: "properties.extensionParameters.protectedSettings",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
      enableAutomaticUpgrade: {
        serializedName: "properties.extensionParameters.enableAutomaticUpgrade",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const Offer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Offer",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      publisherId: {
        serializedName: "properties.publisherId",
        type: {
          name: "String",
        },
      },
      content: {
        serializedName: "properties.content",
        type: {
          name: "String",
        },
      },
      contentVersion: {
        serializedName: "properties.contentVersion",
        type: {
          name: "String",
        },
      },
      skuMappings: {
        serializedName: "properties.skuMappings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuMappings",
            },
          },
        },
      },
    },
  },
};

export const Publisher: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Publisher",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SecuritySetting: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecuritySetting",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      securedCoreComplianceAssignment: {
        serializedName: "properties.securedCoreComplianceAssignment",
        type: {
          name: "String",
        },
      },
      wdacComplianceAssignment: {
        serializedName: "properties.wdacComplianceAssignment",
        type: {
          name: "String",
        },
      },
      smbEncryptionForIntraClusterTrafficComplianceAssignment: {
        serializedName:
          "properties.smbEncryptionForIntraClusterTrafficComplianceAssignment",
        type: {
          name: "String",
        },
      },
      securityComplianceStatus: {
        serializedName: "properties.securityComplianceStatus",
        type: {
          name: "Composite",
          className: "SecurityComplianceStatus",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      publisherId: {
        serializedName: "properties.publisherId",
        type: {
          name: "String",
        },
      },
      offerId: {
        serializedName: "properties.offerId",
        type: {
          name: "String",
        },
      },
      content: {
        serializedName: "properties.content",
        type: {
          name: "String",
        },
      },
      contentVersion: {
        serializedName: "properties.contentVersion",
        type: {
          name: "String",
        },
      },
      skuMappings: {
        serializedName: "properties.skuMappings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuMappings",
            },
          },
        },
      },
    },
  },
};

export const UpdateRun: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateRun",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      timeStarted: {
        serializedName: "properties.timeStarted",
        type: {
          name: "DateTime",
        },
      },
      lastUpdatedTime: {
        serializedName: "properties.lastUpdatedTime",
        type: {
          name: "DateTime",
        },
      },
      duration: {
        serializedName: "properties.duration",
        type: {
          name: "String",
        },
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "String",
        },
      },
      namePropertiesProgressName: {
        serializedName: "properties.progress.name",
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "properties.progress.description",
        type: {
          name: "String",
        },
      },
      errorMessage: {
        serializedName: "properties.progress.errorMessage",
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "properties.progress.status",
        type: {
          name: "String",
        },
      },
      startTimeUtc: {
        serializedName: "properties.progress.startTimeUtc",
        type: {
          name: "DateTime",
        },
      },
      endTimeUtc: {
        serializedName: "properties.progress.endTimeUtc",
        type: {
          name: "DateTime",
        },
      },
      lastUpdatedTimeUtc: {
        serializedName: "properties.progress.lastUpdatedTimeUtc",
        type: {
          name: "DateTime",
        },
      },
      expectedExecutionTime: {
        serializedName: "properties.progress.expectedExecutionTime",
        type: {
          name: "String",
        },
      },
      steps: {
        serializedName: "properties.progress.steps",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Step",
            },
          },
        },
      },
    },
  },
};

export const UpdateSummaries: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateSummaries",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      oemFamily: {
        serializedName: "properties.oemFamily",
        type: {
          name: "String",
        },
      },
      currentOemVersion: {
        serializedName: "properties.currentOemVersion",
        type: {
          name: "String",
        },
      },
      hardwareModel: {
        serializedName: "properties.hardwareModel",
        type: {
          name: "String",
        },
      },
      packageVersions: {
        serializedName: "properties.packageVersions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PackageVersionInfo",
            },
          },
        },
      },
      currentVersion: {
        serializedName: "properties.currentVersion",
        type: {
          name: "String",
        },
      },
      currentSbeVersion: {
        serializedName: "properties.currentSbeVersion",
        type: {
          name: "String",
        },
      },
      lastUpdated: {
        serializedName: "properties.lastUpdated",
        type: {
          name: "DateTime",
        },
      },
      lastChecked: {
        serializedName: "properties.lastChecked",
        type: {
          name: "DateTime",
        },
      },
      healthState: {
        serializedName: "properties.healthState",
        type: {
          name: "String",
        },
      },
      healthCheckResult: {
        serializedName: "properties.healthCheckResult",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrecheckResult",
            },
          },
        },
      },
      healthCheckDate: {
        serializedName: "properties.healthCheckDate",
        type: {
          name: "DateTime",
        },
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Update: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Update",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      installedDate: {
        serializedName: "properties.installedDate",
        type: {
          name: "DateTime",
        },
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String",
        },
      },
      minSbeVersionRequired: {
        serializedName: "properties.minSbeVersionRequired",
        type: {
          name: "String",
        },
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "String",
        },
      },
      prerequisites: {
        serializedName: "properties.prerequisites",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdatePrerequisite",
            },
          },
        },
      },
      componentVersions: {
        serializedName: "properties.componentVersions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PackageVersionInfo",
            },
          },
        },
      },
      rebootRequired: {
        serializedName: "properties.rebootRequired",
        type: {
          name: "String",
        },
      },
      healthState: {
        serializedName: "properties.healthState",
        type: {
          name: "String",
        },
      },
      healthCheckResult: {
        serializedName: "properties.healthCheckResult",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrecheckResult",
            },
          },
        },
      },
      healthCheckDate: {
        serializedName: "properties.healthCheckDate",
        type: {
          name: "DateTime",
        },
      },
      packagePath: {
        serializedName: "properties.packagePath",
        type: {
          name: "String",
        },
      },
      packageSizeInMb: {
        serializedName: "properties.packageSizeInMb",
        type: {
          name: "Number",
        },
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String",
        },
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "String",
        },
      },
      publisher: {
        serializedName: "properties.publisher",
        type: {
          name: "String",
        },
      },
      releaseLink: {
        serializedName: "properties.releaseLink",
        type: {
          name: "String",
        },
      },
      availabilityType: {
        serializedName: "properties.availabilityType",
        type: {
          name: "String",
        },
      },
      packageType: {
        serializedName: "properties.packageType",
        type: {
          name: "String",
        },
      },
      additionalProperties: {
        serializedName: "properties.additionalProperties",
        type: {
          name: "String",
        },
      },
      progressPercentage: {
        serializedName: "properties.updateStateProperties.progressPercentage",
        type: {
          name: "Number",
        },
      },
      notifyMessage: {
        serializedName: "properties.updateStateProperties.notifyMessage",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Cluster: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Cluster",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      connectivityStatus: {
        serializedName: "properties.connectivityStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      cloudId: {
        serializedName: "properties.cloudId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      cloudManagementEndpoint: {
        serializedName: "properties.cloudManagementEndpoint",
        type: {
          name: "String",
        },
      },
      aadClientId: {
        serializedName: "properties.aadClientId",
        type: {
          name: "String",
        },
      },
      aadTenantId: {
        serializedName: "properties.aadTenantId",
        type: {
          name: "String",
        },
      },
      aadApplicationObjectId: {
        serializedName: "properties.aadApplicationObjectId",
        type: {
          name: "String",
        },
      },
      aadServicePrincipalObjectId: {
        serializedName: "properties.aadServicePrincipalObjectId",
        type: {
          name: "String",
        },
      },
      softwareAssuranceProperties: {
        serializedName: "properties.softwareAssuranceProperties",
        type: {
          name: "Composite",
          className: "SoftwareAssuranceProperties",
        },
      },
      logCollectionProperties: {
        serializedName: "properties.logCollectionProperties",
        type: {
          name: "Composite",
          className: "LogCollectionProperties",
        },
      },
      remoteSupportProperties: {
        serializedName: "properties.remoteSupportProperties",
        type: {
          name: "Composite",
          className: "RemoteSupportProperties",
        },
      },
      desiredProperties: {
        serializedName: "properties.desiredProperties",
        type: {
          name: "Composite",
          className: "ClusterDesiredProperties",
        },
      },
      reportedProperties: {
        serializedName: "properties.reportedProperties",
        type: {
          name: "Composite",
          className: "ClusterReportedProperties",
        },
      },
      isolatedVmAttestationConfiguration: {
        serializedName: "properties.isolatedVmAttestationConfiguration",
        type: {
          name: "Composite",
          className: "IsolatedVmAttestationConfiguration",
        },
      },
      trialDaysRemaining: {
        serializedName: "properties.trialDaysRemaining",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      billingModel: {
        serializedName: "properties.billingModel",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      registrationTimestamp: {
        serializedName: "properties.registrationTimestamp",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      lastSyncTimestamp: {
        serializedName: "properties.lastSyncTimestamp",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      lastBillingTimestamp: {
        serializedName: "properties.lastBillingTimestamp",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      serviceEndpoint: {
        serializedName: "properties.serviceEndpoint",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resourceProviderObjectId: {
        serializedName: "properties.resourceProviderObjectId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      principalId: {
        serializedName: "identity.principalId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      tenantId: {
        serializedName: "identity.tenantId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      typeIdentityType: {
        serializedName: "identity.type",
        type: {
          name: "String",
        },
      },
      userAssignedIdentities: {
        serializedName: "identity.userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" },
          },
        },
      },
    },
  },
};

export const HciEdgeDevice: coreClient.CompositeMapper = {
  serializedName: "HCI",
  type: {
    name: "Composite",
    className: "HciEdgeDevice",
    uberParent: "EdgeDevice",
    polymorphicDiscriminator: EdgeDevice.type.polymorphicDiscriminator,
    modelProperties: {
      ...EdgeDevice.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "HciEdgeDeviceProperties",
        },
      },
    },
  },
};

export const ClustersTriggerLogCollectionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClustersTriggerLogCollectionHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClustersConfigureRemoteSupportHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ClustersConfigureRemoteSupportHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const DeploymentSettingsCreateOrUpdateHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "DeploymentSettingsCreateOrUpdateHeaders",
      modelProperties: {
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const DeploymentSettingsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentSettingsDeleteHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const EdgeDevicesCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EdgeDevicesCreateOrUpdateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const EdgeDevicesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EdgeDevicesDeleteHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const EdgeDevicesValidateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EdgeDevicesValidateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SecuritySettingsCreateOrUpdateHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "SecuritySettingsCreateOrUpdateHeaders",
      modelProperties: {
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const SecuritySettingsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecuritySettingsDeleteHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const UpdateRunsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateRunsDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const UpdateSummariesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateSummariesDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const UpdatesPostHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdatesPostHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const UpdatesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdatesDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
    },
  },
};

export let discriminators = {
  "ProxyResource.EdgeDevice": EdgeDevice,
  "EdgeDevice.HCI": HciEdgeDevice,
};
