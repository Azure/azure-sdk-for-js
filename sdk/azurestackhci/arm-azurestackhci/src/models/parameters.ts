/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  GalleryImages as GalleryImagesMapper,
  GalleryImagesUpdateRequest as GalleryImagesUpdateRequestMapper,
  LogicalNetworks as LogicalNetworksMapper,
  LogicalNetworksUpdateRequest as LogicalNetworksUpdateRequestMapper,
  MarketplaceGalleryImages as MarketplaceGalleryImagesMapper,
  MarketplaceGalleryImagesUpdateRequest as MarketplaceGalleryImagesUpdateRequestMapper,
  NetworkInterfaces as NetworkInterfacesMapper,
  NetworkInterfacesUpdateRequest as NetworkInterfacesUpdateRequestMapper,
  StorageContainers as StorageContainersMapper,
  StorageContainersUpdateRequest as StorageContainersUpdateRequestMapper,
  VirtualHardDisks as VirtualHardDisksMapper,
  VirtualHardDisksUpdateRequest as VirtualHardDisksUpdateRequestMapper,
  VirtualMachineInstance as VirtualMachineInstanceMapper,
  VirtualMachineInstanceUpdateRequest as VirtualMachineInstanceUpdateRequestMapper,
  GuestAgent as GuestAgentMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    constraints: {
      MinLength: 1
    },
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const galleryImageName: OperationURLParameter = {
  parameterPath: "galleryImageName",
  mapper: {
    constraints: {
      Pattern: new RegExp(
        "^[a-zA-Z0-9]$|^[a-zA-Z0-9][-._a-zA-Z0-9]{0,78}[a-zA-Z0-9]$"
      ),
      MaxLength: 80,
      MinLength: 1
    },
    serializedName: "galleryImageName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2023-09-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const galleryImages: OperationParameter = {
  parameterPath: "galleryImages",
  mapper: GalleryImagesMapper
};

export const galleryImages1: OperationParameter = {
  parameterPath: "galleryImages",
  mapper: GalleryImagesUpdateRequestMapper
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const logicalNetworkName: OperationURLParameter = {
  parameterPath: "logicalNetworkName",
  mapper: {
    constraints: {
      Pattern: new RegExp(
        "^[a-zA-Z0-9]$|^[a-zA-Z0-9][-._a-zA-Z0-9]{0,62}[_a-zA-Z0-9]$"
      ),
      MaxLength: 64,
      MinLength: 2
    },
    serializedName: "logicalNetworkName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const logicalNetworks: OperationParameter = {
  parameterPath: "logicalNetworks",
  mapper: LogicalNetworksMapper
};

export const logicalNetworks1: OperationParameter = {
  parameterPath: "logicalNetworks",
  mapper: LogicalNetworksUpdateRequestMapper
};

export const marketplaceGalleryImageName: OperationURLParameter = {
  parameterPath: "marketplaceGalleryImageName",
  mapper: {
    constraints: {
      Pattern: new RegExp(
        "^[a-zA-Z0-9]$|^[a-zA-Z0-9][-._a-zA-Z0-9]{0,78}[a-zA-Z0-9]$"
      ),
      MaxLength: 80,
      MinLength: 1
    },
    serializedName: "marketplaceGalleryImageName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const marketplaceGalleryImages: OperationParameter = {
  parameterPath: "marketplaceGalleryImages",
  mapper: MarketplaceGalleryImagesMapper
};

export const marketplaceGalleryImages1: OperationParameter = {
  parameterPath: "marketplaceGalleryImages",
  mapper: MarketplaceGalleryImagesUpdateRequestMapper
};

export const networkInterfaceName: OperationURLParameter = {
  parameterPath: "networkInterfaceName",
  mapper: {
    constraints: {
      Pattern: new RegExp(
        "^[a-zA-Z0-9]$|^[a-zA-Z0-9][-._a-zA-Z0-9]{0,78}[_a-zA-Z0-9]$"
      ),
      MaxLength: 80,
      MinLength: 1
    },
    serializedName: "networkInterfaceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const networkInterfaces: OperationParameter = {
  parameterPath: "networkInterfaces",
  mapper: NetworkInterfacesMapper
};

export const networkInterfaces1: OperationParameter = {
  parameterPath: "networkInterfaces",
  mapper: NetworkInterfacesUpdateRequestMapper
};

export const storageContainerName: OperationURLParameter = {
  parameterPath: "storageContainerName",
  mapper: {
    constraints: {
      Pattern: new RegExp(
        "^[a-zA-Z0-9]$|^[a-zA-Z0-9][-._a-zA-Z0-9]{0,78}[_a-zA-Z0-9]$"
      ),
      MaxLength: 80,
      MinLength: 1
    },
    serializedName: "storageContainerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const storageContainers: OperationParameter = {
  parameterPath: "storageContainers",
  mapper: StorageContainersMapper
};

export const storageContainers1: OperationParameter = {
  parameterPath: "storageContainers",
  mapper: StorageContainersUpdateRequestMapper
};

export const virtualHardDiskName: OperationURLParameter = {
  parameterPath: "virtualHardDiskName",
  mapper: {
    constraints: {
      Pattern: new RegExp(
        "^[a-zA-Z0-9]$|^[a-zA-Z0-9][-._a-zA-Z0-9]{0,62}[a-zA-Z0-9]$"
      ),
      MaxLength: 80,
      MinLength: 1
    },
    serializedName: "virtualHardDiskName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const virtualHardDisks: OperationParameter = {
  parameterPath: "virtualHardDisks",
  mapper: VirtualHardDisksMapper
};

export const virtualHardDisks1: OperationParameter = {
  parameterPath: "virtualHardDisks",
  mapper: VirtualHardDisksUpdateRequestMapper
};

export const resourceUri: OperationURLParameter = {
  parameterPath: "resourceUri",
  mapper: {
    serializedName: "resourceUri",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const virtualMachineInstance: OperationParameter = {
  parameterPath: "virtualMachineInstance",
  mapper: VirtualMachineInstanceMapper
};

export const virtualMachineInstance1: OperationParameter = {
  parameterPath: "virtualMachineInstance",
  mapper: VirtualMachineInstanceUpdateRequestMapper
};

export const body: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: GuestAgentMapper
};
