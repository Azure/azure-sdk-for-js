/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/moveCollectionsMappers";
import * as Parameters from "../models/parameters";
import { ResourceMoverServiceAPIContext } from "../resourceMoverServiceAPIContext";

/** Class representing a MoveCollections. */
export class MoveCollections {
  private readonly client: ResourceMoverServiceAPIContext;

  /**
   * Create a MoveCollections.
   * @param {ResourceMoverServiceAPIContext} client Reference to the service client.
   */
  constructor(client: ResourceMoverServiceAPIContext) {
    this.client = client;
  }

  /**
   * Creates or updates a move collection.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param [options] The optional parameters
   * @returns Promise<Models.MoveCollectionsCreateResponse>
   */
  create(resourceGroupName: string, moveCollectionName: string, options?: Models.MoveCollectionsCreateOptionalParams): Promise<Models.MoveCollectionsCreateResponse>;
  /**
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param callback The callback
   */
  create(resourceGroupName: string, moveCollectionName: string, callback: msRest.ServiceCallback<Models.MoveCollection>): void;
  /**
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The optional parameters
   * @param callback The callback
   */
  create(resourceGroupName: string, moveCollectionName: string, options: Models.MoveCollectionsCreateOptionalParams, callback: msRest.ServiceCallback<Models.MoveCollection>): void;
  create(resourceGroupName: string, moveCollectionName: string, options?: Models.MoveCollectionsCreateOptionalParams | msRest.ServiceCallback<Models.MoveCollection>, callback?: msRest.ServiceCallback<Models.MoveCollection>): Promise<Models.MoveCollectionsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        moveCollectionName,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.MoveCollectionsCreateResponse>;
  }

  /**
   * Updates a move collection.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param [options] The optional parameters
   * @returns Promise<Models.MoveCollectionsUpdateResponse>
   */
  update(resourceGroupName: string, moveCollectionName: string, options?: Models.MoveCollectionsUpdateOptionalParams): Promise<Models.MoveCollectionsUpdateResponse>;
  /**
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param callback The callback
   */
  update(resourceGroupName: string, moveCollectionName: string, callback: msRest.ServiceCallback<Models.MoveCollection>): void;
  /**
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, moveCollectionName: string, options: Models.MoveCollectionsUpdateOptionalParams, callback: msRest.ServiceCallback<Models.MoveCollection>): void;
  update(resourceGroupName: string, moveCollectionName: string, options?: Models.MoveCollectionsUpdateOptionalParams | msRest.ServiceCallback<Models.MoveCollection>, callback?: msRest.ServiceCallback<Models.MoveCollection>): Promise<Models.MoveCollectionsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        moveCollectionName,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.MoveCollectionsUpdateResponse>;
  }

  /**
   * Deletes a move collection.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param [options] The optional parameters
   * @returns Promise<Models.MoveCollectionsDeleteMethodResponse>
   */
  deleteMethod(resourceGroupName: string, moveCollectionName: string, options?: msRest.RequestOptionsBase): Promise<Models.MoveCollectionsDeleteMethodResponse> {
    return this.beginDeleteMethod(resourceGroupName,moveCollectionName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.MoveCollectionsDeleteMethodResponse>;
  }

  /**
   * Gets the move collection.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param [options] The optional parameters
   * @returns Promise<Models.MoveCollectionsGetResponse>
   */
  get(resourceGroupName: string, moveCollectionName: string, options?: msRest.RequestOptionsBase): Promise<Models.MoveCollectionsGetResponse>;
  /**
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param callback The callback
   */
  get(resourceGroupName: string, moveCollectionName: string, callback: msRest.ServiceCallback<Models.MoveCollection>): void;
  /**
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, moveCollectionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MoveCollection>): void;
  get(resourceGroupName: string, moveCollectionName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MoveCollection>, callback?: msRest.ServiceCallback<Models.MoveCollection>): Promise<Models.MoveCollectionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        moveCollectionName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.MoveCollectionsGetResponse>;
  }

  /**
   * Initiates prepare for the set of resources included in the request body. The prepare operation
   * is on the moveResources that are in the moveState 'PreparePending' or 'PrepareFailed', on a
   * successful completion the moveResource moveState do a transition to MovePending. To aid the user
   * to prerequisite the operation the client can call operation with validateOnly property set to
   * true.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param [options] The optional parameters
   * @returns Promise<Models.MoveCollectionsPrepareResponse>
   */
  prepare(resourceGroupName: string, moveCollectionName: string, options?: Models.MoveCollectionsPrepareOptionalParams): Promise<Models.MoveCollectionsPrepareResponse> {
    return this.beginPrepare(resourceGroupName,moveCollectionName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.MoveCollectionsPrepareResponse>;
  }

  /**
   * Moves the set of resources included in the request body. The move operation is triggered after
   * the moveResources are in the moveState 'MovePending' or 'MoveFailed', on a successful completion
   * the moveResource moveState do a transition to CommitPending. To aid the user to prerequisite the
   * operation the client can call operation with validateOnly property set to true.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param [options] The optional parameters
   * @returns Promise<Models.MoveCollectionsInitiateMoveResponse>
   */
  initiateMove(resourceGroupName: string, moveCollectionName: string, options?: Models.MoveCollectionsInitiateMoveOptionalParams): Promise<Models.MoveCollectionsInitiateMoveResponse> {
    return this.beginInitiateMove(resourceGroupName,moveCollectionName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.MoveCollectionsInitiateMoveResponse>;
  }

  /**
   * Commits the set of resources included in the request body. The commit operation is triggered on
   * the moveResources in the moveState 'CommitPending' or 'CommitFailed', on a successful completion
   * the moveResource moveState do a transition to Committed. To aid the user to prerequisite the
   * operation the client can call operation with validateOnly property set to true.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param [options] The optional parameters
   * @returns Promise<Models.MoveCollectionsCommitResponse>
   */
  commit(resourceGroupName: string, moveCollectionName: string, options?: Models.MoveCollectionsCommitOptionalParams): Promise<Models.MoveCollectionsCommitResponse> {
    return this.beginCommit(resourceGroupName,moveCollectionName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.MoveCollectionsCommitResponse>;
  }

  /**
   * Discards the set of resources included in the request body. The discard operation is triggered
   * on the moveResources in the moveState 'CommitPending' or 'DiscardFailed', on a successful
   * completion the moveResource moveState do a transition to MovePending. To aid the user to
   * prerequisite the operation the client can call operation with validateOnly property set to true.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param [options] The optional parameters
   * @returns Promise<Models.MoveCollectionsDiscardResponse>
   */
  discard(resourceGroupName: string, moveCollectionName: string, options?: Models.MoveCollectionsDiscardOptionalParams): Promise<Models.MoveCollectionsDiscardResponse> {
    return this.beginDiscard(resourceGroupName,moveCollectionName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.MoveCollectionsDiscardResponse>;
  }

  /**
   * Computes, resolves and validate the dependencies of the moveResources in the move collection.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param [options] The optional parameters
   * @returns Promise<Models.MoveCollectionsResolveDependenciesResponse>
   */
  resolveDependencies(resourceGroupName: string, moveCollectionName: string, options?: msRest.RequestOptionsBase): Promise<Models.MoveCollectionsResolveDependenciesResponse> {
    return this.beginResolveDependencies(resourceGroupName,moveCollectionName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.MoveCollectionsResolveDependenciesResponse>;
  }

  /**
   * Removes the set of move resources included in the request body from move collection. The
   * orchestration is done by service. To aid the user to prerequisite the operation the client can
   * call operation with validateOnly property set to true.
   * @param resourceGroupName
   * @param moveCollectionName
   * @param [options] The optional parameters
   * @returns Promise<Models.MoveCollectionsBulkRemoveResponse>
   */
  bulkRemove(resourceGroupName: string, moveCollectionName: string, options?: Models.MoveCollectionsBulkRemoveOptionalParams): Promise<Models.MoveCollectionsBulkRemoveResponse> {
    return this.beginBulkRemove(resourceGroupName,moveCollectionName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.MoveCollectionsBulkRemoveResponse>;
  }

  /**
   * Get all the Move Collections in the subscription.
   * @summary Get all Move Collections.
   * @param [options] The optional parameters
   * @returns Promise<Models.MoveCollectionsListMoveCollectionsBySubscriptionResponse>
   */
  listMoveCollectionsBySubscription(options?: msRest.RequestOptionsBase): Promise<Models.MoveCollectionsListMoveCollectionsBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listMoveCollectionsBySubscription(callback: msRest.ServiceCallback<Models.MoveCollectionResultList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listMoveCollectionsBySubscription(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MoveCollectionResultList>): void;
  listMoveCollectionsBySubscription(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MoveCollectionResultList>, callback?: msRest.ServiceCallback<Models.MoveCollectionResultList>): Promise<Models.MoveCollectionsListMoveCollectionsBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listMoveCollectionsBySubscriptionOperationSpec,
      callback) as Promise<Models.MoveCollectionsListMoveCollectionsBySubscriptionResponse>;
  }

  /**
   * Get all the Move Collections in the resource group.
   * @summary Get all Move Collections.
   * @param resourceGroupName The Resource Group Name.
   * @param [options] The optional parameters
   * @returns Promise<Models.MoveCollectionsListMoveCollectionsByResourceGroupResponse>
   */
  listMoveCollectionsByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.MoveCollectionsListMoveCollectionsByResourceGroupResponse>;
  /**
   * @param resourceGroupName The Resource Group Name.
   * @param callback The callback
   */
  listMoveCollectionsByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.MoveCollectionResultList>): void;
  /**
   * @param resourceGroupName The Resource Group Name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listMoveCollectionsByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MoveCollectionResultList>): void;
  listMoveCollectionsByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MoveCollectionResultList>, callback?: msRest.ServiceCallback<Models.MoveCollectionResultList>): Promise<Models.MoveCollectionsListMoveCollectionsByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listMoveCollectionsByResourceGroupOperationSpec,
      callback) as Promise<Models.MoveCollectionsListMoveCollectionsByResourceGroupResponse>;
  }

  /**
   * List of the move resources for which an arm resource is required for.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param sourceId The sourceId for which the api is invoked.
   * @param [options] The optional parameters
   * @returns Promise<Models.MoveCollectionsListRequiredForResponse>
   */
  listRequiredFor(resourceGroupName: string, moveCollectionName: string, sourceId: string, options?: msRest.RequestOptionsBase): Promise<Models.MoveCollectionsListRequiredForResponse>;
  /**
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param sourceId The sourceId for which the api is invoked.
   * @param callback The callback
   */
  listRequiredFor(resourceGroupName: string, moveCollectionName: string, sourceId: string, callback: msRest.ServiceCallback<Models.RequiredForResourcesCollection>): void;
  /**
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param sourceId The sourceId for which the api is invoked.
   * @param options The optional parameters
   * @param callback The callback
   */
  listRequiredFor(resourceGroupName: string, moveCollectionName: string, sourceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RequiredForResourcesCollection>): void;
  listRequiredFor(resourceGroupName: string, moveCollectionName: string, sourceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RequiredForResourcesCollection>, callback?: msRest.ServiceCallback<Models.RequiredForResourcesCollection>): Promise<Models.MoveCollectionsListRequiredForResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        moveCollectionName,
        sourceId,
        options
      },
      listRequiredForOperationSpec,
      callback) as Promise<Models.MoveCollectionsListRequiredForResponse>;
  }

  /**
   * Deletes a move collection.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, moveCollectionName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        moveCollectionName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Initiates prepare for the set of resources included in the request body. The prepare operation
   * is on the moveResources that are in the moveState 'PreparePending' or 'PrepareFailed', on a
   * successful completion the moveResource moveState do a transition to MovePending. To aid the user
   * to prerequisite the operation the client can call operation with validateOnly property set to
   * true.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPrepare(resourceGroupName: string, moveCollectionName: string, options?: Models.MoveCollectionsBeginPrepareOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        moveCollectionName,
        options
      },
      beginPrepareOperationSpec,
      options);
  }

  /**
   * Moves the set of resources included in the request body. The move operation is triggered after
   * the moveResources are in the moveState 'MovePending' or 'MoveFailed', on a successful completion
   * the moveResource moveState do a transition to CommitPending. To aid the user to prerequisite the
   * operation the client can call operation with validateOnly property set to true.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginInitiateMove(resourceGroupName: string, moveCollectionName: string, options?: Models.MoveCollectionsBeginInitiateMoveOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        moveCollectionName,
        options
      },
      beginInitiateMoveOperationSpec,
      options);
  }

  /**
   * Commits the set of resources included in the request body. The commit operation is triggered on
   * the moveResources in the moveState 'CommitPending' or 'CommitFailed', on a successful completion
   * the moveResource moveState do a transition to Committed. To aid the user to prerequisite the
   * operation the client can call operation with validateOnly property set to true.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCommit(resourceGroupName: string, moveCollectionName: string, options?: Models.MoveCollectionsBeginCommitOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        moveCollectionName,
        options
      },
      beginCommitOperationSpec,
      options);
  }

  /**
   * Discards the set of resources included in the request body. The discard operation is triggered
   * on the moveResources in the moveState 'CommitPending' or 'DiscardFailed', on a successful
   * completion the moveResource moveState do a transition to MovePending. To aid the user to
   * prerequisite the operation the client can call operation with validateOnly property set to true.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDiscard(resourceGroupName: string, moveCollectionName: string, options?: Models.MoveCollectionsBeginDiscardOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        moveCollectionName,
        options
      },
      beginDiscardOperationSpec,
      options);
  }

  /**
   * Computes, resolves and validate the dependencies of the moveResources in the move collection.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginResolveDependencies(resourceGroupName: string, moveCollectionName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        moveCollectionName,
        options
      },
      beginResolveDependenciesOperationSpec,
      options);
  }

  /**
   * Removes the set of move resources included in the request body from move collection. The
   * orchestration is done by service. To aid the user to prerequisite the operation the client can
   * call operation with validateOnly property set to true.
   * @param resourceGroupName
   * @param moveCollectionName
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginBulkRemove(resourceGroupName: string, moveCollectionName: string, options?: Models.MoveCollectionsBeginBulkRemoveOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        moveCollectionName,
        options
      },
      beginBulkRemoveOperationSpec,
      options);
  }

  /**
   * Get all the Move Collections in the subscription.
   * @summary Get all Move Collections.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.MoveCollectionsListMoveCollectionsBySubscriptionNextResponse>
   */
  listMoveCollectionsBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.MoveCollectionsListMoveCollectionsBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listMoveCollectionsBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.MoveCollectionResultList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listMoveCollectionsBySubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MoveCollectionResultList>): void;
  listMoveCollectionsBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MoveCollectionResultList>, callback?: msRest.ServiceCallback<Models.MoveCollectionResultList>): Promise<Models.MoveCollectionsListMoveCollectionsBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listMoveCollectionsBySubscriptionNextOperationSpec,
      callback) as Promise<Models.MoveCollectionsListMoveCollectionsBySubscriptionNextResponse>;
  }

  /**
   * Get all the Move Collections in the resource group.
   * @summary Get all Move Collections.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.MoveCollectionsListMoveCollectionsByResourceGroupNextResponse>
   */
  listMoveCollectionsByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.MoveCollectionsListMoveCollectionsByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listMoveCollectionsByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.MoveCollectionResultList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listMoveCollectionsByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MoveCollectionResultList>): void;
  listMoveCollectionsByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MoveCollectionResultList>, callback?: msRest.ServiceCallback<Models.MoveCollectionResultList>): Promise<Models.MoveCollectionsListMoveCollectionsByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listMoveCollectionsByResourceGroupNextOperationSpec,
      callback) as Promise<Models.MoveCollectionsListMoveCollectionsByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.moveCollectionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.MoveCollection
  },
  responses: {
    200: {
      bodyMapper: Mappers.MoveCollection
    },
    201: {
      bodyMapper: Mappers.MoveCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.moveCollectionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.UpdateMoveCollectionRequest
  },
  responses: {
    200: {
      bodyMapper: Mappers.MoveCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.moveCollectionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MoveCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listMoveCollectionsBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Migrate/moveCollections",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MoveCollectionResultList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listMoveCollectionsByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MoveCollectionResultList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listRequiredForOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/requiredFor",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.moveCollectionName
  ],
  queryParameters: [
    Parameters.sourceId,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RequiredForResourcesCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.moveCollectionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginPrepareOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/prepare",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.moveCollectionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.PrepareRequest
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginInitiateMoveOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/initiateMove",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.moveCollectionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.ResourceMoveRequest
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCommitOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/commit",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.moveCollectionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.CommitRequest
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDiscardOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/discard",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.moveCollectionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.DiscardRequest
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginResolveDependenciesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/resolveDependencies",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.moveCollectionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginBulkRemoveOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/bulkRemove",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.moveCollectionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.BulkRemoveRequest
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listMoveCollectionsBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MoveCollectionResultList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listMoveCollectionsByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MoveCollectionResultList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
