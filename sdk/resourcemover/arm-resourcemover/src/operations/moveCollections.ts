/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { MoveCollections } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ResourceMoverServiceAPI } from "../resourceMoverServiceAPI";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  MoveCollection,
  MoveCollectionsListMoveCollectionsBySubscriptionNextOptionalParams,
  MoveCollectionsListMoveCollectionsBySubscriptionOptionalParams,
  MoveCollectionsListMoveCollectionsBySubscriptionResponse,
  MoveCollectionsListMoveCollectionsByResourceGroupNextOptionalParams,
  MoveCollectionsListMoveCollectionsByResourceGroupOptionalParams,
  MoveCollectionsListMoveCollectionsByResourceGroupResponse,
  MoveCollectionsCreateOptionalParams,
  MoveCollectionsCreateResponse,
  MoveCollectionsUpdateOptionalParams,
  MoveCollectionsUpdateResponse,
  MoveCollectionsDeleteOptionalParams,
  MoveCollectionsDeleteResponse,
  MoveCollectionsGetOptionalParams,
  MoveCollectionsGetResponse,
  MoveCollectionsPrepareOptionalParams,
  MoveCollectionsPrepareResponse,
  MoveCollectionsInitiateMoveOptionalParams,
  MoveCollectionsInitiateMoveResponse,
  MoveCollectionsCommitOptionalParams,
  MoveCollectionsCommitResponse,
  MoveCollectionsDiscardOptionalParams,
  MoveCollectionsDiscardResponse,
  MoveCollectionsResolveDependenciesOptionalParams,
  MoveCollectionsResolveDependenciesResponse,
  MoveCollectionsBulkRemoveOptionalParams,
  MoveCollectionsBulkRemoveResponse,
  MoveCollectionsListRequiredForOptionalParams,
  MoveCollectionsListRequiredForResponse,
  MoveCollectionsListMoveCollectionsBySubscriptionNextResponse,
  MoveCollectionsListMoveCollectionsByResourceGroupNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing MoveCollections operations. */
export class MoveCollectionsImpl implements MoveCollections {
  private readonly client: ResourceMoverServiceAPI;

  /**
   * Initialize a new instance of the class MoveCollections class.
   * @param client Reference to the service client
   */
  constructor(client: ResourceMoverServiceAPI) {
    this.client = client;
  }

  /**
   * Get all the Move Collections in the subscription.
   * @param options The options parameters.
   */
  public listMoveCollectionsBySubscription(
    options?: MoveCollectionsListMoveCollectionsBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<MoveCollection> {
    const iter = this.listMoveCollectionsBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listMoveCollectionsBySubscriptionPagingPage(
          options,
          settings
        );
      }
    };
  }

  private async *listMoveCollectionsBySubscriptionPagingPage(
    options?: MoveCollectionsListMoveCollectionsBySubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<MoveCollection[]> {
    let result: MoveCollectionsListMoveCollectionsBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listMoveCollectionsBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listMoveCollectionsBySubscriptionNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listMoveCollectionsBySubscriptionPagingAll(
    options?: MoveCollectionsListMoveCollectionsBySubscriptionOptionalParams
  ): AsyncIterableIterator<MoveCollection> {
    for await (const page of this.listMoveCollectionsBySubscriptionPagingPage(
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get all the Move Collections in the resource group.
   * @param resourceGroupName The Resource Group Name.
   * @param options The options parameters.
   */
  public listMoveCollectionsByResourceGroup(
    resourceGroupName: string,
    options?: MoveCollectionsListMoveCollectionsByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<MoveCollection> {
    const iter = this.listMoveCollectionsByResourceGroupPagingAll(
      resourceGroupName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listMoveCollectionsByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listMoveCollectionsByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: MoveCollectionsListMoveCollectionsByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<MoveCollection[]> {
    let result: MoveCollectionsListMoveCollectionsByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listMoveCollectionsByResourceGroup(
        resourceGroupName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listMoveCollectionsByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listMoveCollectionsByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: MoveCollectionsListMoveCollectionsByResourceGroupOptionalParams
  ): AsyncIterableIterator<MoveCollection> {
    for await (const page of this.listMoveCollectionsByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Creates or updates a move collection.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsCreateOptionalParams
  ): Promise<MoveCollectionsCreateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, moveCollectionName, options },
      createOperationSpec
    );
  }

  /**
   * Updates a move collection.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsUpdateOptionalParams
  ): Promise<MoveCollectionsUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, moveCollectionName, options },
      updateOperationSpec
    );
  }

  /**
   * Deletes a move collection.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsDeleteOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<MoveCollectionsDeleteResponse>,
      MoveCollectionsDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<MoveCollectionsDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, moveCollectionName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes a move collection.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsDeleteOptionalParams
  ): Promise<MoveCollectionsDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      moveCollectionName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets the move collection.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsGetOptionalParams
  ): Promise<MoveCollectionsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, moveCollectionName, options },
      getOperationSpec
    );
  }

  /**
   * Initiates prepare for the set of resources included in the request body. The prepare operation is on
   * the moveResources that are in the moveState 'PreparePending' or 'PrepareFailed', on a successful
   * completion the moveResource moveState do a transition to MovePending. To aid the user to
   * prerequisite the operation the client can call operation with validateOnly property set to true.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  async beginPrepare(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsPrepareOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<MoveCollectionsPrepareResponse>,
      MoveCollectionsPrepareResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<MoveCollectionsPrepareResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, moveCollectionName, options },
      prepareOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Initiates prepare for the set of resources included in the request body. The prepare operation is on
   * the moveResources that are in the moveState 'PreparePending' or 'PrepareFailed', on a successful
   * completion the moveResource moveState do a transition to MovePending. To aid the user to
   * prerequisite the operation the client can call operation with validateOnly property set to true.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  async beginPrepareAndWait(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsPrepareOptionalParams
  ): Promise<MoveCollectionsPrepareResponse> {
    const poller = await this.beginPrepare(
      resourceGroupName,
      moveCollectionName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Moves the set of resources included in the request body. The move operation is triggered after the
   * moveResources are in the moveState 'MovePending' or 'MoveFailed', on a successful completion the
   * moveResource moveState do a transition to CommitPending. To aid the user to prerequisite the
   * operation the client can call operation with validateOnly property set to true.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  async beginInitiateMove(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsInitiateMoveOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<MoveCollectionsInitiateMoveResponse>,
      MoveCollectionsInitiateMoveResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<MoveCollectionsInitiateMoveResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, moveCollectionName, options },
      initiateMoveOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Moves the set of resources included in the request body. The move operation is triggered after the
   * moveResources are in the moveState 'MovePending' or 'MoveFailed', on a successful completion the
   * moveResource moveState do a transition to CommitPending. To aid the user to prerequisite the
   * operation the client can call operation with validateOnly property set to true.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  async beginInitiateMoveAndWait(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsInitiateMoveOptionalParams
  ): Promise<MoveCollectionsInitiateMoveResponse> {
    const poller = await this.beginInitiateMove(
      resourceGroupName,
      moveCollectionName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Commits the set of resources included in the request body. The commit operation is triggered on the
   * moveResources in the moveState 'CommitPending' or 'CommitFailed', on a successful completion the
   * moveResource moveState do a transition to Committed. To aid the user to prerequisite the operation
   * the client can call operation with validateOnly property set to true.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  async beginCommit(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsCommitOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<MoveCollectionsCommitResponse>,
      MoveCollectionsCommitResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<MoveCollectionsCommitResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, moveCollectionName, options },
      commitOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Commits the set of resources included in the request body. The commit operation is triggered on the
   * moveResources in the moveState 'CommitPending' or 'CommitFailed', on a successful completion the
   * moveResource moveState do a transition to Committed. To aid the user to prerequisite the operation
   * the client can call operation with validateOnly property set to true.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  async beginCommitAndWait(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsCommitOptionalParams
  ): Promise<MoveCollectionsCommitResponse> {
    const poller = await this.beginCommit(
      resourceGroupName,
      moveCollectionName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Discards the set of resources included in the request body. The discard operation is triggered on
   * the moveResources in the moveState 'CommitPending' or 'DiscardFailed', on a successful completion
   * the moveResource moveState do a transition to MovePending. To aid the user to prerequisite the
   * operation the client can call operation with validateOnly property set to true.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  async beginDiscard(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsDiscardOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<MoveCollectionsDiscardResponse>,
      MoveCollectionsDiscardResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<MoveCollectionsDiscardResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, moveCollectionName, options },
      discardOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Discards the set of resources included in the request body. The discard operation is triggered on
   * the moveResources in the moveState 'CommitPending' or 'DiscardFailed', on a successful completion
   * the moveResource moveState do a transition to MovePending. To aid the user to prerequisite the
   * operation the client can call operation with validateOnly property set to true.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  async beginDiscardAndWait(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsDiscardOptionalParams
  ): Promise<MoveCollectionsDiscardResponse> {
    const poller = await this.beginDiscard(
      resourceGroupName,
      moveCollectionName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Computes, resolves and validate the dependencies of the moveResources in the move collection.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  async beginResolveDependencies(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsResolveDependenciesOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<MoveCollectionsResolveDependenciesResponse>,
      MoveCollectionsResolveDependenciesResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<MoveCollectionsResolveDependenciesResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, moveCollectionName, options },
      resolveDependenciesOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Computes, resolves and validate the dependencies of the moveResources in the move collection.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  async beginResolveDependenciesAndWait(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsResolveDependenciesOptionalParams
  ): Promise<MoveCollectionsResolveDependenciesResponse> {
    const poller = await this.beginResolveDependencies(
      resourceGroupName,
      moveCollectionName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Removes the set of move resources included in the request body from move collection. The
   * orchestration is done by service. To aid the user to prerequisite the operation the client can call
   * operation with validateOnly property set to true.
   * @param resourceGroupName
   * @param moveCollectionName
   * @param options The options parameters.
   */
  async beginBulkRemove(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsBulkRemoveOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<MoveCollectionsBulkRemoveResponse>,
      MoveCollectionsBulkRemoveResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<MoveCollectionsBulkRemoveResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, moveCollectionName, options },
      bulkRemoveOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Removes the set of move resources included in the request body from move collection. The
   * orchestration is done by service. To aid the user to prerequisite the operation the client can call
   * operation with validateOnly property set to true.
   * @param resourceGroupName
   * @param moveCollectionName
   * @param options The options parameters.
   */
  async beginBulkRemoveAndWait(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsBulkRemoveOptionalParams
  ): Promise<MoveCollectionsBulkRemoveResponse> {
    const poller = await this.beginBulkRemove(
      resourceGroupName,
      moveCollectionName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Get all the Move Collections in the subscription.
   * @param options The options parameters.
   */
  private _listMoveCollectionsBySubscription(
    options?: MoveCollectionsListMoveCollectionsBySubscriptionOptionalParams
  ): Promise<MoveCollectionsListMoveCollectionsBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listMoveCollectionsBySubscriptionOperationSpec
    );
  }

  /**
   * Get all the Move Collections in the resource group.
   * @param resourceGroupName The Resource Group Name.
   * @param options The options parameters.
   */
  private _listMoveCollectionsByResourceGroup(
    resourceGroupName: string,
    options?: MoveCollectionsListMoveCollectionsByResourceGroupOptionalParams
  ): Promise<MoveCollectionsListMoveCollectionsByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listMoveCollectionsByResourceGroupOperationSpec
    );
  }

  /**
   * List of the move resources for which an arm resource is required for.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param sourceId The sourceId for which the api is invoked.
   * @param options The options parameters.
   */
  listRequiredFor(
    resourceGroupName: string,
    moveCollectionName: string,
    sourceId: string,
    options?: MoveCollectionsListRequiredForOptionalParams
  ): Promise<MoveCollectionsListRequiredForResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, moveCollectionName, sourceId, options },
      listRequiredForOperationSpec
    );
  }

  /**
   * ListMoveCollectionsBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListMoveCollectionsBySubscription method.
   * @param options The options parameters.
   */
  private _listMoveCollectionsBySubscriptionNext(
    nextLink: string,
    options?: MoveCollectionsListMoveCollectionsBySubscriptionNextOptionalParams
  ): Promise<MoveCollectionsListMoveCollectionsBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listMoveCollectionsBySubscriptionNextOperationSpec
    );
  }

  /**
   * ListMoveCollectionsByResourceGroupNext
   * @param resourceGroupName The Resource Group Name.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListMoveCollectionsByResourceGroup method.
   * @param options The options parameters.
   */
  private _listMoveCollectionsByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: MoveCollectionsListMoveCollectionsByResourceGroupNextOptionalParams
  ): Promise<MoveCollectionsListMoveCollectionsByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listMoveCollectionsByResourceGroupNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.MoveCollection
    },
    201: {
      bodyMapper: Mappers.MoveCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.moveCollectionName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.MoveCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.moveCollectionName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    201: {
      bodyMapper: Mappers.OperationStatus
    },
    202: {
      bodyMapper: Mappers.OperationStatus
    },
    204: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.moveCollectionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MoveCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.moveCollectionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const prepareOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/prepare",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    201: {
      bodyMapper: Mappers.OperationStatus
    },
    202: {
      bodyMapper: Mappers.OperationStatus
    },
    204: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.moveCollectionName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const initiateMoveOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/initiateMove",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    201: {
      bodyMapper: Mappers.OperationStatus
    },
    202: {
      bodyMapper: Mappers.OperationStatus
    },
    204: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.body3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.moveCollectionName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const commitOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/commit",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    201: {
      bodyMapper: Mappers.OperationStatus
    },
    202: {
      bodyMapper: Mappers.OperationStatus
    },
    204: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.body4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.moveCollectionName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const discardOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/discard",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    201: {
      bodyMapper: Mappers.OperationStatus
    },
    202: {
      bodyMapper: Mappers.OperationStatus
    },
    204: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.body5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.moveCollectionName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const resolveDependenciesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/resolveDependencies",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    201: {
      bodyMapper: Mappers.OperationStatus
    },
    202: {
      bodyMapper: Mappers.OperationStatus
    },
    204: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.moveCollectionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const bulkRemoveOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/bulkRemove",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    201: {
      bodyMapper: Mappers.OperationStatus
    },
    202: {
      bodyMapper: Mappers.OperationStatus
    },
    204: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.body6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.moveCollectionName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const listMoveCollectionsBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Migrate/moveCollections",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MoveCollectionResultList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listMoveCollectionsByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MoveCollectionResultList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listRequiredForOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/requiredFor",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RequiredForResourcesCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.sourceId],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.moveCollectionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listMoveCollectionsBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MoveCollectionResultList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listMoveCollectionsByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MoveCollectionResultList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
