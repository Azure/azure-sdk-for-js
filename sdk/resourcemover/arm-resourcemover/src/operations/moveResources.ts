/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/moveResourcesMappers";
import * as Parameters from "../models/parameters";
import { ResourceMoverServiceAPIContext } from "../resourceMoverServiceAPIContext";

/** Class representing a MoveResources. */
export class MoveResources {
  private readonly client: ResourceMoverServiceAPIContext;

  /**
   * Create a MoveResources.
   * @param {ResourceMoverServiceAPIContext} client Reference to the service client.
   */
  constructor(client: ResourceMoverServiceAPIContext) {
    this.client = client;
  }

  /**
   * Lists the Move Resources in the move collection.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param [options] The optional parameters
   * @returns Promise<Models.MoveResourcesListResponse>
   */
  list(resourceGroupName: string, moveCollectionName: string, options?: Models.MoveResourcesListOptionalParams): Promise<Models.MoveResourcesListResponse>;
  /**
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param callback The callback
   */
  list(resourceGroupName: string, moveCollectionName: string, callback: msRest.ServiceCallback<Models.MoveResourceCollection>): void;
  /**
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, moveCollectionName: string, options: Models.MoveResourcesListOptionalParams, callback: msRest.ServiceCallback<Models.MoveResourceCollection>): void;
  list(resourceGroupName: string, moveCollectionName: string, options?: Models.MoveResourcesListOptionalParams | msRest.ServiceCallback<Models.MoveResourceCollection>, callback?: msRest.ServiceCallback<Models.MoveResourceCollection>): Promise<Models.MoveResourcesListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        moveCollectionName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.MoveResourcesListResponse>;
  }

  /**
   * Creates or updates a Move Resource in the move collection.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param moveResourceName The Move Resource Name.
   * @param [options] The optional parameters
   * @returns Promise<Models.MoveResourcesCreateResponse>
   */
  create(resourceGroupName: string, moveCollectionName: string, moveResourceName: string, options?: Models.MoveResourcesCreateOptionalParams): Promise<Models.MoveResourcesCreateResponse> {
    return this.beginCreate(resourceGroupName,moveCollectionName,moveResourceName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.MoveResourcesCreateResponse>;
  }

  /**
   * Deletes a Move Resource from the move collection.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param moveResourceName The Move Resource Name.
   * @param [options] The optional parameters
   * @returns Promise<Models.MoveResourcesDeleteMethodResponse>
   */
  deleteMethod(resourceGroupName: string, moveCollectionName: string, moveResourceName: string, options?: msRest.RequestOptionsBase): Promise<Models.MoveResourcesDeleteMethodResponse> {
    return this.beginDeleteMethod(resourceGroupName,moveCollectionName,moveResourceName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.MoveResourcesDeleteMethodResponse>;
  }

  /**
   * Gets the Move Resource.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param moveResourceName The Move Resource Name.
   * @param [options] The optional parameters
   * @returns Promise<Models.MoveResourcesGetResponse>
   */
  get(resourceGroupName: string, moveCollectionName: string, moveResourceName: string, options?: msRest.RequestOptionsBase): Promise<Models.MoveResourcesGetResponse>;
  /**
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param moveResourceName The Move Resource Name.
   * @param callback The callback
   */
  get(resourceGroupName: string, moveCollectionName: string, moveResourceName: string, callback: msRest.ServiceCallback<Models.MoveResource>): void;
  /**
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param moveResourceName The Move Resource Name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, moveCollectionName: string, moveResourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MoveResource>): void;
  get(resourceGroupName: string, moveCollectionName: string, moveResourceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MoveResource>, callback?: msRest.ServiceCallback<Models.MoveResource>): Promise<Models.MoveResourcesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        moveCollectionName,
        moveResourceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.MoveResourcesGetResponse>;
  }

  /**
   * Creates or updates a Move Resource in the move collection.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param moveResourceName The Move Resource Name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(resourceGroupName: string, moveCollectionName: string, moveResourceName: string, options?: Models.MoveResourcesBeginCreateOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        moveCollectionName,
        moveResourceName,
        options
      },
      beginCreateOperationSpec,
      options);
  }

  /**
   * Deletes a Move Resource from the move collection.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param moveResourceName The Move Resource Name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, moveCollectionName: string, moveResourceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        moveCollectionName,
        moveResourceName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Lists the Move Resources in the move collection.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.MoveResourcesListNextResponse>
   */
  listNext(nextPageLink: string, options?: Models.MoveResourcesListNextOptionalParams): Promise<Models.MoveResourcesListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.MoveResourceCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: Models.MoveResourcesListNextOptionalParams, callback: msRest.ServiceCallback<Models.MoveResourceCollection>): void;
  listNext(nextPageLink: string, options?: Models.MoveResourcesListNextOptionalParams | msRest.ServiceCallback<Models.MoveResourceCollection>, callback?: msRest.ServiceCallback<Models.MoveResourceCollection>): Promise<Models.MoveResourcesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.MoveResourcesListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/moveResources",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.moveCollectionName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MoveResourceCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/moveResources/{moveResourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.moveCollectionName,
    Parameters.moveResourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MoveResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/moveResources/{moveResourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.moveCollectionName,
    Parameters.moveResourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      properties: [
        "options",
        "properties"
      ]
    },
    mapper: Mappers.MoveResource
  },
  responses: {
    200: {
      bodyMapper: Mappers.MoveResource
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/moveResources/{moveResourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.moveCollectionName,
    Parameters.moveResourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MoveResourceCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
