/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  MoveCollection,
  MoveCollectionsListMoveCollectionsBySubscriptionOptionalParams,
  MoveCollectionsListMoveCollectionsByResourceGroupOptionalParams,
  MoveCollectionsCreateOptionalParams,
  MoveCollectionsCreateResponse,
  MoveCollectionsUpdateOptionalParams,
  MoveCollectionsUpdateResponse,
  MoveCollectionsDeleteOptionalParams,
  MoveCollectionsDeleteResponse,
  MoveCollectionsGetOptionalParams,
  MoveCollectionsGetResponse,
  MoveCollectionsPrepareOptionalParams,
  MoveCollectionsPrepareResponse,
  MoveCollectionsInitiateMoveOptionalParams,
  MoveCollectionsInitiateMoveResponse,
  MoveCollectionsCommitOptionalParams,
  MoveCollectionsCommitResponse,
  MoveCollectionsDiscardOptionalParams,
  MoveCollectionsDiscardResponse,
  MoveCollectionsResolveDependenciesOptionalParams,
  MoveCollectionsResolveDependenciesResponse,
  MoveCollectionsBulkRemoveOptionalParams,
  MoveCollectionsBulkRemoveResponse,
  MoveCollectionsListRequiredForOptionalParams,
  MoveCollectionsListRequiredForResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a MoveCollections. */
export interface MoveCollections {
  /**
   * Get all the Move Collections in the subscription.
   * @param options The options parameters.
   */
  listMoveCollectionsBySubscription(
    options?: MoveCollectionsListMoveCollectionsBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<MoveCollection>;
  /**
   * Get all the Move Collections in the resource group.
   * @param resourceGroupName The Resource Group Name.
   * @param options The options parameters.
   */
  listMoveCollectionsByResourceGroup(
    resourceGroupName: string,
    options?: MoveCollectionsListMoveCollectionsByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<MoveCollection>;
  /**
   * Creates or updates a move collection.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsCreateOptionalParams
  ): Promise<MoveCollectionsCreateResponse>;
  /**
   * Updates a move collection.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsUpdateOptionalParams
  ): Promise<MoveCollectionsUpdateResponse>;
  /**
   * Deletes a move collection.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsDeleteOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<MoveCollectionsDeleteResponse>,
      MoveCollectionsDeleteResponse
    >
  >;
  /**
   * Deletes a move collection.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsDeleteOptionalParams
  ): Promise<MoveCollectionsDeleteResponse>;
  /**
   * Gets the move collection.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsGetOptionalParams
  ): Promise<MoveCollectionsGetResponse>;
  /**
   * Initiates prepare for the set of resources included in the request body. The prepare operation is on
   * the moveResources that are in the moveState 'PreparePending' or 'PrepareFailed', on a successful
   * completion the moveResource moveState do a transition to MovePending. To aid the user to
   * prerequisite the operation the client can call operation with validateOnly property set to true.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  beginPrepare(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsPrepareOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<MoveCollectionsPrepareResponse>,
      MoveCollectionsPrepareResponse
    >
  >;
  /**
   * Initiates prepare for the set of resources included in the request body. The prepare operation is on
   * the moveResources that are in the moveState 'PreparePending' or 'PrepareFailed', on a successful
   * completion the moveResource moveState do a transition to MovePending. To aid the user to
   * prerequisite the operation the client can call operation with validateOnly property set to true.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  beginPrepareAndWait(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsPrepareOptionalParams
  ): Promise<MoveCollectionsPrepareResponse>;
  /**
   * Moves the set of resources included in the request body. The move operation is triggered after the
   * moveResources are in the moveState 'MovePending' or 'MoveFailed', on a successful completion the
   * moveResource moveState do a transition to CommitPending. To aid the user to prerequisite the
   * operation the client can call operation with validateOnly property set to true.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  beginInitiateMove(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsInitiateMoveOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<MoveCollectionsInitiateMoveResponse>,
      MoveCollectionsInitiateMoveResponse
    >
  >;
  /**
   * Moves the set of resources included in the request body. The move operation is triggered after the
   * moveResources are in the moveState 'MovePending' or 'MoveFailed', on a successful completion the
   * moveResource moveState do a transition to CommitPending. To aid the user to prerequisite the
   * operation the client can call operation with validateOnly property set to true.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  beginInitiateMoveAndWait(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsInitiateMoveOptionalParams
  ): Promise<MoveCollectionsInitiateMoveResponse>;
  /**
   * Commits the set of resources included in the request body. The commit operation is triggered on the
   * moveResources in the moveState 'CommitPending' or 'CommitFailed', on a successful completion the
   * moveResource moveState do a transition to Committed. To aid the user to prerequisite the operation
   * the client can call operation with validateOnly property set to true.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  beginCommit(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsCommitOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<MoveCollectionsCommitResponse>,
      MoveCollectionsCommitResponse
    >
  >;
  /**
   * Commits the set of resources included in the request body. The commit operation is triggered on the
   * moveResources in the moveState 'CommitPending' or 'CommitFailed', on a successful completion the
   * moveResource moveState do a transition to Committed. To aid the user to prerequisite the operation
   * the client can call operation with validateOnly property set to true.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  beginCommitAndWait(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsCommitOptionalParams
  ): Promise<MoveCollectionsCommitResponse>;
  /**
   * Discards the set of resources included in the request body. The discard operation is triggered on
   * the moveResources in the moveState 'CommitPending' or 'DiscardFailed', on a successful completion
   * the moveResource moveState do a transition to MovePending. To aid the user to prerequisite the
   * operation the client can call operation with validateOnly property set to true.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  beginDiscard(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsDiscardOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<MoveCollectionsDiscardResponse>,
      MoveCollectionsDiscardResponse
    >
  >;
  /**
   * Discards the set of resources included in the request body. The discard operation is triggered on
   * the moveResources in the moveState 'CommitPending' or 'DiscardFailed', on a successful completion
   * the moveResource moveState do a transition to MovePending. To aid the user to prerequisite the
   * operation the client can call operation with validateOnly property set to true.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  beginDiscardAndWait(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsDiscardOptionalParams
  ): Promise<MoveCollectionsDiscardResponse>;
  /**
   * Computes, resolves and validate the dependencies of the moveResources in the move collection.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  beginResolveDependencies(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsResolveDependenciesOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<MoveCollectionsResolveDependenciesResponse>,
      MoveCollectionsResolveDependenciesResponse
    >
  >;
  /**
   * Computes, resolves and validate the dependencies of the moveResources in the move collection.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param options The options parameters.
   */
  beginResolveDependenciesAndWait(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsResolveDependenciesOptionalParams
  ): Promise<MoveCollectionsResolveDependenciesResponse>;
  /**
   * Removes the set of move resources included in the request body from move collection. The
   * orchestration is done by service. To aid the user to prerequisite the operation the client can call
   * operation with validateOnly property set to true.
   * @param resourceGroupName
   * @param moveCollectionName
   * @param options The options parameters.
   */
  beginBulkRemove(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsBulkRemoveOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<MoveCollectionsBulkRemoveResponse>,
      MoveCollectionsBulkRemoveResponse
    >
  >;
  /**
   * Removes the set of move resources included in the request body from move collection. The
   * orchestration is done by service. To aid the user to prerequisite the operation the client can call
   * operation with validateOnly property set to true.
   * @param resourceGroupName
   * @param moveCollectionName
   * @param options The options parameters.
   */
  beginBulkRemoveAndWait(
    resourceGroupName: string,
    moveCollectionName: string,
    options?: MoveCollectionsBulkRemoveOptionalParams
  ): Promise<MoveCollectionsBulkRemoveResponse>;
  /**
   * List of the move resources for which an arm resource is required for.
   * @param resourceGroupName The Resource Group Name.
   * @param moveCollectionName The Move Collection Name.
   * @param sourceId The sourceId for which the api is invoked.
   * @param options The options parameters.
   */
  listRequiredFor(
    resourceGroupName: string,
    moveCollectionName: string,
    sourceId: string,
    options?: MoveCollectionsListRequiredForOptionalParams
  ): Promise<MoveCollectionsListRequiredForResponse>;
}
