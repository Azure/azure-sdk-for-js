/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const MoveCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MoveCollection",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MoveCollectionProperties"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const Identity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Identity",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MoveCollectionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MoveCollectionProperties",
    modelProperties: {
      sourceRegion: {
        serializedName: "sourceRegion",
        required: true,
        type: {
          name: "String"
        }
      },
      targetRegion: {
        serializedName: "targetRegion",
        required: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Composite",
          className: "MoveCollectionPropertiesErrors"
        }
      }
    }
  }
};

export const MoveResourceError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MoveResourceError",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MoveResourceErrorBody"
        }
      }
    }
  }
};

export const MoveResourceErrorBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MoveResourceErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MoveResourceErrorBody"
            }
          }
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const CloudError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const CloudErrorBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudErrorBody"
            }
          }
        }
      }
    }
  }
};

export const UpdateMoveCollectionRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateMoveCollectionRequest",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      }
    }
  }
};

export const OperationStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationStatus",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "OperationStatusError"
        }
      },
      properties: {
        serializedName: "properties",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const OperationStatusError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationStatusError",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationStatusError"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const OperationErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        type: {
          name: "Composite",
          className: "MoveErrorInfo"
        }
      }
    }
  }
};

export const MoveErrorInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MoveErrorInfo",
    modelProperties: {
      moveResources: {
        serializedName: "moveResources",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AffectedMoveResource"
            }
          }
        }
      }
    }
  }
};

export const AffectedMoveResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AffectedMoveResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceId: {
        serializedName: "sourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      moveResources: {
        serializedName: "moveResources",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AffectedMoveResource"
            }
          }
        }
      }
    }
  }
};

export const PrepareRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrepareRequest",
    modelProperties: {
      validateOnly: {
        serializedName: "validateOnly",
        type: {
          name: "Boolean"
        }
      },
      moveResources: {
        serializedName: "moveResources",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      moveResourceInputType: {
        serializedName: "moveResourceInputType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceMoveRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceMoveRequest",
    modelProperties: {
      validateOnly: {
        serializedName: "validateOnly",
        type: {
          name: "Boolean"
        }
      },
      moveResources: {
        serializedName: "moveResources",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      moveResourceInputType: {
        serializedName: "moveResourceInputType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CommitRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommitRequest",
    modelProperties: {
      validateOnly: {
        serializedName: "validateOnly",
        type: {
          name: "Boolean"
        }
      },
      moveResources: {
        serializedName: "moveResources",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      moveResourceInputType: {
        serializedName: "moveResourceInputType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiscardRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiscardRequest",
    modelProperties: {
      validateOnly: {
        serializedName: "validateOnly",
        type: {
          name: "Boolean"
        }
      },
      moveResources: {
        serializedName: "moveResources",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      moveResourceInputType: {
        serializedName: "moveResourceInputType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MoveResourceCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MoveResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MoveResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      summaryCollection: {
        serializedName: "summaryCollection",
        type: {
          name: "Composite",
          className: "SummaryCollection"
        }
      },
      totalCount: {
        serializedName: "totalCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MoveResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MoveResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MoveResourceProperties"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const MoveResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MoveResourceProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceId: {
        serializedName: "sourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      targetId: {
        serializedName: "targetId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      existingTargetId: {
        serializedName: "existingTargetId",
        type: {
          name: "String"
        }
      },
      resourceSettings: {
        serializedName: "resourceSettings",
        type: {
          name: "Composite",
          className: "ResourceSettings"
        }
      },
      sourceResourceSettings: {
        serializedName: "sourceResourceSettings",
        type: {
          name: "Composite",
          className: "ResourceSettings"
        }
      },
      moveStatus: {
        serializedName: "moveStatus",
        type: {
          name: "Composite",
          className: "MoveResourcePropertiesMoveStatus"
        }
      },
      dependsOn: {
        serializedName: "dependsOn",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MoveResourceDependency"
            }
          }
        }
      },
      dependsOnOverrides: {
        serializedName: "dependsOnOverrides",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MoveResourceDependencyOverride"
            }
          }
        }
      },
      isResolveRequired: {
        serializedName: "isResolveRequired",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Composite",
          className: "MoveResourcePropertiesErrors"
        }
      }
    }
  }
};

export const ResourceSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceSettings",
    uberParent: "ResourceSettings",
    polymorphicDiscriminator: {
      serializedName: "resourceType",
      clientName: "resourceType"
    },
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        required: true,
        type: {
          name: "String"
        }
      },
      targetResourceName: {
        serializedName: "targetResourceName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MoveResourceStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MoveResourceStatus",
    modelProperties: {
      moveState: {
        serializedName: "moveState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      jobStatus: {
        serializedName: "jobStatus",
        type: {
          name: "Composite",
          className: "JobStatus"
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Composite",
          className: "MoveResourceError"
        }
      }
    }
  }
};

export const JobStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobStatus",
    modelProperties: {
      jobName: {
        serializedName: "jobName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      jobProgress: {
        serializedName: "jobProgress",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MoveResourceDependency: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MoveResourceDependency",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      resolutionStatus: {
        serializedName: "resolutionStatus",
        type: {
          name: "String"
        }
      },
      resolutionType: {
        serializedName: "resolutionType",
        type: {
          name: "String"
        }
      },
      dependencyType: {
        serializedName: "dependencyType",
        type: {
          name: "String"
        }
      },
      manualResolution: {
        serializedName: "manualResolution",
        type: {
          name: "Composite",
          className: "ManualResolutionProperties"
        }
      },
      automaticResolution: {
        serializedName: "automaticResolution",
        type: {
          name: "Composite",
          className: "AutomaticResolutionProperties"
        }
      },
      isOptional: {
        serializedName: "isOptional",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManualResolutionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManualResolutionProperties",
    modelProperties: {
      targetId: {
        serializedName: "targetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AutomaticResolutionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutomaticResolutionProperties",
    modelProperties: {
      moveResourceId: {
        serializedName: "moveResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MoveResourceDependencyOverride: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MoveResourceDependencyOverride",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      targetId: {
        serializedName: "targetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SummaryCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SummaryCollection",
    modelProperties: {
      fieldName: {
        serializedName: "fieldName",
        type: {
          name: "String"
        }
      },
      summary: {
        serializedName: "summary",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Summary"
            }
          }
        }
      }
    }
  }
};

export const Summary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Summary",
    modelProperties: {
      count: {
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      item: {
        serializedName: "item",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UnresolvedDependencyCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UnresolvedDependencyCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UnresolvedDependency"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      summaryCollection: {
        serializedName: "summaryCollection",
        type: {
          name: "Composite",
          className: "SummaryCollection"
        }
      },
      totalCount: {
        serializedName: "totalCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UnresolvedDependency: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UnresolvedDependency",
    modelProperties: {
      count: {
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BulkRemoveRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BulkRemoveRequest",
    modelProperties: {
      validateOnly: {
        serializedName: "validateOnly",
        type: {
          name: "Boolean"
        }
      },
      moveResources: {
        serializedName: "moveResources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      moveResourceInputType: {
        serializedName: "moveResourceInputType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationsDiscoveryCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationsDiscoveryCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationsDiscovery"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationsDiscovery: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationsDiscovery",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "Display"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const Display: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Display",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MoveCollectionResultList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MoveCollectionResultList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MoveCollection"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RequiredForResourcesCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RequiredForResourcesCollection",
    modelProperties: {
      sourceIds: {
        serializedName: "sourceIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const MoveResourceFilter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MoveResourceFilter",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MoveResourceFilterProperties"
        }
      }
    }
  }
};

export const MoveResourceFilterProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MoveResourceFilterProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UnresolvedDependenciesFilter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UnresolvedDependenciesFilter",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "UnresolvedDependenciesFilterProperties"
        }
      }
    }
  }
};

export const UnresolvedDependenciesFilterProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UnresolvedDependenciesFilterProperties",
    modelProperties: {
      count: {
        serializedName: "count",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SubnetResourceSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubnetResourceSettings",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      addressPrefix: {
        serializedName: "addressPrefix",
        type: {
          name: "String"
        }
      },
      networkSecurityGroup: {
        serializedName: "networkSecurityGroup",
        type: {
          name: "Composite",
          className: "NsgReference"
        }
      }
    }
  }
};

export const AzureResourceReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureResourceReference",
    modelProperties: {
      sourceArmResourceId: {
        serializedName: "sourceArmResourceId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NicIpConfigurationResourceSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NicIpConfigurationResourceSettings",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      privateIpAddress: {
        serializedName: "privateIpAddress",
        type: {
          name: "String"
        }
      },
      privateIpAllocationMethod: {
        serializedName: "privateIpAllocationMethod",
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "SubnetReference"
        }
      },
      primary: {
        serializedName: "primary",
        type: {
          name: "Boolean"
        }
      },
      loadBalancerBackendAddressPools: {
        serializedName: "loadBalancerBackendAddressPools",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LoadBalancerBackendAddressPoolReference"
            }
          }
        }
      },
      loadBalancerNatRules: {
        serializedName: "loadBalancerNatRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LoadBalancerNatRuleReference"
            }
          }
        }
      },
      publicIp: {
        serializedName: "publicIp",
        type: {
          name: "Composite",
          className: "PublicIpReference"
        }
      }
    }
  }
};

export const NsgSecurityRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NsgSecurityRule",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      access: {
        serializedName: "access",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      destinationAddressPrefix: {
        serializedName: "destinationAddressPrefix",
        type: {
          name: "String"
        }
      },
      destinationPortRange: {
        serializedName: "destinationPortRange",
        type: {
          name: "String"
        }
      },
      direction: {
        serializedName: "direction",
        type: {
          name: "String"
        }
      },
      priority: {
        serializedName: "priority",
        type: {
          name: "Number"
        }
      },
      protocol: {
        serializedName: "protocol",
        type: {
          name: "String"
        }
      },
      sourceAddressPrefix: {
        serializedName: "sourceAddressPrefix",
        type: {
          name: "String"
        }
      },
      sourcePortRange: {
        serializedName: "sourcePortRange",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LBFrontendIPConfigurationResourceSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LBFrontendIPConfigurationResourceSettings",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      privateIpAddress: {
        serializedName: "privateIpAddress",
        type: {
          name: "String"
        }
      },
      privateIpAllocationMethod: {
        serializedName: "privateIpAllocationMethod",
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "SubnetReference"
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LBBackendAddressPoolResourceSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LBBackendAddressPoolResourceSettings",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MoveCollectionPropertiesErrors: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MoveCollectionPropertiesErrors",
    modelProperties: {
      ...MoveResourceError.type.modelProperties
    }
  }
};

export const MoveResourcePropertiesErrors: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MoveResourcePropertiesErrors",
    modelProperties: {
      ...MoveResourceError.type.modelProperties
    }
  }
};

export const VirtualMachineResourceSettings: coreClient.CompositeMapper = {
  serializedName: "Microsoft.Compute/virtualMachines",
  type: {
    name: "Composite",
    className: "VirtualMachineResourceSettings",
    uberParent: "ResourceSettings",
    polymorphicDiscriminator: ResourceSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ResourceSettings.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      userManagedIdentities: {
        serializedName: "userManagedIdentities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      targetAvailabilityZone: {
        serializedName: "targetAvailabilityZone",
        type: {
          name: "String"
        }
      },
      targetVmSize: {
        serializedName: "targetVmSize",
        type: {
          name: "String"
        }
      },
      targetAvailabilitySetId: {
        serializedName: "targetAvailabilitySetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailabilitySetResourceSettings: coreClient.CompositeMapper = {
  serializedName: "Microsoft.Compute/availabilitySets",
  type: {
    name: "Composite",
    className: "AvailabilitySetResourceSettings",
    uberParent: "ResourceSettings",
    polymorphicDiscriminator: ResourceSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ResourceSettings.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      faultDomain: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "faultDomain",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      updateDomain: {
        constraints: {
          InclusiveMaximum: 20,
          InclusiveMinimum: 1
        },
        serializedName: "updateDomain",
        nullable: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VirtualNetworkResourceSettings: coreClient.CompositeMapper = {
  serializedName: "Microsoft.Network/virtualNetworks",
  type: {
    name: "Composite",
    className: "VirtualNetworkResourceSettings",
    uberParent: "ResourceSettings",
    polymorphicDiscriminator: ResourceSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ResourceSettings.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      enableDdosProtection: {
        serializedName: "enableDdosProtection",
        nullable: true,
        type: {
          name: "Boolean"
        }
      },
      addressSpace: {
        serializedName: "addressSpace",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      dnsServers: {
        serializedName: "dnsServers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      subnets: {
        serializedName: "subnets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubnetResourceSettings"
            }
          }
        }
      }
    }
  }
};

export const NetworkInterfaceResourceSettings: coreClient.CompositeMapper = {
  serializedName: "Microsoft.Network/networkInterfaces",
  type: {
    name: "Composite",
    className: "NetworkInterfaceResourceSettings",
    uberParent: "ResourceSettings",
    polymorphicDiscriminator: ResourceSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ResourceSettings.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      ipConfigurations: {
        serializedName: "ipConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NicIpConfigurationResourceSettings"
            }
          }
        }
      },
      enableAcceleratedNetworking: {
        serializedName: "enableAcceleratedNetworking",
        nullable: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const NetworkSecurityGroupResourceSettings: coreClient.CompositeMapper = {
  serializedName: "Microsoft.Network/networkSecurityGroups",
  type: {
    name: "Composite",
    className: "NetworkSecurityGroupResourceSettings",
    uberParent: "ResourceSettings",
    polymorphicDiscriminator: ResourceSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ResourceSettings.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      securityRules: {
        serializedName: "securityRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NsgSecurityRule"
            }
          }
        }
      }
    }
  }
};

export const LoadBalancerResourceSettings: coreClient.CompositeMapper = {
  serializedName: "Microsoft.Network/loadBalancers",
  type: {
    name: "Composite",
    className: "LoadBalancerResourceSettings",
    uberParent: "ResourceSettings",
    polymorphicDiscriminator: ResourceSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ResourceSettings.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "String"
        }
      },
      frontendIPConfigurations: {
        serializedName: "frontendIPConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LBFrontendIPConfigurationResourceSettings"
            }
          }
        }
      },
      backendAddressPools: {
        serializedName: "backendAddressPools",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LBBackendAddressPoolResourceSettings"
            }
          }
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlServerResourceSettings: coreClient.CompositeMapper = {
  serializedName: "Microsoft.Sql/servers",
  type: {
    name: "Composite",
    className: "SqlServerResourceSettings",
    uberParent: "ResourceSettings",
    polymorphicDiscriminator: ResourceSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ResourceSettings.type.modelProperties
    }
  }
};

export const SqlElasticPoolResourceSettings: coreClient.CompositeMapper = {
  serializedName: "Microsoft.Sql/servers/elasticPools",
  type: {
    name: "Composite",
    className: "SqlElasticPoolResourceSettings",
    uberParent: "ResourceSettings",
    polymorphicDiscriminator: ResourceSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ResourceSettings.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      zoneRedundant: {
        serializedName: "zoneRedundant",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlDatabaseResourceSettings: coreClient.CompositeMapper = {
  serializedName: "Microsoft.Sql/servers/databases",
  type: {
    name: "Composite",
    className: "SqlDatabaseResourceSettings",
    uberParent: "ResourceSettings",
    polymorphicDiscriminator: ResourceSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ResourceSettings.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      zoneRedundant: {
        serializedName: "zoneRedundant",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceGroupResourceSettings: coreClient.CompositeMapper = {
  serializedName: "resourceGroups",
  type: {
    name: "Composite",
    className: "ResourceGroupResourceSettings",
    uberParent: "ResourceSettings",
    polymorphicDiscriminator: ResourceSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ResourceSettings.type.modelProperties
    }
  }
};

export const PublicIPAddressResourceSettings: coreClient.CompositeMapper = {
  serializedName: "Microsoft.Network/publicIPAddresses",
  type: {
    name: "Composite",
    className: "PublicIPAddressResourceSettings",
    uberParent: "ResourceSettings",
    polymorphicDiscriminator: ResourceSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ResourceSettings.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      domainNameLabel: {
        serializedName: "domainNameLabel",
        type: {
          name: "String"
        }
      },
      fqdn: {
        serializedName: "fqdn",
        type: {
          name: "String"
        }
      },
      publicIpAllocationMethod: {
        serializedName: "publicIpAllocationMethod",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "String"
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyVaultResourceSettings: coreClient.CompositeMapper = {
  serializedName: "Microsoft.KeyVault/vaults",
  type: {
    name: "Composite",
    className: "KeyVaultResourceSettings",
    uberParent: "ResourceSettings",
    polymorphicDiscriminator: ResourceSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ResourceSettings.type.modelProperties
    }
  }
};

export const DiskEncryptionSetResourceSettings: coreClient.CompositeMapper = {
  serializedName: "Microsoft.Compute/diskEncryptionSets",
  type: {
    name: "Composite",
    className: "DiskEncryptionSetResourceSettings",
    uberParent: "ResourceSettings",
    polymorphicDiscriminator: ResourceSettings.type.polymorphicDiscriminator,
    modelProperties: {
      ...ResourceSettings.type.modelProperties
    }
  }
};

export const MoveResourcePropertiesMoveStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MoveResourcePropertiesMoveStatus",
    modelProperties: {
      ...MoveResourceStatus.type.modelProperties
    }
  }
};

export const NsgReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NsgReference",
    modelProperties: {
      ...AzureResourceReference.type.modelProperties
    }
  }
};

export const ProxyResourceReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResourceReference",
    modelProperties: {
      ...AzureResourceReference.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PublicIpReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PublicIpReference",
    modelProperties: {
      ...AzureResourceReference.type.modelProperties
    }
  }
};

export const SubnetReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubnetReference",
    modelProperties: {
      ...ProxyResourceReference.type.modelProperties
    }
  }
};

export const LoadBalancerBackendAddressPoolReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoadBalancerBackendAddressPoolReference",
    modelProperties: {
      ...ProxyResourceReference.type.modelProperties
    }
  }
};

export const LoadBalancerNatRuleReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoadBalancerNatRuleReference",
    modelProperties: {
      ...ProxyResourceReference.type.modelProperties
    }
  }
};

export let discriminators = {
  ResourceSettings: ResourceSettings,
  "ResourceSettings.Microsoft.Compute/virtualMachines": VirtualMachineResourceSettings,
  "ResourceSettings.Microsoft.Compute/availabilitySets": AvailabilitySetResourceSettings,
  "ResourceSettings.Microsoft.Network/virtualNetworks": VirtualNetworkResourceSettings,
  "ResourceSettings.Microsoft.Network/networkInterfaces": NetworkInterfaceResourceSettings,
  "ResourceSettings.Microsoft.Network/networkSecurityGroups": NetworkSecurityGroupResourceSettings,
  "ResourceSettings.Microsoft.Network/loadBalancers": LoadBalancerResourceSettings,
  "ResourceSettings.Microsoft.Sql/servers": SqlServerResourceSettings,
  "ResourceSettings.Microsoft.Sql/servers/elasticPools": SqlElasticPoolResourceSettings,
  "ResourceSettings.Microsoft.Sql/servers/databases": SqlDatabaseResourceSettings,
  "ResourceSettings.resourceGroups": ResourceGroupResourceSettings,
  "ResourceSettings.Microsoft.Network/publicIPAddresses": PublicIPAddressResourceSettings,
  "ResourceSettings.Microsoft.KeyVault/vaults": KeyVaultResourceSettings,
  "ResourceSettings.Microsoft.Compute/diskEncryptionSets": DiskEncryptionSetResourceSettings
};
