/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  MoveCollection as MoveCollectionMapper,
  UpdateMoveCollectionRequest as UpdateMoveCollectionRequestMapper,
  PrepareRequest as PrepareRequestMapper,
  ResourceMoveRequest as ResourceMoveRequestMapper,
  CommitRequest as CommitRequestMapper,
  DiscardRequest as DiscardRequestMapper,
  BulkRemoveRequest as BulkRemoveRequestMapper,
  MoveResource as MoveResourceMapper
} from "../models/mappers";

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const body: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: MoveCollectionMapper
};

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const moveCollectionName: OperationURLParameter = {
  parameterPath: "moveCollectionName",
  mapper: {
    serializedName: "moveCollectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2021-08-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const body1: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: UpdateMoveCollectionRequestMapper
};

export const body2: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: PrepareRequestMapper
};

export const body3: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: ResourceMoveRequestMapper
};

export const body4: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: CommitRequestMapper
};

export const body5: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: DiscardRequestMapper
};

export const body6: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: BulkRemoveRequestMapper
};

export const sourceId: OperationQueryParameter = {
  parameterPath: "sourceId",
  mapper: {
    serializedName: "sourceId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const filter: OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const body7: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: MoveResourceMapper
};

export const moveResourceName: OperationURLParameter = {
  parameterPath: "moveResourceName",
  mapper: {
    serializedName: "moveResourceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const dependencyLevel: OperationQueryParameter = {
  parameterPath: ["options", "dependencyLevel"],
  mapper: {
    serializedName: "dependencyLevel",
    type: {
      name: "String"
    }
  }
};

export const orderby: OperationQueryParameter = {
  parameterPath: ["options", "orderby"],
  mapper: {
    serializedName: "$orderby",
    type: {
      name: "String"
    }
  }
};
