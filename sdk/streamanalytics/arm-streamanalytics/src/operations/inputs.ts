/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Inputs } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { StreamAnalyticsManagementClient } from "../streamAnalyticsManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  Input,
  InputsListByStreamingJobNextOptionalParams,
  InputsListByStreamingJobOptionalParams,
  InputsListByStreamingJobResponse,
  InputsCreateOrReplaceOptionalParams,
  InputsCreateOrReplaceResponse,
  InputsUpdateOptionalParams,
  InputsUpdateResponse,
  InputsDeleteOptionalParams,
  InputsGetOptionalParams,
  InputsGetResponse,
  InputsTestOptionalParams,
  InputsTestResponse,
  InputsListByStreamingJobNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Inputs operations. */
export class InputsImpl implements Inputs {
  private readonly client: StreamAnalyticsManagementClient;

  /**
   * Initialize a new instance of the class Inputs class.
   * @param client Reference to the service client
   */
  constructor(client: StreamAnalyticsManagementClient) {
    this.client = client;
  }

  /**
   * Lists all of the inputs under the specified streaming job.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param jobName The name of the streaming job.
   * @param options The options parameters.
   */
  public listByStreamingJob(
    resourceGroupName: string,
    jobName: string,
    options?: InputsListByStreamingJobOptionalParams
  ): PagedAsyncIterableIterator<Input> {
    const iter = this.listByStreamingJobPagingAll(
      resourceGroupName,
      jobName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByStreamingJobPagingPage(
          resourceGroupName,
          jobName,
          options,
          settings
        );
      }
    };
  }

  private async *listByStreamingJobPagingPage(
    resourceGroupName: string,
    jobName: string,
    options?: InputsListByStreamingJobOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Input[]> {
    let result: InputsListByStreamingJobResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByStreamingJob(
        resourceGroupName,
        jobName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByStreamingJobNext(
        resourceGroupName,
        jobName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByStreamingJobPagingAll(
    resourceGroupName: string,
    jobName: string,
    options?: InputsListByStreamingJobOptionalParams
  ): AsyncIterableIterator<Input> {
    for await (const page of this.listByStreamingJobPagingPage(
      resourceGroupName,
      jobName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Creates an input or replaces an already existing input under an existing streaming job.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param jobName The name of the streaming job.
   * @param inputName The name of the input.
   * @param input The definition of the input that will be used to create a new input or replace the
   *              existing one under the streaming job.
   * @param options The options parameters.
   */
  createOrReplace(
    resourceGroupName: string,
    jobName: string,
    inputName: string,
    input: Input,
    options?: InputsCreateOrReplaceOptionalParams
  ): Promise<InputsCreateOrReplaceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, jobName, inputName, input, options },
      createOrReplaceOperationSpec
    );
  }

  /**
   * Updates an existing input under an existing streaming job. This can be used to partially update (ie.
   * update one or two properties) an input without affecting the rest the job or input definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param jobName The name of the streaming job.
   * @param inputName The name of the input.
   * @param input An Input object. The properties specified here will overwrite the corresponding
   *              properties in the existing input (ie. Those properties will be updated). Any properties that are set
   *              to null here will mean that the corresponding property in the existing input will remain the same
   *              and not change as a result of this PATCH operation.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    jobName: string,
    inputName: string,
    input: Input,
    options?: InputsUpdateOptionalParams
  ): Promise<InputsUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, jobName, inputName, input, options },
      updateOperationSpec
    );
  }

  /**
   * Deletes an input from the streaming job.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param jobName The name of the streaming job.
   * @param inputName The name of the input.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    jobName: string,
    inputName: string,
    options?: InputsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, jobName, inputName, options },
      deleteOperationSpec
    );
  }

  /**
   * Gets details about the specified input.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param jobName The name of the streaming job.
   * @param inputName The name of the input.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    jobName: string,
    inputName: string,
    options?: InputsGetOptionalParams
  ): Promise<InputsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, jobName, inputName, options },
      getOperationSpec
    );
  }

  /**
   * Lists all of the inputs under the specified streaming job.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param jobName The name of the streaming job.
   * @param options The options parameters.
   */
  private _listByStreamingJob(
    resourceGroupName: string,
    jobName: string,
    options?: InputsListByStreamingJobOptionalParams
  ): Promise<InputsListByStreamingJobResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, jobName, options },
      listByStreamingJobOperationSpec
    );
  }

  /**
   * Tests whether an input’s datasource is reachable and usable by the Azure Stream Analytics service.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param jobName The name of the streaming job.
   * @param inputName The name of the input.
   * @param options The options parameters.
   */
  async beginTest(
    resourceGroupName: string,
    jobName: string,
    inputName: string,
    options?: InputsTestOptionalParams
  ): Promise<
    PollerLike<PollOperationState<InputsTestResponse>, InputsTestResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<InputsTestResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, jobName, inputName, options },
      testOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Tests whether an input’s datasource is reachable and usable by the Azure Stream Analytics service.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param jobName The name of the streaming job.
   * @param inputName The name of the input.
   * @param options The options parameters.
   */
  async beginTestAndWait(
    resourceGroupName: string,
    jobName: string,
    inputName: string,
    options?: InputsTestOptionalParams
  ): Promise<InputsTestResponse> {
    const poller = await this.beginTest(
      resourceGroupName,
      jobName,
      inputName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByStreamingJobNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param jobName The name of the streaming job.
   * @param nextLink The nextLink from the previous successful call to the ListByStreamingJob method.
   * @param options The options parameters.
   */
  private _listByStreamingJobNext(
    resourceGroupName: string,
    jobName: string,
    nextLink: string,
    options?: InputsListByStreamingJobNextOptionalParams
  ): Promise<InputsListByStreamingJobNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, jobName, nextLink, options },
      listByStreamingJobNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrReplaceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs/{inputName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Input,
      headersMapper: Mappers.InputsCreateOrReplaceHeaders
    },
    201: {
      bodyMapper: Mappers.Input,
      headersMapper: Mappers.InputsCreateOrReplaceHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.input,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobName,
    Parameters.inputName
  ],
  headerParameters: [
    Parameters.accept,
    Parameters.contentType,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs/{inputName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Input,
      headersMapper: Mappers.InputsUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.input,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobName,
    Parameters.inputName
  ],
  headerParameters: [
    Parameters.accept,
    Parameters.contentType,
    Parameters.ifMatch
  ],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs/{inputName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobName,
    Parameters.inputName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs/{inputName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Input,
      headersMapper: Mappers.InputsGetHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobName,
    Parameters.inputName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByStreamingJobOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InputListResult
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.select],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const testOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/inputs/{inputName}/test",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceTestStatus
    },
    201: {
      bodyMapper: Mappers.ResourceTestStatus
    },
    202: {
      bodyMapper: Mappers.ResourceTestStatus
    },
    204: {
      bodyMapper: Mappers.ResourceTestStatus
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.input1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobName,
    Parameters.inputName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByStreamingJobNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InputListResult
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
