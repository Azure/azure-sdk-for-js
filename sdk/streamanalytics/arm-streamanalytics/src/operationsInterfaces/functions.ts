/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  FunctionModel,
  FunctionsListByStreamingJobOptionalParams,
  FunctionsCreateOrReplaceOptionalParams,
  FunctionsCreateOrReplaceResponse,
  FunctionsUpdateOptionalParams,
  FunctionsUpdateResponse,
  FunctionsDeleteOptionalParams,
  FunctionsGetOptionalParams,
  FunctionsGetResponse,
  FunctionsTestOptionalParams,
  FunctionsTestResponse,
  FunctionsRetrieveDefaultDefinitionOptionalParams,
  FunctionsRetrieveDefaultDefinitionResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Functions. */
export interface Functions {
  /**
   * Lists all of the functions under the specified streaming job.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param jobName The name of the streaming job.
   * @param options The options parameters.
   */
  listByStreamingJob(
    resourceGroupName: string,
    jobName: string,
    options?: FunctionsListByStreamingJobOptionalParams
  ): PagedAsyncIterableIterator<FunctionModel>;
  /**
   * Creates a function or replaces an already existing function under an existing streaming job.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param jobName The name of the streaming job.
   * @param functionName The name of the function.
   * @param functionParam The definition of the function that will be used to create a new function or
   *                      replace the existing one under the streaming job.
   * @param options The options parameters.
   */
  createOrReplace(
    resourceGroupName: string,
    jobName: string,
    functionName: string,
    functionParam: FunctionModel,
    options?: FunctionsCreateOrReplaceOptionalParams
  ): Promise<FunctionsCreateOrReplaceResponse>;
  /**
   * Updates an existing function under an existing streaming job. This can be used to partially update
   * (ie. update one or two properties) a function without affecting the rest the job or function
   * definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param jobName The name of the streaming job.
   * @param functionName The name of the function.
   * @param functionParam A function object. The properties specified here will overwrite the
   *                      corresponding properties in the existing function (ie. Those properties will be updated). Any
   *                      properties that are set to null here will mean that the corresponding property in the existing
   *                      function will remain the same and not change as a result of this PATCH operation.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    jobName: string,
    functionName: string,
    functionParam: FunctionModel,
    options?: FunctionsUpdateOptionalParams
  ): Promise<FunctionsUpdateResponse>;
  /**
   * Deletes a function from the streaming job.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param jobName The name of the streaming job.
   * @param functionName The name of the function.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    jobName: string,
    functionName: string,
    options?: FunctionsDeleteOptionalParams
  ): Promise<void>;
  /**
   * Gets details about the specified function.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param jobName The name of the streaming job.
   * @param functionName The name of the function.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    jobName: string,
    functionName: string,
    options?: FunctionsGetOptionalParams
  ): Promise<FunctionsGetResponse>;
  /**
   * Tests if the information provided for a function is valid. This can range from testing the
   * connection to the underlying web service behind the function or making sure the function code
   * provided is syntactically correct.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param jobName The name of the streaming job.
   * @param functionName The name of the function.
   * @param options The options parameters.
   */
  beginTest(
    resourceGroupName: string,
    jobName: string,
    functionName: string,
    options?: FunctionsTestOptionalParams
  ): Promise<
    PollerLike<PollOperationState<FunctionsTestResponse>, FunctionsTestResponse>
  >;
  /**
   * Tests if the information provided for a function is valid. This can range from testing the
   * connection to the underlying web service behind the function or making sure the function code
   * provided is syntactically correct.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param jobName The name of the streaming job.
   * @param functionName The name of the function.
   * @param options The options parameters.
   */
  beginTestAndWait(
    resourceGroupName: string,
    jobName: string,
    functionName: string,
    options?: FunctionsTestOptionalParams
  ): Promise<FunctionsTestResponse>;
  /**
   * Retrieves the default definition of a function based on the parameters specified.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param jobName The name of the streaming job.
   * @param functionName The name of the function.
   * @param options The options parameters.
   */
  retrieveDefaultDefinition(
    resourceGroupName: string,
    jobName: string,
    functionName: string,
    options?: FunctionsRetrieveDefaultDefinitionOptionalParams
  ): Promise<FunctionsRetrieveDefaultDefinitionResponse>;
}
