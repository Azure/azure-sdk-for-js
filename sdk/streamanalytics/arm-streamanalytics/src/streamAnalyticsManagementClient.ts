/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreAuth from "@azure/core-auth";
import {
  FunctionsImpl,
  InputsImpl,
  OutputsImpl,
  StreamingJobsImpl,
  SubscriptionsImpl,
  TransformationsImpl,
  OperationsImpl,
  ClustersImpl,
  PrivateEndpointsImpl
} from "./operations";
import {
  Functions,
  Inputs,
  Outputs,
  StreamingJobs,
  Subscriptions,
  Transformations,
  Operations,
  Clusters,
  PrivateEndpoints
} from "./operationsInterfaces";
import { StreamAnalyticsManagementClientContext } from "./streamAnalyticsManagementClientContext";
import { StreamAnalyticsManagementClientOptionalParams } from "./models";

export class StreamAnalyticsManagementClient extends StreamAnalyticsManagementClientContext {
  /**
   * Initializes a new instance of the StreamAnalyticsManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The ID of the target subscription.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: StreamAnalyticsManagementClientOptionalParams
  ) {
    super(credentials, subscriptionId, options);
    this.functions = new FunctionsImpl(this);
    this.inputs = new InputsImpl(this);
    this.outputs = new OutputsImpl(this);
    this.streamingJobs = new StreamingJobsImpl(this);
    this.subscriptions = new SubscriptionsImpl(this);
    this.transformations = new TransformationsImpl(this);
    this.operations = new OperationsImpl(this);
    this.clusters = new ClustersImpl(this);
    this.privateEndpoints = new PrivateEndpointsImpl(this);
  }

  functions: Functions;
  inputs: Inputs;
  outputs: Outputs;
  streamingJobs: StreamingJobs;
  subscriptions: Subscriptions;
  transformations: Transformations;
  operations: Operations;
  clusters: Clusters;
  privateEndpoints: PrivateEndpoints;
}
