/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorError"
        }
      }
    }
  }
};

export const ErrorError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetails"
            }
          }
        }
      }
    }
  }
};

export const ErrorDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetails",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InputProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InputProperties",
    uberParent: "InputProperties",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      serialization: {
        serializedName: "serialization",
        type: {
          name: "Composite",
          className: "Serialization"
        }
      },
      diagnostics: {
        serializedName: "diagnostics",
        type: {
          name: "Composite",
          className: "Diagnostics"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      compression: {
        serializedName: "compression",
        type: {
          name: "Composite",
          className: "Compression"
        }
      },
      partitionKey: {
        serializedName: "partitionKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Serialization: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Serialization",
    uberParent: "Serialization",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Diagnostics: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Diagnostics",
    modelProperties: {
      conditions: {
        serializedName: "conditions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnosticCondition"
            }
          }
        }
      }
    }
  }
};

export const DiagnosticCondition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnosticCondition",
    modelProperties: {
      since: {
        serializedName: "since",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Compression: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Compression",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OutputDataSource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OutputDataSource",
    uberParent: "OutputDataSource",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FunctionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FunctionProperties",
    uberParent: "FunctionProperties",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccount: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccount",
    modelProperties: {
      accountName: {
        serializedName: "accountName",
        type: {
          name: "String"
        }
      },
      accountKey: {
        serializedName: "accountKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterInfo",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Identity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Identity",
    modelProperties: {
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StreamingJobListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StreamingJobListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StreamingJob"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StartStreamingJobParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StartStreamingJobParameters",
    modelProperties: {
      outputStartMode: {
        serializedName: "outputStartMode",
        type: {
          name: "String"
        }
      },
      outputStartTime: {
        serializedName: "outputStartTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ScaleStreamingJobParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScaleStreamingJobParameters",
    modelProperties: {
      streamingUnits: {
        serializedName: "streamingUnits",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const InputListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InputListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Input"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceTestStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceTestStatus",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorResponse"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OutputListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OutputListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Output"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FunctionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FunctionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FunctionModel"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FunctionRetrieveDefaultDefinitionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FunctionRetrieveDefaultDefinitionParameters",
    uberParent: "FunctionRetrieveDefaultDefinitionParameters",
    polymorphicDiscriminator: {
      serializedName: "bindingType",
      clientName: "bindingType"
    },
    modelProperties: {
      bindingType: {
        serializedName: "bindingType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubscriptionQuotasListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubscriptionQuotasListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubscriptionQuota"
            }
          }
        }
      }
    }
  }
};

export const ClusterSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterSku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      capacity: {
        constraints: {
          InclusiveMaximum: 216,
          InclusiveMinimum: 36
        },
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ClusterListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Cluster"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterJobListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterJobListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClusterJob"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterJob: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterJob",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      streamingUnits: {
        serializedName: "streamingUnits",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      jobState: {
        serializedName: "jobState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnection",
    modelProperties: {
      privateLinkServiceId: {
        serializedName: "properties.privateLinkServiceId",
        type: {
          name: "String"
        }
      },
      groupIds: {
        serializedName: "properties.groupIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      requestMessage: {
        serializedName: "properties.requestMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkConnectionState"
        }
      }
    }
  }
};

export const PrivateLinkConnectionState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpoint"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StreamInputDataSource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StreamInputDataSource",
    uberParent: "StreamInputDataSource",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReferenceInputDataSource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReferenceInputDataSource",
    uberParent: "ReferenceInputDataSource",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BlobDataSourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobDataSourceProperties",
    modelProperties: {
      storageAccounts: {
        serializedName: "storageAccounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageAccount"
            }
          }
        }
      },
      container: {
        serializedName: "container",
        type: {
          name: "String"
        }
      },
      pathPattern: {
        serializedName: "pathPattern",
        type: {
          name: "String"
        }
      },
      dateFormat: {
        serializedName: "dateFormat",
        type: {
          name: "String"
        }
      },
      timeFormat: {
        serializedName: "timeFormat",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceBusDataSourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceBusDataSourceProperties",
    modelProperties: {
      serviceBusNamespace: {
        serializedName: "serviceBusNamespace",
        type: {
          name: "String"
        }
      },
      sharedAccessPolicyName: {
        serializedName: "sharedAccessPolicyName",
        type: {
          name: "String"
        }
      },
      sharedAccessPolicyKey: {
        serializedName: "sharedAccessPolicyKey",
        type: {
          name: "String"
        }
      },
      authenticationMode: {
        serializedName: "authenticationMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureSqlDatabaseDataSourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureSqlDatabaseDataSourceProperties",
    modelProperties: {
      server: {
        serializedName: "server",
        type: {
          name: "String"
        }
      },
      database: {
        serializedName: "database",
        type: {
          name: "String"
        }
      },
      user: {
        serializedName: "user",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      table: {
        serializedName: "table",
        type: {
          name: "String"
        }
      },
      maxBatchCount: {
        serializedName: "maxBatchCount",
        type: {
          name: "Number"
        }
      },
      maxWriterCount: {
        serializedName: "maxWriterCount",
        type: {
          name: "Number"
        }
      },
      authenticationMode: {
        serializedName: "authenticationMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureSynapseDataSourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureSynapseDataSourceProperties",
    modelProperties: {
      server: {
        serializedName: "server",
        type: {
          name: "String"
        }
      },
      database: {
        serializedName: "database",
        type: {
          name: "String"
        }
      },
      table: {
        serializedName: "table",
        type: {
          name: "String"
        }
      },
      user: {
        serializedName: "user",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OAuthBasedDataSourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OAuthBasedDataSourceProperties",
    modelProperties: {
      refreshToken: {
        serializedName: "refreshToken",
        type: {
          name: "String"
        }
      },
      tokenUserPrincipalName: {
        serializedName: "tokenUserPrincipalName",
        type: {
          name: "String"
        }
      },
      tokenUserDisplayName: {
        serializedName: "tokenUserDisplayName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FunctionInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FunctionInput",
    modelProperties: {
      dataType: {
        serializedName: "dataType",
        type: {
          name: "String"
        }
      },
      isConfigurationParameter: {
        serializedName: "isConfigurationParameter",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const FunctionOutput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FunctionOutput",
    modelProperties: {
      dataType: {
        serializedName: "dataType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FunctionBinding: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FunctionBinding",
    uberParent: "FunctionBinding",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureMachineLearningWebServiceInputs: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureMachineLearningWebServiceInputs",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      columnNames: {
        serializedName: "columnNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureMachineLearningWebServiceInputColumn"
            }
          }
        }
      }
    }
  }
};

export const AzureMachineLearningWebServiceInputColumn: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureMachineLearningWebServiceInputColumn",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      dataType: {
        serializedName: "dataType",
        type: {
          name: "String"
        }
      },
      mapTo: {
        serializedName: "mapTo",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AzureMachineLearningWebServiceOutputColumn: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureMachineLearningWebServiceOutputColumn",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      dataType: {
        serializedName: "dataType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StreamInputProperties: coreClient.CompositeMapper = {
  serializedName: "Stream",
  type: {
    name: "Composite",
    className: "StreamInputProperties",
    uberParent: "InputProperties",
    polymorphicDiscriminator: InputProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...InputProperties.type.modelProperties,
      datasource: {
        serializedName: "datasource",
        type: {
          name: "Composite",
          className: "StreamInputDataSource"
        }
      }
    }
  }
};

export const ReferenceInputProperties: coreClient.CompositeMapper = {
  serializedName: "Reference",
  type: {
    name: "Composite",
    className: "ReferenceInputProperties",
    uberParent: "InputProperties",
    polymorphicDiscriminator: InputProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...InputProperties.type.modelProperties,
      datasource: {
        serializedName: "datasource",
        type: {
          name: "Composite",
          className: "ReferenceInputDataSource"
        }
      }
    }
  }
};

export const ParquetSerialization: coreClient.CompositeMapper = {
  serializedName: "Parquet",
  type: {
    name: "Composite",
    className: "ParquetSerialization",
    uberParent: "Serialization",
    polymorphicDiscriminator: Serialization.type.polymorphicDiscriminator,
    modelProperties: {
      ...Serialization.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const CsvSerialization: coreClient.CompositeMapper = {
  serializedName: "Csv",
  type: {
    name: "Composite",
    className: "CsvSerialization",
    uberParent: "Serialization",
    polymorphicDiscriminator: Serialization.type.polymorphicDiscriminator,
    modelProperties: {
      ...Serialization.type.modelProperties,
      fieldDelimiter: {
        serializedName: "properties.fieldDelimiter",
        type: {
          name: "String"
        }
      },
      encoding: {
        serializedName: "properties.encoding",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JsonSerialization: coreClient.CompositeMapper = {
  serializedName: "Json",
  type: {
    name: "Composite",
    className: "JsonSerialization",
    uberParent: "Serialization",
    polymorphicDiscriminator: Serialization.type.polymorphicDiscriminator,
    modelProperties: {
      ...Serialization.type.modelProperties,
      encoding: {
        serializedName: "properties.encoding",
        type: {
          name: "String"
        }
      },
      format: {
        serializedName: "properties.format",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvroSerialization: coreClient.CompositeMapper = {
  serializedName: "Avro",
  type: {
    name: "Composite",
    className: "AvroSerialization",
    uberParent: "Serialization",
    polymorphicDiscriminator: Serialization.type.polymorphicDiscriminator,
    modelProperties: {
      ...Serialization.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const Input: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Input",
    modelProperties: {
      ...SubResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "InputProperties"
        }
      }
    }
  }
};

export const Transformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Transformation",
    modelProperties: {
      ...SubResource.type.modelProperties,
      streamingUnits: {
        serializedName: "properties.streamingUnits",
        type: {
          name: "Number"
        }
      },
      validStreamingUnits: {
        serializedName: "properties.validStreamingUnits",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      query: {
        serializedName: "properties.query",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "properties.etag",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Output: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Output",
    modelProperties: {
      ...SubResource.type.modelProperties,
      datasource: {
        serializedName: "properties.datasource",
        type: {
          name: "Composite",
          className: "OutputDataSource"
        }
      },
      timeWindow: {
        serializedName: "properties.timeWindow",
        type: {
          name: "String"
        }
      },
      sizeWindow: {
        serializedName: "properties.sizeWindow",
        type: {
          name: "Number"
        }
      },
      serialization: {
        serializedName: "properties.serialization",
        type: {
          name: "Composite",
          className: "Serialization"
        }
      },
      diagnostics: {
        serializedName: "properties.diagnostics",
        type: {
          name: "Composite",
          className: "Diagnostics"
        }
      },
      etag: {
        serializedName: "properties.etag",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FunctionModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FunctionModel",
    modelProperties: {
      ...SubResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "FunctionProperties"
        }
      }
    }
  }
};

export const SubscriptionQuota: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubscriptionQuota",
    modelProperties: {
      ...SubResource.type.modelProperties,
      maxCount: {
        serializedName: "properties.maxCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      currentCount: {
        serializedName: "properties.currentCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BlobOutputDataSource: coreClient.CompositeMapper = {
  serializedName: "Microsoft.Storage/Blob",
  type: {
    name: "Composite",
    className: "BlobOutputDataSource",
    uberParent: "OutputDataSource",
    polymorphicDiscriminator: OutputDataSource.type.polymorphicDiscriminator,
    modelProperties: {
      ...OutputDataSource.type.modelProperties,
      storageAccounts: {
        serializedName: "properties.storageAccounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageAccount"
            }
          }
        }
      },
      container: {
        serializedName: "properties.container",
        type: {
          name: "String"
        }
      },
      pathPattern: {
        serializedName: "properties.pathPattern",
        type: {
          name: "String"
        }
      },
      dateFormat: {
        serializedName: "properties.dateFormat",
        type: {
          name: "String"
        }
      },
      timeFormat: {
        serializedName: "properties.timeFormat",
        type: {
          name: "String"
        }
      },
      authenticationMode: {
        serializedName: "properties.authenticationMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureTableOutputDataSource: coreClient.CompositeMapper = {
  serializedName: "Microsoft.Storage/Table",
  type: {
    name: "Composite",
    className: "AzureTableOutputDataSource",
    uberParent: "OutputDataSource",
    polymorphicDiscriminator: OutputDataSource.type.polymorphicDiscriminator,
    modelProperties: {
      ...OutputDataSource.type.modelProperties,
      accountName: {
        serializedName: "properties.accountName",
        type: {
          name: "String"
        }
      },
      accountKey: {
        serializedName: "properties.accountKey",
        type: {
          name: "String"
        }
      },
      table: {
        serializedName: "properties.table",
        type: {
          name: "String"
        }
      },
      partitionKey: {
        serializedName: "properties.partitionKey",
        type: {
          name: "String"
        }
      },
      rowKey: {
        serializedName: "properties.rowKey",
        type: {
          name: "String"
        }
      },
      columnsToRemove: {
        serializedName: "properties.columnsToRemove",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      batchSize: {
        serializedName: "properties.batchSize",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EventHubOutputDataSource: coreClient.CompositeMapper = {
  serializedName: "Microsoft.ServiceBus/EventHub",
  type: {
    name: "Composite",
    className: "EventHubOutputDataSource",
    uberParent: "OutputDataSource",
    polymorphicDiscriminator: OutputDataSource.type.polymorphicDiscriminator,
    modelProperties: {
      ...OutputDataSource.type.modelProperties,
      serviceBusNamespace: {
        serializedName: "properties.serviceBusNamespace",
        type: {
          name: "String"
        }
      },
      sharedAccessPolicyName: {
        serializedName: "properties.sharedAccessPolicyName",
        type: {
          name: "String"
        }
      },
      sharedAccessPolicyKey: {
        serializedName: "properties.sharedAccessPolicyKey",
        type: {
          name: "String"
        }
      },
      authenticationMode: {
        serializedName: "properties.authenticationMode",
        type: {
          name: "String"
        }
      },
      eventHubName: {
        serializedName: "properties.eventHubName",
        type: {
          name: "String"
        }
      },
      partitionKey: {
        serializedName: "properties.partitionKey",
        type: {
          name: "String"
        }
      },
      propertyColumns: {
        serializedName: "properties.propertyColumns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const EventHubV2OutputDataSource: coreClient.CompositeMapper = {
  serializedName: "Microsoft.EventHub/EventHub",
  type: {
    name: "Composite",
    className: "EventHubV2OutputDataSource",
    uberParent: "OutputDataSource",
    polymorphicDiscriminator: OutputDataSource.type.polymorphicDiscriminator,
    modelProperties: {
      ...OutputDataSource.type.modelProperties,
      serviceBusNamespace: {
        serializedName: "properties.serviceBusNamespace",
        type: {
          name: "String"
        }
      },
      sharedAccessPolicyName: {
        serializedName: "properties.sharedAccessPolicyName",
        type: {
          name: "String"
        }
      },
      sharedAccessPolicyKey: {
        serializedName: "properties.sharedAccessPolicyKey",
        type: {
          name: "String"
        }
      },
      authenticationMode: {
        serializedName: "properties.authenticationMode",
        type: {
          name: "String"
        }
      },
      eventHubName: {
        serializedName: "properties.eventHubName",
        type: {
          name: "String"
        }
      },
      partitionKey: {
        serializedName: "properties.partitionKey",
        type: {
          name: "String"
        }
      },
      propertyColumns: {
        serializedName: "properties.propertyColumns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AzureSqlDatabaseOutputDataSource: coreClient.CompositeMapper = {
  serializedName: "Microsoft.Sql/Server/Database",
  type: {
    name: "Composite",
    className: "AzureSqlDatabaseOutputDataSource",
    uberParent: "OutputDataSource",
    polymorphicDiscriminator: OutputDataSource.type.polymorphicDiscriminator,
    modelProperties: {
      ...OutputDataSource.type.modelProperties,
      server: {
        serializedName: "properties.server",
        type: {
          name: "String"
        }
      },
      database: {
        serializedName: "properties.database",
        type: {
          name: "String"
        }
      },
      user: {
        serializedName: "properties.user",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "properties.password",
        type: {
          name: "String"
        }
      },
      table: {
        serializedName: "properties.table",
        type: {
          name: "String"
        }
      },
      maxBatchCount: {
        serializedName: "properties.maxBatchCount",
        type: {
          name: "Number"
        }
      },
      maxWriterCount: {
        serializedName: "properties.maxWriterCount",
        type: {
          name: "Number"
        }
      },
      authenticationMode: {
        serializedName: "properties.authenticationMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureSynapseOutputDataSource: coreClient.CompositeMapper = {
  serializedName: "Microsoft.Sql/Server/DataWarehouse",
  type: {
    name: "Composite",
    className: "AzureSynapseOutputDataSource",
    uberParent: "OutputDataSource",
    polymorphicDiscriminator: OutputDataSource.type.polymorphicDiscriminator,
    modelProperties: {
      ...OutputDataSource.type.modelProperties,
      server: {
        serializedName: "properties.server",
        type: {
          name: "String"
        }
      },
      database: {
        serializedName: "properties.database",
        type: {
          name: "String"
        }
      },
      table: {
        serializedName: "properties.table",
        type: {
          name: "String"
        }
      },
      user: {
        serializedName: "properties.user",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "properties.password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DocumentDbOutputDataSource: coreClient.CompositeMapper = {
  serializedName: "Microsoft.Storage/DocumentDB",
  type: {
    name: "Composite",
    className: "DocumentDbOutputDataSource",
    uberParent: "OutputDataSource",
    polymorphicDiscriminator: OutputDataSource.type.polymorphicDiscriminator,
    modelProperties: {
      ...OutputDataSource.type.modelProperties,
      accountId: {
        serializedName: "properties.accountId",
        type: {
          name: "String"
        }
      },
      accountKey: {
        serializedName: "properties.accountKey",
        type: {
          name: "String"
        }
      },
      database: {
        serializedName: "properties.database",
        type: {
          name: "String"
        }
      },
      collectionNamePattern: {
        serializedName: "properties.collectionNamePattern",
        type: {
          name: "String"
        }
      },
      partitionKey: {
        serializedName: "properties.partitionKey",
        type: {
          name: "String"
        }
      },
      documentId: {
        serializedName: "properties.documentId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceBusQueueOutputDataSource: coreClient.CompositeMapper = {
  serializedName: "Microsoft.ServiceBus/Queue",
  type: {
    name: "Composite",
    className: "ServiceBusQueueOutputDataSource",
    uberParent: "OutputDataSource",
    polymorphicDiscriminator: OutputDataSource.type.polymorphicDiscriminator,
    modelProperties: {
      ...OutputDataSource.type.modelProperties,
      serviceBusNamespace: {
        serializedName: "properties.serviceBusNamespace",
        type: {
          name: "String"
        }
      },
      sharedAccessPolicyName: {
        serializedName: "properties.sharedAccessPolicyName",
        type: {
          name: "String"
        }
      },
      sharedAccessPolicyKey: {
        serializedName: "properties.sharedAccessPolicyKey",
        type: {
          name: "String"
        }
      },
      authenticationMode: {
        serializedName: "properties.authenticationMode",
        type: {
          name: "String"
        }
      },
      queueName: {
        serializedName: "properties.queueName",
        type: {
          name: "String"
        }
      },
      propertyColumns: {
        serializedName: "properties.propertyColumns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      systemPropertyColumns: {
        serializedName: "properties.systemPropertyColumns",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const ServiceBusTopicOutputDataSource: coreClient.CompositeMapper = {
  serializedName: "Microsoft.ServiceBus/Topic",
  type: {
    name: "Composite",
    className: "ServiceBusTopicOutputDataSource",
    uberParent: "OutputDataSource",
    polymorphicDiscriminator: OutputDataSource.type.polymorphicDiscriminator,
    modelProperties: {
      ...OutputDataSource.type.modelProperties,
      serviceBusNamespace: {
        serializedName: "properties.serviceBusNamespace",
        type: {
          name: "String"
        }
      },
      sharedAccessPolicyName: {
        serializedName: "properties.sharedAccessPolicyName",
        type: {
          name: "String"
        }
      },
      sharedAccessPolicyKey: {
        serializedName: "properties.sharedAccessPolicyKey",
        type: {
          name: "String"
        }
      },
      authenticationMode: {
        serializedName: "properties.authenticationMode",
        type: {
          name: "String"
        }
      },
      topicName: {
        serializedName: "properties.topicName",
        type: {
          name: "String"
        }
      },
      propertyColumns: {
        serializedName: "properties.propertyColumns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      systemPropertyColumns: {
        serializedName: "properties.systemPropertyColumns",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const PowerBIOutputDataSource: coreClient.CompositeMapper = {
  serializedName: "PowerBI",
  type: {
    name: "Composite",
    className: "PowerBIOutputDataSource",
    uberParent: "OutputDataSource",
    polymorphicDiscriminator: OutputDataSource.type.polymorphicDiscriminator,
    modelProperties: {
      ...OutputDataSource.type.modelProperties,
      refreshToken: {
        serializedName: "properties.refreshToken",
        type: {
          name: "String"
        }
      },
      tokenUserPrincipalName: {
        serializedName: "properties.tokenUserPrincipalName",
        type: {
          name: "String"
        }
      },
      tokenUserDisplayName: {
        serializedName: "properties.tokenUserDisplayName",
        type: {
          name: "String"
        }
      },
      dataset: {
        serializedName: "properties.dataset",
        type: {
          name: "String"
        }
      },
      table: {
        serializedName: "properties.table",
        type: {
          name: "String"
        }
      },
      groupId: {
        serializedName: "properties.groupId",
        type: {
          name: "String"
        }
      },
      groupName: {
        serializedName: "properties.groupName",
        type: {
          name: "String"
        }
      },
      authenticationMode: {
        serializedName: "properties.authenticationMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureDataLakeStoreOutputDataSource: coreClient.CompositeMapper = {
  serializedName: "Microsoft.DataLake/Accounts",
  type: {
    name: "Composite",
    className: "AzureDataLakeStoreOutputDataSource",
    uberParent: "OutputDataSource",
    polymorphicDiscriminator: OutputDataSource.type.polymorphicDiscriminator,
    modelProperties: {
      ...OutputDataSource.type.modelProperties,
      refreshToken: {
        serializedName: "properties.refreshToken",
        type: {
          name: "String"
        }
      },
      tokenUserPrincipalName: {
        serializedName: "properties.tokenUserPrincipalName",
        type: {
          name: "String"
        }
      },
      tokenUserDisplayName: {
        serializedName: "properties.tokenUserDisplayName",
        type: {
          name: "String"
        }
      },
      accountName: {
        serializedName: "properties.accountName",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      filePathPrefix: {
        serializedName: "properties.filePathPrefix",
        type: {
          name: "String"
        }
      },
      dateFormat: {
        serializedName: "properties.dateFormat",
        type: {
          name: "String"
        }
      },
      timeFormat: {
        serializedName: "properties.timeFormat",
        type: {
          name: "String"
        }
      },
      authenticationMode: {
        serializedName: "properties.authenticationMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScalarFunctionProperties: coreClient.CompositeMapper = {
  serializedName: "Scalar",
  type: {
    name: "Composite",
    className: "ScalarFunctionProperties",
    uberParent: "FunctionProperties",
    polymorphicDiscriminator: FunctionProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...FunctionProperties.type.modelProperties,
      inputs: {
        serializedName: "properties.inputs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FunctionInput"
            }
          }
        }
      },
      output: {
        serializedName: "properties.output",
        type: {
          name: "Composite",
          className: "FunctionOutput"
        }
      },
      binding: {
        serializedName: "properties.binding",
        type: {
          name: "Composite",
          className: "FunctionBinding"
        }
      }
    }
  }
};

export const JobStorageAccount: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobStorageAccount",
    modelProperties: {
      ...StorageAccount.type.modelProperties,
      authenticationMode: {
        serializedName: "authenticationMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const AzureMachineLearningWebServiceFunctionRetrieveDefaultDefinitionParameters: coreClient.CompositeMapper = {
  serializedName: "Microsoft.MachineLearning/WebService",
  type: {
    name: "Composite",
    className:
      "AzureMachineLearningWebServiceFunctionRetrieveDefaultDefinitionParameters",
    uberParent: "FunctionRetrieveDefaultDefinitionParameters",
    polymorphicDiscriminator:
      FunctionRetrieveDefaultDefinitionParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...FunctionRetrieveDefaultDefinitionParameters.type.modelProperties,
      executeEndpoint: {
        serializedName: "bindingRetrievalProperties.executeEndpoint",
        type: {
          name: "String"
        }
      },
      udfType: {
        defaultValue: "Scalar",
        isConstant: true,
        serializedName: "bindingRetrievalProperties.udfType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JavaScriptFunctionRetrieveDefaultDefinitionParameters: coreClient.CompositeMapper = {
  serializedName: "Microsoft.StreamAnalytics/JavascriptUdf",
  type: {
    name: "Composite",
    className: "JavaScriptFunctionRetrieveDefaultDefinitionParameters",
    uberParent: "FunctionRetrieveDefaultDefinitionParameters",
    polymorphicDiscriminator:
      FunctionRetrieveDefaultDefinitionParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...FunctionRetrieveDefaultDefinitionParameters.type.modelProperties,
      script: {
        serializedName: "bindingRetrievalProperties.script",
        type: {
          name: "String"
        }
      },
      udfType: {
        defaultValue: "Scalar",
        isConstant: true,
        serializedName: "bindingRetrievalProperties.udfType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BlobStreamInputDataSource: coreClient.CompositeMapper = {
  serializedName: "Microsoft.Storage/Blob",
  type: {
    name: "Composite",
    className: "BlobStreamInputDataSource",
    uberParent: "StreamInputDataSource",
    polymorphicDiscriminator:
      StreamInputDataSource.type.polymorphicDiscriminator,
    modelProperties: {
      ...StreamInputDataSource.type.modelProperties,
      storageAccounts: {
        serializedName: "properties.storageAccounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageAccount"
            }
          }
        }
      },
      container: {
        serializedName: "properties.container",
        type: {
          name: "String"
        }
      },
      pathPattern: {
        serializedName: "properties.pathPattern",
        type: {
          name: "String"
        }
      },
      dateFormat: {
        serializedName: "properties.dateFormat",
        type: {
          name: "String"
        }
      },
      timeFormat: {
        serializedName: "properties.timeFormat",
        type: {
          name: "String"
        }
      },
      sourcePartitionCount: {
        serializedName: "properties.sourcePartitionCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EventHubStreamInputDataSource: coreClient.CompositeMapper = {
  serializedName: "Microsoft.ServiceBus/EventHub",
  type: {
    name: "Composite",
    className: "EventHubStreamInputDataSource",
    uberParent: "StreamInputDataSource",
    polymorphicDiscriminator:
      StreamInputDataSource.type.polymorphicDiscriminator,
    modelProperties: {
      ...StreamInputDataSource.type.modelProperties,
      serviceBusNamespace: {
        serializedName: "properties.serviceBusNamespace",
        type: {
          name: "String"
        }
      },
      sharedAccessPolicyName: {
        serializedName: "properties.sharedAccessPolicyName",
        type: {
          name: "String"
        }
      },
      sharedAccessPolicyKey: {
        serializedName: "properties.sharedAccessPolicyKey",
        type: {
          name: "String"
        }
      },
      authenticationMode: {
        serializedName: "properties.authenticationMode",
        type: {
          name: "String"
        }
      },
      eventHubName: {
        serializedName: "properties.eventHubName",
        type: {
          name: "String"
        }
      },
      consumerGroupName: {
        serializedName: "properties.consumerGroupName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventHubV2StreamInputDataSource: coreClient.CompositeMapper = {
  serializedName: "Microsoft.EventHub/EventHub",
  type: {
    name: "Composite",
    className: "EventHubV2StreamInputDataSource",
    uberParent: "StreamInputDataSource",
    polymorphicDiscriminator:
      StreamInputDataSource.type.polymorphicDiscriminator,
    modelProperties: {
      ...StreamInputDataSource.type.modelProperties,
      serviceBusNamespace: {
        serializedName: "properties.serviceBusNamespace",
        type: {
          name: "String"
        }
      },
      sharedAccessPolicyName: {
        serializedName: "properties.sharedAccessPolicyName",
        type: {
          name: "String"
        }
      },
      sharedAccessPolicyKey: {
        serializedName: "properties.sharedAccessPolicyKey",
        type: {
          name: "String"
        }
      },
      authenticationMode: {
        serializedName: "properties.authenticationMode",
        type: {
          name: "String"
        }
      },
      eventHubName: {
        serializedName: "properties.eventHubName",
        type: {
          name: "String"
        }
      },
      consumerGroupName: {
        serializedName: "properties.consumerGroupName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IoTHubStreamInputDataSource: coreClient.CompositeMapper = {
  serializedName: "Microsoft.Devices/IotHubs",
  type: {
    name: "Composite",
    className: "IoTHubStreamInputDataSource",
    uberParent: "StreamInputDataSource",
    polymorphicDiscriminator:
      StreamInputDataSource.type.polymorphicDiscriminator,
    modelProperties: {
      ...StreamInputDataSource.type.modelProperties,
      iotHubNamespace: {
        serializedName: "properties.iotHubNamespace",
        type: {
          name: "String"
        }
      },
      sharedAccessPolicyName: {
        serializedName: "properties.sharedAccessPolicyName",
        type: {
          name: "String"
        }
      },
      sharedAccessPolicyKey: {
        serializedName: "properties.sharedAccessPolicyKey",
        type: {
          name: "String"
        }
      },
      consumerGroupName: {
        serializedName: "properties.consumerGroupName",
        type: {
          name: "String"
        }
      },
      endpoint: {
        serializedName: "properties.endpoint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BlobReferenceInputDataSource: coreClient.CompositeMapper = {
  serializedName: "Microsoft.Storage/Blob",
  type: {
    name: "Composite",
    className: "BlobReferenceInputDataSource",
    uberParent: "ReferenceInputDataSource",
    polymorphicDiscriminator:
      ReferenceInputDataSource.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReferenceInputDataSource.type.modelProperties,
      storageAccounts: {
        serializedName: "properties.storageAccounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageAccount"
            }
          }
        }
      },
      container: {
        serializedName: "properties.container",
        type: {
          name: "String"
        }
      },
      pathPattern: {
        serializedName: "properties.pathPattern",
        type: {
          name: "String"
        }
      },
      dateFormat: {
        serializedName: "properties.dateFormat",
        type: {
          name: "String"
        }
      },
      timeFormat: {
        serializedName: "properties.timeFormat",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureSqlReferenceInputDataSource: coreClient.CompositeMapper = {
  serializedName: "Microsoft.Sql/Server/Database",
  type: {
    name: "Composite",
    className: "AzureSqlReferenceInputDataSource",
    uberParent: "ReferenceInputDataSource",
    polymorphicDiscriminator:
      ReferenceInputDataSource.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReferenceInputDataSource.type.modelProperties,
      server: {
        serializedName: "properties.server",
        type: {
          name: "String"
        }
      },
      database: {
        serializedName: "properties.database",
        type: {
          name: "String"
        }
      },
      user: {
        serializedName: "properties.user",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "properties.password",
        type: {
          name: "String"
        }
      },
      table: {
        serializedName: "properties.table",
        type: {
          name: "String"
        }
      },
      refreshType: {
        serializedName: "properties.refreshType",
        type: {
          name: "String"
        }
      },
      refreshRate: {
        serializedName: "properties.refreshRate",
        type: {
          name: "String"
        }
      },
      fullSnapshotQuery: {
        serializedName: "properties.fullSnapshotQuery",
        type: {
          name: "String"
        }
      },
      deltaSnapshotQuery: {
        serializedName: "properties.deltaSnapshotQuery",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BlobStreamInputDataSourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobStreamInputDataSourceProperties",
    modelProperties: {
      ...BlobDataSourceProperties.type.modelProperties,
      sourcePartitionCount: {
        serializedName: "sourcePartitionCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BlobReferenceInputDataSourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobReferenceInputDataSourceProperties",
    modelProperties: {
      ...BlobDataSourceProperties.type.modelProperties
    }
  }
};

export const BlobOutputDataSourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobOutputDataSourceProperties",
    modelProperties: {
      ...BlobDataSourceProperties.type.modelProperties,
      authenticationMode: {
        serializedName: "authenticationMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventHubDataSourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventHubDataSourceProperties",
    modelProperties: {
      ...ServiceBusDataSourceProperties.type.modelProperties,
      eventHubName: {
        serializedName: "eventHubName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceBusQueueOutputDataSourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceBusQueueOutputDataSourceProperties",
    modelProperties: {
      ...ServiceBusDataSourceProperties.type.modelProperties,
      queueName: {
        serializedName: "queueName",
        type: {
          name: "String"
        }
      },
      propertyColumns: {
        serializedName: "propertyColumns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      systemPropertyColumns: {
        serializedName: "systemPropertyColumns",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const ServiceBusTopicOutputDataSourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceBusTopicOutputDataSourceProperties",
    modelProperties: {
      ...ServiceBusDataSourceProperties.type.modelProperties,
      topicName: {
        serializedName: "topicName",
        type: {
          name: "String"
        }
      },
      propertyColumns: {
        serializedName: "propertyColumns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      systemPropertyColumns: {
        serializedName: "systemPropertyColumns",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const AzureSqlDatabaseOutputDataSourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureSqlDatabaseOutputDataSourceProperties",
    modelProperties: {
      ...AzureSqlDatabaseDataSourceProperties.type.modelProperties
    }
  }
};

export const AzureSynapseOutputDataSourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureSynapseOutputDataSourceProperties",
    modelProperties: {
      ...AzureSynapseDataSourceProperties.type.modelProperties
    }
  }
};

export const PowerBIOutputDataSourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PowerBIOutputDataSourceProperties",
    modelProperties: {
      ...OAuthBasedDataSourceProperties.type.modelProperties,
      dataset: {
        serializedName: "dataset",
        type: {
          name: "String"
        }
      },
      table: {
        serializedName: "table",
        type: {
          name: "String"
        }
      },
      groupId: {
        serializedName: "groupId",
        type: {
          name: "String"
        }
      },
      groupName: {
        serializedName: "groupName",
        type: {
          name: "String"
        }
      },
      authenticationMode: {
        serializedName: "authenticationMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureDataLakeStoreOutputDataSourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureDataLakeStoreOutputDataSourceProperties",
    modelProperties: {
      ...OAuthBasedDataSourceProperties.type.modelProperties,
      accountName: {
        serializedName: "accountName",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      filePathPrefix: {
        serializedName: "filePathPrefix",
        type: {
          name: "String"
        }
      },
      dateFormat: {
        serializedName: "dateFormat",
        type: {
          name: "String"
        }
      },
      timeFormat: {
        serializedName: "timeFormat",
        type: {
          name: "String"
        }
      },
      authenticationMode: {
        serializedName: "authenticationMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureMachineLearningWebServiceFunctionBinding: coreClient.CompositeMapper = {
  serializedName: "Microsoft.MachineLearning/WebService",
  type: {
    name: "Composite",
    className: "AzureMachineLearningWebServiceFunctionBinding",
    uberParent: "FunctionBinding",
    polymorphicDiscriminator: FunctionBinding.type.polymorphicDiscriminator,
    modelProperties: {
      ...FunctionBinding.type.modelProperties,
      endpoint: {
        serializedName: "properties.endpoint",
        type: {
          name: "String"
        }
      },
      apiKey: {
        serializedName: "properties.apiKey",
        type: {
          name: "String"
        }
      },
      inputs: {
        serializedName: "properties.inputs",
        type: {
          name: "Composite",
          className: "AzureMachineLearningWebServiceInputs"
        }
      },
      outputs: {
        serializedName: "properties.outputs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureMachineLearningWebServiceOutputColumn"
            }
          }
        }
      },
      batchSize: {
        serializedName: "properties.batchSize",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const JavaScriptFunctionBinding: coreClient.CompositeMapper = {
  serializedName: "Microsoft.StreamAnalytics/JavascriptUdf",
  type: {
    name: "Composite",
    className: "JavaScriptFunctionBinding",
    uberParent: "FunctionBinding",
    polymorphicDiscriminator: FunctionBinding.type.polymorphicDiscriminator,
    modelProperties: {
      ...FunctionBinding.type.modelProperties,
      script: {
        serializedName: "properties.script",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StreamingJob: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StreamingJob",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      sku: {
        serializedName: "properties.sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      jobId: {
        serializedName: "properties.jobId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      jobState: {
        serializedName: "properties.jobState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      jobType: {
        serializedName: "properties.jobType",
        type: {
          name: "String"
        }
      },
      outputStartMode: {
        serializedName: "properties.outputStartMode",
        type: {
          name: "String"
        }
      },
      outputStartTime: {
        serializedName: "properties.outputStartTime",
        type: {
          name: "DateTime"
        }
      },
      lastOutputEventTime: {
        serializedName: "properties.lastOutputEventTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      eventsOutOfOrderPolicy: {
        serializedName: "properties.eventsOutOfOrderPolicy",
        type: {
          name: "String"
        }
      },
      outputErrorPolicy: {
        serializedName: "properties.outputErrorPolicy",
        type: {
          name: "String"
        }
      },
      eventsOutOfOrderMaxDelayInSeconds: {
        serializedName: "properties.eventsOutOfOrderMaxDelayInSeconds",
        type: {
          name: "Number"
        }
      },
      eventsLateArrivalMaxDelayInSeconds: {
        serializedName: "properties.eventsLateArrivalMaxDelayInSeconds",
        type: {
          name: "Number"
        }
      },
      dataLocale: {
        serializedName: "properties.dataLocale",
        type: {
          name: "String"
        }
      },
      compatibilityLevel: {
        serializedName: "properties.compatibilityLevel",
        type: {
          name: "String"
        }
      },
      createdDate: {
        serializedName: "properties.createdDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      inputs: {
        serializedName: "properties.inputs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Input"
            }
          }
        }
      },
      transformation: {
        serializedName: "properties.transformation",
        type: {
          name: "Composite",
          className: "Transformation"
        }
      },
      outputs: {
        serializedName: "properties.outputs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Output"
            }
          }
        }
      },
      functions: {
        serializedName: "properties.functions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FunctionModel"
            }
          }
        }
      },
      etag: {
        serializedName: "properties.etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      jobStorageAccount: {
        serializedName: "properties.jobStorageAccount",
        type: {
          name: "Composite",
          className: "JobStorageAccount"
        }
      },
      contentStoragePolicy: {
        serializedName: "properties.contentStoragePolicy",
        type: {
          name: "String"
        }
      },
      cluster: {
        serializedName: "properties.cluster",
        type: {
          name: "Composite",
          className: "ClusterInfo"
        }
      }
    }
  }
};

export const Cluster: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Cluster",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "ClusterSku"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdDate: {
        serializedName: "properties.createdDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      clusterId: {
        serializedName: "properties.clusterId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      capacityAllocated: {
        serializedName: "properties.capacityAllocated",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      capacityAssigned: {
        serializedName: "properties.capacityAssigned",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PrivateEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdDate: {
        serializedName: "properties.createdDate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      manualPrivateLinkServiceConnections: {
        serializedName: "properties.manualPrivateLinkServiceConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkServiceConnection"
            }
          }
        }
      }
    }
  }
};

export const EventHubStreamInputDataSourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventHubStreamInputDataSourceProperties",
    modelProperties: {
      ...EventHubDataSourceProperties.type.modelProperties,
      consumerGroupName: {
        serializedName: "consumerGroupName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventHubOutputDataSourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventHubOutputDataSourceProperties",
    modelProperties: {
      ...EventHubDataSourceProperties.type.modelProperties,
      partitionKey: {
        serializedName: "partitionKey",
        type: {
          name: "String"
        }
      },
      propertyColumns: {
        serializedName: "propertyColumns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const StreamingJobsCreateOrReplaceHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StreamingJobsCreateOrReplaceHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StreamingJobsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StreamingJobsUpdateHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StreamingJobsGetHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StreamingJobsGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InputsCreateOrReplaceHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InputsCreateOrReplaceHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InputsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InputsUpdateHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InputsGetHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InputsGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OutputsCreateOrReplaceHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OutputsCreateOrReplaceHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OutputsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OutputsUpdateHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OutputsGetHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OutputsGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TransformationsCreateOrReplaceHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TransformationsCreateOrReplaceHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TransformationsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TransformationsUpdateHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TransformationsGetHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TransformationsGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FunctionsCreateOrReplaceHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FunctionsCreateOrReplaceHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FunctionsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FunctionsUpdateHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FunctionsGetHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FunctionsGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  InputProperties: InputProperties,
  Serialization: Serialization,
  OutputDataSource: OutputDataSource,
  FunctionProperties: FunctionProperties,
  FunctionRetrieveDefaultDefinitionParameters: FunctionRetrieveDefaultDefinitionParameters,
  StreamInputDataSource: StreamInputDataSource,
  ReferenceInputDataSource: ReferenceInputDataSource,
  FunctionBinding: FunctionBinding,
  "InputProperties.Stream": StreamInputProperties,
  "InputProperties.Reference": ReferenceInputProperties,
  "Serialization.Parquet": ParquetSerialization,
  "Serialization.Csv": CsvSerialization,
  "Serialization.Json": JsonSerialization,
  "Serialization.Avro": AvroSerialization,
  "OutputDataSource.Microsoft.Storage/Blob": BlobOutputDataSource,
  "OutputDataSource.Microsoft.Storage/Table": AzureTableOutputDataSource,
  "OutputDataSource.Microsoft.ServiceBus/EventHub": EventHubOutputDataSource,
  "OutputDataSource.Microsoft.EventHub/EventHub": EventHubV2OutputDataSource,
  "OutputDataSource.Microsoft.Sql/Server/Database": AzureSqlDatabaseOutputDataSource,
  "OutputDataSource.Microsoft.Sql/Server/DataWarehouse": AzureSynapseOutputDataSource,
  "OutputDataSource.Microsoft.Storage/DocumentDB": DocumentDbOutputDataSource,
  "OutputDataSource.Microsoft.ServiceBus/Queue": ServiceBusQueueOutputDataSource,
  "OutputDataSource.Microsoft.ServiceBus/Topic": ServiceBusTopicOutputDataSource,
  "OutputDataSource.PowerBI": PowerBIOutputDataSource,
  "OutputDataSource.Microsoft.DataLake/Accounts": AzureDataLakeStoreOutputDataSource,
  "FunctionProperties.Scalar": ScalarFunctionProperties,
  "FunctionRetrieveDefaultDefinitionParameters.Microsoft.MachineLearning/WebService": AzureMachineLearningWebServiceFunctionRetrieveDefaultDefinitionParameters,
  "FunctionRetrieveDefaultDefinitionParameters.Microsoft.StreamAnalytics/JavascriptUdf": JavaScriptFunctionRetrieveDefaultDefinitionParameters,
  "StreamInputDataSource.Microsoft.Storage/Blob": BlobStreamInputDataSource,
  "StreamInputDataSource.Microsoft.ServiceBus/EventHub": EventHubStreamInputDataSource,
  "StreamInputDataSource.Microsoft.EventHub/EventHub": EventHubV2StreamInputDataSource,
  "StreamInputDataSource.Microsoft.Devices/IotHubs": IoTHubStreamInputDataSource,
  "ReferenceInputDataSource.Microsoft.Storage/Blob": BlobReferenceInputDataSource,
  "ReferenceInputDataSource.Microsoft.Sql/Server/Database": AzureSqlReferenceInputDataSource,
  "FunctionBinding.Microsoft.MachineLearning/WebService": AzureMachineLearningWebServiceFunctionBinding,
  "FunctionBinding.Microsoft.StreamAnalytics/JavascriptUdf": JavaScriptFunctionBinding
};
