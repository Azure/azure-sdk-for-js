/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
const { StreamAnalyticsManagementClient } = require("@azure/arm-streamanalytics");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to Creates a function or replaces an already existing function under an existing streaming job.
 *
 * @summary Creates a function or replaces an already existing function under an existing streaming job.
 * x-ms-original-file: specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Create_JavaScript.json
 */
async function createAJavaScriptFunction() {
  const subscriptionId = "56b5e0a9-b645-407d-99b0-c64f86013e3d";
  const resourceGroupName = "sjrg1637";
  const jobName = "sj8653";
  const functionName = "function8197";
  const functionParam = {
    properties: {
      type: "Scalar",
      binding: {
        type: "Microsoft.StreamAnalytics/JavascriptUdf",
        script: "function (x, y) { return x + y; }",
      },
      inputs: [{ dataType: "Any" }],
      output: { dataType: "Any" },
    },
  };
  const credential = new DefaultAzureCredential();
  const client = new StreamAnalyticsManagementClient(credential, subscriptionId);
  const result = await client.functions.createOrReplace(
    resourceGroupName,
    jobName,
    functionName,
    functionParam
  );
  console.log(result);
}

createAJavaScriptFunction().catch(console.error);

/**
 * This sample demonstrates how to Creates a function or replaces an already existing function under an existing streaming job.
 *
 * @summary Creates a function or replaces an already existing function under an existing streaming job.
 * x-ms-original-file: specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Create_AzureML.json
 */
async function createAnAzureMlFunction() {
  const subscriptionId = "56b5e0a9-b645-407d-99b0-c64f86013e3d";
  const resourceGroupName = "sjrg7";
  const jobName = "sj9093";
  const functionName = "function588";
  const functionParam = {
    properties: {
      type: "Scalar",
      binding: {
        type: "Microsoft.MachineLearning/WebService",
        apiKey: "someApiKey==",
        batchSize: 1000,
        endpoint: "someAzureMLEndpointURL",
        inputs: {
          name: "input1",
          columnNames: [{ name: "tweet", dataType: "string", mapTo: 0 }],
        },
        outputs: [{ name: "Sentiment", dataType: "string" }],
      },
      inputs: [{ dataType: "nvarchar(max)" }],
      output: { dataType: "nvarchar(max)" },
    },
  };
  const credential = new DefaultAzureCredential();
  const client = new StreamAnalyticsManagementClient(credential, subscriptionId);
  const result = await client.functions.createOrReplace(
    resourceGroupName,
    jobName,
    functionName,
    functionParam
  );
  console.log(result);
}

createAnAzureMlFunction().catch(console.error);
