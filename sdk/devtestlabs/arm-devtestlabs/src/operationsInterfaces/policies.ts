/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  Policy,
  PoliciesListOptionalParams,
  PoliciesGetOptionalParams,
  PoliciesGetResponse,
  PoliciesCreateOrUpdateOptionalParams,
  PoliciesCreateOrUpdateResponse,
  PoliciesDeleteOptionalParams,
  PolicyFragment,
  PoliciesUpdateOptionalParams,
  PoliciesUpdateResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Policies. */
export interface Policies {
  /**
   * List policies in a given policy set.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param policySetName The name of the policy set.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    labName: string,
    policySetName: string,
    options?: PoliciesListOptionalParams
  ): PagedAsyncIterableIterator<Policy>;
  /**
   * Get policy.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param policySetName The name of the policy set.
   * @param name The name of the policy.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    labName: string,
    policySetName: string,
    name: string,
    options?: PoliciesGetOptionalParams
  ): Promise<PoliciesGetResponse>;
  /**
   * Create or replace an existing policy.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param policySetName The name of the policy set.
   * @param name The name of the policy.
   * @param policy A Policy.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    labName: string,
    policySetName: string,
    name: string,
    policy: Policy,
    options?: PoliciesCreateOrUpdateOptionalParams
  ): Promise<PoliciesCreateOrUpdateResponse>;
  /**
   * Delete policy.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param policySetName The name of the policy set.
   * @param name The name of the policy.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    labName: string,
    policySetName: string,
    name: string,
    options?: PoliciesDeleteOptionalParams
  ): Promise<void>;
  /**
   * Allows modifying tags of policies. All other properties will be ignored.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param policySetName The name of the policy set.
   * @param name The name of the policy.
   * @param policy A Policy.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    labName: string,
    policySetName: string,
    name: string,
    policy: PolicyFragment,
    options?: PoliciesUpdateOptionalParams
  ): Promise<PoliciesUpdateResponse>;
}
