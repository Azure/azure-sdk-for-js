/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/artifactsMappers";
import * as Parameters from "../models/parameters";
import { DevTestLabsClientContext } from "../devTestLabsClientContext";

/** Class representing a Artifacts. */
export class Artifacts {
  private readonly client: DevTestLabsClientContext;

  /**
   * Create a Artifacts.
   * @param {DevTestLabsClientContext} client Reference to the service client.
   */
  constructor(client: DevTestLabsClientContext) {
    this.client = client;
  }

  /**
   * List artifacts in a given artifact source.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param artifactSourceName The name of the artifact source.
   * @param [options] The optional parameters
   * @returns Promise<Models.ArtifactsListResponse>
   */
  list(resourceGroupName: string, labName: string, artifactSourceName: string, options?: Models.ArtifactsListOptionalParams): Promise<Models.ArtifactsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param artifactSourceName The name of the artifact source.
   * @param callback The callback
   */
  list(resourceGroupName: string, labName: string, artifactSourceName: string, callback: msRest.ServiceCallback<Models.ArtifactList>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param artifactSourceName The name of the artifact source.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, labName: string, artifactSourceName: string, options: Models.ArtifactsListOptionalParams, callback: msRest.ServiceCallback<Models.ArtifactList>): void;
  list(resourceGroupName: string, labName: string, artifactSourceName: string, options?: Models.ArtifactsListOptionalParams | msRest.ServiceCallback<Models.ArtifactList>, callback?: msRest.ServiceCallback<Models.ArtifactList>): Promise<Models.ArtifactsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labName,
        artifactSourceName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.ArtifactsListResponse>;
  }

  /**
   * Get artifact.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param artifactSourceName The name of the artifact source.
   * @param name The name of the artifact.
   * @param [options] The optional parameters
   * @returns Promise<Models.ArtifactsGetResponse>
   */
  get(resourceGroupName: string, labName: string, artifactSourceName: string, name: string, options?: Models.ArtifactsGetOptionalParams): Promise<Models.ArtifactsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param artifactSourceName The name of the artifact source.
   * @param name The name of the artifact.
   * @param callback The callback
   */
  get(resourceGroupName: string, labName: string, artifactSourceName: string, name: string, callback: msRest.ServiceCallback<Models.Artifact>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param artifactSourceName The name of the artifact source.
   * @param name The name of the artifact.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, labName: string, artifactSourceName: string, name: string, options: Models.ArtifactsGetOptionalParams, callback: msRest.ServiceCallback<Models.Artifact>): void;
  get(resourceGroupName: string, labName: string, artifactSourceName: string, name: string, options?: Models.ArtifactsGetOptionalParams | msRest.ServiceCallback<Models.Artifact>, callback?: msRest.ServiceCallback<Models.Artifact>): Promise<Models.ArtifactsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labName,
        artifactSourceName,
        name,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ArtifactsGetResponse>;
  }

  /**
   * Generates an ARM template for the given artifact, uploads the required files to a storage
   * account, and validates the generated artifact.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param artifactSourceName The name of the artifact source.
   * @param name The name of the artifact.
   * @param generateArmTemplateRequest Parameters for generating an ARM template for deploying
   * artifacts.
   * @param [options] The optional parameters
   * @returns Promise<Models.ArtifactsGenerateArmTemplateResponse>
   */
  generateArmTemplate(resourceGroupName: string, labName: string, artifactSourceName: string, name: string, generateArmTemplateRequest: Models.GenerateArmTemplateRequest, options?: msRest.RequestOptionsBase): Promise<Models.ArtifactsGenerateArmTemplateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param artifactSourceName The name of the artifact source.
   * @param name The name of the artifact.
   * @param generateArmTemplateRequest Parameters for generating an ARM template for deploying
   * artifacts.
   * @param callback The callback
   */
  generateArmTemplate(resourceGroupName: string, labName: string, artifactSourceName: string, name: string, generateArmTemplateRequest: Models.GenerateArmTemplateRequest, callback: msRest.ServiceCallback<Models.ArmTemplateInfo>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param artifactSourceName The name of the artifact source.
   * @param name The name of the artifact.
   * @param generateArmTemplateRequest Parameters for generating an ARM template for deploying
   * artifacts.
   * @param options The optional parameters
   * @param callback The callback
   */
  generateArmTemplate(resourceGroupName: string, labName: string, artifactSourceName: string, name: string, generateArmTemplateRequest: Models.GenerateArmTemplateRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ArmTemplateInfo>): void;
  generateArmTemplate(resourceGroupName: string, labName: string, artifactSourceName: string, name: string, generateArmTemplateRequest: Models.GenerateArmTemplateRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ArmTemplateInfo>, callback?: msRest.ServiceCallback<Models.ArmTemplateInfo>): Promise<Models.ArtifactsGenerateArmTemplateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labName,
        artifactSourceName,
        name,
        generateArmTemplateRequest,
        options
      },
      generateArmTemplateOperationSpec,
      callback) as Promise<Models.ArtifactsGenerateArmTemplateResponse>;
  }

  /**
   * List artifacts in a given artifact source.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ArtifactsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ArtifactsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ArtifactList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ArtifactList>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ArtifactList>, callback?: msRest.ServiceCallback<Models.ArtifactList>): Promise<Models.ArtifactsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.ArtifactsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{artifactSourceName}/artifacts",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.artifactSourceName
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.filter,
    Parameters.top,
    Parameters.orderby,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ArtifactList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{artifactSourceName}/artifacts/{name}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.artifactSourceName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Artifact
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const generateArmTemplateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{artifactSourceName}/artifacts/{name}/generateArmTemplate",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.artifactSourceName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "generateArmTemplateRequest",
    mapper: {
      ...Mappers.GenerateArmTemplateRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ArmTemplateInfo
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ArtifactList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
