/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/policiesMappers";
import * as Parameters from "../models/parameters";
import { DevTestLabsClientContext } from "../devTestLabsClientContext";

/** Class representing a Policies. */
export class Policies {
  private readonly client: DevTestLabsClientContext;

  /**
   * Create a Policies.
   * @param {DevTestLabsClientContext} client Reference to the service client.
   */
  constructor(client: DevTestLabsClientContext) {
    this.client = client;
  }

  /**
   * List policies in a given policy set.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param policySetName The name of the policy set.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoliciesListResponse>
   */
  list(resourceGroupName: string, labName: string, policySetName: string, options?: Models.PoliciesListOptionalParams): Promise<Models.PoliciesListResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param policySetName The name of the policy set.
   * @param callback The callback
   */
  list(resourceGroupName: string, labName: string, policySetName: string, callback: msRest.ServiceCallback<Models.PolicyList>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param policySetName The name of the policy set.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, labName: string, policySetName: string, options: Models.PoliciesListOptionalParams, callback: msRest.ServiceCallback<Models.PolicyList>): void;
  list(resourceGroupName: string, labName: string, policySetName: string, options?: Models.PoliciesListOptionalParams | msRest.ServiceCallback<Models.PolicyList>, callback?: msRest.ServiceCallback<Models.PolicyList>): Promise<Models.PoliciesListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labName,
        policySetName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.PoliciesListResponse>;
  }

  /**
   * Get policy.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param policySetName The name of the policy set.
   * @param name The name of the policy.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoliciesGetResponse>
   */
  get(resourceGroupName: string, labName: string, policySetName: string, name: string, options?: Models.PoliciesGetOptionalParams): Promise<Models.PoliciesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param policySetName The name of the policy set.
   * @param name The name of the policy.
   * @param callback The callback
   */
  get(resourceGroupName: string, labName: string, policySetName: string, name: string, callback: msRest.ServiceCallback<Models.Policy>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param policySetName The name of the policy set.
   * @param name The name of the policy.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, labName: string, policySetName: string, name: string, options: Models.PoliciesGetOptionalParams, callback: msRest.ServiceCallback<Models.Policy>): void;
  get(resourceGroupName: string, labName: string, policySetName: string, name: string, options?: Models.PoliciesGetOptionalParams | msRest.ServiceCallback<Models.Policy>, callback?: msRest.ServiceCallback<Models.Policy>): Promise<Models.PoliciesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labName,
        policySetName,
        name,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.PoliciesGetResponse>;
  }

  /**
   * Create or replace an existing policy.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param policySetName The name of the policy set.
   * @param name The name of the policy.
   * @param policy A Policy.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoliciesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, labName: string, policySetName: string, name: string, policy: Models.Policy, options?: msRest.RequestOptionsBase): Promise<Models.PoliciesCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param policySetName The name of the policy set.
   * @param name The name of the policy.
   * @param policy A Policy.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, labName: string, policySetName: string, name: string, policy: Models.Policy, callback: msRest.ServiceCallback<Models.Policy>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param policySetName The name of the policy set.
   * @param name The name of the policy.
   * @param policy A Policy.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, labName: string, policySetName: string, name: string, policy: Models.Policy, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Policy>): void;
  createOrUpdate(resourceGroupName: string, labName: string, policySetName: string, name: string, policy: Models.Policy, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Policy>, callback?: msRest.ServiceCallback<Models.Policy>): Promise<Models.PoliciesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labName,
        policySetName,
        name,
        policy,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.PoliciesCreateOrUpdateResponse>;
  }

  /**
   * Delete policy.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param policySetName The name of the policy set.
   * @param name The name of the policy.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, labName: string, policySetName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param policySetName The name of the policy set.
   * @param name The name of the policy.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, labName: string, policySetName: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param policySetName The name of the policy set.
   * @param name The name of the policy.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, labName: string, policySetName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, labName: string, policySetName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labName,
        policySetName,
        name,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Modify properties of policies.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param policySetName The name of the policy set.
   * @param name The name of the policy.
   * @param policy A Policy.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoliciesUpdateResponse>
   */
  update(resourceGroupName: string, labName: string, policySetName: string, name: string, policy: Models.PolicyFragment, options?: msRest.RequestOptionsBase): Promise<Models.PoliciesUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param policySetName The name of the policy set.
   * @param name The name of the policy.
   * @param policy A Policy.
   * @param callback The callback
   */
  update(resourceGroupName: string, labName: string, policySetName: string, name: string, policy: Models.PolicyFragment, callback: msRest.ServiceCallback<Models.Policy>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param policySetName The name of the policy set.
   * @param name The name of the policy.
   * @param policy A Policy.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, labName: string, policySetName: string, name: string, policy: Models.PolicyFragment, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Policy>): void;
  update(resourceGroupName: string, labName: string, policySetName: string, name: string, policy: Models.PolicyFragment, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Policy>, callback?: msRest.ServiceCallback<Models.Policy>): Promise<Models.PoliciesUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labName,
        policySetName,
        name,
        policy,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.PoliciesUpdateResponse>;
  }

  /**
   * List policies in a given policy set.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoliciesListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PoliciesListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PolicyList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyList>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PolicyList>, callback?: msRest.ServiceCallback<Models.PolicyList>): Promise<Models.PoliciesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.PoliciesListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/policysets/{policySetName}/policies",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.policySetName
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.filter,
    Parameters.top,
    Parameters.orderby,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/policysets/{policySetName}/policies/{name}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.policySetName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Policy
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/policysets/{policySetName}/policies/{name}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.policySetName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "policy",
    mapper: {
      ...Mappers.Policy,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Policy
    },
    201: {
      bodyMapper: Mappers.Policy
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/policysets/{policySetName}/policies/{name}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.policySetName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/policysets/{policySetName}/policies/{name}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.policySetName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "policy",
    mapper: {
      ...Mappers.PolicyFragment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Policy
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
