/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PolicySets } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DevTestLabsClient } from "../devTestLabsClient";
import {
  EvaluatePoliciesRequest,
  PolicySetsEvaluatePoliciesOptionalParams,
  PolicySetsEvaluatePoliciesResponse
} from "../models";

/** Class containing PolicySets operations. */
export class PolicySetsImpl implements PolicySets {
  private readonly client: DevTestLabsClient;

  /**
   * Initialize a new instance of the class PolicySets class.
   * @param client Reference to the service client
   */
  constructor(client: DevTestLabsClient) {
    this.client = client;
  }

  /**
   * Evaluates lab policy.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the policy set.
   * @param evaluatePoliciesRequest Request body for evaluating a policy set.
   * @param options The options parameters.
   */
  evaluatePolicies(
    resourceGroupName: string,
    labName: string,
    name: string,
    evaluatePoliciesRequest: EvaluatePoliciesRequest,
    options?: PolicySetsEvaluatePoliciesOptionalParams
  ): Promise<PolicySetsEvaluatePoliciesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, labName, name, evaluatePoliciesRequest, options },
      evaluatePoliciesOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const evaluatePoliciesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/policysets/{name}/evaluatePolicies",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.EvaluatePoliciesResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.evaluatePoliciesRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.labName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
