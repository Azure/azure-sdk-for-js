/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Result of the request to list REST API operations */
export interface ProviderOperationResult {
  /** List of operations supported by the resource provider. */
  value?: OperationMetadata[];
  /**
   * URL to get the next set of operation list results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The REST API operation supported by DevTestLab ResourceProvider. */
export interface OperationMetadata {
  /** Operation name: {provider}/{resource}/{operation} */
  name?: string;
  /** The object that describes the operations */
  display?: OperationMetadataDisplay;
}

/** The object that describes the operations */
export interface OperationMetadataDisplay {
  /** Friendly name of the resource provider */
  provider?: string;
  /** Resource type on which the operation is performed. */
  resource?: string;
  /** Operation type: read, write, delete, listKeys/action, etc. */
  operation?: string;
  /** Friendly name of the operation */
  description?: string;
}

/** Error from a REST request. */
export interface CloudError {
  /** The cloud error that occurred */
  error?: CloudErrorBody;
}

/** Body of an error from a REST request. */
export interface CloudErrorBody {
  /** The error code. */
  code?: string;
  /** The error message. */
  message?: string;
  /** The error target. */
  target?: string;
  /** Inner errors. */
  details?: CloudErrorBody[];
}

/** The response of a list operation. */
export interface LabList {
  /** Results of the list operation. */
  value?: Lab[];
  /** Link for next set of results. */
  nextLink?: string;
}

/** Properties of a lab's announcement banner */
export interface LabAnnouncementProperties {
  /** The plain text title for the lab announcement */
  title?: string;
  /** The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown. */
  markdown?: string;
  /** Is the lab announcement active/enabled at this time? */
  enabled?: EnableStatus;
  /** The time at which the announcement expires (null for never) */
  expirationDate?: Date;
  /** Has this announcement expired? */
  expired?: boolean;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
}

/** Properties of a lab's support banner */
export interface LabSupportProperties {
  /** Is the lab support banner active/enabled at this time? */
  enabled?: EnableStatus;
  /** The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown. */
  markdown?: string;
}

/** An Azure resource. */
export interface Resource {
  /**
   * The identifier of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The location of the resource. */
  location?: string;
  /** The tags of the resource. */
  tags?: { [propertyName: string]: string };
}

/** An Operation Result */
export interface OperationResult {
  /** The operation status. */
  status?: string;
  /** The status code for the operation. */
  statusCode?: HttpStatusCode;
  /** Error details for the operation in case of a failure. */
  error?: OperationError;
}

/** Error details for the operation in case of a failure. */
export interface OperationError {
  /** The error code of the operation error. */
  code?: string;
  /** The error message of the operation error. */
  message?: string;
}

/** The response of a list operation. */
export interface ScheduleList {
  /** Results of the list operation. */
  value?: Schedule[];
  /** Link for next set of results. */
  nextLink?: string;
}

/** Properties of a weekly schedule. */
export interface WeekDetails {
  /** The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.). */
  weekdays?: string[];
  /** The time of the day the schedule will occur. */
  time?: string;
}

/** Properties of a daily schedule. */
export interface DayDetails {
  /** The time of day the schedule will occur. */
  time?: string;
}

/** Properties of an hourly schedule. */
export interface HourDetails {
  /** Minutes of the hour the schedule will run. */
  minute?: number;
}

/** Notification settings for a schedule. */
export interface NotificationSettings {
  /** If notifications are enabled for this schedule (i.e. Enabled, Disabled). */
  status?: EnableStatus;
  /** Time in minutes before event at which notification will be sent. */
  timeInMinutes?: number;
  /** The webhook URL to which the notification will be sent. */
  webhookUrl?: string;
  /** The email recipient to send notifications to (can be a list of semi-colon separated email addresses). */
  emailRecipient?: string;
  /** The locale to use when sending a notification (fallback for unsupported languages is EN). */
  notificationLocale?: string;
}

/** The response of a list operation. */
export interface ArtifactSourceList {
  /** Results of the list operation. */
  value?: ArtifactSource[];
  /** Link for next set of results. */
  nextLink?: string;
}

/** The response of a list operation. */
export interface ArmTemplateList {
  /** Results of the list operation. */
  value?: ArmTemplate[];
  /** Link for next set of results. */
  nextLink?: string;
}

/** A file containing a set of parameter values for an ARM template. */
export interface ParametersValueFileInfo {
  /** File name. */
  fileName?: string;
  /** Contents of the file. */
  parametersValueInfo?: Record<string, unknown>;
}

/** The response of a list operation. */
export interface ArtifactList {
  /** Results of the list operation. */
  value?: Artifact[];
  /** Link for next set of results. */
  nextLink?: string;
}

/** Parameters for generating an ARM template for deploying artifacts. */
export interface GenerateArmTemplateRequest {
  /** The resource name of the virtual machine. */
  virtualMachineName?: string;
  /** The parameters of the ARM template. */
  parameters?: ParameterInfo[];
  /** The location of the virtual machine. */
  location?: string;
  /** Options for uploading the files for the artifact. UploadFilesAndGenerateSasTokens is the default value. */
  fileUploadOptions?: FileUploadOptions;
}

/** Information about an artifact's parameter. */
export interface ParameterInfo {
  /** The name of the artifact parameter. */
  name?: string;
  /** The value of the artifact parameter. */
  value?: string;
}

/** Information about a generated ARM template. */
export interface ArmTemplateInfo {
  /** The template's contents. */
  template?: Record<string, unknown>;
  /** The parameters of the ARM template. */
  parameters?: Record<string, unknown>;
}

/** Represents an update resource */
export interface UpdateResource {
  /** The tags of the resource. */
  tags?: { [propertyName: string]: string };
}

/** Properties of a cost target. */
export interface TargetCostProperties {
  /** Target cost status */
  status?: TargetCostStatus;
  /** Lab target cost */
  target?: number;
  /** Cost thresholds. */
  costThresholds?: CostThresholdProperties[];
  /** Reporting cycle start date. */
  cycleStartDateTime?: Date;
  /** Reporting cycle end date. */
  cycleEndDateTime?: Date;
  /** Reporting cycle type. */
  cycleType?: ReportingCycleType;
}

/** Properties of a cost threshold item. */
export interface CostThresholdProperties {
  /** The ID of the cost threshold item. */
  thresholdId?: string;
  /** The value of the percentage cost threshold. */
  percentageThreshold?: PercentageCostThresholdProperties;
  /** Indicates whether this threshold will be displayed on cost charts. */
  displayOnChart?: CostThresholdStatus;
  /** Indicates whether notifications will be sent when this threshold is exceeded. */
  sendNotificationWhenExceeded?: CostThresholdStatus;
  /** Indicates the datetime when notifications were last sent for this threshold. */
  notificationSent?: string;
}

/** Properties of a percentage cost threshold. */
export interface PercentageCostThresholdProperties {
  /** The cost threshold value. */
  thresholdValue?: number;
}

/** The properties of the cost summary. */
export interface LabCostSummaryProperties {
  /** The cost component of the cost item. */
  estimatedLabCost?: number;
}

/** The properties of a lab cost item. */
export interface LabCostDetailsProperties {
  /** The date of the cost item. */
  date?: Date;
  /** The cost component of the cost item. */
  cost?: number;
  /** The type of the cost. */
  costType?: CostType;
}

/** The properties of a resource cost item. */
export interface LabResourceCostProperties {
  /** The name of the resource. */
  resourcename?: string;
  /** The unique identifier of the resource. */
  resourceUId?: string;
  /** The cost component of the resource cost item. */
  resourceCost?: number;
  /** The logical resource type (ex. virtualmachine, storageaccount) */
  resourceType?: string;
  /** The owner of the resource (ex. janedoe@microsoft.com) */
  resourceOwner?: string;
  /** The category of the resource (ex. Premium_LRS, Standard_DS1) */
  resourcePricingTier?: string;
  /** The status of the resource (ex. Active) */
  resourceStatus?: string;
  /** The ID of the resource */
  resourceId?: string;
  /** The ID of the external resource */
  externalResourceId?: string;
}

/** The response of a list operation. */
export interface CustomImageList {
  /** Results of the list operation. */
  value?: CustomImage[];
  /** Link for next set of results. */
  nextLink?: string;
}

/** Properties for creating a custom image from a virtual machine. */
export interface CustomImagePropertiesFromVm {
  /** The source vm identifier. */
  sourceVmId?: string;
  /** The Windows OS information of the VM. */
  windowsOsInfo?: WindowsOsInfo;
  /** The Linux OS information of the VM. */
  linuxOsInfo?: LinuxOsInfo;
}

/** Information about a Windows OS. */
export interface WindowsOsInfo {
  /** The state of the Windows OS (i.e. NonSysprepped, SysprepRequested, SysprepApplied). */
  windowsOsState?: WindowsOsState;
}

/** Information about a Linux OS. */
export interface LinuxOsInfo {
  /** The state of the Linux OS (i.e. NonDeprovisioned, DeprovisionRequested, DeprovisionApplied). */
  linuxOsState?: LinuxOsState;
}

/** Properties for creating a custom image from a VHD. */
export interface CustomImagePropertiesCustom {
  /** The image name. */
  imageName?: string;
  /** Indicates whether sysprep has been run on the VHD. */
  sysPrep?: boolean;
  /** The OS type of the custom image (i.e. Windows, Linux) */
  osType: CustomImageOsType;
}

/** Storage information about the data disks present in the custom image */
export interface DataDiskStorageTypeInfo {
  /** Disk Lun */
  lun?: string;
  /** Disk Storage Type */
  storageType?: StorageType;
}

/** Properties for plan on a custom image. */
export interface CustomImagePropertiesFromPlan {
  /** The id of the plan, equivalent to name of the plan */
  id?: string;
  /** The publisher for the plan from the marketplace image the custom image is derived from */
  publisher?: string;
  /** The offer for the plan from the marketplace image the custom image is derived from */
  offer?: string;
}

/** The response of a list operation. */
export interface FormulaList {
  /** Results of the list operation. */
  value?: Formula[];
  /** Link for next set of results. */
  nextLink?: string;
}

/** Properties for creating a virtual machine. */
export interface LabVirtualMachineCreationParameter {
  /** The name of the virtual machine or environment */
  name?: string;
  /** The location of the new virtual machine or environment */
  location?: string;
  /** The tags of the resource. */
  tags?: { [propertyName: string]: string };
  /** The number of virtual machine instances to create. */
  bulkCreationParameters?: BulkCreationParameters;
  /** The notes of the virtual machine. */
  notes?: string;
  /** The object identifier of the owner of the virtual machine. */
  ownerObjectId?: string;
  /** The user principal name of the virtual machine owner. */
  ownerUserPrincipalName?: string;
  /** The creation date of the virtual machine. */
  createdDate?: Date;
  /** The custom image identifier of the virtual machine. */
  customImageId?: string;
  /** The size of the virtual machine. */
  size?: string;
  /** The user name of the virtual machine. */
  userName?: string;
  /** The password of the virtual machine administrator. */
  password?: string;
  /** The SSH key of the virtual machine administrator. */
  sshKey?: string;
  /** Indicates whether this virtual machine uses an SSH key for authentication. */
  isAuthenticationWithSshKey?: boolean;
  /** The lab subnet name of the virtual machine. */
  labSubnetName?: string;
  /** The lab virtual network identifier of the virtual machine. */
  labVirtualNetworkId?: string;
  /** Indicates whether the virtual machine is to be created without a public IP address. */
  disallowPublicIpAddress?: boolean;
  /** The artifacts to be installed on the virtual machine. */
  artifacts?: ArtifactInstallProperties[];
  /** The Microsoft Azure Marketplace image reference of the virtual machine. */
  galleryImageReference?: GalleryImageReference;
  /** The id of the plan associated with the virtual machine image */
  planId?: string;
  /** The network interface properties. */
  networkInterface?: NetworkInterfaceProperties;
  /** The expiration date for VM. */
  expirationDate?: Date;
  /** Indicates whether another user can take ownership of the virtual machine */
  allowClaim?: boolean;
  /** Storage type to use for virtual machine (i.e. Standard, Premium). */
  storageType?: string;
  /** The resource ID of the environment that contains this virtual machine, if any. */
  environmentId?: string;
  /** New or existing data disks to attach to the virtual machine after creation */
  dataDiskParameters?: DataDiskProperties[];
  /** Virtual Machine schedules to be created */
  scheduleParameters?: ScheduleCreationParameter[];
}

/** Parameters for creating multiple virtual machines as a single action. */
export interface BulkCreationParameters {
  /** The number of virtual machine instances to create. */
  instanceCount?: number;
}

/** Properties of an artifact. */
export interface ArtifactInstallProperties {
  /** The artifact's identifier. */
  artifactId?: string;
  /** The artifact's title. */
  artifactTitle?: string;
  /** The parameters of the artifact. */
  parameters?: ArtifactParameterProperties[];
  /** The status of the artifact. */
  status?: string;
  /** The status message from the deployment. */
  deploymentStatusMessage?: string;
  /** The status message from the virtual machine extension. */
  vmExtensionStatusMessage?: string;
  /** The time that the artifact starts to install on the virtual machine. */
  installTime?: Date;
}

/** Properties of an artifact parameter. */
export interface ArtifactParameterProperties {
  /** The name of the artifact parameter. */
  name?: string;
  /** The value of the artifact parameter. */
  value?: string;
}

/** The reference information for an Azure Marketplace image. */
export interface GalleryImageReference {
  /** The offer of the gallery image. */
  offer?: string;
  /** The publisher of the gallery image. */
  publisher?: string;
  /** The SKU of the gallery image. */
  sku?: string;
  /** The OS type of the gallery image. */
  osType?: string;
  /** The version of the gallery image. */
  version?: string;
}

/** Properties of a network interface. */
export interface NetworkInterfaceProperties {
  /** The resource ID of the virtual network. */
  virtualNetworkId?: string;
  /** The resource ID of the sub net. */
  subnetId?: string;
  /** The resource ID of the public IP address. */
  publicIpAddressId?: string;
  /** The public IP address. */
  publicIpAddress?: string;
  /** The private IP address. */
  privateIpAddress?: string;
  /** The DNS name. */
  dnsName?: string;
  /** The RdpAuthority property is a server DNS host name or IP address followed by the service port number for RDP (Remote Desktop Protocol). */
  rdpAuthority?: string;
  /** The SshAuthority property is a server DNS host name or IP address followed by the service port number for SSH. */
  sshAuthority?: string;
  /** The configuration for sharing a public IP address across multiple virtual machines. */
  sharedPublicIpAddressConfiguration?: SharedPublicIpAddressConfiguration;
}

/** Properties of a virtual machine that determine how it is connected to a load balancer. */
export interface SharedPublicIpAddressConfiguration {
  /** The incoming NAT rules */
  inboundNatRules?: InboundNatRule[];
}

/** A rule for NAT - exposing a VM's port (backendPort) on the public IP address using a load balancer. */
export interface InboundNatRule {
  /** The transport protocol for the endpoint. */
  transportProtocol?: TransportProtocol;
  /** The external endpoint port of the inbound connection. Possible values range between 1 and 65535, inclusive. If unspecified, a value will be allocated automatically. */
  frontendPort?: number;
  /** The port to which the external traffic will be redirected. */
  backendPort?: number;
}

/** Request body for adding a new or existing data disk to a virtual machine. */
export interface DataDiskProperties {
  /** Specifies options to attach a new disk to the virtual machine. */
  attachNewDataDiskOptions?: AttachNewDataDiskOptions;
  /** Specifies the existing lab disk id to attach to virtual machine. */
  existingLabDiskId?: string;
  /** Caching option for a data disk (i.e. None, ReadOnly, ReadWrite). */
  hostCaching?: HostCachingOptions;
}

/** Properties to attach new disk to the Virtual Machine. */
export interface AttachNewDataDiskOptions {
  /** Size of the disk to be attached in Gibibytes. */
  diskSizeGiB?: number;
  /** The name of the disk to be attached. */
  diskName?: string;
  /** The storage type for the disk (i.e. Standard, Premium). */
  diskType?: StorageType;
}

/** Properties for creating a schedule. */
export interface ScheduleCreationParameter {
  /** The name of the virtual machine or environment */
  name?: string;
  /**
   * The location of the new virtual machine or environment
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly location?: string;
  /** The tags of the resource. */
  tags?: { [propertyName: string]: string };
  /** The status of the schedule (i.e. Enabled, Disabled) */
  status?: EnableStatus;
  /** The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart). */
  taskType?: string;
  /** If the schedule will occur only some days of the week, specify the weekly recurrence. */
  weeklyRecurrence?: WeekDetails;
  /** If the schedule will occur once each day of the week, specify the daily recurrence. */
  dailyRecurrence?: DayDetails;
  /** If the schedule will occur multiple times a day, specify the hourly recurrence. */
  hourlyRecurrence?: HourDetails;
  /** The time zone ID (e.g. Pacific Standard time). */
  timeZoneId?: string;
  /** Notification settings. */
  notificationSettings?: NotificationSettings;
  /** The resource ID to which the schedule belongs */
  targetResourceId?: string;
}

/** Information about a VM from which a formula is to be created. */
export interface FormulaPropertiesFromVm {
  /** The identifier of the VM from which a formula is to be created. */
  labVmId?: string;
}

/** The response of a list operation. */
export interface GalleryImageList {
  /** Results of the list operation. */
  value?: GalleryImage[];
  /** Link for next set of results. */
  nextLink?: string;
}

/** The response of a list operation. */
export interface NotificationChannelList {
  /** Results of the list operation. */
  value?: NotificationChannel[];
  /** Link for next set of results. */
  nextLink?: string;
}

/** An event to be notified for. */
export interface Event {
  /** The event type for which this notification is enabled (i.e. AutoShutdown, Cost) */
  eventName?: NotificationChannelEventType;
}

/** Properties for generating a Notification. */
export interface NotifyParameters {
  /** The type of event (i.e. AutoShutdown, Cost) */
  eventName?: NotificationChannelEventType;
  /** Properties for the notification in json format. */
  jsonPayload?: string;
}

/** Request body for evaluating a policy set. */
export interface EvaluatePoliciesRequest {
  /** Policies to evaluate. */
  policies?: EvaluatePoliciesProperties[];
}

/** Properties for evaluating a policy set. */
export interface EvaluatePoliciesProperties {
  /** The fact name. */
  factName?: string;
  /** The fact data. */
  factData?: string;
  /** The value offset. */
  valueOffset?: string;
  /** The user for which policies will be evaluated */
  userObjectId?: string;
}

/** Response body for evaluating a policy set. */
export interface EvaluatePoliciesResponse {
  /** Results of evaluating a policy set. */
  results?: PolicySetResult[];
}

/** Result of a policy set evaluation. */
export interface PolicySetResult {
  /** A value indicating whether this policy set evaluation has discovered violations. */
  hasError?: boolean;
  /** The list of policy violations. */
  policyViolations?: PolicyViolation[];
}

/** Policy violation. */
export interface PolicyViolation {
  /** The code of the policy violation. */
  code?: string;
  /** The message of the policy violation. */
  message?: string;
}

/** The response of a list operation. */
export interface PolicyList {
  /** Results of the list operation. */
  value?: Policy[];
  /** Link for next set of results. */
  nextLink?: string;
}

/** Properties of a managed identity */
export interface IdentityProperties {
  /** Managed identity. */
  type?: ManagedIdentityType;
  /** The principal id of resource identity. */
  principalId?: string;
  /** The tenant identifier of resource. */
  tenantId?: string;
  /** The client secret URL of the identity. */
  clientSecretUrl?: string;
}

/** The response of a list operation. */
export interface UserList {
  /** Results of the list operation. */
  value?: User[];
  /** Link for next set of results. */
  nextLink?: string;
}

/** Identity attributes of a lab user. */
export interface UserIdentity {
  /** Set to the principal name / UPN of the client JWT making the request. */
  principalName?: string;
  /** Set to the principal Id of the client JWT making the request. Service principal will not have the principal Id. */
  principalId?: string;
  /** Set to the tenant ID of the client JWT making the request. */
  tenantId?: string;
  /** Set to the object Id of the client JWT making the request. Not all users have object Id. For CSP (reseller) scenarios for example, object Id is not available. */
  objectId?: string;
  /** Set to the app Id of the client JWT making the request. */
  appId?: string;
}

/** Properties of a user's secret store. */
export interface UserSecretStore {
  /** The URI of the user's Key vault. */
  keyVaultUri?: string;
  /** The ID of the user's Key vault. */
  keyVaultId?: string;
}

/** The response of a list operation. */
export interface DiskList {
  /** Results of the list operation. */
  value?: Disk[];
  /** Link for next set of results. */
  nextLink?: string;
}

/** Properties of the disk to attach. */
export interface AttachDiskProperties {
  /** The resource ID of the Lab virtual machine to which the disk is attached. */
  leasedByLabVmId?: string;
}

/** Properties of the disk to detach. */
export interface DetachDiskProperties {
  /** The resource ID of the Lab VM to which the disk is attached. */
  leasedByLabVmId?: string;
}

/** The response of a list operation. */
export interface DtlEnvironmentList {
  /** Results of the list operation. */
  value?: DtlEnvironment[];
  /** Link for next set of results. */
  nextLink?: string;
}

/** Properties of an environment deployment. */
export interface EnvironmentDeploymentProperties {
  /** The Azure Resource Manager template's identifier. */
  armTemplateId?: string;
  /** The parameters of the Azure Resource Manager template. */
  parameters?: ArmTemplateParameterProperties[];
}

/** Properties of an Azure Resource Manager template parameter. */
export interface ArmTemplateParameterProperties {
  /** The name of the template parameter. */
  name?: string;
  /** The value of the template parameter. */
  value?: string;
}

/** The response of a list operation. */
export interface SecretList {
  /** Results of the list operation. */
  value?: Secret[];
  /** Link for next set of results. */
  nextLink?: string;
}

/** The response of a list operation. */
export interface ServiceFabricList {
  /** Results of the list operation. */
  value?: ServiceFabric[];
  /** Link for next set of results. */
  nextLink?: string;
}

/** The response of a list operation. */
export interface LabVirtualMachineList {
  /** Results of the list operation. */
  value?: LabVirtualMachine[];
  /** Link for next set of results. */
  nextLink?: string;
}

/** Properties of an artifact deployment. */
export interface ArtifactDeploymentStatusProperties {
  /** The deployment status of the artifact. */
  deploymentStatus?: string;
  /** The total count of the artifacts that were successfully applied. */
  artifactsApplied?: number;
  /** The total count of the artifacts that were tentatively applied. */
  totalArtifacts?: number;
}

/** Properties of a virtual machine returned by the Microsoft.Compute API. */
export interface ComputeVmProperties {
  /** Gets the statuses of the virtual machine. */
  statuses?: ComputeVmInstanceViewStatus[];
  /** Gets the OS type of the virtual machine. */
  osType?: string;
  /** Gets the size of the virtual machine. */
  vmSize?: string;
  /** Gets the network interface ID of the virtual machine. */
  networkInterfaceId?: string;
  /** Gets OS disk blob uri for the virtual machine. */
  osDiskId?: string;
  /** Gets data disks blob uri for the virtual machine. */
  dataDiskIds?: string[];
  /** Gets all data disks attached to the virtual machine. */
  dataDisks?: ComputeDataDisk[];
}

/** Status information about a virtual machine. */
export interface ComputeVmInstanceViewStatus {
  /** Gets the status Code. */
  code?: string;
  /** Gets the short localizable label for the status. */
  displayStatus?: string;
  /** Gets the message associated with the status. */
  message?: string;
}

/** A data disks attached to a virtual machine. */
export interface ComputeDataDisk {
  /** Gets data disk name. */
  name?: string;
  /** When backed by a blob, the URI of underlying blob. */
  diskUri?: string;
  /** When backed by managed disk, this is the ID of the compute disk resource. */
  managedDiskId?: string;
  /** Gets data disk size in GiB. */
  diskSizeGiB?: number;
}

/** Request body for applying artifacts to a virtual machine. */
export interface ApplyArtifactsRequest {
  /** The list of artifacts to apply. */
  artifacts?: ArtifactInstallProperties[];
}

/** Request body for detaching data disk from a virtual machine. */
export interface DetachDataDiskProperties {
  /** Specifies the disk resource ID to detach from virtual machine. */
  existingLabDiskId?: string;
}

/** Represents a .rdp file */
export interface RdpConnection {
  /** The contents of the .rdp file */
  contents?: string;
}

/** Request body for resizing a virtual machine. */
export interface ResizeLabVirtualMachineProperties {
  /** Specifies the size of the virtual machine. */
  size?: string;
}

/** The response of a list operation. */
export interface VirtualNetworkList {
  /** Results of the list operation. */
  value?: VirtualNetwork[];
  /** Link for next set of results. */
  nextLink?: string;
}

/** Subnet information. */
export interface Subnet {
  /** The resource ID of the subnet. */
  resourceId?: string;
  /** The name of the subnet as seen in the lab. */
  labSubnetName?: string;
  /** The permission policy of the subnet for allowing public IP addresses (i.e. Allow, Deny)). */
  allowPublicIp?: UsagePermissionType;
}

/** Subnet information as returned by the Microsoft.Network API. */
export interface ExternalSubnet {
  /** Gets or sets the identifier. */
  id?: string;
  /** Gets or sets the name. */
  name?: string;
}

/** Property overrides on a subnet of a virtual network. */
export interface SubnetOverride {
  /** The resource ID of the subnet. */
  resourceId?: string;
  /** The name given to the subnet within the lab. */
  labSubnetName?: string;
  /** Indicates whether this subnet can be used during virtual machine creation (i.e. Allow, Deny). */
  useInVmCreationPermission?: UsagePermissionType;
  /** Indicates whether public IP addresses can be assigned to virtual machines on this subnet (i.e. Allow, Deny). */
  usePublicIpAddressPermission?: UsagePermissionType;
  /** Properties that virtual machines on this subnet will share. */
  sharedPublicIpAddressConfiguration?: SubnetSharedPublicIpAddressConfiguration;
  /** The virtual network pool associated with this subnet. */
  virtualNetworkPoolName?: string;
}

/** Configuration for public IP address sharing. */
export interface SubnetSharedPublicIpAddressConfiguration {
  /** Backend ports that virtual machines on this subnet are allowed to expose */
  allowedPorts?: Port[];
}

/** Properties of a network port. */
export interface Port {
  /** Protocol type of the port. */
  transportProtocol?: TransportProtocol;
  /** Backend port of the target virtual machine. */
  backendPort?: number;
}

/** The parameters of the export operation. */
export interface ExportResourceUsageParameters {
  /** The blob storage absolute sas uri with write permission to the container which the usage data needs to be uploaded to. */
  blobStorageAbsoluteSasUri?: string;
  /** The start time of the usage. If not provided, usage will be reported since the beginning of data collection. */
  usageStartDate?: Date;
}

/** Properties for generating an upload URI. */
export interface GenerateUploadUriParameter {
  /** The blob name of the upload URI. */
  blobName?: string;
}

/** Response body for generating an upload URI. */
export interface GenerateUploadUriResponse {
  /** The upload URI for the VHD. */
  uploadUri?: string;
}

/** This represents the payload required to import a virtual machine from a different lab into the current one */
export interface ImportLabVirtualMachineRequest {
  /** The full resource ID of the virtual machine to be imported. */
  sourceVirtualMachineResourceId?: string;
  /** The name of the virtual machine in the destination lab */
  destinationVirtualMachineName?: string;
}

/** The response of a list operation. */
export interface LabVhdList {
  /** Results of the list operation. */
  value?: LabVhd[];
  /** Link for next set of results. */
  nextLink?: string;
}

/** Properties of a VHD in the lab. */
export interface LabVhd {
  /** The URI to the VHD. */
  id?: string;
}

/** Properties for retargeting a virtual machine schedule. */
export interface RetargetScheduleProperties {
  /** The resource Id of the virtual machine on which the schedule operates */
  currentResourceId?: string;
  /** The resource Id of the virtual machine that the schedule should be retargeted to */
  targetResourceId?: string;
}

/** The response of a list operation. */
export interface ServiceRunnerList {
  /** Results of the list operation. */
  value?: ServiceRunner[];
  /** Link for next set of results. */
  nextLink?: string;
}

/** The contents of a shutdown notification. Webhooks can use this type to deserialize the request body when they get notified of an imminent shutdown. */
export interface ShutdownNotificationContent {
  /** The URL to skip auto-shutdown. */
  skipUrl?: string;
  /** The URL to delay shutdown by 60 minutes. */
  delayUrl60?: string;
  /** The URL to delay shutdown by 2 hours. */
  delayUrl120?: string;
  /** The virtual machine to be shut down. */
  vmName?: string;
  /** The GUID for the virtual machine to be shut down. */
  guid?: string;
  /** The owner of the virtual machine. */
  owner?: string;
  /** The URL of the virtual machine. */
  vmUrl?: string;
  /** Minutes remaining until shutdown */
  minutesUntilShutdown?: string;
  /** The event for which a notification will be sent. */
  eventType?: string;
  /** The text for the notification. */
  text?: string;
  /** The subscription ID for the schedule. */
  subscriptionId?: string;
  /** The resource group name for the schedule. */
  resourceGroupName?: string;
  /** The lab for the schedule. */
  labName?: string;
}

/** A lab. */
export type Lab = Resource & {
  /**
   * The lab's default storage account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly defaultStorageAccount?: string;
  /**
   * The lab's default premium storage account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly defaultPremiumStorageAccount?: string;
  /**
   * The lab's artifact storage account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly artifactsStorageAccount?: string;
  /**
   * The lab's premium data disk storage account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly premiumDataDiskStorageAccount?: string;
  /**
   * The lab's Key vault.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vaultName?: string;
  /** Type of storage used by the lab. It can be either Premium or Standard. Default is Premium. */
  labStorageType?: StorageType;
  /** The ordered list of artifact resource IDs that should be applied on all Linux VM creations by default, prior to the artifacts specified by the user. */
  mandatoryArtifactsResourceIdsLinux?: string[];
  /** The ordered list of artifact resource IDs that should be applied on all Windows VM creations by default, prior to the artifacts specified by the user. */
  mandatoryArtifactsResourceIdsWindows?: string[];
  /**
   * The creation date of the lab.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDate?: Date;
  /**
   * The setting to enable usage of premium data disks.
   * When its value is 'Enabled', creation of standard or premium data disks is allowed.
   * When its value is 'Disabled', only creation of standard data disks is allowed.
   */
  premiumDataDisks?: PremiumDataDisk;
  /** The access rights to be granted to the user when provisioning an environment */
  environmentPermission?: EnvironmentPermission;
  /** The properties of any lab announcement associated with this lab */
  announcement?: LabAnnouncementProperties;
  /** The properties of any lab support message associated with this lab */
  support?: LabSupportProperties;
  /**
   * The resource group in which all new lab virtual machines will be created. To let DevTest Labs manage resource group creation, set this value to null.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vmCreationResourceGroup?: string;
  /**
   * The public IP address for the lab's load balancer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly publicIpId?: string;
  /**
   * The load balancer used to for lab VMs that use shared IP address.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly loadBalancerId?: string;
  /**
   * The Network Security Group attached to the lab VMs Network interfaces to restrict open ports.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkSecurityGroupId?: string;
  /** Extended properties of the lab used for experimental features */
  extendedProperties?: { [propertyName: string]: string };
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
};

/** A schedule. */
export type Schedule = Resource & {
  /** The status of the schedule (i.e. Enabled, Disabled) */
  status?: EnableStatus;
  /** The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart). */
  taskType?: string;
  /** If the schedule will occur only some days of the week, specify the weekly recurrence. */
  weeklyRecurrence?: WeekDetails;
  /** If the schedule will occur once each day of the week, specify the daily recurrence. */
  dailyRecurrence?: DayDetails;
  /** If the schedule will occur multiple times a day, specify the hourly recurrence. */
  hourlyRecurrence?: HourDetails;
  /** The time zone ID (e.g. Pacific Standard time). */
  timeZoneId?: string;
  /** Notification settings. */
  notificationSettings?: NotificationSettings;
  /**
   * The creation date of the schedule.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDate?: Date;
  /** The resource ID to which the schedule belongs */
  targetResourceId?: string;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
};

/** Properties of an artifact source. */
export type ArtifactSource = Resource & {
  /** The artifact source's display name. */
  displayName?: string;
  /** The artifact source's URI. */
  uri?: string;
  /** The artifact source's type. */
  sourceType?: SourceControlType;
  /** The folder containing artifacts. */
  folderPath?: string;
  /** The folder containing Azure Resource Manager templates. */
  armTemplateFolderPath?: string;
  /** The artifact source's branch reference. */
  branchRef?: string;
  /** The security token to authenticate to the artifact source. */
  securityToken?: string;
  /** Indicates if the artifact source is enabled (values: Enabled, Disabled). */
  status?: EnableStatus;
  /**
   * The artifact source's creation date.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDate?: Date;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
};

/** An Azure Resource Manager template. */
export type ArmTemplate = Resource & {
  /**
   * The display name of the ARM template.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly displayName?: string;
  /**
   * The description of the ARM template.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
  /**
   * The publisher of the ARM template.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly publisher?: string;
  /**
   * The URI to the icon of the ARM template.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly icon?: string;
  /**
   * The contents of the ARM template.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly contents?: Record<string, unknown>;
  /**
   * The creation date of the armTemplate.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDate?: Date;
  /**
   * File name and parameter values information from all azuredeploy.*.parameters.json for the ARM template.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly parametersValueFilesInfo?: ParametersValueFileInfo[];
  /**
   * Whether or not ARM template is enabled for use by lab user.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly enabled?: boolean;
};

/** An artifact. */
export type Artifact = Resource & {
  /**
   * The artifact's title.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly title?: string;
  /**
   * The artifact's description.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
  /**
   * The artifact's publisher.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly publisher?: string;
  /**
   * The file path to the artifact.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly filePath?: string;
  /**
   * The URI to the artifact icon.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly icon?: string;
  /**
   * The artifact's target OS.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetOsType?: string;
  /**
   * The artifact's parameters.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly parameters?: Record<string, unknown>;
  /**
   * The artifact's creation date.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDate?: Date;
};

/** A cost item. */
export type LabCost = Resource & {
  /** The target cost properties */
  targetCost?: TargetCostProperties;
  /**
   * The lab cost summary component of the cost data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly labCostSummary?: LabCostSummaryProperties;
  /**
   * The lab cost details component of the cost data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly labCostDetails?: LabCostDetailsProperties[];
  /**
   * The resource cost component of the cost data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceCosts?: LabResourceCostProperties[];
  /** The currency code of the cost. */
  currencyCode?: string;
  /** The start time of the cost data. */
  startDateTime?: Date;
  /** The end time of the cost data. */
  endDateTime?: Date;
  /** The creation date of the cost. */
  createdDate?: Date;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
};

/** A custom image. */
export type CustomImage = Resource & {
  /** The virtual machine from which the image is to be created. */
  vm?: CustomImagePropertiesFromVm;
  /** The VHD from which the image is to be created. */
  vhd?: CustomImagePropertiesCustom;
  /** The description of the custom image. */
  description?: string;
  /** The author of the custom image. */
  author?: string;
  /**
   * The creation date of the custom image.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly creationDate?: Date;
  /** The Managed Image Id backing the custom image. */
  managedImageId?: string;
  /** The Managed Snapshot Id backing the custom image. */
  managedSnapshotId?: string;
  /** Storage information about the data disks present in the custom image */
  dataDiskStorageInfo?: DataDiskStorageTypeInfo[];
  /** Storage information about the plan related to this custom image */
  customImagePlan?: CustomImagePropertiesFromPlan;
  /** Whether or not the custom images underlying offer/plan has been enabled for programmatic deployment */
  isPlanAuthorized?: boolean;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
};

/** A formula for creating a VM, specifying an image base and other parameters */
export type Formula = Resource & {
  /** The description of the formula. */
  description?: string;
  /**
   * The author of the formula.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly author?: string;
  /** The OS type of the formula. */
  osType?: string;
  /**
   * The creation date of the formula.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly creationDate?: Date;
  /** The content of the formula. */
  formulaContent?: LabVirtualMachineCreationParameter;
  /** Information about a VM from which a formula is to be created. */
  vm?: FormulaPropertiesFromVm;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
};

/** A gallery image. */
export type GalleryImage = Resource & {
  /** The author of the gallery image. */
  author?: string;
  /**
   * The creation date of the gallery image.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDate?: Date;
  /** The description of the gallery image. */
  description?: string;
  /** The image reference of the gallery image. */
  imageReference?: GalleryImageReference;
  /** The icon of the gallery image. */
  icon?: string;
  /** Indicates whether this gallery image is enabled. */
  enabled?: boolean;
  /** The third party plan that applies to this image */
  planId?: string;
  /** Indicates if the plan has been authorized for programmatic deployment. */
  isPlanAuthorized?: boolean;
};

/** A notification. */
export type NotificationChannel = Resource & {
  /** The webhook URL to send notifications to. */
  webHookUrl?: string;
  /** The email recipient to send notifications to (can be a list of semi-colon separated email addresses). */
  emailRecipient?: string;
  /** The locale to use when sending a notification (fallback for unsupported languages is EN). */
  notificationLocale?: string;
  /** Description of notification. */
  description?: string;
  /** The list of event for which this notification is enabled. */
  events?: Event[];
  /**
   * The creation date of the notification channel.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDate?: Date;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
};

/** A Policy. */
export type Policy = Resource & {
  /** The description of the policy. */
  description?: string;
  /** The status of the policy. */
  status?: PolicyStatus;
  /** The fact name of the policy (e.g. LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc. */
  factName?: PolicyFactName;
  /** The fact data of the policy. */
  factData?: string;
  /** The threshold of the policy (i.e. a number for MaxValuePolicy, and a JSON array of values for AllowedValuesPolicy). */
  threshold?: string;
  /** The evaluator type of the policy (i.e. AllowedValuesPolicy, MaxValuePolicy). */
  evaluatorType?: PolicyEvaluatorType;
  /**
   * The creation date of the policy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDate?: Date;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
};

/** A container for a managed identity to execute DevTest lab services. */
export type ServiceRunner = Resource & {
  /** The identity of the resource. */
  identity?: IdentityProperties;
};

/** Profile of a lab user. */
export type User = Resource & {
  /** The identity of the user. */
  identity?: UserIdentity;
  /** The secret store of the user. */
  secretStore?: UserSecretStore;
  /**
   * The creation date of the user profile.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDate?: Date;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
};

/** A Disk. */
export type Disk = Resource & {
  /** The storage type for the disk (i.e. Standard, Premium). */
  diskType?: StorageType;
  /** The size of the disk in Gibibytes. */
  diskSizeGiB?: number;
  /** The resource ID of the VM to which this disk is leased. */
  leasedByLabVmId?: string;
  /** When backed by a blob, the name of the VHD blob without extension. */
  diskBlobName?: string;
  /** When backed by a blob, the URI of underlying blob. */
  diskUri?: string;
  /** When backed by a blob, the storage account where the blob is. */
  storageAccountId?: string;
  /**
   * The creation date of the disk.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDate?: Date;
  /** The host caching policy of the disk (i.e. None, ReadOnly, ReadWrite). */
  hostCaching?: string;
  /** When backed by managed disk, this is the ID of the compute disk resource. */
  managedDiskId?: string;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
};

/** An environment, which is essentially an ARM template deployment. */
export type DtlEnvironment = Resource & {
  /** The deployment properties of the environment. */
  deploymentProperties?: EnvironmentDeploymentProperties;
  /** The display name of the Azure Resource Manager template that produced the environment. */
  armTemplateDisplayName?: string;
  /**
   * The identifier of the resource group containing the environment's resources.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceGroupId?: string;
  /**
   * The creator of the environment.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdByUser?: string;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
};

/** A secret. */
export type Secret = Resource & {
  /** The value of the secret for secret creation. */
  value?: string;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
};

/** Schedules applicable to a virtual machine. The schedules may have been defined on a VM or on lab level. */
export type ApplicableSchedule = Resource & {
  /** The auto-shutdown schedule, if one has been set at the lab or lab resource level. */
  labVmsShutdown?: Schedule;
  /** The auto-startup schedule, if one has been set at the lab or lab resource level. */
  labVmsStartup?: Schedule;
};

/** A Service Fabric. */
export type ServiceFabric = Resource & {
  /** The backing service fabric resource's id */
  externalServiceFabricId?: string;
  /** The resource id of the environment under which the service fabric resource is present */
  environmentId?: string;
  /**
   * The applicable schedule for the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly applicableSchedule?: ApplicableSchedule;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
};

/** A virtual machine. */
export type LabVirtualMachine = Resource & {
  /** The notes of the virtual machine. */
  notes?: string;
  /** The object identifier of the owner of the virtual machine. */
  ownerObjectId?: string;
  /** The user principal name of the virtual machine owner. */
  ownerUserPrincipalName?: string;
  /**
   * The object identifier of the creator of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdByUserId?: string;
  /**
   * The email address of creator of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdByUser?: string;
  /** The creation date of the virtual machine. */
  createdDate?: Date;
  /**
   * The resource identifier (Microsoft.Compute) of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly computeId?: string;
  /** The custom image identifier of the virtual machine. */
  customImageId?: string;
  /**
   * The OS type of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osType?: string;
  /** The size of the virtual machine. */
  size?: string;
  /** The user name of the virtual machine. */
  userName?: string;
  /** The password of the virtual machine administrator. */
  password?: string;
  /** The SSH key of the virtual machine administrator. */
  sshKey?: string;
  /** Indicates whether this virtual machine uses an SSH key for authentication. */
  isAuthenticationWithSshKey?: boolean;
  /**
   * The fully-qualified domain name of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fqdn?: string;
  /** The lab subnet name of the virtual machine. */
  labSubnetName?: string;
  /** The lab virtual network identifier of the virtual machine. */
  labVirtualNetworkId?: string;
  /** Indicates whether the virtual machine is to be created without a public IP address. */
  disallowPublicIpAddress?: boolean;
  /** The artifacts to be installed on the virtual machine. */
  artifacts?: ArtifactInstallProperties[];
  /**
   * The artifact deployment status for the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly artifactDeploymentStatus?: ArtifactDeploymentStatusProperties;
  /** The Microsoft Azure Marketplace image reference of the virtual machine. */
  galleryImageReference?: GalleryImageReference;
  /** The id of the plan associated with the virtual machine image */
  planId?: string;
  /**
   * The compute virtual machine properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly computeVm?: ComputeVmProperties;
  /** The network interface properties. */
  networkInterface?: NetworkInterfaceProperties;
  /**
   * The applicable schedule for the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly applicableSchedule?: ApplicableSchedule;
  /** The expiration date for VM. */
  expirationDate?: Date;
  /** Indicates whether another user can take ownership of the virtual machine */
  allowClaim?: boolean;
  /** Storage type to use for virtual machine (i.e. Standard, Premium). */
  storageType?: string;
  /**
   * Tells source of creation of lab virtual machine. Output property only.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly virtualMachineCreationSource?: VirtualMachineCreationSource;
  /** The resource ID of the environment that contains this virtual machine, if any. */
  environmentId?: string;
  /** New or existing data disks to attach to the virtual machine after creation */
  dataDiskParameters?: DataDiskProperties[];
  /** Virtual Machine schedules to be created */
  scheduleParameters?: ScheduleCreationParameter[];
  /**
   * Last known compute power state captured in DTL
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastKnownPowerState?: string;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
};

/** A virtual network. */
export type VirtualNetwork = Resource & {
  /** The allowed subnets of the virtual network. */
  allowedSubnets?: Subnet[];
  /** The description of the virtual network. */
  description?: string;
  /** The Microsoft.Network resource identifier of the virtual network. */
  externalProviderResourceId?: string;
  /**
   * The external subnet properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly externalSubnets?: ExternalSubnet[];
  /** The subnet overrides of the virtual network. */
  subnetOverrides?: SubnetOverride[];
  /**
   * The creation date of the virtual network.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDate?: Date;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
};

/** Properties of an artifact source. */
export type ArtifactSourceFragment = UpdateResource & {};

/** A custom image. */
export type CustomImageFragment = UpdateResource & {};

/** A formula for creating a VM, specifying an image base and other parameters */
export type FormulaFragment = UpdateResource & {};

/** A notification. */
export type NotificationChannelFragment = UpdateResource & {};

/** A Policy. */
export type PolicyFragment = UpdateResource & {};

/** A schedule. */
export type ScheduleFragment = UpdateResource & {};

/** Profile of a lab user. */
export type UserFragment = UpdateResource & {};

/** A Disk. */
export type DiskFragment = UpdateResource & {};

/** An environment, which is essentially an ARM template deployment. */
export type DtlEnvironmentFragment = UpdateResource & {};

/** A secret. */
export type SecretFragment = UpdateResource & {};

/** A Service Fabric. */
export type ServiceFabricFragment = UpdateResource & {};

/** A virtual machine. */
export type LabVirtualMachineFragment = UpdateResource & {};

/** A virtual network. */
export type VirtualNetworkFragment = UpdateResource & {};

/** A lab. */
export type LabFragment = UpdateResource & {};

/** Schedules applicable to a virtual machine. The schedules may have been defined on a VM or on lab level. */
export type ApplicableScheduleFragment = UpdateResource & {};

/** Known values of {@link StorageType} that the service accepts. */
export enum KnownStorageType {
  Standard = "Standard",
  Premium = "Premium",
  StandardSSD = "StandardSSD"
}

/**
 * Defines values for StorageType. \
 * {@link KnownStorageType} can be used interchangeably with StorageType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard** \
 * **Premium** \
 * **StandardSSD**
 */
export type StorageType = string;

/** Known values of {@link PremiumDataDisk} that the service accepts. */
export enum KnownPremiumDataDisk {
  Disabled = "Disabled",
  Enabled = "Enabled"
}

/**
 * Defines values for PremiumDataDisk. \
 * {@link KnownPremiumDataDisk} can be used interchangeably with PremiumDataDisk,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled**
 */
export type PremiumDataDisk = string;

/** Known values of {@link EnvironmentPermission} that the service accepts. */
export enum KnownEnvironmentPermission {
  Reader = "Reader",
  Contributor = "Contributor"
}

/**
 * Defines values for EnvironmentPermission. \
 * {@link KnownEnvironmentPermission} can be used interchangeably with EnvironmentPermission,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Reader** \
 * **Contributor**
 */
export type EnvironmentPermission = string;

/** Known values of {@link EnableStatus} that the service accepts. */
export enum KnownEnableStatus {
  Enabled = "Enabled",
  Disabled = "Disabled"
}

/**
 * Defines values for EnableStatus. \
 * {@link KnownEnableStatus} can be used interchangeably with EnableStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type EnableStatus = string;

/** Known values of {@link HttpStatusCode} that the service accepts. */
export enum KnownHttpStatusCode {
  Continue = "Continue",
  SwitchingProtocols = "SwitchingProtocols",
  OK = "OK",
  Created = "Created",
  Accepted = "Accepted",
  NonAuthoritativeInformation = "NonAuthoritativeInformation",
  NoContent = "NoContent",
  ResetContent = "ResetContent",
  PartialContent = "PartialContent",
  MultipleChoices = "MultipleChoices",
  Ambiguous = "Ambiguous",
  MovedPermanently = "MovedPermanently",
  Moved = "Moved",
  Found = "Found",
  Redirect = "Redirect",
  SeeOther = "SeeOther",
  RedirectMethod = "RedirectMethod",
  NotModified = "NotModified",
  UseProxy = "UseProxy",
  Unused = "Unused",
  TemporaryRedirect = "TemporaryRedirect",
  RedirectKeepVerb = "RedirectKeepVerb",
  BadRequest = "BadRequest",
  Unauthorized = "Unauthorized",
  PaymentRequired = "PaymentRequired",
  Forbidden = "Forbidden",
  NotFound = "NotFound",
  MethodNotAllowed = "MethodNotAllowed",
  NotAcceptable = "NotAcceptable",
  ProxyAuthenticationRequired = "ProxyAuthenticationRequired",
  RequestTimeout = "RequestTimeout",
  Conflict = "Conflict",
  Gone = "Gone",
  LengthRequired = "LengthRequired",
  PreconditionFailed = "PreconditionFailed",
  RequestEntityTooLarge = "RequestEntityTooLarge",
  RequestUriTooLong = "RequestUriTooLong",
  UnsupportedMediaType = "UnsupportedMediaType",
  RequestedRangeNotSatisfiable = "RequestedRangeNotSatisfiable",
  ExpectationFailed = "ExpectationFailed",
  UpgradeRequired = "UpgradeRequired",
  InternalServerError = "InternalServerError",
  NotImplemented = "NotImplemented",
  BadGateway = "BadGateway",
  ServiceUnavailable = "ServiceUnavailable",
  GatewayTimeout = "GatewayTimeout",
  HttpVersionNotSupported = "HttpVersionNotSupported"
}

/**
 * Defines values for HttpStatusCode. \
 * {@link KnownHttpStatusCode} can be used interchangeably with HttpStatusCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Continue** \
 * **SwitchingProtocols** \
 * **OK** \
 * **Created** \
 * **Accepted** \
 * **NonAuthoritativeInformation** \
 * **NoContent** \
 * **ResetContent** \
 * **PartialContent** \
 * **MultipleChoices** \
 * **Ambiguous** \
 * **MovedPermanently** \
 * **Moved** \
 * **Found** \
 * **Redirect** \
 * **SeeOther** \
 * **RedirectMethod** \
 * **NotModified** \
 * **UseProxy** \
 * **Unused** \
 * **TemporaryRedirect** \
 * **RedirectKeepVerb** \
 * **BadRequest** \
 * **Unauthorized** \
 * **PaymentRequired** \
 * **Forbidden** \
 * **NotFound** \
 * **MethodNotAllowed** \
 * **NotAcceptable** \
 * **ProxyAuthenticationRequired** \
 * **RequestTimeout** \
 * **Conflict** \
 * **Gone** \
 * **LengthRequired** \
 * **PreconditionFailed** \
 * **RequestEntityTooLarge** \
 * **RequestUriTooLong** \
 * **UnsupportedMediaType** \
 * **RequestedRangeNotSatisfiable** \
 * **ExpectationFailed** \
 * **UpgradeRequired** \
 * **InternalServerError** \
 * **NotImplemented** \
 * **BadGateway** \
 * **ServiceUnavailable** \
 * **GatewayTimeout** \
 * **HttpVersionNotSupported**
 */
export type HttpStatusCode = string;

/** Known values of {@link SourceControlType} that the service accepts. */
export enum KnownSourceControlType {
  VsoGit = "VsoGit",
  GitHub = "GitHub",
  StorageAccount = "StorageAccount"
}

/**
 * Defines values for SourceControlType. \
 * {@link KnownSourceControlType} can be used interchangeably with SourceControlType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **VsoGit** \
 * **GitHub** \
 * **StorageAccount**
 */
export type SourceControlType = string;

/** Known values of {@link FileUploadOptions} that the service accepts. */
export enum KnownFileUploadOptions {
  UploadFilesAndGenerateSasTokens = "UploadFilesAndGenerateSasTokens",
  None = "None"
}

/**
 * Defines values for FileUploadOptions. \
 * {@link KnownFileUploadOptions} can be used interchangeably with FileUploadOptions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **UploadFilesAndGenerateSasTokens** \
 * **None**
 */
export type FileUploadOptions = string;

/** Known values of {@link TargetCostStatus} that the service accepts. */
export enum KnownTargetCostStatus {
  Enabled = "Enabled",
  Disabled = "Disabled"
}

/**
 * Defines values for TargetCostStatus. \
 * {@link KnownTargetCostStatus} can be used interchangeably with TargetCostStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type TargetCostStatus = string;

/** Known values of {@link CostThresholdStatus} that the service accepts. */
export enum KnownCostThresholdStatus {
  Enabled = "Enabled",
  Disabled = "Disabled"
}

/**
 * Defines values for CostThresholdStatus. \
 * {@link KnownCostThresholdStatus} can be used interchangeably with CostThresholdStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type CostThresholdStatus = string;

/** Known values of {@link ReportingCycleType} that the service accepts. */
export enum KnownReportingCycleType {
  CalendarMonth = "CalendarMonth",
  Custom = "Custom"
}

/**
 * Defines values for ReportingCycleType. \
 * {@link KnownReportingCycleType} can be used interchangeably with ReportingCycleType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CalendarMonth** \
 * **Custom**
 */
export type ReportingCycleType = string;

/** Known values of {@link CostType} that the service accepts. */
export enum KnownCostType {
  Unavailable = "Unavailable",
  Reported = "Reported",
  Projected = "Projected"
}

/**
 * Defines values for CostType. \
 * {@link KnownCostType} can be used interchangeably with CostType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unavailable** \
 * **Reported** \
 * **Projected**
 */
export type CostType = string;

/** Known values of {@link WindowsOsState} that the service accepts. */
export enum KnownWindowsOsState {
  NonSysprepped = "NonSysprepped",
  SysprepRequested = "SysprepRequested",
  SysprepApplied = "SysprepApplied"
}

/**
 * Defines values for WindowsOsState. \
 * {@link KnownWindowsOsState} can be used interchangeably with WindowsOsState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NonSysprepped** \
 * **SysprepRequested** \
 * **SysprepApplied**
 */
export type WindowsOsState = string;

/** Known values of {@link LinuxOsState} that the service accepts. */
export enum KnownLinuxOsState {
  NonDeprovisioned = "NonDeprovisioned",
  DeprovisionRequested = "DeprovisionRequested",
  DeprovisionApplied = "DeprovisionApplied"
}

/**
 * Defines values for LinuxOsState. \
 * {@link KnownLinuxOsState} can be used interchangeably with LinuxOsState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NonDeprovisioned** \
 * **DeprovisionRequested** \
 * **DeprovisionApplied**
 */
export type LinuxOsState = string;

/** Known values of {@link CustomImageOsType} that the service accepts. */
export enum KnownCustomImageOsType {
  Windows = "Windows",
  Linux = "Linux",
  None = "None"
}

/**
 * Defines values for CustomImageOsType. \
 * {@link KnownCustomImageOsType} can be used interchangeably with CustomImageOsType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Windows** \
 * **Linux** \
 * **None**
 */
export type CustomImageOsType = string;

/** Known values of {@link TransportProtocol} that the service accepts. */
export enum KnownTransportProtocol {
  Tcp = "Tcp",
  Udp = "Udp"
}

/**
 * Defines values for TransportProtocol. \
 * {@link KnownTransportProtocol} can be used interchangeably with TransportProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Tcp** \
 * **Udp**
 */
export type TransportProtocol = string;

/** Known values of {@link HostCachingOptions} that the service accepts. */
export enum KnownHostCachingOptions {
  None = "None",
  ReadOnly = "ReadOnly",
  ReadWrite = "ReadWrite"
}

/**
 * Defines values for HostCachingOptions. \
 * {@link KnownHostCachingOptions} can be used interchangeably with HostCachingOptions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **ReadOnly** \
 * **ReadWrite**
 */
export type HostCachingOptions = string;

/** Known values of {@link NotificationChannelEventType} that the service accepts. */
export enum KnownNotificationChannelEventType {
  AutoShutdown = "AutoShutdown",
  Cost = "Cost"
}

/**
 * Defines values for NotificationChannelEventType. \
 * {@link KnownNotificationChannelEventType} can be used interchangeably with NotificationChannelEventType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AutoShutdown** \
 * **Cost**
 */
export type NotificationChannelEventType = string;

/** Known values of {@link PolicyStatus} that the service accepts. */
export enum KnownPolicyStatus {
  Enabled = "Enabled",
  Disabled = "Disabled"
}

/**
 * Defines values for PolicyStatus. \
 * {@link KnownPolicyStatus} can be used interchangeably with PolicyStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type PolicyStatus = string;

/** Known values of {@link PolicyFactName} that the service accepts. */
export enum KnownPolicyFactName {
  UserOwnedLabVmCount = "UserOwnedLabVmCount",
  UserOwnedLabPremiumVmCount = "UserOwnedLabPremiumVmCount",
  LabVmCount = "LabVmCount",
  LabPremiumVmCount = "LabPremiumVmCount",
  LabVmSize = "LabVmSize",
  GalleryImage = "GalleryImage",
  UserOwnedLabVmCountInSubnet = "UserOwnedLabVmCountInSubnet",
  LabTargetCost = "LabTargetCost",
  EnvironmentTemplate = "EnvironmentTemplate",
  ScheduleEditPermission = "ScheduleEditPermission"
}

/**
 * Defines values for PolicyFactName. \
 * {@link KnownPolicyFactName} can be used interchangeably with PolicyFactName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **UserOwnedLabVmCount** \
 * **UserOwnedLabPremiumVmCount** \
 * **LabVmCount** \
 * **LabPremiumVmCount** \
 * **LabVmSize** \
 * **GalleryImage** \
 * **UserOwnedLabVmCountInSubnet** \
 * **LabTargetCost** \
 * **EnvironmentTemplate** \
 * **ScheduleEditPermission**
 */
export type PolicyFactName = string;

/** Known values of {@link PolicyEvaluatorType} that the service accepts. */
export enum KnownPolicyEvaluatorType {
  AllowedValuesPolicy = "AllowedValuesPolicy",
  MaxValuePolicy = "MaxValuePolicy"
}

/**
 * Defines values for PolicyEvaluatorType. \
 * {@link KnownPolicyEvaluatorType} can be used interchangeably with PolicyEvaluatorType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AllowedValuesPolicy** \
 * **MaxValuePolicy**
 */
export type PolicyEvaluatorType = string;

/** Known values of {@link ManagedIdentityType} that the service accepts. */
export enum KnownManagedIdentityType {
  None = "None",
  SystemAssigned = "SystemAssigned",
  UserAssigned = "UserAssigned",
  SystemAssignedUserAssigned = "SystemAssigned,UserAssigned"
}

/**
 * Defines values for ManagedIdentityType. \
 * {@link KnownManagedIdentityType} can be used interchangeably with ManagedIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned,UserAssigned**
 */
export type ManagedIdentityType = string;

/** Known values of {@link VirtualMachineCreationSource} that the service accepts. */
export enum KnownVirtualMachineCreationSource {
  FromCustomImage = "FromCustomImage",
  FromGalleryImage = "FromGalleryImage",
  FromSharedGalleryImage = "FromSharedGalleryImage"
}

/**
 * Defines values for VirtualMachineCreationSource. \
 * {@link KnownVirtualMachineCreationSource} can be used interchangeably with VirtualMachineCreationSource,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **FromCustomImage** \
 * **FromGalleryImage** \
 * **FromSharedGalleryImage**
 */
export type VirtualMachineCreationSource = string;

/** Known values of {@link UsagePermissionType} that the service accepts. */
export enum KnownUsagePermissionType {
  Default = "Default",
  Deny = "Deny",
  Allow = "Allow"
}

/**
 * Defines values for UsagePermissionType. \
 * {@link KnownUsagePermissionType} can be used interchangeably with UsagePermissionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default** \
 * **Deny** \
 * **Allow**
 */
export type UsagePermissionType = string;

/** Optional parameters. */
export interface ProviderOperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ProviderOperationsListResponse = ProviderOperationResult;

/** Optional parameters. */
export interface ProviderOperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ProviderOperationsListNextResponse = ProviderOperationResult;

/** Optional parameters. */
export interface LabsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=defaultStorageAccount)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listBySubscription operation. */
export type LabsListBySubscriptionResponse = LabList;

/** Optional parameters. */
export interface LabsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=defaultStorageAccount)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listByResourceGroup operation. */
export type LabsListByResourceGroupResponse = LabList;

/** Optional parameters. */
export interface LabsGetOptionalParams extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=defaultStorageAccount)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type LabsGetResponse = Lab;

/** Optional parameters. */
export interface LabsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type LabsCreateOrUpdateResponse = Lab;

/** Optional parameters. */
export interface LabsDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface LabsUpdateOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type LabsUpdateResponse = Lab;

/** Optional parameters. */
export interface LabsClaimAnyVmOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface LabsCreateEnvironmentOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface LabsExportResourceUsageOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface LabsGenerateUploadUriOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the generateUploadUri operation. */
export type LabsGenerateUploadUriResponse = GenerateUploadUriResponse;

/** Optional parameters. */
export interface LabsImportVirtualMachineOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface LabsListVhdsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listVhds operation. */
export type LabsListVhdsResponse = LabVhdList;

/** Optional parameters. */
export interface LabsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=defaultStorageAccount)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listBySubscriptionNext operation. */
export type LabsListBySubscriptionNextResponse = LabList;

/** Optional parameters. */
export interface LabsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=defaultStorageAccount)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listByResourceGroupNext operation. */
export type LabsListByResourceGroupNextResponse = LabList;

/** Optional parameters. */
export interface LabsListVhdsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listVhdsNext operation. */
export type LabsListVhdsNextResponse = LabVhdList;

/** Optional parameters. */
export interface OperationsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type OperationsGetResponse = OperationResult;

/** Optional parameters. */
export interface GlobalSchedulesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=status)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listBySubscription operation. */
export type GlobalSchedulesListBySubscriptionResponse = ScheduleList;

/** Optional parameters. */
export interface GlobalSchedulesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=status)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listByResourceGroup operation. */
export type GlobalSchedulesListByResourceGroupResponse = ScheduleList;

/** Optional parameters. */
export interface GlobalSchedulesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=status)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type GlobalSchedulesGetResponse = Schedule;

/** Optional parameters. */
export interface GlobalSchedulesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type GlobalSchedulesCreateOrUpdateResponse = Schedule;

/** Optional parameters. */
export interface GlobalSchedulesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface GlobalSchedulesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type GlobalSchedulesUpdateResponse = Schedule;

/** Optional parameters. */
export interface GlobalSchedulesExecuteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface GlobalSchedulesRetargetOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface GlobalSchedulesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=status)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listBySubscriptionNext operation. */
export type GlobalSchedulesListBySubscriptionNextResponse = ScheduleList;

/** Optional parameters. */
export interface GlobalSchedulesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=status)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listByResourceGroupNext operation. */
export type GlobalSchedulesListByResourceGroupNextResponse = ScheduleList;

/** Optional parameters. */
export interface ArtifactSourcesListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=displayName)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type ArtifactSourcesListResponse = ArtifactSourceList;

/** Optional parameters. */
export interface ArtifactSourcesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=displayName)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type ArtifactSourcesGetResponse = ArtifactSource;

/** Optional parameters. */
export interface ArtifactSourcesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ArtifactSourcesCreateOrUpdateResponse = ArtifactSource;

/** Optional parameters. */
export interface ArtifactSourcesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ArtifactSourcesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type ArtifactSourcesUpdateResponse = ArtifactSource;

/** Optional parameters. */
export interface ArtifactSourcesListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=displayName)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type ArtifactSourcesListNextResponse = ArtifactSourceList;

/** Optional parameters. */
export interface ArmTemplatesListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=displayName)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type ArmTemplatesListResponse = ArmTemplateList;

/** Optional parameters. */
export interface ArmTemplatesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=displayName)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type ArmTemplatesGetResponse = ArmTemplate;

/** Optional parameters. */
export interface ArmTemplatesListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=displayName)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type ArmTemplatesListNextResponse = ArmTemplateList;

/** Optional parameters. */
export interface ArtifactsListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=title)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type ArtifactsListResponse = ArtifactList;

/** Optional parameters. */
export interface ArtifactsGetOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=title)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type ArtifactsGetResponse = Artifact;

/** Optional parameters. */
export interface ArtifactsGenerateArmTemplateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the generateArmTemplate operation. */
export type ArtifactsGenerateArmTemplateResponse = ArmTemplateInfo;

/** Optional parameters. */
export interface ArtifactsListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=title)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type ArtifactsListNextResponse = ArtifactList;

/** Optional parameters. */
export interface CostsGetOptionalParams extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($expand=labCostDetails)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type CostsGetResponse = LabCost;

/** Optional parameters. */
export interface CostsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type CostsCreateOrUpdateResponse = LabCost;

/** Optional parameters. */
export interface CustomImagesListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=vm)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type CustomImagesListResponse = CustomImageList;

/** Optional parameters. */
export interface CustomImagesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=vm)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type CustomImagesGetResponse = CustomImage;

/** Optional parameters. */
export interface CustomImagesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type CustomImagesCreateOrUpdateResponse = CustomImage;

/** Optional parameters. */
export interface CustomImagesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface CustomImagesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type CustomImagesUpdateResponse = CustomImage;

/** Optional parameters. */
export interface CustomImagesListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=vm)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type CustomImagesListNextResponse = CustomImageList;

/** Optional parameters. */
export interface FormulasListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=description)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type FormulasListResponse = FormulaList;

/** Optional parameters. */
export interface FormulasGetOptionalParams extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=description)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type FormulasGetResponse = Formula;

/** Optional parameters. */
export interface FormulasCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type FormulasCreateOrUpdateResponse = Formula;

/** Optional parameters. */
export interface FormulasDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface FormulasUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type FormulasUpdateResponse = Formula;

/** Optional parameters. */
export interface FormulasListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=description)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type FormulasListNextResponse = FormulaList;

/** Optional parameters. */
export interface GalleryImagesListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=author)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type GalleryImagesListResponse = GalleryImageList;

/** Optional parameters. */
export interface GalleryImagesListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=author)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type GalleryImagesListNextResponse = GalleryImageList;

/** Optional parameters. */
export interface NotificationChannelsListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=webHookUrl)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type NotificationChannelsListResponse = NotificationChannelList;

/** Optional parameters. */
export interface NotificationChannelsGetOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=webHookUrl)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type NotificationChannelsGetResponse = NotificationChannel;

/** Optional parameters. */
export interface NotificationChannelsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type NotificationChannelsCreateOrUpdateResponse = NotificationChannel;

/** Optional parameters. */
export interface NotificationChannelsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface NotificationChannelsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type NotificationChannelsUpdateResponse = NotificationChannel;

/** Optional parameters. */
export interface NotificationChannelsNotifyOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface NotificationChannelsListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=webHookUrl)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type NotificationChannelsListNextResponse = NotificationChannelList;

/** Optional parameters. */
export interface PolicySetsEvaluatePoliciesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the evaluatePolicies operation. */
export type PolicySetsEvaluatePoliciesResponse = EvaluatePoliciesResponse;

/** Optional parameters. */
export interface PoliciesListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=description)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type PoliciesListResponse = PolicyList;

/** Optional parameters. */
export interface PoliciesGetOptionalParams extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=description)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type PoliciesGetResponse = Policy;

/** Optional parameters. */
export interface PoliciesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type PoliciesCreateOrUpdateResponse = Policy;

/** Optional parameters. */
export interface PoliciesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface PoliciesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type PoliciesUpdateResponse = Policy;

/** Optional parameters. */
export interface PoliciesListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=description)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type PoliciesListNextResponse = PolicyList;

/** Optional parameters. */
export interface SchedulesListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=status)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type SchedulesListResponse = ScheduleList;

/** Optional parameters. */
export interface SchedulesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=status)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type SchedulesGetResponse = Schedule;

/** Optional parameters. */
export interface SchedulesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type SchedulesCreateOrUpdateResponse = Schedule;

/** Optional parameters. */
export interface SchedulesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface SchedulesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type SchedulesUpdateResponse = Schedule;

/** Optional parameters. */
export interface SchedulesExecuteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface SchedulesListApplicableOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listApplicable operation. */
export type SchedulesListApplicableResponse = ScheduleList;

/** Optional parameters. */
export interface SchedulesListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=status)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type SchedulesListNextResponse = ScheduleList;

/** Optional parameters. */
export interface SchedulesListApplicableNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listApplicableNext operation. */
export type SchedulesListApplicableNextResponse = ScheduleList;

/** Optional parameters. */
export interface ServiceRunnersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ServiceRunnersGetResponse = ServiceRunner;

/** Optional parameters. */
export interface ServiceRunnersCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ServiceRunnersCreateOrUpdateResponse = ServiceRunner;

/** Optional parameters. */
export interface ServiceRunnersDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface UsersListOptionalParams extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=identity)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type UsersListResponse = UserList;

/** Optional parameters. */
export interface UsersGetOptionalParams extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=identity)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type UsersGetResponse = User;

/** Optional parameters. */
export interface UsersCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type UsersCreateOrUpdateResponse = User;

/** Optional parameters. */
export interface UsersDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface UsersUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type UsersUpdateResponse = User;

/** Optional parameters. */
export interface UsersListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=identity)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type UsersListNextResponse = UserList;

/** Optional parameters. */
export interface DisksListOptionalParams extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=diskType)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type DisksListResponse = DiskList;

/** Optional parameters. */
export interface DisksGetOptionalParams extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=diskType)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type DisksGetResponse = Disk;

/** Optional parameters. */
export interface DisksCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type DisksCreateOrUpdateResponse = Disk;

/** Optional parameters. */
export interface DisksDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DisksUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type DisksUpdateResponse = Disk;

/** Optional parameters. */
export interface DisksAttachOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DisksDetachOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DisksListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=diskType)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type DisksListNextResponse = DiskList;

/** Optional parameters. */
export interface EnvironmentsListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=deploymentProperties)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type EnvironmentsListResponse = DtlEnvironmentList;

/** Optional parameters. */
export interface EnvironmentsGetOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=deploymentProperties)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type EnvironmentsGetResponse = DtlEnvironment;

/** Optional parameters. */
export interface EnvironmentsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type EnvironmentsCreateOrUpdateResponse = DtlEnvironment;

/** Optional parameters. */
export interface EnvironmentsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface EnvironmentsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type EnvironmentsUpdateResponse = DtlEnvironment;

/** Optional parameters. */
export interface EnvironmentsListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=deploymentProperties)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type EnvironmentsListNextResponse = DtlEnvironmentList;

/** Optional parameters. */
export interface SecretsListOptionalParams extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=value)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type SecretsListResponse = SecretList;

/** Optional parameters. */
export interface SecretsGetOptionalParams extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=value)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type SecretsGetResponse = Secret;

/** Optional parameters. */
export interface SecretsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type SecretsCreateOrUpdateResponse = Secret;

/** Optional parameters. */
export interface SecretsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface SecretsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type SecretsUpdateResponse = Secret;

/** Optional parameters. */
export interface SecretsListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=value)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type SecretsListNextResponse = SecretList;

/** Optional parameters. */
export interface ServiceFabricsListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($expand=applicableSchedule)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type ServiceFabricsListResponse = ServiceFabricList;

/** Optional parameters. */
export interface ServiceFabricsGetOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($expand=applicableSchedule)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type ServiceFabricsGetResponse = ServiceFabric;

/** Optional parameters. */
export interface ServiceFabricsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ServiceFabricsCreateOrUpdateResponse = ServiceFabric;

/** Optional parameters. */
export interface ServiceFabricsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ServiceFabricsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type ServiceFabricsUpdateResponse = ServiceFabric;

/** Optional parameters. */
export interface ServiceFabricsListApplicableSchedulesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listApplicableSchedules operation. */
export type ServiceFabricsListApplicableSchedulesResponse = ApplicableSchedule;

/** Optional parameters. */
export interface ServiceFabricsStartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ServiceFabricsStopOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ServiceFabricsListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($expand=applicableSchedule)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type ServiceFabricsListNextResponse = ServiceFabricList;

/** Optional parameters. */
export interface ServiceFabricSchedulesListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=status)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type ServiceFabricSchedulesListResponse = ScheduleList;

/** Optional parameters. */
export interface ServiceFabricSchedulesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=status)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type ServiceFabricSchedulesGetResponse = Schedule;

/** Optional parameters. */
export interface ServiceFabricSchedulesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ServiceFabricSchedulesCreateOrUpdateResponse = Schedule;

/** Optional parameters. */
export interface ServiceFabricSchedulesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ServiceFabricSchedulesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type ServiceFabricSchedulesUpdateResponse = Schedule;

/** Optional parameters. */
export interface ServiceFabricSchedulesExecuteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ServiceFabricSchedulesListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=status)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type ServiceFabricSchedulesListNextResponse = ScheduleList;

/** Optional parameters. */
export interface VirtualMachinesListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($expand=artifacts,computeVm,networkInterface,applicableSchedule)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type VirtualMachinesListResponse = LabVirtualMachineList;

/** Optional parameters. */
export interface VirtualMachinesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($expand=artifacts,computeVm,networkInterface,applicableSchedule)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type VirtualMachinesGetResponse = LabVirtualMachine;

/** Optional parameters. */
export interface VirtualMachinesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type VirtualMachinesCreateOrUpdateResponse = LabVirtualMachine;

/** Optional parameters. */
export interface VirtualMachinesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type VirtualMachinesUpdateResponse = LabVirtualMachine;

/** Optional parameters. */
export interface VirtualMachinesAddDataDiskOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesApplyArtifactsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesClaimOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesDetachDataDiskOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesGetRdpFileContentsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getRdpFileContents operation. */
export type VirtualMachinesGetRdpFileContentsResponse = RdpConnection;

/** Optional parameters. */
export interface VirtualMachinesListApplicableSchedulesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listApplicableSchedules operation. */
export type VirtualMachinesListApplicableSchedulesResponse = ApplicableSchedule;

/** Optional parameters. */
export interface VirtualMachinesRedeployOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesResizeOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesRestartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesStartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesStopOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesTransferDisksOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesUnClaimOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($expand=artifacts,computeVm,networkInterface,applicableSchedule)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type VirtualMachinesListNextResponse = LabVirtualMachineList;

/** Optional parameters. */
export interface VirtualMachineSchedulesListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=status)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type VirtualMachineSchedulesListResponse = ScheduleList;

/** Optional parameters. */
export interface VirtualMachineSchedulesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=status)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type VirtualMachineSchedulesGetResponse = Schedule;

/** Optional parameters. */
export interface VirtualMachineSchedulesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type VirtualMachineSchedulesCreateOrUpdateResponse = Schedule;

/** Optional parameters. */
export interface VirtualMachineSchedulesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface VirtualMachineSchedulesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type VirtualMachineSchedulesUpdateResponse = Schedule;

/** Optional parameters. */
export interface VirtualMachineSchedulesExecuteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachineSchedulesListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=status)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type VirtualMachineSchedulesListNextResponse = ScheduleList;

/** Optional parameters. */
export interface VirtualNetworksListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($expand=externalSubnets)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type VirtualNetworksListResponse = VirtualNetworkList;

/** Optional parameters. */
export interface VirtualNetworksGetOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($expand=externalSubnets)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type VirtualNetworksGetResponse = VirtualNetwork;

/** Optional parameters. */
export interface VirtualNetworksCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type VirtualNetworksCreateOrUpdateResponse = VirtualNetwork;

/** Optional parameters. */
export interface VirtualNetworksDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualNetworksUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type VirtualNetworksUpdateResponse = VirtualNetwork;

/** Optional parameters. */
export interface VirtualNetworksListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($expand=externalSubnets)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type VirtualNetworksListNextResponse = VirtualNetworkList;

/** Optional parameters. */
export interface DevTestLabsClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
