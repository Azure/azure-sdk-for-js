/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  Lab as LabMapper,
  LabFragment as LabFragmentMapper,
  LabVirtualMachineCreationParameter as LabVirtualMachineCreationParameterMapper,
  ExportResourceUsageParameters as ExportResourceUsageParametersMapper,
  GenerateUploadUriParameter as GenerateUploadUriParameterMapper,
  ImportLabVirtualMachineRequest as ImportLabVirtualMachineRequestMapper,
  Schedule as ScheduleMapper,
  ScheduleFragment as ScheduleFragmentMapper,
  RetargetScheduleProperties as RetargetSchedulePropertiesMapper,
  ArtifactSource as ArtifactSourceMapper,
  ArtifactSourceFragment as ArtifactSourceFragmentMapper,
  GenerateArmTemplateRequest as GenerateArmTemplateRequestMapper,
  LabCost as LabCostMapper,
  CustomImage as CustomImageMapper,
  CustomImageFragment as CustomImageFragmentMapper,
  Formula as FormulaMapper,
  FormulaFragment as FormulaFragmentMapper,
  NotificationChannel as NotificationChannelMapper,
  NotificationChannelFragment as NotificationChannelFragmentMapper,
  NotifyParameters as NotifyParametersMapper,
  EvaluatePoliciesRequest as EvaluatePoliciesRequestMapper,
  Policy as PolicyMapper,
  PolicyFragment as PolicyFragmentMapper,
  ServiceRunner as ServiceRunnerMapper,
  User as UserMapper,
  UserFragment as UserFragmentMapper,
  Disk as DiskMapper,
  DiskFragment as DiskFragmentMapper,
  AttachDiskProperties as AttachDiskPropertiesMapper,
  DetachDiskProperties as DetachDiskPropertiesMapper,
  DtlEnvironment as DtlEnvironmentMapper,
  DtlEnvironmentFragment as DtlEnvironmentFragmentMapper,
  Secret as SecretMapper,
  SecretFragment as SecretFragmentMapper,
  ServiceFabric as ServiceFabricMapper,
  ServiceFabricFragment as ServiceFabricFragmentMapper,
  LabVirtualMachine as LabVirtualMachineMapper,
  LabVirtualMachineFragment as LabVirtualMachineFragmentMapper,
  DataDiskProperties as DataDiskPropertiesMapper,
  ApplyArtifactsRequest as ApplyArtifactsRequestMapper,
  DetachDataDiskProperties as DetachDataDiskPropertiesMapper,
  ResizeLabVirtualMachineProperties as ResizeLabVirtualMachinePropertiesMapper,
  VirtualNetwork as VirtualNetworkMapper,
  VirtualNetworkFragment as VirtualNetworkFragmentMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2018-09-15",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const expand: OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const filter: OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const top: OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    serializedName: "$top",
    type: {
      name: "Number"
    }
  }
};

export const orderby: OperationQueryParameter = {
  parameterPath: ["options", "orderby"],
  mapper: {
    serializedName: "$orderby",
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const name: OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const lab: OperationParameter = {
  parameterPath: "lab",
  mapper: LabMapper
};

export const lab1: OperationParameter = {
  parameterPath: "lab",
  mapper: LabFragmentMapper
};

export const labVirtualMachineCreationParameter: OperationParameter = {
  parameterPath: "labVirtualMachineCreationParameter",
  mapper: LabVirtualMachineCreationParameterMapper
};

export const exportResourceUsageParameters: OperationParameter = {
  parameterPath: "exportResourceUsageParameters",
  mapper: ExportResourceUsageParametersMapper
};

export const generateUploadUriParameter: OperationParameter = {
  parameterPath: "generateUploadUriParameter",
  mapper: GenerateUploadUriParameterMapper
};

export const importLabVirtualMachineRequest: OperationParameter = {
  parameterPath: "importLabVirtualMachineRequest",
  mapper: ImportLabVirtualMachineRequestMapper
};

export const locationName: OperationURLParameter = {
  parameterPath: "locationName",
  mapper: {
    serializedName: "locationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const schedule: OperationParameter = {
  parameterPath: "schedule",
  mapper: ScheduleMapper
};

export const schedule1: OperationParameter = {
  parameterPath: "schedule",
  mapper: ScheduleFragmentMapper
};

export const retargetScheduleProperties: OperationParameter = {
  parameterPath: "retargetScheduleProperties",
  mapper: RetargetSchedulePropertiesMapper
};

export const labName: OperationURLParameter = {
  parameterPath: "labName",
  mapper: {
    serializedName: "labName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const artifactSource: OperationParameter = {
  parameterPath: "artifactSource",
  mapper: ArtifactSourceMapper
};

export const artifactSource1: OperationParameter = {
  parameterPath: "artifactSource",
  mapper: ArtifactSourceFragmentMapper
};

export const artifactSourceName: OperationURLParameter = {
  parameterPath: "artifactSourceName",
  mapper: {
    serializedName: "artifactSourceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const generateArmTemplateRequest: OperationParameter = {
  parameterPath: "generateArmTemplateRequest",
  mapper: GenerateArmTemplateRequestMapper
};

export const labCost: OperationParameter = {
  parameterPath: "labCost",
  mapper: LabCostMapper
};

export const customImage: OperationParameter = {
  parameterPath: "customImage",
  mapper: CustomImageMapper
};

export const customImage1: OperationParameter = {
  parameterPath: "customImage",
  mapper: CustomImageFragmentMapper
};

export const formula: OperationParameter = {
  parameterPath: "formula",
  mapper: FormulaMapper
};

export const formula1: OperationParameter = {
  parameterPath: "formula",
  mapper: FormulaFragmentMapper
};

export const notificationChannel: OperationParameter = {
  parameterPath: "notificationChannel",
  mapper: NotificationChannelMapper
};

export const notificationChannel1: OperationParameter = {
  parameterPath: "notificationChannel",
  mapper: NotificationChannelFragmentMapper
};

export const notifyParameters: OperationParameter = {
  parameterPath: "notifyParameters",
  mapper: NotifyParametersMapper
};

export const evaluatePoliciesRequest: OperationParameter = {
  parameterPath: "evaluatePoliciesRequest",
  mapper: EvaluatePoliciesRequestMapper
};

export const policySetName: OperationURLParameter = {
  parameterPath: "policySetName",
  mapper: {
    serializedName: "policySetName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const policy: OperationParameter = {
  parameterPath: "policy",
  mapper: PolicyMapper
};

export const policy1: OperationParameter = {
  parameterPath: "policy",
  mapper: PolicyFragmentMapper
};

export const serviceRunner: OperationParameter = {
  parameterPath: "serviceRunner",
  mapper: ServiceRunnerMapper
};

export const user: OperationParameter = {
  parameterPath: "user",
  mapper: UserMapper
};

export const user1: OperationParameter = {
  parameterPath: "user",
  mapper: UserFragmentMapper
};

export const userName: OperationURLParameter = {
  parameterPath: "userName",
  mapper: {
    serializedName: "userName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const disk: OperationParameter = {
  parameterPath: "disk",
  mapper: DiskMapper
};

export const disk1: OperationParameter = {
  parameterPath: "disk",
  mapper: DiskFragmentMapper
};

export const attachDiskProperties: OperationParameter = {
  parameterPath: "attachDiskProperties",
  mapper: AttachDiskPropertiesMapper
};

export const detachDiskProperties: OperationParameter = {
  parameterPath: "detachDiskProperties",
  mapper: DetachDiskPropertiesMapper
};

export const dtlEnvironment: OperationParameter = {
  parameterPath: "dtlEnvironment",
  mapper: DtlEnvironmentMapper
};

export const dtlEnvironment1: OperationParameter = {
  parameterPath: "dtlEnvironment",
  mapper: DtlEnvironmentFragmentMapper
};

export const secret: OperationParameter = {
  parameterPath: "secret",
  mapper: SecretMapper
};

export const secret1: OperationParameter = {
  parameterPath: "secret",
  mapper: SecretFragmentMapper
};

export const serviceFabric: OperationParameter = {
  parameterPath: "serviceFabric",
  mapper: ServiceFabricMapper
};

export const serviceFabric1: OperationParameter = {
  parameterPath: "serviceFabric",
  mapper: ServiceFabricFragmentMapper
};

export const serviceFabricName: OperationURLParameter = {
  parameterPath: "serviceFabricName",
  mapper: {
    serializedName: "serviceFabricName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const labVirtualMachine: OperationParameter = {
  parameterPath: "labVirtualMachine",
  mapper: LabVirtualMachineMapper
};

export const labVirtualMachine1: OperationParameter = {
  parameterPath: "labVirtualMachine",
  mapper: LabVirtualMachineFragmentMapper
};

export const dataDiskProperties: OperationParameter = {
  parameterPath: "dataDiskProperties",
  mapper: DataDiskPropertiesMapper
};

export const applyArtifactsRequest: OperationParameter = {
  parameterPath: "applyArtifactsRequest",
  mapper: ApplyArtifactsRequestMapper
};

export const detachDataDiskProperties: OperationParameter = {
  parameterPath: "detachDataDiskProperties",
  mapper: DetachDataDiskPropertiesMapper
};

export const resizeLabVirtualMachineProperties: OperationParameter = {
  parameterPath: "resizeLabVirtualMachineProperties",
  mapper: ResizeLabVirtualMachinePropertiesMapper
};

export const virtualMachineName: OperationURLParameter = {
  parameterPath: "virtualMachineName",
  mapper: {
    serializedName: "virtualMachineName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const virtualNetwork: OperationParameter = {
  parameterPath: "virtualNetwork",
  mapper: VirtualNetworkMapper
};

export const virtualNetwork1: OperationParameter = {
  parameterPath: "virtualNetwork",
  mapper: VirtualNetworkFragmentMapper
};
