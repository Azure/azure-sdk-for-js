/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const ProviderOperationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProviderOperationResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationMetadata"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationMetadata: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationMetadata",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationMetadataDisplay"
        }
      }
    }
  }
};

export const OperationMetadataDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationMetadataDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const CloudErrorBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudErrorBody"
            }
          }
        }
      }
    }
  }
};

export const LabList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LabList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Lab"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LabAnnouncementProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LabAnnouncementProperties",
    modelProperties: {
      title: {
        serializedName: "title",
        type: {
          name: "String"
        }
      },
      markdown: {
        serializedName: "markdown",
        type: {
          name: "String"
        }
      },
      enabled: {
        serializedName: "enabled",
        type: {
          name: "String"
        }
      },
      expirationDate: {
        serializedName: "expirationDate",
        type: {
          name: "DateTime"
        }
      },
      expired: {
        serializedName: "expired",
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uniqueIdentifier: {
        serializedName: "uniqueIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LabSupportProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LabSupportProperties",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "String"
        }
      },
      markdown: {
        serializedName: "markdown",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const OperationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationResult",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      statusCode: {
        serializedName: "statusCode",
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "OperationError"
        }
      }
    }
  }
};

export const OperationError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScheduleList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScheduleList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Schedule"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WeekDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WeekDetails",
    modelProperties: {
      weekdays: {
        serializedName: "weekdays",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      time: {
        serializedName: "time",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DayDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DayDetails",
    modelProperties: {
      time: {
        serializedName: "time",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HourDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HourDetails",
    modelProperties: {
      minute: {
        serializedName: "minute",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const NotificationSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NotificationSettings",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      timeInMinutes: {
        serializedName: "timeInMinutes",
        type: {
          name: "Number"
        }
      },
      webhookUrl: {
        serializedName: "webhookUrl",
        type: {
          name: "String"
        }
      },
      emailRecipient: {
        serializedName: "emailRecipient",
        type: {
          name: "String"
        }
      },
      notificationLocale: {
        serializedName: "notificationLocale",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ArtifactSourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArtifactSourceList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ArtifactSource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ArmTemplateList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArmTemplateList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ArmTemplate"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ParametersValueFileInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ParametersValueFileInfo",
    modelProperties: {
      fileName: {
        serializedName: "fileName",
        type: {
          name: "String"
        }
      },
      parametersValueInfo: {
        serializedName: "parametersValueInfo",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const ArtifactList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArtifactList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Artifact"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GenerateArmTemplateRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GenerateArmTemplateRequest",
    modelProperties: {
      virtualMachineName: {
        serializedName: "virtualMachineName",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ParameterInfo"
            }
          }
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      fileUploadOptions: {
        serializedName: "fileUploadOptions",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ParameterInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ParameterInfo",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ArmTemplateInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArmTemplateInfo",
    modelProperties: {
      template: {
        serializedName: "template",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const UpdateResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateResource",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const TargetCostProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TargetCostProperties",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "Number"
        }
      },
      costThresholds: {
        serializedName: "costThresholds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CostThresholdProperties"
            }
          }
        }
      },
      cycleStartDateTime: {
        serializedName: "cycleStartDateTime",
        type: {
          name: "DateTime"
        }
      },
      cycleEndDateTime: {
        serializedName: "cycleEndDateTime",
        type: {
          name: "DateTime"
        }
      },
      cycleType: {
        serializedName: "cycleType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CostThresholdProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CostThresholdProperties",
    modelProperties: {
      thresholdId: {
        serializedName: "thresholdId",
        type: {
          name: "String"
        }
      },
      percentageThreshold: {
        serializedName: "percentageThreshold",
        type: {
          name: "Composite",
          className: "PercentageCostThresholdProperties"
        }
      },
      displayOnChart: {
        serializedName: "displayOnChart",
        type: {
          name: "String"
        }
      },
      sendNotificationWhenExceeded: {
        serializedName: "sendNotificationWhenExceeded",
        type: {
          name: "String"
        }
      },
      notificationSent: {
        serializedName: "notificationSent",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PercentageCostThresholdProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PercentageCostThresholdProperties",
    modelProperties: {
      thresholdValue: {
        serializedName: "thresholdValue",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const LabCostSummaryProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LabCostSummaryProperties",
    modelProperties: {
      estimatedLabCost: {
        serializedName: "estimatedLabCost",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const LabCostDetailsProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LabCostDetailsProperties",
    modelProperties: {
      date: {
        serializedName: "date",
        type: {
          name: "DateTime"
        }
      },
      cost: {
        serializedName: "cost",
        type: {
          name: "Number"
        }
      },
      costType: {
        serializedName: "costType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LabResourceCostProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LabResourceCostProperties",
    modelProperties: {
      resourcename: {
        serializedName: "resourcename",
        type: {
          name: "String"
        }
      },
      resourceUId: {
        serializedName: "resourceUId",
        type: {
          name: "String"
        }
      },
      resourceCost: {
        serializedName: "resourceCost",
        type: {
          name: "Number"
        }
      },
      resourceType: {
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      resourceOwner: {
        serializedName: "resourceOwner",
        type: {
          name: "String"
        }
      },
      resourcePricingTier: {
        serializedName: "resourcePricingTier",
        type: {
          name: "String"
        }
      },
      resourceStatus: {
        serializedName: "resourceStatus",
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      externalResourceId: {
        serializedName: "externalResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomImageList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomImageList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomImage"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomImagePropertiesFromVm: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomImagePropertiesFromVm",
    modelProperties: {
      sourceVmId: {
        serializedName: "sourceVmId",
        type: {
          name: "String"
        }
      },
      windowsOsInfo: {
        serializedName: "windowsOsInfo",
        type: {
          name: "Composite",
          className: "WindowsOsInfo"
        }
      },
      linuxOsInfo: {
        serializedName: "linuxOsInfo",
        type: {
          name: "Composite",
          className: "LinuxOsInfo"
        }
      }
    }
  }
};

export const WindowsOsInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WindowsOsInfo",
    modelProperties: {
      windowsOsState: {
        serializedName: "windowsOsState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LinuxOsInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LinuxOsInfo",
    modelProperties: {
      linuxOsState: {
        serializedName: "linuxOsState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomImagePropertiesCustom: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomImagePropertiesCustom",
    modelProperties: {
      imageName: {
        serializedName: "imageName",
        type: {
          name: "String"
        }
      },
      sysPrep: {
        serializedName: "sysPrep",
        type: {
          name: "Boolean"
        }
      },
      osType: {
        serializedName: "osType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataDiskStorageTypeInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataDiskStorageTypeInfo",
    modelProperties: {
      lun: {
        serializedName: "lun",
        type: {
          name: "String"
        }
      },
      storageType: {
        serializedName: "storageType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomImagePropertiesFromPlan: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomImagePropertiesFromPlan",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      publisher: {
        serializedName: "publisher",
        type: {
          name: "String"
        }
      },
      offer: {
        serializedName: "offer",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FormulaList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FormulaList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Formula"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LabVirtualMachineCreationParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LabVirtualMachineCreationParameter",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      bulkCreationParameters: {
        serializedName: "properties.bulkCreationParameters",
        type: {
          name: "Composite",
          className: "BulkCreationParameters"
        }
      },
      notes: {
        serializedName: "properties.notes",
        type: {
          name: "String"
        }
      },
      ownerObjectId: {
        defaultValue: "dynamicValue",
        serializedName: "properties.ownerObjectId",
        type: {
          name: "String"
        }
      },
      ownerUserPrincipalName: {
        serializedName: "properties.ownerUserPrincipalName",
        type: {
          name: "String"
        }
      },
      createdDate: {
        serializedName: "properties.createdDate",
        type: {
          name: "DateTime"
        }
      },
      customImageId: {
        serializedName: "properties.customImageId",
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "properties.size",
        type: {
          name: "String"
        }
      },
      userName: {
        serializedName: "properties.userName",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "properties.password",
        type: {
          name: "String"
        }
      },
      sshKey: {
        serializedName: "properties.sshKey",
        type: {
          name: "String"
        }
      },
      isAuthenticationWithSshKey: {
        serializedName: "properties.isAuthenticationWithSshKey",
        type: {
          name: "Boolean"
        }
      },
      labSubnetName: {
        serializedName: "properties.labSubnetName",
        type: {
          name: "String"
        }
      },
      labVirtualNetworkId: {
        serializedName: "properties.labVirtualNetworkId",
        type: {
          name: "String"
        }
      },
      disallowPublicIpAddress: {
        defaultValue: false,
        serializedName: "properties.disallowPublicIpAddress",
        type: {
          name: "Boolean"
        }
      },
      artifacts: {
        serializedName: "properties.artifacts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ArtifactInstallProperties"
            }
          }
        }
      },
      galleryImageReference: {
        serializedName: "properties.galleryImageReference",
        type: {
          name: "Composite",
          className: "GalleryImageReference"
        }
      },
      planId: {
        serializedName: "properties.planId",
        type: {
          name: "String"
        }
      },
      networkInterface: {
        serializedName: "properties.networkInterface",
        type: {
          name: "Composite",
          className: "NetworkInterfaceProperties"
        }
      },
      expirationDate: {
        serializedName: "properties.expirationDate",
        type: {
          name: "DateTime"
        }
      },
      allowClaim: {
        defaultValue: false,
        serializedName: "properties.allowClaim",
        type: {
          name: "Boolean"
        }
      },
      storageType: {
        defaultValue: "labStorageType",
        serializedName: "properties.storageType",
        type: {
          name: "String"
        }
      },
      environmentId: {
        serializedName: "properties.environmentId",
        type: {
          name: "String"
        }
      },
      dataDiskParameters: {
        serializedName: "properties.dataDiskParameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataDiskProperties"
            }
          }
        }
      },
      scheduleParameters: {
        serializedName: "properties.scheduleParameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScheduleCreationParameter"
            }
          }
        }
      }
    }
  }
};

export const BulkCreationParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BulkCreationParameters",
    modelProperties: {
      instanceCount: {
        serializedName: "instanceCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ArtifactInstallProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArtifactInstallProperties",
    modelProperties: {
      artifactId: {
        serializedName: "artifactId",
        type: {
          name: "String"
        }
      },
      artifactTitle: {
        serializedName: "artifactTitle",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ArtifactParameterProperties"
            }
          }
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      deploymentStatusMessage: {
        serializedName: "deploymentStatusMessage",
        type: {
          name: "String"
        }
      },
      vmExtensionStatusMessage: {
        serializedName: "vmExtensionStatusMessage",
        type: {
          name: "String"
        }
      },
      installTime: {
        serializedName: "installTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ArtifactParameterProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArtifactParameterProperties",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GalleryImageReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GalleryImageReference",
    modelProperties: {
      offer: {
        serializedName: "offer",
        type: {
          name: "String"
        }
      },
      publisher: {
        serializedName: "publisher",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterfaceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterfaceProperties",
    modelProperties: {
      virtualNetworkId: {
        serializedName: "virtualNetworkId",
        type: {
          name: "String"
        }
      },
      subnetId: {
        serializedName: "subnetId",
        type: {
          name: "String"
        }
      },
      publicIpAddressId: {
        serializedName: "publicIpAddressId",
        type: {
          name: "String"
        }
      },
      publicIpAddress: {
        serializedName: "publicIpAddress",
        type: {
          name: "String"
        }
      },
      privateIpAddress: {
        serializedName: "privateIpAddress",
        type: {
          name: "String"
        }
      },
      dnsName: {
        serializedName: "dnsName",
        type: {
          name: "String"
        }
      },
      rdpAuthority: {
        serializedName: "rdpAuthority",
        type: {
          name: "String"
        }
      },
      sshAuthority: {
        serializedName: "sshAuthority",
        type: {
          name: "String"
        }
      },
      sharedPublicIpAddressConfiguration: {
        serializedName: "sharedPublicIpAddressConfiguration",
        type: {
          name: "Composite",
          className: "SharedPublicIpAddressConfiguration"
        }
      }
    }
  }
};

export const SharedPublicIpAddressConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SharedPublicIpAddressConfiguration",
    modelProperties: {
      inboundNatRules: {
        serializedName: "inboundNatRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InboundNatRule"
            }
          }
        }
      }
    }
  }
};

export const InboundNatRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InboundNatRule",
    modelProperties: {
      transportProtocol: {
        serializedName: "transportProtocol",
        type: {
          name: "String"
        }
      },
      frontendPort: {
        serializedName: "frontendPort",
        type: {
          name: "Number"
        }
      },
      backendPort: {
        serializedName: "backendPort",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DataDiskProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataDiskProperties",
    modelProperties: {
      attachNewDataDiskOptions: {
        serializedName: "attachNewDataDiskOptions",
        type: {
          name: "Composite",
          className: "AttachNewDataDiskOptions"
        }
      },
      existingLabDiskId: {
        serializedName: "existingLabDiskId",
        type: {
          name: "String"
        }
      },
      hostCaching: {
        serializedName: "hostCaching",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AttachNewDataDiskOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AttachNewDataDiskOptions",
    modelProperties: {
      diskSizeGiB: {
        serializedName: "diskSizeGiB",
        type: {
          name: "Number"
        }
      },
      diskName: {
        serializedName: "diskName",
        type: {
          name: "String"
        }
      },
      diskType: {
        serializedName: "diskType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScheduleCreationParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScheduleCreationParameter",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      taskType: {
        serializedName: "properties.taskType",
        type: {
          name: "String"
        }
      },
      weeklyRecurrence: {
        serializedName: "properties.weeklyRecurrence",
        type: {
          name: "Composite",
          className: "WeekDetails"
        }
      },
      dailyRecurrence: {
        serializedName: "properties.dailyRecurrence",
        type: {
          name: "Composite",
          className: "DayDetails"
        }
      },
      hourlyRecurrence: {
        serializedName: "properties.hourlyRecurrence",
        type: {
          name: "Composite",
          className: "HourDetails"
        }
      },
      timeZoneId: {
        serializedName: "properties.timeZoneId",
        type: {
          name: "String"
        }
      },
      notificationSettings: {
        serializedName: "properties.notificationSettings",
        type: {
          name: "Composite",
          className: "NotificationSettings"
        }
      },
      targetResourceId: {
        serializedName: "properties.targetResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FormulaPropertiesFromVm: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FormulaPropertiesFromVm",
    modelProperties: {
      labVmId: {
        serializedName: "labVmId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GalleryImageList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GalleryImageList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GalleryImage"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NotificationChannelList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NotificationChannelList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NotificationChannel"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Event: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Event",
    modelProperties: {
      eventName: {
        serializedName: "eventName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NotifyParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NotifyParameters",
    modelProperties: {
      eventName: {
        serializedName: "eventName",
        type: {
          name: "String"
        }
      },
      jsonPayload: {
        serializedName: "jsonPayload",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EvaluatePoliciesRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EvaluatePoliciesRequest",
    modelProperties: {
      policies: {
        serializedName: "policies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EvaluatePoliciesProperties"
            }
          }
        }
      }
    }
  }
};

export const EvaluatePoliciesProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EvaluatePoliciesProperties",
    modelProperties: {
      factName: {
        serializedName: "factName",
        type: {
          name: "String"
        }
      },
      factData: {
        serializedName: "factData",
        type: {
          name: "String"
        }
      },
      valueOffset: {
        serializedName: "valueOffset",
        type: {
          name: "String"
        }
      },
      userObjectId: {
        serializedName: "userObjectId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EvaluatePoliciesResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EvaluatePoliciesResponse",
    modelProperties: {
      results: {
        serializedName: "results",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PolicySetResult"
            }
          }
        }
      }
    }
  }
};

export const PolicySetResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicySetResult",
    modelProperties: {
      hasError: {
        serializedName: "hasError",
        type: {
          name: "Boolean"
        }
      },
      policyViolations: {
        serializedName: "policyViolations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PolicyViolation"
            }
          }
        }
      }
    }
  }
};

export const PolicyViolation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyViolation",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PolicyList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Policy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IdentityProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IdentityProperties",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      clientSecretUrl: {
        serializedName: "clientSecretUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "User"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserIdentity",
    modelProperties: {
      principalName: {
        serializedName: "principalName",
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      objectId: {
        serializedName: "objectId",
        type: {
          name: "String"
        }
      },
      appId: {
        serializedName: "appId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserSecretStore: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserSecretStore",
    modelProperties: {
      keyVaultUri: {
        serializedName: "keyVaultUri",
        type: {
          name: "String"
        }
      },
      keyVaultId: {
        serializedName: "keyVaultId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiskList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Disk"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AttachDiskProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AttachDiskProperties",
    modelProperties: {
      leasedByLabVmId: {
        serializedName: "leasedByLabVmId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DetachDiskProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DetachDiskProperties",
    modelProperties: {
      leasedByLabVmId: {
        serializedName: "leasedByLabVmId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DtlEnvironmentList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DtlEnvironmentList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DtlEnvironment"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnvironmentDeploymentProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnvironmentDeploymentProperties",
    modelProperties: {
      armTemplateId: {
        serializedName: "armTemplateId",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ArmTemplateParameterProperties"
            }
          }
        }
      }
    }
  }
};

export const ArmTemplateParameterProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArmTemplateParameterProperties",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecretList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecretList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Secret"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceFabricList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceFabricList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceFabric"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LabVirtualMachineList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LabVirtualMachineList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LabVirtualMachine"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ArtifactDeploymentStatusProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArtifactDeploymentStatusProperties",
    modelProperties: {
      deploymentStatus: {
        serializedName: "deploymentStatus",
        type: {
          name: "String"
        }
      },
      artifactsApplied: {
        serializedName: "artifactsApplied",
        type: {
          name: "Number"
        }
      },
      totalArtifacts: {
        serializedName: "totalArtifacts",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ComputeVmProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeVmProperties",
    modelProperties: {
      statuses: {
        serializedName: "statuses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ComputeVmInstanceViewStatus"
            }
          }
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      vmSize: {
        serializedName: "vmSize",
        type: {
          name: "String"
        }
      },
      networkInterfaceId: {
        serializedName: "networkInterfaceId",
        type: {
          name: "String"
        }
      },
      osDiskId: {
        serializedName: "osDiskId",
        type: {
          name: "String"
        }
      },
      dataDiskIds: {
        serializedName: "dataDiskIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      dataDisks: {
        serializedName: "dataDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ComputeDataDisk"
            }
          }
        }
      }
    }
  }
};

export const ComputeVmInstanceViewStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeVmInstanceViewStatus",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      displayStatus: {
        serializedName: "displayStatus",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeDataDisk: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeDataDisk",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      diskUri: {
        serializedName: "diskUri",
        type: {
          name: "String"
        }
      },
      managedDiskId: {
        serializedName: "managedDiskId",
        type: {
          name: "String"
        }
      },
      diskSizeGiB: {
        serializedName: "diskSizeGiB",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ApplyArtifactsRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplyArtifactsRequest",
    modelProperties: {
      artifacts: {
        serializedName: "artifacts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ArtifactInstallProperties"
            }
          }
        }
      }
    }
  }
};

export const DetachDataDiskProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DetachDataDiskProperties",
    modelProperties: {
      existingLabDiskId: {
        serializedName: "existingLabDiskId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RdpConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RdpConnection",
    modelProperties: {
      contents: {
        serializedName: "contents",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResizeLabVirtualMachineProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResizeLabVirtualMachineProperties",
    modelProperties: {
      size: {
        serializedName: "size",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetwork"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Subnet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Subnet",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      labSubnetName: {
        serializedName: "labSubnetName",
        type: {
          name: "String"
        }
      },
      allowPublicIp: {
        serializedName: "allowPublicIp",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExternalSubnet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExternalSubnet",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubnetOverride: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubnetOverride",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      labSubnetName: {
        serializedName: "labSubnetName",
        type: {
          name: "String"
        }
      },
      useInVmCreationPermission: {
        serializedName: "useInVmCreationPermission",
        type: {
          name: "String"
        }
      },
      usePublicIpAddressPermission: {
        serializedName: "usePublicIpAddressPermission",
        type: {
          name: "String"
        }
      },
      sharedPublicIpAddressConfiguration: {
        serializedName: "sharedPublicIpAddressConfiguration",
        type: {
          name: "Composite",
          className: "SubnetSharedPublicIpAddressConfiguration"
        }
      },
      virtualNetworkPoolName: {
        serializedName: "virtualNetworkPoolName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubnetSharedPublicIpAddressConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubnetSharedPublicIpAddressConfiguration",
    modelProperties: {
      allowedPorts: {
        serializedName: "allowedPorts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Port"
            }
          }
        }
      }
    }
  }
};

export const Port: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Port",
    modelProperties: {
      transportProtocol: {
        serializedName: "transportProtocol",
        type: {
          name: "String"
        }
      },
      backendPort: {
        serializedName: "backendPort",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ExportResourceUsageParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportResourceUsageParameters",
    modelProperties: {
      blobStorageAbsoluteSasUri: {
        serializedName: "blobStorageAbsoluteSasUri",
        type: {
          name: "String"
        }
      },
      usageStartDate: {
        serializedName: "usageStartDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const GenerateUploadUriParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GenerateUploadUriParameter",
    modelProperties: {
      blobName: {
        serializedName: "blobName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GenerateUploadUriResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GenerateUploadUriResponse",
    modelProperties: {
      uploadUri: {
        serializedName: "uploadUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImportLabVirtualMachineRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImportLabVirtualMachineRequest",
    modelProperties: {
      sourceVirtualMachineResourceId: {
        serializedName: "sourceVirtualMachineResourceId",
        type: {
          name: "String"
        }
      },
      destinationVirtualMachineName: {
        serializedName: "destinationVirtualMachineName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LabVhdList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LabVhdList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LabVhd"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LabVhd: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LabVhd",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RetargetScheduleProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RetargetScheduleProperties",
    modelProperties: {
      currentResourceId: {
        serializedName: "currentResourceId",
        type: {
          name: "String"
        }
      },
      targetResourceId: {
        serializedName: "targetResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceRunnerList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceRunnerList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceRunner"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ShutdownNotificationContent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ShutdownNotificationContent",
    modelProperties: {
      skipUrl: {
        serializedName: "skipUrl",
        type: {
          name: "String"
        }
      },
      delayUrl60: {
        serializedName: "delayUrl60",
        type: {
          name: "String"
        }
      },
      delayUrl120: {
        serializedName: "delayUrl120",
        type: {
          name: "String"
        }
      },
      vmName: {
        serializedName: "vmName",
        type: {
          name: "String"
        }
      },
      guid: {
        serializedName: "guid",
        type: {
          name: "String"
        }
      },
      owner: {
        serializedName: "owner",
        type: {
          name: "String"
        }
      },
      vmUrl: {
        serializedName: "vmUrl",
        type: {
          name: "String"
        }
      },
      minutesUntilShutdown: {
        serializedName: "minutesUntilShutdown",
        type: {
          name: "String"
        }
      },
      eventType: {
        serializedName: "eventType",
        type: {
          name: "String"
        }
      },
      text: {
        serializedName: "text",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      },
      resourceGroupName: {
        serializedName: "resourceGroupName",
        type: {
          name: "String"
        }
      },
      labName: {
        serializedName: "labName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Lab: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Lab",
    modelProperties: {
      ...Resource.type.modelProperties,
      defaultStorageAccount: {
        serializedName: "properties.defaultStorageAccount",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      defaultPremiumStorageAccount: {
        serializedName: "properties.defaultPremiumStorageAccount",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      artifactsStorageAccount: {
        serializedName: "properties.artifactsStorageAccount",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      premiumDataDiskStorageAccount: {
        serializedName: "properties.premiumDataDiskStorageAccount",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vaultName: {
        serializedName: "properties.vaultName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      labStorageType: {
        serializedName: "properties.labStorageType",
        type: {
          name: "String"
        }
      },
      mandatoryArtifactsResourceIdsLinux: {
        serializedName: "properties.mandatoryArtifactsResourceIdsLinux",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      mandatoryArtifactsResourceIdsWindows: {
        serializedName: "properties.mandatoryArtifactsResourceIdsWindows",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      createdDate: {
        serializedName: "properties.createdDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      premiumDataDisks: {
        serializedName: "properties.premiumDataDisks",
        type: {
          name: "String"
        }
      },
      environmentPermission: {
        serializedName: "properties.environmentPermission",
        type: {
          name: "String"
        }
      },
      announcement: {
        serializedName: "properties.announcement",
        type: {
          name: "Composite",
          className: "LabAnnouncementProperties"
        }
      },
      support: {
        serializedName: "properties.support",
        type: {
          name: "Composite",
          className: "LabSupportProperties"
        }
      },
      vmCreationResourceGroup: {
        serializedName: "properties.vmCreationResourceGroup",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publicIpId: {
        serializedName: "properties.publicIpId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      loadBalancerId: {
        serializedName: "properties.loadBalancerId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkSecurityGroupId: {
        serializedName: "properties.networkSecurityGroupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      extendedProperties: {
        serializedName: "properties.extendedProperties",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uniqueIdentifier: {
        serializedName: "properties.uniqueIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Schedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Schedule",
    modelProperties: {
      ...Resource.type.modelProperties,
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      taskType: {
        serializedName: "properties.taskType",
        type: {
          name: "String"
        }
      },
      weeklyRecurrence: {
        serializedName: "properties.weeklyRecurrence",
        type: {
          name: "Composite",
          className: "WeekDetails"
        }
      },
      dailyRecurrence: {
        serializedName: "properties.dailyRecurrence",
        type: {
          name: "Composite",
          className: "DayDetails"
        }
      },
      hourlyRecurrence: {
        serializedName: "properties.hourlyRecurrence",
        type: {
          name: "Composite",
          className: "HourDetails"
        }
      },
      timeZoneId: {
        serializedName: "properties.timeZoneId",
        type: {
          name: "String"
        }
      },
      notificationSettings: {
        serializedName: "properties.notificationSettings",
        type: {
          name: "Composite",
          className: "NotificationSettings"
        }
      },
      createdDate: {
        serializedName: "properties.createdDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      targetResourceId: {
        serializedName: "properties.targetResourceId",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uniqueIdentifier: {
        serializedName: "properties.uniqueIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ArtifactSource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArtifactSource",
    modelProperties: {
      ...Resource.type.modelProperties,
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      uri: {
        serializedName: "properties.uri",
        type: {
          name: "String"
        }
      },
      sourceType: {
        serializedName: "properties.sourceType",
        type: {
          name: "String"
        }
      },
      folderPath: {
        serializedName: "properties.folderPath",
        type: {
          name: "String"
        }
      },
      armTemplateFolderPath: {
        serializedName: "properties.armTemplateFolderPath",
        type: {
          name: "String"
        }
      },
      branchRef: {
        serializedName: "properties.branchRef",
        type: {
          name: "String"
        }
      },
      securityToken: {
        serializedName: "properties.securityToken",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      createdDate: {
        serializedName: "properties.createdDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uniqueIdentifier: {
        serializedName: "properties.uniqueIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ArmTemplate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArmTemplate",
    modelProperties: {
      ...Resource.type.modelProperties,
      displayName: {
        serializedName: "properties.displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publisher: {
        serializedName: "properties.publisher",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      icon: {
        serializedName: "properties.icon",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      contents: {
        serializedName: "properties.contents",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      createdDate: {
        serializedName: "properties.createdDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      parametersValueFilesInfo: {
        serializedName: "properties.parametersValueFilesInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ParametersValueFileInfo"
            }
          }
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Artifact: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Artifact",
    modelProperties: {
      ...Resource.type.modelProperties,
      title: {
        serializedName: "properties.title",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publisher: {
        serializedName: "properties.publisher",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      filePath: {
        serializedName: "properties.filePath",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      icon: {
        serializedName: "properties.icon",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetOsType: {
        serializedName: "properties.targetOsType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "properties.parameters",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      createdDate: {
        serializedName: "properties.createdDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const LabCost: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LabCost",
    modelProperties: {
      ...Resource.type.modelProperties,
      targetCost: {
        serializedName: "properties.targetCost",
        type: {
          name: "Composite",
          className: "TargetCostProperties"
        }
      },
      labCostSummary: {
        serializedName: "properties.labCostSummary",
        type: {
          name: "Composite",
          className: "LabCostSummaryProperties"
        }
      },
      labCostDetails: {
        serializedName: "properties.labCostDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LabCostDetailsProperties"
            }
          }
        }
      },
      resourceCosts: {
        serializedName: "properties.resourceCosts",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LabResourceCostProperties"
            }
          }
        }
      },
      currencyCode: {
        serializedName: "properties.currencyCode",
        type: {
          name: "String"
        }
      },
      startDateTime: {
        serializedName: "properties.startDateTime",
        type: {
          name: "DateTime"
        }
      },
      endDateTime: {
        serializedName: "properties.endDateTime",
        type: {
          name: "DateTime"
        }
      },
      createdDate: {
        serializedName: "properties.createdDate",
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uniqueIdentifier: {
        serializedName: "properties.uniqueIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomImage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomImage",
    modelProperties: {
      ...Resource.type.modelProperties,
      vm: {
        serializedName: "properties.vm",
        type: {
          name: "Composite",
          className: "CustomImagePropertiesFromVm"
        }
      },
      vhd: {
        serializedName: "properties.vhd",
        type: {
          name: "Composite",
          className: "CustomImagePropertiesCustom"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      author: {
        serializedName: "properties.author",
        type: {
          name: "String"
        }
      },
      creationDate: {
        serializedName: "properties.creationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      managedImageId: {
        serializedName: "properties.managedImageId",
        type: {
          name: "String"
        }
      },
      managedSnapshotId: {
        serializedName: "properties.managedSnapshotId",
        type: {
          name: "String"
        }
      },
      dataDiskStorageInfo: {
        serializedName: "properties.dataDiskStorageInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataDiskStorageTypeInfo"
            }
          }
        }
      },
      customImagePlan: {
        serializedName: "properties.customImagePlan",
        type: {
          name: "Composite",
          className: "CustomImagePropertiesFromPlan"
        }
      },
      isPlanAuthorized: {
        serializedName: "properties.isPlanAuthorized",
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uniqueIdentifier: {
        serializedName: "properties.uniqueIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Formula: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Formula",
    modelProperties: {
      ...Resource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      author: {
        serializedName: "properties.author",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "properties.osType",
        type: {
          name: "String"
        }
      },
      creationDate: {
        serializedName: "properties.creationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      formulaContent: {
        serializedName: "properties.formulaContent",
        type: {
          name: "Composite",
          className: "LabVirtualMachineCreationParameter"
        }
      },
      vm: {
        serializedName: "properties.vm",
        type: {
          name: "Composite",
          className: "FormulaPropertiesFromVm"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uniqueIdentifier: {
        serializedName: "properties.uniqueIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GalleryImage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GalleryImage",
    modelProperties: {
      ...Resource.type.modelProperties,
      author: {
        serializedName: "properties.author",
        type: {
          name: "String"
        }
      },
      createdDate: {
        serializedName: "properties.createdDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      imageReference: {
        serializedName: "properties.imageReference",
        type: {
          name: "Composite",
          className: "GalleryImageReference"
        }
      },
      icon: {
        serializedName: "properties.icon",
        type: {
          name: "String"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      planId: {
        serializedName: "properties.planId",
        type: {
          name: "String"
        }
      },
      isPlanAuthorized: {
        serializedName: "properties.isPlanAuthorized",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const NotificationChannel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NotificationChannel",
    modelProperties: {
      ...Resource.type.modelProperties,
      webHookUrl: {
        serializedName: "properties.webHookUrl",
        type: {
          name: "String"
        }
      },
      emailRecipient: {
        serializedName: "properties.emailRecipient",
        type: {
          name: "String"
        }
      },
      notificationLocale: {
        serializedName: "properties.notificationLocale",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      events: {
        serializedName: "properties.events",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Event"
            }
          }
        }
      },
      createdDate: {
        serializedName: "properties.createdDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uniqueIdentifier: {
        serializedName: "properties.uniqueIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Policy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Policy",
    modelProperties: {
      ...Resource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      factName: {
        serializedName: "properties.factName",
        type: {
          name: "String"
        }
      },
      factData: {
        serializedName: "properties.factData",
        type: {
          name: "String"
        }
      },
      threshold: {
        serializedName: "properties.threshold",
        type: {
          name: "String"
        }
      },
      evaluatorType: {
        serializedName: "properties.evaluatorType",
        type: {
          name: "String"
        }
      },
      createdDate: {
        serializedName: "properties.createdDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uniqueIdentifier: {
        serializedName: "properties.uniqueIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceRunner: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceRunner",
    modelProperties: {
      ...Resource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "IdentityProperties"
        }
      }
    }
  }
};

export const User: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "User",
    modelProperties: {
      ...Resource.type.modelProperties,
      identity: {
        serializedName: "properties.identity",
        type: {
          name: "Composite",
          className: "UserIdentity"
        }
      },
      secretStore: {
        serializedName: "properties.secretStore",
        type: {
          name: "Composite",
          className: "UserSecretStore"
        }
      },
      createdDate: {
        serializedName: "properties.createdDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uniqueIdentifier: {
        serializedName: "properties.uniqueIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Disk: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Disk",
    modelProperties: {
      ...Resource.type.modelProperties,
      diskType: {
        serializedName: "properties.diskType",
        type: {
          name: "String"
        }
      },
      diskSizeGiB: {
        serializedName: "properties.diskSizeGiB",
        type: {
          name: "Number"
        }
      },
      leasedByLabVmId: {
        serializedName: "properties.leasedByLabVmId",
        type: {
          name: "String"
        }
      },
      diskBlobName: {
        serializedName: "properties.diskBlobName",
        type: {
          name: "String"
        }
      },
      diskUri: {
        serializedName: "properties.diskUri",
        type: {
          name: "String"
        }
      },
      storageAccountId: {
        serializedName: "properties.storageAccountId",
        type: {
          name: "String"
        }
      },
      createdDate: {
        serializedName: "properties.createdDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      hostCaching: {
        serializedName: "properties.hostCaching",
        type: {
          name: "String"
        }
      },
      managedDiskId: {
        serializedName: "properties.managedDiskId",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uniqueIdentifier: {
        serializedName: "properties.uniqueIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DtlEnvironment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DtlEnvironment",
    modelProperties: {
      ...Resource.type.modelProperties,
      deploymentProperties: {
        serializedName: "properties.deploymentProperties",
        type: {
          name: "Composite",
          className: "EnvironmentDeploymentProperties"
        }
      },
      armTemplateDisplayName: {
        serializedName: "properties.armTemplateDisplayName",
        type: {
          name: "String"
        }
      },
      resourceGroupId: {
        serializedName: "properties.resourceGroupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdByUser: {
        serializedName: "properties.createdByUser",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uniqueIdentifier: {
        serializedName: "properties.uniqueIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Secret: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Secret",
    modelProperties: {
      ...Resource.type.modelProperties,
      value: {
        serializedName: "properties.value",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uniqueIdentifier: {
        serializedName: "properties.uniqueIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicableSchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicableSchedule",
    modelProperties: {
      ...Resource.type.modelProperties,
      labVmsShutdown: {
        serializedName: "properties.labVmsShutdown",
        type: {
          name: "Composite",
          className: "Schedule"
        }
      },
      labVmsStartup: {
        serializedName: "properties.labVmsStartup",
        type: {
          name: "Composite",
          className: "Schedule"
        }
      }
    }
  }
};

export const ServiceFabric: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceFabric",
    modelProperties: {
      ...Resource.type.modelProperties,
      externalServiceFabricId: {
        serializedName: "properties.externalServiceFabricId",
        type: {
          name: "String"
        }
      },
      environmentId: {
        serializedName: "properties.environmentId",
        type: {
          name: "String"
        }
      },
      applicableSchedule: {
        serializedName: "properties.applicableSchedule",
        type: {
          name: "Composite",
          className: "ApplicableSchedule"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uniqueIdentifier: {
        serializedName: "properties.uniqueIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LabVirtualMachine: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LabVirtualMachine",
    modelProperties: {
      ...Resource.type.modelProperties,
      notes: {
        serializedName: "properties.notes",
        type: {
          name: "String"
        }
      },
      ownerObjectId: {
        defaultValue: "dynamicValue",
        serializedName: "properties.ownerObjectId",
        type: {
          name: "String"
        }
      },
      ownerUserPrincipalName: {
        serializedName: "properties.ownerUserPrincipalName",
        type: {
          name: "String"
        }
      },
      createdByUserId: {
        serializedName: "properties.createdByUserId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdByUser: {
        serializedName: "properties.createdByUser",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdDate: {
        serializedName: "properties.createdDate",
        type: {
          name: "DateTime"
        }
      },
      computeId: {
        serializedName: "properties.computeId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      customImageId: {
        serializedName: "properties.customImageId",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "properties.osType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "properties.size",
        type: {
          name: "String"
        }
      },
      userName: {
        serializedName: "properties.userName",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "properties.password",
        type: {
          name: "String"
        }
      },
      sshKey: {
        serializedName: "properties.sshKey",
        type: {
          name: "String"
        }
      },
      isAuthenticationWithSshKey: {
        serializedName: "properties.isAuthenticationWithSshKey",
        type: {
          name: "Boolean"
        }
      },
      fqdn: {
        serializedName: "properties.fqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      labSubnetName: {
        serializedName: "properties.labSubnetName",
        type: {
          name: "String"
        }
      },
      labVirtualNetworkId: {
        serializedName: "properties.labVirtualNetworkId",
        type: {
          name: "String"
        }
      },
      disallowPublicIpAddress: {
        defaultValue: false,
        serializedName: "properties.disallowPublicIpAddress",
        type: {
          name: "Boolean"
        }
      },
      artifacts: {
        serializedName: "properties.artifacts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ArtifactInstallProperties"
            }
          }
        }
      },
      artifactDeploymentStatus: {
        serializedName: "properties.artifactDeploymentStatus",
        type: {
          name: "Composite",
          className: "ArtifactDeploymentStatusProperties"
        }
      },
      galleryImageReference: {
        serializedName: "properties.galleryImageReference",
        type: {
          name: "Composite",
          className: "GalleryImageReference"
        }
      },
      planId: {
        serializedName: "properties.planId",
        type: {
          name: "String"
        }
      },
      computeVm: {
        serializedName: "properties.computeVm",
        type: {
          name: "Composite",
          className: "ComputeVmProperties"
        }
      },
      networkInterface: {
        serializedName: "properties.networkInterface",
        type: {
          name: "Composite",
          className: "NetworkInterfaceProperties"
        }
      },
      applicableSchedule: {
        serializedName: "properties.applicableSchedule",
        type: {
          name: "Composite",
          className: "ApplicableSchedule"
        }
      },
      expirationDate: {
        serializedName: "properties.expirationDate",
        type: {
          name: "DateTime"
        }
      },
      allowClaim: {
        defaultValue: false,
        serializedName: "properties.allowClaim",
        type: {
          name: "Boolean"
        }
      },
      storageType: {
        defaultValue: "labStorageType",
        serializedName: "properties.storageType",
        type: {
          name: "String"
        }
      },
      virtualMachineCreationSource: {
        serializedName: "properties.virtualMachineCreationSource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      environmentId: {
        serializedName: "properties.environmentId",
        type: {
          name: "String"
        }
      },
      dataDiskParameters: {
        serializedName: "properties.dataDiskParameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataDiskProperties"
            }
          }
        }
      },
      scheduleParameters: {
        serializedName: "properties.scheduleParameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScheduleCreationParameter"
            }
          }
        }
      },
      lastKnownPowerState: {
        serializedName: "properties.lastKnownPowerState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uniqueIdentifier: {
        serializedName: "properties.uniqueIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetwork: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetwork",
    modelProperties: {
      ...Resource.type.modelProperties,
      allowedSubnets: {
        serializedName: "properties.allowedSubnets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Subnet"
            }
          }
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      externalProviderResourceId: {
        serializedName: "properties.externalProviderResourceId",
        type: {
          name: "String"
        }
      },
      externalSubnets: {
        serializedName: "properties.externalSubnets",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExternalSubnet"
            }
          }
        }
      },
      subnetOverrides: {
        serializedName: "properties.subnetOverrides",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubnetOverride"
            }
          }
        }
      },
      createdDate: {
        serializedName: "properties.createdDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uniqueIdentifier: {
        serializedName: "properties.uniqueIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ArtifactSourceFragment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArtifactSourceFragment",
    modelProperties: {
      ...UpdateResource.type.modelProperties
    }
  }
};

export const CustomImageFragment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomImageFragment",
    modelProperties: {
      ...UpdateResource.type.modelProperties
    }
  }
};

export const FormulaFragment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FormulaFragment",
    modelProperties: {
      ...UpdateResource.type.modelProperties
    }
  }
};

export const NotificationChannelFragment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NotificationChannelFragment",
    modelProperties: {
      ...UpdateResource.type.modelProperties
    }
  }
};

export const PolicyFragment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyFragment",
    modelProperties: {
      ...UpdateResource.type.modelProperties
    }
  }
};

export const ScheduleFragment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScheduleFragment",
    modelProperties: {
      ...UpdateResource.type.modelProperties
    }
  }
};

export const UserFragment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserFragment",
    modelProperties: {
      ...UpdateResource.type.modelProperties
    }
  }
};

export const DiskFragment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskFragment",
    modelProperties: {
      ...UpdateResource.type.modelProperties
    }
  }
};

export const DtlEnvironmentFragment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DtlEnvironmentFragment",
    modelProperties: {
      ...UpdateResource.type.modelProperties
    }
  }
};

export const SecretFragment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecretFragment",
    modelProperties: {
      ...UpdateResource.type.modelProperties
    }
  }
};

export const ServiceFabricFragment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceFabricFragment",
    modelProperties: {
      ...UpdateResource.type.modelProperties
    }
  }
};

export const LabVirtualMachineFragment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LabVirtualMachineFragment",
    modelProperties: {
      ...UpdateResource.type.modelProperties
    }
  }
};

export const VirtualNetworkFragment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkFragment",
    modelProperties: {
      ...UpdateResource.type.modelProperties
    }
  }
};

export const LabFragment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LabFragment",
    modelProperties: {
      ...UpdateResource.type.modelProperties
    }
  }
};

export const ApplicableScheduleFragment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicableScheduleFragment",
    modelProperties: {
      ...UpdateResource.type.modelProperties
    }
  }
};
