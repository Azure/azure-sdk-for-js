/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { MetricsBatch } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureMonitorMetricBatchContext } from "../azureMonitorMetricBatchContext.js";
import {
  ResourceIdList,
  MetricsBatchBatchOptionalParams,
  MetricsBatchBatchResponse
} from "../models/index.js";

/** Class containing MetricsBatch operations. */
export class MetricsBatchImpl implements MetricsBatch {
  private readonly client: AzureMonitorMetricBatchContext;

  /**
   * Initialize a new instance of the class MetricsBatch class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMonitorMetricBatchContext) {
    this.client = client;
  }

  /**
   * Lists the metric values for multiple resources.
   * @param subscriptionId The subscription identifier for the resources in this batch.
   * @param metricnamespace Metric namespace that contains the requested metric names.
   * @param metricnames The names of the metrics (comma separated) to retrieve.
   * @param batchRequest Metrics batch body including the list of resource ids
   * @param options The options parameters.
   */
  batch(
    subscriptionId: string,
    metricnamespace: string,
    metricnames: string[],
    batchRequest: ResourceIdList,
    options?: MetricsBatchBatchOptionalParams
  ): Promise<MetricsBatchBatchResponse> {
    return this.client.sendOperationRequest(
      { subscriptionId, metricnamespace, metricnames, batchRequest, options },
      batchOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const batchOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/metrics:getBatch",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MetricResultsResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.MetricsBatchBatchExceptionHeaders
    }
  },
  requestBody: Parameters.batchRequest,
  queryParameters: [
    Parameters.starttime,
    Parameters.endtime,
    Parameters.interval,
    Parameters.metricnamespace,
    Parameters.metricnames,
    Parameters.aggregation,
    Parameters.top,
    Parameters.orderby,
    Parameters.filter,
    Parameters.rollupby,
    Parameters.apiVersion
  ],
  urlParameters: [Parameters.endpoint, Parameters.subscriptionId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
