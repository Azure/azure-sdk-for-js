/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/diagnosticSettingsOperationsMappers";
import * as Parameters from "../models/parameters";
import { MonitorManagementClientContext } from "../monitorManagementClientContext";

/** Class representing a DiagnosticSettingsOperations. */
export class DiagnosticSettingsOperations {
  private readonly client: MonitorManagementClientContext;

  /**
   * Create a DiagnosticSettingsOperations.
   * @param {MonitorManagementClientContext} client Reference to the service client.
   */
  constructor(client: MonitorManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets the active diagnostic settings for the specified resource.
   * @param resourceUri The identifier of the resource.
   * @param name The name of the diagnostic setting.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticSettingsGetResponse>
   */
  get(resourceUri: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticSettingsGetResponse>;
  /**
   * @param resourceUri The identifier of the resource.
   * @param name The name of the diagnostic setting.
   * @param callback The callback
   */
  get(resourceUri: string, name: string, callback: msRest.ServiceCallback<Models.DiagnosticSettingsResource>): void;
  /**
   * @param resourceUri The identifier of the resource.
   * @param name The name of the diagnostic setting.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceUri: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiagnosticSettingsResource>): void;
  get(resourceUri: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiagnosticSettingsResource>, callback?: msRest.ServiceCallback<Models.DiagnosticSettingsResource>): Promise<Models.DiagnosticSettingsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceUri,
        name,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.DiagnosticSettingsGetResponse>;
  }

  /**
   * Creates or updates diagnostic settings for the specified resource.
   * @param resourceUri The identifier of the resource.
   * @param parameters Parameters supplied to the operation.
   * @param name The name of the diagnostic setting.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticSettingsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceUri: string, parameters: Models.DiagnosticSettingsResource, name: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticSettingsCreateOrUpdateResponse>;
  /**
   * @param resourceUri The identifier of the resource.
   * @param parameters Parameters supplied to the operation.
   * @param name The name of the diagnostic setting.
   * @param callback The callback
   */
  createOrUpdate(resourceUri: string, parameters: Models.DiagnosticSettingsResource, name: string, callback: msRest.ServiceCallback<Models.DiagnosticSettingsResource>): void;
  /**
   * @param resourceUri The identifier of the resource.
   * @param parameters Parameters supplied to the operation.
   * @param name The name of the diagnostic setting.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceUri: string, parameters: Models.DiagnosticSettingsResource, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiagnosticSettingsResource>): void;
  createOrUpdate(resourceUri: string, parameters: Models.DiagnosticSettingsResource, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiagnosticSettingsResource>, callback?: msRest.ServiceCallback<Models.DiagnosticSettingsResource>): Promise<Models.DiagnosticSettingsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceUri,
        parameters,
        name,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.DiagnosticSettingsCreateOrUpdateResponse>;
  }

  /**
   * Deletes existing diagnostic settings for the specified resource.
   * @param resourceUri The identifier of the resource.
   * @param name The name of the diagnostic setting.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceUri: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceUri The identifier of the resource.
   * @param name The name of the diagnostic setting.
   * @param callback The callback
   */
  deleteMethod(resourceUri: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceUri The identifier of the resource.
   * @param name The name of the diagnostic setting.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceUri: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceUri: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceUri,
        name,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Gets the active diagnostic settings list for the specified resource.
   * @param resourceUri The identifier of the resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticSettingsListResponse>
   */
  list(resourceUri: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticSettingsListResponse>;
  /**
   * @param resourceUri The identifier of the resource.
   * @param callback The callback
   */
  list(resourceUri: string, callback: msRest.ServiceCallback<Models.DiagnosticSettingsResourceCollection>): void;
  /**
   * @param resourceUri The identifier of the resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceUri: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiagnosticSettingsResourceCollection>): void;
  list(resourceUri: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiagnosticSettingsResourceCollection>, callback?: msRest.ServiceCallback<Models.DiagnosticSettingsResourceCollection>): Promise<Models.DiagnosticSettingsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceUri,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.DiagnosticSettingsListResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{resourceUri}/providers/microsoft.insights/diagnosticSettings/{name}",
  urlParameters: [
    Parameters.resourceUri,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticSettingsResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{resourceUri}/providers/microsoft.insights/diagnosticSettings/{name}",
  urlParameters: [
    Parameters.resourceUri,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.DiagnosticSettingsResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticSettingsResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "{resourceUri}/providers/microsoft.insights/diagnosticSettings/{name}",
  urlParameters: [
    Parameters.resourceUri,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{resourceUri}/providers/microsoft.insights/diagnosticSettings",
  urlParameters: [
    Parameters.resourceUri
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticSettingsResourceCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
