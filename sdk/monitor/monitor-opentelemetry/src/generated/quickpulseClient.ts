/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import {
  PipelineRequest,
  PipelineResponse,
  SendRequest,
} from "@azure/core-rest-pipeline";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import {
  QuickpulseClientOptionalParams,
  IsSubscribedOptionalParams,
  IsSubscribedResponse,
  PublishOptionalParams,
  PublishResponse,
} from "./models";

export class QuickpulseClient extends coreClient.ServiceClient {
  apiVersion: string;

  /**
   * Initializes a new instance of the QuickpulseClient class.
   * @param options The parameter options
   */
  constructor(options?: QuickpulseClientOptionalParams) {
    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: QuickpulseClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
    };

    const packageDetails = `azsdk-js-monitor-opentelemetry/1.0.0-beta.0`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix,
      },
      endpoint: options.endpoint ?? options.baseUri ?? "{endpoint}",
    };
    super(optionsWithDefaults);

    // Assigning values to Constant parameters
    this.apiVersion = options.apiVersion || "2024-04-01-preview";
    this.addCustomApiVersionPolicy(options.apiVersion);
  }

  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
  private addCustomApiVersionPolicy(apiVersion?: string) {
    if (!apiVersion) {
      return;
    }
    const apiVersionPolicy = {
      name: "CustomApiVersionPolicy",
      async sendRequest(
        request: PipelineRequest,
        next: SendRequest,
      ): Promise<PipelineResponse> {
        const param = request.url.split("?");
        if (param.length > 1) {
          const newParams = param[1].split("&").map((item) => {
            if (item.indexOf("api-version") > -1) {
              return "api-version=" + apiVersion;
            } else {
              return item;
            }
          });
          request.url = param[0] + "?" + newParams.join("&");
        }
        return next(request);
      },
    };
    this.pipeline.addPolicy(apiVersionPolicy);
  }

  /**
   * Determine whether there is any subscription to the metrics and documents.
   * @param endpoint The endpoint of the Live Metrics service.
   * @param ikey The instrumentation key of the target Application Insights component for which the
   *             client checks whether there's any subscription to it.
   * @param options The options parameters.
   */
  isSubscribed(
    endpoint: string,
    ikey: string,
    options?: IsSubscribedOptionalParams,
  ): Promise<IsSubscribedResponse> {
    return this.sendOperationRequest(
      { endpoint, ikey, options },
      isSubscribedOperationSpec,
    );
  }

  /**
   * Publish live metrics to the Live Metrics service when there is an active subscription to the
   * metrics.
   * @param endpoint The endpoint of the Live Metrics service.
   * @param ikey The instrumentation key of the target Application Insights component for which the
   *             client checks whether there's any subscription to it.
   * @param options The options parameters.
   */
  publish(
    endpoint: string,
    ikey: string,
    options?: PublishOptionalParams,
  ): Promise<PublishResponse> {
    return this.sendOperationRequest(
      { endpoint, ikey, options },
      publishOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const isSubscribedOperationSpec: coreClient.OperationSpec = {
  path: "/QuickPulseService.svc/ping",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CollectionConfigurationInfo,
      headersMapper: Mappers.QuickpulseClientIsSubscribedHeaders,
    },
    default: {
      bodyMapper: Mappers.ServiceError,
    },
  },
  requestBody: Parameters.monitoringDataPoint,
  queryParameters: [Parameters.apiVersion, Parameters.ikey],
  urlParameters: [Parameters.endpoint],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.transmissionTime,
    Parameters.machineName,
    Parameters.instanceName,
    Parameters.streamId,
    Parameters.roleName,
    Parameters.invariantVersion,
    Parameters.configurationEtag,
  ],
  mediaType: "json",
  serializer,
};
const publishOperationSpec: coreClient.OperationSpec = {
  path: "/QuickPulseService.svc/post",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CollectionConfigurationInfo,
      headersMapper: Mappers.QuickpulseClientPublishHeaders,
    },
    default: {
      bodyMapper: Mappers.ServiceError,
    },
  },
  requestBody: Parameters.monitoringDataPoints,
  queryParameters: [Parameters.apiVersion, Parameters.ikey],
  urlParameters: [Parameters.endpoint],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.transmissionTime,
    Parameters.configurationEtag,
  ],
  mediaType: "json",
  serializer,
};
