/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import {
  QuickpulseClientOptionalParams,
  PingOptionalParams,
  PingResponse,
  PostOptionalParams,
  PostResponse
} from "./models";

export class QuickpulseClient extends coreClient.ServiceClient {
  host: string;

  /**
   * Initializes a new instance of the QuickpulseClient class.
   * @param options The parameter options
   */
  constructor(options?: QuickpulseClientOptionalParams) {
    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: QuickpulseClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8"
    };

    const packageDetails = `azsdk-js-monitor-opentelemetry/1.0.0-beta.0`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      endpoint: options.endpoint ?? options.baseUri ?? "{Host}"
    };
    super(optionsWithDefaults);

    // Assigning values to Constant parameters
    this.host = options.host || "https://rt.services.visualstudio.com";
  }

  /**
   * SDK ping
   * @param ikey The ikey of the target Application Insights component that displays server info sent by
   *             /QuickPulseService.svc/ping
   * @param options The options parameters.
   */
  ping(ikey: string, options?: PingOptionalParams): Promise<PingResponse> {
    return this.sendOperationRequest({ ikey, options }, pingOperationSpec);
  }

  /**
   * SDK post
   * @param ikey The ikey of the target Application Insights component that displays metrics and
   *             documents sent by /QuickPulseService.svc/post
   * @param options The options parameters.
   */
  post(ikey: string, options?: PostOptionalParams): Promise<PostResponse> {
    return this.sendOperationRequest({ ikey, options }, postOperationSpec);
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const pingOperationSpec: coreClient.OperationSpec = {
  path: "/QuickPulseService.svc/ping",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CollectionConfigurationInfo,
      headersMapper: Mappers.QuickpulseClientPingHeaders
    },
    400: {
      bodyMapper: Mappers.ServiceError
    },
    401: {
      bodyMapper: Mappers.ServiceError
    },
    403: {
      bodyMapper: Mappers.ServiceError
    },
    404: {
      bodyMapper: Mappers.ServiceError
    },
    500: {
      bodyMapper: Mappers.ServiceError
    },
    503: {
      bodyMapper: Mappers.ServiceError
    }
  },
  requestBody: Parameters.monitoringDataPoint,
  queryParameters: [Parameters.ikey, Parameters.apikey],
  urlParameters: [Parameters.host],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.xMsQpsTransmissionTime,
    Parameters.xMsQpsMachineName,
    Parameters.xMsQpsInstanceName,
    Parameters.xMsQpsStreamId,
    Parameters.xMsQpsRoleName,
    Parameters.xMsQpsInvariantVersion,
    Parameters.xMsQpsConfigurationEtag
  ],
  mediaType: "json",
  serializer
};
const postOperationSpec: coreClient.OperationSpec = {
  path: "/QuickPulseService.svc/post",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CollectionConfigurationInfo,
      headersMapper: Mappers.QuickpulseClientPostHeaders
    },
    400: {
      bodyMapper: Mappers.ServiceError
    },
    401: {
      bodyMapper: Mappers.ServiceError
    },
    403: {
      bodyMapper: Mappers.ServiceError
    },
    404: {
      bodyMapper: Mappers.ServiceError
    },
    500: {
      bodyMapper: Mappers.ServiceError
    },
    503: {
      bodyMapper: Mappers.ServiceError
    }
  },
  requestBody: Parameters.monitoringDataPoints,
  queryParameters: [Parameters.ikey, Parameters.apikey],
  urlParameters: [Parameters.host],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.xMsQpsTransmissionTime,
    Parameters.xMsQpsConfigurationEtag
  ],
  mediaType: "json",
  serializer
};
