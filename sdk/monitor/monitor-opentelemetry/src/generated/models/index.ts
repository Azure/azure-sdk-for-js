/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Monitoring data point coming from SDK, which includes metrics, documents and other metadata info. */
export interface MonitoringDataPoint {
  /** AI SDK version. */
  version?: string;
  /** Version/generation of the data contract (MonitoringDataPoint) between SDK and QuickPulse. */
  invariantVersion?: number;
  /** Service instance name where AI SDK lives. */
  instance?: string;
  /** Service role name. */
  roleName?: string;
  /** Computer name where AI SDK lives. */
  machineName?: string;
  /** Identifies an AI SDK as a trusted agent to report metrics and documents. */
  streamId?: string;
  /** Data point generation timestamp. */
  timestamp?: Date;
  /** Timestamp when SDK transmits the metrics and documents to QuickPulse. A 8-byte long type of ticks. */
  transmissionTime?: Date;
  /** True if the current application is an Azure Web App. */
  isWebApp?: boolean;
  /** True if performance counters collection is supported. */
  performanceCollectionSupported?: boolean;
  /** An array of meric data points. */
  metrics?: MetricPoint[];
  /** An array of documents of a specific type {RequestDocumentIngress}, {RemoteDependencyDocumentIngress}, {ExceptionDocumentIngress}, {EventDocumentIngress}, or {TraceDocumentIngress} */
  documents?: DocumentIngress[];
  /** An array of top cpu consumption data point. */
  topCpuProcesses?: ProcessCpuData[];
  /** An array of error while parsing and applying . */
  collectionConfigurationErrors?: CollectionConfigurationError[];
}

/** Metric data point. */
export interface MetricPoint {
  /** Metric name. */
  name?: string;
  /** Metric value. */
  value?: number;
  /** Metric weight. */
  weight?: number;
}

/** Base class of the specific document types. */
export interface DocumentIngress {
  /** Telemetry type. Types not defined in enum will get replaced with a 'Unknown' type. */
  documentType?: DocumentIngressDocumentType;
  /** An array of document streaming ids. Each id identifies a flow of documents customized by UX customers. */
  documentStreamIds?: string[];
  /** Collection of custom properties. */
  properties?: Record<string, unknown>[];
}

/** CPU consumption datapoint. */
export interface ProcessCpuData {
  /** Process name. */
  processName?: string;
  /** CPU consumption percentage. */
  cpuPercentage?: number;
}

/** Represents an error while SDK parsing and applying an instance of CollectionConfigurationInfo. */
export interface CollectionConfigurationError {
  /** Collection configuration error type reported by SDK. */
  collectionConfigurationErrorType?: CollectionConfigurationErrorType;
  /** Error message. */
  message?: string;
  /** Exception that leads to the creation of the configuration error. */
  fullException?: string;
  /** Custom properties to add more information to the error. */
  data?: KeyValuePairString[];
}

export interface KeyValuePairString {
  key?: string;
  value?: string;
}

/** Represents the collection configuration - a customizable description of performance counters, metrics, and full telemetry documents to be collected by the SDK. */
export interface CollectionConfigurationInfo {
  /** An encoded string that indicates whether the collection configuration is changed. */
  etag?: string;
  /** An array of metric configuration info. */
  metrics?: DerivedMetricInfo[];
  /** An array of document stream configuration info. */
  documentStreams?: DocumentStreamInfo[];
  /** Control document quotas for QuickPulse */
  quotaInfo?: QuotaConfigurationInfo;
}

/** A metric configuration set by UX to scope the metrics it's interested in. */
export interface DerivedMetricInfo {
  /** metric configuration identifier. */
  id?: string;
  /** Telemetry type. */
  telemetryType?: string;
  /** A collection of filters to scope metrics that UX needs. */
  filterGroups?: FilterConjunctionGroupInfo[];
  /** Telemetry's metric dimension whose value is to be aggregated. Example values: Duration, Count(),... */
  projection?: string;
  /** Aggregation type. */
  aggregation?: DerivedMetricInfoAggregation;
}

/** An AND-connected group of FilterInfo objects. */
export interface FilterConjunctionGroupInfo {
  filters?: FilterInfo[];
}

/** A filter set on UX */
export interface FilterInfo {
  /** dimension name of the filter */
  fieldName?: string;
  /** Operator of the filter */
  predicate?: FilterInfoPredicate;
  comparand?: string;
}

/** Configurations/filters set by UX to scope the document/telemetry it's interested in. */
export interface DocumentStreamInfo {
  /** Identifier of the document stream initiated by a UX. */
  id?: string;
  /** Gets or sets an OR-connected collection of filter groups. */
  documentFilterGroups?: DocumentFilterConjunctionGroupInfo[];
}

/** A collection of filters for a specificy telemetry type. */
export interface DocumentFilterConjunctionGroupInfo {
  /** Telemetry type. */
  telemetryType?: DocumentFilterConjunctionGroupInfoTelemetryType;
  /** An AND-connected group of FilterInfo objects. */
  filters?: FilterConjunctionGroupInfo;
}

/** Control document quotas for QuickPulse */
export interface QuotaConfigurationInfo {
  /** Initial quota */
  initialQuota?: number;
  /** Max quota */
  maxQuota: number;
  /** Quota accrual rate per second */
  quotaAccrualRatePerSec: number;
}

/** Optional http response body, whose existence carries additional error descriptions. */
export interface ServiceError {
  /** A guid of the request that triggers the service error. */
  requestId?: string;
  /** Service error response date time. */
  responseDateTime?: Date;
  /** Error code. */
  code?: string;
  /** Error message. */
  message?: string;
  /** Message of the exception that triggers the error response. */
  exception?: string;
}

/** Request type document */
export interface RequestDocumentIngress extends DocumentIngress {
  /** Name of the request, e.g., 'GET /values/{id}'. */
  name?: string;
  /** Request URL with all query string parameters. */
  url?: string;
  /** Result of a request execution. For http requestss, it could be some HTTP status code. */
  responseCode?: string;
  /** Request duration in ISO 8601 duration format, i.e., P[n]Y[n]M[n]DT[n]H[n]M[n]S or P[n]W. */
  duration?: string;
}

/** Dependency type document */
export interface RemoteDependencyDocumentIngress extends DocumentIngress {
  /** Name of the command initiated with this dependency call, e.g., GET /username */
  name?: string;
  /** URL of the dependency call to the target, with all query string parameters */
  commandName?: string;
  /** Result code of a dependency call. Examples are SQL error code and HTTP status code. */
  resultCode?: string;
  /** Request duration in ISO 8601 duration format, i.e., P[n]Y[n]M[n]DT[n]H[n]M[n]S or P[n]W. */
  duration?: string;
}

/** Exception type document */
export interface ExceptionDocumentIngress extends DocumentIngress {
  /** Exception type name. */
  exceptionType?: string;
  /** Exception message. */
  exceptionMessage?: string;
}

/** Event type document. */
export interface EventDocumentIngress extends DocumentIngress {
  /** Event name. */
  name?: string;
}

/** Trace type name. */
export interface TraceDocumentIngress extends DocumentIngress {
  /** Trace message */
  message?: string;
}

/** Defines headers for QuickpulseClient_ping operation. */
export interface QuickpulseClientPingHeaders {
  /** A boolean flag indicating whether there are active user sessions 'watching' the SDK's ikey. If true, SDK must start collecting data and post'ing it to QuickPulse. Otherwise, SDK must keep ping'ing. */
  xMsQpsSubscribed?: string;
  /** An encoded string that indicates whether the collection configuration is changed. */
  xMsQpsConfigurationEtag?: string;
  /** Recommended time (in milliseconds) before an SDK should ping the service again. This header exists only when ikey is not watched by UX. */
  xMsQpsServicePollingIntervalHint?: number;
  /** Contains a URI of the service endpoint that an SDK must permanently use for the particular resource. This header exists only when SDK is talking to QuickPulse's global endpoint. */
  xMsQpsServiceEndpointRedirectV2?: string;
}

/** Defines headers for QuickpulseClient_post operation. */
export interface QuickpulseClientPostHeaders {
  /** Tells SDK whether the input ikey is subscribed to by UX. */
  xMsQpsSubscribed?: string;
  /** An encoded string that indicates whether the collection configuration is changed. */
  xMsQpsConfigurationEtag?: string;
  /** A 8-byte long type of milliseconds QuickPulse suggests SDK polling period. */
  xMsQpsServicePollingIntervalHint?: number;
  /** All official SDKs now uses v2 header. Use v2 instead. */
  xMsQpsServiceEndpointRedirect?: string;
  /** URI of the service endpoint that an SDK must permanently use for the particular resource. */
  xMsQpsServiceEndpointRedirectV2?: string;
}

/** Known values of {@link DocumentIngressDocumentType} that the service accepts. */
export enum KnownDocumentIngressDocumentType {
  /** Request */
  Request = "Request",
  /** RemoteDependency */
  RemoteDependency = "RemoteDependency",
  /** Exception */
  Exception = "Exception",
  /** Event */
  Event = "Event",
  /** Trace */
  Trace = "Trace"
}

/**
 * Defines values for DocumentIngressDocumentType. \
 * {@link KnownDocumentIngressDocumentType} can be used interchangeably with DocumentIngressDocumentType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Request** \
 * **RemoteDependency** \
 * **Exception** \
 * **Event** \
 * **Trace**
 */
export type DocumentIngressDocumentType = string;

/** Known values of {@link CollectionConfigurationErrorType} that the service accepts. */
export enum KnownCollectionConfigurationErrorType {
  /** Unknown */
  Unknown = "Unknown",
  /** PerformanceCounterParsing */
  PerformanceCounterParsing = "PerformanceCounterParsing",
  /** PerformanceCounterUnexpected */
  PerformanceCounterUnexpected = "PerformanceCounterUnexpected",
  /** PerformanceCounterDuplicateIds */
  PerformanceCounterDuplicateIds = "PerformanceCounterDuplicateIds",
  /** DocumentStreamDuplicateIds */
  DocumentStreamDuplicateIds = "DocumentStreamDuplicateIds",
  /** DocumentStreamFailureToCreate */
  DocumentStreamFailureToCreate = "DocumentStreamFailureToCreate",
  /** DocumentStreamFailureToCreateFilterUnexpected */
  DocumentStreamFailureToCreateFilterUnexpected = "DocumentStreamFailureToCreateFilterUnexpected",
  /** MetricDuplicateIds */
  MetricDuplicateIds = "MetricDuplicateIds",
  /** MetricTelemetryTypeUnsupported */
  MetricTelemetryTypeUnsupported = "MetricTelemetryTypeUnsupported",
  /** MetricFailureToCreate */
  MetricFailureToCreate = "MetricFailureToCreate",
  /** MetricFailureToCreateFilterUnexpected */
  MetricFailureToCreateFilterUnexpected = "MetricFailureToCreateFilterUnexpected",
  /** FilterFailureToCreateUnexpected */
  FilterFailureToCreateUnexpected = "FilterFailureToCreateUnexpected",
  /** CollectionConfigurationFailureToCreateUnexpected */
  CollectionConfigurationFailureToCreateUnexpected = "CollectionConfigurationFailureToCreateUnexpected"
}

/**
 * Defines values for CollectionConfigurationErrorType. \
 * {@link KnownCollectionConfigurationErrorType} can be used interchangeably with CollectionConfigurationErrorType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **PerformanceCounterParsing** \
 * **PerformanceCounterUnexpected** \
 * **PerformanceCounterDuplicateIds** \
 * **DocumentStreamDuplicateIds** \
 * **DocumentStreamFailureToCreate** \
 * **DocumentStreamFailureToCreateFilterUnexpected** \
 * **MetricDuplicateIds** \
 * **MetricTelemetryTypeUnsupported** \
 * **MetricFailureToCreate** \
 * **MetricFailureToCreateFilterUnexpected** \
 * **FilterFailureToCreateUnexpected** \
 * **CollectionConfigurationFailureToCreateUnexpected**
 */
export type CollectionConfigurationErrorType = string;

/** Known values of {@link FilterInfoPredicate} that the service accepts. */
export enum KnownFilterInfoPredicate {
  /** Equal */
  Equal = "Equal",
  /** NotEqual */
  NotEqual = "NotEqual",
  /** LessThan */
  LessThan = "LessThan",
  /** GreaterThan */
  GreaterThan = "GreaterThan",
  /** LessThanOrEqual */
  LessThanOrEqual = "LessThanOrEqual",
  /** GreaterThanOrEqual */
  GreaterThanOrEqual = "GreaterThanOrEqual",
  /** Contains */
  Contains = "Contains",
  /** DoesNotContain */
  DoesNotContain = "DoesNotContain"
}

/**
 * Defines values for FilterInfoPredicate. \
 * {@link KnownFilterInfoPredicate} can be used interchangeably with FilterInfoPredicate,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Equal** \
 * **NotEqual** \
 * **LessThan** \
 * **GreaterThan** \
 * **LessThanOrEqual** \
 * **GreaterThanOrEqual** \
 * **Contains** \
 * **DoesNotContain**
 */
export type FilterInfoPredicate = string;

/** Known values of {@link DerivedMetricInfoAggregation} that the service accepts. */
export enum KnownDerivedMetricInfoAggregation {
  /** Avg */
  Avg = "Avg",
  /** Sum */
  Sum = "Sum",
  /** Min */
  Min = "Min",
  /** Max */
  Max = "Max"
}

/**
 * Defines values for DerivedMetricInfoAggregation. \
 * {@link KnownDerivedMetricInfoAggregation} can be used interchangeably with DerivedMetricInfoAggregation,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Avg** \
 * **Sum** \
 * **Min** \
 * **Max**
 */
export type DerivedMetricInfoAggregation = string;

/** Known values of {@link DocumentFilterConjunctionGroupInfoTelemetryType} that the service accepts. */
export enum KnownDocumentFilterConjunctionGroupInfoTelemetryType {
  /** Request */
  Request = "Request",
  /** Dependency */
  Dependency = "Dependency",
  /** Exception */
  Exception = "Exception",
  /** Event */
  Event = "Event",
  /** Metric */
  Metric = "Metric",
  /** PerformanceCounter */
  PerformanceCounter = "PerformanceCounter",
  /** Trace */
  Trace = "Trace"
}

/**
 * Defines values for DocumentFilterConjunctionGroupInfoTelemetryType. \
 * {@link KnownDocumentFilterConjunctionGroupInfoTelemetryType} can be used interchangeably with DocumentFilterConjunctionGroupInfoTelemetryType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Request** \
 * **Dependency** \
 * **Exception** \
 * **Event** \
 * **Metric** \
 * **PerformanceCounter** \
 * **Trace**
 */
export type DocumentFilterConjunctionGroupInfoTelemetryType = string;

/** Optional parameters. */
export interface PingOptionalParams extends coreClient.OperationOptions {
  /** Data contract between SDK and QuickPulse. /QuickPulseService.svc/ping uses this as a backup source of machine name, instance name and invariant version. */
  monitoringDataPoint?: MonitoringDataPoint;
  /** Deprecated. An alternative way to pass api key. Use AAD auth instead. */
  apikey?: string;
  /** Timestamp when SDK transmits the metrics and documents to QuickPulse. A 8-byte long type of ticks. */
  xMsQpsTransmissionTime?: number;
  /** Computer name where AI SDK lives. QuickPulse uses machine name with instance name as a backup. */
  xMsQpsMachineName?: string;
  /** Service instance name where AI SDK lives. QuickPulse uses machine name with instance name as a backup. */
  xMsQpsInstanceName?: string;
  /** Identifies an AI SDK as trusted agent to report metrics and documents. */
  xMsQpsStreamId?: string;
  /** Cloud role name for which SDK reports metrics and documents. */
  xMsQpsRoleName?: string;
  /** Version/generation of the data contract (MonitoringDataPoint) between SDK and QuickPulse. */
  xMsQpsInvariantVersion?: string;
  /** An encoded string that indicates whether the collection configuration is changed. */
  xMsQpsConfigurationEtag?: string;
}

/** Contains response data for the ping operation. */
export type PingResponse = QuickpulseClientPingHeaders &
  CollectionConfigurationInfo;

/** Optional parameters. */
export interface PostOptionalParams extends coreClient.OperationOptions {
  /** An alternative way to pass api key. Deprecated. Use AAD authentication instead. */
  apikey?: string;
  /** Timestamp when SDK transmits the metrics and documents to QuickPulse. A 8-byte long type of ticks. */
  xMsQpsTransmissionTime?: number;
  /** An encoded string that indicates whether the collection configuration is changed. */
  xMsQpsConfigurationEtag?: string;
  /** Data contract between SDK and QuickPulse. /QuickPulseService.svc/post uses this to publish metrics and documents to the backend QuickPulse server. */
  monitoringDataPoints?: MonitoringDataPoint[];
}

/** Contains response data for the post operation. */
export type PostResponse = QuickpulseClientPostHeaders &
  CollectionConfigurationInfo;

/** Optional parameters. */
export interface QuickpulseClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** QuickPulse endpoint: https://rt.services.visualstudio.com */
  host?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
