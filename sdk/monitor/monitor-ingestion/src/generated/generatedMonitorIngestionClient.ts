/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import { GeneratedMonitorIngestionClientContext } from "./generatedMonitorIngestionClientContext";
import {
  GeneratedMonitorIngestionClientOptionalParams,
  UploadOptionalParams
} from "./models";

/** @internal */
export class GeneratedMonitorIngestionClient extends GeneratedMonitorIngestionClientContext {
  /**
   * Initializes a new instance of the GeneratedMonitorIngestionClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param endpoint The Data Collection Endpoint for the Data Collection Rule, for example
   *                 https://dce-name.eastus-2.ingest.monitor.azure.com.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    endpoint: string,
    options?: GeneratedMonitorIngestionClientOptionalParams
  ) {
    super(credentials, endpoint, options);
  }

  /**
   * See error response code and error response message for more detail.
   * @param ruleId The immutable Id of the Data Collection Rule resource.
   * @param stream The streamDeclaration name as defined in the Data Collection Rule.
   * @param body An array of objects matching the schema defined by the provided stream.
   * @param options The options parameters.
   */
  upload(
    ruleId: string,
    stream: string,
    body: Record<string, unknown>[],
    options?: UploadOptionalParams
  ): Promise<void> {
    return this.sendOperationRequest(
      { ruleId, stream, body, options },
      uploadOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const uploadOperationSpec: coreClient.OperationSpec = {
  path: "/dataCollectionRules/{ruleId}/streams/{stream}",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper:
        Mappers.GeneratedMonitorIngestionClientUploadExceptionHeaders
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.ruleId, Parameters.stream],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.contentEncoding,
    Parameters.xMsClientRequestId
  ],
  mediaType: "json",
  serializer
};
