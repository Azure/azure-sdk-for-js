/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  record,
  RecorderEnvironmentSetup,
  Recorder,
  delay,
  isPlaybackMode
} from "@azure-tools/test-recorder";
import * as assert from "assert";
import { ClientSecretCredential } from "@azure/identity";
import { MonitorClient } from "../src/monitorClient";
import { LogicManagementClient } from "@azure/arm-logic";
import { StorageManagementClient } from "@azure/arm-storage";
import { EventHubManagementClient } from "@azure/arm-eventhub";
import { OperationalInsightsManagementClient } from "@azure/arm-operationalinsights";

const recorderEnvSetup: RecorderEnvironmentSetup = {
  replaceableVariables: {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
  },
  customizationsOnRecordings: [
    (recording: any): any =>
      recording.replace(
        /"access_token":"[^"]*"/g,
        `"access_token":"access_token"`
      )
  ],
  queryParametersToSkip: []
};

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("Monitor test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: MonitorClient;
  let location: string;
  let resourceGroup: string;
  let workflowName: string;
  let storageAccountName: string;
  let namespaceName: string;
  let authorizationRuleName: string;
  let eventhubName: string;
  let workspaceName: string;
  let logProfileName: string;
  let diagnosticName: string;
  let logic_client: LogicManagementClient;
  let storage_client: StorageManagementClient;
  let eventhub_client: EventHubManagementClient;
  let op_client: OperationalInsightsManagementClient;
  let workflowsId: string;
  let storageId: string;
  let authorizationId: string;
  let workspaceId: string;

  beforeEach(async function () {
    recorder = record(this, recorderEnvSetup);
    subscriptionId = env.SUBSCRIPTION_ID || '';
    // This is an example of how the environment variables are used
    const credential = new ClientSecretCredential(
      env.AZURE_TENANT_ID || '',
      env.AZURE_CLIENT_ID,
      env.AZURE_CLIENT_SECRET
    );
    client = new MonitorClient(credential, subscriptionId);
    logic_client = new LogicManagementClient(credential, subscriptionId);
    storage_client = new StorageManagementClient(credential, subscriptionId);
    eventhub_client = new EventHubManagementClient(credential, subscriptionId);
    op_client = new OperationalInsightsManagementClient(credential, subscriptionId);
    location = "eastus";
    resourceGroup = "myjstest";
    workflowName = "myworkflowxxx";
    storageAccountName = "mystorageaccountyyy";
    namespaceName = "mynamespacexxx";
    eventhubName = "myeventhubxxx";
    workspaceName = "myworkspacexxx";
    authorizationRuleName = "myauthorizationRulexxx";
    logProfileName = "mylogProfilexxx";
    diagnosticName = "mydiagnosticxxxx";
  });

  afterEach(async function () {
    await recorder.stop();
  });

  it("Should create diagnosticSettings", async function () {
    const res = await client.diagnosticSettings.createOrUpdate(workflowsId, diagnosticName, {
      storageAccountId: storageId,
      workspaceId: workspaceId,
      eventHubAuthorizationRuleId: authorizationId,
      eventHubName: eventhubName,
      metrics: [],
      logs: [
        {
          category: "WorkflowRuntime",
          enabled: true,
          retentionPolicy: {
            enabled: false,
            days: 0
          }
        }
      ]
    })
    assert.equal(res.name, diagnosticName);
  });
});
