/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import {
  MetricsListAtSubscriptionScopePostOptionalParams,
  SubscriptionScopeMetricsRequestBodyParameters,
  MonitorClient,
} from "@azure/arm-monitor";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";

dotenv.config();

/**
 * This sample demonstrates how to **Lists the metric data for a subscription**. Parameters can be specified on either query params or the body.
 *
 * @summary **Lists the metric data for a subscription**. Parameters can be specified on either query params or the body.
 * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2024-02-01/examples/GetMultiResourceMetric.json
 */
async function postRequestForSubscriptionLevelMetricData() {
  const subscriptionId =
    process.env["MONITOR_SUBSCRIPTION_ID"] ||
    "92d2a2d8-b514-432d-8cc9-a5f9272630d5";
  const region = "westus2";
  const timespan = "2021-06-08T19:00:00Z/2021-06-12T01:00:00Z";
  const interval = "PT6H";
  const metricnames = "Data Disk Max Burst IOPS";
  const aggregation = "count";
  const top = 10;
  const orderby = "count desc";
  const filter = "LUN eq '0' and Microsoft.ResourceId eq '*'";
  const metricnamespace = "microsoft.compute/virtualmachines";
  const autoAdjustTimegrain = true;
  const validateDimensions = false;
  const options: MetricsListAtSubscriptionScopePostOptionalParams = {
    timespan,
    interval,
    metricnames,
    aggregation,
    top,
    orderby,
    filter,
    metricnamespace,
    autoAdjustTimegrain,
    validateDimensions,
  };
  const credential = new DefaultAzureCredential();
  const client = new MonitorClient(credential, subscriptionId);
  const result = await client.metricsOperations.listAtSubscriptionScopePost(
    region,
    options,
  );
  console.log(result);
}

/**
 * This sample demonstrates how to **Lists the metric data for a subscription**. Parameters can be specified on either query params or the body.
 *
 * @summary **Lists the metric data for a subscription**. Parameters can be specified on either query params or the body.
 * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2024-02-01/examples/PostMultiResourceMetricBody.json
 */
async function postRequestForSubscriptionLevelMetricDataUsingBodyParams() {
  const subscriptionId =
    process.env["MONITOR_SUBSCRIPTION_ID"] ||
    "92d2a2d8-b514-432d-8cc9-a5f9272630d5";
  const region = "westus2";
  const body: SubscriptionScopeMetricsRequestBodyParameters = {
    aggregation: "count",
    autoAdjustTimegrain: true,
    filter: "LUN eq '0' and Microsoft.ResourceId eq '*'",
    interval: "PT6H",
    metricNames: "Data Disk Max Burst IOPS",
    metricNamespace: "microsoft.compute/virtualmachines",
    orderBy: "count desc",
    rollUpBy: "LUN",
    timespan: "2021-06-08T19:00:00Z/2021-06-12T01:00:00Z",
    top: 10,
    validateDimensions: false,
  };
  const options: MetricsListAtSubscriptionScopePostOptionalParams = { body };
  const credential = new DefaultAzureCredential();
  const client = new MonitorClient(credential, subscriptionId);
  const result = await client.metricsOperations.listAtSubscriptionScopePost(
    region,
    options,
  );
  console.log(result);
}

/**
 * This sample demonstrates how to **Lists the metric data for a subscription**. Parameters can be specified on either query params or the body.
 *
 * @summary **Lists the metric data for a subscription**. Parameters can be specified on either query params or the body.
 * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2024-02-01/examples/GetMultiResourceMetricMetadata.json
 */
async function postRequestForSubscriptionLevelMetricMetadata() {
  const subscriptionId =
    process.env["MONITOR_SUBSCRIPTION_ID"] ||
    "92d2a2d8-b514-432d-8cc9-a5f9272630d5";
  const region = "westus2";
  const timespan = "2021-06-10T02:23:16.129Z/2021-06-12T02:23:16.129Z";
  const metricnames = "Data Disk Max Burst IOPS";
  const filter = "LUN eq '0'";
  const metricnamespace = "microsoft.compute/virtualmachines";
  const options: MetricsListAtSubscriptionScopePostOptionalParams = {
    timespan,
    metricnames,
    filter,
    metricnamespace,
  };
  const credential = new DefaultAzureCredential();
  const client = new MonitorClient(credential, subscriptionId);
  const result = await client.metricsOperations.listAtSubscriptionScopePost(
    region,
    options,
  );
  console.log(result);
}

async function main() {
  postRequestForSubscriptionLevelMetricData();
  postRequestForSubscriptionLevelMetricDataUsingBodyParams();
  postRequestForSubscriptionLevelMetricMetadata();
}

main().catch(console.error);
