/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
const { MonitorClient } = require("@azure/arm-monitor");
const { DefaultAzureCredential } = require("@azure/identity");

/**
 * This sample demonstrates how to Create a new Activity Log Alert rule or update an existing one.
 *
 * @summary Create a new Activity Log Alert rule or update an existing one.
 * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2020-10-01/examples/ActivityLogAlertRule_CreateOrUpdate.json
 */
async function createOrUpdateAnActivityLogAlertRule() {
  const subscriptionId = "187f412d-1758-44d9-b052-169e2564721d";
  const resourceGroupName = "MyResourceGroup";
  const activityLogAlertName = "SampleActivityLogAlertRule";
  const activityLogAlertRule = {
    description: "Description of sample Activity Log Alert rule.",
    actions: {
      actionGroups: [
        {
          actionGroupId:
            "/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/MyResourceGroup/providers/Microsoft.Insights/actionGroups/SampleActionGroup",
          webhookProperties: { sampleWebhookProperty: "SamplePropertyValue" },
        },
      ],
    },
    condition: {
      allOf: [
        { equals: "Administrative", field: "category" },
        { equals: "Error", field: "level" },
      ],
    },
    enabled: true,
    location: "Global",
    scopes: ["/subscriptions/187f412d-1758-44d9-b052-169e2564721d"],
    tags: {},
  };
  const credential = new DefaultAzureCredential();
  const client = new MonitorClient(credential, subscriptionId);
  const result = await client.activityLogAlerts.createOrUpdate(
    resourceGroupName,
    activityLogAlertName,
    activityLogAlertRule
  );
  console.log(result);
}

createOrUpdateAnActivityLogAlertRule().catch(console.error);

/**
 * This sample demonstrates how to Create a new Activity Log Alert rule or update an existing one.
 *
 * @summary Create a new Activity Log Alert rule or update an existing one.
 * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2020-10-01/examples/ActivityLogAlertRule_CreateOrUpdateRuleWithAnyOfCondition.json
 */
async function createOrUpdateAnActivityLogAlertRuleWithAnyOfCondition() {
  const subscriptionId = "187f412d-1758-44d9-b052-169e2564721d";
  const resourceGroupName = "MyResourceGroup";
  const activityLogAlertName = "SampleActivityLogAlertRuleWithAnyOfCondition";
  const activityLogAlertRule = {
    description: "Description of sample Activity Log Alert rule with 'anyOf' condition.",
    actions: {
      actionGroups: [
        {
          actionGroupId:
            "/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/MyResourceGroup/providers/Microsoft.Insights/actionGroups/SampleActionGroup",
          webhookProperties: { sampleWebhookProperty: "SamplePropertyValue" },
        },
      ],
    },
    condition: {
      allOf: [
        { equals: "ServiceHealth", field: "category" },
        {
          anyOf: [
            { equals: "Incident", field: "properties.incidentType" },
            { equals: "Maintenance", field: "properties.incidentType" },
          ],
        },
      ],
    },
    enabled: true,
    location: "Global",
    scopes: ["subscriptions/187f412d-1758-44d9-b052-169e2564721d"],
    tags: {},
  };
  const credential = new DefaultAzureCredential();
  const client = new MonitorClient(credential, subscriptionId);
  const result = await client.activityLogAlerts.createOrUpdate(
    resourceGroupName,
    activityLogAlertName,
    activityLogAlertRule
  );
  console.log(result);
}

createOrUpdateAnActivityLogAlertRuleWithAnyOfCondition().catch(console.error);

/**
 * This sample demonstrates how to Create a new Activity Log Alert rule or update an existing one.
 *
 * @summary Create a new Activity Log Alert rule or update an existing one.
 * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2020-10-01/examples/ActivityLogAlertRule_CreateOrUpdateRuleWithContainsAny.json
 */
async function createOrUpdateAnActivityLogAlertRuleWithContainsAny() {
  const subscriptionId = "187f412d-1758-44d9-b052-169e2564721d";
  const resourceGroupName = "MyResourceGroup";
  const activityLogAlertName = "SampleActivityLogAlertRuleWithContainsAny";
  const activityLogAlertRule = {
    description: "Description of sample Activity Log Alert rule with 'containsAny'.",
    actions: {
      actionGroups: [
        {
          actionGroupId:
            "/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/MyResourceGroup/providers/Microsoft.Insights/actionGroups/SampleActionGroup",
          webhookProperties: { sampleWebhookProperty: "SamplePropertyValue" },
        },
      ],
    },
    condition: {
      allOf: [
        { equals: "ServiceHealth", field: "category" },
        {
          containsAny: ["North Europe", "West Europe"],
          field: "properties.impactedServices[*].ImpactedRegions[*].RegionName",
        },
      ],
    },
    enabled: true,
    location: "Global",
    scopes: ["subscriptions/187f412d-1758-44d9-b052-169e2564721d"],
    tags: {},
  };
  const credential = new DefaultAzureCredential();
  const client = new MonitorClient(credential, subscriptionId);
  const result = await client.activityLogAlerts.createOrUpdate(
    resourceGroupName,
    activityLogAlertName,
    activityLogAlertRule
  );
  console.log(result);
}

createOrUpdateAnActivityLogAlertRuleWithContainsAny().catch(console.error);
