/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/activityLogAlertsMappers";
import * as Parameters from "../models/parameters";
import { MonitorManagementClientContext } from "../monitorManagementClientContext";

/** Class representing a ActivityLogAlerts. */
export class ActivityLogAlerts {
  private readonly client: MonitorManagementClientContext;

  /**
   * Create a ActivityLogAlerts.
   * @param {MonitorManagementClientContext} client Reference to the service client.
   */
  constructor(client: MonitorManagementClientContext) {
    this.client = client;
  }

  /**
   * Create a new activity log alert or update an existing one.
   * @param resourceGroupName The name of the resource group.
   * @param activityLogAlertName The name of the activity log alert.
   * @param activityLogAlert The activity log alert to create or use for the update.
   * @param [options] The optional parameters
   * @returns Promise<Models.ActivityLogAlertsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, activityLogAlertName: string, activityLogAlert: Models.ActivityLogAlertResource, options?: msRest.RequestOptionsBase): Promise<Models.ActivityLogAlertsCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param activityLogAlertName The name of the activity log alert.
   * @param activityLogAlert The activity log alert to create or use for the update.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, activityLogAlertName: string, activityLogAlert: Models.ActivityLogAlertResource, callback: msRest.ServiceCallback<Models.ActivityLogAlertResource>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param activityLogAlertName The name of the activity log alert.
   * @param activityLogAlert The activity log alert to create or use for the update.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, activityLogAlertName: string, activityLogAlert: Models.ActivityLogAlertResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ActivityLogAlertResource>): void;
  createOrUpdate(resourceGroupName: string, activityLogAlertName: string, activityLogAlert: Models.ActivityLogAlertResource, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ActivityLogAlertResource>, callback?: msRest.ServiceCallback<Models.ActivityLogAlertResource>): Promise<Models.ActivityLogAlertsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        activityLogAlertName,
        activityLogAlert,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.ActivityLogAlertsCreateOrUpdateResponse>;
  }

  /**
   * Get an activity log alert.
   * @param resourceGroupName The name of the resource group.
   * @param activityLogAlertName The name of the activity log alert.
   * @param [options] The optional parameters
   * @returns Promise<Models.ActivityLogAlertsGetResponse>
   */
  get(resourceGroupName: string, activityLogAlertName: string, options?: msRest.RequestOptionsBase): Promise<Models.ActivityLogAlertsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param activityLogAlertName The name of the activity log alert.
   * @param callback The callback
   */
  get(resourceGroupName: string, activityLogAlertName: string, callback: msRest.ServiceCallback<Models.ActivityLogAlertResource>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param activityLogAlertName The name of the activity log alert.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, activityLogAlertName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ActivityLogAlertResource>): void;
  get(resourceGroupName: string, activityLogAlertName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ActivityLogAlertResource>, callback?: msRest.ServiceCallback<Models.ActivityLogAlertResource>): Promise<Models.ActivityLogAlertsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        activityLogAlertName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ActivityLogAlertsGetResponse>;
  }

  /**
   * Delete an activity log alert.
   * @param resourceGroupName The name of the resource group.
   * @param activityLogAlertName The name of the activity log alert.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, activityLogAlertName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param activityLogAlertName The name of the activity log alert.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, activityLogAlertName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param activityLogAlertName The name of the activity log alert.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, activityLogAlertName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, activityLogAlertName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        activityLogAlertName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Updates an existing ActivityLogAlertResource's tags. To update other fields use the
   * CreateOrUpdate method.
   * @param resourceGroupName The name of the resource group.
   * @param activityLogAlertName The name of the activity log alert.
   * @param activityLogAlertPatch Parameters supplied to the operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ActivityLogAlertsUpdateResponse>
   */
  update(resourceGroupName: string, activityLogAlertName: string, activityLogAlertPatch: Models.ActivityLogAlertPatchBody, options?: msRest.RequestOptionsBase): Promise<Models.ActivityLogAlertsUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param activityLogAlertName The name of the activity log alert.
   * @param activityLogAlertPatch Parameters supplied to the operation.
   * @param callback The callback
   */
  update(resourceGroupName: string, activityLogAlertName: string, activityLogAlertPatch: Models.ActivityLogAlertPatchBody, callback: msRest.ServiceCallback<Models.ActivityLogAlertResource>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param activityLogAlertName The name of the activity log alert.
   * @param activityLogAlertPatch Parameters supplied to the operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, activityLogAlertName: string, activityLogAlertPatch: Models.ActivityLogAlertPatchBody, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ActivityLogAlertResource>): void;
  update(resourceGroupName: string, activityLogAlertName: string, activityLogAlertPatch: Models.ActivityLogAlertPatchBody, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ActivityLogAlertResource>, callback?: msRest.ServiceCallback<Models.ActivityLogAlertResource>): Promise<Models.ActivityLogAlertsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        activityLogAlertName,
        activityLogAlertPatch,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.ActivityLogAlertsUpdateResponse>;
  }

  /**
   * Get a list of all activity log alerts in a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.ActivityLogAlertsListBySubscriptionIdResponse>
   */
  listBySubscriptionId(options?: msRest.RequestOptionsBase): Promise<Models.ActivityLogAlertsListBySubscriptionIdResponse>;
  /**
   * @param callback The callback
   */
  listBySubscriptionId(callback: msRest.ServiceCallback<Models.ActivityLogAlertList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionId(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ActivityLogAlertList>): void;
  listBySubscriptionId(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ActivityLogAlertList>, callback?: msRest.ServiceCallback<Models.ActivityLogAlertList>): Promise<Models.ActivityLogAlertsListBySubscriptionIdResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionIdOperationSpec,
      callback) as Promise<Models.ActivityLogAlertsListBySubscriptionIdResponse>;
  }

  /**
   * Get a list of all activity log alerts in a resource group.
   * @param resourceGroupName The name of the resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.ActivityLogAlertsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.ActivityLogAlertsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.ActivityLogAlertList>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ActivityLogAlertList>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ActivityLogAlertList>, callback?: msRest.ServiceCallback<Models.ActivityLogAlertList>): Promise<Models.ActivityLogAlertsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.ActivityLogAlertsListByResourceGroupResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/activityLogAlerts/{activityLogAlertName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.activityLogAlertName
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "activityLogAlert",
    mapper: {
      ...Mappers.ActivityLogAlertResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ActivityLogAlertResource
    },
    201: {
      bodyMapper: Mappers.ActivityLogAlertResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/activityLogAlerts/{activityLogAlertName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.activityLogAlertName
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ActivityLogAlertResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/activityLogAlerts/{activityLogAlertName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.activityLogAlertName
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/activityLogAlerts/{activityLogAlertName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.activityLogAlertName
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "activityLogAlertPatch",
    mapper: {
      ...Mappers.ActivityLogAlertPatchBody,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ActivityLogAlertResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/microsoft.insights/activityLogAlerts",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ActivityLogAlertList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/activityLogAlerts",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ActivityLogAlertList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
