/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const AzureResource: msRest.CompositeMapper = {
  serializedName: "AzureResource",
  type: {
    name: "Composite",
    className: "AzureResource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        defaultValue: 'global',
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AlertRuleLeafCondition: msRest.CompositeMapper = {
  serializedName: "AlertRuleLeafCondition",
  type: {
    name: "Composite",
    className: "AlertRuleLeafCondition",
    modelProperties: {
      field: {
        serializedName: "field",
        type: {
          name: "String"
        }
      },
      equals: {
        serializedName: "equals",
        type: {
          name: "String"
        }
      },
      containsAny: {
        serializedName: "containsAny",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AlertRuleAnyOfOrLeafCondition: msRest.CompositeMapper = {
  serializedName: "AlertRuleAnyOfOrLeafCondition",
  type: {
    name: "Composite",
    className: "AlertRuleAnyOfOrLeafCondition",
    modelProperties: {
      ...AlertRuleLeafCondition.type.modelProperties,
      anyOf: {
        serializedName: "anyOf",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AlertRuleLeafCondition"
            }
          }
        }
      }
    }
  }
};

export const AlertRuleAllOfCondition: msRest.CompositeMapper = {
  serializedName: "AlertRuleAllOfCondition",
  type: {
    name: "Composite",
    className: "AlertRuleAllOfCondition",
    modelProperties: {
      allOf: {
        required: true,
        serializedName: "allOf",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AlertRuleAnyOfOrLeafCondition"
            }
          }
        }
      }
    }
  }
};

export const ActionGroup: msRest.CompositeMapper = {
  serializedName: "ActionGroup",
  type: {
    name: "Composite",
    className: "ActionGroup",
    modelProperties: {
      actionGroupId: {
        required: true,
        serializedName: "actionGroupId",
        type: {
          name: "String"
        }
      },
      webhookProperties: {
        serializedName: "webhookProperties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ActionList: msRest.CompositeMapper = {
  serializedName: "ActionList",
  type: {
    name: "Composite",
    className: "ActionList",
    modelProperties: {
      actionGroups: {
        serializedName: "actionGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ActionGroup"
            }
          }
        }
      }
    }
  }
};

export const ActivityLogAlertResource: msRest.CompositeMapper = {
  serializedName: "ActivityLogAlertResource",
  type: {
    name: "Composite",
    className: "ActivityLogAlertResource",
    modelProperties: {
      ...AzureResource.type.modelProperties,
      scopes: {
        required: true,
        serializedName: "properties.scopes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      condition: {
        required: true,
        serializedName: "properties.condition",
        type: {
          name: "Composite",
          className: "AlertRuleAllOfCondition"
        }
      },
      actions: {
        required: true,
        serializedName: "properties.actions",
        type: {
          name: "Composite",
          className: "ActionList"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        defaultValue: true,
        type: {
          name: "Boolean"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AlertRulePatchObject: msRest.CompositeMapper = {
  serializedName: "AlertRulePatchObject",
  type: {
    name: "Composite",
    className: "AlertRulePatchObject",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        defaultValue: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ErrorResponse: msRest.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        readOnly: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AlertRuleList: msRest.CompositeMapper = {
  serializedName: "AlertRuleList",
  type: {
    name: "Composite",
    className: "AlertRuleList",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ActivityLogAlertResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};
