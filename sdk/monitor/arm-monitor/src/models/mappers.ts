/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ScaleCapacity: msRest.CompositeMapper = {
  serializedName: "ScaleCapacity",
  type: {
    name: "Composite",
    className: "ScaleCapacity",
    modelProperties: {
      minimum: {
        required: true,
        serializedName: "minimum",
        type: {
          name: "String"
        }
      },
      maximum: {
        required: true,
        serializedName: "maximum",
        type: {
          name: "String"
        }
      },
      default: {
        required: true,
        serializedName: "default",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricTrigger: msRest.CompositeMapper = {
  serializedName: "MetricTrigger",
  type: {
    name: "Composite",
    className: "MetricTrigger",
    modelProperties: {
      metricName: {
        required: true,
        serializedName: "metricName",
        type: {
          name: "String"
        }
      },
      metricResourceUri: {
        required: true,
        serializedName: "metricResourceUri",
        type: {
          name: "String"
        }
      },
      timeGrain: {
        required: true,
        serializedName: "timeGrain",
        type: {
          name: "TimeSpan"
        }
      },
      statistic: {
        required: true,
        serializedName: "statistic",
        type: {
          name: "Enum",
          allowedValues: [
            "Average",
            "Min",
            "Max",
            "Sum"
          ]
        }
      },
      timeWindow: {
        required: true,
        serializedName: "timeWindow",
        type: {
          name: "TimeSpan"
        }
      },
      timeAggregation: {
        required: true,
        serializedName: "timeAggregation",
        type: {
          name: "Enum",
          allowedValues: [
            "Average",
            "Minimum",
            "Maximum",
            "Total",
            "Count",
            "Last"
          ]
        }
      },
      operator: {
        required: true,
        serializedName: "operator",
        type: {
          name: "Enum",
          allowedValues: [
            "Equals",
            "NotEquals",
            "GreaterThan",
            "GreaterThanOrEqual",
            "LessThan",
            "LessThanOrEqual"
          ]
        }
      },
      threshold: {
        required: true,
        serializedName: "threshold",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ScaleAction: msRest.CompositeMapper = {
  serializedName: "ScaleAction",
  type: {
    name: "Composite",
    className: "ScaleAction",
    modelProperties: {
      direction: {
        required: true,
        serializedName: "direction",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "Increase",
            "Decrease"
          ]
        }
      },
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "ChangeCount",
            "PercentChangeCount",
            "ExactCount"
          ]
        }
      },
      value: {
        serializedName: "value",
        defaultValue: '1',
        type: {
          name: "String"
        }
      },
      cooldown: {
        required: true,
        serializedName: "cooldown",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const ScaleRule: msRest.CompositeMapper = {
  serializedName: "ScaleRule",
  type: {
    name: "Composite",
    className: "ScaleRule",
    modelProperties: {
      metricTrigger: {
        required: true,
        serializedName: "metricTrigger",
        type: {
          name: "Composite",
          className: "MetricTrigger"
        }
      },
      scaleAction: {
        required: true,
        serializedName: "scaleAction",
        type: {
          name: "Composite",
          className: "ScaleAction"
        }
      }
    }
  }
};

export const TimeWindow: msRest.CompositeMapper = {
  serializedName: "TimeWindow",
  type: {
    name: "Composite",
    className: "TimeWindow",
    modelProperties: {
      timeZone: {
        serializedName: "timeZone",
        type: {
          name: "String"
        }
      },
      start: {
        required: true,
        serializedName: "start",
        type: {
          name: "DateTime"
        }
      },
      end: {
        required: true,
        serializedName: "end",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const RecurrentSchedule: msRest.CompositeMapper = {
  serializedName: "RecurrentSchedule",
  type: {
    name: "Composite",
    className: "RecurrentSchedule",
    modelProperties: {
      timeZone: {
        required: true,
        serializedName: "timeZone",
        type: {
          name: "String"
        }
      },
      days: {
        required: true,
        serializedName: "days",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      hours: {
        required: true,
        serializedName: "hours",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      minutes: {
        required: true,
        serializedName: "minutes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const Recurrence: msRest.CompositeMapper = {
  serializedName: "Recurrence",
  type: {
    name: "Composite",
    className: "Recurrence",
    modelProperties: {
      frequency: {
        required: true,
        serializedName: "frequency",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "Second",
            "Minute",
            "Hour",
            "Day",
            "Week",
            "Month",
            "Year"
          ]
        }
      },
      schedule: {
        required: true,
        serializedName: "schedule",
        type: {
          name: "Composite",
          className: "RecurrentSchedule"
        }
      }
    }
  }
};

export const AutoscaleProfile: msRest.CompositeMapper = {
  serializedName: "AutoscaleProfile",
  type: {
    name: "Composite",
    className: "AutoscaleProfile",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      capacity: {
        required: true,
        serializedName: "capacity",
        type: {
          name: "Composite",
          className: "ScaleCapacity"
        }
      },
      rules: {
        required: true,
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScaleRule"
            }
          }
        }
      },
      fixedDate: {
        serializedName: "fixedDate",
        type: {
          name: "Composite",
          className: "TimeWindow"
        }
      },
      recurrence: {
        serializedName: "recurrence",
        type: {
          name: "Composite",
          className: "Recurrence"
        }
      }
    }
  }
};

export const EmailNotification: msRest.CompositeMapper = {
  serializedName: "EmailNotification",
  type: {
    name: "Composite",
    className: "EmailNotification",
    modelProperties: {
      sendToSubscriptionAdministrator: {
        serializedName: "sendToSubscriptionAdministrator",
        type: {
          name: "Boolean"
        }
      },
      sendToSubscriptionCoAdministrators: {
        serializedName: "sendToSubscriptionCoAdministrators",
        type: {
          name: "Boolean"
        }
      },
      customEmails: {
        serializedName: "customEmails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const WebhookNotification: msRest.CompositeMapper = {
  serializedName: "WebhookNotification",
  type: {
    name: "Composite",
    className: "WebhookNotification",
    modelProperties: {
      serviceUri: {
        serializedName: "serviceUri",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AutoscaleNotification: msRest.CompositeMapper = {
  serializedName: "AutoscaleNotification",
  type: {
    name: "Composite",
    className: "AutoscaleNotification",
    modelProperties: {
      operation: {
        required: true,
        isConstant: true,
        serializedName: "operation",
        defaultValue: 'Scale',
        type: {
          name: "String"
        }
      },
      email: {
        serializedName: "email",
        type: {
          name: "Composite",
          className: "EmailNotification"
        }
      },
      webhooks: {
        serializedName: "webhooks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WebhookNotification"
            }
          }
        }
      }
    }
  }
};

export const AutoscaleSettingResource: msRest.CompositeMapper = {
  serializedName: "AutoscaleSettingResource",
  type: {
    name: "Composite",
    className: "AutoscaleSettingResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      profiles: {
        required: true,
        serializedName: "properties.profiles",
        constraints: {
          MaxItems: 20
        },
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AutoscaleProfile"
            }
          }
        }
      },
      notifications: {
        serializedName: "properties.notifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AutoscaleNotification"
            }
          }
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        defaultValue: true,
        type: {
          name: "Boolean"
        }
      },
      autoscaleSettingResourceName: {
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      targetResourceUri: {
        serializedName: "properties.targetResourceUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AutoscaleSettingResourcePatch: msRest.CompositeMapper = {
  serializedName: "AutoscaleSettingResourcePatch",
  type: {
    name: "Composite",
    className: "AutoscaleSettingResourcePatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      profiles: {
        required: true,
        serializedName: "properties.profiles",
        constraints: {
          MaxItems: 20
        },
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AutoscaleProfile"
            }
          }
        }
      },
      notifications: {
        serializedName: "properties.notifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AutoscaleNotification"
            }
          }
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        defaultValue: true,
        type: {
          name: "Boolean"
        }
      },
      name: {
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      targetResourceUri: {
        serializedName: "properties.targetResourceUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: msRest.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: msRest.CompositeMapper = {
  serializedName: "Operation_display",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: msRest.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const OperationListResult: msRest.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Incident: msRest.CompositeMapper = {
  serializedName: "Incident",
  type: {
    name: "Composite",
    className: "Incident",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      ruleName: {
        readOnly: true,
        serializedName: "ruleName",
        type: {
          name: "String"
        }
      },
      isActive: {
        readOnly: true,
        serializedName: "isActive",
        type: {
          name: "Boolean"
        }
      },
      activatedTime: {
        readOnly: true,
        serializedName: "activatedTime",
        type: {
          name: "DateTime"
        }
      },
      resolvedTime: {
        readOnly: true,
        serializedName: "resolvedTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const RuleDataSource: msRest.CompositeMapper = {
  serializedName: "RuleDataSource",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "odata.type",
      clientName: "odatatype"
    },
    uberParent: "RuleDataSource",
    className: "RuleDataSource",
    modelProperties: {
      resourceUri: {
        serializedName: "resourceUri",
        type: {
          name: "String"
        }
      },
      odatatype: {
        required: true,
        serializedName: "odata\\.type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RuleCondition: msRest.CompositeMapper = {
  serializedName: "RuleCondition",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "odata.type",
      clientName: "odatatype"
    },
    uberParent: "RuleCondition",
    className: "RuleCondition",
    modelProperties: {
      dataSource: {
        serializedName: "dataSource",
        type: {
          name: "Composite",
          className: "RuleDataSource"
        }
      },
      odatatype: {
        required: true,
        serializedName: "odata\\.type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RuleMetricDataSource: msRest.CompositeMapper = {
  serializedName: "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
  type: {
    name: "Composite",
    polymorphicDiscriminator: RuleDataSource.type.polymorphicDiscriminator,
    uberParent: "RuleDataSource",
    className: "RuleMetricDataSource",
    modelProperties: {
      ...RuleDataSource.type.modelProperties,
      metricName: {
        serializedName: "metricName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RuleManagementEventClaimsDataSource: msRest.CompositeMapper = {
  serializedName: "RuleManagementEventClaimsDataSource",
  type: {
    name: "Composite",
    className: "RuleManagementEventClaimsDataSource",
    modelProperties: {
      emailAddress: {
        serializedName: "emailAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RuleManagementEventDataSource: msRest.CompositeMapper = {
  serializedName: "Microsoft.Azure.Management.Insights.Models.RuleManagementEventDataSource",
  type: {
    name: "Composite",
    polymorphicDiscriminator: RuleDataSource.type.polymorphicDiscriminator,
    uberParent: "RuleDataSource",
    className: "RuleManagementEventDataSource",
    modelProperties: {
      ...RuleDataSource.type.modelProperties,
      eventName: {
        serializedName: "eventName",
        type: {
          name: "String"
        }
      },
      eventSource: {
        serializedName: "eventSource",
        type: {
          name: "String"
        }
      },
      level: {
        serializedName: "level",
        type: {
          name: "String"
        }
      },
      operationName: {
        serializedName: "operationName",
        type: {
          name: "String"
        }
      },
      resourceGroupName: {
        serializedName: "resourceGroupName",
        type: {
          name: "String"
        }
      },
      resourceProviderName: {
        serializedName: "resourceProviderName",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      subStatus: {
        serializedName: "subStatus",
        type: {
          name: "String"
        }
      },
      claims: {
        serializedName: "claims",
        type: {
          name: "Composite",
          className: "RuleManagementEventClaimsDataSource"
        }
      }
    }
  }
};

export const ThresholdRuleCondition: msRest.CompositeMapper = {
  serializedName: "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
  type: {
    name: "Composite",
    polymorphicDiscriminator: RuleCondition.type.polymorphicDiscriminator,
    uberParent: "RuleCondition",
    className: "ThresholdRuleCondition",
    modelProperties: {
      ...RuleCondition.type.modelProperties,
      operator: {
        required: true,
        serializedName: "operator",
        type: {
          name: "Enum",
          allowedValues: [
            "GreaterThan",
            "GreaterThanOrEqual",
            "LessThan",
            "LessThanOrEqual"
          ]
        }
      },
      threshold: {
        required: true,
        serializedName: "threshold",
        type: {
          name: "Number"
        }
      },
      windowSize: {
        serializedName: "windowSize",
        type: {
          name: "TimeSpan"
        }
      },
      timeAggregation: {
        serializedName: "timeAggregation",
        type: {
          name: "Enum",
          allowedValues: [
            "Average",
            "Minimum",
            "Maximum",
            "Total",
            "Last"
          ]
        }
      }
    }
  }
};

export const LocationThresholdRuleCondition: msRest.CompositeMapper = {
  serializedName: "Microsoft.Azure.Management.Insights.Models.LocationThresholdRuleCondition",
  type: {
    name: "Composite",
    polymorphicDiscriminator: RuleCondition.type.polymorphicDiscriminator,
    uberParent: "RuleCondition",
    className: "LocationThresholdRuleCondition",
    modelProperties: {
      ...RuleCondition.type.modelProperties,
      windowSize: {
        serializedName: "windowSize",
        type: {
          name: "TimeSpan"
        }
      },
      failedLocationCount: {
        required: true,
        serializedName: "failedLocationCount",
        constraints: {
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ManagementEventAggregationCondition: msRest.CompositeMapper = {
  serializedName: "ManagementEventAggregationCondition",
  type: {
    name: "Composite",
    className: "ManagementEventAggregationCondition",
    modelProperties: {
      operator: {
        serializedName: "operator",
        type: {
          name: "Enum",
          allowedValues: [
            "GreaterThan",
            "GreaterThanOrEqual",
            "LessThan",
            "LessThanOrEqual"
          ]
        }
      },
      threshold: {
        serializedName: "threshold",
        type: {
          name: "Number"
        }
      },
      windowSize: {
        serializedName: "windowSize",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const ManagementEventRuleCondition: msRest.CompositeMapper = {
  serializedName: "Microsoft.Azure.Management.Insights.Models.ManagementEventRuleCondition",
  type: {
    name: "Composite",
    polymorphicDiscriminator: RuleCondition.type.polymorphicDiscriminator,
    uberParent: "RuleCondition",
    className: "ManagementEventRuleCondition",
    modelProperties: {
      ...RuleCondition.type.modelProperties,
      aggregation: {
        serializedName: "aggregation",
        type: {
          name: "Composite",
          className: "ManagementEventAggregationCondition"
        }
      }
    }
  }
};

export const RuleAction: msRest.CompositeMapper = {
  serializedName: "RuleAction",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "odata.type",
      clientName: "odatatype"
    },
    uberParent: "RuleAction",
    className: "RuleAction",
    modelProperties: {
      odatatype: {
        required: true,
        serializedName: "odata\\.type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RuleEmailAction: msRest.CompositeMapper = {
  serializedName: "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
  type: {
    name: "Composite",
    polymorphicDiscriminator: RuleAction.type.polymorphicDiscriminator,
    uberParent: "RuleAction",
    className: "RuleEmailAction",
    modelProperties: {
      ...RuleAction.type.modelProperties,
      sendToServiceOwners: {
        serializedName: "sendToServiceOwners",
        type: {
          name: "Boolean"
        }
      },
      customEmails: {
        serializedName: "customEmails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const RuleWebhookAction: msRest.CompositeMapper = {
  serializedName: "Microsoft.Azure.Management.Insights.Models.RuleWebhookAction",
  type: {
    name: "Composite",
    polymorphicDiscriminator: RuleAction.type.polymorphicDiscriminator,
    uberParent: "RuleAction",
    className: "RuleWebhookAction",
    modelProperties: {
      ...RuleAction.type.modelProperties,
      serviceUri: {
        serializedName: "serviceUri",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AlertRuleResource: msRest.CompositeMapper = {
  serializedName: "AlertRuleResource",
  type: {
    name: "Composite",
    className: "AlertRuleResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      alertRuleResourceName: {
        required: true,
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      isEnabled: {
        required: true,
        serializedName: "properties.isEnabled",
        type: {
          name: "Boolean"
        }
      },
      condition: {
        required: true,
        serializedName: "properties.condition",
        type: {
          name: "Composite",
          className: "RuleCondition"
        }
      },
      actions: {
        serializedName: "properties.actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RuleAction"
            }
          }
        }
      },
      lastUpdatedTime: {
        readOnly: true,
        serializedName: "properties.lastUpdatedTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const AlertRuleResourcePatch: msRest.CompositeMapper = {
  serializedName: "AlertRuleResourcePatch",
  type: {
    name: "Composite",
    className: "AlertRuleResourcePatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      name: {
        required: true,
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      isEnabled: {
        required: true,
        serializedName: "properties.isEnabled",
        type: {
          name: "Boolean"
        }
      },
      condition: {
        required: true,
        serializedName: "properties.condition",
        type: {
          name: "Composite",
          className: "RuleCondition"
        }
      },
      actions: {
        serializedName: "properties.actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RuleAction"
            }
          }
        }
      },
      lastUpdatedTime: {
        readOnly: true,
        serializedName: "properties.lastUpdatedTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const RetentionPolicy: msRest.CompositeMapper = {
  serializedName: "RetentionPolicy",
  type: {
    name: "Composite",
    className: "RetentionPolicy",
    modelProperties: {
      enabled: {
        required: true,
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      days: {
        required: true,
        serializedName: "days",
        constraints: {
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const LogProfileResource: msRest.CompositeMapper = {
  serializedName: "LogProfileResource",
  type: {
    name: "Composite",
    className: "LogProfileResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      storageAccountId: {
        serializedName: "properties.storageAccountId",
        type: {
          name: "String"
        }
      },
      serviceBusRuleId: {
        serializedName: "properties.serviceBusRuleId",
        type: {
          name: "String"
        }
      },
      locations: {
        required: true,
        serializedName: "properties.locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      categories: {
        required: true,
        serializedName: "properties.categories",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      retentionPolicy: {
        required: true,
        serializedName: "properties.retentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      }
    }
  }
};

export const LogProfileResourcePatch: msRest.CompositeMapper = {
  serializedName: "LogProfileResourcePatch",
  type: {
    name: "Composite",
    className: "LogProfileResourcePatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      storageAccountId: {
        serializedName: "properties.storageAccountId",
        type: {
          name: "String"
        }
      },
      serviceBusRuleId: {
        serializedName: "properties.serviceBusRuleId",
        type: {
          name: "String"
        }
      },
      locations: {
        required: true,
        serializedName: "properties.locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      categories: {
        required: true,
        serializedName: "properties.categories",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      retentionPolicy: {
        required: true,
        serializedName: "properties.retentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      }
    }
  }
};

export const ProxyOnlyResource: msRest.CompositeMapper = {
  serializedName: "ProxyOnlyResource",
  type: {
    name: "Composite",
    className: "ProxyOnlyResource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricSettings: msRest.CompositeMapper = {
  serializedName: "MetricSettings",
  type: {
    name: "Composite",
    className: "MetricSettings",
    modelProperties: {
      timeGrain: {
        serializedName: "timeGrain",
        type: {
          name: "TimeSpan"
        }
      },
      category: {
        serializedName: "category",
        type: {
          name: "String"
        }
      },
      enabled: {
        required: true,
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      retentionPolicy: {
        serializedName: "retentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      }
    }
  }
};

export const LogSettings: msRest.CompositeMapper = {
  serializedName: "LogSettings",
  type: {
    name: "Composite",
    className: "LogSettings",
    modelProperties: {
      category: {
        serializedName: "category",
        type: {
          name: "String"
        }
      },
      enabled: {
        required: true,
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      retentionPolicy: {
        serializedName: "retentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      }
    }
  }
};

export const DiagnosticSettingsResource: msRest.CompositeMapper = {
  serializedName: "DiagnosticSettingsResource",
  type: {
    name: "Composite",
    className: "DiagnosticSettingsResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      storageAccountId: {
        serializedName: "properties.storageAccountId",
        type: {
          name: "String"
        }
      },
      serviceBusRuleId: {
        serializedName: "properties.serviceBusRuleId",
        type: {
          name: "String"
        }
      },
      eventHubAuthorizationRuleId: {
        serializedName: "properties.eventHubAuthorizationRuleId",
        type: {
          name: "String"
        }
      },
      eventHubName: {
        serializedName: "properties.eventHubName",
        type: {
          name: "String"
        }
      },
      metrics: {
        serializedName: "properties.metrics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricSettings"
            }
          }
        }
      },
      logs: {
        serializedName: "properties.logs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LogSettings"
            }
          }
        }
      },
      workspaceId: {
        serializedName: "properties.workspaceId",
        type: {
          name: "String"
        }
      },
      logAnalyticsDestinationType: {
        serializedName: "properties.logAnalyticsDestinationType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiagnosticSettingsResourceCollection: msRest.CompositeMapper = {
  serializedName: "DiagnosticSettingsResourceCollection",
  type: {
    name: "Composite",
    className: "DiagnosticSettingsResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnosticSettingsResource"
            }
          }
        }
      }
    }
  }
};

export const DiagnosticSettingsCategoryResource: msRest.CompositeMapper = {
  serializedName: "DiagnosticSettingsCategoryResource",
  type: {
    name: "Composite",
    className: "DiagnosticSettingsCategoryResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      categoryType: {
        nullable: false,
        serializedName: "properties.categoryType",
        type: {
          name: "Enum",
          allowedValues: [
            "Metrics",
            "Logs"
          ]
        }
      }
    }
  }
};

export const DiagnosticSettingsCategoryResourceCollection: msRest.CompositeMapper = {
  serializedName: "DiagnosticSettingsCategoryResourceCollection",
  type: {
    name: "Composite",
    className: "DiagnosticSettingsCategoryResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnosticSettingsCategoryResource"
            }
          }
        }
      }
    }
  }
};

export const EmailReceiver: msRest.CompositeMapper = {
  serializedName: "EmailReceiver",
  type: {
    name: "Composite",
    className: "EmailReceiver",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      emailAddress: {
        required: true,
        serializedName: "emailAddress",
        type: {
          name: "String"
        }
      },
      useCommonAlertSchema: {
        required: true,
        serializedName: "useCommonAlertSchema",
        type: {
          name: "Boolean"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "NotSpecified",
            "Enabled",
            "Disabled"
          ]
        }
      }
    }
  }
};

export const SmsReceiver: msRest.CompositeMapper = {
  serializedName: "SmsReceiver",
  type: {
    name: "Composite",
    className: "SmsReceiver",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      countryCode: {
        required: true,
        serializedName: "countryCode",
        type: {
          name: "String"
        }
      },
      phoneNumber: {
        required: true,
        serializedName: "phoneNumber",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "NotSpecified",
            "Enabled",
            "Disabled"
          ]
        }
      }
    }
  }
};

export const WebhookReceiver: msRest.CompositeMapper = {
  serializedName: "WebhookReceiver",
  type: {
    name: "Composite",
    className: "WebhookReceiver",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      serviceUri: {
        required: true,
        serializedName: "serviceUri",
        type: {
          name: "String"
        }
      },
      useCommonAlertSchema: {
        required: true,
        serializedName: "useCommonAlertSchema",
        type: {
          name: "Boolean"
        }
      },
      useAadAuth: {
        serializedName: "useAadAuth",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      objectId: {
        serializedName: "objectId",
        type: {
          name: "String"
        }
      },
      identifierUri: {
        serializedName: "identifierUri",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ItsmReceiver: msRest.CompositeMapper = {
  serializedName: "ItsmReceiver",
  type: {
    name: "Composite",
    className: "ItsmReceiver",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      workspaceId: {
        required: true,
        serializedName: "workspaceId",
        type: {
          name: "String"
        }
      },
      connectionId: {
        required: true,
        serializedName: "connectionId",
        type: {
          name: "String"
        }
      },
      ticketConfiguration: {
        required: true,
        serializedName: "ticketConfiguration",
        type: {
          name: "String"
        }
      },
      region: {
        required: true,
        serializedName: "region",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureAppPushReceiver: msRest.CompositeMapper = {
  serializedName: "AzureAppPushReceiver",
  type: {
    name: "Composite",
    className: "AzureAppPushReceiver",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      emailAddress: {
        required: true,
        serializedName: "emailAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AutomationRunbookReceiver: msRest.CompositeMapper = {
  serializedName: "AutomationRunbookReceiver",
  type: {
    name: "Composite",
    className: "AutomationRunbookReceiver",
    modelProperties: {
      automationAccountId: {
        required: true,
        serializedName: "automationAccountId",
        type: {
          name: "String"
        }
      },
      runbookName: {
        required: true,
        serializedName: "runbookName",
        type: {
          name: "String"
        }
      },
      webhookResourceId: {
        required: true,
        serializedName: "webhookResourceId",
        type: {
          name: "String"
        }
      },
      isGlobalRunbook: {
        required: true,
        serializedName: "isGlobalRunbook",
        type: {
          name: "Boolean"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      serviceUri: {
        serializedName: "serviceUri",
        type: {
          name: "String"
        }
      },
      useCommonAlertSchema: {
        required: true,
        serializedName: "useCommonAlertSchema",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const VoiceReceiver: msRest.CompositeMapper = {
  serializedName: "VoiceReceiver",
  type: {
    name: "Composite",
    className: "VoiceReceiver",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      countryCode: {
        required: true,
        serializedName: "countryCode",
        type: {
          name: "String"
        }
      },
      phoneNumber: {
        required: true,
        serializedName: "phoneNumber",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LogicAppReceiver: msRest.CompositeMapper = {
  serializedName: "LogicAppReceiver",
  type: {
    name: "Composite",
    className: "LogicAppReceiver",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      resourceId: {
        required: true,
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      callbackUrl: {
        required: true,
        serializedName: "callbackUrl",
        type: {
          name: "String"
        }
      },
      useCommonAlertSchema: {
        required: true,
        serializedName: "useCommonAlertSchema",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AzureFunctionReceiver: msRest.CompositeMapper = {
  serializedName: "AzureFunctionReceiver",
  type: {
    name: "Composite",
    className: "AzureFunctionReceiver",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      functionAppResourceId: {
        required: true,
        serializedName: "functionAppResourceId",
        type: {
          name: "String"
        }
      },
      functionName: {
        required: true,
        serializedName: "functionName",
        type: {
          name: "String"
        }
      },
      httpTriggerUrl: {
        required: true,
        serializedName: "httpTriggerUrl",
        type: {
          name: "String"
        }
      },
      useCommonAlertSchema: {
        required: true,
        serializedName: "useCommonAlertSchema",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ArmRoleReceiver: msRest.CompositeMapper = {
  serializedName: "ArmRoleReceiver",
  type: {
    name: "Composite",
    className: "ArmRoleReceiver",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      roleId: {
        required: true,
        serializedName: "roleId",
        type: {
          name: "String"
        }
      },
      useCommonAlertSchema: {
        required: true,
        serializedName: "useCommonAlertSchema",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ActionGroupResource: msRest.CompositeMapper = {
  serializedName: "ActionGroupResource",
  type: {
    name: "Composite",
    className: "ActionGroupResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      groupShortName: {
        required: true,
        serializedName: "properties.groupShortName",
        constraints: {
          MaxLength: 12
        },
        type: {
          name: "String"
        }
      },
      enabled: {
        required: true,
        serializedName: "properties.enabled",
        defaultValue: true,
        type: {
          name: "Boolean"
        }
      },
      emailReceivers: {
        serializedName: "properties.emailReceivers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EmailReceiver"
            }
          }
        }
      },
      smsReceivers: {
        serializedName: "properties.smsReceivers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SmsReceiver"
            }
          }
        }
      },
      webhookReceivers: {
        serializedName: "properties.webhookReceivers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WebhookReceiver"
            }
          }
        }
      },
      itsmReceivers: {
        serializedName: "properties.itsmReceivers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ItsmReceiver"
            }
          }
        }
      },
      azureAppPushReceivers: {
        serializedName: "properties.azureAppPushReceivers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureAppPushReceiver"
            }
          }
        }
      },
      automationRunbookReceivers: {
        serializedName: "properties.automationRunbookReceivers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AutomationRunbookReceiver"
            }
          }
        }
      },
      voiceReceivers: {
        serializedName: "properties.voiceReceivers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VoiceReceiver"
            }
          }
        }
      },
      logicAppReceivers: {
        serializedName: "properties.logicAppReceivers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LogicAppReceiver"
            }
          }
        }
      },
      azureFunctionReceivers: {
        serializedName: "properties.azureFunctionReceivers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureFunctionReceiver"
            }
          }
        }
      },
      armRoleReceivers: {
        serializedName: "properties.armRoleReceivers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ArmRoleReceiver"
            }
          }
        }
      }
    }
  }
};

export const EnableRequest: msRest.CompositeMapper = {
  serializedName: "EnableRequest",
  type: {
    name: "Composite",
    className: "EnableRequest",
    modelProperties: {
      receiverName: {
        required: true,
        serializedName: "receiverName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ActionGroupPatchBody: msRest.CompositeMapper = {
  serializedName: "ActionGroupPatchBody",
  type: {
    name: "Composite",
    className: "ActionGroupPatchBody",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        defaultValue: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ActivityLogAlertLeafCondition: msRest.CompositeMapper = {
  serializedName: "ActivityLogAlertLeafCondition",
  type: {
    name: "Composite",
    className: "ActivityLogAlertLeafCondition",
    modelProperties: {
      field: {
        required: true,
        serializedName: "field",
        type: {
          name: "String"
        }
      },
      equals: {
        required: true,
        serializedName: "equals",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ActivityLogAlertAllOfCondition: msRest.CompositeMapper = {
  serializedName: "ActivityLogAlertAllOfCondition",
  type: {
    name: "Composite",
    className: "ActivityLogAlertAllOfCondition",
    modelProperties: {
      allOf: {
        required: true,
        serializedName: "allOf",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ActivityLogAlertLeafCondition"
            }
          }
        }
      }
    }
  }
};

export const ActivityLogAlertActionGroup: msRest.CompositeMapper = {
  serializedName: "ActivityLogAlertActionGroup",
  type: {
    name: "Composite",
    className: "ActivityLogAlertActionGroup",
    modelProperties: {
      actionGroupId: {
        required: true,
        serializedName: "actionGroupId",
        type: {
          name: "String"
        }
      },
      webhookProperties: {
        serializedName: "webhookProperties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ActivityLogAlertActionList: msRest.CompositeMapper = {
  serializedName: "ActivityLogAlertActionList",
  type: {
    name: "Composite",
    className: "ActivityLogAlertActionList",
    modelProperties: {
      actionGroups: {
        serializedName: "actionGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ActivityLogAlertActionGroup"
            }
          }
        }
      }
    }
  }
};

export const ActivityLogAlertResource: msRest.CompositeMapper = {
  serializedName: "ActivityLogAlertResource",
  type: {
    name: "Composite",
    className: "ActivityLogAlertResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      scopes: {
        required: true,
        serializedName: "properties.scopes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        defaultValue: true,
        type: {
          name: "Boolean"
        }
      },
      condition: {
        required: true,
        serializedName: "properties.condition",
        type: {
          name: "Composite",
          className: "ActivityLogAlertAllOfCondition"
        }
      },
      actions: {
        required: true,
        serializedName: "properties.actions",
        type: {
          name: "Composite",
          className: "ActivityLogAlertActionList"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ActivityLogAlertPatchBody: msRest.CompositeMapper = {
  serializedName: "ActivityLogAlertPatchBody",
  type: {
    name: "Composite",
    className: "ActivityLogAlertPatchBody",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        defaultValue: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const LocalizableString: msRest.CompositeMapper = {
  serializedName: "LocalizableString",
  type: {
    name: "Composite",
    className: "LocalizableString",
    modelProperties: {
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SenderAuthorization: msRest.CompositeMapper = {
  serializedName: "SenderAuthorization",
  type: {
    name: "Composite",
    className: "SenderAuthorization",
    modelProperties: {
      action: {
        serializedName: "action",
        type: {
          name: "String"
        }
      },
      role: {
        serializedName: "role",
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "scope",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HttpRequestInfo: msRest.CompositeMapper = {
  serializedName: "HttpRequestInfo",
  type: {
    name: "Composite",
    className: "HttpRequestInfo",
    modelProperties: {
      clientRequestId: {
        serializedName: "clientRequestId",
        type: {
          name: "String"
        }
      },
      clientIpAddress: {
        serializedName: "clientIpAddress",
        type: {
          name: "String"
        }
      },
      method: {
        serializedName: "method",
        type: {
          name: "String"
        }
      },
      uri: {
        serializedName: "uri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventData: msRest.CompositeMapper = {
  serializedName: "EventData",
  type: {
    name: "Composite",
    className: "EventData",
    modelProperties: {
      authorization: {
        readOnly: true,
        serializedName: "authorization",
        type: {
          name: "Composite",
          className: "SenderAuthorization"
        }
      },
      claims: {
        readOnly: true,
        serializedName: "claims",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      caller: {
        readOnly: true,
        serializedName: "caller",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      eventDataId: {
        readOnly: true,
        serializedName: "eventDataId",
        type: {
          name: "String"
        }
      },
      correlationId: {
        readOnly: true,
        serializedName: "correlationId",
        type: {
          name: "String"
        }
      },
      eventName: {
        readOnly: true,
        serializedName: "eventName",
        type: {
          name: "Composite",
          className: "LocalizableString"
        }
      },
      category: {
        readOnly: true,
        serializedName: "category",
        type: {
          name: "Composite",
          className: "LocalizableString"
        }
      },
      httpRequest: {
        readOnly: true,
        serializedName: "httpRequest",
        type: {
          name: "Composite",
          className: "HttpRequestInfo"
        }
      },
      level: {
        readOnly: true,
        serializedName: "level",
        type: {
          name: "Enum",
          allowedValues: [
            "Critical",
            "Error",
            "Warning",
            "Informational",
            "Verbose"
          ]
        }
      },
      resourceGroupName: {
        readOnly: true,
        serializedName: "resourceGroupName",
        type: {
          name: "String"
        }
      },
      resourceProviderName: {
        readOnly: true,
        serializedName: "resourceProviderName",
        type: {
          name: "Composite",
          className: "LocalizableString"
        }
      },
      resourceId: {
        readOnly: true,
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      resourceType: {
        readOnly: true,
        serializedName: "resourceType",
        type: {
          name: "Composite",
          className: "LocalizableString"
        }
      },
      operationId: {
        readOnly: true,
        serializedName: "operationId",
        type: {
          name: "String"
        }
      },
      operationName: {
        readOnly: true,
        serializedName: "operationName",
        type: {
          name: "Composite",
          className: "LocalizableString"
        }
      },
      properties: {
        readOnly: true,
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Composite",
          className: "LocalizableString"
        }
      },
      subStatus: {
        readOnly: true,
        serializedName: "subStatus",
        type: {
          name: "Composite",
          className: "LocalizableString"
        }
      },
      eventTimestamp: {
        readOnly: true,
        serializedName: "eventTimestamp",
        type: {
          name: "DateTime"
        }
      },
      submissionTimestamp: {
        readOnly: true,
        serializedName: "submissionTimestamp",
        type: {
          name: "DateTime"
        }
      },
      subscriptionId: {
        readOnly: true,
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      },
      tenantId: {
        readOnly: true,
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricAvailability: msRest.CompositeMapper = {
  serializedName: "MetricAvailability",
  type: {
    name: "Composite",
    className: "MetricAvailability",
    modelProperties: {
      timeGrain: {
        serializedName: "timeGrain",
        type: {
          name: "TimeSpan"
        }
      },
      retention: {
        serializedName: "retention",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const MetricDefinition: msRest.CompositeMapper = {
  serializedName: "MetricDefinition",
  type: {
    name: "Composite",
    className: "MetricDefinition",
    modelProperties: {
      isDimensionRequired: {
        serializedName: "isDimensionRequired",
        type: {
          name: "Boolean"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      namespace: {
        serializedName: "namespace",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "LocalizableString"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "Enum",
          allowedValues: [
            "Count",
            "Bytes",
            "Seconds",
            "CountPerSecond",
            "BytesPerSecond",
            "Percent",
            "MilliSeconds",
            "ByteSeconds",
            "Unspecified",
            "Cores",
            "MilliCores",
            "NanoCores",
            "BitsPerSecond"
          ]
        }
      },
      primaryAggregationType: {
        serializedName: "primaryAggregationType",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "Average",
            "Count",
            "Minimum",
            "Maximum",
            "Total"
          ]
        }
      },
      supportedAggregationTypes: {
        serializedName: "supportedAggregationTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "None",
                "Average",
                "Count",
                "Minimum",
                "Maximum",
                "Total"
              ]
            }
          }
        }
      },
      metricAvailabilities: {
        serializedName: "metricAvailabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricAvailability"
            }
          }
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LocalizableString"
            }
          }
        }
      }
    }
  }
};

export const MetricValue: msRest.CompositeMapper = {
  serializedName: "MetricValue",
  type: {
    name: "Composite",
    className: "MetricValue",
    modelProperties: {
      timeStamp: {
        required: true,
        serializedName: "timeStamp",
        type: {
          name: "DateTime"
        }
      },
      average: {
        serializedName: "average",
        type: {
          name: "Number"
        }
      },
      minimum: {
        serializedName: "minimum",
        type: {
          name: "Number"
        }
      },
      maximum: {
        serializedName: "maximum",
        type: {
          name: "Number"
        }
      },
      total: {
        serializedName: "total",
        type: {
          name: "Number"
        }
      },
      count: {
        serializedName: "count",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MetadataValue: msRest.CompositeMapper = {
  serializedName: "MetadataValue",
  type: {
    name: "Composite",
    className: "MetadataValue",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "LocalizableString"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TimeSeriesElement: msRest.CompositeMapper = {
  serializedName: "TimeSeriesElement",
  type: {
    name: "Composite",
    className: "TimeSeriesElement",
    modelProperties: {
      metadatavalues: {
        serializedName: "metadatavalues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataValue"
            }
          }
        }
      },
      data: {
        serializedName: "data",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricValue"
            }
          }
        }
      }
    }
  }
};

export const Metric: msRest.CompositeMapper = {
  serializedName: "Metric",
  type: {
    name: "Composite",
    className: "Metric",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "Composite",
          className: "LocalizableString"
        }
      },
      unit: {
        required: true,
        serializedName: "unit",
        type: {
          name: "Enum",
          allowedValues: [
            "Count",
            "Bytes",
            "Seconds",
            "CountPerSecond",
            "BytesPerSecond",
            "Percent",
            "MilliSeconds",
            "ByteSeconds",
            "Unspecified",
            "Cores",
            "MilliCores",
            "NanoCores",
            "BitsPerSecond"
          ]
        }
      },
      timeseries: {
        required: true,
        serializedName: "timeseries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimeSeriesElement"
            }
          }
        }
      }
    }
  }
};

export const Response: msRest.CompositeMapper = {
  serializedName: "Response",
  type: {
    name: "Composite",
    className: "Response",
    modelProperties: {
      cost: {
        serializedName: "cost",
        constraints: {
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      timespan: {
        required: true,
        serializedName: "timespan",
        type: {
          name: "String"
        }
      },
      interval: {
        serializedName: "interval",
        type: {
          name: "TimeSpan"
        }
      },
      namespace: {
        serializedName: "namespace",
        type: {
          name: "String"
        }
      },
      resourceregion: {
        serializedName: "resourceregion",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Metric"
            }
          }
        }
      }
    }
  }
};

export const BaselineMetadataValue: msRest.CompositeMapper = {
  serializedName: "BaselineMetadataValue",
  type: {
    name: "Composite",
    className: "BaselineMetadataValue",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "LocalizableString"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Baseline: msRest.CompositeMapper = {
  serializedName: "Baseline",
  type: {
    name: "Composite",
    className: "Baseline",
    modelProperties: {
      sensitivity: {
        required: true,
        serializedName: "sensitivity",
        type: {
          name: "Enum",
          allowedValues: [
            "Low",
            "Medium",
            "High"
          ]
        }
      },
      lowThresholds: {
        required: true,
        serializedName: "lowThresholds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      highThresholds: {
        required: true,
        serializedName: "highThresholds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const BaselineResponse: msRest.CompositeMapper = {
  serializedName: "BaselineResponse",
  type: {
    name: "Composite",
    className: "BaselineResponse",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "Composite",
          className: "LocalizableString"
        }
      },
      timespan: {
        serializedName: "properties.timespan",
        type: {
          name: "String"
        }
      },
      interval: {
        serializedName: "properties.interval",
        type: {
          name: "TimeSpan"
        }
      },
      aggregation: {
        serializedName: "properties.aggregation",
        type: {
          name: "String"
        }
      },
      timestamps: {
        serializedName: "properties.timestamps",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      },
      baseline: {
        serializedName: "properties.baseline",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Baseline"
            }
          }
        }
      },
      metadata: {
        serializedName: "properties.metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BaselineMetadataValue"
            }
          }
        }
      }
    }
  }
};

export const TimeSeriesInformation: msRest.CompositeMapper = {
  serializedName: "TimeSeriesInformation",
  type: {
    name: "Composite",
    className: "TimeSeriesInformation",
    modelProperties: {
      sensitivities: {
        required: true,
        serializedName: "sensitivities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      values: {
        required: true,
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      timestamps: {
        serializedName: "timestamps",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      }
    }
  }
};

export const CalculateBaselineResponse: msRest.CompositeMapper = {
  serializedName: "CalculateBaselineResponse",
  type: {
    name: "Composite",
    className: "CalculateBaselineResponse",
    modelProperties: {
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      timestamps: {
        serializedName: "timestamps",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      },
      baseline: {
        required: true,
        serializedName: "baseline",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Baseline"
            }
          }
        }
      }
    }
  }
};

export const MetricSingleDimension: msRest.CompositeMapper = {
  serializedName: "MetricSingleDimension",
  type: {
    name: "Composite",
    className: "MetricSingleDimension",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SingleBaseline: msRest.CompositeMapper = {
  serializedName: "SingleBaseline",
  type: {
    name: "Composite",
    className: "SingleBaseline",
    modelProperties: {
      sensitivity: {
        required: true,
        serializedName: "sensitivity",
        type: {
          name: "String"
        }
      },
      lowThresholds: {
        required: true,
        serializedName: "lowThresholds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      highThresholds: {
        required: true,
        serializedName: "highThresholds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const BaselineMetadata: msRest.CompositeMapper = {
  serializedName: "BaselineMetadata",
  type: {
    name: "Composite",
    className: "BaselineMetadata",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TimeSeriesBaseline: msRest.CompositeMapper = {
  serializedName: "TimeSeriesBaseline",
  type: {
    name: "Composite",
    className: "TimeSeriesBaseline",
    modelProperties: {
      aggregation: {
        required: true,
        serializedName: "aggregation",
        type: {
          name: "String"
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricSingleDimension"
            }
          }
        }
      },
      timestamps: {
        required: true,
        serializedName: "timestamps",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      },
      data: {
        required: true,
        serializedName: "data",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SingleBaseline"
            }
          }
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BaselineMetadata"
            }
          }
        }
      }
    }
  }
};

export const SingleMetricBaseline: msRest.CompositeMapper = {
  serializedName: "SingleMetricBaseline",
  type: {
    name: "Composite",
    className: "SingleMetricBaseline",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      timespan: {
        required: true,
        serializedName: "properties.timespan",
        type: {
          name: "String"
        }
      },
      interval: {
        required: true,
        serializedName: "properties.interval",
        type: {
          name: "TimeSpan"
        }
      },
      namespace: {
        serializedName: "properties.namespace",
        type: {
          name: "String"
        }
      },
      baselines: {
        required: true,
        serializedName: "properties.baselines",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimeSeriesBaseline"
            }
          }
        }
      }
    }
  }
};

export const MetricAlertAction: msRest.CompositeMapper = {
  serializedName: "MetricAlertAction",
  type: {
    name: "Composite",
    className: "MetricAlertAction",
    modelProperties: {
      actionGroupId: {
        serializedName: "actionGroupId",
        type: {
          name: "String"
        }
      },
      webhookProperties: {
        serializedName: "webhookProperties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const MetricAlertCriteria: msRest.CompositeMapper = {
  serializedName: "MetricAlertCriteria",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "odata.type",
      clientName: "odatatype"
    },
    uberParent: "MetricAlertCriteria",
    className: "MetricAlertCriteria",
    modelProperties: {
      odatatype: {
        required: true,
        serializedName: "odata\\.type",
        type: {
          name: "String"
        }
      }
    },
    additionalProperties: {
      type: {
        name: "Object"
      }
    }
  }
};

export const MetricAlertResource: msRest.CompositeMapper = {
  serializedName: "MetricAlertResource",
  type: {
    name: "Composite",
    className: "MetricAlertResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      description: {
        required: true,
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      severity: {
        required: true,
        serializedName: "properties.severity",
        type: {
          name: "Number"
        }
      },
      enabled: {
        required: true,
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      scopes: {
        serializedName: "properties.scopes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      evaluationFrequency: {
        required: true,
        serializedName: "properties.evaluationFrequency",
        type: {
          name: "TimeSpan"
        }
      },
      windowSize: {
        required: true,
        serializedName: "properties.windowSize",
        type: {
          name: "TimeSpan"
        }
      },
      targetResourceType: {
        serializedName: "properties.targetResourceType",
        type: {
          name: "String"
        }
      },
      targetResourceRegion: {
        serializedName: "properties.targetResourceRegion",
        type: {
          name: "String"
        }
      },
      criteria: {
        required: true,
        serializedName: "properties.criteria",
        type: {
          name: "Composite",
          className: "MetricAlertCriteria",
          additionalProperties: {
            type: {
              name: "Object"
            }
          }
        }
      },
      autoMitigate: {
        serializedName: "properties.autoMitigate",
        type: {
          name: "Boolean"
        }
      },
      actions: {
        serializedName: "properties.actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricAlertAction"
            }
          }
        }
      },
      lastUpdatedTime: {
        readOnly: true,
        serializedName: "properties.lastUpdatedTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const MetricAlertResourcePatch: msRest.CompositeMapper = {
  serializedName: "MetricAlertResourcePatch",
  type: {
    name: "Composite",
    className: "MetricAlertResourcePatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      description: {
        required: true,
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      severity: {
        required: true,
        serializedName: "properties.severity",
        type: {
          name: "Number"
        }
      },
      enabled: {
        required: true,
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      scopes: {
        serializedName: "properties.scopes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      evaluationFrequency: {
        required: true,
        serializedName: "properties.evaluationFrequency",
        type: {
          name: "TimeSpan"
        }
      },
      windowSize: {
        required: true,
        serializedName: "properties.windowSize",
        type: {
          name: "TimeSpan"
        }
      },
      targetResourceType: {
        serializedName: "properties.targetResourceType",
        type: {
          name: "String"
        }
      },
      targetResourceRegion: {
        serializedName: "properties.targetResourceRegion",
        type: {
          name: "String"
        }
      },
      criteria: {
        required: true,
        serializedName: "properties.criteria",
        type: {
          name: "Composite",
          className: "MetricAlertCriteria",
          additionalProperties: {
            type: {
              name: "Object"
            }
          }
        }
      },
      autoMitigate: {
        serializedName: "properties.autoMitigate",
        type: {
          name: "Boolean"
        }
      },
      actions: {
        serializedName: "properties.actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricAlertAction"
            }
          }
        }
      },
      lastUpdatedTime: {
        readOnly: true,
        serializedName: "properties.lastUpdatedTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const MetricAlertStatusProperties: msRest.CompositeMapper = {
  serializedName: "MetricAlertStatusProperties",
  type: {
    name: "Composite",
    className: "MetricAlertStatusProperties",
    modelProperties: {
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      timestamp: {
        serializedName: "timestamp",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const MetricAlertStatus: msRest.CompositeMapper = {
  serializedName: "MetricAlertStatus",
  type: {
    name: "Composite",
    className: "MetricAlertStatus",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MetricAlertStatusProperties"
        }
      }
    }
  }
};

export const MetricAlertStatusCollection: msRest.CompositeMapper = {
  serializedName: "MetricAlertStatusCollection",
  type: {
    name: "Composite",
    className: "MetricAlertStatusCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricAlertStatus"
            }
          }
        }
      }
    }
  }
};

export const MultiMetricCriteria: msRest.CompositeMapper = {
  serializedName: "MultiMetricCriteria",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "criterionType",
      clientName: "criterionType"
    },
    uberParent: "MultiMetricCriteria",
    className: "MultiMetricCriteria",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      metricName: {
        required: true,
        serializedName: "metricName",
        type: {
          name: "String"
        }
      },
      metricNamespace: {
        serializedName: "metricNamespace",
        type: {
          name: "String"
        }
      },
      timeAggregation: {
        required: true,
        serializedName: "timeAggregation",
        type: {
          name: "Object"
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricDimension"
            }
          }
        }
      },
      criterionType: {
        required: true,
        serializedName: "criterionType",
        type: {
          name: "String"
        }
      }
    },
    additionalProperties: {
      type: {
        name: "Object"
      }
    }
  }
};

export const MetricCriteria: msRest.CompositeMapper = {
  serializedName: "StaticThresholdCriterion",
  type: {
    name: "Composite",
    polymorphicDiscriminator: MultiMetricCriteria.type.polymorphicDiscriminator,
    uberParent: "MultiMetricCriteria",
    className: "MetricCriteria",
    modelProperties: {
      ...MultiMetricCriteria.type.modelProperties,
      operator: {
        required: true,
        serializedName: "operator",
        type: {
          name: "Object"
        }
      },
      threshold: {
        required: true,
        serializedName: "threshold",
        type: {
          name: "Number"
        }
      }
    },
    additionalProperties: MultiMetricCriteria.type.additionalProperties
  }
};

export const MetricAlertSingleResourceMultipleMetricCriteria: msRest.CompositeMapper = {
  serializedName: "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
  type: {
    name: "Composite",
    polymorphicDiscriminator: MetricAlertCriteria.type.polymorphicDiscriminator,
    uberParent: "MetricAlertCriteria",
    className: "MetricAlertSingleResourceMultipleMetricCriteria",
    modelProperties: {
      ...MetricAlertCriteria.type.modelProperties,
      allOf: {
        serializedName: "allOf",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricCriteria",
              additionalProperties: MultiMetricCriteria.type.additionalProperties
            }
          }
        }
      }
    },
    additionalProperties: MetricAlertCriteria.type.additionalProperties
  }
};

export const MetricDimension: msRest.CompositeMapper = {
  serializedName: "MetricDimension",
  type: {
    name: "Composite",
    className: "MetricDimension",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      operator: {
        required: true,
        serializedName: "operator",
        type: {
          name: "String"
        }
      },
      values: {
        required: true,
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const MetricAlertMultipleResourceMultipleMetricCriteria: msRest.CompositeMapper = {
  serializedName: "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
  type: {
    name: "Composite",
    polymorphicDiscriminator: MetricAlertCriteria.type.polymorphicDiscriminator,
    uberParent: "MetricAlertCriteria",
    className: "MetricAlertMultipleResourceMultipleMetricCriteria",
    modelProperties: {
      ...MetricAlertCriteria.type.modelProperties,
      allOf: {
        serializedName: "allOf",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MultiMetricCriteria",
              additionalProperties: {
                type: {
                  name: "Object"
                }
              }
            }
          }
        }
      }
    },
    additionalProperties: MetricAlertCriteria.type.additionalProperties
  }
};

export const DynamicThresholdFailingPeriods: msRest.CompositeMapper = {
  serializedName: "DynamicThresholdFailingPeriods",
  type: {
    name: "Composite",
    className: "DynamicThresholdFailingPeriods",
    modelProperties: {
      numberOfEvaluationPeriods: {
        required: true,
        serializedName: "numberOfEvaluationPeriods",
        type: {
          name: "Number"
        }
      },
      minFailingPeriodsToAlert: {
        required: true,
        serializedName: "minFailingPeriodsToAlert",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DynamicMetricCriteria: msRest.CompositeMapper = {
  serializedName: "DynamicThresholdCriterion",
  type: {
    name: "Composite",
    polymorphicDiscriminator: MultiMetricCriteria.type.polymorphicDiscriminator,
    uberParent: "MultiMetricCriteria",
    className: "DynamicMetricCriteria",
    modelProperties: {
      ...MultiMetricCriteria.type.modelProperties,
      operator: {
        required: true,
        serializedName: "operator",
        type: {
          name: "Object"
        }
      },
      alertSensitivity: {
        required: true,
        serializedName: "alertSensitivity",
        type: {
          name: "Object"
        }
      },
      failingPeriods: {
        required: true,
        serializedName: "failingPeriods",
        type: {
          name: "Composite",
          className: "DynamicThresholdFailingPeriods"
        }
      },
      ignoreDataBefore: {
        serializedName: "ignoreDataBefore",
        type: {
          name: "DateTime"
        }
      }
    },
    additionalProperties: MultiMetricCriteria.type.additionalProperties
  }
};

export const Source: msRest.CompositeMapper = {
  serializedName: "Source",
  type: {
    name: "Composite",
    className: "Source",
    modelProperties: {
      query: {
        serializedName: "query",
        type: {
          name: "String"
        }
      },
      authorizedResources: {
        serializedName: "authorizedResources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      dataSourceId: {
        required: true,
        serializedName: "dataSourceId",
        type: {
          name: "String"
        }
      },
      queryType: {
        serializedName: "queryType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Schedule: msRest.CompositeMapper = {
  serializedName: "Schedule",
  type: {
    name: "Composite",
    className: "Schedule",
    modelProperties: {
      frequencyInMinutes: {
        required: true,
        serializedName: "frequencyInMinutes",
        type: {
          name: "Number"
        }
      },
      timeWindowInMinutes: {
        required: true,
        serializedName: "timeWindowInMinutes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Action: msRest.CompositeMapper = {
  serializedName: "Action",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "odata.type",
      clientName: "odatatype"
    },
    uberParent: "Action",
    className: "Action",
    modelProperties: {
      odatatype: {
        required: true,
        serializedName: "odata\\.type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LogSearchRuleResource: msRest.CompositeMapper = {
  serializedName: "LogSearchRuleResource",
  type: {
    name: "Composite",
    className: "LogSearchRuleResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "String"
        }
      },
      lastUpdatedTime: {
        readOnly: true,
        serializedName: "properties.lastUpdatedTime",
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      source: {
        required: true,
        serializedName: "properties.source",
        type: {
          name: "Composite",
          className: "Source"
        }
      },
      schedule: {
        serializedName: "properties.schedule",
        type: {
          name: "Composite",
          className: "Schedule"
        }
      },
      action: {
        required: true,
        serializedName: "properties.action",
        type: {
          name: "Composite",
          className: "Action"
        }
      }
    }
  }
};

export const LogSearchRuleResourcePatch: msRest.CompositeMapper = {
  serializedName: "LogSearchRuleResourcePatch",
  type: {
    name: "Composite",
    className: "LogSearchRuleResourcePatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LogMetricTrigger: msRest.CompositeMapper = {
  serializedName: "LogMetricTrigger",
  type: {
    name: "Composite",
    className: "LogMetricTrigger",
    modelProperties: {
      thresholdOperator: {
        serializedName: "thresholdOperator",
        type: {
          name: "String"
        }
      },
      threshold: {
        serializedName: "threshold",
        type: {
          name: "Number"
        }
      },
      metricTriggerType: {
        serializedName: "metricTriggerType",
        type: {
          name: "String"
        }
      },
      metricColumn: {
        serializedName: "metricColumn",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TriggerCondition: msRest.CompositeMapper = {
  serializedName: "TriggerCondition",
  type: {
    name: "Composite",
    className: "TriggerCondition",
    modelProperties: {
      thresholdOperator: {
        required: true,
        serializedName: "thresholdOperator",
        type: {
          name: "String"
        }
      },
      threshold: {
        required: true,
        serializedName: "threshold",
        type: {
          name: "Number"
        }
      },
      metricTrigger: {
        serializedName: "metricTrigger",
        type: {
          name: "Composite",
          className: "LogMetricTrigger"
        }
      }
    }
  }
};

export const AzNsActionGroup: msRest.CompositeMapper = {
  serializedName: "AzNsActionGroup",
  type: {
    name: "Composite",
    className: "AzNsActionGroup",
    modelProperties: {
      actionGroup: {
        serializedName: "actionGroup",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      emailSubject: {
        serializedName: "emailSubject",
        type: {
          name: "String"
        }
      },
      customWebhookPayload: {
        serializedName: "customWebhookPayload",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AlertingAction: msRest.CompositeMapper = {
  serializedName: "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Action.type.polymorphicDiscriminator,
    uberParent: "Action",
    className: "AlertingAction",
    modelProperties: {
      ...Action.type.modelProperties,
      severity: {
        required: true,
        serializedName: "severity",
        type: {
          name: "String"
        }
      },
      aznsAction: {
        serializedName: "aznsAction",
        type: {
          name: "Composite",
          className: "AzNsActionGroup"
        }
      },
      throttlingInMin: {
        serializedName: "throttlingInMin",
        type: {
          name: "Number"
        }
      },
      trigger: {
        required: true,
        serializedName: "trigger",
        type: {
          name: "Composite",
          className: "TriggerCondition"
        }
      }
    }
  }
};

export const Dimension: msRest.CompositeMapper = {
  serializedName: "Dimension",
  type: {
    name: "Composite",
    className: "Dimension",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      operator: {
        required: true,
        isConstant: true,
        serializedName: "operator",
        defaultValue: 'Include',
        type: {
          name: "String"
        }
      },
      values: {
        required: true,
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Criteria: msRest.CompositeMapper = {
  serializedName: "Criteria",
  type: {
    name: "Composite",
    className: "Criteria",
    modelProperties: {
      metricName: {
        required: true,
        serializedName: "metricName",
        type: {
          name: "String"
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Dimension"
            }
          }
        }
      }
    }
  }
};

export const LogToMetricAction: msRest.CompositeMapper = {
  serializedName: "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.LogToMetricAction",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Action.type.polymorphicDiscriminator,
    uberParent: "Action",
    className: "LogToMetricAction",
    modelProperties: {
      ...Action.type.modelProperties,
      criteria: {
        required: true,
        serializedName: "criteria",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Criteria"
            }
          }
        }
      }
    }
  }
};

export const MetricNamespaceName: msRest.CompositeMapper = {
  serializedName: "MetricNamespaceName",
  type: {
    name: "Composite",
    className: "MetricNamespaceName",
    modelProperties: {
      metricNamespaceName: {
        serializedName: "metricNamespaceName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricNamespace: msRest.CompositeMapper = {
  serializedName: "MetricNamespace",
  type: {
    name: "Composite",
    className: "MetricNamespace",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MetricNamespaceName"
        }
      }
    }
  }
};

export const ProxyResource: msRest.CompositeMapper = {
  serializedName: "ProxyResource",
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorModel: msRest.CompositeMapper = {
  serializedName: "Error",
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      code: {
        required: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResponseWithError: msRest.CompositeMapper = {
  serializedName: "ResponseWithError",
  type: {
    name: "Composite",
    className: "ResponseWithError",
    modelProperties: {
      error: {
        required: true,
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      }
    }
  }
};

export const WorkspaceInfo: msRest.CompositeMapper = {
  serializedName: "WorkspaceInfo",
  type: {
    name: "Composite",
    className: "WorkspaceInfo",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      customerId: {
        required: true,
        serializedName: "properties.customerId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataContainer: msRest.CompositeMapper = {
  serializedName: "DataContainer",
  type: {
    name: "Composite",
    className: "DataContainer",
    modelProperties: {
      workspace: {
        required: true,
        serializedName: "workspace",
        type: {
          name: "Composite",
          className: "WorkspaceInfo"
        }
      }
    }
  }
};

export const VMInsightsOnboardingStatus: msRest.CompositeMapper = {
  serializedName: "VMInsightsOnboardingStatus",
  type: {
    name: "Composite",
    className: "VMInsightsOnboardingStatus",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      resourceId: {
        required: true,
        serializedName: "properties.resourceId",
        type: {
          name: "String"
        }
      },
      onboardingStatus: {
        required: true,
        serializedName: "properties.onboardingStatus",
        type: {
          name: "String"
        }
      },
      dataStatus: {
        required: true,
        serializedName: "properties.dataStatus",
        type: {
          name: "String"
        }
      },
      data: {
        serializedName: "properties.data",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataContainer"
            }
          }
        }
      }
    }
  }
};

export const AutoscaleSettingResourceCollection: msRest.CompositeMapper = {
  serializedName: "AutoscaleSettingResourceCollection",
  type: {
    name: "Composite",
    className: "AutoscaleSettingResourceCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AutoscaleSettingResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IncidentListResult: msRest.CompositeMapper = {
  serializedName: "IncidentListResult",
  type: {
    name: "Composite",
    className: "IncidentListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Incident"
            }
          }
        }
      }
    }
  }
};

export const AlertRuleResourceCollection: msRest.CompositeMapper = {
  serializedName: "AlertRuleResourceCollection",
  type: {
    name: "Composite",
    className: "AlertRuleResourceCollection",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AlertRuleResource"
            }
          }
        }
      }
    }
  }
};

export const LogProfileCollection: msRest.CompositeMapper = {
  serializedName: "LogProfileCollection",
  type: {
    name: "Composite",
    className: "LogProfileCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LogProfileResource"
            }
          }
        }
      }
    }
  }
};

export const ActionGroupList: msRest.CompositeMapper = {
  serializedName: "ActionGroupList",
  type: {
    name: "Composite",
    className: "ActionGroupList",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ActionGroupResource"
            }
          }
        }
      }
    }
  }
};

export const ActivityLogAlertList: msRest.CompositeMapper = {
  serializedName: "ActivityLogAlertList",
  type: {
    name: "Composite",
    className: "ActivityLogAlertList",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ActivityLogAlertResource"
            }
          }
        }
      }
    }
  }
};

export const EventDataCollection: msRest.CompositeMapper = {
  serializedName: "EventDataCollection",
  type: {
    name: "Composite",
    className: "EventDataCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EventData"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventCategoryCollection: msRest.CompositeMapper = {
  serializedName: "EventCategoryCollection",
  type: {
    name: "Composite",
    className: "EventCategoryCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LocalizableString"
            }
          }
        }
      }
    }
  }
};

export const MetricDefinitionCollection: msRest.CompositeMapper = {
  serializedName: "MetricDefinitionCollection",
  type: {
    name: "Composite",
    className: "MetricDefinitionCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricDefinition"
            }
          }
        }
      }
    }
  }
};

export const MetricBaselinesResponse: msRest.CompositeMapper = {
  serializedName: "MetricBaselinesResponse",
  type: {
    name: "Composite",
    className: "MetricBaselinesResponse",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SingleMetricBaseline"
            }
          }
        }
      }
    }
  }
};

export const MetricAlertResourceCollection: msRest.CompositeMapper = {
  serializedName: "MetricAlertResourceCollection",
  type: {
    name: "Composite",
    className: "MetricAlertResourceCollection",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricAlertResource"
            }
          }
        }
      }
    }
  }
};

export const LogSearchRuleResourceCollection: msRest.CompositeMapper = {
  serializedName: "LogSearchRuleResourceCollection",
  type: {
    name: "Composite",
    className: "LogSearchRuleResourceCollection",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LogSearchRuleResource"
            }
          }
        }
      }
    }
  }
};

export const MetricNamespaceCollection: msRest.CompositeMapper = {
  serializedName: "MetricNamespaceCollection",
  type: {
    name: "Composite",
    className: "MetricNamespaceCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricNamespace"
            }
          }
        }
      }
    }
  }
};

export const discriminators = {
  'RuleDataSource' : RuleDataSource,
  'RuleCondition' : RuleCondition,
  'RuleDataSource.Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource' : RuleMetricDataSource,
  'RuleDataSource.Microsoft.Azure.Management.Insights.Models.RuleManagementEventDataSource' : RuleManagementEventDataSource,
  'RuleCondition.Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition' : ThresholdRuleCondition,
  'RuleCondition.Microsoft.Azure.Management.Insights.Models.LocationThresholdRuleCondition' : LocationThresholdRuleCondition,
  'RuleCondition.Microsoft.Azure.Management.Insights.Models.ManagementEventRuleCondition' : ManagementEventRuleCondition,
  'RuleAction' : RuleAction,
  'RuleAction.Microsoft.Azure.Management.Insights.Models.RuleEmailAction' : RuleEmailAction,
  'RuleAction.Microsoft.Azure.Management.Insights.Models.RuleWebhookAction' : RuleWebhookAction,
  'MetricAlertCriteria' : MetricAlertCriteria,
  'MultiMetricCriteria.StaticThresholdCriterion' : MetricCriteria,
  'MetricAlertCriteria.Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria' : MetricAlertSingleResourceMultipleMetricCriteria,
  'MultiMetricCriteria' : MultiMetricCriteria,
  'MetricAlertCriteria.Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria' : MetricAlertMultipleResourceMultipleMetricCriteria,
  'MultiMetricCriteria.DynamicThresholdCriterion' : DynamicMetricCriteria,
  'Action' : Action,
  'Action.Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction' : AlertingAction,
  'Action.Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.LogToMetricAction' : LogToMetricAction

};
