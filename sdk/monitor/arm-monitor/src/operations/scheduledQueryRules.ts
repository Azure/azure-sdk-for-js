/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/scheduledQueryRulesMappers";
import * as Parameters from "../models/parameters";
import { MonitorManagementClientContext } from "../monitorManagementClientContext";

/** Class representing a ScheduledQueryRules. */
export class ScheduledQueryRules {
  private readonly client: MonitorManagementClientContext;

  /**
   * Create a ScheduledQueryRules.
   * @param {MonitorManagementClientContext} client Reference to the service client.
   */
  constructor(client: MonitorManagementClientContext) {
    this.client = client;
  }

  /**
   * Creates or updates an log search rule.
   * @param resourceGroupName The name of the resource group.
   * @param ruleName The name of the rule.
   * @param parameters The parameters of the rule to create or update.
   * @param [options] The optional parameters
   * @returns Promise<Models.ScheduledQueryRulesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, ruleName: string, parameters: Models.LogSearchRuleResource, options?: msRest.RequestOptionsBase): Promise<Models.ScheduledQueryRulesCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param ruleName The name of the rule.
   * @param parameters The parameters of the rule to create or update.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, ruleName: string, parameters: Models.LogSearchRuleResource, callback: msRest.ServiceCallback<Models.LogSearchRuleResource>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param ruleName The name of the rule.
   * @param parameters The parameters of the rule to create or update.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, ruleName: string, parameters: Models.LogSearchRuleResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LogSearchRuleResource>): void;
  createOrUpdate(resourceGroupName: string, ruleName: string, parameters: Models.LogSearchRuleResource, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LogSearchRuleResource>, callback?: msRest.ServiceCallback<Models.LogSearchRuleResource>): Promise<Models.ScheduledQueryRulesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        ruleName,
        parameters,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.ScheduledQueryRulesCreateOrUpdateResponse>;
  }

  /**
   * Gets an Log Search rule
   * @param resourceGroupName The name of the resource group.
   * @param ruleName The name of the rule.
   * @param [options] The optional parameters
   * @returns Promise<Models.ScheduledQueryRulesGetResponse>
   */
  get(resourceGroupName: string, ruleName: string, options?: msRest.RequestOptionsBase): Promise<Models.ScheduledQueryRulesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param ruleName The name of the rule.
   * @param callback The callback
   */
  get(resourceGroupName: string, ruleName: string, callback: msRest.ServiceCallback<Models.LogSearchRuleResource>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param ruleName The name of the rule.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, ruleName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LogSearchRuleResource>): void;
  get(resourceGroupName: string, ruleName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LogSearchRuleResource>, callback?: msRest.ServiceCallback<Models.LogSearchRuleResource>): Promise<Models.ScheduledQueryRulesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        ruleName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ScheduledQueryRulesGetResponse>;
  }

  /**
   * Update log search Rule.
   * @param resourceGroupName The name of the resource group.
   * @param ruleName The name of the rule.
   * @param parameters The parameters of the rule to update.
   * @param [options] The optional parameters
   * @returns Promise<Models.ScheduledQueryRulesUpdateResponse>
   */
  update(resourceGroupName: string, ruleName: string, parameters: Models.LogSearchRuleResourcePatch, options?: msRest.RequestOptionsBase): Promise<Models.ScheduledQueryRulesUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param ruleName The name of the rule.
   * @param parameters The parameters of the rule to update.
   * @param callback The callback
   */
  update(resourceGroupName: string, ruleName: string, parameters: Models.LogSearchRuleResourcePatch, callback: msRest.ServiceCallback<Models.LogSearchRuleResource>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param ruleName The name of the rule.
   * @param parameters The parameters of the rule to update.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, ruleName: string, parameters: Models.LogSearchRuleResourcePatch, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LogSearchRuleResource>): void;
  update(resourceGroupName: string, ruleName: string, parameters: Models.LogSearchRuleResourcePatch, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LogSearchRuleResource>, callback?: msRest.ServiceCallback<Models.LogSearchRuleResource>): Promise<Models.ScheduledQueryRulesUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        ruleName,
        parameters,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.ScheduledQueryRulesUpdateResponse>;
  }

  /**
   * Deletes a Log Search rule
   * @param resourceGroupName The name of the resource group.
   * @param ruleName The name of the rule.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, ruleName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param ruleName The name of the rule.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, ruleName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param ruleName The name of the rule.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, ruleName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, ruleName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        ruleName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * List the Log Search rules within a subscription group.
   * @param [options] The optional parameters
   * @returns Promise<Models.ScheduledQueryRulesListBySubscriptionResponse>
   */
  listBySubscription(options?: Models.ScheduledQueryRulesListBySubscriptionOptionalParams): Promise<Models.ScheduledQueryRulesListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.LogSearchRuleResourceCollection>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: Models.ScheduledQueryRulesListBySubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.LogSearchRuleResourceCollection>): void;
  listBySubscription(options?: Models.ScheduledQueryRulesListBySubscriptionOptionalParams | msRest.ServiceCallback<Models.LogSearchRuleResourceCollection>, callback?: msRest.ServiceCallback<Models.LogSearchRuleResourceCollection>): Promise<Models.ScheduledQueryRulesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.ScheduledQueryRulesListBySubscriptionResponse>;
  }

  /**
   * List the Log Search rules within a resource group.
   * @param resourceGroupName The name of the resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.ScheduledQueryRulesListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: Models.ScheduledQueryRulesListByResourceGroupOptionalParams): Promise<Models.ScheduledQueryRulesListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.LogSearchRuleResourceCollection>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: Models.ScheduledQueryRulesListByResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.LogSearchRuleResourceCollection>): void;
  listByResourceGroup(resourceGroupName: string, options?: Models.ScheduledQueryRulesListByResourceGroupOptionalParams | msRest.ServiceCallback<Models.LogSearchRuleResourceCollection>, callback?: msRest.ServiceCallback<Models.LogSearchRuleResourceCollection>): Promise<Models.ScheduledQueryRulesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.ScheduledQueryRulesListByResourceGroupResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/scheduledQueryRules/{ruleName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.ruleName
  ],
  queryParameters: [
    Parameters.apiVersion9
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.LogSearchRuleResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.LogSearchRuleResource
    },
    201: {
      bodyMapper: Mappers.LogSearchRuleResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/scheduledQueryRules/{ruleName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.ruleName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion9
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LogSearchRuleResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/scheduledQueryRules/{ruleName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.ruleName
  ],
  queryParameters: [
    Parameters.apiVersion9
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.LogSearchRuleResourcePatch,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.LogSearchRuleResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/scheduledQueryRules/{ruleName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.ruleName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion9
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/microsoft.insights/scheduledQueryRules",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion9,
    Parameters.filter1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LogSearchRuleResourceCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/scheduledQueryRules",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion9,
    Parameters.filter1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LogSearchRuleResourceCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
