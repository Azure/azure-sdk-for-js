/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Monitor } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MonitorClient } from "../monitorClient";
import {
  OperationAutoGenerated,
  MonitorOperationsListNextOptionalParams,
  MonitorOperationsListOptionalParams,
  MonitorOperationsListResponse,
  MonitorOperationsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Monitor operations. */
export class MonitorImpl implements Monitor {
  private readonly client: MonitorClient;

  /**
   * Initialize a new instance of the class Monitor class.
   * @param client Reference to the service client
   */
  constructor(client: MonitorClient) {
    this.client = client;
  }

  /**
   * Lists available Operations for this Resource Provider
   * @param options The options parameters.
   */
  public listOperationsList(
    options?: MonitorOperationsListOptionalParams
  ): PagedAsyncIterableIterator<OperationAutoGenerated> {
    const iter = this.operationsListPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.operationsListPagingPage(options, settings);
      }
    };
  }

  private async *operationsListPagingPage(
    options?: MonitorOperationsListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<OperationAutoGenerated[]> {
    let result: MonitorOperationsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._operationsList(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._operationsListNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *operationsListPagingAll(
    options?: MonitorOperationsListOptionalParams
  ): AsyncIterableIterator<OperationAutoGenerated> {
    for await (const page of this.operationsListPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Lists available Operations for this Resource Provider
   * @param options The options parameters.
   */
  private _operationsList(
    options?: MonitorOperationsListOptionalParams
  ): Promise<MonitorOperationsListResponse> {
    return this.client.sendOperationRequest(
      { options },
      operationsListOperationSpec
    );
  }

  /**
   * OperationsListNext
   * @param nextLink The nextLink from the previous successful call to the OperationsList method.
   * @param options The options parameters.
   */
  private _operationsListNext(
    nextLink: string,
    options?: MonitorOperationsListNextOptionalParams
  ): Promise<MonitorOperationsListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      operationsListNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const operationsListOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Monitor/operations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OperationListResultAutoGenerated
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated2
    }
  },
  queryParameters: [Parameters.apiVersion14],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const operationsListNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OperationListResultAutoGenerated
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated2
    }
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
