/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { MetricAlertsStatus } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MonitorClient } from "../monitorClient";
import {
  MetricAlertsStatusListOptionalParams,
  MetricAlertsStatusListResponse,
  MetricAlertsStatusListByNameOptionalParams,
  MetricAlertsStatusListByNameResponse
} from "../models";

/** Class containing MetricAlertsStatus operations. */
export class MetricAlertsStatusImpl implements MetricAlertsStatus {
  private readonly client: MonitorClient;

  /**
   * Initialize a new instance of the class MetricAlertsStatus class.
   * @param client Reference to the service client
   */
  constructor(client: MonitorClient) {
    this.client = client;
  }

  /**
   * Retrieve an alert rule status.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param ruleName The name of the rule.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    ruleName: string,
    options?: MetricAlertsStatusListOptionalParams
  ): Promise<MetricAlertsStatusListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, ruleName, options },
      listOperationSpec
    );
  }

  /**
   * Retrieve an alert rule status.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param ruleName The name of the rule.
   * @param statusName The name of the status.
   * @param options The options parameters.
   */
  listByName(
    resourceGroupName: string,
    ruleName: string,
    statusName: string,
    options?: MetricAlertsStatusListByNameOptionalParams
  ): Promise<MetricAlertsStatusListByNameResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, ruleName, statusName, options },
      listByNameOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}/status",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MetricAlertStatusCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion7],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.ruleName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByNameOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}/status/{statusName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MetricAlertStatusCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion7],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.ruleName,
    Parameters.statusName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
