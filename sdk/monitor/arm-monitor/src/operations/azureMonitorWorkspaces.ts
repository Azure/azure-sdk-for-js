/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { AzureMonitorWorkspaces } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MonitorClient } from "../monitorClient";
import {
  MonitoringAccountResource,
  AzureMonitorWorkspacesListByResourceGroupNextOptionalParams,
  AzureMonitorWorkspacesListByResourceGroupOptionalParams,
  AzureMonitorWorkspacesListByResourceGroupResponse,
  AzureMonitorWorkspacesListBySubscriptionNextOptionalParams,
  AzureMonitorWorkspacesListBySubscriptionOptionalParams,
  AzureMonitorWorkspacesListBySubscriptionResponse,
  AzureMonitorWorkspacesGetOptionalParams,
  AzureMonitorWorkspacesGetResponse,
  AzureMonitorWorkspacesCreateOptionalParams,
  AzureMonitorWorkspacesCreateResponse,
  AzureMonitorWorkspacesUpdateOptionalParams,
  AzureMonitorWorkspacesUpdateResponse,
  AzureMonitorWorkspacesDeleteOptionalParams,
  AzureMonitorWorkspacesListByResourceGroupNextResponse,
  AzureMonitorWorkspacesListBySubscriptionNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing AzureMonitorWorkspaces operations. */
export class AzureMonitorWorkspacesImpl implements AzureMonitorWorkspaces {
  private readonly client: MonitorClient;

  /**
   * Initialize a new instance of the class AzureMonitorWorkspaces class.
   * @param client Reference to the service client
   */
  constructor(client: MonitorClient) {
    this.client = client;
  }

  /**
   * Lists all workspaces in the specified resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: AzureMonitorWorkspacesListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<MonitoringAccountResource> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: AzureMonitorWorkspacesListByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<MonitoringAccountResource[]> {
    let result: AzureMonitorWorkspacesListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: AzureMonitorWorkspacesListByResourceGroupOptionalParams
  ): AsyncIterableIterator<MonitoringAccountResource> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists all workspaces in the specified subscription
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: AzureMonitorWorkspacesListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<MonitoringAccountResource> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: AzureMonitorWorkspacesListBySubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<MonitoringAccountResource[]> {
    let result: AzureMonitorWorkspacesListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: AzureMonitorWorkspacesListBySubscriptionOptionalParams
  ): AsyncIterableIterator<MonitoringAccountResource> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Lists all workspaces in the specified resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: AzureMonitorWorkspacesListByResourceGroupOptionalParams
  ): Promise<AzureMonitorWorkspacesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Lists all workspaces in the specified subscription
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: AzureMonitorWorkspacesListBySubscriptionOptionalParams
  ): Promise<AzureMonitorWorkspacesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * Returns the specific Azure Monitor workspace
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitoringAccountName The name of the Azure Monitor workspace.  The name is case insensitive
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    monitoringAccountName: string,
    options?: AzureMonitorWorkspacesGetOptionalParams
  ): Promise<AzureMonitorWorkspacesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitoringAccountName, options },
      getOperationSpec
    );
  }

  /**
   * Create or update a workspace
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitoringAccountName The name of the Azure Monitor workspace.  The name is case insensitive
   * @param monitoringAccountProperties Properties that need to be specified to create a new workspace
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    monitoringAccountName: string,
    monitoringAccountProperties: MonitoringAccountResource,
    options?: AzureMonitorWorkspacesCreateOptionalParams
  ): Promise<AzureMonitorWorkspacesCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        monitoringAccountName,
        monitoringAccountProperties,
        options
      },
      createOperationSpec
    );
  }

  /**
   * Updates part of a workspace
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitoringAccountName The name of the Azure Monitor workspace.  The name is case insensitive
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    monitoringAccountName: string,
    options?: AzureMonitorWorkspacesUpdateOptionalParams
  ): Promise<AzureMonitorWorkspacesUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitoringAccountName, options },
      updateOperationSpec
    );
  }

  /**
   * Delete a workspace
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitoringAccountName The name of the Azure Monitor workspace.  The name is case insensitive
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    monitoringAccountName: string,
    options?: AzureMonitorWorkspacesDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitoringAccountName, options },
      deleteOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: AzureMonitorWorkspacesListByResourceGroupNextOptionalParams
  ): Promise<AzureMonitorWorkspacesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: AzureMonitorWorkspacesListBySubscriptionNextOptionalParams
  ): Promise<AzureMonitorWorkspacesListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Monitor/accounts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MonitoringAccountResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated2
    }
  },
  queryParameters: [Parameters.apiVersion14],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Monitor/accounts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MonitoringAccountResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated2
    }
  },
  queryParameters: [Parameters.apiVersion14],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Monitor/accounts/{monitoringAccountName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MonitoringAccountResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated2
    }
  },
  queryParameters: [Parameters.apiVersion14],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.monitoringAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Monitor/accounts/{monitoringAccountName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.MonitoringAccountResource
    },
    201: {
      bodyMapper: Mappers.MonitoringAccountResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated2
    }
  },
  requestBody: Parameters.monitoringAccountProperties,
  queryParameters: [Parameters.apiVersion14],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.monitoringAccountName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Monitor/accounts/{monitoringAccountName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.MonitoringAccountResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated2
    }
  },
  requestBody: Parameters.monitoringAccountProperties1,
  queryParameters: [Parameters.apiVersion14],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.monitoringAccountName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Monitor/accounts/{monitoringAccountName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated2
    }
  },
  queryParameters: [Parameters.apiVersion14],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.monitoringAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MonitoringAccountResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated2
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MonitoringAccountResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated2
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
