/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/privateLinkScopeOperationStatusMappers";
import * as Parameters from "../models/parameters";
import { MonitorManagementClientContext } from "../monitorManagementClientContext";

/** Class representing a PrivateLinkScopeOperationStatus. */
export class PrivateLinkScopeOperationStatus {
  private readonly client: MonitorManagementClientContext;

  /**
   * Create a PrivateLinkScopeOperationStatus.
   * @param {MonitorManagementClientContext} client Reference to the service client.
   */
  constructor(client: MonitorManagementClientContext) {
    this.client = client;
  }

  /**
   * Get the status of an azure asynchronous operation associated with a private link scope
   * operation.
   * @param asyncOperationId The operation Id.
   * @param resourceGroupName The name of the resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateLinkScopeOperationStatusGetResponse>
   */
  get(asyncOperationId: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.PrivateLinkScopeOperationStatusGetResponse>;
  /**
   * @param asyncOperationId The operation Id.
   * @param resourceGroupName The name of the resource group.
   * @param callback The callback
   */
  get(asyncOperationId: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param asyncOperationId The operation Id.
   * @param resourceGroupName The name of the resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(asyncOperationId: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  get(asyncOperationId: string, resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.PrivateLinkScopeOperationStatusGetResponse> {
    return this.client.sendOperationRequest(
      {
        asyncOperationId,
        resourceGroupName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.PrivateLinkScopeOperationStatusGetResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/privateLinkScopeOperationStatuses/{asyncOperationId}",
  urlParameters: [
    Parameters.asyncOperationId,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion11
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
