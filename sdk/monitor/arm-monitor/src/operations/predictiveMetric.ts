/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PredictiveMetric } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MonitorClient } from "../monitorClient";
import {
  PredictiveMetricGetOptionalParams,
  PredictiveMetricGetResponse
} from "../models";

/** Class containing PredictiveMetric operations. */
export class PredictiveMetricImpl implements PredictiveMetric {
  private readonly client: MonitorClient;

  /**
   * Initialize a new instance of the class PredictiveMetric class.
   * @param client Reference to the service client
   */
  constructor(client: MonitorClient) {
    this.client = client;
  }

  /**
   * get predictive autoscale metric future data
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param autoscaleSettingName The autoscale setting name.
   * @param timespan The timespan of the query. It is a string with the following format
   *                 'startDateTime_ISO/endDateTime_ISO'.
   * @param interval The interval (i.e. timegrain) of the query.
   * @param metricNamespace Metric namespace to query metric definitions for.
   * @param metricName The names of the metrics (comma separated) to retrieve. Special case: If a
   *                   metricname itself has a comma in it then use %2 to indicate it. Eg: 'Metric,Name1' should be
   *                   **'Metric%2Name1'**
   * @param aggregation The list of aggregation types (comma separated) to retrieve.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    autoscaleSettingName: string,
    timespan: string,
    interval: string,
    metricNamespace: string,
    metricName: string,
    aggregation: string,
    options?: PredictiveMetricGetOptionalParams
  ): Promise<PredictiveMetricGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        autoscaleSettingName,
        timespan,
        interval,
        metricNamespace,
        metricName,
        aggregation,
        options
      },
      getOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Insights/autoscalesettings/{autoscaleSettingName}/predictiveMetrics",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PredictiveResponse
    },
    default: {
      bodyMapper: Mappers.AutoscaleErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timespan,
    Parameters.interval,
    Parameters.metricNamespace,
    Parameters.metricName,
    Parameters.aggregation
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.autoscaleSettingName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
