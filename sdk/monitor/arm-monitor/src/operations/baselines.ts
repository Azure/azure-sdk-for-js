/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { Baselines } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MonitorClient } from "../monitorClient";
import {
  SingleMetricBaseline,
  BaselinesListOptionalParams,
  BaselinesListResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Baselines operations. */
export class BaselinesImpl implements Baselines {
  private readonly client: MonitorClient;

  /**
   * Initialize a new instance of the class Baselines class.
   * @param client Reference to the service client
   */
  constructor(client: MonitorClient) {
    this.client = client;
  }

  /**
   * **Lists the metric baseline values for a resource**.
   * @param resourceUri The identifier of the resource.
   * @param options The options parameters.
   */
  public list(
    resourceUri: string,
    options?: BaselinesListOptionalParams
  ): PagedAsyncIterableIterator<SingleMetricBaseline> {
    const iter = this.listPagingAll(resourceUri, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(resourceUri, options, settings);
      }
    };
  }

  private async *listPagingPage(
    resourceUri: string,
    options?: BaselinesListOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<SingleMetricBaseline[]> {
    let result: BaselinesListResponse;
    result = await this._list(resourceUri, options);
    yield result.value || [];
  }

  private async *listPagingAll(
    resourceUri: string,
    options?: BaselinesListOptionalParams
  ): AsyncIterableIterator<SingleMetricBaseline> {
    for await (const page of this.listPagingPage(resourceUri, options)) {
      yield* page;
    }
  }

  /**
   * **Lists the metric baseline values for a resource**.
   * @param resourceUri The identifier of the resource.
   * @param options The options parameters.
   */
  private _list(
    resourceUri: string,
    options?: BaselinesListOptionalParams
  ): Promise<BaselinesListResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, options },
      listOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.Insights/metricBaselines",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MetricBaselinesResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.filter1,
    Parameters.metricnamespace,
    Parameters.timespan1,
    Parameters.interval1,
    Parameters.metricnames,
    Parameters.aggregation1,
    Parameters.resultType,
    Parameters.sensitivities,
    Parameters.apiVersion6
  ],
  urlParameters: [Parameters.$host, Parameters.resourceUri],
  headerParameters: [Parameters.accept],
  serializer
};
