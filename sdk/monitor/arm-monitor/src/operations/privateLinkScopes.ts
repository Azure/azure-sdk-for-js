/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/privateLinkScopesMappers";
import * as Parameters from "../models/parameters";
import { MonitorManagementClientContext } from "../monitorManagementClientContext";

/** Class representing a PrivateLinkScopes. */
export class PrivateLinkScopes {
  private readonly client: MonitorManagementClientContext;

  /**
   * Create a PrivateLinkScopes.
   * @param {MonitorManagementClientContext} client Reference to the service client.
   */
  constructor(client: MonitorManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets a list of all Azure Monitor PrivateLinkScopes within a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateLinkScopesListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.PrivateLinkScopesListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.AzureMonitorPrivateLinkScopeListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.AzureMonitorPrivateLinkScopeListResult>
  ): void;
  list(
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.AzureMonitorPrivateLinkScopeListResult>,
    callback?: msRest.ServiceCallback<Models.AzureMonitorPrivateLinkScopeListResult>
  ): Promise<Models.PrivateLinkScopesListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback
    ) as Promise<Models.PrivateLinkScopesListResponse>;
  }

  /**
   * Gets a list of Azure Monitor PrivateLinkScopes within a resource group.
   * @param resourceGroupName The name of the resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateLinkScopesListByResourceGroupResponse>
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.PrivateLinkScopesListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param callback The callback
   */
  listByResourceGroup(
    resourceGroupName: string,
    callback: msRest.ServiceCallback<Models.AzureMonitorPrivateLinkScopeListResult>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(
    resourceGroupName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.AzureMonitorPrivateLinkScopeListResult>
  ): void;
  listByResourceGroup(
    resourceGroupName: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.AzureMonitorPrivateLinkScopeListResult>,
    callback?: msRest.ServiceCallback<Models.AzureMonitorPrivateLinkScopeListResult>
  ): Promise<Models.PrivateLinkScopesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback
    ) as Promise<Models.PrivateLinkScopesListByResourceGroupResponse>;
  }

  /**
   * Deletes a Azure Monitor PrivateLinkScope.
   * @param resourceGroupName The name of the resource group.
   * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(
    resourceGroupName: string,
    scopeName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName, scopeName, options).then((lroPoller) =>
      lroPoller.pollUntilFinished()
    );
  }

  /**
   * Returns a Azure Monitor PrivateLinkScope.
   * @param resourceGroupName The name of the resource group.
   * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateLinkScopesGetResponse>
   */
  get(
    resourceGroupName: string,
    scopeName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.PrivateLinkScopesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
   * @param callback The callback
   */
  get(
    resourceGroupName: string,
    scopeName: string,
    callback: msRest.ServiceCallback<Models.AzureMonitorPrivateLinkScope>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(
    resourceGroupName: string,
    scopeName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.AzureMonitorPrivateLinkScope>
  ): void;
  get(
    resourceGroupName: string,
    scopeName: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.AzureMonitorPrivateLinkScope>,
    callback?: msRest.ServiceCallback<Models.AzureMonitorPrivateLinkScope>
  ): Promise<Models.PrivateLinkScopesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        scopeName,
        options
      },
      getOperationSpec,
      callback
    ) as Promise<Models.PrivateLinkScopesGetResponse>;
  }

  /**
   * Creates (or updates) a Azure Monitor PrivateLinkScope. Note: You cannot specify a different
   * value for InstrumentationKey nor AppId in the Put operation.
   * @param resourceGroupName The name of the resource group.
   * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
   * @param azureMonitorPrivateLinkScopePayload Properties that need to be specified to create or
   * update a Azure Monitor PrivateLinkScope.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateLinkScopesCreateOrUpdateResponse>
   */
  createOrUpdate(
    resourceGroupName: string,
    scopeName: string,
    azureMonitorPrivateLinkScopePayload: Models.AzureMonitorPrivateLinkScope,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.PrivateLinkScopesCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
   * @param azureMonitorPrivateLinkScopePayload Properties that need to be specified to create or
   * update a Azure Monitor PrivateLinkScope.
   * @param callback The callback
   */
  createOrUpdate(
    resourceGroupName: string,
    scopeName: string,
    azureMonitorPrivateLinkScopePayload: Models.AzureMonitorPrivateLinkScope,
    callback: msRest.ServiceCallback<Models.AzureMonitorPrivateLinkScope>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
   * @param azureMonitorPrivateLinkScopePayload Properties that need to be specified to create or
   * update a Azure Monitor PrivateLinkScope.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(
    resourceGroupName: string,
    scopeName: string,
    azureMonitorPrivateLinkScopePayload: Models.AzureMonitorPrivateLinkScope,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.AzureMonitorPrivateLinkScope>
  ): void;
  createOrUpdate(
    resourceGroupName: string,
    scopeName: string,
    azureMonitorPrivateLinkScopePayload: Models.AzureMonitorPrivateLinkScope,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.AzureMonitorPrivateLinkScope>,
    callback?: msRest.ServiceCallback<Models.AzureMonitorPrivateLinkScope>
  ): Promise<Models.PrivateLinkScopesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        scopeName,
        azureMonitorPrivateLinkScopePayload,
        options
      },
      createOrUpdateOperationSpec,
      callback
    ) as Promise<Models.PrivateLinkScopesCreateOrUpdateResponse>;
  }

  /**
   * Updates an existing PrivateLinkScope's tags. To update other fields use the CreateOrUpdate
   * method.
   * @param resourceGroupName The name of the resource group.
   * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateLinkScopesUpdateTagsResponse>
   */
  updateTags(
    resourceGroupName: string,
    scopeName: string,
    options?: Models.PrivateLinkScopesUpdateTagsOptionalParams
  ): Promise<Models.PrivateLinkScopesUpdateTagsResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
   * @param callback The callback
   */
  updateTags(
    resourceGroupName: string,
    scopeName: string,
    callback: msRest.ServiceCallback<Models.AzureMonitorPrivateLinkScope>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateTags(
    resourceGroupName: string,
    scopeName: string,
    options: Models.PrivateLinkScopesUpdateTagsOptionalParams,
    callback: msRest.ServiceCallback<Models.AzureMonitorPrivateLinkScope>
  ): void;
  updateTags(
    resourceGroupName: string,
    scopeName: string,
    options?:
      | Models.PrivateLinkScopesUpdateTagsOptionalParams
      | msRest.ServiceCallback<Models.AzureMonitorPrivateLinkScope>,
    callback?: msRest.ServiceCallback<Models.AzureMonitorPrivateLinkScope>
  ): Promise<Models.PrivateLinkScopesUpdateTagsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        scopeName,
        options
      },
      updateTagsOperationSpec,
      callback
    ) as Promise<Models.PrivateLinkScopesUpdateTagsResponse>;
  }

  /**
   * Deletes a Azure Monitor PrivateLinkScope.
   * @param resourceGroupName The name of the resource group.
   * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(
    resourceGroupName: string,
    scopeName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        scopeName,
        options
      },
      beginDeleteMethodOperationSpec,
      options
    );
  }

  /**
   * Gets a list of all Azure Monitor PrivateLinkScopes within a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateLinkScopesListNextResponse>
   */
  listNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.PrivateLinkScopesListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(
    nextPageLink: string,
    callback: msRest.ServiceCallback<Models.AzureMonitorPrivateLinkScopeListResult>
  ): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(
    nextPageLink: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.AzureMonitorPrivateLinkScopeListResult>
  ): void;
  listNext(
    nextPageLink: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.AzureMonitorPrivateLinkScopeListResult>,
    callback?: msRest.ServiceCallback<Models.AzureMonitorPrivateLinkScopeListResult>
  ): Promise<Models.PrivateLinkScopesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback
    ) as Promise<Models.PrivateLinkScopesListNextResponse>;
  }

  /**
   * Gets a list of Azure Monitor PrivateLinkScopes within a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateLinkScopesListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.PrivateLinkScopesListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(
    nextPageLink: string,
    callback: msRest.ServiceCallback<Models.AzureMonitorPrivateLinkScopeListResult>
  ): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(
    nextPageLink: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.AzureMonitorPrivateLinkScopeListResult>
  ): void;
  listByResourceGroupNext(
    nextPageLink: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.AzureMonitorPrivateLinkScopeListResult>,
    callback?: msRest.ServiceCallback<Models.AzureMonitorPrivateLinkScopeListResult>
  ): Promise<Models.PrivateLinkScopesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback
    ) as Promise<Models.PrivateLinkScopesListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/microsoft.insights/privateLinkScopes",
  urlParameters: [Parameters.subscriptionId],
  queryParameters: [Parameters.apiVersion11],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.AzureMonitorPrivateLinkScopeListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/privateLinkScopes",
  urlParameters: [Parameters.resourceGroupName, Parameters.subscriptionId],
  queryParameters: [Parameters.apiVersion11],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.AzureMonitorPrivateLinkScopeListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/privateLinkScopes/{scopeName}",
  urlParameters: [Parameters.resourceGroupName, Parameters.subscriptionId, Parameters.scopeName],
  queryParameters: [Parameters.apiVersion11],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.AzureMonitorPrivateLinkScope
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/privateLinkScopes/{scopeName}",
  urlParameters: [Parameters.resourceGroupName, Parameters.subscriptionId, Parameters.scopeName],
  queryParameters: [Parameters.apiVersion11],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "azureMonitorPrivateLinkScopePayload",
    mapper: {
      ...Mappers.AzureMonitorPrivateLinkScope,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.AzureMonitorPrivateLinkScope
    },
    201: {
      bodyMapper: Mappers.AzureMonitorPrivateLinkScope
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateTagsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/privateLinkScopes/{scopeName}",
  urlParameters: [Parameters.resourceGroupName, Parameters.subscriptionId, Parameters.scopeName],
  queryParameters: [Parameters.apiVersion11],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: {
      tags: ["options", "tags"]
    },
    mapper: {
      ...Mappers.TagsResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.AzureMonitorPrivateLinkScope
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/privateLinkScopes/{scopeName}",
  urlParameters: [Parameters.resourceGroupName, Parameters.subscriptionId, Parameters.scopeName],
  queryParameters: [Parameters.apiVersion11],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [Parameters.nextPageLink],
  queryParameters: [Parameters.apiVersion11],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.AzureMonitorPrivateLinkScopeListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [Parameters.nextPageLink],
  queryParameters: [Parameters.apiVersion11],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.AzureMonitorPrivateLinkScopeListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
