/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import { SubscriptionScopeMetricsRequestBodyParameters as SubscriptionScopeMetricsRequestBodyParametersMapper } from "../models/mappers.js";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    constraints: {
      MinLength: 1
    },
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    serializedName: "api-version",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const region: OperationQueryParameter = {
  parameterPath: "region",
  mapper: {
    serializedName: "region",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const timespan: OperationQueryParameter = {
  parameterPath: ["options", "timespan"],
  mapper: {
    serializedName: "timespan",
    type: {
      name: "String"
    }
  }
};

export const interval: OperationQueryParameter = {
  parameterPath: ["options", "interval"],
  mapper: {
    serializedName: "interval",
    type: {
      name: "String"
    }
  }
};

export const metricnames: OperationQueryParameter = {
  parameterPath: ["options", "metricnames"],
  mapper: {
    serializedName: "metricnames",
    type: {
      name: "String"
    }
  }
};

export const aggregation: OperationQueryParameter = {
  parameterPath: ["options", "aggregation"],
  mapper: {
    serializedName: "aggregation",
    type: {
      name: "String"
    }
  }
};

export const top: OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    serializedName: "top",
    type: {
      name: "Number"
    }
  }
};

export const orderby: OperationQueryParameter = {
  parameterPath: ["options", "orderby"],
  mapper: {
    serializedName: "orderby",
    type: {
      name: "String"
    }
  }
};

export const filter: OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const resultType: OperationQueryParameter = {
  parameterPath: ["options", "resultType"],
  mapper: {
    serializedName: "resultType",
    type: {
      name: "String"
    }
  }
};

export const metricnamespace: OperationQueryParameter = {
  parameterPath: ["options", "metricnamespace"],
  mapper: {
    serializedName: "metricnamespace",
    type: {
      name: "String"
    }
  }
};

export const autoAdjustTimegrain: OperationQueryParameter = {
  parameterPath: ["options", "autoAdjustTimegrain"],
  mapper: {
    serializedName: "AutoAdjustTimegrain",
    type: {
      name: "Boolean"
    }
  }
};

export const validateDimensions: OperationQueryParameter = {
  parameterPath: ["options", "validateDimensions"],
  mapper: {
    serializedName: "ValidateDimensions",
    type: {
      name: "Boolean"
    }
  }
};

export const rollupby: OperationQueryParameter = {
  parameterPath: ["options", "rollupby"],
  mapper: {
    serializedName: "rollupby",
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const body: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: SubscriptionScopeMetricsRequestBodyParametersMapper
};

export const resourceUri: OperationURLParameter = {
  parameterPath: "resourceUri",
  mapper: {
    serializedName: "resourceUri",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const resultType1: OperationQueryParameter = {
  parameterPath: ["options", "resultType"],
  mapper: {
    serializedName: "resultType",
    type: {
      name: "Enum",
      allowedValues: ["Data", "Metadata"]
    }
  }
};
