{"version":3,"file":"baseSender.js","sourceRoot":"","sources":["../../../../src/platform/nodejs/baseSender.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAElC,4CAA0C;AAG1C,iDAAuD;AAEvD,8CAAuD;AACvD,kGAA4F;AAC5F,4GAAqF;AAErF,8DAAoG;AAEpG,+DAAyD;AAEzD,kEAA0E;AAE1E,MAAM,oCAAoC,GAAG,KAAM,CAAC;AAEpD;;;GAGG;AACH,MAAsB,UAAU;IAW9B,YAAY,OAOX;QAZO,0BAAqB,GAAW,CAAC,CAAC;QAClC,6BAAwB,GAAW,oCAAoC,CAAC;QAY9E,IAAI,CAAC,uBAAuB,GAAG,CAAC,CAAC;QACjC,IAAI,CAAC,qBAAqB,GAAG,OAAO,CAAC,eAAe,CAAC,qBAAqB,IAAI,KAAK,CAAC;QACpF,IAAI,CAAC,SAAS,GAAG,IAAI,4BAAiB,CAAC,OAAO,CAAC,kBAAkB,EAAE,OAAO,CAAC,eAAe,CAAC,CAAC;QAC5F,IAAI,OAAO,CAAC,cAAc,EAAE,CAAC;YAC3B,8BAA8B;YAC9B,IAAI,CAAC,uBAAuB,GAAG,IAAI,oDAAuB,CAAC;gBACzD,kBAAkB,EAAE,OAAO,CAAC,kBAAkB;gBAC9C,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,qBAAqB,EAAE,IAAI,CAAC,qBAAqB;aAClD,CAAC,CAAC;YACH,IAAI,CAAC,4BAA4B,GAAG,IAAA,6CAAW,EAAC;gBAC9C,kBAAkB,EAAE,OAAO,CAAC,kBAAkB;gBAC9C,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,qBAAqB,EAAE,IAAI,CAAC,qBAAqB;aAClD,CAAC,CAAC;QACL,CAAC;QACD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,IAAI,KAAK,CAAC;IAC9D,CAAC;IAMD;;OAEG;IACI,KAAK,CAAC,eAAe,CAAC,SAAqB;;QAChD,UAAI,CAAC,IAAI,CAAC,aAAa,SAAS,CAAC,MAAM,cAAc,CAAC,CAAC;QAEvD,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACzB,OAAO,EAAE,IAAI,EAAE,uBAAgB,CAAC,OAAO,EAAE,CAAC;QAC5C,CAAC;QAED,IAAI,CAAC;YACH,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;YACvC,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC1D,MAAM,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;YACrC,MAAM,QAAQ,GAAG,OAAO,GAAG,SAAS,CAAC;YACrC,IAAI,CAAC,uBAAuB,GAAG,CAAC,CAAC;YAEjC,IAAI,UAAU,KAAK,GAAG,EAAE,CAAC;gBACvB,sCAAsC;gBACtC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;oBACrB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,GAAG,EAAE;wBAChC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;wBACvB,IAAI,CAAC,sBAAsB,EAAE,CAAC;oBAChC,CAAC,EAAE,IAAI,CAAC,wBAAwB,CAAC,CAAC;oBAClC,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;gBAC1B,CAAC;gBACD,oFAAoF;gBACpF,MAAA,IAAI,CAAC,uBAAuB,0CAAE,YAAY,CAAC,QAAQ,CAAC,CAAC;gBACrD,OAAO,EAAE,IAAI,EAAE,uBAAgB,CAAC,OAAO,EAAE,CAAC;YAC5C,CAAC;iBAAM,IAAI,UAAU,IAAI,IAAA,4BAAW,EAAC,UAAU,CAAC,EAAE,CAAC;gBACjD,gCAAgC;gBAChC,IAAI,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,EAAE,CAAC;oBAC7C,MAAA,IAAI,CAAC,uBAAuB,0CAAE,aAAa,CAAC,UAAU,CAAC,CAAC;gBAC1D,CAAC;gBACD,IAAI,MAAM,EAAE,CAAC;oBACX,UAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAClB,MAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAmB,CAAC;oBAC5D,MAAM,iBAAiB,GAAe,EAAE,CAAC;oBACzC,8DAA8D;oBAC9D,IAAI,cAAc,CAAC,aAAa,GAAG,CAAC,EAAE,CAAC;wBACrC,MAAA,IAAI,CAAC,uBAAuB,0CAAE,YAAY,CAAC,QAAQ,CAAC,CAAC;oBACvD,CAAC;oBACD,0DAA0D;oBAC1D,IAAI,cAAc,CAAC,MAAM,EAAE,CAAC;wBAC1B,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;4BACtC,IAAI,KAAK,CAAC,UAAU,IAAI,IAAA,4BAAW,EAAC,KAAK,CAAC,UAAU,CAAC,EAAE,CAAC;gCACtD,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;4BACjD,CAAC;wBACH,CAAC,CAAC,CAAC;oBACL,CAAC;oBACD,IAAI,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;wBACjC,MAAA,IAAI,CAAC,uBAAuB,0CAAE,UAAU,CAAC,UAAU,CAAC,CAAC;wBACrD,uEAAuE;wBACvE,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;oBAC/C,CAAC;oBACD,0BAA0B;oBAC1B,MAAA,IAAI,CAAC,uBAAuB,0CAAE,YAAY,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;oBACjE,OAAO;wBACL,IAAI,EAAE,uBAAgB,CAAC,MAAM;qBAC9B,CAAC;gBACJ,CAAC;qBAAM,CAAC;oBACN,uEAAuE;oBACvE,MAAA,IAAI,CAAC,uBAAuB,0CAAE,UAAU,CAAC,UAAU,CAAC,CAAC;oBACrD,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;gBACvC,CAAC;YACH,CAAC;iBAAM,CAAC;gBACN,0BAA0B;gBAC1B,IAAI,IAAI,CAAC,uBAAuB,EAAE,CAAC;oBACjC,IAAI,UAAU,EAAE,CAAC;wBACf,IAAI,CAAC,uBAAuB,CAAC,YAAY,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;oBAClE,CAAC;gBACH,CAAC;qBAAM,CAAC;oBACN,oEAAoE;oBACpE,IAAI,CAAC,yBAAyB,EAAE,CAAC;gBACnC,CAAC;gBACD,OAAO;oBACL,IAAI,EAAE,uBAAgB,CAAC,MAAM;iBAC9B,CAAC;YACJ,CAAC;QACH,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,SAAS,GAAG,KAAkB,CAAC;YACrC,IACE,SAAS,CAAC,UAAU;gBACpB,CAAC,SAAS,CAAC,UAAU,KAAK,GAAG,IAAI,qBAAqB;oBACpD,SAAS,CAAC,UAAU,KAAK,GAAG,CAAC,EAC/B,CAAC;gBACD,qBAAqB;gBACrB,IAAI,CAAC,uBAAuB,EAAE,CAAC;gBAC/B,gCAAgC;gBAChC,IAAI,IAAI,CAAC,uBAAuB,GAAG,EAAE,EAAE,CAAC;oBACtC,IAAI,SAAS,CAAC,QAAQ,IAAI,SAAS,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;wBACrD,MAAM,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;wBAC5D,IAAI,QAAQ,EAAE,CAAC;4BACb,oBAAoB;4BACpB,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;4BACvC,mFAAmF;4BACnF,OAAO,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;wBACzC,CAAC;oBACH,CAAC;gBACH,CAAC;qBAAM,CAAC;oBACN,MAAM,aAAa,GAAG,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;oBACrD,MAAA,IAAI,CAAC,uBAAuB,0CAAE,cAAc,CAAC,aAAa,CAAC,CAAC;oBAC5D,OAAO,EAAE,IAAI,EAAE,uBAAgB,CAAC,MAAM,EAAE,KAAK,EAAE,aAAa,EAAE,CAAC;gBACjE,CAAC;YACH,CAAC;iBAAM,IACL,SAAS,CAAC,UAAU;gBACpB,IAAA,4BAAW,EAAC,SAAS,CAAC,UAAU,CAAC;gBACjC,CAAC,IAAI,CAAC,iBAAiB,EACvB,CAAC;gBACD,MAAA,IAAI,CAAC,uBAAuB,0CAAE,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;gBAC/D,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YACjC,CAAC;iBAAM,IACL,SAAS,CAAC,UAAU,KAAK,GAAG;gBAC5B,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,6BAA6B,CAAC,EACzD,CAAC;gBACD,iEAAiE;gBACjE,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBACzB,OAAO,EAAE,IAAI,EAAE,uBAAgB,CAAC,OAAO,EAAE,CAAC;YAC5C,CAAC;iBAAM,IACL,SAAS,CAAC,UAAU;gBACpB,IAAI,CAAC,iBAAiB;gBACtB,IAAA,oCAAyB,EAAC,SAAS,CAAC,UAAU,CAAC,EAC/C,CAAC;gBACD,mGAAmG;gBACnG,IAAI,CAAC,yBAAyB,EAAE,CAAC;gBACjC,OAAO,EAAE,IAAI,EAAE,uBAAgB,CAAC,OAAO,EAAE,CAAC;YAC5C,CAAC;YACD,IAAI,IAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC,EAAE,CAAC;gBACzC,IAAI,SAAS,CAAC,UAAU,EAAE,CAAC;oBACzB,MAAA,IAAI,CAAC,uBAAuB,0CAAE,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;gBACjE,CAAC;gBACD,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC;oBAC5B,UAAI,CAAC,KAAK,CACR,6DAA6D,EAC7D,SAAS,CAAC,OAAO,CAClB,CAAC;gBACJ,CAAC;gBACD,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YACjC,CAAC;YACD,MAAA,IAAI,CAAC,uBAAuB,0CAAE,cAAc,CAAC,SAAS,CAAC,CAAC;YACxD,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBAC5B,UAAI,CAAC,KAAK,CACR,uEAAuE,EACvE,SAAS,CAAC,OAAO,CAClB,CAAC;YACJ,CAAC;YACD,OAAO,EAAE,IAAI,EAAE,uBAAgB,CAAC,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC;QAC7D,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,OAAO,CAAC,SAAoB;;QACxC,IAAI,CAAC;YACH,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACrD,OAAO,OAAO;gBACZ,CAAC,CAAC,EAAE,IAAI,EAAE,uBAAgB,CAAC,OAAO,EAAE;gBACpC,CAAC,CAAC;oBACE,IAAI,EAAE,uBAAgB,CAAC,MAAM;oBAC7B,KAAK,EAAE,IAAI,KAAK,CAAC,qCAAqC,CAAC;iBACxD,CAAC;QACR,CAAC;QAAC,OAAO,EAAO,EAAE,CAAC;YACjB,MAAA,IAAI,CAAC,uBAAuB,0CAAE,iBAAiB,EAAE,CAAC;YAClD,OAAO,EAAE,IAAI,EAAE,uBAAgB,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;QACtD,CAAC;IACH,CAAC;IAED;;OAEG;IACK,yBAAyB;QAC/B,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC7B,IAAI,IAAI,CAAC,qBAAqB,GAAG,iCAAsB,EAAE,CAAC;YACxD,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC3B,CAAC;IACH,CAAC;IAED;;OAEG;IACK,iBAAiB;;QACvB,MAAA,IAAI,CAAC,uBAAuB,0CAAE,QAAQ,EAAE,CAAC;QACzC,MAAA,IAAI,CAAC,4BAA4B,0CAAE,QAAQ,EAAE,CAAC;QAC9C,IAAI,CAAC,uBAAuB,GAAG,SAAS,CAAC;QACzC,IAAI,CAAC,qBAAqB,GAAG,CAAC,CAAC;IACjC,CAAC;IAEO,KAAK,CAAC,sBAAsB;;QAClC,IAAI,CAAC;YACH,MAAM,SAAS,GAAG,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAsB,CAAC;YACtE,IAAI,SAAS,EAAE,CAAC;gBACd,MAAM,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC7B,CAAC;QACH,CAAC;QAAC,OAAO,GAAQ,EAAE,CAAC;YAClB,MAAA,IAAI,CAAC,uBAAuB,0CAAE,gBAAgB,EAAE,CAAC;YACjD,UAAI,CAAC,IAAI,CAAC,gCAAgC,EAAE,GAAG,CAAC,CAAC;QACnD,CAAC;IACH,CAAC;IAEO,oBAAoB,CAAC,KAAgB;QAC3C,MAAM,cAAc,GAAa,MAAM,CAAC,MAAM,CAAC,sCAAuB,CAAC,CAAC;QACxE,IAAI,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;YAC/D,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AA1PD,gCA0PC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { diag } from \"@opentelemetry/api\";\nimport type { PersistentStorage, SenderResult } from \"../../types.js\";\nimport type { AzureMonitorExporterOptions } from \"../../config.js\";\nimport { FileSystemPersist } from \"./persist/index.js\";\nimport type { ExportResult } from \"@opentelemetry/core\";\nimport { ExportResultCode } from \"@opentelemetry/core\";\nimport { NetworkStatsbeatMetrics } from \"../../export/statsbeat/networkStatsbeatMetrics.js\";\nimport { getInstance } from \"../../export/statsbeat/longIntervalStatsbeatMetrics.js\";\nimport type { RestError } from \"@azure/core-rest-pipeline\";\nimport { MAX_STATSBEAT_FAILURES, isStatsbeatShutdownStatus } from \"../../export/statsbeat/types.js\";\nimport type { BreezeResponse } from \"../../utils/breezeUtils.js\";\nimport { isRetriable } from \"../../utils/breezeUtils.js\";\nimport type { TelemetryItem as Envelope } from \"../../generated/index.js\";\nimport { RetriableRestErrorTypes } from \"../../Declarations/Constants.js\";\n\nconst DEFAULT_BATCH_SEND_RETRY_INTERVAL_MS = 60_000;\n\n/**\n * Base sender class\n * @internal\n */\nexport abstract class BaseSender {\n  private readonly persister: PersistentStorage;\n  private numConsecutiveRedirects: number;\n  private retryTimer: NodeJS.Timeout | null;\n  private networkStatsbeatMetrics: NetworkStatsbeatMetrics | undefined;\n  private longIntervalStatsbeatMetrics;\n  private statsbeatFailureCount: number = 0;\n  private batchSendRetryIntervalMs: number = DEFAULT_BATCH_SEND_RETRY_INTERVAL_MS;\n  private isStatsbeatSender: boolean;\n  private disableOfflineStorage: boolean;\n\n  constructor(options: {\n    endpointUrl: string;\n    instrumentationKey: string;\n    trackStatsbeat: boolean;\n    exporterOptions: AzureMonitorExporterOptions;\n    aadAudience?: string;\n    isStatsbeatSender?: boolean;\n  }) {\n    this.numConsecutiveRedirects = 0;\n    this.disableOfflineStorage = options.exporterOptions.disableOfflineStorage || false;\n    this.persister = new FileSystemPersist(options.instrumentationKey, options.exporterOptions);\n    if (options.trackStatsbeat) {\n      // Initialize statsbeatMetrics\n      this.networkStatsbeatMetrics = new NetworkStatsbeatMetrics({\n        instrumentationKey: options.instrumentationKey,\n        endpointUrl: options.endpointUrl,\n        disableOfflineStorage: this.disableOfflineStorage,\n      });\n      this.longIntervalStatsbeatMetrics = getInstance({\n        instrumentationKey: options.instrumentationKey,\n        endpointUrl: options.endpointUrl,\n        disableOfflineStorage: this.disableOfflineStorage,\n      });\n    }\n    this.retryTimer = null;\n    this.isStatsbeatSender = options.isStatsbeatSender || false;\n  }\n\n  abstract send(payload: unknown[]): Promise<SenderResult>;\n  abstract shutdown(): Promise<void>;\n  abstract handlePermanentRedirect(location: string | undefined): void;\n\n  /**\n   * Export envelopes\n   */\n  public async exportEnvelopes(envelopes: Envelope[]): Promise<ExportResult> {\n    diag.info(`Exporting ${envelopes.length} envelope(s)`);\n\n    if (envelopes.length < 1) {\n      return { code: ExportResultCode.SUCCESS };\n    }\n\n    try {\n      const startTime = new Date().getTime();\n      const { result, statusCode } = await this.send(envelopes);\n      const endTime = new Date().getTime();\n      const duration = endTime - startTime;\n      this.numConsecutiveRedirects = 0;\n\n      if (statusCode === 200) {\n        // Success -- @todo: start retry timer\n        if (!this.retryTimer) {\n          this.retryTimer = setTimeout(() => {\n            this.retryTimer = null;\n            this.sendFirstPersistedFile();\n          }, this.batchSendRetryIntervalMs);\n          this.retryTimer.unref();\n        }\n        // If we are not exportings statsbeat and statsbeat is not disabled -- count success\n        this.networkStatsbeatMetrics?.countSuccess(duration);\n        return { code: ExportResultCode.SUCCESS };\n      } else if (statusCode && isRetriable(statusCode)) {\n        // Failed -- persist failed data\n        if (statusCode === 429 || statusCode === 439) {\n          this.networkStatsbeatMetrics?.countThrottle(statusCode);\n        }\n        if (result) {\n          diag.info(result);\n          const breezeResponse = JSON.parse(result) as BreezeResponse;\n          const filteredEnvelopes: Envelope[] = [];\n          // If we have a partial success, count the succeeded envelopes\n          if (breezeResponse.itemsReceived > 0) {\n            this.networkStatsbeatMetrics?.countSuccess(duration);\n          }\n          // Figure out if we need to either retry or count failures\n          if (breezeResponse.errors) {\n            breezeResponse.errors.forEach((error) => {\n              if (error.statusCode && isRetriable(error.statusCode)) {\n                filteredEnvelopes.push(envelopes[error.index]);\n              }\n            });\n          }\n          if (filteredEnvelopes.length > 0) {\n            this.networkStatsbeatMetrics?.countRetry(statusCode);\n            // calls resultCallback(ExportResult) based on result of persister.push\n            return await this.persist(filteredEnvelopes);\n          }\n          // Failed -- not retriable\n          this.networkStatsbeatMetrics?.countFailure(duration, statusCode);\n          return {\n            code: ExportResultCode.FAILED,\n          };\n        } else {\n          // calls resultCallback(ExportResult) based on result of persister.push\n          this.networkStatsbeatMetrics?.countRetry(statusCode);\n          return await this.persist(envelopes);\n        }\n      } else {\n        // Failed -- not retriable\n        if (this.networkStatsbeatMetrics) {\n          if (statusCode) {\n            this.networkStatsbeatMetrics.countFailure(duration, statusCode);\n          }\n        } else {\n          // Handles all other status codes or client exceptions for Statsbeat\n          this.incrementStatsbeatFailure();\n        }\n        return {\n          code: ExportResultCode.FAILED,\n        };\n      }\n    } catch (error: any) {\n      const restError = error as RestError;\n      if (\n        restError.statusCode &&\n        (restError.statusCode === 307 || // Temporary redirect\n          restError.statusCode === 308)\n      ) {\n        // Permanent redirect\n        this.numConsecutiveRedirects++;\n        // To prevent circular redirects\n        if (this.numConsecutiveRedirects < 10) {\n          if (restError.response && restError.response.headers) {\n            const location = restError.response.headers.get(\"location\");\n            if (location) {\n              // Update sender URL\n              this.handlePermanentRedirect(location);\n              // Send to redirect endpoint as HTTPs library doesn't handle redirect automatically\n              return this.exportEnvelopes(envelopes);\n            }\n          }\n        } else {\n          const redirectError = new Error(\"Circular redirect\");\n          this.networkStatsbeatMetrics?.countException(redirectError);\n          return { code: ExportResultCode.FAILED, error: redirectError };\n        }\n      } else if (\n        restError.statusCode &&\n        isRetriable(restError.statusCode) &&\n        !this.isStatsbeatSender\n      ) {\n        this.networkStatsbeatMetrics?.countRetry(restError.statusCode);\n        return this.persist(envelopes);\n      } else if (\n        restError.statusCode === 400 &&\n        restError.message.includes(\"Invalid instrumentation key\")\n      ) {\n        // Invalid instrumentation key, shutdown statsbeat, fail silently\n        this.shutdownStatsbeat();\n        return { code: ExportResultCode.SUCCESS };\n      } else if (\n        restError.statusCode &&\n        this.isStatsbeatSender &&\n        isStatsbeatShutdownStatus(restError.statusCode)\n      ) {\n        // If the status code is a shutdown status code for statsbeat, shutdown statsbeat and fail silently\n        this.incrementStatsbeatFailure();\n        return { code: ExportResultCode.SUCCESS };\n      }\n      if (this.isRetriableRestError(restError)) {\n        if (restError.statusCode) {\n          this.networkStatsbeatMetrics?.countRetry(restError.statusCode);\n        }\n        if (!this.isStatsbeatSender) {\n          diag.error(\n            \"Retrying due to transient client side error. Error message:\",\n            restError.message,\n          );\n        }\n        return this.persist(envelopes);\n      }\n      this.networkStatsbeatMetrics?.countException(restError);\n      if (!this.isStatsbeatSender) {\n        diag.error(\n          \"Envelopes could not be exported and are not retriable. Error message:\",\n          restError.message,\n        );\n      }\n      return { code: ExportResultCode.FAILED, error: restError };\n    }\n  }\n\n  /**\n   * Persist envelopes to disk\n   */\n  private async persist(envelopes: unknown[]): Promise<ExportResult> {\n    try {\n      const success = await this.persister.push(envelopes);\n      return success\n        ? { code: ExportResultCode.SUCCESS }\n        : {\n            code: ExportResultCode.FAILED,\n            error: new Error(\"Failed to persist envelope in disk.\"),\n          };\n    } catch (ex: any) {\n      this.networkStatsbeatMetrics?.countWriteFailure();\n      return { code: ExportResultCode.FAILED, error: ex };\n    }\n  }\n\n  /**\n   * Disable collection of statsbeat metrics after max failures\n   */\n  private incrementStatsbeatFailure(): void {\n    this.statsbeatFailureCount++;\n    if (this.statsbeatFailureCount > MAX_STATSBEAT_FAILURES) {\n      this.shutdownStatsbeat();\n    }\n  }\n\n  /**\n   * Shutdown statsbeat metrics\n   */\n  private shutdownStatsbeat(): void {\n    this.networkStatsbeatMetrics?.shutdown();\n    this.longIntervalStatsbeatMetrics?.shutdown();\n    this.networkStatsbeatMetrics = undefined;\n    this.statsbeatFailureCount = 0;\n  }\n\n  private async sendFirstPersistedFile(): Promise<void> {\n    try {\n      const envelopes = (await this.persister.shift()) as Envelope[] | null;\n      if (envelopes) {\n        await this.send(envelopes);\n      }\n    } catch (err: any) {\n      this.networkStatsbeatMetrics?.countReadFailure();\n      diag.warn(`Failed to fetch persisted file`, err);\n    }\n  }\n\n  private isRetriableRestError(error: RestError): boolean {\n    const restErrorTypes: string[] = Object.values(RetriableRestErrorTypes);\n    if (error && error.code && restErrorTypes.includes(error.code)) {\n      return true;\n    }\n    return false;\n  }\n}\n"]}