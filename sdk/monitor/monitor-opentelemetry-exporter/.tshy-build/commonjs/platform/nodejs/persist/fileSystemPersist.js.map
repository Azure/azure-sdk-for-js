{"version":3,"file":"fileSystemPersist.js","sourceRoot":"","sources":["../../../../../src/platform/nodejs/persist/fileSystemPersist.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { tmpdir } from \"node:os\";\nimport { basename, join } from \"node:path\";\nimport { diag } from \"@opentelemetry/api\";\nimport type { PersistentStorage } from \"../../../types.js\";\nimport { FileAccessControl } from \"./fileAccessControl.js\";\nimport { confirmDirExists, getShallowDirectorySize } from \"./fileSystemHelpers.js\";\nimport type { AzureMonitorExporterOptions } from \"../../../config.js\";\nimport { readdir, readFile, stat, unlink, writeFile } from \"node:fs/promises\";\n\n/**\n * File system persist class.\n * @internal\n */\nexport class FileSystemPersist implements PersistentStorage {\n  static TEMPDIR_PREFIX = \"ot-azure-exporter-\";\n  static FILENAME_SUFFIX = \".ai.json\";\n\n  fileRetemptionPeriod = 2 * 24 * 60 * 60 * 1000; // 2 days\n  cleanupTimeOut = 60 * 60 * 1000; // 1 hour\n  maxBytesOnDisk: number = 50_000_000; // ~50MB\n\n  private _enabled: boolean;\n  private _tempDirectory: string = \"\";\n  private _fileCleanupTimer: NodeJS.Timeout | null = null;\n  private _instrumentationKey: string;\n\n  constructor(\n    instrumentationKey: string,\n    private _options?: AzureMonitorExporterOptions,\n  ) {\n    this._instrumentationKey = instrumentationKey;\n    if (this._options?.disableOfflineStorage) {\n      this._enabled = false;\n      return;\n    }\n    this._enabled = true;\n    FileAccessControl.checkFileProtection();\n\n    if (!FileAccessControl.OS_PROVIDES_FILE_PROTECTION) {\n      this._enabled = false;\n      diag.error(\n        \"Sufficient file protection capabilities were not detected. Files will not be persisted\",\n      );\n    }\n\n    if (!this._instrumentationKey) {\n      this._enabled = false;\n      diag.error(\n        `No instrumentation key was provided to FileSystemPersister. Files will not be persisted`,\n      );\n    }\n    if (this._enabled) {\n      this._tempDirectory = join(\n        this._options?.storageDirectory || tmpdir(),\n        \"Microsoft\",\n        \"AzureMonitor\",\n        FileSystemPersist.TEMPDIR_PREFIX + this._instrumentationKey,\n      );\n\n      // Starts file cleanup task\n      if (!this._fileCleanupTimer) {\n        this._fileCleanupTimer = setTimeout(() => {\n          this._fileCleanupTask();\n        }, this.cleanupTimeOut);\n        this._fileCleanupTimer.unref();\n      }\n    }\n  }\n\n  push(value: unknown[]): Promise<boolean> {\n    if (this._enabled) {\n      diag.debug(\"Pushing value to persistent storage\", value.toString());\n      return this._storeToDisk(JSON.stringify(value));\n    }\n    // Only return a false promise if the SDK isn't set to disable offline storage\n    if (!this._options?.disableOfflineStorage) {\n      return new Promise((resolve) => {\n        resolve(false);\n      });\n    }\n    return new Promise((resolve) => {\n      resolve(true);\n    });\n  }\n\n  async shift(): Promise<unknown> {\n    if (this._enabled) {\n      diag.debug(\"Searching for filesystem persisted files\");\n      try {\n        const buffer = await this._getFirstFileOnDisk();\n        if (buffer) {\n          return JSON.parse(buffer.toString(\"utf8\"));\n        }\n      } catch (e: any) {\n        diag.debug(\"Failed to read persisted file\", e);\n      }\n      return null;\n    }\n    return new Promise((resolve) => {\n      resolve(null);\n    });\n  }\n\n  /**\n   * Check for temp telemetry files\n   * reads the first file if exist, deletes it and tries to send its load\n   */\n  private async _getFirstFileOnDisk(): Promise<Buffer | null> {\n    try {\n      const stats = await stat(this._tempDirectory);\n      if (stats.isDirectory()) {\n        const origFiles = await readdir(this._tempDirectory);\n        const files = origFiles.filter((f) =>\n          basename(f).includes(FileSystemPersist.FILENAME_SUFFIX),\n        );\n        if (files.length === 0) {\n          return null;\n        } else {\n          const firstFile = files[0];\n          const filePath = join(this._tempDirectory, firstFile);\n          const payload = await readFile(filePath);\n          // delete the file first to prevent double sending\n          await unlink(filePath);\n          return payload;\n        }\n      }\n      return null;\n    } catch (e: any) {\n      if (e.code === \"ENOENT\") {\n        // File does not exist -- return null instead of throwing\n        return null;\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  private async _storeToDisk(payload: string): Promise<boolean> {\n    try {\n      await confirmDirExists(this._tempDirectory);\n    } catch (error: any) {\n      diag.warn(`Error while checking/creating directory: `, error && error.message);\n      return false;\n    }\n\n    try {\n      const size = await getShallowDirectorySize(this._tempDirectory);\n      if (size > this.maxBytesOnDisk) {\n        diag.warn(\n          `Not saving data due to max size limit being met. Directory size in bytes is: ${size}`,\n        );\n        return false;\n      }\n    } catch (error: any) {\n      diag.warn(`Error while checking size of persistence directory: `, error && error.message);\n      return false;\n    }\n\n    const fileName = `${new Date().getTime()}${FileSystemPersist.FILENAME_SUFFIX}`;\n    const fileFullPath = join(this._tempDirectory, fileName);\n\n    // Mode 600 is w/r for creator and no read access for others\n    diag.info(`saving data to disk at: ${fileFullPath}`);\n    try {\n      await writeFile(fileFullPath, payload, { mode: 0o600 });\n    } catch (writeError: any) {\n      diag.warn(`Error writing file to persistent file storage`, writeError);\n      return false;\n    }\n    return true;\n  }\n\n  private async _fileCleanupTask(): Promise<boolean> {\n    try {\n      const stats = await stat(this._tempDirectory);\n      if (stats.isDirectory()) {\n        const origFiles = await readdir(this._tempDirectory);\n        const files = origFiles.filter((f) =>\n          basename(f).includes(FileSystemPersist.FILENAME_SUFFIX),\n        );\n        if (files.length === 0) {\n          return false;\n        } else {\n          files.forEach(async (file) => {\n            // Check expiration\n            const fileCreationDate: Date = new Date(\n              parseInt(file.split(FileSystemPersist.FILENAME_SUFFIX)[0]),\n            );\n            const expired = new Date(+new Date() - this.fileRetemptionPeriod) > fileCreationDate;\n            if (expired) {\n              const filePath = join(this._tempDirectory, file);\n              await unlink(filePath);\n            }\n          });\n          return true;\n        }\n      }\n      return false;\n    } catch (error: any) {\n      diag.info(`Failed cleanup of persistent file storage expired files`, error);\n      return false;\n    }\n  }\n}\n"]}