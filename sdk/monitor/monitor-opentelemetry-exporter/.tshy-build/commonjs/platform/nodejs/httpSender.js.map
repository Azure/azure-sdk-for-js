{"version":3,"file":"httpSender.js","sourceRoot":"","sources":["../../../../src/platform/nodejs/httpSender.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;;AAElC,gEAA2B;AAC3B,4CAA0C;AAE1C,kEAA+D;AAO/D,uDAAqE;AAErE,mDAA6C;AAE7C,MAAM,2BAA2B,GAAG,qCAAqC,CAAC;AAE1E;;;GAGG;AACH,MAAa,UAAW,SAAQ,0BAAU;IAIxC,YAAY,OAOX;QACC,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,gEAAgE;QAChE,IAAI,CAAC,wBAAwB,mBAC3B,IAAI,EAAE,OAAO,CAAC,WAAW,IACtB,OAAO,CAAC,eAAe,CAC3B,CAAC;QAEF,IAAI,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,CAAC;YAC7C,uBAAuB;YACvB,IAAI,OAAO,CAAC,WAAW,EAAE,CAAC;gBACxB,IAAI,CAAC,wBAAwB,CAAC,gBAAgB,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YACzE,CAAC;iBAAM,CAAC;gBACN,UAAU;gBACV,IAAI,CAAC,wBAAwB,CAAC,gBAAgB,GAAG,CAAC,2BAA2B,CAAC,CAAC;YACjF,CAAC;QACH,CAAC;QACD,IAAI,CAAC,iBAAiB,GAAG,IAAI,oCAAyB,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;QAEtF,kCAAkC;QAClC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,uCAAkB,EAAE,CAAC,CAAC;IAC7E,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,IAAI,CAAC,SAAqB;;QAC9B,MAAM,OAAO,GAAwB,EAAE,CAAC;QACxC,IAAI,QAA2C,CAAC;QAChD,SAAS,UAAU,CAAC,WAAkC,EAAE,YAAqB;YAC3E,QAAQ,GAAG,WAAW,CAAC;YACvB,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;gBACvB,OAAO,CAAC,UAAU,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;YAChD,CAAC;QACH,CAAC;QACD,MAAM,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,SAAS,kCACvC,OAAO,KACV,UAAU,IACV,CAAC;QAEH,OAAO,EAAE,UAAU,EAAE,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM,EAAE,MAAM,EAAE,MAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,UAAU,mCAAI,EAAE,EAAE,CAAC;IAC9E,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,QAAQ;QACZ,UAAI,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;IACxC,CAAC;IAED,uBAAuB,CAAC,QAA4B;QAClD,IAAI,QAAQ,EAAE,CAAC;YACb,MAAM,MAAM,GAAG,IAAI,kBAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YACrC,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC;gBAC1B,IAAI,CAAC,iBAAiB,CAAC,IAAI,GAAG,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC;YACzD,CAAC;QACH,CAAC;IACH,CAAC;CACF;AAvED,gCAuEC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport url from \"node:url\";\nimport { diag } from \"@opentelemetry/api\";\nimport type { FullOperationResponse } from \"@azure/core-client\";\nimport { redirectPolicyName } from \"@azure/core-rest-pipeline\";\nimport type { SenderResult } from \"../../types.js\";\nimport type {\n  TelemetryItem as Envelope,\n  ApplicationInsightsClientOptionalParams,\n  TrackOptionalParams,\n} from \"../../generated/index.js\";\nimport { ApplicationInsightsClient } from \"../../generated/index.js\";\nimport type { AzureMonitorExporterOptions } from \"../../config.js\";\nimport { BaseSender } from \"./baseSender.js\";\n\nconst applicationInsightsResource = \"https://monitor.azure.com//.default\";\n\n/**\n * Exporter HTTP sender class\n * @internal\n */\nexport class HttpSender extends BaseSender {\n  private readonly appInsightsClient: ApplicationInsightsClient;\n  private appInsightsClientOptions: ApplicationInsightsClientOptionalParams;\n\n  constructor(options: {\n    endpointUrl: string;\n    instrumentationKey: string;\n    trackStatsbeat: boolean;\n    exporterOptions: AzureMonitorExporterOptions;\n    aadAudience?: string;\n    isStatsbeatSender?: boolean;\n  }) {\n    super(options);\n    // Build endpoint using provided configuration or default values\n    this.appInsightsClientOptions = {\n      host: options.endpointUrl,\n      ...options.exporterOptions,\n    };\n\n    if (this.appInsightsClientOptions.credential) {\n      // Add credentialScopes\n      if (options.aadAudience) {\n        this.appInsightsClientOptions.credentialScopes = [options.aadAudience];\n      } else {\n        // Default\n        this.appInsightsClientOptions.credentialScopes = [applicationInsightsResource];\n      }\n    }\n    this.appInsightsClient = new ApplicationInsightsClient(this.appInsightsClientOptions);\n\n    // Handle redirects in HTTP Sender\n    this.appInsightsClient.pipeline.removePolicy({ name: redirectPolicyName });\n  }\n\n  /**\n   * Send Azure envelopes\n   * @internal\n   */\n  async send(envelopes: Envelope[]): Promise<SenderResult> {\n    const options: TrackOptionalParams = {};\n    let response: FullOperationResponse | undefined;\n    function onResponse(rawResponse: FullOperationResponse, flatResponse: unknown): void {\n      response = rawResponse;\n      if (options.onResponse) {\n        options.onResponse(rawResponse, flatResponse);\n      }\n    }\n    await this.appInsightsClient.track(envelopes, {\n      ...options,\n      onResponse,\n    });\n\n    return { statusCode: response?.status, result: response?.bodyAsText ?? \"\" };\n  }\n\n  /**\n   * Shutdown sender\n   * @internal\n   */\n  async shutdown(): Promise<void> {\n    diag.info(\"HttpSender shutting down\");\n  }\n\n  handlePermanentRedirect(location: string | undefined): void {\n    if (location) {\n      const locUrl = new url.URL(location);\n      if (locUrl && locUrl.host) {\n        this.appInsightsClient.host = \"https://\" + locUrl.host;\n      }\n    }\n  }\n}\n"]}