{"version":3,"file":"trace.js","sourceRoot":"","sources":["../../../src/export/trace.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAElC,4CAA0C;AAE1C,8CAAuD;AAEvD,uCAAqD;AAGrD,wDAAsF;AACtF,kDAA8F;AAC9F,mDAAkD;AAElD;;GAEG;AACH,MAAa,yBAA0B,SAAQ,kCAAwB;IAQrE;;;OAGG;IACH,YAAY,UAAuC,EAAE;QACnD,KAAK,CAAC,OAAO,CAAC,CAAC;QAZjB;;WAEG;QACK,eAAU,GAAG,KAAK,CAAC;QAEnB,+BAA0B,GAAY,IAAA,sCAA0B,GAAE,CAAC;QAQzE,IAAI,CAAC,MAAM,GAAG,IAAI,qBAAU,CAAC;YAC3B,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,kBAAkB,EAAE,IAAI,CAAC,kBAAkB;YAC3C,cAAc,EAAE,IAAI,CAAC,cAAc;YACnC,eAAe,EAAE,OAAO;YACxB,WAAW,EAAE,IAAI,CAAC,WAAW;SAC9B,CAAC,CAAC;QACH,UAAI,CAAC,KAAK,CAAC,kDAAkD,CAAC,CAAC;IACjE,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,MAAM,CACV,KAAqB,EACrB,cAA8C;QAE9C,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YACpB,UAAI,CAAC,IAAI,CAAC,6CAA6C,CAAC,CAAC;YACzD,UAAU,CAAC,GAAG,EAAE,CAAC,cAAc,CAAC,EAAE,IAAI,EAAE,uBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACvE,OAAO;QACT,CAAC;QAED,UAAI,CAAC,IAAI,CAAC,aAAa,KAAK,CAAC,MAAM,sCAAsC,CAAC,CAAC;QAE3E,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACrB,MAAM,SAAS,GAAe,EAAE,CAAC;YACjC,MAAM,sBAAsB,GAAG,IAAA,wCAA4B,EACzD,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,EACjB,IAAI,CAAC,kBAAkB,CACxB,CAAC;YACF,IAAI,sBAAsB,IAAI,IAAI,CAAC,0BAA0B,EAAE,CAAC;gBAC9D,SAAS,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;YACzC,CAAC;YACD,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;gBACrB,SAAS,CAAC,IAAI,CAAC,IAAA,qCAAsB,EAAC,IAAI,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;gBACtE,MAAM,kBAAkB,GAAG,IAAA,oCAAqB,EAAC,IAAI,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;gBAChF,IAAI,kBAAkB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBAClC,SAAS,CAAC,IAAI,CAAC,GAAG,kBAAkB,CAAC,CAAC;gBACxC,CAAC;YACH,CAAC,CAAC,CAAC;YACH,cAAc,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC;QAC/D,CAAC;QACD,oBAAoB;QACpB,cAAc,CAAC,EAAE,IAAI,EAAE,uBAAgB,CAAC,OAAO,EAAE,CAAC,CAAC;IACrD,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,QAAQ;QACZ,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,UAAI,CAAC,IAAI,CAAC,yCAAyC,CAAC,CAAC;QACrD,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;IAChC,CAAC;CACF;AAvED,8DAuEC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { diag } from \"@opentelemetry/api\";\nimport type { ExportResult } from \"@opentelemetry/core\";\nimport { ExportResultCode } from \"@opentelemetry/core\";\nimport type { ReadableSpan, SpanExporter } from \"@opentelemetry/sdk-trace-base\";\nimport { AzureMonitorBaseExporter } from \"./base.js\";\nimport type { AzureMonitorExporterOptions } from \"../config.js\";\nimport type { TelemetryItem as Envelope } from \"../generated/index.js\";\nimport { readableSpanToEnvelope, spanEventsToEnvelopes } from \"../utils/spanUtils.js\";\nimport { createResourceMetricEnvelope, shouldCreateResourceMetric } from \"../utils/common.js\";\nimport { HttpSender } from \"../platform/index.js\";\n\n/**\n * Azure Monitor OpenTelemetry Trace Exporter.\n */\nexport class AzureMonitorTraceExporter extends AzureMonitorBaseExporter implements SpanExporter {\n  /**\n   * Flag to determine if Exporter is shutdown.\n   */\n  private isShutdown = false;\n  private readonly sender: HttpSender;\n  private shouldCreateResourceMetric: boolean = shouldCreateResourceMetric();\n\n  /**\n   * Initializes a new instance of the AzureMonitorTraceExporter class.\n   * @param AzureExporterConfig - Exporter configuration.\n   */\n  constructor(options: AzureMonitorExporterOptions = {}) {\n    super(options);\n    this.sender = new HttpSender({\n      endpointUrl: this.endpointUrl,\n      instrumentationKey: this.instrumentationKey,\n      trackStatsbeat: this.trackStatsbeat,\n      exporterOptions: options,\n      aadAudience: this.aadAudience,\n    });\n    diag.debug(\"AzureMonitorTraceExporter was successfully setup\");\n  }\n\n  /**\n   * Export OpenTelemetry spans.\n   * @param spans - Spans to export.\n   * @param resultCallback - Result callback.\n   */\n  async export(\n    spans: ReadableSpan[],\n    resultCallback: (result: ExportResult) => void,\n  ): Promise<void> {\n    if (this.isShutdown) {\n      diag.info(\"Exporter shut down. Failed to export spans.\");\n      setTimeout(() => resultCallback({ code: ExportResultCode.FAILED }), 0);\n      return;\n    }\n\n    diag.info(`Exporting ${spans.length} span(s). Converting to envelopes...`);\n\n    if (spans.length > 0) {\n      const envelopes: Envelope[] = [];\n      const resourceMetricEnvelope = createResourceMetricEnvelope(\n        spans[0].resource,\n        this.instrumentationKey,\n      );\n      if (resourceMetricEnvelope && this.shouldCreateResourceMetric) {\n        envelopes.push(resourceMetricEnvelope);\n      }\n      spans.forEach((span) => {\n        envelopes.push(readableSpanToEnvelope(span, this.instrumentationKey));\n        const spanEventEnvelopes = spanEventsToEnvelopes(span, this.instrumentationKey);\n        if (spanEventEnvelopes.length > 0) {\n          envelopes.push(...spanEventEnvelopes);\n        }\n      });\n      resultCallback(await this.sender.exportEnvelopes(envelopes));\n    }\n    // No data to export\n    resultCallback({ code: ExportResultCode.SUCCESS });\n  }\n\n  /**\n   * Shutdown AzureMonitorTraceExporter.\n   */\n  async shutdown(): Promise<void> {\n    this.isShutdown = true;\n    diag.info(\"AzureMonitorTraceExporter shutting down\");\n    return this.sender.shutdown();\n  }\n}\n"]}