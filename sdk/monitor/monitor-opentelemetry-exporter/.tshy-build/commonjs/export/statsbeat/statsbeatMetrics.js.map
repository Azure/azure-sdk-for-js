{"version":3,"file":"statsbeatMetrics.js","sourceRoot":"","sources":["../../../../src/export/statsbeat/statsbeatMetrics.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { HttpMethods } from \"@azure/core-rest-pipeline\";\nimport { createDefaultHttpClient, createPipelineRequest } from \"@azure/core-rest-pipeline\";\nimport { diag } from \"@opentelemetry/api\";\nimport type { VirtualMachineInfo } from \"./types.js\";\nimport {\n  AIMS_API_VERSION,\n  AIMS_FORMAT,\n  AIMS_URI,\n  EU_CONNECTION_STRING,\n  EU_ENDPOINTS,\n  NON_EU_CONNECTION_STRING,\n  StatsbeatResourceProvider,\n} from \"./types.js\";\nimport * as os from \"node:os\";\n\nexport class StatsbeatMetrics {\n  protected resourceProvider: string = StatsbeatResourceProvider.unknown;\n  protected vmInfo: VirtualMachineInfo = {};\n  protected os: string = os.type();\n  protected resourceIdentifier = \"\";\n\n  protected async getResourceProvider(): Promise<void> {\n    // Check resource provider\n    this.resourceProvider = StatsbeatResourceProvider.unknown;\n    if (process.env.AKS_ARM_NAMESPACE_ID) {\n      // AKS\n      this.resourceProvider = StatsbeatResourceProvider.aks;\n      this.resourceIdentifier = process.env.AKS_ARM_NAMESPACE_ID;\n    } else if (process.env.WEBSITE_SITE_NAME) {\n      // Web apps\n      this.resourceProvider = StatsbeatResourceProvider.appsvc;\n      this.resourceIdentifier = process.env.WEBSITE_SITE_NAME;\n      if (process.env.WEBSITE_HOME_STAMPNAME) {\n        this.resourceIdentifier += \"/\" + process.env.WEBSITE_HOME_STAMPNAME;\n      }\n    } else if (process.env.FUNCTIONS_WORKER_RUNTIME) {\n      // Function apps\n      this.resourceProvider = StatsbeatResourceProvider.functions;\n      if (process.env.WEBSITE_HOSTNAME) {\n        this.resourceIdentifier = process.env.WEBSITE_HOSTNAME;\n      }\n    } else if (await this.getAzureComputeMetadata()) {\n      this.resourceProvider = StatsbeatResourceProvider.vm;\n      this.resourceIdentifier = this.vmInfo.id + \"/\" + this.vmInfo.subscriptionId;\n      // Overrride OS as VM info have higher precedence\n      if (this.vmInfo.osType) {\n        this.os = this.vmInfo.osType;\n      }\n    } else {\n      this.resourceProvider = StatsbeatResourceProvider.unknown;\n    }\n  }\n\n  public async getAzureComputeMetadata(): Promise<boolean> {\n    const httpClient = createDefaultHttpClient();\n    const method: HttpMethods = \"GET\";\n\n    const options = {\n      url: `${AIMS_URI}?${AIMS_API_VERSION}&${AIMS_FORMAT}`,\n      timeout: 5000, // 5 seconds\n      method: method,\n      allowInsecureConnection: true,\n    };\n    const request = createPipelineRequest(options);\n\n    await httpClient\n      .sendRequest(request)\n      .then((res: any) => {\n        if (res.status === 200) {\n          // Success; VM\n          this.vmInfo.isVM = true;\n          let virtualMachineData = \"\";\n          res.on(\"data\", (data: any) => {\n            virtualMachineData += data;\n          });\n          res.on(\"end\", () => {\n            try {\n              const data = JSON.parse(virtualMachineData);\n              this.vmInfo.id = data[\"vmId\"] || \"\";\n              this.vmInfo.subscriptionId = data[\"subscriptionId\"] || \"\";\n              this.vmInfo.osType = data[\"osType\"] || \"\";\n            } catch (error) {\n              diag.debug(\"Failed to parse JSON: \", error);\n            }\n          });\n          return true;\n        } else {\n          return false;\n        }\n      })\n      .catch(() => {\n        return false;\n      });\n    return false;\n  }\n\n  protected getConnectionString(endpointUrl: string): string {\n    const currentEndpoint = endpointUrl;\n    for (let i = 0; i < EU_ENDPOINTS.length; i++) {\n      if (currentEndpoint.includes(EU_ENDPOINTS[i])) {\n        return EU_CONNECTION_STRING;\n      }\n    }\n    return NON_EU_CONNECTION_STRING;\n  }\n}\n"]}