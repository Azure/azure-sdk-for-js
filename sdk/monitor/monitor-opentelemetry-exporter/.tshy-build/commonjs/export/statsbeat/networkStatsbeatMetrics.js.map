{"version":3,"file":"networkStatsbeatMetrics.js","sourceRoot":"","sources":["../../../../src/export/statsbeat/networkStatsbeatMetrics.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  BatchObservableResult,\n  Meter,\n  ObservableGauge,\n  ObservableResult,\n} from \"@opentelemetry/api\";\nimport { diag } from \"@opentelemetry/api\";\nimport type { PeriodicExportingMetricReaderOptions } from \"@opentelemetry/sdk-metrics\";\nimport { MeterProvider, PeriodicExportingMetricReader } from \"@opentelemetry/sdk-metrics\";\nimport type { AzureMonitorExporterOptions } from \"../../index.js\";\nimport * as ai from \"../../utils/constants/applicationinsights.js\";\nimport { StatsbeatMetrics } from \"./statsbeatMetrics.js\";\nimport type {\n  CommonStatsbeatProperties,\n  NetworkStatsbeatProperties,\n  StatsbeatOptions,\n} from \"./types.js\";\nimport { StatsbeatCounter, STATSBEAT_LANGUAGE, NetworkStatsbeat } from \"./types.js\";\nimport { AzureMonitorStatsbeatExporter } from \"./statsbeatExporter.js\";\nimport { ENV_DISABLE_STATSBEAT } from \"../../Declarations/Constants.js\";\nimport { getAttachType } from \"../../utils/metricUtils.js\";\n\nexport class NetworkStatsbeatMetrics extends StatsbeatMetrics {\n  private disableNonEssentialStatsbeat: boolean = !!process.env[ENV_DISABLE_STATSBEAT];\n  private commonProperties: CommonStatsbeatProperties;\n  private networkProperties: NetworkStatsbeatProperties;\n  private isInitialized: boolean = false;\n  private statsCollectionShortInterval: number = 900000; // 15 minutes\n\n  private networkStatsbeatCollection: Array<NetworkStatsbeat> = [];\n  private networkStatsbeatMeter: Meter;\n  private networkStatsbeatMeterProvider: MeterProvider;\n  private networkAzureExporter: AzureMonitorStatsbeatExporter;\n  private networkMetricReader: PeriodicExportingMetricReader;\n\n  // Custom dimensions\n  private cikey: string;\n  private runtimeVersion: string;\n  private language: string;\n  private version: string;\n  private attach: string = getAttachType();\n\n  // Observable Gauges\n  private successCountGauge: ObservableGauge;\n  private failureCountGauge: ObservableGauge;\n  private retryCountGauge: ObservableGauge;\n  private throttleCountGauge: ObservableGauge;\n  private exceptionCountGauge: ObservableGauge;\n  private averageDurationGauge: ObservableGauge;\n  // Non-essential Statsbeat Gauges\n  private readFailureGauge: ObservableGauge | undefined;\n  private writeFailureGauge: ObservableGauge | undefined;\n\n  // Network attributes\n  private connectionString: string;\n  private endpointUrl: string;\n  private host: string;\n\n  constructor(options: StatsbeatOptions) {\n    super();\n    this.connectionString = super.getConnectionString(options.endpointUrl);\n    this.networkStatsbeatMeterProvider = new MeterProvider();\n\n    const exporterConfig: AzureMonitorExporterOptions = {\n      connectionString: this.connectionString,\n    };\n\n    this.networkAzureExporter = new AzureMonitorStatsbeatExporter(exporterConfig);\n\n    // Exports Network Statsbeat every 15 minutes\n    const networkMetricReaderOptions: PeriodicExportingMetricReaderOptions = {\n      exporter: this.networkAzureExporter,\n      exportIntervalMillis: options.networkCollectionInterval || this.statsCollectionShortInterval, // 15 minutes\n    };\n\n    this.networkMetricReader = new PeriodicExportingMetricReader(networkMetricReaderOptions);\n    this.networkStatsbeatMeterProvider.addMetricReader(this.networkMetricReader);\n    this.networkStatsbeatMeter = this.networkStatsbeatMeterProvider.getMeter(\n      \"Azure Monitor Network Statsbeat\",\n    );\n\n    this.endpointUrl = options.endpointUrl;\n    this.runtimeVersion = process.version;\n    this.language = STATSBEAT_LANGUAGE;\n    this.version = ai.packageVersion;\n    this.host = this.getShortHost(options.endpointUrl);\n    this.cikey = options.instrumentationKey;\n\n    this.successCountGauge = this.networkStatsbeatMeter.createObservableGauge(\n      StatsbeatCounter.SUCCESS_COUNT,\n    );\n    this.failureCountGauge = this.networkStatsbeatMeter.createObservableGauge(\n      StatsbeatCounter.FAILURE_COUNT,\n    );\n    this.retryCountGauge = this.networkStatsbeatMeter.createObservableGauge(\n      StatsbeatCounter.RETRY_COUNT,\n    );\n    this.throttleCountGauge = this.networkStatsbeatMeter.createObservableGauge(\n      StatsbeatCounter.THROTTLE_COUNT,\n    );\n    this.exceptionCountGauge = this.networkStatsbeatMeter.createObservableGauge(\n      StatsbeatCounter.EXCEPTION_COUNT,\n    );\n    this.averageDurationGauge = this.networkStatsbeatMeter.createObservableGauge(\n      StatsbeatCounter.AVERAGE_DURATION,\n    );\n    if (!this.disableNonEssentialStatsbeat) {\n      this.readFailureGauge = this.networkStatsbeatMeter.createObservableGauge(\n        StatsbeatCounter.READ_FAILURE_COUNT,\n      );\n      this.writeFailureGauge = this.networkStatsbeatMeter.createObservableGauge(\n        StatsbeatCounter.WRITE_FAILURE_COUNT,\n      );\n    }\n\n    this.isInitialized = true;\n    this.initialize();\n\n    this.commonProperties = {\n      os: this.os,\n      rp: this.resourceProvider,\n      cikey: this.cikey,\n      runtimeVersion: this.runtimeVersion,\n      language: this.language,\n      version: this.version,\n      attach: this.attach,\n    };\n\n    this.networkProperties = {\n      endpoint: this.endpointUrl,\n      host: this.host,\n    };\n  }\n\n  public shutdown(): Promise<void> {\n    return this.networkStatsbeatMeterProvider.shutdown();\n  }\n\n  private async initialize(): Promise<void> {\n    try {\n      await super.getResourceProvider();\n\n      // Add network observable callbacks\n      this.successCountGauge.addCallback(this.successCallback.bind(this));\n      this.networkStatsbeatMeter.addBatchObservableCallback(this.failureCallback.bind(this), [\n        this.failureCountGauge,\n      ]);\n      this.networkStatsbeatMeter.addBatchObservableCallback(this.retryCallback.bind(this), [\n        this.retryCountGauge,\n      ]);\n      this.networkStatsbeatMeter.addBatchObservableCallback(this.throttleCallback.bind(this), [\n        this.throttleCountGauge,\n      ]);\n      this.networkStatsbeatMeter.addBatchObservableCallback(this.exceptionCallback.bind(this), [\n        this.exceptionCountGauge,\n      ]);\n      if (!this.disableNonEssentialStatsbeat) {\n        this.readFailureGauge?.addCallback(this.readFailureCallback.bind(this));\n        this.writeFailureGauge?.addCallback(this.writeFailureCallback.bind(this));\n      }\n      this.averageDurationGauge.addCallback(this.durationCallback.bind(this));\n    } catch (error) {\n      diag.debug(\"Call to get the resource provider failed.\");\n    }\n  }\n\n  // Observable gauge callbacks\n  private successCallback(observableResult: ObservableResult): void {\n    const counter: NetworkStatsbeat = this.getNetworkStatsbeatCounter(this.endpointUrl, this.host);\n    const attributes = { ...this.commonProperties, ...this.networkProperties };\n    observableResult.observe(counter.totalSuccessfulRequestCount, attributes);\n    counter.totalSuccessfulRequestCount = 0;\n  }\n\n  private failureCallback(observableResult: BatchObservableResult): void {\n    const counter: NetworkStatsbeat = this.getNetworkStatsbeatCounter(this.endpointUrl, this.host);\n    /*\n      Takes the failureCountGauge, value (of the counter), and attributes\n      create a unqiue counter based on statusCode as well\n      append statusCode to attributes so the newly created attributes are unique.\n    */\n    const attributes = { ...this.networkProperties, ...this.commonProperties, statusCode: 0 };\n\n    // For each { statusCode -> count } mapping, call observe, passing the count and attributes that include the statusCode\n    for (let i = 0; i < counter.totalFailedRequestCount.length; i++) {\n      attributes.statusCode = counter.totalFailedRequestCount[i].statusCode;\n      observableResult.observe(this.failureCountGauge, counter.totalFailedRequestCount[i].count, {\n        ...attributes,\n      });\n      counter.totalFailedRequestCount[i].count = 0;\n    }\n  }\n\n  private retryCallback(observableResult: BatchObservableResult): void {\n    const counter: NetworkStatsbeat = this.getNetworkStatsbeatCounter(this.endpointUrl, this.host);\n    const attributes = { ...this.networkProperties, ...this.commonProperties, statusCode: 0 };\n\n    for (let i = 0; i < counter.retryCount.length; i++) {\n      attributes.statusCode = counter.retryCount[i].statusCode;\n      observableResult.observe(this.retryCountGauge, counter.retryCount[i].count, {\n        ...attributes,\n      });\n      counter.retryCount[i].count = 0;\n    }\n  }\n\n  private throttleCallback(observableResult: BatchObservableResult): void {\n    const counter: NetworkStatsbeat = this.getNetworkStatsbeatCounter(this.endpointUrl, this.host);\n    const attributes = { ...this.networkProperties, ...this.commonProperties, statusCode: 0 };\n\n    for (let i = 0; i < counter.throttleCount.length; i++) {\n      attributes.statusCode = counter.throttleCount[i].statusCode;\n      observableResult.observe(this.throttleCountGauge, counter.throttleCount[i].count, {\n        ...attributes,\n      });\n      counter.throttleCount[i].count = 0;\n    }\n  }\n\n  private exceptionCallback(observableResult: BatchObservableResult): void {\n    const counter: NetworkStatsbeat = this.getNetworkStatsbeatCounter(this.endpointUrl, this.host);\n    const attributes = { ...this.networkProperties, ...this.commonProperties, exceptionType: \"\" };\n\n    for (let i = 0; i < counter.exceptionCount.length; i++) {\n      attributes.exceptionType = counter.exceptionCount[i].exceptionType;\n      observableResult.observe(this.exceptionCountGauge, counter.exceptionCount[i].count, {\n        ...attributes,\n      });\n      counter.exceptionCount[i].count = 0;\n    }\n  }\n\n  private durationCallback(observableResult: ObservableResult): void {\n    const counter: NetworkStatsbeat = this.getNetworkStatsbeatCounter(this.endpointUrl, this.host);\n    const attributes = { ...this.networkProperties, ...this.commonProperties };\n    for (let i = 0; i < this.networkStatsbeatCollection.length; i++) {\n      const currentCounter = this.networkStatsbeatCollection[i];\n      currentCounter.time = Number(new Date());\n      const intervalRequests =\n        currentCounter.totalRequestCount - currentCounter.lastRequestCount || 0;\n      currentCounter.averageRequestExecutionTime =\n        (currentCounter.intervalRequestExecutionTime -\n          currentCounter.lastIntervalRequestExecutionTime) /\n          intervalRequests || 0;\n      currentCounter.lastIntervalRequestExecutionTime = currentCounter.intervalRequestExecutionTime; // reset\n\n      currentCounter.lastRequestCount = currentCounter.totalRequestCount;\n      currentCounter.lastTime = currentCounter.time;\n    }\n    observableResult.observe(counter.averageRequestExecutionTime, attributes);\n\n    counter.averageRequestExecutionTime = 0;\n  }\n\n  private readFailureCallback(observableResult: ObservableResult): void {\n    const counter: NetworkStatsbeat = this.getNetworkStatsbeatCounter(this.endpointUrl, this.host);\n    const attributes = { ...this.commonProperties, ...this.networkProperties };\n    observableResult.observe(counter.totalReadFailureCount, attributes);\n    counter.totalReadFailureCount = 0;\n  }\n\n  private writeFailureCallback(observableResult: ObservableResult): void {\n    const counter: NetworkStatsbeat = this.getNetworkStatsbeatCounter(this.endpointUrl, this.host);\n    const attributes = { ...this.commonProperties, ...this.networkProperties };\n    observableResult.observe(counter.totalWriteFailureCount, attributes);\n    counter.totalWriteFailureCount = 0;\n  }\n\n  // Public methods to increase counters\n  public countSuccess(duration: number): void {\n    if (!this.isInitialized) {\n      return;\n    }\n    const counter: NetworkStatsbeat = this.getNetworkStatsbeatCounter(this.endpointUrl, this.host);\n    counter.totalRequestCount++;\n    counter.totalSuccessfulRequestCount++;\n    counter.intervalRequestExecutionTime += duration;\n  }\n\n  public countFailure(duration: number, statusCode: number): void {\n    if (!this.isInitialized) {\n      return;\n    }\n    const counter: NetworkStatsbeat = this.getNetworkStatsbeatCounter(this.endpointUrl, this.host);\n    const currentStatusCounter = counter.totalFailedRequestCount.find(\n      (statusCounter) => statusCode === statusCounter.statusCode,\n    );\n\n    if (currentStatusCounter) {\n      currentStatusCounter.count++;\n    } else {\n      counter.totalFailedRequestCount.push({ statusCode: statusCode, count: 1 });\n    }\n\n    counter.totalRequestCount++;\n    counter.intervalRequestExecutionTime += duration;\n  }\n\n  public countRetry(statusCode: number): void {\n    if (!this.isInitialized) {\n      return;\n    }\n    const counter: NetworkStatsbeat = this.getNetworkStatsbeatCounter(this.endpointUrl, this.host);\n    const currentStatusCounter = counter.retryCount.find(\n      (statusCounter) => statusCode === statusCounter.statusCode,\n    );\n\n    if (currentStatusCounter) {\n      currentStatusCounter.count++;\n    } else {\n      counter.retryCount.push({ statusCode: statusCode, count: 1 });\n    }\n  }\n\n  public countThrottle(statusCode: number): void {\n    if (!this.isInitialized) {\n      return;\n    }\n    const counter: NetworkStatsbeat = this.getNetworkStatsbeatCounter(this.endpointUrl, this.host);\n    const currentStatusCounter = counter.throttleCount.find(\n      (statusCounter) => statusCode === statusCounter.statusCode,\n    );\n\n    if (currentStatusCounter) {\n      currentStatusCounter.count++;\n    } else {\n      counter.throttleCount.push({ statusCode: statusCode, count: 1 });\n    }\n  }\n\n  public countReadFailure(): void {\n    if (!this.isInitialized || this.disableNonEssentialStatsbeat) {\n      return;\n    }\n    const counter: NetworkStatsbeat = this.getNetworkStatsbeatCounter(this.endpointUrl, this.host);\n    counter.totalReadFailureCount++;\n  }\n\n  public countWriteFailure(): void {\n    if (!this.isInitialized || this.disableNonEssentialStatsbeat) {\n      return;\n    }\n    const counter: NetworkStatsbeat = this.getNetworkStatsbeatCounter(this.endpointUrl, this.host);\n    counter.totalWriteFailureCount++;\n  }\n\n  public countException(exceptionType: Error): void {\n    if (!this.isInitialized) {\n      return;\n    }\n    const counter: NetworkStatsbeat = this.getNetworkStatsbeatCounter(this.endpointUrl, this.host);\n    const currentErrorCounter = counter.exceptionCount.find(\n      (exceptionCounter) => exceptionType.name === exceptionCounter.exceptionType,\n    );\n    if (currentErrorCounter) {\n      currentErrorCounter.count++;\n    } else {\n      counter.exceptionCount.push({ exceptionType: exceptionType.name, count: 1 });\n    }\n  }\n\n  // Gets a networkStatsbeat counter if one exists for the given endpoint\n  private getNetworkStatsbeatCounter(endpoint: string, host: string): NetworkStatsbeat {\n    // Check if the counter is available\n    for (let i = 0; i < this.networkStatsbeatCollection.length; i++) {\n      // Same object\n      if (\n        endpoint === this.networkStatsbeatCollection[i].endpoint &&\n        host === this.networkStatsbeatCollection[i].host\n      ) {\n        return this.networkStatsbeatCollection[i];\n      }\n    }\n    // Create a new counter if not found\n    const newCounter = new NetworkStatsbeat(endpoint, host);\n    this.networkStatsbeatCollection.push(newCounter);\n    return newCounter;\n  }\n\n  private getShortHost(originalHost: string): string {\n    let shortHost = originalHost;\n    try {\n      const hostRegex = new RegExp(/^https?:\\/\\/(?:www\\.)?([^/.-]+)/);\n      const res = hostRegex.exec(originalHost);\n      if (res !== null && res.length > 1) {\n        shortHost = res[1];\n      }\n      shortHost = shortHost.replace(\".in.applicationinsights.azure.com\", \"\");\n    } catch (error) {\n      diag.debug(\"Failed to get the short host name.\");\n    }\n    return shortHost;\n  }\n}\n"]}