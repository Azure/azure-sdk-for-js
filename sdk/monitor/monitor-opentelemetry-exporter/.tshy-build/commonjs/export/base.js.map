{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../src/export/base.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAElC,4CAA0C;AAC1C,kFAA4E;AAE5E,+DAIsC;AAEtC;;GAEG;AACH,MAAsB,wBAAwB;IA4B5C;;;OAGG;IACH,YAAY,UAAuC,EAAE,EAAE,mBAA6B;;QA/BpF;;WAEG;QACO,uBAAkB,GAAW,EAAE,CAAC;QAC1C;;WAEG;QACO,gBAAW,GAAW,EAAE,CAAC;QACnC;;WAEG;QACO,mBAAc,GAAY,KAAK,CAAC;QAqBxC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;QAC7B,IAAI,CAAC,WAAW,GAAG,sCAAuB,CAAC;QAC3C,MAAM,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,IAAI,OAAO,CAAC,GAAG,CAAC,oCAAqB,CAAC,CAAC;QAC7F,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,KAAK,CAAC;QAE7E,IAAI,gBAAgB,EAAE,CAAC;YACrB,MAAM,sBAAsB,GAAG,kDAAsB,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;YAC9E,IAAI,CAAC,kBAAkB;gBACrB,sBAAsB,CAAC,kBAAkB,IAAI,IAAI,CAAC,kBAAkB,CAAC;YACvE,IAAI,CAAC,WAAW,GAAG,CAAA,MAAA,sBAAsB,CAAC,iBAAiB,0CAAE,IAAI,EAAE,KAAI,IAAI,CAAC,WAAW,CAAC;YACxF,IAAI,CAAC,WAAW,GAAG,sBAAsB,CAAC,WAAW,CAAC;QACxD,CAAC;QAED,kCAAkC;QAClC,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC7B,MAAM,OAAO,GACX,wFAAwF,CAAC;YAC3F,UAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACpB,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;QAC3B,CAAC;QACD,IAAI,CAAC,kDAAsB,CAAC,0BAA0B,CAAC,IAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC;YAChF,MAAM,OAAO,GAAG,wEAAwE,CAAC;YACzF,UAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACpB,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;QAC3B,CAAC;QACD,IAAI,CAAC,cAAc,GAAG,CAAC,IAAI,CAAC,mBAAmB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,2CAA4B,CAAC,CAAC;QAE9F,UAAI,CAAC,KAAK,CAAC,6CAA6C,CAAC,CAAC;IAC5D,CAAC;CACF;AA/DD,4DA+DC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { diag } from \"@opentelemetry/api\";\nimport { ConnectionStringParser } from \"../utils/connectionStringParser.js\";\nimport type { AzureMonitorExporterOptions } from \"../config.js\";\nimport {\n  DEFAULT_BREEZE_ENDPOINT,\n  ENV_CONNECTION_STRING,\n  LEGACY_ENV_DISABLE_STATSBEAT,\n} from \"../Declarations/Constants.js\";\n\n/**\n * Azure Monitor OpenTelemetry Trace Exporter.\n */\nexport abstract class AzureMonitorBaseExporter {\n  /**\n   * Instrumentation key to be used for exported envelopes\n   */\n  protected instrumentationKey: string = \"\";\n  /**\n   * Ingestion Endpoint URL\n   */\n  protected endpointUrl: string = \"\";\n  /**\n   *Flag to determine if exporter will generate Statsbeat data\n   */\n  protected trackStatsbeat: boolean = false;\n  /**\n   * Instrumentation key to be used for exported envelopes\n   */\n  protected aadAudience: string | undefined;\n\n  /**\n   * Flag to determine if the Exporter is a Statsbeat Exporter\n   */\n  private isStatsbeatExporter: boolean;\n\n  /**\n   * Exporter internal configuration\n   */\n  private readonly options: AzureMonitorExporterOptions;\n\n  /**\n   * Initializes a new instance of the AzureMonitorBaseExporter class.\n   * @param AzureMonitorExporterOptions - Exporter configuration.\n   */\n  constructor(options: AzureMonitorExporterOptions = {}, isStatsbeatExporter?: boolean) {\n    this.options = options;\n    this.instrumentationKey = \"\";\n    this.endpointUrl = DEFAULT_BREEZE_ENDPOINT;\n    const connectionString = this.options.connectionString || process.env[ENV_CONNECTION_STRING];\n    this.isStatsbeatExporter = isStatsbeatExporter ? isStatsbeatExporter : false;\n\n    if (connectionString) {\n      const parsedConnectionString = ConnectionStringParser.parse(connectionString);\n      this.instrumentationKey =\n        parsedConnectionString.instrumentationkey || this.instrumentationKey;\n      this.endpointUrl = parsedConnectionString.ingestionendpoint?.trim() || this.endpointUrl;\n      this.aadAudience = parsedConnectionString.aadaudience;\n    }\n\n    // Instrumentation key is required\n    if (!this.instrumentationKey) {\n      const message =\n        \"No instrumentation key or connection string was provided to the Azure Monitor Exporter\";\n      diag.error(message);\n      throw new Error(message);\n    }\n    if (!ConnectionStringParser.validateInstrumentationKey(this.instrumentationKey)) {\n      const message = \"Invalid instrumentation key was provided to the Azure Monitor Exporter\";\n      diag.error(message);\n      throw new Error(message);\n    }\n    this.trackStatsbeat = !this.isStatsbeatExporter && !process.env[LEGACY_ENV_DISABLE_STATSBEAT];\n\n    diag.debug(\"AzureMonitorExporter was successfully setup\");\n  }\n}\n"]}