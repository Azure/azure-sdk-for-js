{"version":3,"file":"metric.js","sourceRoot":"","sources":["../../../src/export/metric.ts"],"names":[],"mappings":";;;AAAA,uCAAuC;AACvC,kCAAkC;AAClC,4CAAmD;AAEnD,4DAAoF;AAEpF,8CAAwE;AACxE,uCAAqD;AAErD,4DAAoE;AAEpE,mDAAkD;AAElD;;GAEG;AACH,MAAa,0BACX,SAAQ,kCAAwB;IAShC;;;OAGG;IAEH,YAAY,UAAuC,EAAE;QACnD,KAAK,CAAC,OAAO,CAAC,CAAC;QAZjB;;WAEG;QACK,gBAAW,GAAG,KAAK,CAAC;QAU1B,IAAI,CAAC,OAAO,GAAG,IAAI,qBAAU,CAAC;YAC5B,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,kBAAkB,EAAE,IAAI,CAAC,kBAAkB;YAC3C,cAAc,EAAE,IAAI,CAAC,cAAc;YACnC,eAAe,EAAE,OAAO;YACxB,WAAW,EAAE,IAAI,CAAC,WAAW;SAC9B,CAAC,CAAC;QACH,UAAI,CAAC,KAAK,CAAC,mDAAmD,CAAC,CAAC;IAClE,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,MAAM,CACV,OAAwB,EACxB,cAA8C;QAE9C,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACrB,UAAI,CAAC,IAAI,CAAC,6CAA6C,CAAC,CAAC;YACzD,UAAU,CAAC,GAAG,EAAE,CAAC,cAAc,CAAC,EAAE,IAAI,EAAE,uBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACvE,OAAO;QACT,CAAC;QACD,UAAI,CAAC,IAAI,CAAC,aAAa,OAAO,CAAC,YAAY,CAAC,MAAM,yCAAyC,CAAC,CAAC;QAE7F,MAAM,SAAS,GAAe,IAAA,0CAAyB,EAAC,OAAO,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAC1F,6DAA6D;QAC7D,MAAM,aAAO,CAAC,IAAI,CAAC,IAAA,sBAAe,EAAC,aAAO,CAAC,MAAM,EAAE,CAAC,EAAE,KAAK,IAAI,EAAE;YAC/D,cAAc,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,QAAQ;QACnB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,UAAI,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;QACtD,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;IACjC,CAAC;IAED;;OAEG;IACI,4BAA4B,CAAC,cAA8B;QAChE,IACE,cAAc,KAAK,4BAAc,CAAC,eAAe;YACjD,cAAc,KAAK,4BAAc,CAAC,0BAA0B,EAC5D,CAAC;YACD,OAAO,oCAAsB,CAAC,UAAU,CAAC;QAC3C,CAAC;QACD,OAAO,oCAAsB,CAAC,KAAK,CAAC;IACtC,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,UAAU;QACrB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;CACF;AA9ED,gEA8EC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { context, diag } from \"@opentelemetry/api\";\nimport type { PushMetricExporter, ResourceMetrics } from \"@opentelemetry/sdk-metrics\";\nimport { AggregationTemporality, InstrumentType } from \"@opentelemetry/sdk-metrics\";\nimport type { ExportResult } from \"@opentelemetry/core\";\nimport { ExportResultCode, suppressTracing } from \"@opentelemetry/core\";\nimport { AzureMonitorBaseExporter } from \"./base.js\";\nimport type { TelemetryItem as Envelope } from \"../generated/index.js\";\nimport { resourceMetricsToEnvelope } from \"../utils/metricUtils.js\";\nimport type { AzureMonitorExporterOptions } from \"../config.js\";\nimport { HttpSender } from \"../platform/index.js\";\n\n/**\n * Azure Monitor OpenTelemetry Metric Exporter.\n */\nexport class AzureMonitorMetricExporter\n  extends AzureMonitorBaseExporter\n  implements PushMetricExporter\n{\n  /**\n   * Flag to determine if Exporter is shutdown.\n   */\n  private _isShutdown = false;\n  private _sender: HttpSender;\n\n  /**\n   * Initializes a new instance of the AzureMonitorMetricExporter class.\n   * @param AzureExporterConfig - Exporter configuration.\n   */\n\n  constructor(options: AzureMonitorExporterOptions = {}) {\n    super(options);\n    this._sender = new HttpSender({\n      endpointUrl: this.endpointUrl,\n      instrumentationKey: this.instrumentationKey,\n      trackStatsbeat: this.trackStatsbeat,\n      exporterOptions: options,\n      aadAudience: this.aadAudience,\n    });\n    diag.debug(\"AzureMonitorMetricExporter was successfully setup\");\n  }\n\n  /**\n   * Export OpenTelemetry resource metrics.\n   * @param metrics - Resource metrics to export.\n   * @param resultCallback - Result callback.\n   */\n  async export(\n    metrics: ResourceMetrics,\n    resultCallback: (result: ExportResult) => void,\n  ): Promise<void> {\n    if (this._isShutdown) {\n      diag.info(\"Exporter shut down. Failed to export spans.\");\n      setTimeout(() => resultCallback({ code: ExportResultCode.FAILED }), 0);\n      return;\n    }\n    diag.info(`Exporting ${metrics.scopeMetrics.length} metrics(s). Converting to envelopes...`);\n\n    const envelopes: Envelope[] = resourceMetricsToEnvelope(metrics, this.instrumentationKey);\n    // Supress tracing until OpenTelemetry Metrics SDK support it\n    await context.with(suppressTracing(context.active()), async () => {\n      resultCallback(await this._sender.exportEnvelopes(envelopes));\n    });\n  }\n\n  /**\n   * Shutdown AzureMonitorMetricExporter.\n   */\n  public async shutdown(): Promise<void> {\n    this._isShutdown = true;\n    diag.info(\"AzureMonitorMetricExporter shutting down\");\n    return this._sender.shutdown();\n  }\n\n  /**\n   * Select aggregation temporality\n   */\n  public selectAggregationTemporality(instrumentType: InstrumentType): AggregationTemporality {\n    if (\n      instrumentType === InstrumentType.UP_DOWN_COUNTER ||\n      instrumentType === InstrumentType.OBSERVABLE_UP_DOWN_COUNTER\n    ) {\n      return AggregationTemporality.CUMULATIVE;\n    }\n    return AggregationTemporality.DELTA;\n  }\n\n  /**\n   * Force flush\n   */\n  public async forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n"]}