{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/types.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAElC,8EAkD6C;AA8C7C;;;GAGG;AACH,IAAY,2BASX;AATD,WAAY,2BAA2B;IACrC,8DAA+B,CAAA;IAC/B,kEAAmC,CAAA;IACnC,gEAAiC,CAAA;IACjC,8EAA+C,CAAA;IAC/C,4DAA6B,CAAA;IAC7B,0EAA2C,CAAA;IAC3C,kFAAmD,CAAA;IACnD,gEAAiC,CAAA;AACnC,CAAC,EATW,2BAA2B,2CAA3B,2BAA2B,QAStC;AAED;;;GAGG;AACH,IAAY,6BASX;AATD,WAAY,6BAA6B;IACvC,+FAA8D,CAAA;IAC9D,8EAA6C,CAAA;IAC7C,yFAAwD,CAAA;IACxD,0GAAyE,CAAA;IACzE,0GAAyE,CAAA;IACzE,wHAAuF,CAAA;IACvF,uHAAsF,CAAA;IACtF,qHAAoF,CAAA;AACtF,CAAC,EATW,6BAA6B,6CAA7B,6BAA6B,QASxC;AAED;;;GAGG;AACH,IAAY,kBAKX;AALD,WAAY,kBAAkB;IAC5B,qEAAc,CAAA;IACd,oEAAc,CAAA;IACd,8EAAmB,CAAA;IACnB,6EAAmB,CAAA;AACrB,CAAC,EALW,kBAAkB,kCAAlB,kBAAkB,QAK7B;AAED;;;GAGG;AACU,QAAA,oBAAoB,GAAG;IAClC,2CAAoB;IACpB,6CAAsB;IACtB,2CAAoB;IACpB,4CAAqB;IACrB,+CAAwB;IACxB,2CAAoB;IACpB,wCAAiB;IACjB,gDAAyB;IACzB,0CAAmB;IACnB,yCAAkB;IAClB,yCAAkB;IAClB,4CAAqB;IACrB,4CAAqB;IACrB,uCAAgB;IAChB,0CAAmB;IACnB,oDAA6B;IAC7B,8CAAuB;IACvB,iDAA0B;IAC1B,oDAA6B;IAC7B,2CAAoB;IACpB,2CAAoB;IACpB,2CAAoB;IACpB,6CAAsB;IACtB,6CAAsB;IACtB,6CAAsB;IACtB,6CAAsB;IACtB,8CAAuB;IACvB,kBAAkB;CACnB,CAAC;AAEF;;;GAGG;AACH,IAAY,+BAEX;AAFD,WAAY,+BAA+B;IACzC,+EAA4C,CAAA;AAC9C,CAAC,EAFW,+BAA+B,+CAA/B,+BAA+B,QAE1C;AAED;;;GAGG;AACU,QAAA,kBAAkB,GAAG;IAChC,0CAAmB;IACnB,uCAAgB;IAChB,0CAAmB;IACnB,uCAAgB;IAChB,oCAAa;IACb,oCAAa;IACb,qCAAc;IACd,sCAAe;IACf,sCAAe;IACf,iDAA0B;IAC1B,8CAAuB;IACvB,iDAA0B;IAC1B,gDAAyB;IACzB,6CAAsB;IACtB,oDAA6B;IAC7B,6CAAsB;IACtB,+CAAwB;IACxB,+CAAwB;IACxB,qDAA8B;IAC9B,0CAAmB;IACnB,6CAAsB;IACtB,gDAAyB;IACzB,+BAA+B,CAAC,cAAc;CAC/C,CAAC;AAEF;;;GAGG;AACU,QAAA,2BAA2B,GAAG,CAAC,iCAAiC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport {\n  ATTR_CLIENT_ADDRESS,\n  ATTR_CLIENT_PORT,\n  ATTR_ERROR_TYPE,\n  ATTR_EXCEPTION_MESSAGE,\n  ATTR_EXCEPTION_STACKTRACE,\n  ATTR_EXCEPTION_TYPE,\n  ATTR_HTTP_REQUEST_METHOD,\n  ATTR_HTTP_RESPONSE_STATUS_CODE,\n  ATTR_NETWORK_LOCAL_ADDRESS,\n  ATTR_NETWORK_LOCAL_PORT,\n  ATTR_NETWORK_PEER_ADDRESS,\n  ATTR_NETWORK_PEER_PORT,\n  ATTR_NETWORK_PROTOCOL_NAME,\n  ATTR_NETWORK_PROTOCOL_VERSION,\n  ATTR_NETWORK_TRANSPORT,\n  ATTR_SERVER_ADDRESS,\n  ATTR_SERVER_PORT,\n  ATTR_URL_FULL,\n  ATTR_URL_PATH,\n  ATTR_URL_QUERY,\n  ATTR_URL_SCHEME,\n  ATTR_USER_AGENT_ORIGINAL,\n  SEMATTRS_DB_NAME,\n  SEMATTRS_DB_OPERATION,\n  SEMATTRS_DB_STATEMENT,\n  SEMATTRS_DB_SYSTEM,\n  SEMATTRS_EXCEPTION_MESSAGE,\n  SEMATTRS_EXCEPTION_STACKTRACE,\n  SEMATTRS_EXCEPTION_TYPE,\n  SEMATTRS_HTTP_CLIENT_IP,\n  SEMATTRS_HTTP_FLAVOR,\n  SEMATTRS_HTTP_HOST,\n  SEMATTRS_HTTP_METHOD,\n  SEMATTRS_HTTP_ROUTE,\n  SEMATTRS_HTTP_SCHEME,\n  SEMATTRS_HTTP_STATUS_CODE,\n  SEMATTRS_HTTP_TARGET,\n  SEMATTRS_HTTP_URL,\n  SEMATTRS_HTTP_USER_AGENT,\n  SEMATTRS_NET_HOST_IP,\n  SEMATTRS_NET_HOST_NAME,\n  SEMATTRS_NET_HOST_PORT,\n  SEMATTRS_NET_PEER_IP,\n  SEMATTRS_NET_PEER_NAME,\n  SEMATTRS_NET_PEER_PORT,\n  SEMATTRS_NET_TRANSPORT,\n  SEMATTRS_PEER_SERVICE,\n  SEMATTRS_RPC_GRPC_STATUS_CODE,\n  SEMATTRS_RPC_SYSTEM,\n} from \"@opentelemetry/semantic-conventions\";\nimport type { ContextTagKeys } from \"./generated/index.js\";\n\n/**\n * Azure Monitor envelope tags.\n * @internal\n */\nexport type Tags = { [key in ContextTagKeys]: string };\n/**\n * Azure Monitor envelope property type.\n * @internal\n */\nexport type PropertyType = string | number | boolean | object | Array<PropertyType>;\n/**\n * Azure Monitor envelope properties.\n * @internal\n */\nexport type Properties = { [key: string]: Properties | PropertyType };\n/**\n * Azure Monitor envelope links.\n * @internal\n */\nexport interface MSLink {\n  operation_Id: string;\n  id: string;\n}\n/**\n * Azure Monitor envelope measurements.\n * @internal\n */\nexport type Measurements = { [key: string]: number };\n/**\n * Exporter sender result.\n * @internal\n */\nexport type SenderResult = { statusCode: number | undefined; result: string };\n\n/**\n * Exporter persistent storage.\n * @internal\n */\nexport interface PersistentStorage {\n  shift(): Promise<unknown>;\n  push(value: unknown[]): Promise<boolean>;\n}\n\n/**\n * Performance Counter OpenTelemetry compliant names.\n * @internal\n */\nexport enum OTelPerformanceCounterNames {\n  PRIVATE_BYTES = \"Private_Bytes\",\n  AVAILABLE_BYTES = \"Available_Bytes\",\n  PROCESSOR_TIME = \"Processor_Time\",\n  PROCESS_TIME_STANDARD = \"Process_Time_Standard\",\n  REQUEST_RATE = \"Request_Rate\",\n  REQUEST_DURATION = \"Request_Execution_Time\",\n  PROCESS_TIME_NORMALIZED = \"Process_Time_Normalized\",\n  EXCEPTION_RATE = \"Exception_Rate\",\n}\n\n/**\n * Breeze Performance Counter names.\n * @internal\n */\nexport enum BreezePerformanceCounterNames {\n  PRIVATE_BYTES = \"\\\\Process(??APP_WIN32_PROC??)\\\\Private Bytes\",\n  AVAILABLE_BYTES = \"\\\\Memory\\\\Available Bytes\",\n  PROCESSOR_TIME = \"\\\\Processor(_Total)\\\\% Processor Time\",\n  PROCESS_TIME_STANDARD = \"\\\\Process(??APP_WIN32_PROC??)\\\\% Processor Time\",\n  REQUEST_RATE = \"\\\\ASP.NET Applications(??APP_W3SVC_PROC??)\\\\Requests/Sec\",\n  REQUEST_DURATION = \"\\\\ASP.NET Applications(??APP_W3SVC_PROC??)\\\\Request Execution Time\",\n  PROCESS_TIME_NORMALIZED = \"\\\\Process(??APP_WIN32_PROC??)\\\\% Processor Time Normalized\",\n  EXCEPTION_RATE = \"\\\\.NET CLR Exceptions(??APP_CLR_PROC??)\\\\# of Exceps Thrown / sec\",\n}\n\n/**\n * Property Max Lengths\n * @internal\n */\nexport enum MaxPropertyLengths {\n  NINE_BIT = 512,\n  TEN_BIT = 1024,\n  THIRTEEN_BIT = 8192,\n  FIFTEEN_BIT = 32768,\n}\n\n/**\n * Legacy HTTP semantic convention values\n * @internal\n */\nexport const legacySemanticValues = [\n  SEMATTRS_NET_PEER_IP,\n  SEMATTRS_NET_PEER_NAME,\n  SEMATTRS_NET_HOST_IP,\n  SEMATTRS_PEER_SERVICE,\n  SEMATTRS_HTTP_USER_AGENT,\n  SEMATTRS_HTTP_METHOD,\n  SEMATTRS_HTTP_URL,\n  SEMATTRS_HTTP_STATUS_CODE,\n  SEMATTRS_HTTP_ROUTE,\n  SEMATTRS_HTTP_HOST,\n  SEMATTRS_DB_SYSTEM,\n  SEMATTRS_DB_STATEMENT,\n  SEMATTRS_DB_OPERATION,\n  SEMATTRS_DB_NAME,\n  SEMATTRS_RPC_SYSTEM,\n  SEMATTRS_RPC_GRPC_STATUS_CODE,\n  SEMATTRS_EXCEPTION_TYPE,\n  SEMATTRS_EXCEPTION_MESSAGE,\n  SEMATTRS_EXCEPTION_STACKTRACE,\n  SEMATTRS_HTTP_SCHEME,\n  SEMATTRS_HTTP_TARGET,\n  SEMATTRS_HTTP_FLAVOR,\n  SEMATTRS_NET_TRANSPORT,\n  SEMATTRS_NET_HOST_NAME,\n  SEMATTRS_NET_HOST_PORT,\n  SEMATTRS_NET_PEER_PORT,\n  SEMATTRS_HTTP_CLIENT_IP,\n  \"http.status_text\",\n];\n\n/**\n * Experimental OpenTelemetry semantic convention values\n * @internal\n */\nexport enum experimentalOpenTelemetryValues {\n  SYNTHETIC_TYPE = \"user_agent.synthetic.type\",\n}\n\n/**\n * HTTP semantic convention values\n * @internal\n */\nexport const httpSemanticValues = [\n  ATTR_CLIENT_ADDRESS,\n  ATTR_CLIENT_PORT,\n  ATTR_SERVER_ADDRESS,\n  ATTR_SERVER_PORT,\n  ATTR_URL_FULL,\n  ATTR_URL_PATH,\n  ATTR_URL_QUERY,\n  ATTR_URL_SCHEME,\n  ATTR_ERROR_TYPE,\n  ATTR_NETWORK_LOCAL_ADDRESS,\n  ATTR_NETWORK_LOCAL_PORT,\n  ATTR_NETWORK_PROTOCOL_NAME,\n  ATTR_NETWORK_PEER_ADDRESS,\n  ATTR_NETWORK_PEER_PORT,\n  ATTR_NETWORK_PROTOCOL_VERSION,\n  ATTR_NETWORK_TRANSPORT,\n  ATTR_USER_AGENT_ORIGINAL,\n  ATTR_HTTP_REQUEST_METHOD,\n  ATTR_HTTP_RESPONSE_STATUS_CODE,\n  ATTR_EXCEPTION_TYPE,\n  ATTR_EXCEPTION_MESSAGE,\n  ATTR_EXCEPTION_STACKTRACE,\n  experimentalOpenTelemetryValues.SYNTHETIC_TYPE,\n];\n\n/**\n * Internal Microsoft attributes\n * @internal\n */\nexport const internalMicrosoftAttributes = [\"_MS.ProcessedByMetricExtractors\"];\n"]}