{"version":3,"file":"breezeUtils.js","sourceRoot":"","sources":["../../../src/utils/breezeUtils.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AA0BlC,kCAaC;AAGD,oCAcC;AAlCD;;;GAGG;AACH,SAAgB,WAAW,CAAC,UAAkB;IAC5C,OAAO,CACL,UAAU,KAAK,GAAG,IAAI,iBAAiB;QACvC,UAAU,KAAK,GAAG,IAAI,eAAe;QACrC,UAAU,KAAK,GAAG,IAAI,YAAY;QAClC,UAAU,KAAK,GAAG,IAAI,UAAU;QAChC,UAAU,KAAK,GAAG,IAAI,oBAAoB;QAC1C,UAAU,KAAK,GAAG,IAAI,gCAAgC;QACtD,UAAU,KAAK,GAAG,IAAI,eAAe;QACrC,UAAU,KAAK,GAAG,IAAI,cAAc;QACpC,UAAU,KAAK,GAAG,IAAI,qBAAqB;QAC3C,UAAU,KAAK,GAAG,CAAC,kBAAkB;KACtC,CAAC;AACJ,CAAC;AAED,wDAAwD;AACxD,SAAgB,YAAY,CAAC,OAAe;IAC1C,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,OAAO,GAAG,CAAC,EAAE,CAAC;QAClC,OAAO,GAAG,CAAC,CAAC;IACd,CAAC;IACD,IAAI,GAAG,GAAG,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;IACpE,IAAI,GAAG,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IACxD,IAAI,IAAI,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,CAAC,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IAC9D,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,CAAC,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;IAEzD,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;IAC7C,GAAG,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;IACvC,IAAI,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;IAC3C,MAAM,QAAQ,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;IAC5C,OAAO,QAAQ,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AACjD,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Breeze errors.\n * @internal\n */\nexport interface BreezeError {\n  index: number;\n  statusCode: number;\n  message: string;\n}\n\n/**\n * Breeze response definition.\n * @internal\n */\nexport interface BreezeResponse {\n  itemsReceived: number;\n  itemsAccepted: number;\n  errors: BreezeError[];\n}\n\n/**\n * Breeze retriable status codes.\n * @internal\n */\nexport function isRetriable(statusCode: number): boolean {\n  return (\n    statusCode === 206 || // Partial Accept\n    statusCode === 401 || // Unauthorized\n    statusCode === 403 || // Forbidden\n    statusCode === 408 || // Timeout\n    statusCode === 429 || // Too many requests\n    statusCode === 439 || // Daily quota exceeded (legacy)\n    statusCode === 500 || // Server Error\n    statusCode === 502 || // Bad Gateway\n    statusCode === 503 || // Server Unavailable\n    statusCode === 504 // Gateway Timeout\n  );\n}\n\n//  Convert ms to c# time span format DD.HH:MM:SS.MMMMMM\nexport function msToTimeSpan(totalms: number): string {\n  if (isNaN(totalms) || totalms < 0) {\n    totalms = 0;\n  }\n  let sec = ((totalms / 1000) % 60).toFixed(7).replace(/0{0,4}$/, \"\");\n  let min = \"\" + (Math.floor(totalms / (1000 * 60)) % 60);\n  let hour = \"\" + (Math.floor(totalms / (1000 * 60 * 60)) % 24);\n  const days = Math.floor(totalms / (1000 * 60 * 60 * 24));\n\n  sec = sec.indexOf(\".\") < 2 ? \"0\" + sec : sec;\n  min = min.length < 2 ? \"0\" + min : min;\n  hour = hour.length < 2 ? \"0\" + hour : hour;\n  const daysText = days > 0 ? days + \".\" : \"\";\n  return daysText + hour + \":\" + min + \":\" + sec;\n}\n"]}