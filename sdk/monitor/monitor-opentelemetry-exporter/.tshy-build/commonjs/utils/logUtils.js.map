{"version":3,"file":"logUtils.js","sourceRoot":"","sources":["../../../src/utils/logUtils.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAiDlC,sCAwFC;AA7HD,oDAAgF;AAChF,2CAKqB;AAErB,8EAI6C;AAE7C,0CAA2F;AAE3F,4CAA0C;AAC1C,+EAa4C;AAC5C,iDAA+C;AAE/C;;;GAGG;AACH,SAAgB,aAAa,CAAC,GAAsB,EAAE,IAAY;IAChE,MAAM,IAAI,GAAG,IAAA,wBAAY,EAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACtC,MAAM,UAAU,GAAG,GAAG,CAAC;IACvB,MAAM,kBAAkB,GAAG,IAAI,CAAC;IAChC,MAAM,IAAI,GAAG,iBAAiB,CAAC,GAAG,CAAC,CAAC;IACpC,wCAAwC;IACxC,IAAI,CAAC,UAAU,EAAE,YAAY,CAAC,GAAG,uBAAuB,CAAC,GAAG,CAAC,CAAC;IAC9D,IAAI,IAAY,CAAC;IACjB,IAAI,QAAgB,CAAC;IACrB,IAAI,QAAuB,CAAC;IAE5B,MAAM,mBAAmB,GAAG,GAAG,CAAC,UAAU,CAAC,gDAAyB,CAAC,CAAC;IACtE,MAAM,aAAa,GAAG,GAAG,CAAC,UAAU,CAAC,0CAAmB,CAAC,CAAC;IAC1D,MAAM,eAAe,GAAY,CAAC,CAAC,CAAC,aAAa,IAAI,mBAAmB,CAAC,IAAI,KAAK,CAAC;IACnF,MAAM,aAAa,GACjB,CAAC,GAAG,CAAC,UAAU,CAAC,oDAA2B,CAAC;QAC5C,CAAC,GAAG,CAAC,UAAU,CAAC,2DAAkC,CAAC;QACnD,CAAC,aAAa,CAAC;IACjB,IAAI,eAAe,EAAE,CAAC;QACpB,MAAM,gBAAgB,GAAG,GAAG,CAAC,UAAU,CAAC,6CAAsB,CAAC,CAAC;QAChE,IAAI,GAAG,yDAAgC,CAAC;QACxC,QAAQ,GAAG,6DAAoC,CAAC;QAChD,MAAM,gBAAgB,GAA8B;YAClD,QAAQ,EAAE,MAAM,CAAC,aAAa,CAAC;YAC/B,OAAO,EAAE,MAAM,CAAC,gBAAgB,CAAC;YACjC,YAAY,EAAE,mBAAmB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK;YAChD,KAAK,EAAE,MAAM,CAAC,mBAAmB,CAAC;SACnC,CAAC;QACF,MAAM,aAAa,GAA2B;YAC5C,UAAU,EAAE,CAAC,gBAAgB,CAAC;YAC9B,aAAa,EAAE,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YACtD,OAAO,EAAE,CAAC;SACX,CAAC;QACF,QAAQ,GAAG,aAAa,CAAC;IAC3B,CAAC;SAAM,IAAI,GAAG,CAAC,UAAU,CAAC,2DAAkC,CAAC,EAAE,CAAC;QAC9D,IAAI,GAAG,qDAA4B,CAAC;QACpC,QAAQ,GAAG,yDAAgC,CAAC;QAC5C,MAAM,SAAS,GAAuB;YACpC,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,2DAAkC,CAAC,CAAC;YAChE,OAAO,EAAE,CAAC;SACX,CAAC;QACF,QAAQ,GAAG,SAAS,CAAC;QACrB,YAAY,GAAG,wCAAwC,CAAC,GAAG,CAAC,CAAC;IAC/D,CAAC;SAAM,IAAI,aAAa,EAAE,CAAC;QACzB,IAAI,GAAG,uDAA8B,CAAC;QACtC,QAAQ,GAAG,2DAAkC,CAAC;QAC9C,MAAM,WAAW,GAAgB;YAC/B,OAAO,EAAE,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC;YACzB,aAAa,EAAE,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YACtD,OAAO,EAAE,CAAC;SACX,CAAC;QACF,QAAQ,GAAG,WAAW,CAAC;IACzB,CAAC;SAAM,CAAC;QACN,qCAAqC;QACrC,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,oDAA2B,CAAC,CAAC,CAAC;QAC/D,IAAI,GAAG,gCAAgC,CAAC,GAAG,CAAC,CAAC;QAC7C,QAAQ,GAAG,oCAAoC,CAAC,GAAG,CAAC,CAAC;QACrD,YAAY,GAAG,wCAAwC,CAAC,GAAG,CAAC,CAAC;QAC7D,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,sBAAsB;YACtB,OAAO;QACT,CAAC;IACH,CAAC;IACD,sBAAsB;IACtB,IAAI,QAAQ,CAAC,OAAO,EAAE,CAAC;QACrB,QAAQ,CAAC,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,6BAAkB,CAAC,WAAW,CAAC,CAAC;IAC3F,CAAC;IACD,IAAI,UAAU,EAAE,CAAC;QACf,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC;YAC1C,UAAU,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,6BAAkB,CAAC,YAAY,CAAC,CAAC;QAC1F,CAAC;IACH,CAAC;IACD,OAAO;QACL,IAAI;QACJ,UAAU;QACV,IAAI;QACJ,kBAAkB;QAClB,IAAI;QACJ,OAAO,EAAE,CAAC;QACV,IAAI,EAAE;YACJ,QAAQ;YACR,QAAQ,kCACH,QAAQ,KACX,UAAU;gBACV,YAAY,GACb;SACF;KACF,CAAC;AACJ,CAAC;AAED,SAAS,iBAAiB,CAAC,GAAsB;;IAC/C,MAAM,IAAI,GAAS,IAAA,kCAAsB,EAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACxD,IAAI,MAAA,GAAG,CAAC,WAAW,0CAAE,OAAO,EAAE,CAAC;QAC7B,IAAI,CAAC,8BAAmB,CAAC,aAAa,CAAC,GAAG,GAAG,CAAC,WAAW,CAAC,OAAO,CAAC;IACpE,CAAC;IACD,IAAI,MAAA,GAAG,CAAC,WAAW,0CAAE,MAAM,EAAE,CAAC;QAC5B,IAAI,CAAC,8BAAmB,CAAC,mBAAmB,CAAC,GAAG,GAAG,CAAC,WAAW,CAAC,MAAM,CAAC;IACzE,CAAC;IACD,IAAI,GAAG,CAAC,UAAU,CAAC,8BAAmB,CAAC,eAAe,CAAC,EAAE,CAAC;QACxD,IAAI,CAAC,8BAAmB,CAAC,eAAe,CAAC,GAAG,GAAG,CAAC,UAAU,CACxD,8BAAmB,CAAC,eAAe,CAC1B,CAAC;IACd,CAAC;IACD,IAAI,IAAA,6BAAiB,EAAC,GAAG,CAAC,UAAwB,CAAC,EAAE,CAAC;QACpD,IAAI,CAAC,8BAAmB,CAAC,0BAA0B,CAAC,GAAG,MAAM,CAAC;IAChE,CAAC;IACD,IAAA,4BAAa,EAAC,IAAI,EAAE,GAAG,CAAC,UAAwB,CAAC,CAAC;IAClD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,uBAAuB,CAAC,GAAsB;IACrD,MAAM,YAAY,GAAiB,EAAE,CAAC;IACtC,MAAM,UAAU,GAAuC,EAAE,CAAC;IAC1D,IAAI,GAAG,CAAC,UAAU,EAAE,CAAC;QACnB,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC;YAC9C,oDAAoD;YACpD,IACE,CAAC,CACC,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC;gBACtB,GAAG,CAAC,UAAU,CAAC,WAAW,CAAC;gBAC3B,+BAAoB,CAAC,QAAQ,CAAC,GAAG,CAAC;gBAClC,6BAAkB,CAAC,QAAQ,CAAC,GAAU,CAAC;gBACvC,GAAG,KAAM,8BAAmB,CAAC,eAA0B,CACxD,EACD,CAAC;gBACD,UAAU,CAAC,GAAG,CAAC,GAAG,IAAA,8BAAkB,EAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;YAC5D,CAAC;QACH,CAAC;IACH,CAAC;IACD,OAAO,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;AACpC,CAAC;AAED,gIAAgI;AAChI,SAAS,WAAW,CAAC,cAAkC;IACrD,IAAI,cAAc,EAAE,CAAC;QACnB,IAAI,cAAc,GAAG,CAAC,IAAI,cAAc,GAAG,CAAC,EAAE,CAAC;YAC7C,OAAO,6BAAkB,CAAC,OAAO,CAAC;QACpC,CAAC;aAAM,IAAI,cAAc,IAAI,CAAC,IAAI,cAAc,GAAG,EAAE,EAAE,CAAC;YACtD,OAAO,6BAAkB,CAAC,WAAW,CAAC;QACxC,CAAC;aAAM,IAAI,cAAc,IAAI,EAAE,IAAI,cAAc,GAAG,EAAE,EAAE,CAAC;YACvD,OAAO,6BAAkB,CAAC,OAAO,CAAC;QACpC,CAAC;aAAM,IAAI,cAAc,IAAI,EAAE,IAAI,cAAc,GAAG,EAAE,EAAE,CAAC;YACvD,OAAO,6BAAkB,CAAC,KAAK,CAAC;QAClC,CAAC;aAAM,IAAI,cAAc,IAAI,EAAE,IAAI,cAAc,GAAG,EAAE,EAAE,CAAC;YACvD,OAAO,6BAAkB,CAAC,QAAQ,CAAC;QACrC,CAAC;IACH,CAAC;IACD,OAAO;AACT,CAAC;AAED,SAAS,gCAAgC,CAAC,GAAsB;IAC9D,IAAI,IAAI,GAAG,EAAE,CAAC;IACd,QAAQ,GAAG,CAAC,UAAU,CAAC,oDAA2B,CAAC,EAAE,CAAC;QACpD,KAAK,gEAAuC;YAC1C,IAAI,GAAG,4DAAmC,CAAC;YAC3C,MAAM;QACR,KAAK,6DAAoC;YACvC,IAAI,GAAG,yDAAgC,CAAC;YACxC,MAAM;QACR,KAAK,2DAAkC;YACrC,IAAI,GAAG,uDAA8B,CAAC;YACtC,MAAM;QACR,KAAK,4DAAmC;YACtC,IAAI,GAAG,wDAA+B,CAAC;YACvC,MAAM;QACR,KAAK,yDAAgC;YACnC,IAAI,GAAG,qDAA4B,CAAC;YACpC,MAAM;IACV,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,wCAAwC,CAAC,GAAsB;;IACtE,IAAI,YAAY,GAAiB,EAAE,CAAC;IACpC,IAAI,MAAC,GAAG,CAAC,IAAsB,0CAAE,YAAY,EAAE,CAAC;QAC9C,YAAY,qBAAS,GAAG,CAAC,IAAsB,CAAC,YAAY,CAAE,CAAC;IACjE,CAAC;IACD,OAAO,YAAY,CAAC;AACtB,CAAC;AAED,SAAS,oCAAoC,CAAC,GAAsB;IAClE,IAAI,QAAQ,GAAkB;QAC5B,OAAO,EAAE,CAAC;KACX,CAAC;IACF,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC;QACb,IAAI,CAAC;YACH,QAAQ,GAAG,CAAC,UAAU,CAAC,oDAA2B,CAAC,EAAE,CAAC;gBACpD,KAAK,gEAAuC;oBAC1C,QAAQ,GAAG,GAAG,CAAC,IAAwB,CAAC;oBACxC,MAAM;gBACR,KAAK,6DAAoC;oBACvC,QAAQ,GAAG,GAAG,CAAC,IAA8B,CAAC;oBAC9C,MAAM;gBACR,KAAK,2DAAkC;oBACrC,QAAQ,GAAG,GAAG,CAAC,IAAmB,CAAC;oBACnC,MAAM;gBACR,KAAK,4DAAmC;oBACtC,QAAQ,GAAG,GAAG,CAAC,IAAoB,CAAC;oBACpC,MAAM;gBACR,KAAK,yDAAgC;oBACnC,QAAQ,GAAG,GAAG,CAAC,IAA0B,CAAC;oBAC1C,MAAM;YACV,CAAC;YACD,IAAI,OAAO,CAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,OAAO,CAAA,KAAK,QAAQ,EAAE,CAAC;gBAC1C,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YACtD,CAAC;QACH,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,UAAI,CAAC,KAAK,CAAC,wEAAwE,CAAC,CAAC;QACvF,CAAC;IACH,CAAC;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  AvailabilityData,\n  TelemetryItem as Envelope,\n  MessageData,\n  MonitorDomain,\n  PageViewData,\n  TelemetryEventData,\n  TelemetryExceptionData,\n  TelemetryExceptionDetails,\n} from \"../generated/index.js\";\nimport { KnownContextTagKeys, KnownSeverityLevel } from \"../generated/index.js\";\nimport {\n  createTagsFromResource,\n  hrTimeToDate,\n  isSyntheticSource,\n  serializeAttribute,\n} from \"./common.js\";\nimport type { ReadableLogRecord } from \"@opentelemetry/sdk-logs\";\nimport {\n  ATTR_EXCEPTION_MESSAGE,\n  ATTR_EXCEPTION_STACKTRACE,\n  ATTR_EXCEPTION_TYPE,\n} from \"@opentelemetry/semantic-conventions\";\nimport type { Measurements, Properties, Tags } from \"../types.js\";\nimport { httpSemanticValues, legacySemanticValues, MaxPropertyLengths } from \"../types.js\";\nimport type { Attributes } from \"@opentelemetry/api\";\nimport { diag } from \"@opentelemetry/api\";\nimport {\n  ApplicationInsightsAvailabilityBaseType,\n  ApplicationInsightsAvailabilityName,\n  ApplicationInsightsBaseType,\n  ApplicationInsightsCustomEventName,\n  ApplicationInsightsEventBaseType,\n  ApplicationInsightsEventName,\n  ApplicationInsightsExceptionBaseType,\n  ApplicationInsightsExceptionName,\n  ApplicationInsightsMessageBaseType,\n  ApplicationInsightsMessageName,\n  ApplicationInsightsPageViewBaseType,\n  ApplicationInsightsPageViewName,\n} from \"./constants/applicationinsights.js\";\nimport { getLocationIp } from \"./spanUtils.js\";\n\n/**\n * Log to Azure envelope parsing.\n * @internal\n */\nexport function logToEnvelope(log: ReadableLogRecord, ikey: string): Envelope | undefined {\n  const time = hrTimeToDate(log.hrTime);\n  const sampleRate = 100;\n  const instrumentationKey = ikey;\n  const tags = createTagsFromLog(log);\n  // eslint-disable-next-line prefer-const\n  let [properties, measurements] = createPropertiesFromLog(log);\n  let name: string;\n  let baseType: string;\n  let baseData: MonitorDomain;\n\n  const exceptionStacktrace = log.attributes[ATTR_EXCEPTION_STACKTRACE];\n  const exceptionType = log.attributes[ATTR_EXCEPTION_TYPE];\n  const isExceptionType: boolean = !!(exceptionType && exceptionStacktrace) || false;\n  const isMessageType: boolean =\n    !log.attributes[ApplicationInsightsBaseType] &&\n    !log.attributes[ApplicationInsightsCustomEventName] &&\n    !exceptionType;\n  if (isExceptionType) {\n    const exceptionMessage = log.attributes[ATTR_EXCEPTION_MESSAGE];\n    name = ApplicationInsightsExceptionName;\n    baseType = ApplicationInsightsExceptionBaseType;\n    const exceptionDetails: TelemetryExceptionDetails = {\n      typeName: String(exceptionType),\n      message: String(exceptionMessage),\n      hasFullStack: exceptionStacktrace ? true : false,\n      stack: String(exceptionStacktrace),\n    };\n    const exceptionData: TelemetryExceptionData = {\n      exceptions: [exceptionDetails],\n      severityLevel: String(getSeverity(log.severityNumber)),\n      version: 2,\n    };\n    baseData = exceptionData;\n  } else if (log.attributes[ApplicationInsightsCustomEventName]) {\n    name = ApplicationInsightsEventName;\n    baseType = ApplicationInsightsEventBaseType;\n    const eventData: TelemetryEventData = {\n      name: String(log.attributes[ApplicationInsightsCustomEventName]),\n      version: 2,\n    };\n    baseData = eventData;\n    measurements = getLegacyApplicationInsightsMeasurements(log);\n  } else if (isMessageType) {\n    name = ApplicationInsightsMessageName;\n    baseType = ApplicationInsightsMessageBaseType;\n    const messageData: MessageData = {\n      message: String(log.body),\n      severityLevel: String(getSeverity(log.severityNumber)),\n      version: 2,\n    };\n    baseData = messageData;\n  } else {\n    // If Legacy Application Insights Log\n    baseType = String(log.attributes[ApplicationInsightsBaseType]);\n    name = getLegacyApplicationInsightsName(log);\n    baseData = getLegacyApplicationInsightsBaseData(log);\n    measurements = getLegacyApplicationInsightsMeasurements(log);\n    if (!baseData) {\n      // Failed to parse log\n      return;\n    }\n  }\n  // Truncate properties\n  if (baseData.message) {\n    baseData.message = String(baseData.message).substring(0, MaxPropertyLengths.FIFTEEN_BIT);\n  }\n  if (properties) {\n    for (const key of Object.keys(properties)) {\n      properties[key] = String(properties[key]).substring(0, MaxPropertyLengths.THIRTEEN_BIT);\n    }\n  }\n  return {\n    name,\n    sampleRate,\n    time,\n    instrumentationKey,\n    tags,\n    version: 1,\n    data: {\n      baseType,\n      baseData: {\n        ...baseData,\n        properties,\n        measurements,\n      },\n    },\n  };\n}\n\nfunction createTagsFromLog(log: ReadableLogRecord): Tags {\n  const tags: Tags = createTagsFromResource(log.resource);\n  if (log.spanContext?.traceId) {\n    tags[KnownContextTagKeys.AiOperationId] = log.spanContext.traceId;\n  }\n  if (log.spanContext?.spanId) {\n    tags[KnownContextTagKeys.AiOperationParentId] = log.spanContext.spanId;\n  }\n  if (log.attributes[KnownContextTagKeys.AiOperationName]) {\n    tags[KnownContextTagKeys.AiOperationName] = log.attributes[\n      KnownContextTagKeys.AiOperationName\n    ] as string;\n  }\n  if (isSyntheticSource(log.attributes as Attributes)) {\n    tags[KnownContextTagKeys.AiOperationSyntheticSource] = \"True\";\n  }\n  getLocationIp(tags, log.attributes as Attributes);\n  return tags;\n}\n\nfunction createPropertiesFromLog(log: ReadableLogRecord): [Properties, Measurements] {\n  const measurements: Measurements = {};\n  const properties: { [propertyName: string]: string } = {};\n  if (log.attributes) {\n    for (const key of Object.keys(log.attributes)) {\n      // Avoid duplication ignoring fields already mapped.\n      if (\n        !(\n          key.startsWith(\"_MS.\") ||\n          key.startsWith(\"microsoft\") ||\n          legacySemanticValues.includes(key) ||\n          httpSemanticValues.includes(key as any) ||\n          key === (KnownContextTagKeys.AiOperationName as string)\n        )\n      ) {\n        properties[key] = serializeAttribute(log.attributes[key]);\n      }\n    }\n  }\n  return [properties, measurements];\n}\n\n// https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/logs/data-model.md#field-severitynumber\nfunction getSeverity(severityNumber: number | undefined): KnownSeverityLevel | undefined {\n  if (severityNumber) {\n    if (severityNumber > 0 && severityNumber < 9) {\n      return KnownSeverityLevel.Verbose;\n    } else if (severityNumber >= 9 && severityNumber < 13) {\n      return KnownSeverityLevel.Information;\n    } else if (severityNumber >= 13 && severityNumber < 17) {\n      return KnownSeverityLevel.Warning;\n    } else if (severityNumber >= 17 && severityNumber < 21) {\n      return KnownSeverityLevel.Error;\n    } else if (severityNumber >= 21 && severityNumber < 25) {\n      return KnownSeverityLevel.Critical;\n    }\n  }\n  return;\n}\n\nfunction getLegacyApplicationInsightsName(log: ReadableLogRecord): string {\n  let name = \"\";\n  switch (log.attributes[ApplicationInsightsBaseType]) {\n    case ApplicationInsightsAvailabilityBaseType:\n      name = ApplicationInsightsAvailabilityName;\n      break;\n    case ApplicationInsightsExceptionBaseType:\n      name = ApplicationInsightsExceptionName;\n      break;\n    case ApplicationInsightsMessageBaseType:\n      name = ApplicationInsightsMessageName;\n      break;\n    case ApplicationInsightsPageViewBaseType:\n      name = ApplicationInsightsPageViewName;\n      break;\n    case ApplicationInsightsEventBaseType:\n      name = ApplicationInsightsEventName;\n      break;\n  }\n  return name;\n}\n\nfunction getLegacyApplicationInsightsMeasurements(log: ReadableLogRecord): Measurements {\n  let measurements: Measurements = {};\n  if ((log.body as MonitorDomain)?.measurements) {\n    measurements = { ...(log.body as MonitorDomain).measurements };\n  }\n  return measurements;\n}\n\nfunction getLegacyApplicationInsightsBaseData(log: ReadableLogRecord): MonitorDomain {\n  let baseData: MonitorDomain = {\n    version: 2,\n  };\n  if (log.body) {\n    try {\n      switch (log.attributes[ApplicationInsightsBaseType]) {\n        case ApplicationInsightsAvailabilityBaseType:\n          baseData = log.body as AvailabilityData;\n          break;\n        case ApplicationInsightsExceptionBaseType:\n          baseData = log.body as TelemetryExceptionData;\n          break;\n        case ApplicationInsightsMessageBaseType:\n          baseData = log.body as MessageData;\n          break;\n        case ApplicationInsightsPageViewBaseType:\n          baseData = log.body as PageViewData;\n          break;\n        case ApplicationInsightsEventBaseType:\n          baseData = log.body as TelemetryEventData;\n          break;\n      }\n      if (typeof baseData?.message === \"object\") {\n        baseData.message = JSON.stringify(baseData.message);\n      }\n    } catch (err) {\n      diag.error(\"AzureMonitorLogExporter failed to parse Application Insights Telemetry\");\n    }\n  }\n  return baseData;\n}\n"]}