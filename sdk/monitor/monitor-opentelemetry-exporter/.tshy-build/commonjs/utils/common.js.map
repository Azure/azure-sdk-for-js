{"version":3,"file":"common.js","sourceRoot":"","sources":["../../../src/utils/common.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport os from \"node:os\";\nimport {\n  SEMRESATTRS_DEVICE_ID,\n  SEMRESATTRS_DEVICE_MODEL_NAME,\n  SEMRESATTRS_SERVICE_VERSION,\n  SEMRESATTRS_K8S_POD_NAME,\n  SEMRESATTRS_SERVICE_INSTANCE_ID,\n  DBSYSTEMVALUES_DB2,\n  DBSYSTEMVALUES_DERBY,\n  DBSYSTEMVALUES_MARIADB,\n  DBSYSTEMVALUES_MSSQL,\n  DBSYSTEMVALUES_ORACLE,\n  DBSYSTEMVALUES_SQLITE,\n  DBSYSTEMVALUES_OTHER_SQL,\n  DBSYSTEMVALUES_HSQLDB,\n  SEMATTRS_PEER_SERVICE,\n  SEMRESATTRS_SERVICE_NAME,\n  SEMRESATTRS_SERVICE_NAMESPACE,\n  SEMRESATTRS_K8S_DEPLOYMENT_NAME,\n  SEMRESATTRS_K8S_REPLICASET_NAME,\n  SEMRESATTRS_K8S_STATEFULSET_NAME,\n  SEMRESATTRS_K8S_JOB_NAME,\n  SEMRESATTRS_K8S_CRONJOB_NAME,\n  SEMRESATTRS_K8S_DAEMONSET_NAME,\n  ATTR_TELEMETRY_SDK_VERSION,\n  ATTR_TELEMETRY_SDK_LANGUAGE,\n  ATTR_TELEMETRY_SDK_NAME,\n  DBSYSTEMVALUES_H2,\n} from \"@opentelemetry/semantic-conventions\";\nimport { experimentalOpenTelemetryValues, type Tags } from \"../types.js\";\nimport { getInstance } from \"../platform/index.js\";\nimport type { TelemetryItem as Envelope, MetricsData } from \"../generated/index.js\";\nimport { KnownContextTagKeys } from \"../generated/index.js\";\nimport type { Resource } from \"@opentelemetry/resources\";\nimport type { Attributes, HrTime } from \"@opentelemetry/api\";\nimport { hrTimeToNanoseconds } from \"@opentelemetry/core\";\nimport type { AnyValue } from \"@opentelemetry/api-logs\";\nimport { ENV_OPENTELEMETRY_RESOURCE_METRIC_DISABLED } from \"../Declarations/Constants.js\";\nimport {\n  getHttpHost,\n  getHttpMethod,\n  getHttpScheme,\n  getHttpTarget,\n  getHttpUrl,\n  getNetPeerName,\n  getNetPeerPort,\n  getPeerIp,\n} from \"./spanUtils.js\";\n\nexport function hrTimeToDate(hrTime: HrTime): Date {\n  return new Date(hrTimeToNanoseconds(hrTime) / 1000000);\n}\n\nexport function createTagsFromResource(resource: Resource): Tags {\n  const context = getInstance();\n  const tags: Tags = { ...context.tags };\n  if (resource && resource.attributes) {\n    tags[KnownContextTagKeys.AiCloudRole] = getCloudRole(resource);\n    tags[KnownContextTagKeys.AiCloudRoleInstance] = getCloudRoleInstance(resource);\n    if (resource.attributes[SEMRESATTRS_DEVICE_ID]) {\n      tags[KnownContextTagKeys.AiDeviceId] = String(resource.attributes[SEMRESATTRS_DEVICE_ID]);\n    }\n    if (resource.attributes[SEMRESATTRS_DEVICE_MODEL_NAME]) {\n      tags[KnownContextTagKeys.AiDeviceModel] = String(\n        resource.attributes[SEMRESATTRS_DEVICE_MODEL_NAME],\n      );\n    }\n    if (resource.attributes[SEMRESATTRS_SERVICE_VERSION]) {\n      tags[KnownContextTagKeys.AiApplicationVer] = String(\n        resource.attributes[SEMRESATTRS_SERVICE_VERSION],\n      );\n    }\n  }\n  return tags;\n}\n\nfunction getCloudRole(resource: Resource): string {\n  let cloudRole = \"\";\n  // Service attributes\n  const serviceName = resource.attributes[SEMRESATTRS_SERVICE_NAME];\n  const serviceNamespace = resource.attributes[SEMRESATTRS_SERVICE_NAMESPACE];\n  if (serviceName) {\n    // Custom Service name provided by customer is highest precedence\n    if (!String(serviceName).startsWith(\"unknown_service\")) {\n      if (serviceNamespace) {\n        return `${serviceNamespace}.${serviceName}`;\n      } else {\n        return String(serviceName);\n      }\n    } else {\n      // Service attributes will be only used if K8S attributes are not present\n      if (serviceNamespace) {\n        cloudRole = `${serviceNamespace}.${serviceName}`;\n      } else {\n        cloudRole = String(serviceName);\n      }\n    }\n  }\n  // Kubernetes attributes should take precedence\n  const kubernetesDeploymentName = resource.attributes[SEMRESATTRS_K8S_DEPLOYMENT_NAME];\n  if (kubernetesDeploymentName) {\n    return String(kubernetesDeploymentName);\n  }\n  const kuberneteReplicasetName = resource.attributes[SEMRESATTRS_K8S_REPLICASET_NAME];\n  if (kuberneteReplicasetName) {\n    return String(kuberneteReplicasetName);\n  }\n  const kubernetesStatefulSetName = resource.attributes[SEMRESATTRS_K8S_STATEFULSET_NAME];\n  if (kubernetesStatefulSetName) {\n    return String(kubernetesStatefulSetName);\n  }\n  const kubernetesJobName = resource.attributes[SEMRESATTRS_K8S_JOB_NAME];\n  if (kubernetesJobName) {\n    return String(kubernetesJobName);\n  }\n  const kubernetesCronjobName = resource.attributes[SEMRESATTRS_K8S_CRONJOB_NAME];\n  if (kubernetesCronjobName) {\n    return String(kubernetesCronjobName);\n  }\n  const kubernetesDaemonsetName = resource.attributes[SEMRESATTRS_K8S_DAEMONSET_NAME];\n  if (kubernetesDaemonsetName) {\n    return String(kubernetesDaemonsetName);\n  }\n  return cloudRole;\n}\n\nfunction getCloudRoleInstance(resource: Resource): string {\n  // Kubernetes attributes should take precedence\n  const kubernetesPodName = resource.attributes[SEMRESATTRS_K8S_POD_NAME];\n  if (kubernetesPodName) {\n    return String(kubernetesPodName);\n  }\n  // Service attributes\n  const serviceInstanceId = resource.attributes[SEMRESATTRS_SERVICE_INSTANCE_ID];\n  if (serviceInstanceId) {\n    return String(serviceInstanceId);\n  }\n  // Default\n  return os && os.hostname();\n}\n\nexport function isSqlDB(dbSystem: string): boolean {\n  return (\n    dbSystem === DBSYSTEMVALUES_DB2 ||\n    dbSystem === DBSYSTEMVALUES_DERBY ||\n    dbSystem === DBSYSTEMVALUES_MARIADB ||\n    dbSystem === DBSYSTEMVALUES_MSSQL ||\n    dbSystem === DBSYSTEMVALUES_ORACLE ||\n    dbSystem === DBSYSTEMVALUES_SQLITE ||\n    dbSystem === DBSYSTEMVALUES_OTHER_SQL ||\n    dbSystem === DBSYSTEMVALUES_HSQLDB ||\n    dbSystem === DBSYSTEMVALUES_H2\n  );\n}\n\nexport function getUrl(attributes: Attributes): string {\n  if (!attributes) {\n    return \"\";\n  }\n  const httpMethod = getHttpMethod(attributes);\n  if (httpMethod) {\n    const httpUrl = getHttpUrl(attributes);\n    if (httpUrl) {\n      return String(httpUrl);\n    } else {\n      const httpScheme = getHttpScheme(attributes);\n      const httpTarget = getHttpTarget(attributes);\n      if (httpScheme && httpTarget) {\n        const httpHost = getHttpHost(attributes);\n        if (httpHost) {\n          return `${httpScheme}://${httpHost}${httpTarget}`;\n        } else {\n          const netPeerPort = getNetPeerPort(attributes);\n          if (netPeerPort) {\n            const netPeerName = getNetPeerName(attributes);\n            if (netPeerName) {\n              return `${httpScheme}://${netPeerName}:${netPeerPort}${httpTarget}`;\n            } else {\n              const netPeerIp = getPeerIp(attributes);\n              if (netPeerIp) {\n                return `${httpScheme}://${netPeerIp}:${netPeerPort}${httpTarget}`;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return \"\";\n}\n\nexport function getDependencyTarget(attributes: Attributes): string {\n  if (!attributes) {\n    return \"\";\n  }\n  const peerService = attributes[SEMATTRS_PEER_SERVICE];\n  const httpHost = getHttpHost(attributes);\n  const httpUrl = getHttpUrl(attributes);\n  const netPeerName = getNetPeerName(attributes);\n  const netPeerIp = getPeerIp(attributes);\n  if (peerService) {\n    return String(peerService);\n  } else if (httpHost) {\n    return String(httpHost);\n  } else if (httpUrl) {\n    return String(httpUrl);\n  } else if (netPeerName) {\n    return String(netPeerName);\n  } else if (netPeerIp) {\n    return String(netPeerIp);\n  }\n  return \"\";\n}\n\nexport function createResourceMetricEnvelope(\n  resource: Resource,\n  instrumentationKey: string,\n): Envelope | undefined {\n  if (resource && resource.attributes) {\n    const tags = createTagsFromResource(resource);\n    const resourceAttributes: { [propertyName: string]: string } = {};\n    for (const key of Object.keys(resource.attributes)) {\n      // Avoid duplication ignoring fields already mapped.\n      if (\n        !(\n          key.startsWith(\"_MS.\") ||\n          key === ATTR_TELEMETRY_SDK_VERSION ||\n          key === ATTR_TELEMETRY_SDK_LANGUAGE ||\n          key === ATTR_TELEMETRY_SDK_NAME\n        )\n      ) {\n        resourceAttributes[key] = resource.attributes[key] as string;\n      }\n    }\n    // Only send event when resource attributes are available\n    if (Object.keys(resourceAttributes).length > 0) {\n      const baseData: MetricsData = {\n        version: 2,\n        metrics: [{ name: \"_OTELRESOURCE_\", value: 1 }],\n        properties: resourceAttributes,\n      };\n      const envelope: Envelope = {\n        name: \"Microsoft.ApplicationInsights.Metric\",\n        time: new Date(),\n        sampleRate: 100, // Metrics are never sampled\n        instrumentationKey: instrumentationKey,\n        version: 1,\n        data: {\n          baseType: \"MetricData\",\n          baseData: baseData,\n        },\n        tags: tags,\n      };\n      return envelope;\n    }\n  }\n  return;\n}\n\nexport function serializeAttribute(value: AnyValue): string {\n  if (typeof value === \"object\") {\n    if (value instanceof Error) {\n      try {\n        return JSON.stringify(value, Object.getOwnPropertyNames(value));\n      } catch (err: unknown) {\n        // Failed to serialize, return string cast\n        return String(value);\n      }\n    } else if (value instanceof Uint8Array) {\n      return String(value);\n    } else {\n      try {\n        return JSON.stringify(value);\n      } catch (err: unknown) {\n        // Failed to serialize, return string cast\n        return String(value);\n      }\n    }\n  }\n  // Return scalar and undefined values\n  return String(value);\n}\n\nexport function shouldCreateResourceMetric(): boolean {\n  return !(process.env[ENV_OPENTELEMETRY_RESOURCE_METRIC_DISABLED]?.toLowerCase() === \"true\");\n}\n\nexport function isSyntheticSource(attributes: Attributes): boolean {\n  return !!attributes[experimentalOpenTelemetryValues.SYNTHETIC_TYPE];\n}\n"]}