{"version":3,"file":"metricUtils.js","sourceRoot":"","sources":["../../../src/utils/metricUtils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { Attributes } from \"@opentelemetry/api\";\nimport type {\n  DataPoint,\n  ExponentialHistogram,\n  Histogram,\n  ResourceMetrics,\n} from \"@opentelemetry/sdk-metrics\";\nimport { DataPointType } from \"@opentelemetry/sdk-metrics\";\nimport type {\n  TelemetryItem as Envelope,\n  MetricsData,\n  MetricDataPoint,\n} from \"../generated/index.js\";\nimport { createTagsFromResource } from \"./common.js\";\nimport { BreezePerformanceCounterNames, OTelPerformanceCounterNames, Tags } from \"../types.js\";\nimport {\n  ENV_OTEL_METRICS_EXPORTER,\n  ENV_OTLP_METRICS_ENDPOINT,\n  ENV_AZURE_MONITOR_AUTO_ATTACH,\n  ENV_APPLICATIONINSIGHTS_METRICS_TO_LOGANALYTICS_ENABLED,\n} from \"../Declarations/Constants.js\";\nimport { AttachTypeName, AZURE_MONITOR_AUTO_ATTACH } from \"../export/statsbeat/types.js\";\nimport { getInstance } from \"../platform/index.js\";\n\nconst breezePerformanceCountersMap = new Map<string, string>([\n  [OTelPerformanceCounterNames.PRIVATE_BYTES, BreezePerformanceCounterNames.PRIVATE_BYTES],\n  [OTelPerformanceCounterNames.AVAILABLE_BYTES, BreezePerformanceCounterNames.AVAILABLE_BYTES],\n  [OTelPerformanceCounterNames.PROCESSOR_TIME, BreezePerformanceCounterNames.PROCESSOR_TIME],\n  [\n    OTelPerformanceCounterNames.PROCESS_TIME_STANDARD,\n    BreezePerformanceCounterNames.PROCESS_TIME_STANDARD,\n  ],\n  [\n    OTelPerformanceCounterNames.PROCESS_TIME_NORMALIZED,\n    BreezePerformanceCounterNames.PROCESS_TIME_NORMALIZED,\n  ],\n  [OTelPerformanceCounterNames.REQUEST_RATE, BreezePerformanceCounterNames.REQUEST_RATE],\n  [OTelPerformanceCounterNames.REQUEST_DURATION, BreezePerformanceCounterNames.REQUEST_DURATION],\n  [OTelPerformanceCounterNames.EXCEPTION_RATE, BreezePerformanceCounterNames.EXCEPTION_RATE],\n]);\n\nfunction createPropertiesFromMetricAttributes(attributes?: Attributes): {\n  [propertyName: string]: string;\n} {\n  const properties: { [propertyName: string]: string } = {};\n  if (attributes) {\n    for (const key of Object.keys(attributes)) {\n      properties[key] = attributes[key] as string;\n    }\n  }\n  return properties;\n}\n\n/**\n * Metric to Azure envelope parsing.\n * @internal\n */\nexport function resourceMetricsToEnvelope(\n  metrics: ResourceMetrics,\n  ikey: string,\n  isStatsbeat?: boolean,\n): Envelope[] {\n  const envelopes: Envelope[] = [];\n  const time = new Date();\n  const instrumentationKey = ikey;\n  let tags: Tags;\n  let envelopeName: string;\n\n  if (isStatsbeat) {\n    envelopeName = \"Microsoft.ApplicationInsights.Statsbeat\";\n    const context = getInstance();\n    tags = { ...context.tags };\n  } else {\n    envelopeName = \"Microsoft.ApplicationInsights.Metric\";\n    tags = createTagsFromResource(metrics.resource);\n  }\n\n  metrics.scopeMetrics.forEach((scopeMetric) => {\n    scopeMetric.metrics.forEach((metric) => {\n      metric.dataPoints.forEach((dataPoint) => {\n        const baseData: MetricsData = {\n          metrics: [],\n          version: 2,\n          properties: {},\n        };\n        baseData.properties = createPropertiesFromMetricAttributes(dataPoint.attributes);\n\n        // If we're not exporting statsbeat, the metric is *not* a standard metric and the env var is set to false, we should not send the metric.\n        if (\n          shouldSendToOtlp() &&\n          isAksAttach() &&\n          !isStandardMetric(dataPoint) &&\n          process.env[ENV_APPLICATIONINSIGHTS_METRICS_TO_LOGANALYTICS_ENABLED] === \"false\" &&\n          !isStatsbeat\n        ) {\n          return;\n        }\n\n        if (shouldSendToOtlp() && isAksAttach() && !isStatsbeat) {\n          baseData.properties[\"_MS.SentToAMW\"] = \"True\";\n        } else if (isAksAttach() && !isStatsbeat) {\n          baseData.properties[\"_MS.SentToAMW\"] = \"False\";\n        }\n        let perfCounterName;\n        if (breezePerformanceCountersMap.has(metric.descriptor.name)) {\n          perfCounterName = breezePerformanceCountersMap.get(metric.descriptor.name);\n        }\n        const metricDataPoint: MetricDataPoint = {\n          name: perfCounterName ? perfCounterName : metric.descriptor.name,\n          value: 0,\n          dataPointType: \"Aggregation\",\n        };\n        if (\n          metric.dataPointType === DataPointType.SUM ||\n          metric.dataPointType === DataPointType.GAUGE\n        ) {\n          metricDataPoint.value = dataPoint.value as number;\n          metricDataPoint.count = 1;\n        } else {\n          metricDataPoint.value = (dataPoint.value as Histogram).sum || 0;\n          metricDataPoint.count = (dataPoint.value as Histogram).count;\n          metricDataPoint.max = (dataPoint.value as Histogram).max;\n          metricDataPoint.min = (dataPoint.value as Histogram).min;\n        }\n        baseData.metrics.push(metricDataPoint);\n        const envelope: Envelope = {\n          name: envelopeName,\n          time: time,\n          sampleRate: 100, // Metrics are never sampled\n          instrumentationKey: instrumentationKey,\n          tags: tags,\n          version: 1,\n          data: {\n            baseType: \"MetricData\",\n            baseData: {\n              ...baseData,\n            },\n          },\n        };\n        envelopes.push(envelope);\n      });\n    });\n  });\n\n  return envelopes;\n}\n\nexport function isAksAttach(): boolean {\n  return !!(\n    process.env[ENV_AZURE_MONITOR_AUTO_ATTACH] === \"true\" && process.env.AKS_ARM_NAMESPACE_ID\n  );\n}\n\nexport function shouldSendToOtlp(): boolean {\n  return !!(\n    process.env[ENV_OTLP_METRICS_ENDPOINT] &&\n    process.env[ENV_OTEL_METRICS_EXPORTER]?.includes(\"otlp\")\n  );\n}\n\nexport function isStandardMetric(\n  dataPoint: DataPoint<number> | DataPoint<Histogram> | DataPoint<ExponentialHistogram>,\n): boolean {\n  return dataPoint.attributes?.[\"_MS.IsAutocollected\"] === \"True\";\n}\n\nexport function getAttachType(): AttachTypeName {\n  if (process.env[AZURE_MONITOR_AUTO_ATTACH] === \"true\") {\n    return AttachTypeName.INTEGRATED_AUTO;\n  }\n  return AttachTypeName.MANUAL;\n}\n"]}