/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export type MonitorDomainUnion =
  | MonitorDomain
  | RemoteDependencyData
  | RequestData;

/**
 * System variables for a telemetry item.
 */
export interface TelemetryItem {
  /**
   * Envelope version. For internal use only. By assigning this the default, it will not be serialized within the payload unless changed to a value other than #1.
   */
  version?: number;
  /**
   * Type name of telemetry data item.
   */
  name: string;
  /**
   * Event date time when telemetry item was created. This is the wall clock time on the client when the event was generated. There is no guarantee that the client's time is accurate. This field must be formatted in UTC ISO 8601 format, with a trailing 'Z' character, as described publicly on https://en.wikipedia.org/wiki/ISO_8601#UTC. Note: the number of decimal seconds digits provided are variable (and unspecified). Consumers should handle this, i.e. managed code consumers should not use format 'O' for parsing as it specifies a fixed length. Example: 2009-06-15T13:45:30.0000000Z.
   */
  time: Date;
  /**
   * Sampling rate used in application. This telemetry item represents 1 / sampleRate actual telemetry items.
   */
  sampleRate?: number;
  /**
   * Sequence field used to track absolute order of uploaded events.
   */
  sequence?: string;
  /**
   * The instrumentation key of the Application Insights resource.
   */
  instrumentationKey?: string;
  /**
   * Key/value collection of context properties. See ContextTagKeys for information on available properties.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Telemetry data item.
   */
  data?: MonitorBase;
}

/**
 * Data struct to contain only C section with custom fields.
 */
export interface MonitorBase {
  /**
   * Name of item (B section) if any. If telemetry data is derived straight from this, this should be null.
   */
  baseType?: string;
  /**
   * The data payload for the telemetry request
   */
  baseData?: MonitorDomainUnion;
}

/**
 * The abstract common base of all domains.
 */
export interface MonitorDomain {
  /**
   * Polymorphic discriminator, which specifies the different types this object can be
   */
  typename: "RemoteDependencyData" | "RequestData";
  /**
   * Schema version
   */
  version: number;
}

/**
 * Response containing the status of each telemetry item.
 */
export interface TrackResponse {
  /**
   * The number of items received.
   */
  itemsReceived?: number;
  /**
   * The number of items accepted.
   */
  itemsAccepted?: number;
  /**
   * An array of error detail objects.
   */
  errors?: TelemetryErrorDetails[];
}

/**
 * The error details
 */
export interface TelemetryErrorDetails {
  /**
   * The index in the original payload of the item.
   */
  index?: number;
  /**
   * The item specific [HTTP Response status code](#Response Status Codes).
   */
  statusCode?: number;
  /**
   * The error message.
   */
  message?: string;
}

/**
 * An instance of Remote Dependency represents an interaction of the monitored component with a remote component/service like SQL or an HTTP endpoint.
 */
export type RemoteDependencyData = MonitorDomain & {
  /**
   * Identifier of a dependency call instance. Used for correlation with the request telemetry item corresponding to this dependency call.
   */
  id?: string;
  /**
   * Name of the command initiated with this dependency call. Low cardinality value. Examples are stored procedure name and URL path template.
   */
  name: string;
  /**
   * Result code of a dependency call. Examples are SQL error code and HTTP status code.
   */
  resultCode?: string;
  /**
   * Command initiated by this dependency call. Examples are SQL statement and HTTP URL with all query parameters.
   */
  data?: string;
  /**
   * Dependency type name. Very low cardinality value for logical grouping of dependencies and interpretation of other fields like commandName and resultCode. Examples are SQL, Azure table, and HTTP.
   */
  type?: string;
  /**
   * Target site of a dependency call. Examples are server name, host address.
   */
  target?: string;
  /**
   * Request duration in format: DD.HH:MM:SS.MMMMMM. Must be less than 1000 days.
   */
  duration: string;
  /**
   * Indication of successful or unsuccessful call.
   */
  success?: boolean;
  /**
   * Collection of custom properties.
   */
  properties?: { [propertyName: string]: string };
  /**
   * Collection of custom measurements.
   */
  measurements?: { [propertyName: string]: number };
};

/**
 * An instance of PageView represents a generic action on a page like a button click. It is also the base type for PageView.
 */
export type RequestData = MonitorDomain & {
  /**
   * Identifier of a request call instance. Used for correlation between request and other telemetry items.
   */
  id: string;
  /**
   * Name of the request. Represents code path taken to process request. Low cardinality value to allow better grouping of requests. For HTTP requests it represents the HTTP method and URL path template like 'GET /values/{id}'.
   */
  name?: string;
  /**
   * Request duration in format: DD.HH:MM:SS.MMMMMM. Must be less than 1000 days.
   */
  duration: string;
  /**
   * Indication of successful or unsuccessful call.
   */
  success: boolean;
  /**
   * Result of a request execution. HTTP status code for HTTP requests.
   */
  responseCode: string;
  /**
   * Source of the request. Examples are the instrumentation key of the caller or the ip address of the caller.
   */
  source?: string;
  /**
   * Request URL with all query string parameters.
   */
  url?: string;
  /**
   * Collection of custom properties.
   */
  properties?: { [propertyName: string]: string };
  /**
   * Collection of custom measurements.
   */
  measurements?: { [propertyName: string]: number };
};
/**
 * Defines values for ContextTagKeys.
 */
export type ContextTagKeys =
  | "ai.application.ver"
  | "ai.device.id"
  | "ai.device.locale"
  | "ai.device.model"
  | "ai.device.oemName"
  | "ai.device.osVersion"
  | "ai.device.type"
  | "ai.location.ip"
  | "ai.location.country"
  | "ai.location.province"
  | "ai.location.city"
  | "ai.operation.id"
  | "ai.operation.name"
  | "ai.operation.parentId"
  | "ai.operation.syntheticSource"
  | "ai.operation.correlationVector"
  | "ai.session.id"
  | "ai.session.isFirst"
  | "ai.user.accountId"
  | "ai.user.id"
  | "ai.user.authUserId"
  | "ai.cloud.role"
  | "ai.cloud.roleVer"
  | "ai.cloud.roleInstance"
  | "ai.cloud.location"
  | "ai.internal.sdkVersion"
  | "ai.internal.agentVersion"
  | "ai.internal.nodeName"
  | string;

/**
 * Contains response data for the track operation.
 */
export type ApplicationInsightsClientTrackResponse = TrackResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: TrackResponse;
  };
};

/**
 * Optional parameters.
 */
export interface ApplicationInsightsClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * Breeze endpoint: https://dc.services.visualstudio.com
   */
  host?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
