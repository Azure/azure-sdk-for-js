/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const TelemetryItem: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TelemetryItem",
    modelProperties: {
      version: {
        defaultValue: 1,
        serializedName: "ver",
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      time: {
        serializedName: "time",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      sampleRate: {
        defaultValue: 100,
        serializedName: "sampleRate",
        type: {
          name: "Number"
        }
      },
      sequence: {
        constraints: {
          MaxLength: 64
        },
        serializedName: "seq",
        type: {
          name: "String"
        }
      },
      instrumentationKey: {
        serializedName: "iKey",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      data: {
        serializedName: "data",
        type: {
          name: "Composite",
          className: "MonitorBase"
        }
      }
    }
  }
};

export const MonitorBase: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MonitorBase",
    modelProperties: {
      baseType: {
        serializedName: "baseType",
        type: {
          name: "String"
        }
      },
      baseData: {
        serializedName: "baseData",
        type: {
          name: "Composite",
          className: "MonitorDomain"
        }
      }
    }
  }
};

export const MonitorDomain: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MonitorDomain",
    uberParent: "MonitorDomain",
    polymorphicDiscriminator: {
      serializedName: "typename",
      clientName: "typename"
    },
    modelProperties: {
      version: {
        defaultValue: 2,
        serializedName: "ver",
        required: true,
        type: {
          name: "Number"
        }
      },
      typename: {
        serializedName: "typename",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackResponse",
    modelProperties: {
      itemsReceived: {
        serializedName: "itemsReceived",
        type: {
          name: "Number"
        }
      },
      itemsAccepted: {
        serializedName: "itemsAccepted",
        type: {
          name: "Number"
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "TelemetryErrorDetails" }
          }
        }
      }
    }
  }
};

export const TelemetryErrorDetails: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TelemetryErrorDetails",
    modelProperties: {
      index: {
        serializedName: "index",
        type: {
          name: "Number"
        }
      },
      statusCode: {
        serializedName: "statusCode",
        type: {
          name: "Number"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RemoteDependencyData: coreHttp.CompositeMapper = {
  serializedName: "RemoteDependencyData",
  type: {
    name: "Composite",
    className: "RemoteDependencyData",
    uberParent: "MonitorDomain",
    polymorphicDiscriminator: MonitorDomain.type.polymorphicDiscriminator,
    modelProperties: {
      ...MonitorDomain.type.modelProperties,
      id: {
        constraints: {
          MaxLength: 512
        },
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        constraints: {
          MaxLength: 1024
        },
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      resultCode: {
        constraints: {
          MaxLength: 1024
        },
        serializedName: "resultCode",
        type: {
          name: "String"
        }
      },
      data: {
        constraints: {
          MaxLength: 8192
        },
        serializedName: "data",
        type: {
          name: "String"
        }
      },
      type: {
        constraints: {
          MaxLength: 1024
        },
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      target: {
        constraints: {
          MaxLength: 1024
        },
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      duration: {
        serializedName: "duration",
        required: true,
        type: {
          name: "String"
        }
      },
      success: {
        defaultValue: true,
        serializedName: "success",
        type: {
          name: "Boolean"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, constraints: { MaxLength: 8192 } }
        }
      },
      measurements: {
        serializedName: "measurements",
        type: {
          name: "Dictionary",
          value: { type: { name: "Number" } }
        }
      }
    }
  }
};

export const RequestData: coreHttp.CompositeMapper = {
  serializedName: "RequestData",
  type: {
    name: "Composite",
    className: "RequestData",
    uberParent: "MonitorDomain",
    polymorphicDiscriminator: MonitorDomain.type.polymorphicDiscriminator,
    modelProperties: {
      ...MonitorDomain.type.modelProperties,
      id: {
        constraints: {
          MaxLength: 512
        },
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        constraints: {
          MaxLength: 1024
        },
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      duration: {
        serializedName: "duration",
        required: true,
        type: {
          name: "String"
        }
      },
      success: {
        defaultValue: true,
        serializedName: "success",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      responseCode: {
        constraints: {
          MaxLength: 1024
        },
        serializedName: "responseCode",
        required: true,
        type: {
          name: "String"
        }
      },
      source: {
        constraints: {
          MaxLength: 1024
        },
        serializedName: "source",
        type: {
          name: "String"
        }
      },
      url: {
        constraints: {
          MaxLength: 2048
        },
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" }, constraints: { MaxLength: 8192 } }
        }
      },
      measurements: {
        serializedName: "measurements",
        type: {
          name: "Dictionary",
          value: { type: { name: "Number" } }
        }
      }
    }
  }
};

export let discriminators = {
  MonitorDomain: MonitorDomain,
  "MonitorDomain.RemoteDependencyData": RemoteDependencyData,
  "MonitorDomain.RequestData": RequestData
};
