/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import { ApplicationInsightsClientContext } from "./applicationInsightsClientContext";
import {
  ApplicationInsightsClientOptionalParams,
  TelemetryItem,
  ApplicationInsightsClientTrackResponse
} from "./models";

export class ApplicationInsightsClient extends ApplicationInsightsClientContext {
  /**
   * Initializes a new instance of the ApplicationInsightsClient class.
   * @param options The parameter options
   */
  constructor(options?: ApplicationInsightsClientOptionalParams) {
    super(options);
  }

  /**
   * This operation generates a model using an entire series, each point is detected with the same model.
   * With this method, points before and after a certain point are used to determine whether it is an
   * anomaly. The entire detection can give user an overall status of the time series.
   * @param body Time series points and period if needed. Advanced model parameters can also be set in
   *             the request.
   * @param options The options parameters.
   */
  track(
    body: TelemetryItem[],
    options?: coreHttp.OperationOptions
  ): Promise<ApplicationInsightsClientTrackResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { body, options: operationOptions },
      trackOperationSpec
    ) as Promise<ApplicationInsightsClientTrackResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const trackOperationSpec: coreHttp.OperationSpec = {
  path: "/track",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.TrackResponse
    },
    206: {
      bodyMapper: Mappers.TrackResponse
    },
    400: {
      bodyMapper: Mappers.TrackResponse
    },
    402: {
      bodyMapper: Mappers.TrackResponse
    },
    429: {
      bodyMapper: Mappers.TrackResponse
    },
    500: {
      bodyMapper: Mappers.TrackResponse
    },
    503: {
      bodyMapper: Mappers.TrackResponse
    }
  },
  requestBody: Parameters.body,
  urlParameters: [Parameters.host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
