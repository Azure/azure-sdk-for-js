/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { ResourceIdList as ResourceIdListMapper } from "../models/mappers.js";
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const batchRequest = {
    parameterPath: "batchRequest",
    mapper: ResourceIdListMapper
};
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const endpoint = {
    parameterPath: "endpoint",
    mapper: {
        serializedName: "endpoint",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "Uuid"
        }
    }
};
export const starttime = {
    parameterPath: ["options", "starttime"],
    mapper: {
        serializedName: "starttime",
        type: {
            name: "String"
        }
    }
};
export const endtime = {
    parameterPath: ["options", "endtime"],
    mapper: {
        serializedName: "endtime",
        type: {
            name: "String"
        }
    }
};
export const interval = {
    parameterPath: ["options", "interval"],
    mapper: {
        defaultValue: "PT1M",
        serializedName: "interval",
        type: {
            name: "String"
        }
    }
};
export const metricnamespace = {
    parameterPath: "metricnamespace",
    mapper: {
        serializedName: "metricnamespace",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const metricnames = {
    parameterPath: "metricnames",
    mapper: {
        serializedName: "metricnames",
        required: true,
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    },
    collectionFormat: "CSV"
};
export const aggregation = {
    parameterPath: ["options", "aggregation"],
    mapper: {
        serializedName: "aggregation",
        type: {
            name: "String"
        }
    }
};
export const top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "top",
        type: {
            name: "Number"
        }
    }
};
export const orderby = {
    parameterPath: ["options", "orderby"],
    mapper: {
        serializedName: "orderby",
        type: {
            name: "String"
        }
    }
};
export const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "filter",
        type: {
            name: "String"
        }
    }
};
export const rollupby = {
    parameterPath: ["options", "rollupby"],
    mapper: {
        serializedName: "rollupby",
        type: {
            name: "String"
        }
    }
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        serializedName: "api-version",
        required: true,
        type: {
            name: "String"
        }
    }
};
//# sourceMappingURL=parameters.js.map