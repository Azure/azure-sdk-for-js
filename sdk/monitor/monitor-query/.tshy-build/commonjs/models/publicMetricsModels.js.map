{"version":3,"file":"publicMetricsModels.js","sourceRoot":"","sources":["../../../src/models/publicMetricsModels.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AA2HlC,0CAEC;AAED,4DAIC;AARD,SAAgB,eAAe,CAA2B,UAAkB;IAC1E,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC;AAC3D,CAAC;AAED,SAAgB,wBAAwB,CACtC,sBAAmE;IAEnE,uCAAY,sBAAsB,KAAE,eAAe,IAAG;AACxD,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { OperationOptions } from \"@azure/core-client\";\nimport type {\n  AggregationType,\n  MetricClass,\n  MetricUnit,\n  MetricValue,\n  NamespaceClassification,\n  ResultType,\n} from \"../index.js\";\nimport type { QueryTimeInterval } from \"./timeInterval.js\";\n\n/**\n * Options used when querying metrics.\n */\nexport interface MetricsQueryOptions extends OperationOptions {\n  /** The interval (i.e. timegrain) of the query. {@link Durations} helper contains aliases for some common ISO8601 durations.\n   * This is an ISO8601 duration value in the format P[n]Y[n]M[n]DT[n]H[n]M[n]S\n   *  where P is the duration designator (for period) placed at the start of the duration representation.\n   *   Y is the year designator that follows the value for the number of years.\n   *   M is the month designator that follows the value for the number of months.\n   *   W is the week designator that follows the value for the number of weeks.\n   *   D is the day designator that follows the value for the number of days.\n   *   T is the time designator that precedes the time components of the representation.\n   *   H is the hour designator that follows the value for the number of hours.\n   *   M is the minute designator that follows the value for the number of minutes.\n   *   S is the second designator that follows the value for the number of seconds.\n   */\n  granularity?: string;\n  /** The enclosing timespan for metrics. */\n  timespan?: QueryTimeInterval;\n  /** The list of aggregation types (comma separated) to retrieve. */\n  aggregations?: AggregationType[];\n  /**\n   * The maximum number of records to retrieve.\n   * Valid only if $filter is specified.\n   * Defaults to 10.\n   */\n  top?: number;\n  /**\n   * The aggregation to use for sorting results and the direction of the sort.\n   * Only one order can be specified.\n   * Examples: sum asc.\n   */\n  orderBy?: string;\n  /** The **$filter** is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**$filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**. */\n  filter?: string;\n  /** Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details. */\n  resultType?: ResultType;\n  /** Metric namespace to query metric definitions for. */\n  metricNamespace?: string;\n  /** When set to true, if the timespan passed in is not supported by this metric, the API will return the result using the closest supported timespan. When set to false, an error is returned for invalid timespan parameters. Defaults to false. */\n  autoAdjustTimegrain?: boolean;\n  /** When set to false, invalid filter parameter values will be ignored. When set to true, an error is returned for invalid filter parameters. Defaults to true. */\n  validateDimensions?: boolean;\n  /** Dimension name(s) to rollup results by. For example if you only want to see metric values with a filter like 'City eq Seattle or City eq Tacoma' but don't want to see separate values for each city, you can specify 'RollUpBy=City' to see the results for Seattle and Tacoma rolled up into one timeseries. */\n  rollUpBy?: string;\n}\n\n/** The result data of a query. */\nexport interface Metric {\n  /** the metric Id. */\n  id: string;\n  /** the resource type of the metric resource. */\n  type: string;\n  /** the name of the metric */\n  name: string;\n  /** Detailed description of this metric. */\n  description?: string;\n  /** 'Success' or the error details on query failures for this metric. */\n  errorCode?: string;\n  /** Error message encountered querying this specific metric. */\n  errorMessage?: string;\n  /** the unit of the metric. */\n  unit: MetricUnit;\n  /** the time series returned when a data query is performed. */\n  timeseries: TimeSeriesElement[];\n}\n\n/** Represents a metric metadata value. */\nexport interface MetadataValue {\n  /** the name of the metadata. */\n  name?: string;\n  /** the value of the metadata. */\n  value?: string;\n}\n\n/** A time series result type. The discriminator value is always TimeSeries in this case. */\nexport interface TimeSeriesElement {\n  // track 2 version of `TimeSeriesElement` from the `metrics` generated client.\n  // (only to fix the casing of `metadatavalues`)\n\n  /** the metadata values returned if $filter was specified in the call. */\n  metadataValues?: MetadataValue[];\n  /** An array of data points representing the metric values.  This is only returned if a result type of data is specified. */\n  data?: MetricValue[];\n}\n\n/**\n * Metrics, including additional information like cost, the resourceRegion, etc...\n */\nexport interface MetricsQueryResult {\n  // track 2 version of `MetricsListResponse`\n\n  /** The integer value representing the cost of the query, for data case. */\n  cost?: number;\n  /** The timespan for which the data was retrieved. Its value consists of two datetimes concatenated, separated by '/'.  This may be adjusted in the future and returned back from what was originally requested. */\n  timespan: QueryTimeInterval;\n  /** The interval (window size) for which the metric data was returned in.  This may be adjusted in the future and returned back from what was originally requested.  This is not present if a metadata request was made. */\n  granularity?: string;\n  /** The namespace of the metrics been queried */\n  namespace?: string;\n  /** The resource that has been queried for metrics. */\n  resourceId?: string;\n  /** The region of the resource been queried for metrics. */\n  resourceRegion?: string;\n  /** the value of the collection. */\n  metrics: Metric[];\n  /** convenience method to get metric by metric name */\n  getMetricByName(metricName: string): Metric | undefined;\n}\n\nexport function getMetricByName(this: MetricsQueryResult, metricName: string): Metric | undefined {\n  return this.metrics.find((it) => it.name === metricName);\n}\n\nexport function createMetricsQueryResult(\n  metricsQueryResultData: Omit<MetricsQueryResult, \"getMetricByName\">,\n): MetricsQueryResult {\n  return { ...metricsQueryResultData, getMetricByName };\n}\n\n/**\n * Options used when getting metric definitions.\n */\nexport interface ListMetricDefinitionsOptions extends OperationOptions {\n  // track 2 version of `MetricDefinitionsListOptionalParams`\n\n  /** Metric namespace to query metric definitions for. */\n  metricNamespace?: string;\n}\n\n/**\n * Options used when getting metric namespaces.\n */\nexport interface ListMetricNamespacesOptions extends OperationOptions {\n  // track 2 copy of `MetricNamespacesListOptionalParams`\n\n  /** The ISO 8601 conform Date start time from which to query for metric namespaces. */\n  startTime?: string;\n}\n\n/** Metric namespace class specifies the metadata for a metric namespace. */\nexport interface MetricNamespace {\n  /** The ID of the metric namespace. */\n  id?: string;\n  /** The type of the namespace. */\n  type?: string;\n  /** The escaped name of the namespace. */\n  name?: string;\n  /** Kind of namespace */\n  classification?: NamespaceClassification;\n  /** The metric namespace name. */\n  metricNamespaceName?: string;\n}\n\n/** Metric definition class specifies the metadata for a metric. */\nexport interface MetricDefinition {\n  /** Flag to indicate whether the dimension is required. */\n  isDimensionRequired?: boolean;\n  /** the resource identifier of the resource that emitted the metric. */\n  resourceId?: string;\n  /** the namespace the metric belongs to. */\n  namespace?: string;\n  /** the name and the display name of the metric, i.e. it is a localizable string. */\n  name?: string;\n  /** Detailed description of this metric. */\n  description?: string;\n  /** Custom category name for this metric. */\n  category?: string;\n  /** The class of the metric. */\n  metricClass?: MetricClass;\n  /** The unit of the metric. */\n  unit?: MetricUnit;\n  /** the primary aggregation type value defining how to use the values for display. */\n  primaryAggregationType?: AggregationType;\n  /** the collection of what aggregation types are supported. */\n  supportedAggregationTypes?: AggregationType[];\n  /** the collection of what aggregation intervals are available to be queried. */\n  metricAvailabilities?: MetricAvailability[];\n  /** the resource identifier of the metric definition. */\n  id?: string;\n  /** the name and the display name of the dimension, i.e. it is a localizable string. */\n  dimensions?: string[];\n}\n\n/** Metric availability specifies the time grain (aggregation interval or frequency) and the retention period for that time grain. */\nexport interface MetricAvailability {\n  /** the time grain specifies the aggregation interval for the metric. Expressed as a duration 'PT1M', 'P1D', etc. */\n  granularity?: string;\n  /** the retention period for the metric at the specified granularity.  Expressed as a duration 'PT1M', 'P1D', etc. */\n  retention?: string;\n}\n"]}