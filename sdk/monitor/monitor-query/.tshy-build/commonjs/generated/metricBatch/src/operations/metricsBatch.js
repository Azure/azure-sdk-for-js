"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricsBatchImpl = void 0;
const tslib_1 = require("tslib");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
/** Class containing MetricsBatch operations. */
class MetricsBatchImpl {
    /**
     * Initialize a new instance of the class MetricsBatch class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the metric values for multiple resources.
     * @param subscriptionId The subscription identifier for the resources in this batch.
     * @param metricnamespace Metric namespace that contains the requested metric names.
     * @param metricnames The names of the metrics (comma separated) to retrieve.
     * @param batchRequest Metrics batch body including the list of resource ids
     * @param options The options parameters.
     */
    batch(subscriptionId, metricnamespace, metricnames, batchRequest, options) {
        return this.client.sendOperationRequest({ subscriptionId, metricnamespace, metricnames, batchRequest, options }, batchOperationSpec);
    }
}
exports.MetricsBatchImpl = MetricsBatchImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const batchOperationSpec = {
    path: "/subscriptions/{subscriptionId}/metrics:getBatch",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.MetricResultsResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponse,
            headersMapper: Mappers.MetricsBatchBatchExceptionHeaders
        }
    },
    requestBody: Parameters.batchRequest,
    queryParameters: [
        Parameters.starttime,
        Parameters.endtime,
        Parameters.interval,
        Parameters.metricnamespace,
        Parameters.metricnames,
        Parameters.aggregation,
        Parameters.top,
        Parameters.orderby,
        Parameters.filter,
        Parameters.rollupby,
        Parameters.apiVersion
    ],
    urlParameters: [Parameters.endpoint, Parameters.subscriptionId],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
//# sourceMappingURL=metricsBatch.js.map