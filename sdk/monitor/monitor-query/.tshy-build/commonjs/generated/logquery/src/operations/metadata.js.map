{"version":3,"file":"metadata.js","sourceRoot":"","sources":["../../../../../../src/generated/logquery/src/operations/metadata.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;;AAGH,uEAAiD;AACjD,sEAAgD;AAChD,4EAAsD;AAStD,4CAA4C;AAC5C,MAAa,YAAY;IAGvB;;;OAGG;IACH,YAAY,MAAgC;QAC1C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;;;;OAMG;IACH,GAAG,CACD,WAAmB,EACnB,OAAmC;QAEnC,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,WAAW,EAAE,OAAO,EAAE,EACxB,gBAAgB,CACjB,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACH,IAAI,CACF,WAAmB,EACnB,OAAoC;QAEpC,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,WAAW,EAAE,OAAO,EAAE,EACxB,iBAAiB,CAClB,CAAC;IACJ,CAAC;CACF;AA5CD,oCA4CC;AACD,2BAA2B;AAC3B,MAAM,UAAU,GAAG,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;AAE3E,MAAM,gBAAgB,GAA6B;IACjD,IAAI,EAAE,oCAAoC;IAC1C,UAAU,EAAE,KAAK;IACjB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,eAAe;SACpC;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,aAAa;SAClC;KACF;IACD,aAAa,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,UAAU,CAAC,WAAW,CAAC;IACzD,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;IACrC,UAAU;CACX,CAAC;AACF,MAAM,iBAAiB,GAA6B;IAClD,IAAI,EAAE,oCAAoC;IAC1C,UAAU,EAAE,MAAM;IAClB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,eAAe;SACpC;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,aAAa;SAClC;KACF;IACD,aAAa,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,UAAU,CAAC,WAAW,CAAC;IACzD,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;IACrC,UAAU;CACX,CAAC","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { Metadata } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { AzureLogAnalyticsContext } from \"../azureLogAnalyticsContext.js\";\nimport {\n  MetadataGetOptionalParams,\n  MetadataGetResponse,\n  MetadataPostOptionalParams,\n  MetadataPostResponse\n} from \"../models/index.js\";\n\n/** Class containing Metadata operations. */\nexport class MetadataImpl implements Metadata {\n  private readonly client: AzureLogAnalyticsContext;\n\n  /**\n   * Initialize a new instance of the class Metadata class.\n   * @param client Reference to the service client\n   */\n  constructor(client: AzureLogAnalyticsContext) {\n    this.client = client;\n  }\n\n  /**\n   * Retrieve the metadata information for the workspace, including its schema, functions, workspace\n   * info, categories etc.\n   * @param workspaceId Primary Workspace ID of the query. This is the Workspace ID from the Properties\n   *                    blade in the Azure portal.\n   * @param options The options parameters.\n   */\n  get(\n    workspaceId: string,\n    options?: MetadataGetOptionalParams\n  ): Promise<MetadataGetResponse> {\n    return this.client.sendOperationRequest(\n      { workspaceId, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Retrieve the metadata information for the workspace, including its schema, functions, workspace\n   * info, categories etc.\n   * @param workspaceId Primary Workspace ID of the query. This is the Workspace ID from the Properties\n   *                    blade in the Azure portal.\n   * @param options The options parameters.\n   */\n  post(\n    workspaceId: string,\n    options?: MetadataPostOptionalParams\n  ): Promise<MetadataPostResponse> {\n    return this.client.sendOperationRequest(\n      { workspaceId, options },\n      postOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/workspaces/{workspaceId}/metadata\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MetadataResults\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  urlParameters: [Parameters.$host, Parameters.workspaceId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst postOperationSpec: coreClient.OperationSpec = {\n  path: \"/workspaces/{workspaceId}/metadata\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MetadataResults\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  urlParameters: [Parameters.$host, Parameters.workspaceId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n"]}