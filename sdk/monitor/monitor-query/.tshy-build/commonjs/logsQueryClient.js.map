{"version":3,"file":"logsQueryClient.js","sourceRoot":"","sources":["../../src/logsQueryClient.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAElC,wFAAkF;AAYlF,sEAAqE;AAErE,sEAKuC;AACvC,gDAAwD;AAOxD,mEAAoE;AACpE,iDAA4E;AAC5E,6CAA6C;AAC7C,8EAAwE;AAkBxE;;GAEG;AACH,MAAa,eAAe;IAG1B;;;;;OAKG;IACH,YAAY,eAAgC,EAAE,OAAgC;QAC5E,MAAM,KAAK,GAAW,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ;YACrC,CAAC,CAAC,GAAG,OAAO,CAAC,QAAQ,WAAW;YAChC,CAAC,CAAC,GAAG,4CAA6B,CAAC,gBAAgB,WAAW,CAAC;QAEjE,IAAI,QAAQ,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,CAAC;QACjC,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,EAAE,CAAC;YACtB,QAAQ,GAAG,IAAA,4CAAmB,EAAC,OAAO,CAAC,CAAC;QAC1C,CAAC;QACD,MAAM,cAAc,GAAG,0BAA0B,0BAAW,EAAE,CAAC;QAC/D,MAAM,eAAe,GACnB,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,gBAAgB,MAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,gBAAgB,CAAC,eAAe,CAAA;YACpE,CAAC,CAAC,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,gBAAgB,CAAC,eAAe,IAAI,cAAc,EAAE;YAClE,CAAC,CAAC,GAAG,cAAc,EAAE,CAAC;QAC1B,IAAI,CAAC,aAAa,GAAG,IAAI,wCAAiB,iCACrC,OAAO,KACV,KAAK,EAAE,QAAQ,EACf,QAAQ,EAAE,QAAQ,EAClB,gBAAgB,EAAE,KAAK,EACvB,UAAU,EAAE,eAAe,EAC3B,gBAAgB,EAAE;gBAChB,eAAe;aAChB,IACD,CAAC;IACL,CAAC;IAED;;;;;;;;;OASG;IACH,KAAK,CAAC,cAAc,CAClB,WAAmB,EACnB,KAAa,EACb,QAA2B;IAC3B,8DAA8D;IAC9D,UAA4B,EAAE;QAE9B,IAAI,YAAY,GAAW,EAAE,CAAC;QAC9B,OAAO,0BAAa,CAAC,QAAQ,CAC3B,gCAAgC,EAChC,OAAO,EACP,KAAK,EAAE,cAAc,EAAE,EAAE;;YACvB,IAAI,QAAQ,EAAE,CAAC;gBACb,YAAY,GAAG,IAAA,iDAAyB,EAAC,QAAQ,CAAC,CAAC;YACrD,CAAC;YACD,MAAM,EAAE,YAAY,EAAE,WAAW,EAAE,GAAG,MAAM,cAAc,CACxD,CAAC,YAAY,EAAE,EAAE,CACf,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,OAAO,CAC9B,WAAW,EACX;gBACE,KAAK;gBACL,QAAQ,EAAE,YAAY;gBACtB,UAAU,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,oBAAoB;aAC1C,EACD,YAAY,CACb,kCAEE,cAAc,KACjB,cAAc,kCACT,cAAc,CAAC,cAAc,KAChC,aAAa,kCACR,MAAA,cAAc,CAAC,cAAc,0CAAE,aAAa,GAC5C,IAAA,4BAAkB,EAAC,OAAO,CAAC,QAIrC,CAAC;YAEF,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,UAAW,CAAC,CAAC;YACvD,YAAY,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;YAExC,MAAM,GAAG,GAAG;gBACV,MAAM,EAAE,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,0CAAqB,CAAC;gBACtD,UAAU,EAAE,YAAY,CAAC,UAAU;gBACnC,aAAa,EAAE,YAAY,CAAC,MAAM;aACnC,CAAC;YAEF,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;gBACxB,4CAA4C;gBAC5C,MAAM,MAAM,GAA8B;oBACxC,MAAM,EAAE,GAAG,CAAC,MAAM;oBAClB,UAAU,EAAE,GAAG,CAAC,UAAU;oBAC1B,aAAa,EAAE,GAAG,CAAC,aAAa;oBAChC,MAAM,EAAE,2CAAqB,CAAC,OAAO;iBACtC,CAAC;gBACF,OAAO,MAAM,CAAC;YAChB,CAAC;iBAAM,CAAC;gBACN,MAAM,MAAM,GAA2B;oBACrC,aAAa,EAAE,GAAG,CAAC,MAAM;oBACzB,MAAM,EAAE,2CAAqB,CAAC,cAAc;oBAC5C,YAAY,EAAE,IAAA,6BAAQ,EAAC,YAAY,CAAC,KAAK,CAAC;oBAC1C,UAAU,EAAE,GAAG,CAAC,UAAU;oBAC1B,aAAa,EAAE,GAAG,CAAC,aAAa;iBACjC,CAAC;gBACF,OAAO,MAAM,CAAC;YAChB,CAAC;QACH,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,UAAU,CACd,KAAmB,EACnB,UAAiC,EAAE;QAEnC,OAAO,0BAAa,CAAC,QAAQ,CAAC,4BAA4B,EAAE,OAAO,EAAE,KAAK,EAAE,cAAc,EAAE,EAAE;YAC5F,MAAM,gBAAgB,GAAG,IAAA,gDAA2B,EAAC,KAAK,CAAC,CAAC;YAC5D,MAAM,EAAE,YAAY,EAAE,WAAW,EAAE,GAAG,MAAM,cAAc,CACxD,CAAC,YAAY,EAAE,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,CAAC,gBAAgB,EAAE,YAAY,CAAC,EAChF,cAAc,IAAI,EAAE,CACrB,CAAC;YACF,MAAM,MAAM,GAAyB,IAAA,iDAA4B,EAAC,YAAY,EAAE,WAAW,CAAC,CAAC;YAC7F,OAAO,MAAM,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;;;;;OAUG;IACH,KAAK,CAAC,aAAa,CACjB,UAAkB,EAClB,KAAa,EACb,QAA2B;IAC3B,8DAA8D;IAC9D,UAA4B,EAAE;QAE9B,IAAI,YAAY,GAAW,EAAE,CAAC;QAC9B,OAAO,0BAAa,CAAC,QAAQ,CAC3B,+BAA+B,EAC/B,OAAO,EACP,KAAK,EAAE,cAAc,EAAE,EAAE;;YACvB,YAAY,GAAG,IAAA,iDAAyB,EAAC,QAAQ,CAAC,CAAC;YACnD,IAAI,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC;gBAC/B,UAAU,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACvC,CAAC;YAED,MAAM,EAAE,YAAY,EAAE,WAAW,EAAE,GAAG,MAAM,cAAc,CACxD,CAAC,YAAY,EAAE,EAAE,CACf,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,eAAe,CACtC,UAAU,EACV;gBACE,KAAK;gBACL,QAAQ,EAAE,YAAY;gBACtB,UAAU,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,oBAAoB;aAC1C,EACD,YAAY,CACb,kCAEE,cAAc,KACjB,cAAc,kCACT,cAAc,CAAC,cAAc,KAChC,aAAa,kCACR,MAAA,cAAc,CAAC,cAAc,0CAAE,aAAa,GAC5C,IAAA,4BAAkB,EAAC,OAAO,CAAC,QAIrC,CAAC;YAEF,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,UAAW,CAAC,CAAC;YACvD,YAAY,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;YAExC,MAAM,GAAG,GAAG;gBACV,MAAM,EAAE,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,0CAAqB,CAAC;gBACtD,UAAU,EAAE,YAAY,CAAC,UAAU;gBACnC,aAAa,EAAE,YAAY,CAAC,MAAM;aACnC,CAAC;YAEF,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;gBACxB,4CAA4C;gBAC5C,MAAM,MAAM,GAA8B;oBACxC,MAAM,EAAE,GAAG,CAAC,MAAM;oBAClB,UAAU,EAAE,GAAG,CAAC,UAAU;oBAC1B,aAAa,EAAE,GAAG,CAAC,aAAa;oBAChC,MAAM,EAAE,2CAAqB,CAAC,OAAO;iBACtC,CAAC;gBACF,OAAO,MAAM,CAAC;YAChB,CAAC;iBAAM,CAAC;gBACN,MAAM,MAAM,GAA2B;oBACrC,aAAa,EAAE,GAAG,CAAC,MAAM;oBACzB,MAAM,EAAE,2CAAqB,CAAC,cAAc;oBAC5C,YAAY,EAAE,IAAA,6BAAQ,EAAC,YAAY,CAAC,KAAK,CAAC;oBAC1C,UAAU,EAAE,GAAG,CAAC,UAAU;oBAC1B,aAAa,EAAE,GAAG,CAAC,aAAa;iBACjC,CAAC;gBACF,OAAO,MAAM,CAAC;YAChB,CAAC;QACH,CAAC,CACF,CAAC;IACJ,CAAC;CACF;AA1ND,0CA0NC;AAOD,KAAK,UAAU,cAAc,CAC3B,CAA0C,EAC1C,OAAiB;IAEjB,yEAAyE;IACzE,MAAM,EAAE,UAAU,EAAE,wBAAwB,EAAE,GAAG,OAAO,IAAI,EAAE,CAAC;IAC/D,IAAI,WAAW,GAAsC,SAAS,CAAC;IAC/D,iFAAiF;IACjF,gDAAgD;IAChD,+EAA+E;IAC/E,MAAM,YAAY,GAAG,MAAM,CAAC,iCACvB,OAAO,KACV,UAAU,EAAE,CAAC,QAA+B,EAAE,iBAA0B,EAAE,EAAE;YAC1E,WAAW,GAAG,QAAQ,CAAC;YACvB,wBAAwB,aAAxB,wBAAwB,uBAAxB,wBAAwB,CAAG,QAAQ,EAAE,iBAAiB,CAAC,CAAC;QAC1D,CAAC,IACD,CAAC;IACH,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,WAAY,EAAE,CAAC;AACrD,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AzureLogAnalytics } from \"./generated/logquery/src/azureLogAnalytics.js\";\nimport type { TokenCredential } from \"@azure/core-auth\";\n\nimport type {\n  LogsQueryBatchOptions,\n  LogsQueryBatchResult,\n  LogsQueryOptions,\n  LogsQueryPartialResult,\n  LogsQueryResult,\n  LogsQuerySuccessfulResult,\n  QueryBatch,\n} from \"./models/publicLogsModels.js\";\nimport { LogsQueryResultStatus } from \"./models/publicLogsModels.js\";\n\nimport {\n  convertGeneratedTable,\n  convertRequestForQueryBatch,\n  convertResponseForQueryBatch,\n  mapError,\n} from \"./internal/modelConverters.js\";\nimport { formatPreferHeader } from \"./internal/util.js\";\nimport type {\n  CommonClientOptions,\n  FullOperationResponse,\n  OperationOptions,\n} from \"@azure/core-client\";\nimport type { QueryTimeInterval } from \"./models/timeInterval.js\";\nimport { convertTimespanToInterval } from \"./timespanConversion.js\";\nimport { KnownMonitorLogsQueryAudience, SDK_VERSION } from \"./constants.js\";\nimport { tracingClient } from \"./tracing.js\";\nimport { getLogQueryEndpoint } from \"./internal/logQueryOptionUtils.js\";\n\n/**\n * Options for the LogsQueryClient.\n */\nexport interface LogsQueryClientOptions extends CommonClientOptions {\n  /**\n   * The host to connect to.\n   */\n  endpoint?: string;\n\n  /**\n   * The Audience to use for authentication with Microsoft Entra ID. The\n   * audience is not considered when using a shared key.\n   */\n  audience?: string;\n}\n\n/**\n * Client for Azure Log Analytics\n */\nexport class LogsQueryClient {\n  private _logAnalytics: AzureLogAnalytics;\n\n  /**\n   * Construct a LogsClient that can be used to query logs using the Log Analytics Query language.\n   *\n   * @param tokenCredential - A token credential.\n   * @param options - Options for the LogsClient.\n   */\n  constructor(tokenCredential: TokenCredential, options?: LogsQueryClientOptions) {\n    const scope: string = options?.audience\n      ? `${options.audience}/.default`\n      : `${KnownMonitorLogsQueryAudience.AzurePublicCloud}/.default`;\n\n    let endpoint = options?.endpoint;\n    if (options?.endpoint) {\n      endpoint = getLogQueryEndpoint(options);\n    }\n    const packageDetails = `azsdk-js-monitor-query/${SDK_VERSION}`;\n    const userAgentPrefix =\n      options?.userAgentOptions && options?.userAgentOptions.userAgentPrefix\n        ? `${options?.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n    this._logAnalytics = new AzureLogAnalytics({\n      ...options,\n      $host: endpoint,\n      endpoint: endpoint,\n      credentialScopes: scope,\n      credential: tokenCredential,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n    });\n  }\n\n  /**\n   * Queries logs in a Log Analytics Workspace.\n   *\n   * @param workspaceId - The 'Workspace Id' for the Log Analytics Workspace\n   * @param query - A Kusto query.\n   * @param timespan - The timespan over which to query data. This is an ISO8601 time period value. This timespan is applied in addition to any that are specified in the query expression.\n   *  Some common durations can be found in the `Durations` object.\n   * @param options - Options to adjust various aspects of the request.\n   * @returns The result of the query.\n   */\n  async queryWorkspace(\n    workspaceId: string,\n    query: string,\n    timespan: QueryTimeInterval,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options: LogsQueryOptions = {},\n  ): Promise<LogsQueryResult> {\n    let timeInterval: string = \"\";\n    return tracingClient.withSpan(\n      \"LogsQueryClient.queryWorkspace\",\n      options,\n      async (updatedOptions) => {\n        if (timespan) {\n          timeInterval = convertTimespanToInterval(timespan);\n        }\n        const { flatResponse, rawResponse } = await getRawResponse(\n          (paramOptions) =>\n            this._logAnalytics.query.execute(\n              workspaceId,\n              {\n                query,\n                timespan: timeInterval,\n                workspaces: options?.additionalWorkspaces,\n              },\n              paramOptions,\n            ),\n          {\n            ...updatedOptions,\n            requestOptions: {\n              ...updatedOptions.requestOptions,\n              customHeaders: {\n                ...updatedOptions.requestOptions?.customHeaders,\n                ...formatPreferHeader(options),\n              },\n            },\n          },\n        );\n\n        const parsedBody = JSON.parse(rawResponse.bodyAsText!);\n        flatResponse.tables = parsedBody.tables;\n\n        const res = {\n          tables: flatResponse.tables.map(convertGeneratedTable),\n          statistics: flatResponse.statistics,\n          visualization: flatResponse.render,\n        };\n\n        if (!flatResponse.error) {\n          // if there is no error field, it is success\n          const result: LogsQuerySuccessfulResult = {\n            tables: res.tables,\n            statistics: res.statistics,\n            visualization: res.visualization,\n            status: LogsQueryResultStatus.Success,\n          };\n          return result;\n        } else {\n          const result: LogsQueryPartialResult = {\n            partialTables: res.tables,\n            status: LogsQueryResultStatus.PartialFailure,\n            partialError: mapError(flatResponse.error),\n            statistics: res.statistics,\n            visualization: res.visualization,\n          };\n          return result;\n        }\n      },\n    );\n  }\n\n  /**\n   * Query Logs with multiple queries, in a batch.\n   * @param batch - A batch of Kusto queries to execute. Each query can be configured to run against separate workspaces.\n   * @param options - Options for querying logs in a batch.\n   * @returns The Logs query results for all the queries.\n   */\n  async queryBatch(\n    batch: QueryBatch[],\n    options: LogsQueryBatchOptions = {},\n  ): Promise<LogsQueryBatchResult> {\n    return tracingClient.withSpan(\"LogsQueryClient.queryBatch\", options, async (updatedOptions) => {\n      const generatedRequest = convertRequestForQueryBatch(batch);\n      const { flatResponse, rawResponse } = await getRawResponse(\n        (paramOptions) => this._logAnalytics.query.batch(generatedRequest, paramOptions),\n        updatedOptions || {},\n      );\n      const result: LogsQueryBatchResult = convertResponseForQueryBatch(flatResponse, rawResponse);\n      return result;\n    });\n  }\n\n  /**\n   * Executes a Kusto query on an Azure resource\n   *\n   * @param resourceId - The identifier of the resource. The expected format is\n         '/subscriptions/<sid>/resourceGroups/<rg>/providers/<providerName>/<resourceType>/<resourceName>'.\n   * @param query - A Kusto query. Learn more about the `Kusto query syntax <https://learn.microsoft.com/azure/data-explorer/kusto/query/>`.\n   * @param timespan - The timespan over which to query data. This is an ISO8601 time period value. This timespan is applied in addition to any that are specified in the query expression.\n   *  Some common durations can be found in the {@link Durations} object.\n   * @param options - Options to adjust various aspects of the request.\n   * @returns Returns all the Azure Monitor logs matching the given Kusto query for an Azure resource.\n   */\n  async queryResource(\n    resourceId: string,\n    query: string,\n    timespan: QueryTimeInterval,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options: LogsQueryOptions = {},\n  ): Promise<LogsQueryResult> {\n    let timeInterval: string = \"\";\n    return tracingClient.withSpan(\n      \"LogsQueryClient.queryResource\",\n      options,\n      async (updatedOptions) => {\n        timeInterval = convertTimespanToInterval(timespan);\n        if (resourceId.startsWith(\"/\")) {\n          resourceId = resourceId.substring(1);\n        }\n\n        const { flatResponse, rawResponse } = await getRawResponse(\n          (paramOptions) =>\n            this._logAnalytics.query.resourceExecute(\n              resourceId,\n              {\n                query,\n                timespan: timeInterval,\n                workspaces: options?.additionalWorkspaces,\n              },\n              paramOptions,\n            ),\n          {\n            ...updatedOptions,\n            requestOptions: {\n              ...updatedOptions.requestOptions,\n              customHeaders: {\n                ...updatedOptions.requestOptions?.customHeaders,\n                ...formatPreferHeader(options),\n              },\n            },\n          },\n        );\n\n        const parsedBody = JSON.parse(rawResponse.bodyAsText!);\n        flatResponse.tables = parsedBody.tables;\n\n        const res = {\n          tables: flatResponse.tables.map(convertGeneratedTable),\n          statistics: flatResponse.statistics,\n          visualization: flatResponse.render,\n        };\n\n        if (!flatResponse.error) {\n          // if there is no error field, it is success\n          const result: LogsQuerySuccessfulResult = {\n            tables: res.tables,\n            statistics: res.statistics,\n            visualization: res.visualization,\n            status: LogsQueryResultStatus.Success,\n          };\n          return result;\n        } else {\n          const result: LogsQueryPartialResult = {\n            partialTables: res.tables,\n            status: LogsQueryResultStatus.PartialFailure,\n            partialError: mapError(flatResponse.error),\n            statistics: res.statistics,\n            visualization: res.visualization,\n          };\n          return result;\n        }\n      },\n    );\n  }\n}\n\ninterface ReturnType<T> {\n  flatResponse: T;\n  rawResponse: FullOperationResponse;\n}\n\nasync function getRawResponse<TOptions extends OperationOptions, TResult>(\n  f: (options: TOptions) => Promise<TResult>,\n  options: TOptions,\n): Promise<ReturnType<TResult>> {\n  // renaming onResponse received from customer to customerProvidedCallback\n  const { onResponse: customerProvidedCallback } = options || {};\n  let rawResponse: FullOperationResponse | undefined = undefined;\n  // flatResponseParam - is basically the flatResponse received from service call -\n  // just named it so that linter doesn't complain\n  // onResponse - includes the rawResponse and the customer's provided onResponse\n  const flatResponse = await f({\n    ...options,\n    onResponse: (response: FullOperationResponse, flatResponseParam: unknown) => {\n      rawResponse = response;\n      customerProvidedCallback?.(response, flatResponseParam);\n    },\n  });\n  return { flatResponse, rawResponse: rawResponse! };\n}\n"]}