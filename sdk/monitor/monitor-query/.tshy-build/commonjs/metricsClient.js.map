{"version":3,"file":"metricsClient.js","sourceRoot":"","sources":["../../src/metricsClient.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAGlC,6CAA6C;AAC7C,mEAG8C;AAC9C,sEAGuC;AACvC,iDAAmE;AAK5D,MAAM,6BAA6B,GAAG,UAAU,UAAkB;IACvE,MAAM,QAAQ,GAAW,UAAU,CAAC,OAAO,CAAC,gBAAgB,CAAC,GAAG,EAAE,CAAC;IACnE,MAAM,cAAc,GAAW,UAAU,CAAC,SAAS,CAAC,QAAQ,EAAE,UAAU,CAAC,OAAO,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;IACjG,OAAO,cAAc,CAAC;AACxB,CAAC,CAAC;AAJW,QAAA,6BAA6B,iCAIxC;AAEF;;GAEG;AACH,MAAa,aAAa;IAIxB,YACE,QAAgB,EAChB,eAAgC;IAChC,8DAA8D;IAC9D,OAAmC;QAEnC,MAAM,KAAK,GAAW,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ;YACrC,CAAC,CAAC,GAAG,OAAO,CAAC,QAAQ,WAAW;YAChC,CAAC,CAAC,GAAG,mCAAoB,CAAC,gBAAgB,WAAW,CAAC;QAExD,MAAM,cAAc,GAAG,0BAA0B,0BAAW,EAAE,CAAC;QAC/D,MAAM,eAAe,GACnB,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,gBAAgB,MAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,gBAAgB,CAAC,eAAe,CAAA;YACpE,CAAC,CAAC,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,gBAAgB,CAAC,eAAe,IAAI,cAAc,EAAE;YAClE,CAAC,CAAC,GAAG,cAAc,EAAE,CAAC;QAC1B,MAAM,oBAAoB,mCACrB,OAAO,KACV,KAAK,EAAE,QAAQ,EACf,QAAQ,EAAE,QAAQ,EAClB,gBAAgB,EAAE,KAAK,EACvB,UAAU,EAAE,eAAe,EAC3B,gBAAgB,EAAE;gBAChB,eAAe;aAChB,GACF,CAAC;QAEF,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAEzB,IAAI,CAAC,kBAAkB,GAAG,IAAI,kCAA4B,CACxD,IAAI,CAAC,QAAQ,EACb,kCAA4B,CAAC,yBAAyB,EACtD,oBAAoB,CACrB,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,cAAc,CAClB,WAAqB,EACrB,WAAqB,EACrB,eAAuB,EACvB,UAAwC,EAAE;QAE1C,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC7B,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;QACnD,CAAC;QAED,OAAO,0BAAa,CAAC,QAAQ,CAAC,0BAA0B,EAAE,OAAO,EAAE,KAAK,EAAE,cAAc,EAAE,EAAE;YAC1F,MAAM,cAAc,GAAG,IAAA,qCAA6B,EAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;YAErE,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,KAAK,CAC/D,cAAc,EACd,eAAe,EACf,WAAW,EACX;gBACE,WAAW,EAAE,WAAW;aACzB,EACD,IAAA,uDAAkC,EAAC,cAAc,CAAC,CACnD,CAAC;YAEF,OAAO,IAAA,kDAA6B,EAAC,QAAQ,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AApED,sCAoEC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { TokenCredential } from \"@azure/core-auth\";\nimport { tracingClient } from \"./tracing.js\";\nimport {\n  AzureMonitorMetricBatch as GeneratedMonitorMetricClient,\n  KnownApiVersion20240201 as MonitorMetricBatchApiVersion,\n} from \"./generated/metricBatch/src/index.js\";\nimport {\n  convertResponseForMetricBatch,\n  convertRequestForMetricsBatchQuery,\n} from \"./internal/modelConverters.js\";\nimport { SDK_VERSION, KnownMonitorAudience } from \"./constants.js\";\nimport type { MetricsQueryResourcesOptions } from \"./models/publicBatchModels.js\";\nimport type { MetricsQueryResult } from \"./models/publicMetricsModels.js\";\nimport type { MetricsQueryClientOptions } from \"./metricsQueryClient.js\";\n\nexport const getSubscriptionFromResourceId = function (resourceId: string): string {\n  const startPos: number = resourceId.indexOf(\"subscriptions/\") + 14;\n  const subscriptionId: string = resourceId.substring(startPos, resourceId.indexOf(\"/\", startPos));\n  return subscriptionId;\n};\n\n/**\n * A client that can query batch metrics.\n */\nexport class MetricsClient {\n  private _metricBatchClient: GeneratedMonitorMetricClient;\n  private _baseUrl: string;\n\n  constructor(\n    endpoint: string,\n    tokenCredential: TokenCredential,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: MetricsQueryClientOptions,\n  ) {\n    const scope: string = options?.audience\n      ? `${options.audience}/.default`\n      : `${KnownMonitorAudience.AzurePublicCloud}/.default`;\n\n    const packageDetails = `azsdk-js-monitor-query/${SDK_VERSION}`;\n    const userAgentPrefix =\n      options?.userAgentOptions && options?.userAgentOptions.userAgentPrefix\n        ? `${options?.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n    const serviceClientOptions = {\n      ...options,\n      $host: endpoint,\n      endpoint: endpoint,\n      credentialScopes: scope,\n      credential: tokenCredential,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n    };\n\n    this._baseUrl = endpoint;\n\n    this._metricBatchClient = new GeneratedMonitorMetricClient(\n      this._baseUrl,\n      MonitorMetricBatchApiVersion.TwoThousandTwentyFour0201,\n      serviceClientOptions,\n    );\n  }\n\n  /**\n   * Returns all the Azure Monitor metrics requested for the batch of resources.\n   */\n  async queryResources(\n    resourceIds: string[],\n    metricNames: string[],\n    metricNamespace: string,\n    options: MetricsQueryResourcesOptions = {},\n  ): Promise<MetricsQueryResult[]> {\n    if (resourceIds.length === 0) {\n      throw new Error(\"Resource IDs can not be empty\");\n    }\n\n    return tracingClient.withSpan(\"MetricsQueryClient.batch\", options, async (updatedOptions) => {\n      const subscriptionId = getSubscriptionFromResourceId(resourceIds[0]);\n\n      const response = await this._metricBatchClient.metricsBatch.batch(\n        subscriptionId,\n        metricNamespace,\n        metricNames,\n        {\n          resourceids: resourceIds,\n        },\n        convertRequestForMetricsBatchQuery(updatedOptions),\n      );\n\n      return convertResponseForMetricBatch(response);\n    });\n  }\n}\n"]}