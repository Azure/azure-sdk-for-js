{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../src/generated/metricsdefinitions/src/models/index.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AA6IH,2EAA2E;AAC3E,MAAM,CAAN,IAAY,uBAGX;AAHD,WAAY,uBAAuB;IACjC,+BAA+B;IAC/B,mEAAwC,CAAA;AAC1C,CAAC,EAHW,uBAAuB,KAAvB,uBAAuB,QAGlC;AAWD,oEAAoE;AACpE,MAAM,CAAN,IAAY,gBAMX;AAND,WAAY,gBAAgB;IAC1B,iDAA6B,CAAA;IAC7B,iDAA6B,CAAA;IAC7B,qCAAiB,CAAA;IACjB,uCAAmB,CAAA;IACnB,6CAAyB,CAAA;AAC3B,CAAC,EANW,gBAAgB,KAAhB,gBAAgB,QAM3B;AAeD,mEAAmE;AACnE,MAAM,CAAN,IAAY,eA2BX;AA3BD,WAAY,eAAe;IACzB,4BAA4B;IAC5B,kCAAe,CAAA;IACf,+BAA+B;IAC/B,kCAAe,CAAA;IACf,+BAA+B;IAC/B,sCAAmB,CAAA;IACnB,4CAA4C;IAC5C,oDAAiC,CAAA;IACjC,+CAA+C;IAC/C,oDAAiC,CAAA;IACjC,uBAAuB;IACvB,sCAAmB,CAAA;IACnB,4CAA4C;IAC5C,gDAA6B,CAAA;IAC7B,sJAAsJ;IACtJ,8CAA2B,CAAA;IAC3B,yBAAyB;IACzB,8CAA2B,CAAA;IAC3B,gCAAgC;IAChC,kCAAe,CAAA;IACf,0DAA0D;IAC1D,4CAAyB,CAAA;IACzB,+DAA+D;IAC/D,0CAAuB,CAAA;IACvB,6CAA6C;IAC7C,kDAA+B,CAAA;AACjC,CAAC,EA3BW,eAAe,KAAf,eAAe,QA2B1B;AAuBD,8EAA8E;AAC9E,MAAM,CAAN,IAAY,0BAOX;AAPD,WAAY,0BAA0B;IACpC,2CAAa,CAAA;IACb,iDAAmB,CAAA;IACnB,6CAAe,CAAA;IACf,iDAAmB,CAAA;IACnB,iDAAmB,CAAA;IACnB,6CAAe,CAAA;AACjB,CAAC,EAPW,0BAA0B,KAA1B,0BAA0B,QAOrC","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\n\n/** Represents collection of metric definitions. */\nexport interface SubscriptionScopeMetricDefinitionCollection {\n  /** The values for the metric definitions. */\n  value: SubscriptionScopeMetricDefinition[];\n}\n\n/** Metric definition class specifies the metadata for a metric. */\nexport interface SubscriptionScopeMetricDefinition {\n  /** Flag to indicate whether the dimension is required. */\n  isDimensionRequired?: boolean;\n  /** The resource identifier of the resource that emitted the metric. */\n  resourceId?: string;\n  /** The namespace the metric belongs to. */\n  namespace?: string;\n  /** The name and the display name of the metric, i.e. it is a localizable string. */\n  name?: LocalizableString;\n  /** Detailed description of this metric. */\n  displayDescription?: string;\n  /** Custom category name for this metric. */\n  category?: string;\n  /** The class of the metric. */\n  metricClass?: MetricClass;\n  /** The unit of the metric. */\n  unit?: MetricUnit;\n  /** The primary aggregation type value defining how to use the values for display. */\n  primaryAggregationType?: MetricAggregationType;\n  /** The collection of what aggregation types are supported. */\n  supportedAggregationTypes?: MetricAggregationType[];\n  /** The collection of what aggregation intervals are available to be queried. */\n  metricAvailabilities?: MetricAvailability[];\n  /** The resource identifier of the metric definition. */\n  id?: string;\n  /** The name and the display name of the dimension, i.e. it is a localizable string. */\n  dimensions?: LocalizableString[];\n}\n\n/** The localizable string class. */\nexport interface LocalizableString {\n  /** The invariant value. */\n  value: string;\n  /** The display name. */\n  localizedValue?: string;\n}\n\n/** Metric availability specifies the time grain (aggregation interval or frequency) and the retention period for that time grain. */\nexport interface MetricAvailability {\n  /** The time grain specifies a supported aggregation interval for the metric. Expressed as a duration 'PT1M', 'P1D', etc. */\n  timeGrain?: string;\n  /** The retention period for the metric at the specified timegrain.  Expressed as a duration 'PT1M', 'P1D', etc. */\n  retention?: string;\n}\n\n/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.) */\nexport interface ErrorContract {\n  /** The error object. */\n  error?: ErrorResponse;\n}\n\n/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.) */\nexport interface ErrorResponse {\n  /**\n   * The error code.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly code?: string;\n  /**\n   * The error message.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly message?: string;\n  /**\n   * The error target.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly target?: string;\n  /**\n   * The error details.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly details?: ErrorResponse[];\n  /**\n   * The error additional info.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly additionalInfo?: ErrorAdditionalInfo[];\n}\n\n/** The resource management error additional info. */\nexport interface ErrorAdditionalInfo {\n  /**\n   * The additional info type.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: string;\n  /**\n   * The additional info.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly info?: Record<string, unknown>;\n}\n\n/** Represents collection of metric definitions. */\nexport interface MetricDefinitionCollection {\n  /** The values for the metric definitions. */\n  value: MetricDefinition[];\n}\n\n/** Metric definition class specifies the metadata for a metric. */\nexport interface MetricDefinition {\n  /** Flag to indicate whether the dimension is required. */\n  isDimensionRequired?: boolean;\n  /** The resource identifier of the resource that emitted the metric. */\n  resourceId?: string;\n  /** The namespace the metric belongs to. */\n  namespace?: string;\n  /** The name and the display name of the metric, i.e. it is a localizable string. */\n  name?: LocalizableString;\n  /** Detailed description of this metric. */\n  displayDescription?: string;\n  /** Custom category name for this metric. */\n  category?: string;\n  /** The class of the metric. */\n  metricClass?: MetricClass;\n  /** The unit of the metric. */\n  unit?: MetricUnit;\n  /** The primary aggregation type value defining how to use the values for display. */\n  primaryAggregationType?: AggregationType;\n  /** The collection of what aggregation types are supported. */\n  supportedAggregationTypes?: AggregationType[];\n  /** The collection of what aggregation intervals are available to be queried. */\n  metricAvailabilities?: MetricAvailability[];\n  /** The resource identifier of the metric definition. */\n  id?: string;\n  /** The name and the display name of the dimension, i.e. it is a localizable string. */\n  dimensions?: LocalizableString[];\n}\n\n/** Known values of {@link ApiVersion20240201} that the service accepts. */\nexport enum KnownApiVersion20240201 {\n  /** Api Version '2024-02-01' */\n  TwoThousandTwentyFour0201 = \"2024-02-01\"\n}\n\n/**\n * Defines values for ApiVersion20240201. \\\n * {@link KnownApiVersion20240201} can be used interchangeably with ApiVersion20240201,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **2024-02-01**: Api Version '2024-02-01'\n */\nexport type ApiVersion20240201 = string;\n\n/** Known values of {@link MetricClass} that the service accepts. */\nexport enum KnownMetricClass {\n  Availability = \"Availability\",\n  Transactions = \"Transactions\",\n  Errors = \"Errors\",\n  Latency = \"Latency\",\n  Saturation = \"Saturation\"\n}\n\n/**\n * Defines values for MetricClass. \\\n * {@link KnownMetricClass} can be used interchangeably with MetricClass,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Availability** \\\n * **Transactions** \\\n * **Errors** \\\n * **Latency** \\\n * **Saturation**\n */\nexport type MetricClass = string;\n\n/** Known values of {@link MetricUnit} that the service accepts. */\nexport enum KnownMetricUnit {\n  /** Unit of raw quantity. */\n  Count = \"Count\",\n  /** Unit of memory in bytes. */\n  Bytes = \"Bytes\",\n  /** Unit of time in seconds. */\n  Seconds = \"Seconds\",\n  /** Rate unit of raw quantity per second. */\n  CountPerSecond = \"CountPerSecond\",\n  /** Rate unit of memory in bytes per second. */\n  BytesPerSecond = \"BytesPerSecond\",\n  /** Percentage unit. */\n  Percent = \"Percent\",\n  /** Unit of time in 1/1000th of a second. */\n  MilliSeconds = \"MilliSeconds\",\n  /** Unit of data transfer or storage. It is the size of the data in bytes multiplied by the time it takes to transfer or store the data in seconds. */\n  ByteSeconds = \"ByteSeconds\",\n  /** No specified unit. */\n  Unspecified = \"Unspecified\",\n  /** Unit of processing power. */\n  Cores = \"Cores\",\n  /** Unit of processing power in 1/1000th of a CPU core. */\n  MilliCores = \"MilliCores\",\n  /** Unit of processing power in one billionth of a CPU core. */\n  NanoCores = \"NanoCores\",\n  /** Rate unit of binary digits per second. */\n  BitsPerSecond = \"BitsPerSecond\"\n}\n\n/**\n * Defines values for MetricUnit. \\\n * {@link KnownMetricUnit} can be used interchangeably with MetricUnit,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Count**: Unit of raw quantity. \\\n * **Bytes**: Unit of memory in bytes. \\\n * **Seconds**: Unit of time in seconds. \\\n * **CountPerSecond**: Rate unit of raw quantity per second. \\\n * **BytesPerSecond**: Rate unit of memory in bytes per second. \\\n * **Percent**: Percentage unit. \\\n * **MilliSeconds**: Unit of time in 1\\/1000th of a second. \\\n * **ByteSeconds**: Unit of data transfer or storage. It is the size of the data in bytes multiplied by the time it takes to transfer or store the data in seconds. \\\n * **Unspecified**: No specified unit. \\\n * **Cores**: Unit of processing power. \\\n * **MilliCores**: Unit of processing power in 1\\/1000th of a CPU core. \\\n * **NanoCores**: Unit of processing power in one billionth of a CPU core. \\\n * **BitsPerSecond**: Rate unit of binary digits per second.\n */\nexport type MetricUnit = string;\n\n/** Known values of {@link MetricAggregationType} that the service accepts. */\nexport enum KnownMetricAggregationType {\n  None = \"None\",\n  Average = \"Average\",\n  Count = \"Count\",\n  Minimum = \"Minimum\",\n  Maximum = \"Maximum\",\n  Total = \"Total\"\n}\n\n/**\n * Defines values for MetricAggregationType. \\\n * {@link KnownMetricAggregationType} can be used interchangeably with MetricAggregationType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **None** \\\n * **Average** \\\n * **Count** \\\n * **Minimum** \\\n * **Maximum** \\\n * **Total**\n */\nexport type MetricAggregationType = string;\n/** Defines values for AggregationType. */\nexport type AggregationType =\n  | \"None\"\n  | \"Average\"\n  | \"Count\"\n  | \"Minimum\"\n  | \"Maximum\"\n  | \"Total\";\n\n/** Optional parameters. */\nexport interface MetricDefinitionsListAtSubscriptionScopeOptionalParams\n  extends coreClient.OperationOptions {\n  /** Metric namespace where the metrics you want reside. */\n  metricnamespace?: string;\n}\n\n/** Contains response data for the listAtSubscriptionScope operation. */\nexport type MetricDefinitionsListAtSubscriptionScopeResponse = SubscriptionScopeMetricDefinitionCollection;\n\n/** Optional parameters. */\nexport interface MetricDefinitionsListOptionalParams\n  extends coreClient.OperationOptions {\n  /** Metric namespace where the metrics you want reside. */\n  metricnamespace?: string;\n}\n\n/** Contains response data for the list operation. */\nexport type MetricDefinitionsListResponse = MetricDefinitionCollection;\n\n/** Optional parameters. */\nexport interface MonitorManagementClientOptionalParams\n  extends coreClient.ServiceClientOptions {\n  /** server parameter */\n  $host?: string;\n  /** Overrides client endpoint. */\n  endpoint?: string;\n}\n"]}