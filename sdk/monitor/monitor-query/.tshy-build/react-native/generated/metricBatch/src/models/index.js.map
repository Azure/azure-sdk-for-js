{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../src/generated/metricBatch/src/models/index.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAuJH,2EAA2E;AAC3E,MAAM,CAAN,IAAY,uBAGX;AAHD,WAAY,uBAAuB;IACjC,+BAA+B;IAC/B,mEAAwC,CAAA;AAC1C,CAAC,EAHW,uBAAuB,KAAvB,uBAAuB,QAGlC;AAWD,mEAAmE;AACnE,MAAM,CAAN,IAAY,eA2BX;AA3BD,WAAY,eAAe;IACzB,4BAA4B;IAC5B,kCAAe,CAAA;IACf,+BAA+B;IAC/B,kCAAe,CAAA;IACf,+BAA+B;IAC/B,sCAAmB,CAAA;IACnB,4CAA4C;IAC5C,oDAAiC,CAAA;IACjC,+CAA+C;IAC/C,oDAAiC,CAAA;IACjC,uBAAuB;IACvB,sCAAmB,CAAA;IACnB,4CAA4C;IAC5C,gDAA6B,CAAA;IAC7B,sJAAsJ;IACtJ,8CAA2B,CAAA;IAC3B,yBAAyB;IACzB,8CAA2B,CAAA;IAC3B,gCAAgC;IAChC,kCAAe,CAAA;IACf,0DAA0D;IAC1D,4CAAyB,CAAA;IACzB,+DAA+D;IAC/D,0CAAuB,CAAA;IACvB,6CAA6C;IAC7C,kDAA+B,CAAA;AACjC,CAAC,EA3BW,eAAe,KAAf,eAAe,QA2B1B","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\n\n/** The comma separated list of resource IDs to query metrics for. */\nexport interface ResourceIdList {\n  /** The list of resource IDs to query metrics for. */\n  resourceids?: string[];\n}\n\n/** The metrics result for a resource. */\nexport interface MetricResultsResponse {\n  /** The collection of metric data responses per resource, per metric. */\n  values?: MetricResultsResponseValuesItem[];\n}\n\nexport interface MetricResultsResponseValuesItem {\n  /** The start time, in datetime format, for which the data was retrieved. */\n  starttime: string;\n  /** The end time, in datetime format, for which the data was retrieved. */\n  endtime: string;\n  /**\n   * The interval (window size) for which the metric data was returned in ISO 8601 duration format with a special case for 'FULL' value that returns single datapoint for entire time span requested (*Examples: PT15M, PT1H, P1D, FULL*).\n   * This may be adjusted and different from what was originally requested if AutoAdjustTimegrain=true is specified.\n   */\n  interval?: string;\n  /** The namespace of the metrics been queried */\n  namespace?: string;\n  /** The region of the resource been queried for metrics. */\n  resourceregion?: string;\n  /** The resource that has been queried for metrics. */\n  resourceid?: string;\n  /** The value of the collection. */\n  value: Metric[];\n}\n\n/** The result data of a query. */\nexport interface Metric {\n  /** The metric Id. */\n  id: string;\n  /** The resource type of the metric resource. */\n  type: string;\n  /** The name and the display name of the metric, i.e. it is localizable string. */\n  name: LocalizableString;\n  /** Detailed description of this metric. */\n  displayDescription?: string;\n  /** 'Success' or the error details on query failures for this metric. */\n  errorCode?: string;\n  /** Error message encountered querying this specific metric. */\n  errorMessage?: string;\n  /** The unit of the metric. */\n  unit: MetricUnit;\n  /** The time series returned when a data query is performed. */\n  timeseries: TimeSeriesElement[];\n}\n\n/** The localizable string class. */\nexport interface LocalizableString {\n  /** The invariant value. */\n  value: string;\n  /** The display name. */\n  localizedValue?: string;\n}\n\n/** A time series result type. The discriminator value is always TimeSeries in this case. */\nexport interface TimeSeriesElement {\n  /** The metadata values returned if $filter was specified in the call. */\n  metadatavalues?: MetadataValue[];\n  /** An array of data points representing the metric values.  This is only returned if a result type of data is specified. */\n  data?: MetricValue[];\n}\n\n/** Represents a metric metadata value. */\nexport interface MetadataValue {\n  /** The name of the metadata. */\n  name?: LocalizableString;\n  /** The value of the metadata. */\n  value?: string;\n}\n\n/** Represents a metric value. */\nexport interface MetricValue {\n  /** The timestamp for the metric value in ISO 8601 format. */\n  timeStamp: Date;\n  /** The average value in the time range. */\n  average?: number;\n  /** The least value in the time range. */\n  minimum?: number;\n  /** The greatest value in the time range. */\n  maximum?: number;\n  /** The sum of all of the values in the time range. */\n  total?: number;\n  /** The number of samples in the time range. Can be used to determine the number of values that contributed to the average value. */\n  count?: number;\n}\n\n/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */\nexport interface ErrorResponse {\n  /** The error object. */\n  error?: ErrorDetail;\n}\n\n/** The error detail. */\nexport interface ErrorDetail {\n  /**\n   * The error code.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly code?: string;\n  /**\n   * The error message.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly message?: string;\n  /**\n   * The error target.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly target?: string;\n  /**\n   * The error details.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly details?: ErrorDetail[];\n  /**\n   * The error additional info.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly additionalInfo?: ErrorAdditionalInfo[];\n}\n\n/** The resource management error additional info. */\nexport interface ErrorAdditionalInfo {\n  /**\n   * The additional info type.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: string;\n  /**\n   * The additional info.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly info?: Record<string, unknown>;\n}\n\n/** Defines headers for MetricsBatch_batch operation. */\nexport interface MetricsBatchBatchExceptionHeaders {\n  /** Error code for specific error that occurred. */\n  xMsErrorCode?: string;\n}\n\n/** Known values of {@link ApiVersion20240201} that the service accepts. */\nexport enum KnownApiVersion20240201 {\n  /** Api Version '2024-02-01' */\n  TwoThousandTwentyFour0201 = \"2024-02-01\"\n}\n\n/**\n * Defines values for ApiVersion20240201. \\\n * {@link KnownApiVersion20240201} can be used interchangeably with ApiVersion20240201,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **2024-02-01**: Api Version '2024-02-01'\n */\nexport type ApiVersion20240201 = string;\n\n/** Known values of {@link MetricUnit} that the service accepts. */\nexport enum KnownMetricUnit {\n  /** Unit of raw quantity. */\n  Count = \"Count\",\n  /** Unit of memory in bytes. */\n  Bytes = \"Bytes\",\n  /** Unit of time in seconds. */\n  Seconds = \"Seconds\",\n  /** Rate unit of raw quantity per second. */\n  CountPerSecond = \"CountPerSecond\",\n  /** Rate unit of memory in bytes per second. */\n  BytesPerSecond = \"BytesPerSecond\",\n  /** Percentage unit. */\n  Percent = \"Percent\",\n  /** Unit of time in 1/1000th of a second. */\n  MilliSeconds = \"MilliSeconds\",\n  /** Unit of data transfer or storage. It is the size of the data in bytes multiplied by the time it takes to transfer or store the data in seconds. */\n  ByteSeconds = \"ByteSeconds\",\n  /** No specified unit. */\n  Unspecified = \"Unspecified\",\n  /** Unit of processing power. */\n  Cores = \"Cores\",\n  /** Unit of processing power in 1/1000th of a CPU core. */\n  MilliCores = \"MilliCores\",\n  /** Unit of processing power in one billionth of a CPU core. */\n  NanoCores = \"NanoCores\",\n  /** Rate unit of binary digits per second. */\n  BitsPerSecond = \"BitsPerSecond\"\n}\n\n/**\n * Defines values for MetricUnit. \\\n * {@link KnownMetricUnit} can be used interchangeably with MetricUnit,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Count**: Unit of raw quantity. \\\n * **Bytes**: Unit of memory in bytes. \\\n * **Seconds**: Unit of time in seconds. \\\n * **CountPerSecond**: Rate unit of raw quantity per second. \\\n * **BytesPerSecond**: Rate unit of memory in bytes per second. \\\n * **Percent**: Percentage unit. \\\n * **MilliSeconds**: Unit of time in 1\\/1000th of a second. \\\n * **ByteSeconds**: Unit of data transfer or storage. It is the size of the data in bytes multiplied by the time it takes to transfer or store the data in seconds. \\\n * **Unspecified**: No specified unit. \\\n * **Cores**: Unit of processing power. \\\n * **MilliCores**: Unit of processing power in 1\\/1000th of a CPU core. \\\n * **NanoCores**: Unit of processing power in one billionth of a CPU core. \\\n * **BitsPerSecond**: Rate unit of binary digits per second.\n */\nexport type MetricUnit = string;\n\n/** Optional parameters. */\nexport interface MetricsBatchBatchOptionalParams\n  extends coreClient.OperationOptions {\n  /**\n   * The start time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'. If you have specified the endtime parameter, then this parameter is required.\n   * If only starttime is specified, then endtime defaults to the current time.\n   * If no time interval is specified, the default is 1 hour.\n   */\n  starttime?: string;\n  /** The end time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'. */\n  endtime?: string;\n  /**\n   * The interval (i.e. timegrain) of the query in ISO 8601 duration format. Defaults to PT1M. Special case for 'FULL' value that returns single datapoint for entire time span requested.\n   * *Examples: PT15M, PT1H, P1D, FULL*\n   */\n  interval?: string;\n  /**\n   * The list of aggregation types (comma separated) to retrieve.\n   * *Examples: average, minimum, maximum*\n   */\n  aggregation?: string;\n  /**\n   * The maximum number of records to retrieve per resource ID in the request.\n   * Valid only if filter is specified.\n   * Defaults to 10.\n   */\n  top?: number;\n  /**\n   * The aggregation to use for sorting results and the direction of the sort.\n   * Only one order can be specified.\n   * *Examples: sum asc*\n   */\n  orderby?: string;\n  /** The filter is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**. */\n  filter?: string;\n  /** Dimension name(s) to rollup results by. For example if you only want to see metric values with a filter like 'City eq Seattle or City eq Tacoma' but don't want to see separate values for each city, you can specify 'RollUpBy=City' to see the results for Seattle and Tacoma rolled up into one timeseries. */\n  rollupby?: string;\n}\n\n/** Contains response data for the batch operation. */\nexport type MetricsBatchBatchResponse = MetricResultsResponse;\n\n/** Optional parameters. */\nexport interface AzureMonitorMetricBatchOptionalParams\n  extends coreClient.ServiceClientOptions {\n  /** Overrides client endpoint. */\n  endpoint?: string;\n}\n"]}