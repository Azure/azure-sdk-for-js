/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
/** Class containing Query operations. */
export class QueryImpl {
    /**
     * Initialize a new instance of the class Query class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Executes an Analytics query for data
     * @param workspaceId Primary Workspace ID of the query. This is the Workspace ID from the Properties
     *                    blade in the Azure portal.
     * @param query The Analytics query. Learn more about the [Analytics query
     *              syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
     * @param options The options parameters.
     */
    get(workspaceId, query, options) {
        return this.client.sendOperationRequest({ workspaceId, query, options }, getOperationSpec);
    }
    /**
     * Executes an Analytics query for data.
     * [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/request-format) is an example for
     * using POST with an Analytics query.
     * @param workspaceId Primary Workspace ID of the query. This is the Workspace ID from the Properties
     *                    blade in the Azure portal.
     * @param body The Analytics query. Learn more about the [Analytics query
     *             syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
     * @param options The options parameters.
     */
    execute(workspaceId, body, options) {
        return this.client.sendOperationRequest({ workspaceId, body, options }, executeOperationSpec);
    }
    /**
     * Executes an Analytics query for data in the context of a resource.
     * [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/azure-resource-queries) is an
     * example for using POST with an Analytics query.
     * @param resourceId The identifier of the resource.
     * @param query The Analytics query. Learn more about the [Analytics query
     *              syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
     * @param options The options parameters.
     */
    resourceGet(resourceId, query, options) {
        return this.client.sendOperationRequest({ resourceId, query, options }, resourceGetOperationSpec);
    }
    /**
     * Executes an Analytics query for data in the context of a resource.
     * [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/azure-resource-queries) is an
     * example for using POST with an Analytics query.
     * @param resourceId The identifier of the resource.
     * @param body The Analytics query. Learn more about the [Analytics query
     *             syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
     * @param options The options parameters.
     */
    resourceExecute(resourceId, body, options) {
        return this.client.sendOperationRequest({ resourceId, body, options }, resourceExecuteOperationSpec);
    }
    /**
     * Executes a batch of Analytics queries for data.
     * [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/batch-queries) is an example for
     * using POST with an Analytics query.
     * @param body The batch request body
     * @param options The options parameters.
     */
    batch(body, options) {
        return this.client.sendOperationRequest({ body, options }, batchOperationSpec);
    }
    /**
     * Executes an Analytics query for data in the context of a resource.
     * [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/azure-resource-queries) is an
     * example for using POST with an Analytics query.
     * @param resourceId The identifier of the resource.
     * @param query The Analytics query. Learn more about the [Analytics query
     *              syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
     * @param options The options parameters.
     */
    resourceGetXms(resourceId, query, options) {
        return this.client.sendOperationRequest({ resourceId, query, options }, resourceGetXmsOperationSpec);
    }
    /**
     * Executes an Analytics query for data in the context of a resource.
     * [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/azure-resource-queries) is an
     * example for using POST with an Analytics query.
     * @param resourceId The identifier of the resource.
     * @param body The Analytics query. Learn more about the [Analytics query
     *             syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
     * @param options The options parameters.
     */
    resourceExecuteXms(resourceId, body, options) {
        return this.client.sendOperationRequest({ resourceId, body, options }, resourceExecuteXmsOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/workspaces/{workspaceId}/query",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.QueryResults
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.query, Parameters.timespan],
    urlParameters: [Parameters.$host, Parameters.workspaceId],
    headerParameters: [Parameters.accept],
    serializer
};
const executeOperationSpec = {
    path: "/workspaces/{workspaceId}/query",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.QueryResults
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.body,
    urlParameters: [Parameters.$host, Parameters.workspaceId],
    headerParameters: [
        Parameters.accept,
        Parameters.contentType,
        Parameters.prefer
    ],
    mediaType: "json",
    serializer
};
const resourceGetOperationSpec = {
    path: "/{resourceId}/query",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.QueryResults
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.query, Parameters.timespan],
    urlParameters: [Parameters.$host, Parameters.resourceId],
    headerParameters: [Parameters.accept],
    serializer
};
const resourceExecuteOperationSpec = {
    path: "/{resourceId}/query",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.QueryResults
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.body,
    urlParameters: [Parameters.$host, Parameters.resourceId],
    headerParameters: [
        Parameters.accept,
        Parameters.contentType,
        Parameters.prefer
    ],
    mediaType: "json",
    serializer
};
const batchOperationSpec = {
    path: "/$batch",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.BatchResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.body1,
    urlParameters: [Parameters.$host],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const resourceGetXmsOperationSpec = {
    path: "/{resourceId}/query",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.QueryResults
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.query, Parameters.timespan],
    urlParameters: [Parameters.$host, Parameters.resourceId],
    headerParameters: [Parameters.accept],
    serializer
};
const resourceExecuteXmsOperationSpec = {
    path: "/{resourceId}/query",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.QueryResults
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.body,
    urlParameters: [Parameters.$host, Parameters.resourceId],
    headerParameters: [
        Parameters.accept,
        Parameters.contentType,
        Parameters.prefer
    ],
    mediaType: "json",
    serializer
};
//# sourceMappingURL=query.js.map