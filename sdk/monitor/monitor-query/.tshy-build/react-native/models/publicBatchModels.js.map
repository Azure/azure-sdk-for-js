{"version":3,"file":"publicBatchModels.js","sourceRoot":"","sources":["../../../src/models/publicBatchModels.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type * as coreClient from \"@azure/core-client\";\n\n/** Optional parameters. */\nexport interface MetricsQueryResourcesOptions extends coreClient.OperationOptions {\n  /**\n   * The start time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'. If you have specified the endTime parameter, then this parameter is required.\n   * If only startTime is specified, then endTime defaults to the current time.\n   * If no time interval is specified, the default is 1 hour.\n   */\n  startTime?: Date;\n  /** The end time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'. */\n  endTime?: Date;\n  /**\n   * The interval (i.e. timegrain) of the query.\n   * *Examples: PT15M, PT1H, P1D*\n   */\n  interval?: string;\n  /**\n   * The list of aggregation types (comma separated) to retrieve.\n   * *Examples: average, minimum, maximum*\n   */\n  aggregation?: string;\n  /**\n   * The maximum number of records to retrieve per resource ID in the request.\n   * Valid only if filter is specified.\n   * Defaults to 10.\n   */\n  top?: number;\n  /**\n   * The aggregation to use for sorting results and the direction of the sort.\n   * Only one order can be specified.\n   * *Examples: sum asc*\n   */\n  orderBy?: string;\n  /** The filter is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**. */\n  filter?: string;\n  /** Dimension name(s) to rollup results by. For example if you only want to see metric values with a filter like 'City eq Seattle or City eq Tacoma' but don't want to see separate values for each city, you can specify 'RollUpBy=City' to see the results for Seattle and Tacoma rolled up into one timeseries. */\n  rollUpBy?: string;\n}\n"]}