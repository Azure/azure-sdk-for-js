/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureLogAnalytics } from "../azureLogAnalytics";
import {
  QueryGetOptionalParams,
  QueryGetResponse,
  QueryBody,
  QueryExecuteOptionalParams,
  QueryExecuteResponse,
  BatchRequest,
  QueryBatchResponse
} from "../models";

/** Class representing a Query. */
export class Query {
  private readonly client: AzureLogAnalytics;

  /**
   * Initialize a new instance of the class Query class.
   * @param client Reference to the service client
   */
  constructor(client: AzureLogAnalytics) {
    this.client = client;
  }

  /**
   * Executes an Analytics query for data
   * @param workspaceId ID of the workspace. This is Workspace ID from the Properties blade in the Azure
   *                    portal.
   * @param query The Analytics query. Learn more about the [Analytics query
   *              syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
   * @param options The options parameters.
   */
  get(
    workspaceId: string,
    query: string,
    options?: QueryGetOptionalParams
  ): Promise<QueryGetResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      workspaceId,
      query,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getOperationSpec
    ) as Promise<QueryGetResponse>;
  }

  /**
   * Executes an Analytics query for data.
   * [Here](https://dev.loganalytics.io/documentation/Using-the-API) is an example for using POST with an
   * Analytics query.
   * @param workspaceId ID of the workspace. This is Workspace ID from the Properties blade in the Azure
   *                    portal.
   * @param body The Analytics query. Learn more about the [Analytics query
   *             syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
   * @param options The options parameters.
   */
  execute(
    workspaceId: string,
    body: QueryBody,
    options?: QueryExecuteOptionalParams
  ): Promise<QueryExecuteResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      workspaceId,
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      executeOperationSpec
    ) as Promise<QueryExecuteResponse>;
  }

  /**
   * Executes a batch of Analytics queries for data.
   * [Here](https://dev.loganalytics.io/documentation/Using-the-API) is an example for using POST with an
   * Analytics query.
   * @param body The batch request body
   * @param options The options parameters.
   */
  batch(
    body: BatchRequest,
    options?: coreHttp.OperationOptions
  ): Promise<QueryBatchResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      batchOperationSpec
    ) as Promise<QueryBatchResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path: "/workspaces/{workspaceId}/query",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.QueryResults
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.query, Parameters.timespan],
  urlParameters: [Parameters.$host, Parameters.workspaceId],
  headerParameters: [Parameters.accept],
  serializer
};
const executeOperationSpec: coreHttp.OperationSpec = {
  path: "/workspaces/{workspaceId}/query",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.QueryResults
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body,
  urlParameters: [Parameters.$host, Parameters.workspaceId],
  headerParameters: [
    Parameters.accept,
    Parameters.contentType,
    Parameters.prefer
  ],
  mediaType: "json",
  serializer
};
const batchOperationSpec: coreHttp.OperationSpec = {
  path: "/$batch",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BatchResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body1,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
