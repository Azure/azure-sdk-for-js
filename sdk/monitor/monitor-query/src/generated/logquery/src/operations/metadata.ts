/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Metadata } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureLogAnalyticsContext } from "../azureLogAnalyticsContext";
import {
  MetadataGetOptionalParams,
  MetadataGetResponse,
  MetadataPostOptionalParams,
  MetadataPostResponse
} from "../models";

/** Class containing Metadata operations. */
export class MetadataImpl implements Metadata {
  private readonly client: AzureLogAnalyticsContext;

  /**
   * Initialize a new instance of the class Metadata class.
   * @param client Reference to the service client
   */
  constructor(client: AzureLogAnalyticsContext) {
    this.client = client;
  }

  /**
   * Retrieve the metadata information for the workspace, including its schema, functions, workspace
   * info, categories etc.
   * @param workspaceId ID of the workspace. This is Workspace ID from the Properties blade in the Azure
   *                    portal.
   * @param options The options parameters.
   */
  get(
    workspaceId: string,
    options?: MetadataGetOptionalParams
  ): Promise<MetadataGetResponse> {
    return this.client.sendOperationRequest(
      { workspaceId, options },
      getOperationSpec
    );
  }

  /**
   * Retrieve the metadata information for the workspace, including its schema, functions, workspace
   * info, categories etc.
   * @param workspaceId ID of the workspace. This is Workspace ID from the Properties blade in the Azure
   *                    portal.
   * @param options The options parameters.
   */
  post(
    workspaceId: string,
    options?: MetadataPostOptionalParams
  ): Promise<MetadataPostResponse> {
    return this.client.sendOperationRequest(
      { workspaceId, options },
      postOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/workspaces/{workspaceId}/metadata",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MetadataResults
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.$host, Parameters.workspaceId],
  headerParameters: [Parameters.accept],
  serializer
};
const postOperationSpec: coreClient.OperationSpec = {
  path: "/workspaces/{workspaceId}/metadata",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MetadataResults
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.$host, Parameters.workspaceId],
  headerParameters: [Parameters.accept],
  serializer
};
