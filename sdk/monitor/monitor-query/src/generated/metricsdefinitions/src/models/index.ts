/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Represents collection of metric definitions. */
export interface MetricDefinitionCollection {
  /** the values for the metric definitions. */
  value: MetricDefinition[];
}

/** Metric definition class specifies the metadata for a metric. */
export interface MetricDefinition {
  /** Flag to indicate whether the dimension is required. */
  isDimensionRequired?: boolean;
  /** the resource identifier of the resource that emitted the metric. */
  resourceId?: string;
  /** the namespace the metric belongs to. */
  namespace?: string;
  /** the name and the display name of the metric, i.e. it is a localizable string. */
  name?: LocalizableString;
  /** Detailed description of this metric. */
  displayDescription?: string;
  /** Custom category name for this metric. */
  category?: string;
  /** The class of the metric. */
  metricClass?: MetricClass;
  /** The unit of the metric. */
  unit?: MetricUnit;
  /** the primary aggregation type value defining how to use the values for display. */
  primaryAggregationType?: AggregationType;
  /** the collection of what aggregation types are supported. */
  supportedAggregationTypes?: AggregationType[];
  /** the collection of what aggregation intervals are available to be queried. */
  metricAvailabilities?: MetricAvailability[];
  /** the resource identifier of the metric definition. */
  id?: string;
  /** the name and the display name of the dimension, i.e. it is a localizable string. */
  dimensions?: LocalizableString[];
}

/** The localizable string class. */
export interface LocalizableString {
  /** the invariant value. */
  value: string;
  /** the locale specific value. */
  localizedValue?: string;
}

/** Metric availability specifies the time grain (aggregation interval or frequency) and the retention period for that time grain. */
export interface MetricAvailability {
  /** the time grain specifies the aggregation interval for the metric. Expressed as a duration 'PT1M', 'P1D', etc. */
  timeGrain?: string;
  /** the retention period for the metric at the specified timegrain.  Expressed as a duration 'PT1M', 'P1D', etc. */
  retention?: string;
}

/** Describes the format of Error response. */
export interface ErrorResponse {
  /** Error code */
  code?: string;
  /** Error message indicating why the operation failed. */
  message?: string;
}

/** Known values of {@link ApiVersion201801} that the service accepts. */
export enum KnownApiVersion201801 {
  /** Api Version '2018-01-01' */
  TwoThousandEighteen0101 = "2018-01-01"
}

/**
 * Defines values for ApiVersion201801. \
 * {@link KnownApiVersion201801} can be used interchangeably with ApiVersion201801,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **2018-01-01**: Api Version '2018-01-01'
 */
export type ApiVersion201801 = string;

/** Known values of {@link MetricClass} that the service accepts. */
export enum KnownMetricClass {
  Availability = "Availability",
  Transactions = "Transactions",
  Errors = "Errors",
  Latency = "Latency",
  Saturation = "Saturation"
}

/**
 * Defines values for MetricClass. \
 * {@link KnownMetricClass} can be used interchangeably with MetricClass,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Availability** \
 * **Transactions** \
 * **Errors** \
 * **Latency** \
 * **Saturation**
 */
export type MetricClass = string;

/** Known values of {@link MetricUnit} that the service accepts. */
export enum KnownMetricUnit {
  Count = "Count",
  Bytes = "Bytes",
  Seconds = "Seconds",
  CountPerSecond = "CountPerSecond",
  BytesPerSecond = "BytesPerSecond",
  Percent = "Percent",
  MilliSeconds = "MilliSeconds",
  ByteSeconds = "ByteSeconds",
  Unspecified = "Unspecified",
  Cores = "Cores",
  MilliCores = "MilliCores",
  NanoCores = "NanoCores",
  BitsPerSecond = "BitsPerSecond"
}

/**
 * Defines values for MetricUnit. \
 * {@link KnownMetricUnit} can be used interchangeably with MetricUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Count** \
 * **Bytes** \
 * **Seconds** \
 * **CountPerSecond** \
 * **BytesPerSecond** \
 * **Percent** \
 * **MilliSeconds** \
 * **ByteSeconds** \
 * **Unspecified** \
 * **Cores** \
 * **MilliCores** \
 * **NanoCores** \
 * **BitsPerSecond**
 */
export type MetricUnit = string;
/** Defines values for AggregationType. */
export type AggregationType =
  | "None"
  | "Average"
  | "Count"
  | "Minimum"
  | "Maximum"
  | "Total";

/** Optional parameters. */
export interface MetricDefinitionsListOptionalParams
  extends coreClient.OperationOptions {
  /** Metric namespace to query metric definitions for. */
  metricnamespace?: string;
}

/** Contains response data for the list operation. */
export type MetricDefinitionsListResponse = MetricDefinitionCollection;

/** Optional parameters. */
export interface MonitorManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
