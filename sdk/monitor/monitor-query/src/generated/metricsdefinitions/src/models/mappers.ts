/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const MetricDefinitionCollection: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricDefinitionCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricDefinition"
            }
          }
        }
      }
    }
  }
};

export const MetricDefinition: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricDefinition",
    modelProperties: {
      isDimensionRequired: {
        serializedName: "isDimensionRequired",
        type: {
          name: "Boolean"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "LocalizableString"
        }
      },
      displayDescription: {
        serializedName: "displayDescription",
        type: {
          name: "String"
        }
      },
      category: {
        serializedName: "category",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      primaryAggregationType: {
        serializedName: "primaryAggregationType",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "Average",
            "Count",
            "Minimum",
            "Maximum",
            "Total"
          ]
        }
      },
      metricAvailabilities: {
        serializedName: "metricAvailabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricAvailability"
            }
          }
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LocalizableString"
            }
          }
        }
      }
    }
  }
};

export const LocalizableString: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LocalizableString",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricAvailability: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricAvailability",
    modelProperties: {
      timeGrain: {
        serializedName: "timeGrain",
        type: {
          name: "TimeSpan"
        }
      },
      retention: {
        serializedName: "retention",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const ErrorResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};
