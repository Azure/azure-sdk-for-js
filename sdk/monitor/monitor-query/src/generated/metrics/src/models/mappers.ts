/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const SubscriptionScopeMetricDefinitionCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubscriptionScopeMetricDefinitionCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubscriptionScopeMetricDefinition"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubscriptionScopeMetricDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubscriptionScopeMetricDefinition",
    modelProperties: {
      isDimensionRequired: {
        serializedName: "isDimensionRequired",
        type: {
          name: "Boolean"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      namespace: {
        serializedName: "namespace",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "LocalizableString"
        }
      },
      displayDescription: {
        serializedName: "displayDescription",
        type: {
          name: "String"
        }
      },
      category: {
        serializedName: "category",
        type: {
          name: "String"
        }
      },
      metricClass: {
        serializedName: "metricClass",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      primaryAggregationType: {
        serializedName: "primaryAggregationType",
        type: {
          name: "String"
        }
      },
      supportedAggregationTypes: {
        serializedName: "supportedAggregationTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      metricAvailabilities: {
        serializedName: "metricAvailabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricAvailability"
            }
          }
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LocalizableString"
            }
          }
        }
      }
    }
  }
};

export const LocalizableString: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LocalizableString",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricAvailability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricAvailability",
    modelProperties: {
      timeGrain: {
        serializedName: "timeGrain",
        type: {
          name: "TimeSpan"
        }
      },
      retention: {
        serializedName: "retention",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const MetricsErrorContract: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricsErrorContract",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const MetricDefinitionCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricDefinitionCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricDefinition"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricDefinition",
    modelProperties: {
      isDimensionRequired: {
        serializedName: "isDimensionRequired",
        type: {
          name: "Boolean"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      namespace: {
        serializedName: "namespace",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "LocalizableString"
        }
      },
      displayDescription: {
        serializedName: "displayDescription",
        type: {
          name: "String"
        }
      },
      category: {
        serializedName: "category",
        type: {
          name: "String"
        }
      },
      metricClass: {
        serializedName: "metricClass",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      primaryAggregationType: {
        serializedName: "primaryAggregationType",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "Average",
            "Count",
            "Minimum",
            "Maximum",
            "Total"
          ]
        }
      },
      supportedAggregationTypes: {
        serializedName: "supportedAggregationTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "None",
                "Average",
                "Count",
                "Minimum",
                "Maximum",
                "Total"
              ]
            }
          }
        }
      },
      metricAvailabilities: {
        serializedName: "metricAvailabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricAvailability"
            }
          }
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LocalizableString"
            }
          }
        }
      }
    }
  }
};

export const SubscriptionScopeMetricResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubscriptionScopeMetricResponse",
    modelProperties: {
      cost: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "cost",
        type: {
          name: "Number"
        }
      },
      timespan: {
        serializedName: "timespan",
        required: true,
        type: {
          name: "String"
        }
      },
      interval: {
        serializedName: "interval",
        type: {
          name: "TimeSpan"
        }
      },
      namespace: {
        serializedName: "namespace",
        type: {
          name: "String"
        }
      },
      resourceregion: {
        serializedName: "resourceregion",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubscriptionScopeMetric"
            }
          }
        }
      }
    }
  }
};

export const SubscriptionScopeMetric: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubscriptionScopeMetric",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "LocalizableString"
        }
      },
      displayDescription: {
        serializedName: "displayDescription",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "errorCode",
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        required: true,
        type: {
          name: "String"
        }
      },
      timeseries: {
        serializedName: "timeseries",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimeSeriesElement"
            }
          }
        }
      }
    }
  }
};

export const TimeSeriesElement: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TimeSeriesElement",
    modelProperties: {
      metadatavalues: {
        serializedName: "metadatavalues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataValue"
            }
          }
        }
      },
      data: {
        serializedName: "data",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricValue"
            }
          }
        }
      }
    }
  }
};

export const MetadataValue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetadataValue",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "LocalizableString"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricValue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricValue",
    modelProperties: {
      timeStamp: {
        serializedName: "timeStamp",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      average: {
        serializedName: "average",
        type: {
          name: "Number"
        }
      },
      minimum: {
        serializedName: "minimum",
        type: {
          name: "Number"
        }
      },
      maximum: {
        serializedName: "maximum",
        type: {
          name: "Number"
        }
      },
      total: {
        serializedName: "total",
        type: {
          name: "Number"
        }
      },
      count: {
        serializedName: "count",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SubscriptionScopeMetricsRequestBodyParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubscriptionScopeMetricsRequestBodyParameters",
    modelProperties: {
      timespan: {
        serializedName: "timespan",
        type: {
          name: "String"
        }
      },
      interval: {
        serializedName: "interval",
        type: {
          name: "TimeSpan"
        }
      },
      metricNames: {
        serializedName: "metricNames",
        type: {
          name: "String"
        }
      },
      aggregation: {
        serializedName: "aggregation",
        type: {
          name: "String"
        }
      },
      filter: {
        serializedName: "filter",
        type: {
          name: "String"
        }
      },
      top: {
        serializedName: "top",
        type: {
          name: "Number"
        }
      },
      orderBy: {
        serializedName: "orderBy",
        type: {
          name: "String"
        }
      },
      rollUpBy: {
        serializedName: "rollUpBy",
        type: {
          name: "String"
        }
      },
      resultType: {
        serializedName: "resultType",
        type: {
          name: "String"
        }
      },
      metricNamespace: {
        serializedName: "metricNamespace",
        type: {
          name: "String"
        }
      },
      autoAdjustTimegrain: {
        serializedName: "autoAdjustTimegrain",
        type: {
          name: "Boolean"
        }
      },
      validateDimensions: {
        serializedName: "validateDimensions",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ResourceScopeMetricResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceScopeMetricResponse",
    modelProperties: {
      cost: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "cost",
        type: {
          name: "Number"
        }
      },
      timespan: {
        serializedName: "timespan",
        required: true,
        type: {
          name: "String"
        }
      },
      interval: {
        serializedName: "interval",
        type: {
          name: "TimeSpan"
        }
      },
      namespace: {
        serializedName: "namespace",
        type: {
          name: "String"
        }
      },
      resourceregion: {
        serializedName: "resourceregion",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceScopeMetric"
            }
          }
        }
      }
    }
  }
};

export const ResourceScopeMetric: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceScopeMetric",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "LocalizableString"
        }
      },
      displayDescription: {
        serializedName: "displayDescription",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "errorCode",
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        required: true,
        type: {
          name: "String"
        }
      },
      timeseries: {
        serializedName: "timeseries",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimeSeriesElement"
            }
          }
        }
      }
    }
  }
};
