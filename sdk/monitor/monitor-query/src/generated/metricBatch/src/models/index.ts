/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** The comma separated list of resource IDs to query metrics for. */
export interface ResourceIdList {
  /** The list of resource IDs to query metrics for. */
  resourceids?: string[];
}

/** The metrics result for a resource. */
export interface MetricResultsResponse {
  /** The collection of metric data responses per resource, per metric. */
  values?: MetricResultsResponseValuesItem[];
}

export interface MetricResultsResponseValuesItem {
  /** The start time, in datetime format, for which the data was retrieved. */
  starttime: string;
  /** The end time, in datetime format, for which the data was retrieved. */
  endtime: string;
  /** The interval (window size) for which the metric data was returned in. Follows the IS8601/RFC3339 duration format (e.g. 'P1D' for 1 day). This may be adjusted in the future and returned back from what was originally requested.  This is not present if a metadata request was made. */
  interval?: string;
  /** The namespace of the metrics been queried */
  namespace?: string;
  /** The region of the resource been queried for metrics. */
  resourceregion?: string;
  /** The resource that has been queried for metrics. */
  resourceid?: string;
  /** The value of the collection. */
  value: Metric[];
}

/** The result data of a query. */
export interface Metric {
  /** The metric Id. */
  id: string;
  /** The name and the display name of the metric, i.e. it is localizable string. */
  name: LocalizableString;
  /** Description of this metric */
  displayDescription: string;
  /** The resource type of the metric resource. */
  type: string;
  /** The unit of the metric. */
  unit: MetricUnit;
  /** The time series returned when a data query is performed. */
  timeseries: TimeSeriesElement[];
  /** 'Success' or the error details on query failures for this metric. */
  errorCode?: string;
  /** Error message encountered querying this specific metric. */
  errorMessage?: string;
}

/** The localizable string class. */
export interface LocalizableString {
  /** The invariant value. */
  value: string;
  /** The display name. */
  localizedValue?: string;
}

/** A time series result type. The discriminator value is always TimeSeries in this case. */
export interface TimeSeriesElement {
  /** The metadata values returned if filter was specified in the call. */
  metadatavalues?: MetadataValue[];
  /** An array of data points representing the metric values.  This is only returned if a result type of data is specified. */
  data?: MetricValue[];
}

/** Represents a metric metadata value. */
export interface MetadataValue {
  /** The name of the metadata. */
  name?: LocalizableString;
  /** The value of the metadata. */
  value?: string;
}

/** Represents a metric value. */
export interface MetricValue {
  /** The timestamp for the metric value in ISO 8601 format. */
  timeStamp: Date;
  /** The average value in the time range. */
  average?: number;
  /** The least value in the time range. */
  minimum?: number;
  /** The greatest value in the time range. */
  maximum?: number;
  /** The sum of all of the values in the time range. */
  total?: number;
  /** The number of samples in the time range. Can be used to determine the number of values that contributed to the average value. */
  count?: number;
}

/** The response to a metrics query that results in a bad request, with optional additional information. */
export interface AdditionalInfoErrorResponse {
  /** Top level error object that contains all relevant information. */
  error: AdditionalInfoErrorResponseError;
}

/** Top level error object that contains all relevant information. */
export interface AdditionalInfoErrorResponseError {
  /** Additional information about the error */
  additionalInfo?: AdditionalInfoErrorResponseErrorAdditionalInfoItem[];
  /** Error code */
  code: string;
  /** Error message indicating why the operation failed. */
  message: string;
}

export interface AdditionalInfoErrorResponseErrorAdditionalInfoItem {
  /** The type of the info property (e.g. string). */
  type?: string;
  /** Additional information related to the error. */
  info?: string;
}

/** Defines headers for Metrics_batch operation. */
export interface MetricsBatchExceptionHeaders {
  /** Error code for specific error that occurred. */
  xMsErrorCode?: string;
}

/** Known values of {@link ApiVersion20230501Preview} that the service accepts. */
export enum KnownApiVersion20230501Preview {
  /** Api Version '2023-05-01-preview' */
  TwoThousandTwentyThree0501Preview = "2023-05-01-preview"
}

/**
 * Defines values for ApiVersion20230501Preview. \
 * {@link KnownApiVersion20230501Preview} can be used interchangeably with ApiVersion20230501Preview,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **2023-05-01-preview**: Api Version '2023-05-01-preview'
 */
export type ApiVersion20230501Preview = string;
/** Defines values for MetricUnit. */
export type MetricUnit =
  | "Count"
  | "Bytes"
  | "Seconds"
  | "CountPerSecond"
  | "BytesPerSecond"
  | "Percent"
  | "MilliSeconds"
  | "ByteSeconds"
  | "Unspecified"
  | "Cores"
  | "MilliCores"
  | "NanoCores"
  | "BitsPerSecond";

/** Optional parameters. */
export interface MetricsBatchOptionalParams
  extends coreClient.OperationOptions {
  /**
   * The start time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'. If you have specified the endtime parameter, then this parameter is required.
   * If only starttime is specified, then endtime defaults to the current time.
   * If no time interval is specified, the default is 1 hour.
   */
  starttime?: string;
  /** The end time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'. */
  endtime?: string;
  /**
   * The interval (i.e. timegrain) of the query.
   * *Examples: PT15M, PT1H, P1D*
   */
  interval?: string;
  /**
   * The list of aggregation types (comma separated) to retrieve.
   * *Examples: average, minimum, maximum*
   */
  aggregation?: string;
  /**
   * The maximum number of records to retrieve per resource ID in the request.
   * Valid only if filter is specified.
   * Defaults to 10.
   */
  top?: number;
  /**
   * The aggregation to use for sorting results and the direction of the sort.
   * Only one order can be specified.
   * *Examples: sum asc*
   */
  orderby?: string;
  /** The filter is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**. */
  filter?: string;
}

/** Contains response data for the batch operation. */
export type MetricsBatchResponse = MetricResultsResponse;

/** Optional parameters. */
export interface AzureMonitorMetricBatchOptionalParams
  extends coreClient.ServiceClientOptions {
  /** Overrides client endpoint. */
  endpoint?: string;
}
