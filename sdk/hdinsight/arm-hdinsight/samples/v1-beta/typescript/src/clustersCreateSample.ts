/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import {
  ClusterCreateParametersExtended,
  HDInsightManagementClient
} from "@azure/arm-hdinsight";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";

dotenv.config();

/**
 * This sample demonstrates how to Creates a new HDInsight cluster with the specified parameters.
 *
 * @summary Creates a new HDInsight cluster with the specified parameters.
 * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/preview/2023-04-15-preview/examples/CreateHDInsightClusterWithAutoscaleConfig.json
 */
async function createHdInsightClusterWithAutoscaleConfiguration() {
  const subscriptionId = process.env["HDINSIGHT_SUBSCRIPTION_ID"] || "subid";
  const resourceGroupName = process.env["HDINSIGHT_RESOURCE_GROUP"] || "rg1";
  const clusterName = "cluster1";
  const parameters: ClusterCreateParametersExtended = {
    properties: {
      clusterDefinition: {
        componentVersion: { hadoop: "2.7" },
        configurations: {
          gateway: {
            "restAuthCredential.isEnabled": true,
            "restAuthCredential.password": "**********",
            "restAuthCredential.username": "admin"
          }
        },
        kind: "hadoop"
      },
      clusterVersion: "3.6",
      computeProfile: {
        roles: [
          {
            name: "workernode",
            autoscaleConfiguration: {
              capacity: {},
              recurrence: {
                schedule: [
                  {
                    days: [
                      "Monday",
                      "Tuesday",
                      "Wednesday",
                      "Thursday",
                      "Friday"
                    ],
                    timeAndCapacity: {
                      maxInstanceCount: 3,
                      minInstanceCount: 3,
                      time: "09:00"
                    }
                  },
                  {
                    days: [
                      "Monday",
                      "Tuesday",
                      "Wednesday",
                      "Thursday",
                      "Friday"
                    ],
                    timeAndCapacity: {
                      maxInstanceCount: 6,
                      minInstanceCount: 6,
                      time: "18:00"
                    }
                  },
                  {
                    days: ["Saturday", "Sunday"],
                    timeAndCapacity: {
                      maxInstanceCount: 2,
                      minInstanceCount: 2,
                      time: "09:00"
                    }
                  },
                  {
                    days: ["Saturday", "Sunday"],
                    timeAndCapacity: {
                      maxInstanceCount: 4,
                      minInstanceCount: 4,
                      time: "18:00"
                    }
                  }
                ],
                timeZone: "China Standard Time"
              }
            },
            dataDisksGroups: [],
            hardwareProfile: { vmSize: "Standard_D4_V2" },
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                username: "sshuser"
              }
            },
            scriptActions: [],
            targetInstanceCount: 4,
            virtualNetworkProfile: {}
          }
        ]
      },
      osType: "Linux",
      storageProfile: {
        storageaccounts: [
          {
            name: "mystorage.blob.core.windows.net",
            container: "hdinsight-autoscale-tes-2019-06-18t05-49-16-591z",
            enableSecureChannel: true,
            isDefault: true,
            key: "storagekey"
          }
        ]
      },
      tier: "Standard"
    }
  };
  const credential = new DefaultAzureCredential();
  const client = new HDInsightManagementClient(credential, subscriptionId);
  const result = await client.clusters.beginCreateAndWait(
    resourceGroupName,
    clusterName,
    parameters
  );
  console.log(result);
}

/**
 * This sample demonstrates how to Creates a new HDInsight cluster with the specified parameters.
 *
 * @summary Creates a new HDInsight cluster with the specified parameters.
 * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/preview/2023-04-15-preview/examples/CreateLinuxHadoopAdlsGen2.json
 */
async function createHadoopClusterWithAzureDataLakeStorageGen2() {
  const subscriptionId = process.env["HDINSIGHT_SUBSCRIPTION_ID"] || "subid";
  const resourceGroupName = process.env["HDINSIGHT_RESOURCE_GROUP"] || "rg1";
  const clusterName = "cluster1";
  const parameters: ClusterCreateParametersExtended = {
    properties: {
      clusterDefinition: {
        configurations: {
          gateway: {
            "restAuthCredential.isEnabled": "true",
            "restAuthCredential.password": "**********",
            "restAuthCredential.username": "admin"
          }
        },
        kind: "Hadoop"
      },
      clusterVersion: "3.6",
      computeProfile: {
        roles: [
          {
            name: "headnode",
            hardwareProfile: { vmSize: "Standard_D3_V2" },
            minInstanceCount: 1,
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                username: "sshuser"
              }
            },
            targetInstanceCount: 2
          },
          {
            name: "workernode",
            hardwareProfile: { vmSize: "Standard_D3_V2" },
            minInstanceCount: 1,
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                username: "sshuser"
              }
            },
            targetInstanceCount: 4
          },
          {
            name: "zookeepernode",
            hardwareProfile: { vmSize: "Small" },
            minInstanceCount: 1,
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                username: "sshuser"
              }
            },
            targetInstanceCount: 3
          }
        ]
      },
      osType: "Linux",
      storageProfile: {
        storageaccounts: [
          {
            name: "mystorage.dfs.core.windows.net",
            enableSecureChannel: true,
            fileSystem: "default",
            isDefault: true,
            key: "storagekey"
          }
        ]
      },
      tier: "Standard"
    },
    tags: { key1: "val1" }
  };
  const credential = new DefaultAzureCredential();
  const client = new HDInsightManagementClient(credential, subscriptionId);
  const result = await client.clusters.beginCreateAndWait(
    resourceGroupName,
    clusterName,
    parameters
  );
  console.log(result);
}

/**
 * This sample demonstrates how to Creates a new HDInsight cluster with the specified parameters.
 *
 * @summary Creates a new HDInsight cluster with the specified parameters.
 * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/preview/2023-04-15-preview/examples/CreateLinuxHadoopSshPassword.json
 */
async function createHadoopOnLinuxClusterWithSshPassword() {
  const subscriptionId = process.env["HDINSIGHT_SUBSCRIPTION_ID"] || "subid";
  const resourceGroupName = process.env["HDINSIGHT_RESOURCE_GROUP"] || "rg1";
  const clusterName = "cluster1";
  const parameters: ClusterCreateParametersExtended = {
    properties: {
      clusterDefinition: {
        configurations: {
          gateway: {
            "restAuthCredential.isEnabled": "true",
            "restAuthCredential.password": "**********",
            "restAuthCredential.username": "admin"
          }
        },
        kind: "Hadoop"
      },
      clusterVersion: "3.5",
      computeProfile: {
        roles: [
          {
            name: "headnode",
            hardwareProfile: { vmSize: "Standard_D3_V2" },
            minInstanceCount: 1,
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                username: "sshuser"
              }
            },
            targetInstanceCount: 2
          },
          {
            name: "workernode",
            hardwareProfile: { vmSize: "Standard_D3_V2" },
            minInstanceCount: 1,
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                username: "sshuser"
              }
            },
            targetInstanceCount: 4
          },
          {
            name: "zookeepernode",
            hardwareProfile: { vmSize: "Small" },
            minInstanceCount: 1,
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                username: "sshuser"
              }
            },
            targetInstanceCount: 3
          }
        ]
      },
      osType: "Linux",
      storageProfile: {
        storageaccounts: [
          {
            name: "mystorage.blob.core.windows.net",
            container: "containername",
            enableSecureChannel: true,
            isDefault: true,
            key: "storagekey"
          }
        ]
      },
      tier: "Standard"
    },
    tags: { key1: "val1" }
  };
  const credential = new DefaultAzureCredential();
  const client = new HDInsightManagementClient(credential, subscriptionId);
  const result = await client.clusters.beginCreateAndWait(
    resourceGroupName,
    clusterName,
    parameters
  );
  console.log(result);
}

/**
 * This sample demonstrates how to Creates a new HDInsight cluster with the specified parameters.
 *
 * @summary Creates a new HDInsight cluster with the specified parameters.
 * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/preview/2023-04-15-preview/examples/CreateLinuxHadoopSshPublicKey.json
 */
async function createHadoopOnLinuxClusterWithSshPublicKey() {
  const subscriptionId = process.env["HDINSIGHT_SUBSCRIPTION_ID"] || "subid";
  const resourceGroupName = process.env["HDINSIGHT_RESOURCE_GROUP"] || "rg1";
  const clusterName = "cluster1";
  const parameters: ClusterCreateParametersExtended = {
    properties: {
      clusterDefinition: {
        configurations: {
          gateway: {
            "restAuthCredential.isEnabled": true,
            "restAuthCredential.password": "**********",
            "restAuthCredential.username": "admin"
          }
        },
        kind: "Hadoop"
      },
      clusterVersion: "3.5",
      computeProfile: {
        roles: [
          {
            name: "headnode",
            hardwareProfile: { vmSize: "Standard_D3_V2" },
            minInstanceCount: 1,
            osProfile: {
              linuxOperatingSystemProfile: {
                sshProfile: { publicKeys: [{ certificateData: "**********" }] },
                username: "sshuser"
              }
            },
            targetInstanceCount: 2
          },
          {
            name: "workernode",
            hardwareProfile: { vmSize: "Standard_D3_V2" },
            minInstanceCount: 1,
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                username: "sshuser"
              }
            },
            targetInstanceCount: 4
          },
          {
            name: "zookeepernode",
            hardwareProfile: { vmSize: "Small" },
            minInstanceCount: 1,
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                username: "sshuser"
              }
            },
            targetInstanceCount: 3
          }
        ]
      },
      osType: "Linux",
      storageProfile: {
        storageaccounts: [
          {
            name: "mystorage.blob.core.windows.net",
            container: "containername",
            enableSecureChannel: true,
            isDefault: true,
            key: "storagekey"
          }
        ]
      },
      tier: "Standard"
    },
    tags: { key1: "val1" }
  };
  const credential = new DefaultAzureCredential();
  const client = new HDInsightManagementClient(credential, subscriptionId);
  const result = await client.clusters.beginCreateAndWait(
    resourceGroupName,
    clusterName,
    parameters
  );
  console.log(result);
}

/**
 * This sample demonstrates how to Creates a new HDInsight cluster with the specified parameters.
 *
 * @summary Creates a new HDInsight cluster with the specified parameters.
 * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/preview/2023-04-15-preview/examples/CreateKafkaClusterWithKafkaRestProxy.json
 */
async function createKafkaClusterWithKafkaRestProxy() {
  const subscriptionId = process.env["HDINSIGHT_SUBSCRIPTION_ID"] || "subid";
  const resourceGroupName = process.env["HDINSIGHT_RESOURCE_GROUP"] || "rg1";
  const clusterName = "cluster1";
  const parameters: ClusterCreateParametersExtended = {
    properties: {
      clusterDefinition: {
        componentVersion: { kafka: "2.1" },
        configurations: {
          gateway: {
            "restAuthCredential.isEnabled": true,
            "restAuthCredential.password": "**********",
            "restAuthCredential.username": "admin"
          }
        },
        kind: "kafka"
      },
      clusterVersion: "4.0",
      computeProfile: {
        roles: [
          {
            name: "headnode",
            hardwareProfile: { vmSize: "Large" },
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                username: "sshuser"
              }
            },
            targetInstanceCount: 2
          },
          {
            name: "workernode",
            dataDisksGroups: [{ disksPerNode: 8 }],
            hardwareProfile: { vmSize: "Large" },
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                username: "sshuser"
              }
            },
            targetInstanceCount: 3
          },
          {
            name: "zookeepernode",
            hardwareProfile: { vmSize: "Small" },
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                username: "sshuser"
              }
            },
            targetInstanceCount: 3
          },
          {
            name: "kafkamanagementnode",
            hardwareProfile: { vmSize: "Standard_D4_v2" },
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                username: "kafkauser"
              }
            },
            targetInstanceCount: 2
          }
        ]
      },
      kafkaRestProperties: {
        clientGroupInfo: {
          groupId: "00000000-0000-0000-0000-111111111111",
          groupName: "Kafka security group name"
        }
      },
      osType: "Linux",
      storageProfile: {
        storageaccounts: [
          {
            name: "mystorage.blob.core.windows.net",
            container: "containername",
            enableSecureChannel: true,
            isDefault: true,
            key: "storagekey"
          }
        ]
      },
      tier: "Standard"
    }
  };
  const credential = new DefaultAzureCredential();
  const client = new HDInsightManagementClient(credential, subscriptionId);
  const result = await client.clusters.beginCreateAndWait(
    resourceGroupName,
    clusterName,
    parameters
  );
  console.log(result);
}

/**
 * This sample demonstrates how to Creates a new HDInsight cluster with the specified parameters.
 *
 * @summary Creates a new HDInsight cluster with the specified parameters.
 * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/preview/2023-04-15-preview/examples/CreateLinuxHadoopSecureHadoop.json
 */
async function createSecureHadoopCluster() {
  const subscriptionId = process.env["HDINSIGHT_SUBSCRIPTION_ID"] || "subid";
  const resourceGroupName = process.env["HDINSIGHT_RESOURCE_GROUP"] || "rg1";
  const clusterName = "cluster1";
  const parameters: ClusterCreateParametersExtended = {
    properties: {
      clusterDefinition: {
        configurations: {
          gateway: {
            "restAuthCredential.isEnabled": true,
            "restAuthCredential.password": "**********",
            "restAuthCredential.username": "admin"
          }
        },
        kind: "Hadoop"
      },
      clusterVersion: "3.5",
      computeProfile: {
        roles: [
          {
            name: "headnode",
            hardwareProfile: { vmSize: "Standard_D3_V2" },
            minInstanceCount: 1,
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                sshProfile: { publicKeys: [{ certificateData: "**********" }] },
                username: "sshuser"
              }
            },
            scriptActions: [],
            targetInstanceCount: 2,
            virtualNetworkProfile: {
              id:
                "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname",
              subnet:
                "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"
            }
          },
          {
            name: "workernode",
            hardwareProfile: { vmSize: "Standard_D3_V2" },
            minInstanceCount: 1,
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                sshProfile: { publicKeys: [{ certificateData: "**********" }] },
                username: "sshuser"
              }
            },
            scriptActions: [],
            targetInstanceCount: 4,
            virtualNetworkProfile: {
              id:
                "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname",
              subnet:
                "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"
            }
          },
          {
            name: "zookeepernode",
            hardwareProfile: { vmSize: "Small" },
            minInstanceCount: 1,
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                sshProfile: { publicKeys: [{ certificateData: "**********" }] },
                username: "sshuser"
              }
            },
            scriptActions: [],
            targetInstanceCount: 3,
            virtualNetworkProfile: {
              id:
                "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname",
              subnet:
                "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"
            }
          }
        ]
      },
      osType: "Linux",
      securityProfile: {
        clusterUsersGroupDNs: ["hdiusers"],
        directoryType: "ActiveDirectory",
        domain: "DomainName",
        domainUserPassword: "**********",
        domainUsername: "DomainUsername",
        ldapsUrls: ["ldaps://10.10.0.4:636"],
        organizationalUnitDN: "OU=Hadoop,DC=hdinsight,DC=test"
      },
      storageProfile: {
        storageaccounts: [
          {
            name: "mystorage.blob.core.windows.net",
            container: "containername",
            enableSecureChannel: true,
            isDefault: true,
            key: "storage account key"
          }
        ]
      },
      tier: "Premium"
    },
    tags: { key1: "val1" }
  };
  const credential = new DefaultAzureCredential();
  const client = new HDInsightManagementClient(credential, subscriptionId);
  const result = await client.clusters.beginCreateAndWait(
    resourceGroupName,
    clusterName,
    parameters
  );
  console.log(result);
}

/**
 * This sample demonstrates how to Creates a new HDInsight cluster with the specified parameters.
 *
 * @summary Creates a new HDInsight cluster with the specified parameters.
 * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/preview/2023-04-15-preview/examples/CreateLinuxSparkSshPassword.json
 */
async function createSparkOnLinuxClusterWithSshPassword() {
  const subscriptionId = process.env["HDINSIGHT_SUBSCRIPTION_ID"] || "subid";
  const resourceGroupName = process.env["HDINSIGHT_RESOURCE_GROUP"] || "rg1";
  const clusterName = "cluster1";
  const parameters: ClusterCreateParametersExtended = {
    properties: {
      clusterDefinition: {
        componentVersion: { spark: "2.0" },
        configurations: {
          gateway: {
            "restAuthCredential.isEnabled": true,
            "restAuthCredential.password": "**********",
            "restAuthCredential.username": "admin"
          }
        },
        kind: "Spark"
      },
      clusterVersion: "3.5",
      computeProfile: {
        roles: [
          {
            name: "headnode",
            hardwareProfile: { vmSize: "Standard_D12_V2" },
            minInstanceCount: 1,
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                username: "sshuser"
              }
            },
            targetInstanceCount: 2
          },
          {
            name: "workernode",
            hardwareProfile: { vmSize: "Standard_D4_V2" },
            minInstanceCount: 1,
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                username: "sshuser"
              }
            },
            targetInstanceCount: 4
          }
        ]
      },
      osType: "Linux",
      storageProfile: {
        storageaccounts: [
          {
            name: "mystorage.blob.core.windows.net",
            container: "containername",
            enableSecureChannel: true,
            isDefault: true,
            key: "storageapikey*"
          }
        ]
      },
      tier: "Standard"
    },
    tags: { key1: "val1" }
  };
  const credential = new DefaultAzureCredential();
  const client = new HDInsightManagementClient(credential, subscriptionId);
  const result = await client.clusters.beginCreateAndWait(
    resourceGroupName,
    clusterName,
    parameters
  );
  console.log(result);
}

/**
 * This sample demonstrates how to Creates a new HDInsight cluster with the specified parameters.
 *
 * @summary Creates a new HDInsight cluster with the specified parameters.
 * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/preview/2023-04-15-preview/examples/CreateHDInsightClusterWithTLS12.json
 */
async function createClusterWithTls12() {
  const subscriptionId = process.env["HDINSIGHT_SUBSCRIPTION_ID"] || "subid";
  const resourceGroupName = process.env["HDINSIGHT_RESOURCE_GROUP"] || "rg1";
  const clusterName = "cluster1";
  const parameters: ClusterCreateParametersExtended = {
    properties: {
      clusterDefinition: {
        configurations: {
          gateway: {
            "restAuthCredential.isEnabled": true,
            "restAuthCredential.password": "**********",
            "restAuthCredential.username": "admin"
          }
        },
        kind: "Hadoop"
      },
      clusterVersion: "3.6",
      computeProfile: {
        roles: [
          {
            name: "headnode",
            hardwareProfile: { vmSize: "Large" },
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                username: "sshuser"
              }
            },
            targetInstanceCount: 2
          },
          {
            name: "workernode",
            hardwareProfile: { vmSize: "Large" },
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                username: "sshuser"
              }
            },
            targetInstanceCount: 3
          },
          {
            name: "zookeepernode",
            hardwareProfile: { vmSize: "Small" },
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                username: "sshuser"
              }
            },
            targetInstanceCount: 3
          }
        ]
      },
      minSupportedTlsVersion: "1.2",
      osType: "Linux",
      storageProfile: {
        storageaccounts: [
          {
            name: "mystorage.blob.core.windows.net",
            container: "default8525",
            enableSecureChannel: true,
            isDefault: true,
            key: "storagekey"
          }
        ]
      },
      tier: "Standard"
    }
  };
  const credential = new DefaultAzureCredential();
  const client = new HDInsightManagementClient(credential, subscriptionId);
  const result = await client.clusters.beginCreateAndWait(
    resourceGroupName,
    clusterName,
    parameters
  );
  console.log(result);
}

/**
 * This sample demonstrates how to Creates a new HDInsight cluster with the specified parameters.
 *
 * @summary Creates a new HDInsight cluster with the specified parameters.
 * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/preview/2023-04-15-preview/examples/CreateHDInsightClusterWithAvailabilityZones.json
 */
async function createClusterWithAvailabilityZones() {
  const subscriptionId = process.env["HDINSIGHT_SUBSCRIPTION_ID"] || "subId";
  const resourceGroupName = process.env["HDINSIGHT_RESOURCE_GROUP"] || "rg1";
  const clusterName = "cluster1";
  const parameters: ClusterCreateParametersExtended = {
    properties: {
      clusterDefinition: {
        configurations: {
          "ambari-conf": {
            "database-name": "{ambari database name}",
            "database-server": "{sql server name}.database.windows.net",
            "database-user-name": "**********",
            "database-user-password": "**********"
          },
          gateway: {
            "restAuthCredential.isEnabled": true,
            "restAuthCredential.password": "**********",
            "restAuthCredential.username": "admin"
          },
          "hive-env": {
            hive_database:
              "Existing MSSQL Server database with SQL authentication",
            hive_database_name: "{hive metastore name}",
            hive_database_type: "mssql",
            hive_existing_mssql_server_database: "{hive metastore name}",
            hive_existing_mssql_server_host:
              "{sql server name}.database.windows.net",
            hive_hostname: "{sql server name}.database.windows.net"
          },
          "hive-site": {
            "javax.jdo.option.ConnectionDriverName":
              "com.microsoft.sqlserver.jdbc.SQLServerDriver",
            "javax.jdo.option.ConnectionPassword": "**********!",
            "javax.jdo.option.ConnectionURL":
              "jdbc:sqlserver://{sql server name}.database.windows.net;database={hive metastore name};encrypt=true;trustServerCertificate=true;create=false;loginTimeout=300;sendStringParametersAsUnicode=true;prepareSQL=0",
            "javax.jdo.option.ConnectionUserName": "**********"
          },
          "oozie-env": {
            oozie_database:
              "Existing MSSQL Server database with SQL authentication",
            oozie_database_name: "{oozie metastore name}",
            oozie_database_type: "mssql",
            oozie_existing_mssql_server_database: "{oozie metastore name}",
            oozie_existing_mssql_server_host:
              "{sql server name}.database.windows.net",
            oozie_hostname: "{sql server name}.database.windows.net"
          },
          "oozie-site": {
            "oozie.db.schema.name": "oozie",
            "oozie.service.JPAService.jdbc.driver":
              "com.microsoft.sqlserver.jdbc.SQLServerDriver",
            "oozie.service.JPAService.jdbc.password": "**********",
            "oozie.service.JPAService.jdbc.url":
              "jdbc:sqlserver://{sql server name}.database.windows.net;database={oozie metastore name};encrypt=true;trustServerCertificate=true;create=false;loginTimeout=300;sendStringParametersAsUnicode=true;prepareSQL=0",
            "oozie.service.JPAService.jdbc.username": "**********"
          }
        },
        kind: "hadoop"
      },
      clusterVersion: "3.6",
      computeProfile: {
        roles: [
          {
            name: "headnode",
            hardwareProfile: { vmSize: "standard_d3" },
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                sshProfile: { publicKeys: [{ certificateData: "**********" }] },
                username: "sshuser"
              }
            },
            targetInstanceCount: 2,
            virtualNetworkProfile: {
              id:
                "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname",
              subnet:
                "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"
            }
          },
          {
            name: "workernode",
            hardwareProfile: { vmSize: "standard_d3" },
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                sshProfile: { publicKeys: [{ certificateData: "**********" }] },
                username: "sshuser"
              }
            },
            targetInstanceCount: 2,
            virtualNetworkProfile: {
              id:
                "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname",
              subnet:
                "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"
            }
          }
        ]
      },
      osType: "Linux",
      storageProfile: {
        storageaccounts: [
          {
            name: "mystorage",
            container: "containername",
            enableSecureChannel: true,
            isDefault: true,
            key: "storage account key"
          }
        ]
      }
    },
    zones: ["1"]
  };
  const credential = new DefaultAzureCredential();
  const client = new HDInsightManagementClient(credential, subscriptionId);
  const result = await client.clusters.beginCreateAndWait(
    resourceGroupName,
    clusterName,
    parameters
  );
  console.log(result);
}

/**
 * This sample demonstrates how to Creates a new HDInsight cluster with the specified parameters.
 *
 * @summary Creates a new HDInsight cluster with the specified parameters.
 * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/preview/2023-04-15-preview/examples/CreateHDInsightClusterWithComputeIsolationProperties.json
 */
async function createClusterWithComputeIsolationProperties() {
  const subscriptionId = process.env["HDINSIGHT_SUBSCRIPTION_ID"] || "subId";
  const resourceGroupName = process.env["HDINSIGHT_RESOURCE_GROUP"] || "rg1";
  const clusterName = "cluster1";
  const parameters: ClusterCreateParametersExtended = {
    properties: {
      clusterDefinition: {
        configurations: {
          gateway: {
            "restAuthCredential.isEnabled": true,
            "restAuthCredential.password": "**********",
            "restAuthCredential.username": "admin"
          }
        },
        kind: "hadoop"
      },
      clusterVersion: "3.6",
      computeIsolationProperties: {
        enableComputeIsolation: true,
        hostSku: undefined
      },
      computeProfile: {
        roles: [
          {
            name: "headnode",
            hardwareProfile: { vmSize: "standard_d3" },
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                sshProfile: { publicKeys: [{ certificateData: "**********" }] },
                username: "sshuser"
              }
            },
            targetInstanceCount: 2
          },
          {
            name: "workernode",
            hardwareProfile: { vmSize: "standard_d3" },
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                sshProfile: { publicKeys: [{ certificateData: "**********" }] },
                username: "sshuser"
              }
            },
            targetInstanceCount: 2
          }
        ]
      },
      osType: "Linux",
      storageProfile: {
        storageaccounts: [
          {
            name: "mystorage",
            container: "containername",
            enableSecureChannel: true,
            isDefault: true,
            key: "storage account key"
          }
        ]
      }
    }
  };
  const credential = new DefaultAzureCredential();
  const client = new HDInsightManagementClient(credential, subscriptionId);
  const result = await client.clusters.beginCreateAndWait(
    resourceGroupName,
    clusterName,
    parameters
  );
  console.log(result);
}

/**
 * This sample demonstrates how to Creates a new HDInsight cluster with the specified parameters.
 *
 * @summary Creates a new HDInsight cluster with the specified parameters.
 * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/preview/2023-04-15-preview/examples/CreateHDInsightClusterWithEncryptionAtHost.json
 */
async function createClusterWithEncryptionAtHost() {
  const subscriptionId = process.env["HDINSIGHT_SUBSCRIPTION_ID"] || "subid";
  const resourceGroupName = process.env["HDINSIGHT_RESOURCE_GROUP"] || "rg1";
  const clusterName = "cluster1";
  const parameters: ClusterCreateParametersExtended = {
    properties: {
      clusterDefinition: {
        configurations: {
          gateway: {
            "restAuthCredential.isEnabled": true,
            "restAuthCredential.password": "**********",
            "restAuthCredential.username": "admin"
          }
        },
        kind: "Hadoop"
      },
      clusterVersion: "3.6",
      computeProfile: {
        roles: [
          {
            name: "headnode",
            hardwareProfile: { vmSize: "Standard_DS14_v2" },
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                username: "sshuser"
              }
            },
            targetInstanceCount: 2
          },
          {
            name: "workernode",
            hardwareProfile: { vmSize: "Standard_DS14_v2" },
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                username: "sshuser"
              }
            },
            targetInstanceCount: 3
          },
          {
            name: "zookeepernode",
            hardwareProfile: { vmSize: "Standard_DS14_v2" },
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                username: "sshuser"
              }
            },
            targetInstanceCount: 3
          }
        ]
      },
      diskEncryptionProperties: { encryptionAtHost: true },
      osType: "Linux",
      storageProfile: {
        storageaccounts: [
          {
            name: "mystorage.blob.core.windows.net",
            container: "default8525",
            enableSecureChannel: true,
            isDefault: true,
            key: "storagekey"
          }
        ]
      },
      tier: "Standard"
    }
  };
  const credential = new DefaultAzureCredential();
  const client = new HDInsightManagementClient(credential, subscriptionId);
  const result = await client.clusters.beginCreateAndWait(
    resourceGroupName,
    clusterName,
    parameters
  );
  console.log(result);
}

/**
 * This sample demonstrates how to Creates a new HDInsight cluster with the specified parameters.
 *
 * @summary Creates a new HDInsight cluster with the specified parameters.
 * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/preview/2023-04-15-preview/examples/CreateHDInsightClusterWithEncryptionInTransit.json
 */
async function createClusterWithEncryptionInTransit() {
  const subscriptionId = process.env["HDINSIGHT_SUBSCRIPTION_ID"] || "subid";
  const resourceGroupName = process.env["HDINSIGHT_RESOURCE_GROUP"] || "rg1";
  const clusterName = "cluster1";
  const parameters: ClusterCreateParametersExtended = {
    properties: {
      clusterDefinition: {
        configurations: {
          gateway: {
            "restAuthCredential.isEnabled": true,
            "restAuthCredential.password": "**********",
            "restAuthCredential.username": "admin"
          }
        },
        kind: "Hadoop"
      },
      clusterVersion: "3.6",
      computeProfile: {
        roles: [
          {
            name: "headnode",
            hardwareProfile: { vmSize: "Large" },
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                username: "sshuser"
              }
            },
            targetInstanceCount: 2
          },
          {
            name: "workernode",
            hardwareProfile: { vmSize: "Large" },
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                username: "sshuser"
              }
            },
            targetInstanceCount: 3
          },
          {
            name: "zookeepernode",
            hardwareProfile: { vmSize: "Small" },
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                username: "sshuser"
              }
            },
            targetInstanceCount: 3
          }
        ]
      },
      encryptionInTransitProperties: { isEncryptionInTransitEnabled: true },
      osType: "Linux",
      storageProfile: {
        storageaccounts: [
          {
            name: "mystorage.blob.core.windows.net",
            container: "default8525",
            enableSecureChannel: true,
            isDefault: true,
            key: "storagekey"
          }
        ]
      },
      tier: "Standard"
    }
  };
  const credential = new DefaultAzureCredential();
  const client = new HDInsightManagementClient(credential, subscriptionId);
  const result = await client.clusters.beginCreateAndWait(
    resourceGroupName,
    clusterName,
    parameters
  );
  console.log(result);
}

/**
 * This sample demonstrates how to Creates a new HDInsight cluster with the specified parameters.
 *
 * @summary Creates a new HDInsight cluster with the specified parameters.
 * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/preview/2023-04-15-preview/examples/CreateHDInsightClusterWithCustomNetworkProperties.json
 */
async function createClusterWithNetworkProperties() {
  const subscriptionId = process.env["HDINSIGHT_SUBSCRIPTION_ID"] || "subId";
  const resourceGroupName = process.env["HDINSIGHT_RESOURCE_GROUP"] || "rg1";
  const clusterName = "cluster1";
  const parameters: ClusterCreateParametersExtended = {
    properties: {
      clusterDefinition: {
        configurations: {
          gateway: {
            "restAuthCredential.isEnabled": true,
            "restAuthCredential.password": "**********",
            "restAuthCredential.username": "admin"
          }
        },
        kind: "hadoop"
      },
      clusterVersion: "3.6",
      computeProfile: {
        roles: [
          {
            name: "headnode",
            hardwareProfile: { vmSize: "standard_d3" },
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                sshProfile: { publicKeys: [{ certificateData: "**********" }] },
                username: "sshuser"
              }
            },
            targetInstanceCount: 2,
            virtualNetworkProfile: {
              id:
                "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname",
              subnet:
                "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"
            }
          },
          {
            name: "workernode",
            hardwareProfile: { vmSize: "standard_d3" },
            osProfile: {
              linuxOperatingSystemProfile: {
                password: "**********",
                sshProfile: { publicKeys: [{ certificateData: "**********" }] },
                username: "sshuser"
              }
            },
            targetInstanceCount: 2,
            virtualNetworkProfile: {
              id:
                "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname",
              subnet:
                "/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/vnetsubnet"
            }
          }
        ]
      },
      networkProperties: {
        privateLink: "Enabled",
        resourceProviderConnection: "Outbound"
      },
      osType: "Linux",
      storageProfile: {
        storageaccounts: [
          {
            name: "mystorage",
            container: "containername",
            enableSecureChannel: true,
            isDefault: true,
            key: "storage account key"
          }
        ]
      }
    }
  };
  const credential = new DefaultAzureCredential();
  const client = new HDInsightManagementClient(credential, subscriptionId);
  const result = await client.clusters.beginCreateAndWait(
    resourceGroupName,
    clusterName,
    parameters
  );
  console.log(result);
}

async function main() {
  createHdInsightClusterWithAutoscaleConfiguration();
  createHadoopClusterWithAzureDataLakeStorageGen2();
  createHadoopOnLinuxClusterWithSshPassword();
  createHadoopOnLinuxClusterWithSshPublicKey();
  createKafkaClusterWithKafkaRestProxy();
  createSecureHadoopCluster();
  createSparkOnLinuxClusterWithSshPassword();
  createClusterWithTls12();
  createClusterWithAvailabilityZones();
  createClusterWithComputeIsolationProperties();
  createClusterWithEncryptionAtHost();
  createClusterWithEncryptionInTransit();
  createClusterWithNetworkProperties();
}

main().catch(console.error);
