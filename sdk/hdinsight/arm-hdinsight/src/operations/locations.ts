/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/locationsMappers";
import * as Parameters from "../models/parameters";
import { HDInsightManagementClientContext } from "../hDInsightManagementClientContext";

/** Class representing a Locations. */
export class Locations {
  private readonly client: HDInsightManagementClientContext;

  /**
   * Create a Locations.
   * @param {HDInsightManagementClientContext} client Reference to the service client.
   */
  constructor(client: HDInsightManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets the capabilities for the specified location.
   * @param location The Azure location (region) for which to make the request.
   * @param [options] The optional parameters
   * @returns Promise<Models.LocationsGetCapabilitiesResponse>
   */
  getCapabilities(location: string, options?: msRest.RequestOptionsBase): Promise<Models.LocationsGetCapabilitiesResponse>;
  /**
   * @param location The Azure location (region) for which to make the request.
   * @param callback The callback
   */
  getCapabilities(location: string, callback: msRest.ServiceCallback<Models.CapabilitiesResult>): void;
  /**
   * @param location The Azure location (region) for which to make the request.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCapabilities(location: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CapabilitiesResult>): void;
  getCapabilities(location: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CapabilitiesResult>, callback?: msRest.ServiceCallback<Models.CapabilitiesResult>): Promise<Models.LocationsGetCapabilitiesResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        options
      },
      getCapabilitiesOperationSpec,
      callback) as Promise<Models.LocationsGetCapabilitiesResponse>;
  }

  /**
   * Lists the usages for the specified location.
   * @param location The Azure location (region) for which to make the request.
   * @param [options] The optional parameters
   * @returns Promise<Models.LocationsListUsagesResponse>
   */
  listUsages(location: string, options?: msRest.RequestOptionsBase): Promise<Models.LocationsListUsagesResponse>;
  /**
   * @param location The Azure location (region) for which to make the request.
   * @param callback The callback
   */
  listUsages(location: string, callback: msRest.ServiceCallback<Models.UsagesListResult>): void;
  /**
   * @param location The Azure location (region) for which to make the request.
   * @param options The optional parameters
   * @param callback The callback
   */
  listUsages(location: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UsagesListResult>): void;
  listUsages(location: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UsagesListResult>, callback?: msRest.ServiceCallback<Models.UsagesListResult>): Promise<Models.LocationsListUsagesResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        options
      },
      listUsagesOperationSpec,
      callback) as Promise<Models.LocationsListUsagesResponse>;
  }

  /**
   * Lists the billingSpecs for the specified subscription and location.
   * @param location The Azure location (region) for which to make the request.
   * @param [options] The optional parameters
   * @returns Promise<Models.LocationsListBillingSpecsResponse>
   */
  listBillingSpecs(location: string, options?: msRest.RequestOptionsBase): Promise<Models.LocationsListBillingSpecsResponse>;
  /**
   * @param location The Azure location (region) for which to make the request.
   * @param callback The callback
   */
  listBillingSpecs(location: string, callback: msRest.ServiceCallback<Models.BillingResponseListResult>): void;
  /**
   * @param location The Azure location (region) for which to make the request.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBillingSpecs(location: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BillingResponseListResult>): void;
  listBillingSpecs(location: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BillingResponseListResult>, callback?: msRest.ServiceCallback<Models.BillingResponseListResult>): Promise<Models.LocationsListBillingSpecsResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        options
      },
      listBillingSpecsOperationSpec,
      callback) as Promise<Models.LocationsListBillingSpecsResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getCapabilitiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/locations/{location}/capabilities",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.location
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CapabilitiesResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listUsagesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/locations/{location}/usages",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.location
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UsagesListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBillingSpecsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/locations/{location}/billingSpecs",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.location
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BillingResponseListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
