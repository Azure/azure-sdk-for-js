/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  ClusterPool as ClusterPoolMapper,
  TagsObject as TagsObjectMapper,
  ClusterPoolUpgrade as ClusterPoolUpgradeMapper,
  ClusterUpgrade as ClusterUpgradeMapper,
  ClusterResizeData as ClusterResizeDataMapper,
  Cluster as ClusterMapper,
  ClusterPatch as ClusterPatchMapper,
  ClusterJob as ClusterJobMapper,
  NameAvailabilityParameters as NameAvailabilityParametersMapper,
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "Uuid",
    },
  },
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1,
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2023-11-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const clusterPoolName: OperationURLParameter = {
  parameterPath: "clusterPoolName",
  mapper: {
    serializedName: "clusterPoolName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const clusterPool: OperationParameter = {
  parameterPath: "clusterPool",
  mapper: ClusterPoolMapper,
};

export const clusterPoolTags: OperationParameter = {
  parameterPath: "clusterPoolTags",
  mapper: TagsObjectMapper,
};

export const clusterPoolUpgradeRequest: OperationParameter = {
  parameterPath: "clusterPoolUpgradeRequest",
  mapper: ClusterPoolUpgradeMapper,
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const clusterUpgradeRequest: OperationParameter = {
  parameterPath: "clusterUpgradeRequest",
  mapper: ClusterUpgradeMapper,
};

export const clusterName: OperationURLParameter = {
  parameterPath: "clusterName",
  mapper: {
    serializedName: "clusterName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const clusterResizeRequest: OperationParameter = {
  parameterPath: "clusterResizeRequest",
  mapper: ClusterResizeDataMapper,
};

export const hDInsightCluster: OperationParameter = {
  parameterPath: "hDInsightCluster",
  mapper: ClusterMapper,
};

export const clusterPatchRequest: OperationParameter = {
  parameterPath: "clusterPatchRequest",
  mapper: ClusterPatchMapper,
};

export const clusterJob: OperationParameter = {
  parameterPath: "clusterJob",
  mapper: ClusterJobMapper,
};

export const filter: OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String",
    },
  },
};

export const nameAvailabilityParameters: OperationParameter = {
  parameterPath: "nameAvailabilityParameters",
  mapper: NameAvailabilityParametersMapper,
};

export const location: OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    constraints: {
      MinLength: 1,
    },
    serializedName: "location",
    required: true,
    type: {
      name: "String",
    },
  },
};
