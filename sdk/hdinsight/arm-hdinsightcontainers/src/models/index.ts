/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type ClusterJobPropertiesUnion =
  | ClusterJobProperties
  | FlinkJobProperties;

/** Cluster pool profile. */
export interface ClusterPoolProfile {
  /** Cluster pool version is a 2-part version. */
  clusterPoolVersion: string;
}

/** Cluster pool compute profile. */
export interface ClusterPoolComputeProfile {
  /** The virtual machine SKU. */
  vmSize: string;
  /**
   * The number of virtual machines.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly count?: number;
}

/** Properties of the cluster pool underlying AKS cluster. */
export interface AksClusterProfile {
  /** ARM Resource ID of the AKS cluster */
  aksClusterResourceId?: string;
  /** Identity properties of the AKS cluster agentpool MSI */
  aksClusterAgentPoolIdentityProfile?: AksClusterProfileAksClusterAgentPoolIdentityProfile;
  /**
   * AKS control plane and default node pool version of this ClusterPool
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly aksVersion?: string;
}

/** Identity Profile with details of an MSI. */
export interface IdentityProfile {
  /** ResourceId of the MSI. */
  msiResourceId: string;
  /** ClientId of the MSI. */
  msiClientId: string;
  /** ObjectId of the MSI. */
  msiObjectId: string;
}

/** Cluster pool networking configuration. */
export interface ClusterPoolNetworkProfile {
  /** Cluster pool subnet resource id. */
  subnetId: string;
}

/** Cluster pool log analytics profile used to enable or disable OMS agent for AKS cluster. */
export interface ClusterPoolLogAnalyticsProfile {
  /** True if log analytics is enabled for cluster pool, otherwise false. */
  enabled: boolean;
  /** Log analytics workspace to associate with the OMS agent. */
  workspaceId?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** Tags object for patch operations. */
export interface TagsObject {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/** The list cluster pools operation response. */
export interface ClusterPoolListResult {
  /** The list of cluster pools. */
  value?: ClusterPool[];
  /**
   * The link (url) to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The list cluster operation response. */
export interface ClusterListResult {
  /** The list of clusters. */
  value?: Cluster[];
  /**
   * The link (url) to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The compute profile. */
export interface ComputeProfile {
  /** The nodes definitions. */
  nodes: NodeProfile[];
}

/** The node profile. */
export interface NodeProfile {
  /** The node type. */
  type: string;
  /** The virtual machine SKU. */
  vmSize: string;
  /** The number of virtual machines. */
  count: number;
}

/** Cluster profile. */
export interface ClusterProfile {
  /** Version with 3/4 part. */
  clusterVersion: string;
  /** Version with three part. */
  ossVersion: string;
  /**
   * Component list of this cluster type and version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly components?: ClusterComponentsItem[];
  /** Identity Profile with details of an MSI. */
  identityProfile: IdentityProfile;
  /** Authorization profile with details of AAD user Ids and group Ids authorized for data plane access. */
  authorizationProfile: AuthorizationProfile;
  /** The cluster secret profile. */
  secretsProfile?: SecretsProfile;
  /** The service configs profiles. */
  serviceConfigsProfiles?: ClusterServiceConfigsProfile[];
  /**
   * Cluster connectivity profile.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connectivityProfile?: ConnectivityProfile;
  /** Cluster log analytics profile to enable or disable OMS agent for cluster. */
  logAnalyticsProfile?: ClusterLogAnalyticsProfile;
  /** Cluster Prometheus profile. */
  prometheusProfile?: ClusterPrometheusProfile;
  /** Ssh profile for the cluster. */
  sshProfile?: SshProfile;
  /** This is the Autoscale profile for the cluster. This will allow customer to create cluster enabled with Autoscale. */
  autoscaleProfile?: AutoscaleProfile;
  /** Kafka cluster profile. */
  kafkaProfile?: { [propertyName: string]: any };
  /** Trino Cluster profile. */
  trinoProfile?: TrinoProfile;
  /** LLAP cluster profile. */
  llapProfile?: { [propertyName: string]: any };
  /** The Flink cluster profile. */
  flinkProfile?: FlinkProfile;
  /** The spark cluster profile. */
  sparkProfile?: SparkProfile;
  /** Stub cluster profile. */
  stubProfile?: { [propertyName: string]: any };
  /** The script action profile list. */
  scriptActionProfiles?: ScriptActionProfile[];
}

export interface ClusterComponentsItem {
  name?: string;
  version?: string;
}

/** Authorization profile with details of AAD user Ids and group Ids authorized for data plane access. */
export interface AuthorizationProfile {
  /** AAD user Ids authorized for data plane access. */
  userIds?: string[];
  /** AAD group Ids authorized for data plane access. */
  groupIds?: string[];
}

/** The cluster secret profile. */
export interface SecretsProfile {
  /** Name of the user Key Vault where all the cluster specific user secrets are stored. */
  keyVaultResourceId: string;
  /** Properties of Key Vault secret. */
  secrets?: SecretReference[];
}

/** Secret reference and corresponding properties of a key vault secret. */
export interface SecretReference {
  /** Reference name of the secret to be used in service configs. */
  referenceName: string;
  /** Type of key vault object: secret, key or certificate. */
  type: KeyVaultObjectType;
  /** Version of the secret in key vault. */
  version?: string;
  /** Object identifier name of the secret in key vault. */
  keyVaultObjectName: string;
}

/** Cluster service configs. */
export interface ClusterServiceConfigsProfile {
  /** Name of the service the configurations should apply to. */
  serviceName: string;
  /** List of service configs. */
  configs: ClusterServiceConfig[];
}

/** Cluster configs per component. */
export interface ClusterServiceConfig {
  /** Name of the component the config files should apply to. */
  component: string;
  /** List of Config Files. */
  files: ClusterConfigFile[];
}

/** Cluster configuration files. */
export interface ClusterConfigFile {
  /** Configuration file name. */
  fileName: string;
  /** Free form content of the entire configuration file. */
  content?: string;
  /** This property indicates if the content is encoded and is case-insensitive. Please set the value to base64 if the content is base64 encoded. Set it to none or skip it if the content is plain text. */
  encoding?: ContentEncoding;
  /** Path of the config file if content is specified. */
  path?: string;
  /**
   * List of key value pairs
   * where key represents a valid service configuration name and value represents the value of the config.
   */
  values?: { [propertyName: string]: string };
}

/** Cluster connectivity profile. */
export interface ConnectivityProfile {
  /** Web connectivity endpoint details. */
  web: ConnectivityProfileWeb;
  /** List of SSH connectivity endpoints. */
  ssh?: SshConnectivityEndpoint[];
}

/** Web connectivity endpoint details. */
export interface WebConnectivityEndpoint {
  /** Web connectivity endpoint. */
  fqdn: string;
}

/** SSH connectivity endpoint details. */
export interface SshConnectivityEndpoint {
  /** SSH connectivity endpoint. */
  endpoint: string;
}

/** Cluster log analytics profile to enable or disable OMS agent for cluster. */
export interface ClusterLogAnalyticsProfile {
  /** True if log analytics is enabled for the cluster, otherwise false. */
  enabled: boolean;
  /** Collection of logs to be enabled or disabled for log analytics. */
  applicationLogs?: ClusterLogAnalyticsApplicationLogs;
  /** True if metrics are enabled, otherwise false. */
  metricsEnabled?: boolean;
}

/** Collection of logs to be enabled or disabled for log analytics. */
export interface ClusterLogAnalyticsApplicationLogs {
  /** True if stdout is enabled, otherwise false. */
  stdOutEnabled?: boolean;
  /** True if stderror is enabled, otherwise false. */
  stdErrorEnabled?: boolean;
}

/** Cluster Prometheus profile. */
export interface ClusterPrometheusProfile {
  /** Enable Prometheus for cluster or not. */
  enabled: boolean;
}

/** Ssh profile for the cluster. */
export interface SshProfile {
  /** Number of ssh pods per cluster. */
  count: number;
  /**
   * Prefix of the pod names. Pod number will be appended to the prefix. The ingress URLs for the pods will be available at <clusterFqdn>/<sshBasePath>/<prefix>-<number>
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly podPrefix?: string;
}

/** This is the Autoscale profile for the cluster. This will allow customer to create cluster enabled with Autoscale. */
export interface AutoscaleProfile {
  /** This indicates whether auto scale is enabled on HDInsight on AKS cluster. */
  enabled: boolean;
  /** This property is for graceful decommission timeout; It has a default setting of 3600 seconds before forced shutdown takes place. This is the maximal time to wait for running containers and applications to complete before transition a DECOMMISSIONING node into DECOMMISSIONED. The default value is 3600 seconds. Negative value (like -1) is handled as infinite timeout. */
  gracefulDecommissionTimeout?: number;
  /** User to specify which type of Autoscale to be implemented - Scheduled Based or Load Based. */
  autoscaleType?: AutoscaleType;
  /** Profiles of schedule based Autoscale. */
  scheduleBasedConfig?: ScheduleBasedConfig;
  /** Profiles of load based Autoscale. */
  loadBasedConfig?: LoadBasedConfig;
}

/** Profile of schedule based Autoscale. */
export interface ScheduleBasedConfig {
  /** User has to specify the timezone on which the schedule has to be set for schedule based autoscale configuration. */
  timeZone: string;
  /** Setting default node count of current schedule configuration. Default node count specifies the number of nodes which are default when an specified scaling operation is executed (scale up/scale down) */
  defaultCount: number;
  /** This specifies the schedules where scheduled based Autoscale to be enabled, the user has a choice to set multiple rules within the schedule across days and times (start/end). */
  schedules: Schedule[];
}

/** Schedule definition. */
export interface Schedule {
  /** User has to set the start time of current schedule configuration, format like 10:30 (HH:MM). */
  startTime: string;
  /** User has to set the end time of current schedule configuration, format like 10:30 (HH:MM). */
  endTime: string;
  /** User has to set the node count anticipated at end of the scaling operation of the set current schedule configuration, format is integer. */
  count: number;
  /** User has to set the days where schedule has to be set for autoscale operation. */
  days: ScheduleDay[];
}

/** Profile of load based Autoscale. */
export interface LoadBasedConfig {
  /** User needs to set the minimum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes. */
  minNodes: number;
  /** User needs to set the maximum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes. */
  maxNodes: number;
  /** User can specify the poll interval, this is the time period (in seconds) after which scaling metrics are polled for triggering a scaling operation. */
  pollInterval?: number;
  /** This is a cool down period, this is a time period in seconds, which determines the amount of time that must elapse between a scaling activity started by a rule and the start of the next scaling activity, regardless of the rule that triggers it. The default value is 300 seconds. */
  cooldownPeriod?: number;
  /** The scaling rules. */
  scalingRules: ScalingRule[];
}

/** The scaling rule. */
export interface ScalingRule {
  /** The action type. */
  actionType: ScaleActionType;
  /** This is an evaluation count for a scaling condition, the number of times a trigger condition should be successful, before scaling activity is triggered. */
  evaluationCount: number;
  /** Metrics name for individual workloads. For example: cpu */
  scalingMetric: string;
  /** The comparison rule. */
  comparisonRule: ComparisonRule;
}

/** The comparison rule. */
export interface ComparisonRule {
  /** The comparison operator. */
  operator: ComparisonOperator;
  /** Threshold setting. */
  threshold: number;
}

/** Trino Cluster profile. */
export interface TrinoProfile {
  /** Trino cluster catalog options. */
  catalogOptions?: CatalogOptions;
  /** Trino Coordinator. */
  coordinator?: TrinoCoordinator;
  /** Trino user plugins spec */
  userPluginsSpec?: TrinoUserPlugins;
  /** User telemetry */
  userTelemetrySpec?: TrinoUserTelemetry;
  /** Trino worker. */
  worker?: TrinoWorker;
}

/** Trino cluster catalog options. */
export interface CatalogOptions {
  /** hive catalog options. */
  hive?: HiveCatalogOption[];
}

/** Hive Catalog Option */
export interface HiveCatalogOption {
  /** Name of trino catalog which should use specified hive metastore. */
  catalogName: string;
  /** Secret reference name from secretsProfile.secrets containing password for database connection. */
  metastoreDbConnectionPasswordSecret: string;
  /** Connection string for hive metastore database. */
  metastoreDbConnectionURL: string;
  /** User name for database connection. */
  metastoreDbConnectionUserName: string;
  /** Metastore root directory URI, format: abfs[s]://<container>@<account_name>.dfs.core.windows.net/<path>. More details: https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction-abfs-uri */
  metastoreWarehouseDir: string;
}

/** Trino Coordinator. */
export interface TrinoCoordinator {
  /** The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node. Default: true. */
  highAvailabilityEnabled?: boolean;
  /** The flag that if enable debug or not. */
  enable?: boolean;
  /** The debug port. */
  port?: number;
  /** The flag that if suspend debug or not. */
  suspend?: boolean;
}

/** Trino user plugins spec */
export interface TrinoUserPlugins {
  /** Trino user plugins. */
  plugins?: TrinoUserPlugin[];
}

/** Trino user plugin. */
export interface TrinoUserPlugin {
  /** Denotes whether the plugin is active or not. */
  enabled?: boolean;
  /** This field maps to the sub-directory in trino plugins location, that will contain all the plugins under path. */
  name?: string;
  /** Fully qualified path to the folder containing the plugins. */
  path?: string;
}

/** User telemetry */
export interface TrinoUserTelemetry {
  /** Trino user telemetry definition. */
  storage?: TrinoTelemetryConfig;
}

/** Trino user telemetry definition. */
export interface TrinoTelemetryConfig {
  /** Hive Catalog name used to mount external tables on the logs written by trino, if not specified there tables are not created. */
  hivecatalogName?: string;
  /** Schema of the above catalog to use, to mount query logs as external tables, if not specified tables will be mounted under schema trinologs. */
  hivecatalogSchema?: string;
  /** Retention period for query log table partitions, this doesn't have any affect on actual data. */
  partitionRetentionInDays?: number;
  /** Azure storage location of the blobs. */
  path?: string;
}

/** Trino worker. */
export interface TrinoWorker {
  /** The flag that if enable debug or not. */
  enable?: boolean;
  /** The debug port. */
  port?: number;
  /** The flag that if suspend debug or not. */
  suspend?: boolean;
}

/** The Flink cluster profile. */
export interface FlinkProfile {
  /** The storage profile */
  storage: FlinkStorageProfile;
  /** The number of task managers. */
  numReplicas?: number;
  /** Job Manager container/ process CPU and memory requirements */
  jobManager: ComputeResourceDefinition;
  /** History Server container/ process CPU and memory requirements */
  historyServer?: ComputeResourceDefinition;
  /** Task Manager container/ process CPU and memory requirements */
  taskManager: ComputeResourceDefinition;
  /** Flink cluster catalog options. */
  catalogOptions?: FlinkCatalogOptions;
}

/** The storage profile */
export interface FlinkStorageProfile {
  /** Storage account uri which is used for savepoint and checkpoint state. */
  storageUri: string;
  /** Storage key is only required for wasb(s) storage. */
  storagekey?: string;
}

/** The cpu and memory requirement definition. */
export interface ComputeResourceDefinition {
  /** The required CPU. */
  cpu: number;
  /** The required memory in MB, Container memory will be 110 percentile */
  memory: number;
}

/** Flink cluster catalog options. */
export interface FlinkCatalogOptions {
  /** Hive Catalog Option for Flink cluster. */
  hive?: FlinkHiveCatalogOption;
}

/** Hive Catalog Option for Flink cluster. */
export interface FlinkHiveCatalogOption {
  /** Secret reference name from secretsProfile.secrets containing password for database connection. */
  metastoreDbConnectionPasswordSecret: string;
  /** Connection string for hive metastore database. */
  metastoreDbConnectionURL: string;
  /** User name for database connection. */
  metastoreDbConnectionUserName: string;
}

/** The spark cluster profile. */
export interface SparkProfile {
  /** The default storage URL. */
  defaultStorageUrl?: string;
  /** The metastore specification for Spark cluster. */
  metastoreSpec?: SparkMetastoreSpec;
  /** Spark user plugins spec */
  userPluginsSpec?: SparkUserPlugins;
}

/** The metastore specification for Spark cluster. */
export interface SparkMetastoreSpec {
  /** The database server host. */
  dbServerHost: string;
  /** The database name. */
  dbName: string;
  /** The database user name. */
  dbUserName: string;
  /** The secret name which contains the database user password. */
  dbPasswordSecretName: string;
  /** The key vault resource id. */
  keyVaultId: string;
  /** The thrift url. */
  thriftUrl?: string;
}

/** Spark user plugins spec */
export interface SparkUserPlugins {
  /** Spark user plugins. */
  plugins?: SparkUserPlugin[];
}

/** Spark user plugin. */
export interface SparkUserPlugin {
  /** Fully qualified path to the folder containing the plugins. */
  path: string;
}

/** The script action profile. */
export interface ScriptActionProfile {
  /** Type of the script action. Supported type is bash scripts. */
  type: string;
  /** Script name. */
  name: string;
  /** Url of the script file. */
  url: string;
  /** Additional parameters for the script action. It should be space-separated list of arguments required for script execution. */
  parameters?: string;
  /** List of services to apply the script action. */
  services: string[];
  /** Timeout duration for the script action in minutes. */
  timeoutInMinutes?: number;
  /** Specify if the script should persist on the cluster. */
  shouldPersist?: boolean;
}

/** Cluster resource patch properties. */
export interface UpdatableClusterProfile {
  /** The service configs profiles. */
  serviceConfigsProfiles?: ClusterServiceConfigsProfile[];
  /** Ssh profile for the cluster. */
  sshProfile?: SshProfile;
  /** This is the Autoscale profile for the cluster. This will allow customer to create cluster enabled with Autoscale. */
  autoscaleProfile?: AutoscaleProfile;
  /** Authorization profile with details of AAD user Ids and group Ids authorized for data plane access. */
  authorizationProfile?: AuthorizationProfile;
  /** Cluster log analytics profile to enable or disable OMS agent for cluster. */
  logAnalyticsProfile?: ClusterLogAnalyticsProfile;
  /** Cluster Prometheus profile. */
  prometheusProfile?: ClusterPrometheusProfile;
  /** The script action profile list. */
  scriptActionProfiles?: ScriptActionProfile[];
}

/** Properties of cluster job. */
export interface ClusterJobProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  jobType: "FlinkJob";
}

/** Collection of cluster job. */
export interface ClusterJobList {
  /** Collection of cluster job. */
  value: ClusterJob[];
  /** The Url of next result page. */
  nextLink?: string;
}

/** Cluster instance service configs api response. */
export interface ServiceConfigListResult {
  /** Cluster instance service config array. */
  value?: ServiceConfigResult[];
  /**
   * The link (url) to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Cluster instance service config. */
export interface ServiceConfigResult {
  /** Service Config Name. */
  serviceName?: string;
  /** File Name. */
  fileName?: string;
  /** Content in the service config file. */
  content?: string;
  /** Component Name. */
  componentName?: string;
  /** Config type. */
  type?: string;
  /** Config file path. */
  path?: string;
  /** The custom keys. */
  customKeys?: { [propertyName: string]: string };
  /** The default keys. */
  defaultKeys?: { [propertyName: string]: ServiceConfigListResultValueEntity };
}

/** Service config response. */
export interface ServiceConfigListResultProperties {
  /** Service Config Name. */
  serviceName: string;
  /** File Name. */
  fileName: string;
  /** Content in the service config file. */
  content?: string;
  /** Component Name. */
  componentName: string;
  /** Config type. */
  type?: string;
  /** Config file path. */
  path?: string;
  /** The custom keys. */
  customKeys?: { [propertyName: string]: string };
  /** The default keys. */
  defaultKeys?: { [propertyName: string]: ServiceConfigListResultValueEntity };
}

/** Default config details. */
export interface ServiceConfigListResultValueEntity {
  /** Config value. */
  value: string;
  /** Config description. */
  description?: string;
}

/** Details of check name availability request body. */
export interface NameAvailabilityParameters {
  /** Name for checking availability. */
  name?: string;
  /** The resource type in Microsoft.HDInsight. */
  type?: string;
}

/** Result of check name availability. */
export interface NameAvailabilityResult {
  /** Indicator of availability of the Microsoft.HDInsight resource name. */
  nameAvailable?: boolean;
  /** The reason of unavailability. */
  reason?: string;
  /** The error message of unavailability. */
  message?: string;
}

/** The instance view of a HDInsight Cluster. */
export interface ClusterInstanceViewsResult {
  /** Cluster instance view array. */
  value?: ClusterInstanceViewResult[];
  /**
   * The link (url) to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Cluster Instance View. */
export interface ClusterInstanceViewResult {
  /** Name of the instance view. */
  name: string;
  /** Status of the instance view. */
  status: ClusterInstanceViewPropertiesStatus;
  /** List of statuses of relevant services that make up the HDInsight on aks cluster to surface to the customer. */
  serviceStatuses: ServiceStatus[];
}

/** Cluster Instance View Properties. */
export interface ClusterInstanceViewProperties {
  /** Status of the instance view. */
  status: ClusterInstanceViewPropertiesStatus;
  /** List of statuses of relevant services that make up the HDInsight on aks cluster to surface to the customer. */
  serviceStatuses: ServiceStatus[];
}

/** Status of the instance view. */
export interface ClusterInstanceViewStatus {
  /** The cluster ready status */
  ready: string;
  /** The status reason. */
  reason?: string;
  /** The additional message. */
  message?: string;
}

/** Describes the status of a service of a HDInsight on aks cluster. */
export interface ServiceStatus {
  /** Kind of the service. E.g. "Zookeeper". */
  kind: string;
  /** Indicates if the service is ready / healthy. Values can be "true", "false", "unknown" or anything else. */
  ready: string;
  /** A message describing the error if any. */
  message?: string;
}

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of operations supported by the resource provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results (if there are any).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /** Localized display information for this particular operation. */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** Represents a list of cluster pool versions. */
export interface ClusterPoolVersionsListResult {
  /** The list of cluster pool versions. */
  value?: ClusterPoolVersion[];
  /**
   * The link (url) to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Represents a list of cluster versions. */
export interface ClusterVersionsListResult {
  /** The list of cluster versions. */
  value?: ClusterVersion[];
  /**
   * The link (url) to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** CLuster pool profile. */
export interface ClusterPoolResourcePropertiesClusterPoolProfile
  extends ClusterPoolProfile {}

/** CLuster pool compute profile. */
export interface ClusterPoolResourcePropertiesComputeProfile
  extends ClusterPoolComputeProfile {}

/** Properties of underlying AKS cluster. */
export interface ClusterPoolResourcePropertiesAksClusterProfile
  extends AksClusterProfile {}

/** Identity properties of the AKS cluster agentpool MSI */
export interface AksClusterProfileAksClusterAgentPoolIdentityProfile
  extends IdentityProfile {}

/** Cluster pool network profile. */
export interface ClusterPoolResourcePropertiesNetworkProfile
  extends ClusterPoolNetworkProfile {}

/** Cluster pool log analytics profile to enable OMS agent for AKS cluster. */
export interface ClusterPoolResourcePropertiesLogAnalyticsProfile
  extends ClusterPoolLogAnalyticsProfile {}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** Web connectivity endpoint details. */
export interface ConnectivityProfileWeb extends WebConnectivityEndpoint {}

/** Properties of flink job. */
export interface FlinkJobProperties extends ClusterJobProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  jobType: "FlinkJob";
  /** Name of job */
  jobName: string;
  /** A string property that specifies the directory where the job JAR is located. */
  jobJarDirectory?: string;
  /** A string property that represents the name of the job JAR. */
  jarName?: string;
  /** A string property that specifies the entry class for the Flink job. */
  entryClass?: string;
  /** A string property representing additional JVM arguments for the Flink job. It should be space separated value. */
  args?: string;
  /** A string property that represents the name of the savepoint for the Flink job */
  savePointName?: string;
  /** A string property that indicates the action to be performed on the Flink job. It can have one of the following enum values => NEW, UPDATE, STATELESS_UPDATE, STOP, START, CANCEL, SAVEPOINT, LIST_SAVEPOINT, or DELETE. */
  action?: Action;
  /** Additional properties used to configure Flink jobs. It allows users to set properties such as parallelism and jobSavePointDirectory. It accepts additional key-value pairs as properties, where the keys are strings and the values are strings as well. */
  flinkConfiguration?: { [propertyName: string]: string };
  /**
   * Unique id for identifying a job
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly jobId?: string;
  /**
   * Status of job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
  /**
   * Output of job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly jobOutput?: string;
  /**
   * Action result of job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionResult?: string;
  /**
   * The last savepoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastSavePoint?: string;
}

/** Cluster instance service config properties. */
export interface ServiceConfigResultProperties
  extends ServiceConfigListResultProperties {}

/** Properties of the instance view. */
export interface ClusterInstanceViewResultProperties
  extends ClusterInstanceViewProperties {}

/** Status of the instance view. */
export interface ClusterInstanceViewPropertiesStatus
  extends ClusterInstanceViewStatus {}

/** Cluster pool. */
export interface ClusterPool extends TrackedResource {
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningStatus;
  /**
   * A unique id generated by the RP to identify the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deploymentId?: string;
  /** A resource group created by RP, to hold the resources created by RP on-behalf of customers. It will also be used to generate aksManagedResourceGroupName by pattern: MC_{managedResourceGroupName}_{clusterPoolName}_{region}. Please make sure it meets resource group name restriction. */
  managedResourceGroupName?: string;
  /**
   * A resource group created by AKS, to hold the infrastructure resources created by AKS on-behalf of customers. It is generated by cluster pool name and managed resource group name by pattern: MC_{managedResourceGroupName}_{clusterPoolName}_{region}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly aksManagedResourceGroupName?: string;
  /** CLuster pool profile. */
  clusterPoolProfile?: ClusterPoolResourcePropertiesClusterPoolProfile;
  /** CLuster pool compute profile. */
  computeProfile?: ClusterPoolResourcePropertiesComputeProfile;
  /**
   * Properties of underlying AKS cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly aksClusterProfile?: ClusterPoolResourcePropertiesAksClusterProfile;
  /** Cluster pool network profile. */
  networkProfile?: ClusterPoolResourcePropertiesNetworkProfile;
  /** Cluster pool log analytics profile to enable OMS agent for AKS cluster. */
  logAnalyticsProfile?: ClusterPoolResourcePropertiesLogAnalyticsProfile;
  /**
   * Business status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
}

/** The cluster. */
export interface Cluster extends TrackedResource {
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningStatus;
  /** The type of cluster. */
  clusterType?: string;
  /**
   * A unique id generated by the RP to identify the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deploymentId?: string;
  /** The compute profile. */
  computeProfile?: ComputeProfile;
  /** Cluster profile. */
  clusterProfile?: ClusterProfile;
  /**
   * Business status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
}

/** The parameters for resizing a cluster. */
export interface ClusterResizeData extends TrackedResource {
  /** Target node count of worker node. */
  targetWorkerNodeCount?: number;
}

/** The patch for a cluster. */
export interface ClusterPatch extends TrackedResource {
  /** Cluster resource patch properties. */
  clusterProfile?: UpdatableClusterProfile;
}

/** Cluster job. */
export interface ClusterJob extends ProxyResource {
  /** Properties of cluster job. */
  properties: ClusterJobPropertiesUnion;
}

/** Available cluster pool version. */
export interface ClusterPoolVersion extends ProxyResource {
  /** Cluster pool version is a 2-part version. */
  clusterPoolVersion?: string;
  /** AKS version. */
  aksVersion?: string;
  /** Indicate if this version is in preview or not. */
  isPreview?: boolean;
}

/** Available cluster version. */
export interface ClusterVersion extends ProxyResource {
  /** The type of cluster. */
  clusterType?: string;
  /** Version with three part. */
  clusterVersion?: string;
  /** Version with three part. */
  ossVersion?: string;
  /** The two part cluster pool version. If the cluster version is before cluster pool version on-board, the return value will be empty string */
  clusterPoolVersion?: string;
  /** Indicate if this version is in preview or not. */
  isPreview?: boolean;
  /**
   * Component list of this cluster type and version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly components?: ClusterComponentsItem[];
}

/** Defines headers for ClusterPools_updateTags operation. */
export interface ClusterPoolsUpdateTagsHeaders {
  location?: string;
}

/** Defines headers for ClusterPools_delete operation. */
export interface ClusterPoolsDeleteHeaders {
  location?: string;
}

/** Defines headers for Clusters_resize operation. */
export interface ClustersResizeHeaders {
  /** URL to get the status of the resize operation. */
  location?: string;
}

/** Defines headers for Clusters_update operation. */
export interface ClustersUpdateHeaders {
  location?: string;
}

/** Defines headers for Clusters_delete operation. */
export interface ClustersDeleteHeaders {
  location?: string;
}

/** Defines headers for ClusterJobs_runJob operation. */
export interface ClusterJobsRunJobHeaders {
  /** URL to get the status of the resize operation. */
  location?: string;
}

/** Known values of {@link ProvisioningStatus} that the service accepts. */
export enum KnownProvisioningStatus {
  /** Accepted */
  Accepted = "Accepted",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Canceled */
  Canceled = "Canceled",
  /** Failed */
  Failed = "Failed"
}

/**
 * Defines values for ProvisioningStatus. \
 * {@link KnownProvisioningStatus} can be used interchangeably with ProvisioningStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Accepted** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed**
 */
export type ProvisioningStatus = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link KeyVaultObjectType} that the service accepts. */
export enum KnownKeyVaultObjectType {
  /** Key */
  Key = "Key",
  /** Secret */
  Secret = "Secret",
  /** Certificate */
  Certificate = "Certificate"
}

/**
 * Defines values for KeyVaultObjectType. \
 * {@link KnownKeyVaultObjectType} can be used interchangeably with KeyVaultObjectType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Key** \
 * **Secret** \
 * **Certificate**
 */
export type KeyVaultObjectType = string;

/** Known values of {@link ContentEncoding} that the service accepts. */
export enum KnownContentEncoding {
  /** Base64 */
  Base64 = "Base64",
  /** None */
  None = "None"
}

/**
 * Defines values for ContentEncoding. \
 * {@link KnownContentEncoding} can be used interchangeably with ContentEncoding,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Base64** \
 * **None**
 */
export type ContentEncoding = string;

/** Known values of {@link AutoscaleType} that the service accepts. */
export enum KnownAutoscaleType {
  /** ScheduleBased */
  ScheduleBased = "ScheduleBased",
  /** LoadBased */
  LoadBased = "LoadBased"
}

/**
 * Defines values for AutoscaleType. \
 * {@link KnownAutoscaleType} can be used interchangeably with AutoscaleType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ScheduleBased** \
 * **LoadBased**
 */
export type AutoscaleType = string;

/** Known values of {@link ScheduleDay} that the service accepts. */
export enum KnownScheduleDay {
  /** Sunday */
  Sunday = "Sunday",
  /** Monday */
  Monday = "Monday",
  /** Tuesday */
  Tuesday = "Tuesday",
  /** Wednesday */
  Wednesday = "Wednesday",
  /** Thursday */
  Thursday = "Thursday",
  /** Friday */
  Friday = "Friday",
  /** Saturday */
  Saturday = "Saturday"
}

/**
 * Defines values for ScheduleDay. \
 * {@link KnownScheduleDay} can be used interchangeably with ScheduleDay,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Sunday** \
 * **Monday** \
 * **Tuesday** \
 * **Wednesday** \
 * **Thursday** \
 * **Friday** \
 * **Saturday**
 */
export type ScheduleDay = string;

/** Known values of {@link ScaleActionType} that the service accepts. */
export enum KnownScaleActionType {
  /** Scaleup */
  Scaleup = "scaleup",
  /** Scaledown */
  Scaledown = "scaledown"
}

/**
 * Defines values for ScaleActionType. \
 * {@link KnownScaleActionType} can be used interchangeably with ScaleActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **scaleup** \
 * **scaledown**
 */
export type ScaleActionType = string;

/** Known values of {@link ComparisonOperator} that the service accepts. */
export enum KnownComparisonOperator {
  /** GreaterThan */
  GreaterThan = "greaterThan",
  /** GreaterThanOrEqual */
  GreaterThanOrEqual = "greaterThanOrEqual",
  /** LessThan */
  LessThan = "lessThan",
  /** LessThanOrEqual */
  LessThanOrEqual = "lessThanOrEqual"
}

/**
 * Defines values for ComparisonOperator. \
 * {@link KnownComparisonOperator} can be used interchangeably with ComparisonOperator,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **greaterThan** \
 * **greaterThanOrEqual** \
 * **lessThan** \
 * **lessThanOrEqual**
 */
export type ComparisonOperator = string;

/** Known values of {@link JobType} that the service accepts. */
export enum KnownJobType {
  /** FlinkJob */
  FlinkJob = "FlinkJob"
}

/**
 * Defines values for JobType. \
 * {@link KnownJobType} can be used interchangeably with JobType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **FlinkJob**
 */
export type JobType = string;

/** Known values of {@link Origin} that the service accepts. */
export enum KnownOrigin {
  /** User */
  User = "user",
  /** System */
  System = "system",
  /** UserSystem */
  UserSystem = "user,system"
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export type Origin = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  /** Internal */
  Internal = "Internal"
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Known values of {@link Action} that the service accepts. */
export enum KnownAction {
  /** NEW */
  NEW = "NEW",
  /** Update */
  Update = "UPDATE",
  /** StatelessUpdate */
  StatelessUpdate = "STATELESS_UPDATE",
  /** Stop */
  Stop = "STOP",
  /** Start */
  Start = "START",
  /** Cancel */
  Cancel = "CANCEL",
  /** Savepoint */
  Savepoint = "SAVEPOINT",
  /** ListSavepoint */
  ListSavepoint = "LIST_SAVEPOINT",
  /** Delete */
  Delete = "DELETE"
}

/**
 * Defines values for Action. \
 * {@link KnownAction} can be used interchangeably with Action,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NEW** \
 * **UPDATE** \
 * **STATELESS_UPDATE** \
 * **STOP** \
 * **START** \
 * **CANCEL** \
 * **SAVEPOINT** \
 * **LIST_SAVEPOINT** \
 * **DELETE**
 */
export type Action = string;

/** Optional parameters. */
export interface ClusterPoolsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ClusterPoolsGetResponse = ClusterPool;

/** Optional parameters. */
export interface ClusterPoolsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ClusterPoolsCreateOrUpdateResponse = ClusterPool;

/** Optional parameters. */
export interface ClusterPoolsUpdateTagsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateTags operation. */
export type ClusterPoolsUpdateTagsResponse = ClusterPool;

/** Optional parameters. */
export interface ClusterPoolsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ClusterPoolsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type ClusterPoolsListBySubscriptionResponse = ClusterPoolListResult;

/** Optional parameters. */
export interface ClusterPoolsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type ClusterPoolsListByResourceGroupResponse = ClusterPoolListResult;

/** Optional parameters. */
export interface ClusterPoolsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type ClusterPoolsListBySubscriptionNextResponse = ClusterPoolListResult;

/** Optional parameters. */
export interface ClusterPoolsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ClusterPoolsListByResourceGroupNextResponse = ClusterPoolListResult;

/** Optional parameters. */
export interface ClustersListByClusterPoolNameOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByClusterPoolName operation. */
export type ClustersListByClusterPoolNameResponse = ClusterListResult;

/** Optional parameters. */
export interface ClustersResizeOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the resize operation. */
export type ClustersResizeResponse = Cluster;

/** Optional parameters. */
export interface ClustersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ClustersGetResponse = Cluster;

/** Optional parameters. */
export interface ClustersCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type ClustersCreateResponse = Cluster;

/** Optional parameters. */
export interface ClustersUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type ClustersUpdateResponse = Cluster;

/** Optional parameters. */
export interface ClustersDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ClustersListServiceConfigsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listServiceConfigs operation. */
export type ClustersListServiceConfigsResponse = ServiceConfigListResult;

/** Optional parameters. */
export interface ClustersListInstanceViewsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listInstanceViews operation. */
export type ClustersListInstanceViewsResponse = ClusterInstanceViewsResult;

/** Optional parameters. */
export interface ClustersGetInstanceViewOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getInstanceView operation. */
export type ClustersGetInstanceViewResponse = ClusterInstanceViewResult;

/** Optional parameters. */
export interface ClustersListByClusterPoolNameNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByClusterPoolNameNext operation. */
export type ClustersListByClusterPoolNameNextResponse = ClusterListResult;

/** Optional parameters. */
export interface ClustersListServiceConfigsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listServiceConfigsNext operation. */
export type ClustersListServiceConfigsNextResponse = ServiceConfigListResult;

/** Optional parameters. */
export interface ClustersListInstanceViewsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listInstanceViewsNext operation. */
export type ClustersListInstanceViewsNextResponse = ClusterInstanceViewsResult;

/** Optional parameters. */
export interface ClusterJobsRunJobOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the runJob operation. */
export type ClusterJobsRunJobResponse = ClusterJob;

/** Optional parameters. */
export interface ClusterJobsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ClusterJobsListResponse = ClusterJobList;

/** Optional parameters. */
export interface ClusterJobsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ClusterJobsListNextResponse = ClusterJobList;

/** Optional parameters. */
export interface LocationsCheckNameAvailabilityOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkNameAvailability operation. */
export type LocationsCheckNameAvailabilityResponse = NameAvailabilityResult;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface AvailableClusterPoolVersionsListByLocationOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByLocation operation. */
export type AvailableClusterPoolVersionsListByLocationResponse = ClusterPoolVersionsListResult;

/** Optional parameters. */
export interface AvailableClusterPoolVersionsListByLocationNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByLocationNext operation. */
export type AvailableClusterPoolVersionsListByLocationNextResponse = ClusterPoolVersionsListResult;

/** Optional parameters. */
export interface AvailableClusterVersionsListByLocationOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByLocation operation. */
export type AvailableClusterVersionsListByLocationResponse = ClusterVersionsListResult;

/** Optional parameters. */
export interface AvailableClusterVersionsListByLocationNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByLocationNext operation. */
export type AvailableClusterVersionsListByLocationNextResponse = ClusterVersionsListResult;

/** Optional parameters. */
export interface HDInsightContainersManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
