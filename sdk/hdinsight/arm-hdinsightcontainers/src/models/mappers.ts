/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const ClusterPoolResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPoolResourceProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      deploymentId: {
        serializedName: "deploymentId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      managedResourceGroupName: {
        constraints: {
          MaxLength: 40,
          MinLength: 1,
        },
        serializedName: "managedResourceGroupName",
        type: {
          name: "String",
        },
      },
      aksManagedResourceGroupName: {
        serializedName: "aksManagedResourceGroupName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      clusterPoolProfile: {
        serializedName: "clusterPoolProfile",
        type: {
          name: "Composite",
          className: "ClusterPoolResourcePropertiesClusterPoolProfile",
        },
      },
      computeProfile: {
        serializedName: "computeProfile",
        type: {
          name: "Composite",
          className: "ClusterPoolResourcePropertiesComputeProfile",
        },
      },
      aksClusterProfile: {
        serializedName: "aksClusterProfile",
        type: {
          name: "Composite",
          className: "ClusterPoolResourcePropertiesAksClusterProfile",
        },
      },
      networkProfile: {
        serializedName: "networkProfile",
        type: {
          name: "Composite",
          className: "ClusterPoolResourcePropertiesNetworkProfile",
        },
      },
      logAnalyticsProfile: {
        serializedName: "logAnalyticsProfile",
        type: {
          name: "Composite",
          className: "ClusterPoolResourcePropertiesLogAnalyticsProfile",
        },
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClusterPoolProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPoolProfile",
    modelProperties: {
      clusterPoolVersion: {
        constraints: {
          Pattern: new RegExp("^(0|[1-9][0-9]{0,18})\\.(0|[1-9][0-9]{0,18})$"),
        },
        serializedName: "clusterPoolVersion",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClusterPoolComputeProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPoolComputeProfile",
    modelProperties: {
      vmSize: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9_\\-]{0,256}$"),
        },
        serializedName: "vmSize",
        required: true,
        type: {
          name: "String",
        },
      },
      count: {
        serializedName: "count",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const AksClusterProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AksClusterProfile",
    modelProperties: {
      aksClusterResourceId: {
        serializedName: "aksClusterResourceId",
        type: {
          name: "String",
        },
      },
      aksClusterAgentPoolIdentityProfile: {
        serializedName: "aksClusterAgentPoolIdentityProfile",
        type: {
          name: "Composite",
          className: "AksClusterProfileAksClusterAgentPoolIdentityProfile",
        },
      },
      aksVersion: {
        serializedName: "aksVersion",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const IdentityProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IdentityProfile",
    modelProperties: {
      msiResourceId: {
        serializedName: "msiResourceId",
        required: true,
        type: {
          name: "String",
        },
      },
      msiClientId: {
        constraints: {
          Pattern: new RegExp(
            "^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$",
          ),
        },
        serializedName: "msiClientId",
        required: true,
        type: {
          name: "String",
        },
      },
      msiObjectId: {
        constraints: {
          Pattern: new RegExp(
            "^[{(]?[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}[)}]?$",
          ),
        },
        serializedName: "msiObjectId",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClusterPoolNetworkProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPoolNetworkProfile",
    modelProperties: {
      subnetId: {
        serializedName: "subnetId",
        required: true,
        type: {
          name: "String",
        },
      },
      outboundType: {
        defaultValue: "loadBalancer",
        serializedName: "outboundType",
        type: {
          name: "String",
        },
      },
      enablePrivateApiServer: {
        serializedName: "enablePrivateApiServer",
        type: {
          name: "Boolean",
        },
      },
      apiServerAuthorizedIpRanges: {
        serializedName: "apiServerAuthorizedIpRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const ClusterPoolLogAnalyticsProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPoolLogAnalyticsProfile",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        required: true,
        type: {
          name: "Boolean",
        },
      },
      workspaceId: {
        serializedName: "workspaceId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const TagsObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TagsObject",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const ClusterPoolListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPoolListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClusterPool",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClusterPoolUpgrade: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPoolUpgrade",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ClusterPoolUpgradeProperties",
        },
      },
    },
  },
};

export const ClusterPoolUpgradeProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPoolUpgradeProperties",
    uberParent: "ClusterPoolUpgradeProperties",
    polymorphicDiscriminator: {
      serializedName: "upgradeType",
      clientName: "upgradeType",
    },
    modelProperties: {
      upgradeType: {
        serializedName: "upgradeType",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClusterPoolAvailableUpgradeList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPoolAvailableUpgradeList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClusterPoolAvailableUpgrade",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClusterPoolAvailableUpgradeProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ClusterPoolAvailableUpgradeProperties",
      uberParent: "ClusterPoolAvailableUpgradeProperties",
      polymorphicDiscriminator: {
        serializedName: "upgradeType",
        clientName: "upgradeType",
      },
      modelProperties: {
        upgradeType: {
          serializedName: "upgradeType",
          required: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const ClusterListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Cluster",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClusterResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterResourceProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      clusterType: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9]{0,31}$"),
        },
        serializedName: "clusterType",
        required: true,
        type: {
          name: "String",
        },
      },
      deploymentId: {
        serializedName: "deploymentId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      computeProfile: {
        serializedName: "computeProfile",
        type: {
          name: "Composite",
          className: "ComputeProfile",
        },
      },
      clusterProfile: {
        serializedName: "clusterProfile",
        type: {
          name: "Composite",
          className: "ClusterProfile",
        },
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ComputeProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeProfile",
    modelProperties: {
      nodes: {
        serializedName: "nodes",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NodeProfile",
            },
          },
        },
      },
    },
  },
};

export const NodeProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeProfile",
    modelProperties: {
      type: {
        constraints: {
          Pattern: new RegExp("^(head|Head|HEAD|worker|Worker|WORKER)$"),
        },
        serializedName: "type",
        required: true,
        type: {
          name: "String",
        },
      },
      vmSize: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9_\\-]{0,256}$"),
        },
        serializedName: "vmSize",
        required: true,
        type: {
          name: "String",
        },
      },
      count: {
        constraints: {
          InclusiveMinimum: 1,
        },
        serializedName: "count",
        required: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ClusterProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterProfile",
    modelProperties: {
      clusterVersion: {
        constraints: {
          Pattern: new RegExp(
            "^(0|[1-9][0-9]{0,18})\\.(0|[1-9][0-9]{0,18})\\.(0|[1-9][0-9]{0,18})(?:\\.(0|[1-9][0-9]{0,18}))?$",
          ),
        },
        serializedName: "clusterVersion",
        required: true,
        type: {
          name: "String",
        },
      },
      ossVersion: {
        constraints: {
          Pattern: new RegExp(
            "^(0|[1-9][0-9]{0,18})\\.(0|[1-9][0-9]{0,18})\\.(0|[1-9][0-9]{0,18})$",
          ),
        },
        serializedName: "ossVersion",
        required: true,
        type: {
          name: "String",
        },
      },
      components: {
        serializedName: "components",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClusterComponentsItem",
            },
          },
        },
      },
      identityProfile: {
        serializedName: "identityProfile",
        type: {
          name: "Composite",
          className: "IdentityProfile",
        },
      },
      authorizationProfile: {
        serializedName: "authorizationProfile",
        type: {
          name: "Composite",
          className: "AuthorizationProfile",
        },
      },
      secretsProfile: {
        serializedName: "secretsProfile",
        type: {
          name: "Composite",
          className: "SecretsProfile",
        },
      },
      serviceConfigsProfiles: {
        serializedName: "serviceConfigsProfiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClusterServiceConfigsProfile",
            },
          },
        },
      },
      connectivityProfile: {
        serializedName: "connectivityProfile",
        type: {
          name: "Composite",
          className: "ConnectivityProfile",
        },
      },
      clusterAccessProfile: {
        serializedName: "clusterAccessProfile",
        type: {
          name: "Composite",
          className: "ClusterAccessProfile",
        },
      },
      logAnalyticsProfile: {
        serializedName: "logAnalyticsProfile",
        type: {
          name: "Composite",
          className: "ClusterLogAnalyticsProfile",
        },
      },
      prometheusProfile: {
        serializedName: "prometheusProfile",
        type: {
          name: "Composite",
          className: "ClusterPrometheusProfile",
        },
      },
      sshProfile: {
        serializedName: "sshProfile",
        type: {
          name: "Composite",
          className: "SshProfile",
        },
      },
      autoscaleProfile: {
        serializedName: "autoscaleProfile",
        type: {
          name: "Composite",
          className: "AutoscaleProfile",
        },
      },
      rangerPluginProfile: {
        serializedName: "rangerPluginProfile",
        type: {
          name: "Composite",
          className: "ClusterRangerPluginProfile",
        },
      },
      kafkaProfile: {
        serializedName: "kafkaProfile",
        type: {
          name: "Composite",
          className: "KafkaProfile",
        },
      },
      trinoProfile: {
        serializedName: "trinoProfile",
        type: {
          name: "Composite",
          className: "TrinoProfile",
        },
      },
      llapProfile: {
        serializedName: "llapProfile",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
      flinkProfile: {
        serializedName: "flinkProfile",
        type: {
          name: "Composite",
          className: "FlinkProfile",
        },
      },
      sparkProfile: {
        serializedName: "sparkProfile",
        type: {
          name: "Composite",
          className: "SparkProfile",
        },
      },
      rangerProfile: {
        serializedName: "rangerProfile",
        type: {
          name: "Composite",
          className: "RangerProfile",
        },
      },
      stubProfile: {
        serializedName: "stubProfile",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
      scriptActionProfiles: {
        serializedName: "scriptActionProfiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScriptActionProfile",
            },
          },
        },
      },
    },
  },
};

export const ClusterComponentsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterComponentsItem",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      version: {
        serializedName: "version",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AuthorizationProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AuthorizationProfile",
    modelProperties: {
      userIds: {
        serializedName: "userIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      groupIds: {
        serializedName: "groupIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const SecretsProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecretsProfile",
    modelProperties: {
      keyVaultResourceId: {
        serializedName: "keyVaultResourceId",
        required: true,
        type: {
          name: "String",
        },
      },
      secrets: {
        serializedName: "secrets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SecretReference",
            },
          },
        },
      },
    },
  },
};

export const SecretReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecretReference",
    modelProperties: {
      referenceName: {
        serializedName: "referenceName",
        required: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String",
        },
      },
      version: {
        serializedName: "version",
        type: {
          name: "String",
        },
      },
      keyVaultObjectName: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9-]{1,126}$"),
        },
        serializedName: "keyVaultObjectName",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClusterServiceConfigsProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterServiceConfigsProfile",
    modelProperties: {
      serviceName: {
        serializedName: "serviceName",
        required: true,
        type: {
          name: "String",
        },
      },
      configs: {
        serializedName: "configs",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClusterServiceConfig",
            },
          },
        },
      },
    },
  },
};

export const ClusterServiceConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterServiceConfig",
    modelProperties: {
      component: {
        serializedName: "component",
        required: true,
        type: {
          name: "String",
        },
      },
      files: {
        serializedName: "files",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClusterConfigFile",
            },
          },
        },
      },
    },
  },
};

export const ClusterConfigFile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterConfigFile",
    modelProperties: {
      fileName: {
        serializedName: "fileName",
        required: true,
        type: {
          name: "String",
        },
      },
      content: {
        serializedName: "content",
        type: {
          name: "String",
        },
      },
      encoding: {
        serializedName: "encoding",
        type: {
          name: "String",
        },
      },
      path: {
        serializedName: "path",
        type: {
          name: "String",
        },
      },
      values: {
        serializedName: "values",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const ConnectivityProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectivityProfile",
    modelProperties: {
      web: {
        serializedName: "web",
        type: {
          name: "Composite",
          className: "ConnectivityProfileWeb",
        },
      },
      ssh: {
        serializedName: "ssh",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SshConnectivityEndpoint",
            },
          },
        },
      },
    },
  },
};

export const WebConnectivityEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WebConnectivityEndpoint",
    modelProperties: {
      fqdn: {
        serializedName: "fqdn",
        required: true,
        type: {
          name: "String",
        },
      },
      privateFqdn: {
        serializedName: "privateFqdn",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SshConnectivityEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SshConnectivityEndpoint",
    modelProperties: {
      endpoint: {
        serializedName: "endpoint",
        required: true,
        type: {
          name: "String",
        },
      },
      privateSshEndpoint: {
        serializedName: "privateSshEndpoint",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClusterAccessProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterAccessProfile",
    modelProperties: {
      enableInternalIngress: {
        serializedName: "enableInternalIngress",
        required: true,
        type: {
          name: "Boolean",
        },
      },
      privateLinkServiceId: {
        serializedName: "privateLinkServiceId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClusterLogAnalyticsProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterLogAnalyticsProfile",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        required: true,
        type: {
          name: "Boolean",
        },
      },
      applicationLogs: {
        serializedName: "applicationLogs",
        type: {
          name: "Composite",
          className: "ClusterLogAnalyticsApplicationLogs",
        },
      },
      metricsEnabled: {
        serializedName: "metricsEnabled",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const ClusterLogAnalyticsApplicationLogs: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterLogAnalyticsApplicationLogs",
    modelProperties: {
      stdOutEnabled: {
        serializedName: "stdOutEnabled",
        type: {
          name: "Boolean",
        },
      },
      stdErrorEnabled: {
        serializedName: "stdErrorEnabled",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const ClusterPrometheusProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPrometheusProfile",
    modelProperties: {
      enabled: {
        defaultValue: false,
        serializedName: "enabled",
        required: true,
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const SshProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SshProfile",
    modelProperties: {
      count: {
        constraints: {
          InclusiveMaximum: 5,
          InclusiveMinimum: 0,
        },
        serializedName: "count",
        required: true,
        type: {
          name: "Number",
        },
      },
      podPrefix: {
        serializedName: "podPrefix",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AutoscaleProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutoscaleProfile",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        required: true,
        type: {
          name: "Boolean",
        },
      },
      gracefulDecommissionTimeout: {
        serializedName: "gracefulDecommissionTimeout",
        type: {
          name: "Number",
        },
      },
      autoscaleType: {
        serializedName: "autoscaleType",
        type: {
          name: "String",
        },
      },
      scheduleBasedConfig: {
        serializedName: "scheduleBasedConfig",
        type: {
          name: "Composite",
          className: "ScheduleBasedConfig",
        },
      },
      loadBasedConfig: {
        serializedName: "loadBasedConfig",
        type: {
          name: "Composite",
          className: "LoadBasedConfig",
        },
      },
    },
  },
};

export const ScheduleBasedConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScheduleBasedConfig",
    modelProperties: {
      timeZone: {
        serializedName: "timeZone",
        required: true,
        type: {
          name: "String",
        },
      },
      defaultCount: {
        serializedName: "defaultCount",
        required: true,
        type: {
          name: "Number",
        },
      },
      schedules: {
        serializedName: "schedules",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Schedule",
            },
          },
        },
      },
    },
  },
};

export const Schedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Schedule",
    modelProperties: {
      startTime: {
        constraints: {
          Pattern: new RegExp("^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"),
        },
        serializedName: "startTime",
        required: true,
        type: {
          name: "String",
        },
      },
      endTime: {
        constraints: {
          Pattern: new RegExp("^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"),
        },
        serializedName: "endTime",
        required: true,
        type: {
          name: "String",
        },
      },
      count: {
        serializedName: "count",
        required: true,
        type: {
          name: "Number",
        },
      },
      days: {
        serializedName: "days",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const LoadBasedConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoadBasedConfig",
    modelProperties: {
      minNodes: {
        serializedName: "minNodes",
        required: true,
        type: {
          name: "Number",
        },
      },
      maxNodes: {
        serializedName: "maxNodes",
        required: true,
        type: {
          name: "Number",
        },
      },
      pollInterval: {
        serializedName: "pollInterval",
        type: {
          name: "Number",
        },
      },
      cooldownPeriod: {
        serializedName: "cooldownPeriod",
        type: {
          name: "Number",
        },
      },
      scalingRules: {
        serializedName: "scalingRules",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScalingRule",
            },
          },
        },
      },
    },
  },
};

export const ScalingRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScalingRule",
    modelProperties: {
      actionType: {
        serializedName: "actionType",
        required: true,
        type: {
          name: "String",
        },
      },
      evaluationCount: {
        serializedName: "evaluationCount",
        required: true,
        type: {
          name: "Number",
        },
      },
      scalingMetric: {
        serializedName: "scalingMetric",
        required: true,
        type: {
          name: "String",
        },
      },
      comparisonRule: {
        serializedName: "comparisonRule",
        type: {
          name: "Composite",
          className: "ComparisonRule",
        },
      },
    },
  },
};

export const ComparisonRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComparisonRule",
    modelProperties: {
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String",
        },
      },
      threshold: {
        serializedName: "threshold",
        required: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ClusterRangerPluginProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterRangerPluginProfile",
    modelProperties: {
      enabled: {
        defaultValue: false,
        serializedName: "enabled",
        required: true,
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const KafkaProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KafkaProfile",
    modelProperties: {
      enableKRaft: {
        defaultValue: true,
        serializedName: "enableKRaft",
        type: {
          name: "Boolean",
        },
      },
      enablePublicEndpoints: {
        defaultValue: false,
        serializedName: "enablePublicEndpoints",
        type: {
          name: "Boolean",
        },
      },
      remoteStorageUri: {
        constraints: {
          Pattern: new RegExp("^(https?|abfss?):\\/\\/[^/]+(?:\\/|$)"),
        },
        serializedName: "remoteStorageUri",
        type: {
          name: "String",
        },
      },
      diskStorage: {
        serializedName: "diskStorage",
        type: {
          name: "Composite",
          className: "DiskStorageProfile",
        },
      },
      clusterIdentity: {
        serializedName: "clusterIdentity",
        type: {
          name: "Composite",
          className: "IdentityProfile",
        },
      },
      connectivityEndpoints: {
        serializedName: "connectivityEndpoints",
        type: {
          name: "Composite",
          className: "KafkaConnectivityEndpoints",
        },
      },
    },
  },
};

export const DiskStorageProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskStorageProfile",
    modelProperties: {
      dataDiskSize: {
        serializedName: "dataDiskSize",
        required: true,
        type: {
          name: "Number",
        },
      },
      dataDiskType: {
        serializedName: "dataDiskType",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const KafkaConnectivityEndpoints: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KafkaConnectivityEndpoints",
    modelProperties: {
      bootstrapServerEndpoint: {
        serializedName: "bootstrapServerEndpoint",
        type: {
          name: "String",
        },
      },
      brokerEndpoints: {
        serializedName: "brokerEndpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const TrinoProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrinoProfile",
    modelProperties: {
      catalogOptions: {
        serializedName: "catalogOptions",
        type: {
          name: "Composite",
          className: "CatalogOptions",
        },
      },
      coordinator: {
        serializedName: "coordinator",
        type: {
          name: "Composite",
          className: "TrinoCoordinator",
        },
      },
      userPluginsSpec: {
        serializedName: "userPluginsSpec",
        type: {
          name: "Composite",
          className: "TrinoUserPlugins",
        },
      },
      userTelemetrySpec: {
        serializedName: "userTelemetrySpec",
        type: {
          name: "Composite",
          className: "TrinoUserTelemetry",
        },
      },
      worker: {
        serializedName: "worker",
        type: {
          name: "Composite",
          className: "TrinoWorker",
        },
      },
    },
  },
};

export const CatalogOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CatalogOptions",
    modelProperties: {
      hive: {
        serializedName: "hive",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HiveCatalogOption",
            },
          },
        },
      },
    },
  },
};

export const HiveCatalogOption: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HiveCatalogOption",
    modelProperties: {
      catalogName: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "catalogName",
        required: true,
        type: {
          name: "String",
        },
      },
      metastoreDbConnectionAuthenticationMode: {
        serializedName: "metastoreDbConnectionAuthenticationMode",
        type: {
          name: "String",
        },
      },
      metastoreDbConnectionPasswordSecret: {
        serializedName: "metastoreDbConnectionPasswordSecret",
        type: {
          name: "String",
        },
      },
      metastoreDbConnectionURL: {
        serializedName: "metastoreDbConnectionURL",
        required: true,
        type: {
          name: "String",
        },
      },
      metastoreDbConnectionUserName: {
        serializedName: "metastoreDbConnectionUserName",
        type: {
          name: "String",
        },
      },
      metastoreWarehouseDir: {
        serializedName: "metastoreWarehouseDir",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TrinoCoordinator: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrinoCoordinator",
    modelProperties: {
      debug: {
        serializedName: "debug",
        type: {
          name: "Composite",
          className: "TrinoDebugConfig",
        },
      },
      highAvailabilityEnabled: {
        defaultValue: true,
        serializedName: "highAvailabilityEnabled",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const TrinoDebugConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrinoDebugConfig",
    modelProperties: {
      enable: {
        defaultValue: false,
        serializedName: "enable",
        type: {
          name: "Boolean",
        },
      },
      port: {
        defaultValue: 8008,
        serializedName: "port",
        type: {
          name: "Number",
        },
      },
      suspend: {
        defaultValue: false,
        serializedName: "suspend",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const TrinoUserPlugins: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrinoUserPlugins",
    modelProperties: {
      plugins: {
        serializedName: "plugins",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TrinoUserPlugin",
            },
          },
        },
      },
    },
  },
};

export const TrinoUserPlugin: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrinoUserPlugin",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean",
        },
      },
      name: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      path: {
        constraints: {
          Pattern: new RegExp("^(https)|(abfss):\\/\\/.*$"),
          MinLength: 1,
        },
        serializedName: "path",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TrinoUserTelemetry: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrinoUserTelemetry",
    modelProperties: {
      storage: {
        serializedName: "storage",
        type: {
          name: "Composite",
          className: "TrinoTelemetryConfig",
        },
      },
    },
  },
};

export const TrinoTelemetryConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrinoTelemetryConfig",
    modelProperties: {
      hivecatalogName: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "hivecatalogName",
        type: {
          name: "String",
        },
      },
      hivecatalogSchema: {
        defaultValue: "trinologs",
        serializedName: "hivecatalogSchema",
        type: {
          name: "String",
        },
      },
      partitionRetentionInDays: {
        defaultValue: 365,
        serializedName: "partitionRetentionInDays",
        type: {
          name: "Number",
        },
      },
      path: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "path",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TrinoWorker: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrinoWorker",
    modelProperties: {
      debug: {
        serializedName: "debug",
        type: {
          name: "Composite",
          className: "TrinoDebugConfig",
        },
      },
    },
  },
};

export const FlinkProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FlinkProfile",
    modelProperties: {
      storage: {
        serializedName: "storage",
        type: {
          name: "Composite",
          className: "FlinkStorageProfile",
        },
      },
      numReplicas: {
        serializedName: "numReplicas",
        type: {
          name: "Number",
        },
      },
      jobManager: {
        serializedName: "jobManager",
        type: {
          name: "Composite",
          className: "ComputeResourceDefinition",
        },
      },
      historyServer: {
        serializedName: "historyServer",
        type: {
          name: "Composite",
          className: "ComputeResourceDefinition",
        },
      },
      taskManager: {
        serializedName: "taskManager",
        type: {
          name: "Composite",
          className: "ComputeResourceDefinition",
        },
      },
      catalogOptions: {
        serializedName: "catalogOptions",
        type: {
          name: "Composite",
          className: "FlinkCatalogOptions",
        },
      },
      deploymentMode: {
        serializedName: "deploymentMode",
        type: {
          name: "String",
        },
      },
      jobSpec: {
        serializedName: "jobSpec",
        type: {
          name: "Composite",
          className: "FlinkJobProfile",
        },
      },
    },
  },
};

export const FlinkStorageProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FlinkStorageProfile",
    modelProperties: {
      storageUri: {
        constraints: {
          Pattern: new RegExp(
            "^(\\w{4,5}):\\/\\/(.*)@(.*).\\b(blob|dfs)\\b.*$",
          ),
        },
        serializedName: "storageUri",
        required: true,
        type: {
          name: "String",
        },
      },
      storagekey: {
        serializedName: "storagekey",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ComputeResourceDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeResourceDefinition",
    modelProperties: {
      cpu: {
        serializedName: "cpu",
        required: true,
        type: {
          name: "Number",
        },
      },
      memory: {
        serializedName: "memory",
        required: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const FlinkCatalogOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FlinkCatalogOptions",
    modelProperties: {
      hive: {
        serializedName: "hive",
        type: {
          name: "Composite",
          className: "FlinkHiveCatalogOption",
        },
      },
    },
  },
};

export const FlinkHiveCatalogOption: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FlinkHiveCatalogOption",
    modelProperties: {
      metastoreDbConnectionAuthenticationMode: {
        serializedName: "metastoreDbConnectionAuthenticationMode",
        type: {
          name: "String",
        },
      },
      metastoreDbConnectionPasswordSecret: {
        serializedName: "metastoreDbConnectionPasswordSecret",
        type: {
          name: "String",
        },
      },
      metastoreDbConnectionURL: {
        serializedName: "metastoreDbConnectionURL",
        required: true,
        type: {
          name: "String",
        },
      },
      metastoreDbConnectionUserName: {
        serializedName: "metastoreDbConnectionUserName",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const FlinkJobProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FlinkJobProfile",
    modelProperties: {
      jobJarDirectory: {
        serializedName: "jobJarDirectory",
        required: true,
        type: {
          name: "String",
        },
      },
      jarName: {
        serializedName: "jarName",
        required: true,
        type: {
          name: "String",
        },
      },
      entryClass: {
        serializedName: "entryClass",
        type: {
          name: "String",
        },
      },
      args: {
        serializedName: "args",
        type: {
          name: "String",
        },
      },
      savePointName: {
        serializedName: "savePointName",
        type: {
          name: "String",
        },
      },
      upgradeMode: {
        serializedName: "upgradeMode",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SparkProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SparkProfile",
    modelProperties: {
      defaultStorageUrl: {
        serializedName: "defaultStorageUrl",
        type: {
          name: "String",
        },
      },
      metastoreSpec: {
        serializedName: "metastoreSpec",
        type: {
          name: "Composite",
          className: "SparkMetastoreSpec",
        },
      },
      userPluginsSpec: {
        serializedName: "userPluginsSpec",
        type: {
          name: "Composite",
          className: "SparkUserPlugins",
        },
      },
    },
  },
};

export const SparkMetastoreSpec: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SparkMetastoreSpec",
    modelProperties: {
      dbServerHost: {
        serializedName: "dbServerHost",
        required: true,
        type: {
          name: "String",
        },
      },
      dbName: {
        serializedName: "dbName",
        required: true,
        type: {
          name: "String",
        },
      },
      dbConnectionAuthenticationMode: {
        defaultValue: "IdentityAuth",
        serializedName: "dbConnectionAuthenticationMode",
        type: {
          name: "String",
        },
      },
      dbUserName: {
        serializedName: "dbUserName",
        type: {
          name: "String",
        },
      },
      dbPasswordSecretName: {
        serializedName: "dbPasswordSecretName",
        type: {
          name: "String",
        },
      },
      keyVaultId: {
        serializedName: "keyVaultId",
        type: {
          name: "String",
        },
      },
      thriftUrl: {
        serializedName: "thriftUrl",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SparkUserPlugins: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SparkUserPlugins",
    modelProperties: {
      plugins: {
        serializedName: "plugins",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SparkUserPlugin",
            },
          },
        },
      },
    },
  },
};

export const SparkUserPlugin: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SparkUserPlugin",
    modelProperties: {
      path: {
        constraints: {
          Pattern: new RegExp("^(https)|(abfss):\\/\\/.*$"),
          MinLength: 1,
        },
        serializedName: "path",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const RangerProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RangerProfile",
    modelProperties: {
      rangerAdmin: {
        serializedName: "rangerAdmin",
        type: {
          name: "Composite",
          className: "RangerAdminSpec",
        },
      },
      rangerAudit: {
        serializedName: "rangerAudit",
        type: {
          name: "Composite",
          className: "RangerAuditSpec",
        },
      },
      rangerUsersync: {
        serializedName: "rangerUsersync",
        type: {
          name: "Composite",
          className: "RangerUsersyncSpec",
        },
      },
    },
  },
};

export const RangerAdminSpec: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RangerAdminSpec",
    modelProperties: {
      admins: {
        serializedName: "admins",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      database: {
        serializedName: "database",
        type: {
          name: "Composite",
          className: "RangerAdminSpecDatabase",
        },
      },
    },
  },
};

export const RangerAdminSpecDatabase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RangerAdminSpecDatabase",
    modelProperties: {
      host: {
        serializedName: "host",
        required: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      passwordSecretRef: {
        serializedName: "passwordSecretRef",
        type: {
          name: "String",
        },
      },
      username: {
        serializedName: "username",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const RangerAuditSpec: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RangerAuditSpec",
    modelProperties: {
      storageAccount: {
        constraints: {
          Pattern: new RegExp("^(https)|(abfss):\\/\\/.*$"),
          MinLength: 1,
        },
        serializedName: "storageAccount",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const RangerUsersyncSpec: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RangerUsersyncSpec",
    modelProperties: {
      enabled: {
        defaultValue: true,
        serializedName: "enabled",
        type: {
          name: "Boolean",
        },
      },
      groups: {
        serializedName: "groups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      mode: {
        defaultValue: "automatic",
        serializedName: "mode",
        type: {
          name: "String",
        },
      },
      userMappingLocation: {
        constraints: {
          Pattern: new RegExp("^(https)|(abfss):\\/\\/.*$"),
          MinLength: 1,
        },
        serializedName: "userMappingLocation",
        type: {
          name: "String",
        },
      },
      users: {
        serializedName: "users",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const ScriptActionProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScriptActionProfile",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      url: {
        constraints: {
          Pattern: new RegExp("^(https)|(http):\\/\\/.*$"),
        },
        serializedName: "url",
        required: true,
        type: {
          name: "String",
        },
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "String",
        },
      },
      services: {
        serializedName: "services",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      timeoutInMinutes: {
        serializedName: "timeoutInMinutes",
        type: {
          name: "Number",
        },
      },
      shouldPersist: {
        defaultValue: true,
        serializedName: "shouldPersist",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const ClusterUpgrade: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterUpgrade",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ClusterUpgradeProperties",
        },
      },
    },
  },
};

export const ClusterUpgradeProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterUpgradeProperties",
    uberParent: "ClusterUpgradeProperties",
    polymorphicDiscriminator: {
      serializedName: "upgradeType",
      clientName: "upgradeType",
    },
    modelProperties: {
      upgradeType: {
        serializedName: "upgradeType",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClusterAvailableUpgradeList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterAvailableUpgradeList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClusterAvailableUpgrade",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClusterAvailableUpgradeProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterAvailableUpgradeProperties",
    uberParent: "ClusterAvailableUpgradeProperties",
    polymorphicDiscriminator: {
      serializedName: "upgradeType",
      clientName: "upgradeType",
    },
    modelProperties: {
      upgradeType: {
        serializedName: "upgradeType",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClusterResizeProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterResizeProperties",
    modelProperties: {
      targetWorkerNodeCount: {
        serializedName: "targetWorkerNodeCount",
        required: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ClusterPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPatch",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ClusterPatchProperties",
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const ClusterPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPatchProperties",
    modelProperties: {
      clusterProfile: {
        serializedName: "clusterProfile",
        type: {
          name: "Composite",
          className: "UpdatableClusterProfile",
        },
      },
    },
  },
};

export const UpdatableClusterProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdatableClusterProfile",
    modelProperties: {
      serviceConfigsProfiles: {
        serializedName: "serviceConfigsProfiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClusterServiceConfigsProfile",
            },
          },
        },
      },
      sshProfile: {
        serializedName: "sshProfile",
        type: {
          name: "Composite",
          className: "SshProfile",
        },
      },
      autoscaleProfile: {
        serializedName: "autoscaleProfile",
        type: {
          name: "Composite",
          className: "AutoscaleProfile",
        },
      },
      authorizationProfile: {
        serializedName: "authorizationProfile",
        type: {
          name: "Composite",
          className: "AuthorizationProfile",
        },
      },
      logAnalyticsProfile: {
        serializedName: "logAnalyticsProfile",
        type: {
          name: "Composite",
          className: "ClusterLogAnalyticsProfile",
        },
      },
      prometheusProfile: {
        serializedName: "prometheusProfile",
        type: {
          name: "Composite",
          className: "ClusterPrometheusProfile",
        },
      },
      rangerPluginProfile: {
        serializedName: "rangerPluginProfile",
        type: {
          name: "Composite",
          className: "ClusterRangerPluginProfile",
        },
      },
      rangerProfile: {
        serializedName: "rangerProfile",
        type: {
          name: "Composite",
          className: "RangerProfile",
        },
      },
      scriptActionProfiles: {
        serializedName: "scriptActionProfiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScriptActionProfile",
            },
          },
        },
      },
    },
  },
};

export const ClusterJobProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterJobProperties",
    uberParent: "ClusterJobProperties",
    polymorphicDiscriminator: {
      serializedName: "jobType",
      clientName: "jobType",
    },
    modelProperties: {
      jobType: {
        serializedName: "jobType",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClusterJobList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterJobList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClusterJob",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ServiceConfigListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceConfigListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceConfigResult",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ServiceConfigResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceConfigResult",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ServiceConfigResultProperties",
        },
      },
    },
  },
};

export const ServiceConfigListResultProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceConfigListResultProperties",
    modelProperties: {
      serviceName: {
        serializedName: "serviceName",
        required: true,
        type: {
          name: "String",
        },
      },
      fileName: {
        serializedName: "fileName",
        required: true,
        type: {
          name: "String",
        },
      },
      content: {
        serializedName: "content",
        type: {
          name: "String",
        },
      },
      componentName: {
        serializedName: "componentName",
        required: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
      path: {
        serializedName: "path",
        type: {
          name: "String",
        },
      },
      customKeys: {
        serializedName: "customKeys",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      defaultKeys: {
        serializedName: "defaultKeys",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "ServiceConfigListResultValueEntity",
            },
          },
        },
      },
    },
  },
};

export const ServiceConfigListResultValueEntity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceConfigListResultValueEntity",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const NameAvailabilityParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NameAvailabilityParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const NameAvailabilityResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NameAvailabilityResult",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean",
        },
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClusterInstanceViewsResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterInstanceViewsResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClusterInstanceViewResult",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClusterInstanceViewResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterInstanceViewResult",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ClusterInstanceViewResultProperties",
        },
      },
    },
  },
};

export const ClusterInstanceViewProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterInstanceViewProperties",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "Composite",
          className: "ClusterInstanceViewPropertiesStatus",
        },
      },
      serviceStatuses: {
        serializedName: "serviceStatuses",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceStatus",
            },
          },
        },
      },
    },
  },
};

export const ClusterInstanceViewStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterInstanceViewStatus",
    modelProperties: {
      ready: {
        serializedName: "ready",
        required: true,
        type: {
          name: "String",
        },
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ServiceStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceStatus",
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String",
        },
      },
      ready: {
        serializedName: "ready",
        required: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay",
        },
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClusterPoolVersionsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPoolVersionsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClusterPoolVersion",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClusterPoolVersionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPoolVersionProperties",
    modelProperties: {
      clusterPoolVersion: {
        constraints: {
          Pattern: new RegExp("^(0|[1-9][0-9]{0,18})\\.(0|[1-9][0-9]{0,18})$"),
        },
        serializedName: "clusterPoolVersion",
        type: {
          name: "String",
        },
      },
      aksVersion: {
        serializedName: "aksVersion",
        type: {
          name: "String",
        },
      },
      isPreview: {
        defaultValue: false,
        serializedName: "isPreview",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const ClusterVersionsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterVersionsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClusterVersion",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClusterVersionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterVersionProperties",
    modelProperties: {
      clusterType: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z][a-zA-Z0-9]{0,31}$"),
        },
        serializedName: "clusterType",
        type: {
          name: "String",
        },
      },
      clusterVersion: {
        constraints: {
          Pattern: new RegExp(
            "^(0|[1-9][0-9]{0,18})\\.(0|[1-9][0-9]{0,18})\\.(0|[1-9][0-9]{0,18})$",
          ),
        },
        serializedName: "clusterVersion",
        type: {
          name: "String",
        },
      },
      ossVersion: {
        constraints: {
          Pattern: new RegExp(
            "^(0|[1-9][0-9]{0,18})\\.(0|[1-9][0-9]{0,18})\\.(0|[1-9][0-9]{0,18})$",
          ),
        },
        serializedName: "ossVersion",
        type: {
          name: "String",
        },
      },
      clusterPoolVersion: {
        serializedName: "clusterPoolVersion",
        type: {
          name: "String",
        },
      },
      isPreview: {
        defaultValue: false,
        serializedName: "isPreview",
        type: {
          name: "Boolean",
        },
      },
      components: {
        serializedName: "components",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClusterComponentsItem",
            },
          },
        },
      },
    },
  },
};

export const ClusterPoolResourcePropertiesClusterPoolProfile: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ClusterPoolResourcePropertiesClusterPoolProfile",
      modelProperties: {
        ...ClusterPoolProfile.type.modelProperties,
      },
    },
  };

export const ClusterPoolResourcePropertiesComputeProfile: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ClusterPoolResourcePropertiesComputeProfile",
      modelProperties: {
        ...ClusterPoolComputeProfile.type.modelProperties,
      },
    },
  };

export const ClusterPoolResourcePropertiesAksClusterProfile: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ClusterPoolResourcePropertiesAksClusterProfile",
      modelProperties: {
        ...AksClusterProfile.type.modelProperties,
      },
    },
  };

export const AksClusterProfileAksClusterAgentPoolIdentityProfile: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "AksClusterProfileAksClusterAgentPoolIdentityProfile",
      modelProperties: {
        ...IdentityProfile.type.modelProperties,
      },
    },
  };

export const ClusterPoolResourcePropertiesNetworkProfile: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ClusterPoolResourcePropertiesNetworkProfile",
      modelProperties: {
        ...ClusterPoolNetworkProfile.type.modelProperties,
      },
    },
  };

export const ClusterPoolResourcePropertiesLogAnalyticsProfile: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ClusterPoolResourcePropertiesLogAnalyticsProfile",
      modelProperties: {
        ...ClusterPoolLogAnalyticsProfile.type.modelProperties,
      },
    },
  };

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
    },
  },
};

export const ClusterPoolAKSPatchVersionUpgradeProperties: coreClient.CompositeMapper =
  {
    serializedName: "AKSPatchUpgrade",
    type: {
      name: "Composite",
      className: "ClusterPoolAKSPatchVersionUpgradeProperties",
      uberParent: "ClusterPoolUpgradeProperties",
      polymorphicDiscriminator:
        ClusterPoolUpgradeProperties.type.polymorphicDiscriminator,
      modelProperties: {
        ...ClusterPoolUpgradeProperties.type.modelProperties,
        upgradeClusterPool: {
          defaultValue: false,
          serializedName: "upgradeClusterPool",
          type: {
            name: "Boolean",
          },
        },
        upgradeAllClusterNodes: {
          defaultValue: false,
          serializedName: "upgradeAllClusterNodes",
          type: {
            name: "Boolean",
          },
        },
        targetAksVersion: {
          serializedName: "targetAksVersion",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const ClusterPoolNodeOsImageUpdateProperties: coreClient.CompositeMapper =
  {
    serializedName: "NodeOsUpgrade",
    type: {
      name: "Composite",
      className: "ClusterPoolNodeOsImageUpdateProperties",
      uberParent: "ClusterPoolUpgradeProperties",
      polymorphicDiscriminator:
        ClusterPoolUpgradeProperties.type.polymorphicDiscriminator,
      modelProperties: {
        ...ClusterPoolUpgradeProperties.type.modelProperties,
      },
    },
  };

export const ClusterPoolAvailableUpgradeAksPatchUpgradeProperties: coreClient.CompositeMapper =
  {
    serializedName: "AKSPatchUpgrade",
    type: {
      name: "Composite",
      className: "ClusterPoolAvailableUpgradeAksPatchUpgradeProperties",
      uberParent: "ClusterPoolAvailableUpgradeProperties",
      polymorphicDiscriminator:
        ClusterPoolAvailableUpgradeProperties.type.polymorphicDiscriminator,
      modelProperties: {
        ...ClusterPoolAvailableUpgradeProperties.type.modelProperties,
        currentVersion: {
          serializedName: "currentVersion",
          type: {
            name: "String",
          },
        },
        currentVersionStatus: {
          serializedName: "currentVersionStatus",
          type: {
            name: "String",
          },
        },
        latestVersion: {
          serializedName: "latestVersion",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const ClusterPoolAvailableUpgradeNodeOsUpgradeProperties: coreClient.CompositeMapper =
  {
    serializedName: "NodeOsUpgrade",
    type: {
      name: "Composite",
      className: "ClusterPoolAvailableUpgradeNodeOsUpgradeProperties",
      uberParent: "ClusterPoolAvailableUpgradeProperties",
      polymorphicDiscriminator:
        ClusterPoolAvailableUpgradeProperties.type.polymorphicDiscriminator,
      modelProperties: {
        ...ClusterPoolAvailableUpgradeProperties.type.modelProperties,
        latestVersion: {
          serializedName: "latestVersion",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const ConnectivityProfileWeb: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectivityProfileWeb",
    modelProperties: {
      ...WebConnectivityEndpoint.type.modelProperties,
    },
  },
};

export const ClusterAKSPatchVersionUpgradeProperties: coreClient.CompositeMapper =
  {
    serializedName: "AKSPatchUpgrade",
    type: {
      name: "Composite",
      className: "ClusterAKSPatchVersionUpgradeProperties",
      uberParent: "ClusterUpgradeProperties",
      polymorphicDiscriminator:
        ClusterUpgradeProperties.type.polymorphicDiscriminator,
      modelProperties: {
        ...ClusterUpgradeProperties.type.modelProperties,
      },
    },
  };

export const ClusterHotfixUpgradeProperties: coreClient.CompositeMapper = {
  serializedName: "HotfixUpgrade",
  type: {
    name: "Composite",
    className: "ClusterHotfixUpgradeProperties",
    uberParent: "ClusterUpgradeProperties",
    polymorphicDiscriminator:
      ClusterUpgradeProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ClusterUpgradeProperties.type.modelProperties,
      targetOssVersion: {
        serializedName: "targetOssVersion",
        type: {
          name: "String",
        },
      },
      targetClusterVersion: {
        serializedName: "targetClusterVersion",
        type: {
          name: "String",
        },
      },
      targetBuildNumber: {
        serializedName: "targetBuildNumber",
        type: {
          name: "String",
        },
      },
      componentName: {
        serializedName: "componentName",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClusterAvailableUpgradeAksPatchUpgradeProperties: coreClient.CompositeMapper =
  {
    serializedName: "AKSPatchUpgrade",
    type: {
      name: "Composite",
      className: "ClusterAvailableUpgradeAksPatchUpgradeProperties",
      uberParent: "ClusterAvailableUpgradeProperties",
      polymorphicDiscriminator:
        ClusterAvailableUpgradeProperties.type.polymorphicDiscriminator,
      modelProperties: {
        ...ClusterAvailableUpgradeProperties.type.modelProperties,
        currentVersion: {
          serializedName: "currentVersion",
          type: {
            name: "String",
          },
        },
        currentVersionStatus: {
          serializedName: "currentVersionStatus",
          type: {
            name: "String",
          },
        },
        latestVersion: {
          serializedName: "latestVersion",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const ClusterAvailableUpgradeHotfixUpgradeProperties: coreClient.CompositeMapper =
  {
    serializedName: "HotfixUpgrade",
    type: {
      name: "Composite",
      className: "ClusterAvailableUpgradeHotfixUpgradeProperties",
      uberParent: "ClusterAvailableUpgradeProperties",
      polymorphicDiscriminator:
        ClusterAvailableUpgradeProperties.type.polymorphicDiscriminator,
      modelProperties: {
        ...ClusterAvailableUpgradeProperties.type.modelProperties,
        description: {
          serializedName: "description",
          type: {
            name: "String",
          },
        },
        sourceOssVersion: {
          serializedName: "sourceOssVersion",
          type: {
            name: "String",
          },
        },
        sourceClusterVersion: {
          serializedName: "sourceClusterVersion",
          type: {
            name: "String",
          },
        },
        sourceBuildNumber: {
          serializedName: "sourceBuildNumber",
          type: {
            name: "String",
          },
        },
        targetOssVersion: {
          serializedName: "targetOssVersion",
          type: {
            name: "String",
          },
        },
        targetClusterVersion: {
          serializedName: "targetClusterVersion",
          type: {
            name: "String",
          },
        },
        targetBuildNumber: {
          serializedName: "targetBuildNumber",
          type: {
            name: "String",
          },
        },
        componentName: {
          serializedName: "componentName",
          type: {
            name: "String",
          },
        },
        severity: {
          serializedName: "severity",
          type: {
            name: "String",
          },
        },
        extendedProperties: {
          serializedName: "extendedProperties",
          type: {
            name: "String",
          },
        },
        createdTime: {
          serializedName: "createdTime",
          type: {
            name: "DateTime",
          },
        },
      },
    },
  };

export const FlinkJobProperties: coreClient.CompositeMapper = {
  serializedName: "FlinkJob",
  type: {
    name: "Composite",
    className: "FlinkJobProperties",
    uberParent: "ClusterJobProperties",
    polymorphicDiscriminator:
      ClusterJobProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ClusterJobProperties.type.modelProperties,
      runId: {
        serializedName: "runId",
        type: {
          name: "String",
        },
      },
      jobName: {
        serializedName: "jobName",
        type: {
          name: "String",
        },
      },
      jobJarDirectory: {
        serializedName: "jobJarDirectory",
        type: {
          name: "String",
        },
      },
      jarName: {
        serializedName: "jarName",
        type: {
          name: "String",
        },
      },
      entryClass: {
        serializedName: "entryClass",
        type: {
          name: "String",
        },
      },
      args: {
        serializedName: "args",
        type: {
          name: "String",
        },
      },
      savePointName: {
        serializedName: "savePointName",
        type: {
          name: "String",
        },
      },
      action: {
        serializedName: "action",
        type: {
          name: "String",
        },
      },
      flinkConfiguration: {
        serializedName: "flinkConfiguration",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      jobId: {
        serializedName: "jobId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      jobOutput: {
        serializedName: "jobOutput",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      actionResult: {
        serializedName: "actionResult",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      lastSavePoint: {
        serializedName: "lastSavePoint",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ServiceConfigResultProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceConfigResultProperties",
    modelProperties: {
      ...ServiceConfigListResultProperties.type.modelProperties,
    },
  },
};

export const ClusterInstanceViewResultProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterInstanceViewResultProperties",
    modelProperties: {
      ...ClusterInstanceViewProperties.type.modelProperties,
    },
  },
};

export const ClusterInstanceViewPropertiesStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterInstanceViewPropertiesStatus",
    modelProperties: {
      ...ClusterInstanceViewStatus.type.modelProperties,
    },
  },
};

export const ClusterPool: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPool",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ClusterPoolResourceProperties",
        },
      },
    },
  },
};

export const Cluster: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Cluster",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ClusterResourceProperties",
        },
      },
    },
  },
};

export const ClusterResizeData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterResizeData",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ClusterResizeProperties",
        },
      },
    },
  },
};

export const ClusterPoolAvailableUpgrade: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPoolAvailableUpgrade",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ClusterPoolAvailableUpgradeProperties",
        },
      },
    },
  },
};

export const ClusterAvailableUpgrade: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterAvailableUpgrade",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ClusterAvailableUpgradeProperties",
        },
      },
    },
  },
};

export const ClusterJob: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterJob",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ClusterJobProperties",
        },
      },
    },
  },
};

export const ClusterPoolVersion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPoolVersion",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ClusterPoolVersionProperties",
        },
      },
    },
  },
};

export const ClusterVersion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterVersion",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ClusterVersionProperties",
        },
      },
    },
  },
};

export const ClusterPoolsUpdateTagsHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPoolsUpdateTagsHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClusterPoolsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPoolsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClusterPoolsUpgradeHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPoolsUpgradeHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClustersUpgradeHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClustersUpgradeHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClustersResizeHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClustersResizeHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClustersUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClustersUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClustersDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClustersDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ClusterJobsRunJobHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterJobsRunJobHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export let discriminators = {
  ClusterPoolUpgradeProperties: ClusterPoolUpgradeProperties,
  ClusterPoolAvailableUpgradeProperties: ClusterPoolAvailableUpgradeProperties,
  ClusterUpgradeProperties: ClusterUpgradeProperties,
  ClusterAvailableUpgradeProperties: ClusterAvailableUpgradeProperties,
  ClusterJobProperties: ClusterJobProperties,
  "ClusterPoolUpgradeProperties.AKSPatchUpgrade":
    ClusterPoolAKSPatchVersionUpgradeProperties,
  "ClusterPoolUpgradeProperties.NodeOsUpgrade":
    ClusterPoolNodeOsImageUpdateProperties,
  "ClusterPoolAvailableUpgradeProperties.AKSPatchUpgrade":
    ClusterPoolAvailableUpgradeAksPatchUpgradeProperties,
  "ClusterPoolAvailableUpgradeProperties.NodeOsUpgrade":
    ClusterPoolAvailableUpgradeNodeOsUpgradeProperties,
  "ClusterUpgradeProperties.AKSPatchUpgrade":
    ClusterAKSPatchVersionUpgradeProperties,
  "ClusterUpgradeProperties.HotfixUpgrade": ClusterHotfixUpgradeProperties,
  "ClusterAvailableUpgradeProperties.AKSPatchUpgrade":
    ClusterAvailableUpgradeAksPatchUpgradeProperties,
  "ClusterAvailableUpgradeProperties.HotfixUpgrade":
    ClusterAvailableUpgradeHotfixUpgradeProperties,
  "ClusterJobProperties.FlinkJob": FlinkJobProperties,
};
