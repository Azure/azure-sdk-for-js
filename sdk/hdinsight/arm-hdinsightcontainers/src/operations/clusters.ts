/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Clusters } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HDInsightContainersManagementClient } from "../hDInsightContainersManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  Cluster,
  ClustersListByClusterPoolNameNextOptionalParams,
  ClustersListByClusterPoolNameOptionalParams,
  ClustersListByClusterPoolNameResponse,
  ServiceConfigResult,
  ClustersListServiceConfigsNextOptionalParams,
  ClustersListServiceConfigsOptionalParams,
  ClustersListServiceConfigsResponse,
  ClusterInstanceViewResult,
  ClustersListInstanceViewsNextOptionalParams,
  ClustersListInstanceViewsOptionalParams,
  ClustersListInstanceViewsResponse,
  ClusterUpgrade,
  ClustersUpgradeOptionalParams,
  ClustersUpgradeResponse,
  ClusterResizeData,
  ClustersResizeOptionalParams,
  ClustersResizeResponse,
  ClustersGetOptionalParams,
  ClustersGetResponse,
  ClustersCreateOptionalParams,
  ClustersCreateResponse,
  ClusterPatch,
  ClustersUpdateOptionalParams,
  ClustersUpdateResponse,
  ClustersDeleteOptionalParams,
  ClustersGetInstanceViewOptionalParams,
  ClustersGetInstanceViewResponse,
  ClustersListByClusterPoolNameNextResponse,
  ClustersListServiceConfigsNextResponse,
  ClustersListInstanceViewsNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Clusters operations. */
export class ClustersImpl implements Clusters {
  private readonly client: HDInsightContainersManagementClient;

  /**
   * Initialize a new instance of the class Clusters class.
   * @param client Reference to the service client
   */
  constructor(client: HDInsightContainersManagementClient) {
    this.client = client;
  }

  /**
   * Lists the HDInsight cluster pools under a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterPoolName The name of the cluster pool.
   * @param options The options parameters.
   */
  public listByClusterPoolName(
    resourceGroupName: string,
    clusterPoolName: string,
    options?: ClustersListByClusterPoolNameOptionalParams,
  ): PagedAsyncIterableIterator<Cluster> {
    const iter = this.listByClusterPoolNamePagingAll(
      resourceGroupName,
      clusterPoolName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByClusterPoolNamePagingPage(
          resourceGroupName,
          clusterPoolName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByClusterPoolNamePagingPage(
    resourceGroupName: string,
    clusterPoolName: string,
    options?: ClustersListByClusterPoolNameOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Cluster[]> {
    let result: ClustersListByClusterPoolNameResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByClusterPoolName(
        resourceGroupName,
        clusterPoolName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByClusterPoolNameNext(
        resourceGroupName,
        clusterPoolName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByClusterPoolNamePagingAll(
    resourceGroupName: string,
    clusterPoolName: string,
    options?: ClustersListByClusterPoolNameOptionalParams,
  ): AsyncIterableIterator<Cluster> {
    for await (const page of this.listByClusterPoolNamePagingPage(
      resourceGroupName,
      clusterPoolName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists the config dump of all services running in cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterPoolName The name of the cluster pool.
   * @param clusterName The name of the HDInsight cluster.
   * @param options The options parameters.
   */
  public listServiceConfigs(
    resourceGroupName: string,
    clusterPoolName: string,
    clusterName: string,
    options?: ClustersListServiceConfigsOptionalParams,
  ): PagedAsyncIterableIterator<ServiceConfigResult> {
    const iter = this.listServiceConfigsPagingAll(
      resourceGroupName,
      clusterPoolName,
      clusterName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listServiceConfigsPagingPage(
          resourceGroupName,
          clusterPoolName,
          clusterName,
          options,
          settings,
        );
      },
    };
  }

  private async *listServiceConfigsPagingPage(
    resourceGroupName: string,
    clusterPoolName: string,
    clusterName: string,
    options?: ClustersListServiceConfigsOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ServiceConfigResult[]> {
    let result: ClustersListServiceConfigsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listServiceConfigs(
        resourceGroupName,
        clusterPoolName,
        clusterName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listServiceConfigsNext(
        resourceGroupName,
        clusterPoolName,
        clusterName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listServiceConfigsPagingAll(
    resourceGroupName: string,
    clusterPoolName: string,
    clusterName: string,
    options?: ClustersListServiceConfigsOptionalParams,
  ): AsyncIterableIterator<ServiceConfigResult> {
    for await (const page of this.listServiceConfigsPagingPage(
      resourceGroupName,
      clusterPoolName,
      clusterName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists the lists of instance views
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterPoolName The name of the cluster pool.
   * @param clusterName The name of the HDInsight cluster.
   * @param options The options parameters.
   */
  public listInstanceViews(
    resourceGroupName: string,
    clusterPoolName: string,
    clusterName: string,
    options?: ClustersListInstanceViewsOptionalParams,
  ): PagedAsyncIterableIterator<ClusterInstanceViewResult> {
    const iter = this.listInstanceViewsPagingAll(
      resourceGroupName,
      clusterPoolName,
      clusterName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listInstanceViewsPagingPage(
          resourceGroupName,
          clusterPoolName,
          clusterName,
          options,
          settings,
        );
      },
    };
  }

  private async *listInstanceViewsPagingPage(
    resourceGroupName: string,
    clusterPoolName: string,
    clusterName: string,
    options?: ClustersListInstanceViewsOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ClusterInstanceViewResult[]> {
    let result: ClustersListInstanceViewsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listInstanceViews(
        resourceGroupName,
        clusterPoolName,
        clusterName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listInstanceViewsNext(
        resourceGroupName,
        clusterPoolName,
        clusterName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listInstanceViewsPagingAll(
    resourceGroupName: string,
    clusterPoolName: string,
    clusterName: string,
    options?: ClustersListInstanceViewsOptionalParams,
  ): AsyncIterableIterator<ClusterInstanceViewResult> {
    for await (const page of this.listInstanceViewsPagingPage(
      resourceGroupName,
      clusterPoolName,
      clusterName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists the HDInsight cluster pools under a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterPoolName The name of the cluster pool.
   * @param options The options parameters.
   */
  private _listByClusterPoolName(
    resourceGroupName: string,
    clusterPoolName: string,
    options?: ClustersListByClusterPoolNameOptionalParams,
  ): Promise<ClustersListByClusterPoolNameResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, clusterPoolName, options },
      listByClusterPoolNameOperationSpec,
    );
  }

  /**
   * Upgrade a cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterPoolName The name of the cluster pool.
   * @param clusterName The name of the HDInsight cluster.
   * @param clusterUpgradeRequest Upgrade a cluster.
   * @param options The options parameters.
   */
  async beginUpgrade(
    resourceGroupName: string,
    clusterPoolName: string,
    clusterName: string,
    clusterUpgradeRequest: ClusterUpgrade,
    options?: ClustersUpgradeOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ClustersUpgradeResponse>,
      ClustersUpgradeResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ClustersUpgradeResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        clusterPoolName,
        clusterName,
        clusterUpgradeRequest,
        options,
      },
      spec: upgradeOperationSpec,
    });
    const poller = await createHttpPoller<
      ClustersUpgradeResponse,
      OperationState<ClustersUpgradeResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Upgrade a cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterPoolName The name of the cluster pool.
   * @param clusterName The name of the HDInsight cluster.
   * @param clusterUpgradeRequest Upgrade a cluster.
   * @param options The options parameters.
   */
  async beginUpgradeAndWait(
    resourceGroupName: string,
    clusterPoolName: string,
    clusterName: string,
    clusterUpgradeRequest: ClusterUpgrade,
    options?: ClustersUpgradeOptionalParams,
  ): Promise<ClustersUpgradeResponse> {
    const poller = await this.beginUpgrade(
      resourceGroupName,
      clusterPoolName,
      clusterName,
      clusterUpgradeRequest,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Resize an existing Cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterPoolName The name of the cluster pool.
   * @param clusterName The name of the HDInsight cluster.
   * @param clusterResizeRequest Resize a cluster.
   * @param options The options parameters.
   */
  async beginResize(
    resourceGroupName: string,
    clusterPoolName: string,
    clusterName: string,
    clusterResizeRequest: ClusterResizeData,
    options?: ClustersResizeOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ClustersResizeResponse>,
      ClustersResizeResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ClustersResizeResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        clusterPoolName,
        clusterName,
        clusterResizeRequest,
        options,
      },
      spec: resizeOperationSpec,
    });
    const poller = await createHttpPoller<
      ClustersResizeResponse,
      OperationState<ClustersResizeResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Resize an existing Cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterPoolName The name of the cluster pool.
   * @param clusterName The name of the HDInsight cluster.
   * @param clusterResizeRequest Resize a cluster.
   * @param options The options parameters.
   */
  async beginResizeAndWait(
    resourceGroupName: string,
    clusterPoolName: string,
    clusterName: string,
    clusterResizeRequest: ClusterResizeData,
    options?: ClustersResizeOptionalParams,
  ): Promise<ClustersResizeResponse> {
    const poller = await this.beginResize(
      resourceGroupName,
      clusterPoolName,
      clusterName,
      clusterResizeRequest,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets a HDInsight cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterPoolName The name of the cluster pool.
   * @param clusterName The name of the HDInsight cluster.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    clusterPoolName: string,
    clusterName: string,
    options?: ClustersGetOptionalParams,
  ): Promise<ClustersGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, clusterPoolName, clusterName, options },
      getOperationSpec,
    );
  }

  /**
   * Creates a cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterPoolName The name of the cluster pool.
   * @param clusterName The name of the HDInsight cluster.
   * @param hDInsightCluster The cluster to create.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    clusterPoolName: string,
    clusterName: string,
    hDInsightCluster: Cluster,
    options?: ClustersCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ClustersCreateResponse>,
      ClustersCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ClustersCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        clusterPoolName,
        clusterName,
        hDInsightCluster,
        options,
      },
      spec: createOperationSpec,
    });
    const poller = await createHttpPoller<
      ClustersCreateResponse,
      OperationState<ClustersCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates a cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterPoolName The name of the cluster pool.
   * @param clusterName The name of the HDInsight cluster.
   * @param hDInsightCluster The cluster to create.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    clusterPoolName: string,
    clusterName: string,
    hDInsightCluster: Cluster,
    options?: ClustersCreateOptionalParams,
  ): Promise<ClustersCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      clusterPoolName,
      clusterName,
      hDInsightCluster,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates an existing Cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterPoolName The name of the cluster pool.
   * @param clusterName The name of the HDInsight cluster.
   * @param clusterPatchRequest Patch a cluster.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    clusterPoolName: string,
    clusterName: string,
    clusterPatchRequest: ClusterPatch,
    options?: ClustersUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ClustersUpdateResponse>,
      ClustersUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ClustersUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        clusterPoolName,
        clusterName,
        clusterPatchRequest,
        options,
      },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      ClustersUpdateResponse,
      OperationState<ClustersUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates an existing Cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterPoolName The name of the cluster pool.
   * @param clusterName The name of the HDInsight cluster.
   * @param clusterPatchRequest Patch a cluster.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    clusterPoolName: string,
    clusterName: string,
    clusterPatchRequest: ClusterPatch,
    options?: ClustersUpdateOptionalParams,
  ): Promise<ClustersUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      clusterPoolName,
      clusterName,
      clusterPatchRequest,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes a cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterPoolName The name of the cluster pool.
   * @param clusterName The name of the HDInsight cluster.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    clusterPoolName: string,
    clusterName: string,
    options?: ClustersDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, clusterPoolName, clusterName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes a cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterPoolName The name of the cluster pool.
   * @param clusterName The name of the HDInsight cluster.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    clusterPoolName: string,
    clusterName: string,
    options?: ClustersDeleteOptionalParams,
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      clusterPoolName,
      clusterName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Lists the config dump of all services running in cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterPoolName The name of the cluster pool.
   * @param clusterName The name of the HDInsight cluster.
   * @param options The options parameters.
   */
  private _listServiceConfigs(
    resourceGroupName: string,
    clusterPoolName: string,
    clusterName: string,
    options?: ClustersListServiceConfigsOptionalParams,
  ): Promise<ClustersListServiceConfigsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, clusterPoolName, clusterName, options },
      listServiceConfigsOperationSpec,
    );
  }

  /**
   * Lists the lists of instance views
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterPoolName The name of the cluster pool.
   * @param clusterName The name of the HDInsight cluster.
   * @param options The options parameters.
   */
  private _listInstanceViews(
    resourceGroupName: string,
    clusterPoolName: string,
    clusterName: string,
    options?: ClustersListInstanceViewsOptionalParams,
  ): Promise<ClustersListInstanceViewsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, clusterPoolName, clusterName, options },
      listInstanceViewsOperationSpec,
    );
  }

  /**
   * Gets the status of a cluster instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterPoolName The name of the cluster pool.
   * @param clusterName The name of the HDInsight cluster.
   * @param options The options parameters.
   */
  getInstanceView(
    resourceGroupName: string,
    clusterPoolName: string,
    clusterName: string,
    options?: ClustersGetInstanceViewOptionalParams,
  ): Promise<ClustersGetInstanceViewResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, clusterPoolName, clusterName, options },
      getInstanceViewOperationSpec,
    );
  }

  /**
   * ListByClusterPoolNameNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterPoolName The name of the cluster pool.
   * @param nextLink The nextLink from the previous successful call to the ListByClusterPoolName method.
   * @param options The options parameters.
   */
  private _listByClusterPoolNameNext(
    resourceGroupName: string,
    clusterPoolName: string,
    nextLink: string,
    options?: ClustersListByClusterPoolNameNextOptionalParams,
  ): Promise<ClustersListByClusterPoolNameNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, clusterPoolName, nextLink, options },
      listByClusterPoolNameNextOperationSpec,
    );
  }

  /**
   * ListServiceConfigsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterPoolName The name of the cluster pool.
   * @param clusterName The name of the HDInsight cluster.
   * @param nextLink The nextLink from the previous successful call to the ListServiceConfigs method.
   * @param options The options parameters.
   */
  private _listServiceConfigsNext(
    resourceGroupName: string,
    clusterPoolName: string,
    clusterName: string,
    nextLink: string,
    options?: ClustersListServiceConfigsNextOptionalParams,
  ): Promise<ClustersListServiceConfigsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, clusterPoolName, clusterName, nextLink, options },
      listServiceConfigsNextOperationSpec,
    );
  }

  /**
   * ListInstanceViewsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterPoolName The name of the cluster pool.
   * @param clusterName The name of the HDInsight cluster.
   * @param nextLink The nextLink from the previous successful call to the ListInstanceViews method.
   * @param options The options parameters.
   */
  private _listInstanceViewsNext(
    resourceGroupName: string,
    clusterPoolName: string,
    clusterName: string,
    nextLink: string,
    options?: ClustersListInstanceViewsNextOptionalParams,
  ): Promise<ClustersListInstanceViewsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, clusterPoolName, clusterName, nextLink, options },
      listInstanceViewsNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByClusterPoolNameOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ClusterListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterPoolName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const upgradeOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}/upgrade",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Cluster,
    },
    201: {
      bodyMapper: Mappers.Cluster,
    },
    202: {
      bodyMapper: Mappers.Cluster,
    },
    204: {
      bodyMapper: Mappers.Cluster,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.clusterUpgradeRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterPoolName,
    Parameters.clusterName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const resizeOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}/resize",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Cluster,
    },
    201: {
      bodyMapper: Mappers.Cluster,
    },
    202: {
      bodyMapper: Mappers.Cluster,
    },
    204: {
      bodyMapper: Mappers.Cluster,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.clusterResizeRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterPoolName,
    Parameters.clusterName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Cluster,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterPoolName,
    Parameters.clusterName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Cluster,
    },
    201: {
      bodyMapper: Mappers.Cluster,
    },
    202: {
      bodyMapper: Mappers.Cluster,
    },
    204: {
      bodyMapper: Mappers.Cluster,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.hDInsightCluster,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterPoolName,
    Parameters.clusterName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Cluster,
    },
    201: {
      bodyMapper: Mappers.Cluster,
    },
    202: {
      bodyMapper: Mappers.Cluster,
    },
    204: {
      bodyMapper: Mappers.Cluster,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.clusterPatchRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterPoolName,
    Parameters.clusterName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterPoolName,
    Parameters.clusterName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listServiceConfigsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}/serviceConfigs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServiceConfigListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterPoolName,
    Parameters.clusterName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listInstanceViewsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}/instanceViews",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ClusterInstanceViewsResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterPoolName,
    Parameters.clusterName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getInstanceViewOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusterpools/{clusterPoolName}/clusters/{clusterName}/instanceViews/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ClusterInstanceViewResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterPoolName,
    Parameters.clusterName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByClusterPoolNameNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ClusterListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterPoolName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listServiceConfigsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServiceConfigListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterPoolName,
    Parameters.nextLink,
    Parameters.clusterName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listInstanceViewsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ClusterInstanceViewsResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterPoolName,
    Parameters.nextLink,
    Parameters.clusterName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
