{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../../../test/node/index.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\r\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\nimport * as resolverTool from '../../src'\r\nimport * as coreHttp from '@azure/core-http'\r\nimport * as fs from 'fs'\r\n\r\nimport { assert } from 'chai'\r\nimport * as sinon from 'sinon'\r\n\r\nimport * as path from 'path'\r\n\r\ndescribe('resolver - node', function () {\r\n  afterEach(function () {\r\n    sinon.restore()\r\n  })\r\n\r\n  describe('remote URL resolution', function () {\r\n    describe('simple DTDL resolution', function () {\r\n      it('should return a promise that resolves to a mapping from a DTMI to a JSON object', function (done) {\r\n        const fakeDtmi: string = 'dtmi:contoso:FakeDeviceManagement:DeviceInformation;1'\r\n        const fakeEndpoint = 'devicemodels.contoso.com'\r\n        const expectedUri = 'https://devicemodels.contoso.com/dtmi/contoso/fakedevicemanagement/deviceinformation-1.json'\r\n        const fakeData = JSON.stringify({\r\n          fakeDtdl: 'fakeBodyAsText'\r\n        })\r\n        sinon.stub(coreHttp, 'ServiceClient')\r\n          .returns({\r\n            sendRequest: function (req: any) {\r\n              assert.deepEqual(req.url, expectedUri, 'URL not formatted for request correctly.')\r\n              return Promise.resolve({ bodyAsText: fakeData, status: 200 })\r\n            }\r\n          })\r\n\r\n        const resolveResult = resolverTool.resolve(fakeDtmi, fakeEndpoint)\r\n        assert(resolveResult instanceof Promise, 'resolve method did not return a promise')\r\n        resolveResult.then((actualOutput: any) => {\r\n          assert.deepStrictEqual({ [fakeDtmi]: JSON.parse(fakeData) }, actualOutput)\r\n          done()\r\n        }).catch((err: any) => done(err))\r\n      })\r\n    })\r\n\r\n    describe('depenency resolution (using pseudo-parsing)', function () {\r\n      it('given a DTMI whose DTDL has no dependencies, should return a promise that resolves to a mapping from a DTMI to a JSON object', function (done) {\r\n        const fakeDtmi: string = 'dtmi:contoso:FakeDeviceManagement:DeviceInformation;1'\r\n        const fakeEndpoint: string = 'devicemodels.contoso.com'\r\n        const expectedUri = 'https://devicemodels.contoso.com/dtmi/contoso/fakedevicemanagement/deviceinformation-1.json'\r\n        const fakeData = JSON.stringify({\r\n          fakeKey: 'fakeValue'\r\n        })\r\n        sinon.stub(coreHttp, 'ServiceClient')\r\n          .returns({\r\n            sendRequest: function (req: any) {\r\n              assert.deepEqual(req.url, expectedUri, 'URL not formatted for request correctly.')\r\n              return Promise.resolve({ bodyAsText: fakeData, status: 200 })\r\n            }\r\n          })\r\n\r\n        const resolveResult = resolverTool.resolve(fakeDtmi, fakeEndpoint, { resolveDependencies: 'enabled' })\r\n        assert(resolveResult instanceof Promise, 'resolve method did not return a promise')\r\n        resolveResult.then((actualOutput: any) => {\r\n          assert.deepStrictEqual({ [fakeDtmi]: JSON.parse(fakeData) }, actualOutput)\r\n          done()\r\n        }).catch((err: any) => done(err))\r\n      })\r\n\r\n      it('given a DTMI whose DTDL has dependencies, should return a promise that resolves to a mapping from DTMIs to JSON objects', function (done) {\r\n        const fakeDtmi1: string = 'dtmi:contoso:FakeDeviceManagement:TemperatureController;1'\r\n        const fakeDtmi2: string = 'dtmi:contoso:FakeDeviceManagement:Thermostat;1'\r\n        const fakeDtmi3: string = 'dtmi:azure:DeviceManagement:DeviceInformation;1'\r\n        const fakeEndpoint: string = 'devicemodels.contoso.com'\r\n        const expectedUri = 'https://devicemodels.contoso.com/dtmi/contoso/fakedevicemanagement/temperaturecontroller-1.json'\r\n        const expectedUri2 = 'https://devicemodels.contoso.com/dtmi/contoso/fakedevicemanagement/thermostat-1.json'\r\n        const expectedUri3 = 'https://devicemodels.contoso.com/dtmi/azure/devicemanagement/deviceinformation-1.json'\r\n        const localDirectory = path.resolve('./test/node/testModelRepository')\r\n        const pathToDtdl = path.join(localDirectory, 'dtmi/contoso/FakeDeviceManagement/temperaturecontroller-1.json')\r\n        const fakeData = fs.readFileSync(pathToDtdl).toString()\r\n        const fakeData2 = JSON.stringify({ fakeKey: 'fakeValue' })\r\n        const fakeData3 = JSON.stringify({ fakeKey2: 'fakeValue2' })\r\n        const expectedOutput = { [fakeDtmi1]: JSON.parse(fakeData), [fakeDtmi2]: JSON.parse(fakeData2), [fakeDtmi3]: JSON.parse(fakeData3) }\r\n        const serviceClientStub = sinon.stub(coreHttp, 'ServiceClient')\r\n        serviceClientStub.onFirstCall().returns({\r\n          sendRequest: function (req: any) {\r\n            assert.deepEqual(req.url, expectedUri, 'URL not formatted for request correctly.')\r\n            return Promise.resolve({ bodyAsText: fakeData, status: 200 })\r\n          }\r\n        })\r\n        serviceClientStub.onSecondCall().returns({\r\n          sendRequest: function (req: any) {\r\n            assert.deepEqual(req.url, expectedUri2, 'URL not formatted for request correctly.')\r\n            return Promise.resolve({ bodyAsText: fakeData2, status: 200 })\r\n          }\r\n        })\r\n        serviceClientStub.onThirdCall().returns({\r\n          sendRequest: function (req: any) {\r\n            assert.deepEqual(req.url, expectedUri3, 'URL not formatted for request correctly.')\r\n            return Promise.resolve({ bodyAsText: fakeData3, status: 200 })\r\n          }\r\n        })\r\n\r\n        const resolveResult = resolverTool.resolve(fakeDtmi1, fakeEndpoint, { resolveDependencies: 'enabled' })\r\n        assert(resolveResult instanceof Promise, 'resolve method did not return a promise')\r\n        resolveResult.then((actualOutput: any) => {\r\n          assert.deepEqual(Object.keys(actualOutput), Object.keys(expectedOutput), 'dtmis in actual output do not align with expected output')\r\n          assert.deepStrictEqual(expectedOutput, actualOutput)\r\n          done()\r\n        }).catch((err: any) => done(err))\r\n      })\r\n    })\r\n\r\n    describe('try from expanded (expanded.json)', function () {\r\n      it('should return a promise that resolves to a mapping from a DTMI to a JSON object', function (done) {\r\n        const fakeDtmi: string = 'dtmi:contoso:FakeDeviceManagement:DeviceInformation;1'\r\n        const fakeEndpoint = 'devicemodels.contoso.com'\r\n        const expectedUri = 'https://devicemodels.contoso.com/dtmi/contoso/fakedevicemanagement/deviceinformation-1.expanded.json'\r\n        const fakeData = `[${JSON.stringify({\r\n          '@id': fakeDtmi,\r\n          fakeDtdl: 'fakeBodyAsText'\r\n        })}]`\r\n        sinon.stub(coreHttp, 'ServiceClient')\r\n          .returns({\r\n            sendRequest: function (req: any) {\r\n              assert.deepEqual(req.url, expectedUri, 'URL not formatted for request correctly.')\r\n              return Promise.resolve({ bodyAsText: fakeData, status: 200 })\r\n            }\r\n          })\r\n\r\n        const resolveResult = resolverTool.resolve(fakeDtmi, fakeEndpoint, { resolveDependencies: 'tryFromExpanded' })\r\n        assert(resolveResult instanceof Promise, 'resolve method did not return a promise')\r\n        resolveResult.then((actualOutput: any) => {\r\n          assert.deepStrictEqual({ [fakeDtmi]: JSON.parse(fakeData)[0] }, actualOutput)\r\n          done()\r\n        }).catch((err: any) => done(err))\r\n      })\r\n\r\n      it('given no expanded format exists for the given DTMI, should fallback to resolution with dependencies', function (done) {\r\n        const fakeDtmi1: string = 'dtmi:contoso:FakeDeviceManagement:TemperatureController;1'\r\n        const fakeDtmi2: string = 'dtmi:contoso:FakeDeviceManagement:Thermostat;1'\r\n        const fakeDtmi3: string = 'dtmi:azure:DeviceManagement:DeviceInformation;1'\r\n        const fakeEndpoint: string = 'devicemodels.contoso.com'\r\n        const expectedUri = 'https://devicemodels.contoso.com/dtmi/contoso/fakedevicemanagement/temperaturecontroller-1.json'\r\n        const expectedUri2 = 'https://devicemodels.contoso.com/dtmi/contoso/fakedevicemanagement/thermostat-1.json'\r\n        const expectedUri3 = 'https://devicemodels.contoso.com/dtmi/azure/devicemanagement/deviceinformation-1.json'\r\n        const localDirectory = path.resolve('./test/node/testModelRepository')\r\n        const pathToDtdl = path.join(localDirectory, 'dtmi/contoso/FakeDeviceManagement/temperaturecontroller-1.json')\r\n        const fakeData = fs.readFileSync(pathToDtdl).toString()\r\n        const fakeData2 = JSON.stringify({ fakeKey: 'fakeValue' })\r\n        const fakeData3 = JSON.stringify({ fakeKey2: 'fakeValue2' })\r\n        const expectedOutput = { [fakeDtmi1]: JSON.parse(fakeData), [fakeDtmi2]: JSON.parse(fakeData2), [fakeDtmi3]: JSON.parse(fakeData3) }\r\n        const serviceClientStub = sinon.stub(coreHttp, 'ServiceClient')\r\n        serviceClientStub.onCall(0).returns({\r\n          sendRequest: function (req: any) {\r\n            assert.deepEqual(req.url, expectedUri.replace('.json', '.expanded.json'), 'URL not formatted for request correctly.')\r\n            return Promise.resolve({ status: 404 })\r\n          }\r\n        })\r\n        serviceClientStub.onCall(1).returns({\r\n          sendRequest: function (req: any) {\r\n            assert.deepEqual(req.url, expectedUri, 'URL not formatted for request correctly.')\r\n            return Promise.resolve({ bodyAsText: fakeData, status: 200 })\r\n          }\r\n        })\r\n        serviceClientStub.onCall(2).returns({\r\n          sendRequest: function (req: any) {\r\n            assert.deepEqual(req.url, expectedUri2.replace('.json', '.expanded.json'), 'URL not formatted for request correctly.')\r\n            return Promise.resolve({ status: 404 })\r\n          }\r\n        })\r\n        serviceClientStub.onCall(3).returns({\r\n          sendRequest: function (req: any) {\r\n            assert.deepEqual(req.url, expectedUri2, 'URL not formatted for request correctly.')\r\n            return Promise.resolve({ bodyAsText: fakeData2, status: 200 })\r\n          }\r\n        })\r\n        serviceClientStub.onCall(4).returns({\r\n          sendRequest: function (req: any) {\r\n            assert.deepEqual(req.url, expectedUri3.replace('.json', '.expanded.json'), 'URL not formatted for request correctly.')\r\n            return Promise.resolve({ status: 404 })\r\n          }\r\n        })\r\n        serviceClientStub.onCall(5).returns({\r\n          sendRequest: function (req: any) {\r\n            assert.deepEqual(req.url, expectedUri3, 'URL not formatted for request correctly.')\r\n            return Promise.resolve({ bodyAsText: fakeData3, status: 200 })\r\n          }\r\n        })\r\n\r\n        const resolveResult = resolverTool.resolve(fakeDtmi1, fakeEndpoint, { resolveDependencies: 'tryFromExpanded' })\r\n        assert(resolveResult instanceof Promise, 'resolve method did not return a promise')\r\n        resolveResult.then((actualOutput: any) => {\r\n          assert.deepEqual(Object.keys(actualOutput), Object.keys(expectedOutput), 'dtmis in actual output do not align with expected output')\r\n          assert.deepStrictEqual(expectedOutput, actualOutput)\r\n          done()\r\n        }).catch((err: any) => done(err))\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('local file resolution', function () {\r\n    describe('simple DTDL resolution', function () {\r\n      it('should return a promise that resolves to a mapping from a DTMI to a JSON object', function (done) {\r\n        const fakeDtmi: string = 'dtmi:contoso:FakeDeviceManagement:thermostat;1'\r\n        const localDirectory = path.resolve('./test/node/testModelRepository')\r\n        const pathToDtdl = path.join(localDirectory, 'dtmi/contoso/FakeDeviceManagement/thermostat-1.json')\r\n        const fakeDtdl = JSON.parse(fs.readFileSync(pathToDtdl, 'utf-8'))\r\n        const resolveResult = resolverTool.resolve(fakeDtmi, localDirectory)\r\n        assert(resolveResult instanceof Promise, 'resolve method did not return a promise')\r\n        resolveResult.then((actualOutput: any) => {\r\n          assert.deepStrictEqual({ [fakeDtmi]: fakeDtdl }, actualOutput, 'the expected dtmi mapping did not match the actual value.')\r\n          done()\r\n        }).catch((err: any) => done(err))\r\n      })\r\n    })\r\n\r\n    describe('dependency resolution (using pseudo-parsing)', function () {\r\n      it('given a DTMI whose DTDL has dependencies, should return a promise that resolves to a mapping from DTMIs to JSON objects', function (done) {\r\n        const fakeDtmi1: string = 'dtmi:contoso:FakeDeviceManagement:TemperatureController;1'\r\n        const fakeDtmi2: string = 'dtmi:contoso:FakeDeviceManagement:Thermostat;1'\r\n        const fakeDtmi3: string = 'dtmi:azure:DeviceManagement:DeviceInformation;1'\r\n        const localDirectory = path.resolve('./test/node/testModelRepository')\r\n        const pathToDtdl1 = path.join(localDirectory, 'dtmi/contoso/FakeDeviceManagement/temperaturecontroller-1.json')\r\n        const pathToDtdl2 = path.join(localDirectory, 'dtmi/contoso/FakeDeviceManagement/thermostat-1.json')\r\n        const pathToDtdl3 = path.join(localDirectory, 'dtmi/azure/DeviceManagement/deviceinformation-1.json')\r\n        const fakeDtdl1 = JSON.parse(fs.readFileSync(pathToDtdl1, 'utf-8'))\r\n        const fakeDtdl2 = JSON.parse(fs.readFileSync(pathToDtdl2, 'utf-8'))\r\n        const fakeDtdl3 = JSON.parse(fs.readFileSync(pathToDtdl3, 'utf-8'))\r\n\r\n        const expectedOutput = {\r\n          [fakeDtmi1]: fakeDtdl1,\r\n          [fakeDtmi2]: fakeDtdl2,\r\n          [fakeDtmi3]: fakeDtdl3\r\n        }\r\n        const resolveResult = resolverTool.resolve(fakeDtmi1, localDirectory, { resolveDependencies: 'enabled' })\r\n        assert(resolveResult instanceof Promise, 'resolve method did not return a promise')\r\n        resolveResult.then((actualOutput: any) => {\r\n          assert.deepStrictEqual(Object.keys(actualOutput), Object.keys(expectedOutput), 'dtmis do not match')\r\n          Object.keys(actualOutput).forEach((outputDtmi) => {\r\n            assert.deepStrictEqual(actualOutput[outputDtmi], expectedOutput[outputDtmi], `dtdls for given dtmi (${outputDtmi}) did not line up.`)\r\n          })\r\n          assert.deepStrictEqual(actualOutput, expectedOutput, 'the expected dtmi mapping did not match the actual value.')\r\n          done()\r\n        }).catch((err: any) => done(err))\r\n      })\r\n\r\n      it('given a DTMI whose DTDL has no dependencies, should return a promise that resolves to a mapping from a DTMI to a JSON object', function (done) {\r\n        const fakeDtmi1: string = 'dtmi:contoso:FakeDeviceManagement:thermostat;1'\r\n        const localDirectory = path.resolve('./test/node/testModelRepository')\r\n        const pathToDtdl1 = path.join(localDirectory, 'dtmi/contoso/FakeDeviceManagement/thermostat-1.json')\r\n        const fakeDtdl1 = JSON.parse(fs.readFileSync(pathToDtdl1, 'utf-8'))\r\n\r\n        const expectedResult = {\r\n          [fakeDtmi1]: fakeDtdl1\r\n        }\r\n        const resolveResult = resolverTool.resolve(fakeDtmi1, localDirectory)\r\n        assert(resolveResult instanceof Promise, 'resolve method did not return a promise')\r\n        resolveResult.then((actualOutput: any) => {\r\n          assert.deepStrictEqual(expectedResult, actualOutput, 'the expected dtmi mapping did not match the actual value.')\r\n          done()\r\n        }).catch((err: any) => done(err))\r\n      })\r\n    })\r\n\r\n    describe('try from expanded (expanded.json)', function () {\r\n      it('should return a promise that resolves to a mapping from the DTMIs to the JSON objects', function (done) {\r\n        const fakeDtmi1: string = 'dtmi:contoso:FakeDeviceManagement:TemperatureController;1'\r\n        const fakeDtmi2: string = 'dtmi:contoso:FakeDeviceManagement:Thermostat;1'\r\n        const fakeDtmi3: string = 'dtmi:azure:DeviceManagement:DeviceInformation;1'\r\n        const localDirectory = path.resolve('./test/node/testModelRepository')\r\n        const pathToDtdl1 = path.join(localDirectory, 'dtmi/contoso/FakeDeviceManagement/temperaturecontroller-1.json')\r\n        const pathToDtdl2 = path.join(localDirectory, 'dtmi/contoso/FakeDeviceManagement/thermostat-1.json')\r\n        const pathToDtdl3 = path.join(localDirectory, 'dtmi/azure/DeviceManagement/deviceinformation-1.json')\r\n        const fakeDtdl1 = JSON.parse(fs.readFileSync(pathToDtdl1, 'utf-8'))\r\n        const fakeDtdl2 = JSON.parse(fs.readFileSync(pathToDtdl2, 'utf-8'))\r\n        const fakeDtdl3 = JSON.parse(fs.readFileSync(pathToDtdl3, 'utf-8'))\r\n\r\n        const expectedResult = {\r\n          [fakeDtmi1]: fakeDtdl1,\r\n          [fakeDtmi2]: fakeDtdl2,\r\n          [fakeDtmi3]: fakeDtdl3\r\n        }\r\n        const resolveResult = resolverTool.resolve(fakeDtmi1, localDirectory, { resolveDependencies: 'tryFromExpanded' })\r\n        assert(resolveResult instanceof Promise, 'resolve method did not return a promise')\r\n        resolveResult.then((actualOutput: any) => {\r\n          assert.deepStrictEqual(expectedResult, actualOutput, 'the expected dtmi mapping did not match the actual value.')\r\n          done()\r\n        }).catch((err: any) => done(err))\r\n      })\r\n\r\n      it('given no expanded format exists for the given DTMI, should fallback to resolution with dependencies', function (done) {\r\n        const fakeDtmi1: string = 'dtmi:contoso:FakeDeviceManagement:temperaturecontroller;2'\r\n        const fakeDtmi2: string = 'dtmi:contoso:FakeDeviceManagement:Thermostat;1'\r\n        const fakeDtmi3: string = 'dtmi:azure:DeviceManagement:DeviceInformation;1'\r\n        const localDirectory = path.resolve('./test/node/testModelRepository')\r\n        const pathToDtdl1 = path.join(localDirectory, 'dtmi/contoso/FakeDeviceManagement/temperaturecontroller-2.json')\r\n        const pathToDtdl2 = path.join(localDirectory, 'dtmi/contoso/FakeDeviceManagement/thermostat-1.json')\r\n        const pathToDtdl3 = path.join(localDirectory, 'dtmi/azure/DeviceManagement/deviceinformation-1.json')\r\n        const fakeDtdl1 = JSON.parse(fs.readFileSync(pathToDtdl1, 'utf-8'))\r\n        const fakeDtdl2 = JSON.parse(fs.readFileSync(pathToDtdl2, 'utf-8'))\r\n        const fakeDtdl3 = JSON.parse(fs.readFileSync(pathToDtdl3, 'utf-8'))\r\n\r\n        const expectedResult = {\r\n          [fakeDtmi1]: fakeDtdl1,\r\n          [fakeDtmi2]: fakeDtdl2,\r\n          [fakeDtmi3]: fakeDtdl3\r\n        }\r\n        const resolveResult = resolverTool.resolve(fakeDtmi1, localDirectory, { resolveDependencies: 'tryFromExpanded' })\r\n        assert(resolveResult instanceof Promise, 'resolve method did not return a promise')\r\n        resolveResult.then((actualOutput: any) => {\r\n          assert.deepEqual(Object.keys(expectedResult), Object.keys(actualOutput), 'the expected dtmis do not match')\r\n          Object.keys(expectedResult).forEach(dtmiKey => {\r\n            assert.deepEqual(expectedResult[dtmiKey], actualOutput[dtmiKey])\r\n          })\r\n          done()\r\n        }).catch((err: any) => done(err))\r\n      })\r\n    })\r\n  })\r\n})\r\n"]}