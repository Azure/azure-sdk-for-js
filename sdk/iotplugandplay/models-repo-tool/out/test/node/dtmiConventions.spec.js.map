{"version":3,"file":"dtmiConventions.spec.js","sourceRoot":"","sources":["../../../test/node/dtmiConventions.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\r\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\nimport * as lib from '../../src/dtmiConventions'\r\n\r\n// fake class while lib not implemented\r\nimport * as sinon from 'sinon'\r\nimport { assert, expect } from 'chai'\r\n\r\ninterface ValidParams {\r\n  dtmi: string,\r\n  path: string,\r\n  url: string\r\n}\r\n\r\nconst validParameters: ValidParams[] = [\r\n  {\r\n    dtmi: 'dtmi:azure:DeviceManagement:DeviceInformation;1',\r\n    path: 'dtmi/azure/devicemanagement/deviceinformation-1.json',\r\n    url: 'https://contoso.com/dtmi/azure/devicemanagement/deviceinformation-1.json'\r\n  },\r\n  {\r\n    dtmi: 'dtmi:azure:DeviceManagement:DeviceInformation;10000',\r\n    path: 'dtmi/azure/devicemanagement/deviceinformation-10000.json',\r\n    url: 'https://contoso.com/dtmi/azure/devicemanagement/deviceinformation-10000.json'\r\n  },\r\n  {\r\n    dtmi: 'dtmi:com:DeviceInformation;1',\r\n    path: 'dtmi/com/deviceinformation-1.json',\r\n    url: 'https://contoso.com/dtmi/com/deviceinformation-1.json'\r\n  },\r\n  {\r\n    dtmi: 'dtmi:test:DeviceManagement:Foo:Bar:TestOneTwoThree;1',\r\n    path: 'dtmi/test/devicemanagement/foo/bar/testonetwothree-1.json',\r\n    url: 'https://contoso.com/dtmi/test/devicemanagement/foo/bar/testonetwothree-1.json'\r\n  },\r\n  {\r\n    dtmi: 'dtmi:AZURE:DEVICEMANAGEMENT:THERMOMETER;7',\r\n    path: 'dtmi/azure/devicemanagement/thermometer-7.json',\r\n    url: 'https://contoso.com/dtmi/azure/devicemanagement/thermometer-7.json'\r\n  },\r\n  {\r\n    dtmi: 'dtmi:thermometer;2',\r\n    path: 'dtmi/thermometer-2.json',\r\n    url: 'https://contoso.com/dtmi/thermometer-2.json'\r\n  }\r\n\r\n]\r\n\r\nconst invalidParameters: {dtmi: string}[] = [\r\n  { dtmi: 'dtmiazure:DeviceManagement:DeviceInformation;1' },\r\n  { dtmi: 'dtmi;azure;DeviceManagement;DeviceInformation;1' },\r\n  { dtmi: 'asdf' },\r\n  { dtmi: 'dtmi:azure:DeviceManagement:DeviceInformation;-1' },\r\n  { dtmi: 'dtmi:azure:DeviceManagement:Device-Information;1' },\r\n  { dtmi: 'DTMI:AZURE:DEVICEMANAGEMENT:THERMOMETER;7' },\r\n  { dtmi: 'dmti:azure:thermometer;10' }\r\n]\r\n\r\ndescribe('dtmiConventions', function () {\r\n  afterEach(function () {\r\n    sinon.restore()\r\n  })\r\n\r\n  describe('isValidDtmi', function () {\r\n    describe('valid', function () {\r\n      function validTest (givenDtmi: string) {\r\n        const result = lib.isValidDtmi(givenDtmi)\r\n        assert(result, 'valid dtmi not found as valid')\r\n      }\r\n      // eslint-disable-next-line mocha/no-setup-in-describe\r\n      for (let i = 0; i < validParameters.length; i++) {\r\n        it(`should validate a correctly formatted dtmi (${validParameters[i].dtmi})`, function () { validTest(validParameters[i].dtmi) })\r\n      }\r\n    })\r\n\r\n    describe('invalid', function () {\r\n      function invalidTest (givenDtmi: string) {\r\n        const result = lib.isValidDtmi(givenDtmi)\r\n        assert(!result, 'invalid dtmi incorrectly labelled as valid')\r\n      }\r\n      // eslint-disable-next-line mocha/no-setup-in-describe\r\n      for (let i = 0; i < invalidParameters.length; i++) {\r\n        it(`should invalidate incorrectly formatted dtmi (${invalidParameters[i].dtmi})`, function () { invalidTest(invalidParameters[i].dtmi) })\r\n      }\r\n    })\r\n  })\r\n\r\n  describe('dtmiToPath', function () {\r\n    describe('valid', function () {\r\n      function validTest (givenDtmi: string, expectedPath: string) {\r\n        const result = lib.dtmiToPath(givenDtmi)\r\n        assert.deepEqual(result, expectedPath)\r\n      }\r\n      // eslint-disable-next-line mocha/no-setup-in-describe\r\n      for (let i = 0; i < validParameters.length; i++) {\r\n        it(`should reformat a DTMI to a generic path (${validParameters[i].dtmi})`,\r\n          function () {\r\n            validTest(validParameters[i].dtmi, validParameters[i].path)\r\n          })\r\n      }\r\n    })\r\n\r\n    describe('invalid', function () {\r\n      function invalidTest (givenDtmi: string) {\r\n        expect(() => {\r\n          lib.dtmiToPath(givenDtmi)\r\n        }).to.throw('DTMI provided is invalid. Ensure it follows DTMI conventions.')\r\n      }\r\n      // eslint-disable-next-line mocha/no-setup-in-describe\r\n      for (let i = 0; i < invalidParameters.length; i++) {\r\n        it(`should fail if the dtmi is not formatted correctly (${invalidParameters[i].dtmi})`, function () { invalidTest(invalidParameters[i].dtmi) })\r\n      }\r\n    })\r\n  })\r\n\r\n  describe('dtmiToFullyQualifiedPath', function () {\r\n    describe('invalid', function () {\r\n      function invalidTest (givenDtmi: string) {\r\n        expect(() => {\r\n          const fakeBasePath = 'https://contoso.com'\r\n          lib.dtmiToQualifiedPath(givenDtmi, fakeBasePath, false)\r\n        }).to.throw('DTMI provided is invalid. Ensure it follows DTMI conventions.')\r\n      }\r\n      // eslint-disable-next-line mocha/no-setup-in-describe\r\n      for (let i = 0; i < invalidParameters.length; i++) {\r\n        it(`should fail if the dtmi is not formatted correctly (${invalidParameters[i].dtmi})`, function () { invalidTest(invalidParameters[i].dtmi) })\r\n      }\r\n    })\r\n\r\n    describe('valid', function () {\r\n      describe('standard url', function () {\r\n        function reformatTest (givenDtmi: string, expected: string) {\r\n          const fakeBasePath = 'https://contoso.com'\r\n          const result = lib.dtmiToQualifiedPath(givenDtmi, fakeBasePath, false)\r\n          assert.deepEqual(result, expected)\r\n        }\r\n        // eslint-disable-next-line mocha/no-setup-in-describe\r\n        for (let i = 0; i < validParameters.length; i++) {\r\n          it(`should reformat a DTMI to a qualified path (${validParameters[i].dtmi})`,\r\n            function () {\r\n              reformatTest(validParameters[i].dtmi, validParameters[i].url)\r\n            })\r\n        }\r\n      })\r\n\r\n      describe('expanded url', function () {\r\n        function addExpandedTest (givenDtmi: string, expected: string) {\r\n          const fakeBasePath = 'https://contoso.com'\r\n          const result = lib.dtmiToQualifiedPath(givenDtmi, fakeBasePath, true)\r\n          assert.deepEqual(result, expected)\r\n        }\r\n\r\n        // eslint-disable-next-line mocha/no-setup-in-describe\r\n        for (let i = 0; i < validParameters.length; i++) {\r\n          it(`should reformat a DTMI to a qualified path with expanded.json (${validParameters[i].dtmi})`,\r\n            function () {\r\n              addExpandedTest(validParameters[i].dtmi, validParameters[i].url.replace('.json', '.expanded.json'))\r\n            })\r\n        }\r\n      })\r\n    })\r\n  })\r\n})\r\n"]}