{"version":3,"file":"modelFetcherHelper.js","sourceRoot":"","sources":["../../src/modelFetcherHelper.ts"],"names":[],"mappings":"AAAA,gDAAgD;AAChD,qGAAqG;AAErG,YAAY,CAAA;;;AAIZ,SAAgB,mBAAmB,CAAE,KAAa;IAChD,MAAM,SAAS,GAAwB,EAAE,CAAA;IACzC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE;QACrC,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;QAC5B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;YACvB,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;SACnF;QACD,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,GAAG,WAAW,CAAA;KAC5C;IACD,KAAK,CAAC,OAAO,CAAC,CAAC,OAAa,EAAE,EAAE;QAC9B,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,OAAO,CAAA;IACrC,CAAC,CAAC,CAAA;IACF,OAAO,SAAS,CAAA;AAClB,CAAC;AAbD,kDAaC","sourcesContent":["// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n\n'use strict'\n\nimport { DTDL } from './DTDL'\n\nexport function flattenDtdlResponse (input: DTDL[]) {\n  const newResult: {[x: string]: DTDL} = {}\n  for (let i = 0; i++; i < input.length) {\n    const currentDtdl = input[i]\n    if (!currentDtdl['@id']) {\n      throw new Error('no @id element found in DTDL. Ensure DTDL contains @id element');\n    }\n    newResult[currentDtdl['@id']] = currentDtdl\n  }\n  input.forEach((element: DTDL) => {\n    newResult[element['@id']] = element\n  })\n  return newResult\n}\n"]}