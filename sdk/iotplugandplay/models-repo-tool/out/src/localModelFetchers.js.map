{"version":3,"file":"localModelFetchers.js","sourceRoot":"","sources":["../../src/localModelFetchers.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for full license information.\r\n\r\n'use strict'\r\n\r\nimport * as dtmiConventions from './dtmiConventions'\r\nimport * as modelMetadata from './modelMetadata'\r\nimport { DTDL } from './DTDL'\r\nimport fs from 'fs'\r\nimport * as path from 'path'\r\nimport { flattenDtdlResponse } from './modelFetcherHelper'\r\n\r\nasync function recursiveFetcher (dtmi: string, directory: string, tryFromExpanded: boolean): Promise<{[x:string]: DTDL}> {\r\n  let dependencyModels: {[x:string]: DTDL} = {}\r\n  let fetchedModels: {[x: string]: DTDL }\r\n  try {\r\n    console.log(`Fetching: ${dtmi}`)\r\n    fetchedModels = await fetcher(dtmi, directory, tryFromExpanded)\r\n  } catch (error) {\r\n    if (tryFromExpanded && error.code === 'ENOENT') {\r\n      console.log('Fetching from expanded failed. Trying without.')\r\n      fetchedModels = await fetcher(dtmi, directory, false)\r\n    } else {\r\n      throw error\r\n    }\r\n  }\r\n  const dtmis = Object.keys(fetchedModels)\r\n  for (let i = 0; i < dtmis.length; i++) {\r\n    const currentDtdl = fetchedModels[dtmis[i]]\r\n    const metaModelData = modelMetadata.getModelMetadata(currentDtdl)\r\n    const deps = metaModelData.componentSchemas.concat(metaModelData.extends)\r\n    if (deps && deps.length > 0) {\r\n      for (let j = 0; j < deps.length; j++) {\r\n        if (Object.keys(dependencyModels).includes(deps[j]) || Object.keys(fetchedModels).includes(deps[j])) {\r\n          // do nothing\r\n        } else {\r\n          const fetchedDependencies = await recursiveFetcher(deps[j], directory, tryFromExpanded)\r\n          dependencyModels = { ...dependencyModels, ...fetchedDependencies }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if (Object.keys(dependencyModels).length > 0) {\r\n    fetchedModels = { ...fetchedModels, ...dependencyModels }\r\n  }\r\n  return fetchedModels\r\n}\r\n\r\nasync function fetcher (dtmi: string, directory: string, tryFromExpanded: boolean): Promise<{ [dtmi: string]: DTDL }> {\r\n  const dtmiPath = dtmiConventions.dtmiToPath(dtmi)\r\n  const dtmiPathFormatted = tryFromExpanded ? dtmiPath.replace('.json', '.expanded.json') : dtmiPath\r\n  const targetPath = path.join(directory, dtmiPathFormatted)\r\n  const dtdlFile = fs.readFileSync(targetPath, 'utf8')\r\n  const parsedDtdl: DTDL | DTDL[] = JSON.parse(dtdlFile)\r\n  if (Array.isArray(parsedDtdl)) {\r\n    const result = flattenDtdlResponse(parsedDtdl as DTDL[])\r\n    return result\r\n  } else {\r\n    const result = { [dtmi]: parsedDtdl as DTDL }\r\n    return result\r\n  }\r\n}\r\n\r\nexport { fetcher, recursiveFetcher }\r\n"]}