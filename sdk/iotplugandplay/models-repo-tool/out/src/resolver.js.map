{"version":3,"file":"resolver.js","sourceRoot":"","sources":["../../src/resolver.ts"],"names":[],"mappings":"AAAA,gDAAgD;AAChD,qGAAqG;AAErG,YAAY,CAAA;;;AAEZ,+DAAoD;AAMpD,SAAS,sBAAsB,CAAE,OAAyB;IACxD,IAAI,OAAO,IAAI,OAAO,CAAC,mBAAmB,IAAI,OAAO,CAAC,mBAAmB,KAAK,iBAAiB,EAAE;QAC/F,OAAO,IAAI,CAAA;KACZ;IACD,OAAO,KAAK,CAAA;AACd,CAAC;AAED,SAAS,0BAA0B,CAAE,OAAyB;IAC5D,IAAI,OAAO,IAAI,OAAO,CAAC,mBAAmB,IAAI,OAAO,CAAC,mBAAmB,KAAK,SAAS,EAAE;QACvF,OAAO,IAAI,CAAA;KACZ;IACD,OAAO,KAAK,CAAA;AACd,CAAC;AAaD,SAAS,OAAO,CAAE,IAAY,EAAE,QAAiB,EAAE,OAA0B;IAC3E,MAAM,eAAe,GAAG,sBAAsB,CAAC,OAAO,CAAC,CAAA;IACvD,MAAM,mBAAmB,GAAG,0BAA0B,CAAC,OAAO,CAAC,CAAA;IAE/D,OAAO,kCAAY,CAAC,IAAI,EAAE,QAAQ,EAAE,mBAAmB,EAAE,eAAe,CAAC,CAAA;AAC3E,CAAC;AAEQ,0BAAO","sourcesContent":["// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for full license information.\r\n\r\n'use strict'\r\n\r\nimport { modelFetcher } from './modelFetcherHandler'\r\n\r\ninterface resolverOptions {\r\n  resolveDependencies: 'disabled' | 'enabled' | 'tryFromExpanded'\r\n}\r\n\r\nfunction checkIfTryFromExpanded (options?: resolverOptions): boolean {\r\n  if (options && options.resolveDependencies && options.resolveDependencies === 'tryFromExpanded') {\r\n    return true\r\n  }\r\n  return false\r\n}\r\n\r\nfunction checkIfResolveDependencies (options?: resolverOptions): boolean {\r\n  if (options && options.resolveDependencies && options.resolveDependencies === 'enabled') {\r\n    return true\r\n  }\r\n  return false\r\n}\r\n\r\n/**\r\n * resolve - get interfaces (dtdls) associated to a given dtmi\r\n *\r\n * @param dtmi code used to label and organize dtdl\r\n * @param endpoint URL or local path for dtdl repository\r\n * @param options object containing optional parameters\r\n *\r\n * @returns Promise that resolves to mapping of dtmi(s) to JSON dtdl(s)\r\n */\r\nfunction resolve(dtmi: string, endpoint: string): Promise<{ [dtmi: string]: any}>\r\nfunction resolve(dtmi: string, endpoint: string, options: resolverOptions): Promise<{ [dtmi: string]: any}>\r\nfunction resolve (dtmi: string, endpoint : string, options ?: resolverOptions): Promise<{ [dtmi: string]:any}> {\r\n  const tryFromExpanded = checkIfTryFromExpanded(options)\r\n  const resolveDependencies = checkIfResolveDependencies(options)\r\n\r\n  return modelFetcher(dtmi, endpoint, resolveDependencies, tryFromExpanded)\r\n}\r\n\r\nexport { resolve }\r\n"]}