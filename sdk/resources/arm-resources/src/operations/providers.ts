/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/providersMappers";
import * as Parameters from "../models/parameters";
import { ResourceManagementClientContext } from "../resourceManagementClientContext";

/** Class representing a Providers. */
export class Providers {
  private readonly client: ResourceManagementClientContext;

  /**
   * Create a Providers.
   * @param {ResourceManagementClientContext} client Reference to the service client.
   */
  constructor(client: ResourceManagementClientContext) {
    this.client = client;
  }

  /**
   * Unregisters a subscription from a resource provider.
   * @param resourceProviderNamespace The namespace of the resource provider to unregister.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProvidersUnregisterResponse>
   */
  unregister(resourceProviderNamespace: string, options?: coreHttp.RequestOptionsBase): Promise<Models.ProvidersUnregisterResponse>;
  /**
   * @param resourceProviderNamespace The namespace of the resource provider to unregister.
   * @param callback The callback
   */
  unregister(resourceProviderNamespace: string, callback: coreHttp.ServiceCallback<Models.Provider>): void;
  /**
   * @param resourceProviderNamespace The namespace of the resource provider to unregister.
   * @param options The optional parameters
   * @param callback The callback
   */
  unregister(resourceProviderNamespace: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.Provider>): void;
  unregister(resourceProviderNamespace: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.Provider>, callback?: coreHttp.ServiceCallback<Models.Provider>): Promise<Models.ProvidersUnregisterResponse> {
    return this.client.sendOperationRequest(
      {
        resourceProviderNamespace,
        options
      },
      unregisterOperationSpec,
      callback) as Promise<Models.ProvidersUnregisterResponse>;
  }

  /**
   * Registers a subscription with a resource provider.
   * @param resourceProviderNamespace The namespace of the resource provider to register.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProvidersRegisterResponse>
   */
  register(resourceProviderNamespace: string, options?: coreHttp.RequestOptionsBase): Promise<Models.ProvidersRegisterResponse>;
  /**
   * @param resourceProviderNamespace The namespace of the resource provider to register.
   * @param callback The callback
   */
  register(resourceProviderNamespace: string, callback: coreHttp.ServiceCallback<Models.Provider>): void;
  /**
   * @param resourceProviderNamespace The namespace of the resource provider to register.
   * @param options The optional parameters
   * @param callback The callback
   */
  register(resourceProviderNamespace: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.Provider>): void;
  register(resourceProviderNamespace: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.Provider>, callback?: coreHttp.ServiceCallback<Models.Provider>): Promise<Models.ProvidersRegisterResponse> {
    return this.client.sendOperationRequest(
      {
        resourceProviderNamespace,
        options
      },
      registerOperationSpec,
      callback) as Promise<Models.ProvidersRegisterResponse>;
  }

  /**
   * Gets all resource providers for a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProvidersListResponse>
   */
  list(options?: Models.ProvidersListOptionalParams): Promise<Models.ProvidersListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: coreHttp.ServiceCallback<Models.ProviderListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: Models.ProvidersListOptionalParams, callback: coreHttp.ServiceCallback<Models.ProviderListResult>): void;
  list(options?: Models.ProvidersListOptionalParams | coreHttp.ServiceCallback<Models.ProviderListResult>, callback?: coreHttp.ServiceCallback<Models.ProviderListResult>): Promise<Models.ProvidersListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.ProvidersListResponse>;
  }

  /**
   * Gets the specified resource provider.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProvidersGetResponse>
   */
  get(resourceProviderNamespace: string, options?: Models.ProvidersGetOptionalParams): Promise<Models.ProvidersGetResponse>;
  /**
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param callback The callback
   */
  get(resourceProviderNamespace: string, callback: coreHttp.ServiceCallback<Models.Provider>): void;
  /**
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceProviderNamespace: string, options: Models.ProvidersGetOptionalParams, callback: coreHttp.ServiceCallback<Models.Provider>): void;
  get(resourceProviderNamespace: string, options?: Models.ProvidersGetOptionalParams | coreHttp.ServiceCallback<Models.Provider>, callback?: coreHttp.ServiceCallback<Models.Provider>): Promise<Models.ProvidersGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceProviderNamespace,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ProvidersGetResponse>;
  }

  /**
   * Gets all resource providers for a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProvidersListNextResponse>
   */
  listNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase): Promise<Models.ProvidersListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: coreHttp.ServiceCallback<Models.ProviderListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.ProviderListResult>): void;
  listNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.ProviderListResult>, callback?: coreHttp.ServiceCallback<Models.ProviderListResult>): Promise<Models.ProvidersListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.ProvidersListNextResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const unregisterOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/unregister",
  urlParameters: [
    Parameters.resourceProviderNamespace,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Provider
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const registerOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/register",
  urlParameters: [
    Parameters.resourceProviderNamespace,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Provider
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.expand,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProviderListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}",
  urlParameters: [
    Parameters.resourceProviderNamespace,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Provider
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProviderListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
