/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/providersMappers";
import * as Parameters from "../models/parameters";
import { ResourceManagementClientContext } from "../resourceManagementClientContext";

/** Class representing a Providers. */
export class Providers {
  private readonly client: ResourceManagementClientContext;

  /**
   * Create a Providers.
   * @param {ResourceManagementClientContext} client Reference to the service client.
   */
  constructor(client: ResourceManagementClientContext) {
    this.client = client;
  }

  /**
   * Unregisters a subscription from a resource provider.
   * @param resourceProviderNamespace The namespace of the resource provider to unregister.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProvidersUnregisterResponse>
   */
  unregister(
    resourceProviderNamespace: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.ProvidersUnregisterResponse>;
  /**
   * @param resourceProviderNamespace The namespace of the resource provider to unregister.
   * @param callback The callback
   */
  unregister(
    resourceProviderNamespace: string,
    callback: msRest.ServiceCallback<Models.Provider>
  ): void;
  /**
   * @param resourceProviderNamespace The namespace of the resource provider to unregister.
   * @param options The optional parameters
   * @param callback The callback
   */
  unregister(
    resourceProviderNamespace: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.Provider>
  ): void;
  unregister(
    resourceProviderNamespace: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Provider>,
    callback?: msRest.ServiceCallback<Models.Provider>
  ): Promise<Models.ProvidersUnregisterResponse> {
    return this.client.sendOperationRequest(
      {
        resourceProviderNamespace,
        options
      },
      unregisterOperationSpec,
      callback
    ) as Promise<Models.ProvidersUnregisterResponse>;
  }

  /**
   * Registers a management group with a resource provider.
   * @param resourceProviderNamespace The namespace of the resource provider to register.
   * @param groupId The management group ID.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  registerAtManagementGroupScope(
    resourceProviderNamespace: string,
    groupId: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.RestResponse>;
  /**
   * @param resourceProviderNamespace The namespace of the resource provider to register.
   * @param groupId The management group ID.
   * @param callback The callback
   */
  registerAtManagementGroupScope(
    resourceProviderNamespace: string,
    groupId: string,
    callback: msRest.ServiceCallback<void>
  ): void;
  /**
   * @param resourceProviderNamespace The namespace of the resource provider to register.
   * @param groupId The management group ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  registerAtManagementGroupScope(
    resourceProviderNamespace: string,
    groupId: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<void>
  ): void;
  registerAtManagementGroupScope(
    resourceProviderNamespace: string,
    groupId: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>,
    callback?: msRest.ServiceCallback<void>
  ): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceProviderNamespace,
        groupId,
        options
      },
      registerAtManagementGroupScopeOperationSpec,
      callback
    );
  }

  /**
   * Registers a subscription with a resource provider.
   * @param resourceProviderNamespace The namespace of the resource provider to register.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProvidersRegisterResponse>
   */
  register(
    resourceProviderNamespace: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.ProvidersRegisterResponse>;
  /**
   * @param resourceProviderNamespace The namespace of the resource provider to register.
   * @param callback The callback
   */
  register(
    resourceProviderNamespace: string,
    callback: msRest.ServiceCallback<Models.Provider>
  ): void;
  /**
   * @param resourceProviderNamespace The namespace of the resource provider to register.
   * @param options The optional parameters
   * @param callback The callback
   */
  register(
    resourceProviderNamespace: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.Provider>
  ): void;
  register(
    resourceProviderNamespace: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Provider>,
    callback?: msRest.ServiceCallback<Models.Provider>
  ): Promise<Models.ProvidersRegisterResponse> {
    return this.client.sendOperationRequest(
      {
        resourceProviderNamespace,
        options
      },
      registerOperationSpec,
      callback
    ) as Promise<Models.ProvidersRegisterResponse>;
  }

  /**
   * Gets all resource providers for a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProvidersListResponse>
   */
  list(options?: Models.ProvidersListOptionalParams): Promise<Models.ProvidersListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.ProviderListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(
    options: Models.ProvidersListOptionalParams,
    callback: msRest.ServiceCallback<Models.ProviderListResult>
  ): void;
  list(
    options?:
      | Models.ProvidersListOptionalParams
      | msRest.ServiceCallback<Models.ProviderListResult>,
    callback?: msRest.ServiceCallback<Models.ProviderListResult>
  ): Promise<Models.ProvidersListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback
    ) as Promise<Models.ProvidersListResponse>;
  }

  /**
   * Gets all resource providers for the tenant.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProvidersListAtTenantScopeResponse>
   */
  listAtTenantScope(
    options?: Models.ProvidersListAtTenantScopeOptionalParams
  ): Promise<Models.ProvidersListAtTenantScopeResponse>;
  /**
   * @param callback The callback
   */
  listAtTenantScope(callback: msRest.ServiceCallback<Models.ProviderListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAtTenantScope(
    options: Models.ProvidersListAtTenantScopeOptionalParams,
    callback: msRest.ServiceCallback<Models.ProviderListResult>
  ): void;
  listAtTenantScope(
    options?:
      | Models.ProvidersListAtTenantScopeOptionalParams
      | msRest.ServiceCallback<Models.ProviderListResult>,
    callback?: msRest.ServiceCallback<Models.ProviderListResult>
  ): Promise<Models.ProvidersListAtTenantScopeResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listAtTenantScopeOperationSpec,
      callback
    ) as Promise<Models.ProvidersListAtTenantScopeResponse>;
  }

  /**
   * Gets the specified resource provider.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProvidersGetResponse>
   */
  get(
    resourceProviderNamespace: string,
    options?: Models.ProvidersGetOptionalParams
  ): Promise<Models.ProvidersGetResponse>;
  /**
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param callback The callback
   */
  get(resourceProviderNamespace: string, callback: msRest.ServiceCallback<Models.Provider>): void;
  /**
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(
    resourceProviderNamespace: string,
    options: Models.ProvidersGetOptionalParams,
    callback: msRest.ServiceCallback<Models.Provider>
  ): void;
  get(
    resourceProviderNamespace: string,
    options?: Models.ProvidersGetOptionalParams | msRest.ServiceCallback<Models.Provider>,
    callback?: msRest.ServiceCallback<Models.Provider>
  ): Promise<Models.ProvidersGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceProviderNamespace,
        options
      },
      getOperationSpec,
      callback
    ) as Promise<Models.ProvidersGetResponse>;
  }

  /**
   * Gets the specified resource provider at the tenant level.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProvidersGetAtTenantScopeResponse>
   */
  getAtTenantScope(
    resourceProviderNamespace: string,
    options?: Models.ProvidersGetAtTenantScopeOptionalParams
  ): Promise<Models.ProvidersGetAtTenantScopeResponse>;
  /**
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param callback The callback
   */
  getAtTenantScope(
    resourceProviderNamespace: string,
    callback: msRest.ServiceCallback<Models.Provider>
  ): void;
  /**
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAtTenantScope(
    resourceProviderNamespace: string,
    options: Models.ProvidersGetAtTenantScopeOptionalParams,
    callback: msRest.ServiceCallback<Models.Provider>
  ): void;
  getAtTenantScope(
    resourceProviderNamespace: string,
    options?:
      | Models.ProvidersGetAtTenantScopeOptionalParams
      | msRest.ServiceCallback<Models.Provider>,
    callback?: msRest.ServiceCallback<Models.Provider>
  ): Promise<Models.ProvidersGetAtTenantScopeResponse> {
    return this.client.sendOperationRequest(
      {
        resourceProviderNamespace,
        options
      },
      getAtTenantScopeOperationSpec,
      callback
    ) as Promise<Models.ProvidersGetAtTenantScopeResponse>;
  }

  /**
   * Gets all resource providers for a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProvidersListNextResponse>
   */
  listNext(
    nextPageLink: string,
    options?: Models.ProvidersListNextOptionalParams
  ): Promise<Models.ProvidersListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProviderListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(
    nextPageLink: string,
    options: Models.ProvidersListNextOptionalParams,
    callback: msRest.ServiceCallback<Models.ProviderListResult>
  ): void;
  listNext(
    nextPageLink: string,
    options?:
      | Models.ProvidersListNextOptionalParams
      | msRest.ServiceCallback<Models.ProviderListResult>,
    callback?: msRest.ServiceCallback<Models.ProviderListResult>
  ): Promise<Models.ProvidersListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback
    ) as Promise<Models.ProvidersListNextResponse>;
  }

  /**
   * Gets all resource providers for the tenant.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProvidersListAtTenantScopeNextResponse>
   */
  listAtTenantScopeNext(
    nextPageLink: string,
    options?: Models.ProvidersListAtTenantScopeNextOptionalParams
  ): Promise<Models.ProvidersListAtTenantScopeNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listAtTenantScopeNext(
    nextPageLink: string,
    callback: msRest.ServiceCallback<Models.ProviderListResult>
  ): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAtTenantScopeNext(
    nextPageLink: string,
    options: Models.ProvidersListAtTenantScopeNextOptionalParams,
    callback: msRest.ServiceCallback<Models.ProviderListResult>
  ): void;
  listAtTenantScopeNext(
    nextPageLink: string,
    options?:
      | Models.ProvidersListAtTenantScopeNextOptionalParams
      | msRest.ServiceCallback<Models.ProviderListResult>,
    callback?: msRest.ServiceCallback<Models.ProviderListResult>
  ): Promise<Models.ProvidersListAtTenantScopeNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listAtTenantScopeNextOperationSpec,
      callback
    ) as Promise<Models.ProvidersListAtTenantScopeNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const unregisterOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/unregister",
  urlParameters: [Parameters.resourceProviderNamespace, Parameters.subscriptionId],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.Provider
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const registerAtManagementGroupScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "providers/Microsoft.Management/managementGroups/{groupId}/providers/{resourceProviderNamespace}/register",
  urlParameters: [Parameters.resourceProviderNamespace, Parameters.groupId],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const registerOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/register",
  urlParameters: [Parameters.resourceProviderNamespace, Parameters.subscriptionId],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.Provider
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers",
  urlParameters: [Parameters.subscriptionId],
  queryParameters: [Parameters.top, Parameters.expand, Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.ProviderListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAtTenantScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers",
  queryParameters: [Parameters.top, Parameters.expand, Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.ProviderListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}",
  urlParameters: [Parameters.resourceProviderNamespace, Parameters.subscriptionId],
  queryParameters: [Parameters.expand, Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.Provider
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAtTenantScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/{resourceProviderNamespace}",
  urlParameters: [Parameters.resourceProviderNamespace],
  queryParameters: [Parameters.expand, Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.Provider
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [Parameters.nextPageLink],
  queryParameters: [Parameters.top, Parameters.expand, Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.ProviderListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAtTenantScopeNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [Parameters.nextPageLink],
  queryParameters: [Parameters.top, Parameters.expand, Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.ProviderListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
