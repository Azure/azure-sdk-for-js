/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/tagsMappers";
import * as Parameters from "../models/parameters";
import { ResourceManagementClientContext } from "../resourceManagementClientContext";

/** Class representing a Tags. */
export class Tags {
  private readonly client: ResourceManagementClientContext;

  /**
   * Create a Tags.
   * @param {ResourceManagementClientContext} client Reference to the service client.
   */
  constructor(client: ResourceManagementClientContext) {
    this.client = client;
  }

  /**
   * Deletes a tag value.
   * @param tagName The name of the tag.
   * @param tagValue The value of the tag to delete.
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  deleteValue(tagName: string, tagValue: string, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param tagName The name of the tag.
   * @param tagValue The value of the tag to delete.
   * @param callback The callback
   */
  deleteValue(tagName: string, tagValue: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param tagName The name of the tag.
   * @param tagValue The value of the tag to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteValue(tagName: string, tagValue: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  deleteValue(tagName: string, tagValue: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        tagName,
        tagValue,
        options
      },
      deleteValueOperationSpec,
      callback);
  }

  /**
   * Creates a tag value. The name of the tag must already exist.
   * @param tagName The name of the tag.
   * @param tagValue The value of the tag to create.
   * @param [options] The optional parameters
   * @returns Promise<Models.TagsCreateOrUpdateValueResponse>
   */
  createOrUpdateValue(tagName: string, tagValue: string, options?: coreHttp.RequestOptionsBase): Promise<Models.TagsCreateOrUpdateValueResponse>;
  /**
   * @param tagName The name of the tag.
   * @param tagValue The value of the tag to create.
   * @param callback The callback
   */
  createOrUpdateValue(tagName: string, tagValue: string, callback: coreHttp.ServiceCallback<Models.TagValue>): void;
  /**
   * @param tagName The name of the tag.
   * @param tagValue The value of the tag to create.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateValue(tagName: string, tagValue: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.TagValue>): void;
  createOrUpdateValue(tagName: string, tagValue: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.TagValue>, callback?: coreHttp.ServiceCallback<Models.TagValue>): Promise<Models.TagsCreateOrUpdateValueResponse> {
    return this.client.sendOperationRequest(
      {
        tagName,
        tagValue,
        options
      },
      createOrUpdateValueOperationSpec,
      callback) as Promise<Models.TagsCreateOrUpdateValueResponse>;
  }

  /**
   * The tag name can have a maximum of 512 characters and is case insensitive. Tag names created by
   * Azure have prefixes of microsoft, azure, or windows. You cannot create tags with one of these
   * prefixes.
   * @summary Creates a tag in the subscription.
   * @param tagName The name of the tag to create.
   * @param [options] The optional parameters
   * @returns Promise<Models.TagsCreateOrUpdateResponse>
   */
  createOrUpdate(tagName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.TagsCreateOrUpdateResponse>;
  /**
   * @param tagName The name of the tag to create.
   * @param callback The callback
   */
  createOrUpdate(tagName: string, callback: coreHttp.ServiceCallback<Models.TagDetails>): void;
  /**
   * @param tagName The name of the tag to create.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(tagName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.TagDetails>): void;
  createOrUpdate(tagName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.TagDetails>, callback?: coreHttp.ServiceCallback<Models.TagDetails>): Promise<Models.TagsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        tagName,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.TagsCreateOrUpdateResponse>;
  }

  /**
   * You must remove all values from a resource tag before you can delete it.
   * @summary Deletes a tag from the subscription.
   * @param tagName The name of the tag.
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  deleteMethod(tagName: string, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param tagName The name of the tag.
   * @param callback The callback
   */
  deleteMethod(tagName: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param tagName The name of the tag.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(tagName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  deleteMethod(tagName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        tagName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Gets the names and values of all resource tags that are defined in a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.TagsListResponse>
   */
  list(options?: coreHttp.RequestOptionsBase): Promise<Models.TagsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: coreHttp.ServiceCallback<Models.TagsListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.TagsListResult>): void;
  list(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.TagsListResult>, callback?: coreHttp.ServiceCallback<Models.TagsListResult>): Promise<Models.TagsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.TagsListResponse>;
  }

  /**
   * Gets the names and values of all resource tags that are defined in a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.TagsListNextResponse>
   */
  listNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase): Promise<Models.TagsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: coreHttp.ServiceCallback<Models.TagsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.TagsListResult>): void;
  listNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.TagsListResult>, callback?: coreHttp.ServiceCallback<Models.TagsListResult>): Promise<Models.TagsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.TagsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const deleteValueOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}",
  urlParameters: [
    Parameters.tagName,
    Parameters.tagValue,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateValueOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}",
  urlParameters: [
    Parameters.tagName,
    Parameters.tagValue,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TagValue
    },
    201: {
      bodyMapper: Mappers.TagValue
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/tagNames/{tagName}",
  urlParameters: [
    Parameters.tagName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TagDetails
    },
    201: {
      bodyMapper: Mappers.TagDetails
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/tagNames/{tagName}",
  urlParameters: [
    Parameters.tagName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/tagNames",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TagsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TagsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
