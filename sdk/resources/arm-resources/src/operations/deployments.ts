/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/deploymentsMappers";
import * as Parameters from "../models/parameters";
import { ResourceManagementClientContext } from "../resourceManagementClientContext";

/** Class representing a Deployments. */
export class Deployments {
  private readonly client: ResourceManagementClientContext;

  /**
   * Create a Deployments.
   * @param {ResourceManagementClientContext} client Reference to the service client.
   */
  constructor(client: ResourceManagementClientContext) {
    this.client = client;
  }

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template
   * deployment removes the associated deployment operations. This is an asynchronous operation that
   * returns a status of 202 until the template deployment is successfully deleted. The Location
   * response header contains the URI that is used to obtain the status of the process. While the
   * process is running, a call to the URI in the Location header returns a status of 202. When the
   * process finishes, the URI in the Location header returns a status of 204 on success. If the
   * asynchronous request failed, the URI in the Location header returns an error-level status code.
   * @summary Deletes a deployment from the deployment history.
   * @param scope The resource scope.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteAtScope(scope: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteAtScope(scope,deploymentName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Checks whether the deployment exists.
   * @param scope The resource scope.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsCheckExistenceAtScopeResponse>
   */
  checkExistenceAtScope(scope: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsCheckExistenceAtScopeResponse>;
  /**
   * @param scope The resource scope.
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  checkExistenceAtScope(scope: string, deploymentName: string, callback: msRest.ServiceCallback<boolean>): void;
  /**
   * @param scope The resource scope.
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkExistenceAtScope(scope: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;
  checkExistenceAtScope(scope: string, deploymentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.DeploymentsCheckExistenceAtScopeResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        deploymentName,
        options
      },
      checkExistenceAtScopeOperationSpec,
      callback) as Promise<Models.DeploymentsCheckExistenceAtScopeResponse>;
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   * @summary Deploys resources at a given scope.
   * @param scope The resource scope.
   * @param deploymentName The name of the deployment.
   * @param parameters Additional parameters supplied to the operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsCreateOrUpdateAtScopeResponse>
   */
  createOrUpdateAtScope(scope: string, deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsCreateOrUpdateAtScopeResponse> {
    return this.beginCreateOrUpdateAtScope(scope,deploymentName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DeploymentsCreateOrUpdateAtScopeResponse>;
  }

  /**
   * Gets a deployment.
   * @param scope The resource scope.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsGetAtScopeResponse>
   */
  getAtScope(scope: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsGetAtScopeResponse>;
  /**
   * @param scope The resource scope.
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  getAtScope(scope: string, deploymentName: string, callback: msRest.ServiceCallback<Models.DeploymentExtended>): void;
  /**
   * @param scope The resource scope.
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAtScope(scope: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentExtended>): void;
  getAtScope(scope: string, deploymentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeploymentExtended>, callback?: msRest.ServiceCallback<Models.DeploymentExtended>): Promise<Models.DeploymentsGetAtScopeResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        deploymentName,
        options
      },
      getAtScopeOperationSpec,
      callback) as Promise<Models.DeploymentsGetAtScopeResponse>;
  }

  /**
   * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
   * deployment is canceled, the provisioningState is set to Canceled. Canceling a template
   * deployment stops the currently running template deployment and leaves the resources partially
   * deployed.
   * @summary Cancels a currently running template deployment.
   * @param scope The resource scope.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  cancelAtScope(scope: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param scope The resource scope.
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  cancelAtScope(scope: string, deploymentName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scope The resource scope.
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  cancelAtScope(scope: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  cancelAtScope(scope: string, deploymentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        deploymentName,
        options
      },
      cancelAtScopeOperationSpec,
      callback);
  }

  /**
   * Validates whether the specified template is syntactically correct and will be accepted by Azure
   * Resource Manager..
   * @param scope The resource scope.
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsValidateAtScopeResponse>
   */
  validateAtScope(scope: string, deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsValidateAtScopeResponse> {
    return this.beginValidateAtScope(scope,deploymentName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DeploymentsValidateAtScopeResponse>;
  }

  /**
   * Exports the template used for specified deployment.
   * @param scope The resource scope.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsExportTemplateAtScopeResponse>
   */
  exportTemplateAtScope(scope: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsExportTemplateAtScopeResponse>;
  /**
   * @param scope The resource scope.
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  exportTemplateAtScope(scope: string, deploymentName: string, callback: msRest.ServiceCallback<Models.DeploymentExportResult>): void;
  /**
   * @param scope The resource scope.
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  exportTemplateAtScope(scope: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentExportResult>): void;
  exportTemplateAtScope(scope: string, deploymentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeploymentExportResult>, callback?: msRest.ServiceCallback<Models.DeploymentExportResult>): Promise<Models.DeploymentsExportTemplateAtScopeResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        deploymentName,
        options
      },
      exportTemplateAtScopeOperationSpec,
      callback) as Promise<Models.DeploymentsExportTemplateAtScopeResponse>;
  }

  /**
   * Get all the deployments at the given scope.
   * @param scope The resource scope.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsListAtScopeResponse>
   */
  listAtScope(scope: string, options?: Models.DeploymentsListAtScopeOptionalParams): Promise<Models.DeploymentsListAtScopeResponse>;
  /**
   * @param scope The resource scope.
   * @param callback The callback
   */
  listAtScope(scope: string, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
  /**
   * @param scope The resource scope.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAtScope(scope: string, options: Models.DeploymentsListAtScopeOptionalParams, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
  listAtScope(scope: string, options?: Models.DeploymentsListAtScopeOptionalParams | msRest.ServiceCallback<Models.DeploymentListResult>, callback?: msRest.ServiceCallback<Models.DeploymentListResult>): Promise<Models.DeploymentsListAtScopeResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        options
      },
      listAtScopeOperationSpec,
      callback) as Promise<Models.DeploymentsListAtScopeResponse>;
  }

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template
   * deployment removes the associated deployment operations. This is an asynchronous operation that
   * returns a status of 202 until the template deployment is successfully deleted. The Location
   * response header contains the URI that is used to obtain the status of the process. While the
   * process is running, a call to the URI in the Location header returns a status of 202. When the
   * process finishes, the URI in the Location header returns a status of 204 on success. If the
   * asynchronous request failed, the URI in the Location header returns an error-level status code.
   * @summary Deletes a deployment from the deployment history.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteAtTenantScope(deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteAtTenantScope(deploymentName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Checks whether the deployment exists.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsCheckExistenceAtTenantScopeResponse>
   */
  checkExistenceAtTenantScope(deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsCheckExistenceAtTenantScopeResponse>;
  /**
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  checkExistenceAtTenantScope(deploymentName: string, callback: msRest.ServiceCallback<boolean>): void;
  /**
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkExistenceAtTenantScope(deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;
  checkExistenceAtTenantScope(deploymentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.DeploymentsCheckExistenceAtTenantScopeResponse> {
    return this.client.sendOperationRequest(
      {
        deploymentName,
        options
      },
      checkExistenceAtTenantScopeOperationSpec,
      callback) as Promise<Models.DeploymentsCheckExistenceAtTenantScopeResponse>;
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   * @summary Deploys resources at tenant scope.
   * @param deploymentName The name of the deployment.
   * @param parameters Additional parameters supplied to the operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsCreateOrUpdateAtTenantScopeResponse>
   */
  createOrUpdateAtTenantScope(deploymentName: string, parameters: Models.ScopedDeployment, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsCreateOrUpdateAtTenantScopeResponse> {
    return this.beginCreateOrUpdateAtTenantScope(deploymentName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DeploymentsCreateOrUpdateAtTenantScopeResponse>;
  }

  /**
   * Gets a deployment.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsGetAtTenantScopeResponse>
   */
  getAtTenantScope(deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsGetAtTenantScopeResponse>;
  /**
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  getAtTenantScope(deploymentName: string, callback: msRest.ServiceCallback<Models.DeploymentExtended>): void;
  /**
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAtTenantScope(deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentExtended>): void;
  getAtTenantScope(deploymentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeploymentExtended>, callback?: msRest.ServiceCallback<Models.DeploymentExtended>): Promise<Models.DeploymentsGetAtTenantScopeResponse> {
    return this.client.sendOperationRequest(
      {
        deploymentName,
        options
      },
      getAtTenantScopeOperationSpec,
      callback) as Promise<Models.DeploymentsGetAtTenantScopeResponse>;
  }

  /**
   * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
   * deployment is canceled, the provisioningState is set to Canceled. Canceling a template
   * deployment stops the currently running template deployment and leaves the resources partially
   * deployed.
   * @summary Cancels a currently running template deployment.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  cancelAtTenantScope(deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  cancelAtTenantScope(deploymentName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  cancelAtTenantScope(deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  cancelAtTenantScope(deploymentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        deploymentName,
        options
      },
      cancelAtTenantScopeOperationSpec,
      callback);
  }

  /**
   * Validates whether the specified template is syntactically correct and will be accepted by Azure
   * Resource Manager..
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsValidateAtTenantScopeResponse>
   */
  validateAtTenantScope(deploymentName: string, parameters: Models.ScopedDeployment, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsValidateAtTenantScopeResponse> {
    return this.beginValidateAtTenantScope(deploymentName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DeploymentsValidateAtTenantScopeResponse>;
  }

  /**
   * Returns changes that will be made by the deployment if executed at the scope of the tenant
   * group.
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsWhatIfAtTenantScopeResponse>
   */
  whatIfAtTenantScope(deploymentName: string, parameters: Models.ScopedDeploymentWhatIf, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsWhatIfAtTenantScopeResponse> {
    return this.beginWhatIfAtTenantScope(deploymentName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DeploymentsWhatIfAtTenantScopeResponse>;
  }

  /**
   * Exports the template used for specified deployment.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsExportTemplateAtTenantScopeResponse>
   */
  exportTemplateAtTenantScope(deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsExportTemplateAtTenantScopeResponse>;
  /**
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  exportTemplateAtTenantScope(deploymentName: string, callback: msRest.ServiceCallback<Models.DeploymentExportResult>): void;
  /**
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  exportTemplateAtTenantScope(deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentExportResult>): void;
  exportTemplateAtTenantScope(deploymentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeploymentExportResult>, callback?: msRest.ServiceCallback<Models.DeploymentExportResult>): Promise<Models.DeploymentsExportTemplateAtTenantScopeResponse> {
    return this.client.sendOperationRequest(
      {
        deploymentName,
        options
      },
      exportTemplateAtTenantScopeOperationSpec,
      callback) as Promise<Models.DeploymentsExportTemplateAtTenantScopeResponse>;
  }

  /**
   * Get all the deployments at the tenant scope.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsListAtTenantScopeResponse>
   */
  listAtTenantScope(options?: Models.DeploymentsListAtTenantScopeOptionalParams): Promise<Models.DeploymentsListAtTenantScopeResponse>;
  /**
   * @param callback The callback
   */
  listAtTenantScope(callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAtTenantScope(options: Models.DeploymentsListAtTenantScopeOptionalParams, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
  listAtTenantScope(options?: Models.DeploymentsListAtTenantScopeOptionalParams | msRest.ServiceCallback<Models.DeploymentListResult>, callback?: msRest.ServiceCallback<Models.DeploymentListResult>): Promise<Models.DeploymentsListAtTenantScopeResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listAtTenantScopeOperationSpec,
      callback) as Promise<Models.DeploymentsListAtTenantScopeResponse>;
  }

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template
   * deployment removes the associated deployment operations. This is an asynchronous operation that
   * returns a status of 202 until the template deployment is successfully deleted. The Location
   * response header contains the URI that is used to obtain the status of the process. While the
   * process is running, a call to the URI in the Location header returns a status of 202. When the
   * process finishes, the URI in the Location header returns a status of 204 on success. If the
   * asynchronous request failed, the URI in the Location header returns an error-level status code.
   * @summary Deletes a deployment from the deployment history.
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteAtManagementGroupScope(groupId: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteAtManagementGroupScope(groupId,deploymentName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Checks whether the deployment exists.
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsCheckExistenceAtManagementGroupScopeResponse>
   */
  checkExistenceAtManagementGroupScope(groupId: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsCheckExistenceAtManagementGroupScopeResponse>;
  /**
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  checkExistenceAtManagementGroupScope(groupId: string, deploymentName: string, callback: msRest.ServiceCallback<boolean>): void;
  /**
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkExistenceAtManagementGroupScope(groupId: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;
  checkExistenceAtManagementGroupScope(groupId: string, deploymentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.DeploymentsCheckExistenceAtManagementGroupScopeResponse> {
    return this.client.sendOperationRequest(
      {
        groupId,
        deploymentName,
        options
      },
      checkExistenceAtManagementGroupScopeOperationSpec,
      callback) as Promise<Models.DeploymentsCheckExistenceAtManagementGroupScopeResponse>;
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   * @summary Deploys resources at management group scope.
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param parameters Additional parameters supplied to the operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsCreateOrUpdateAtManagementGroupScopeResponse>
   */
  createOrUpdateAtManagementGroupScope(groupId: string, deploymentName: string, parameters: Models.ScopedDeployment, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsCreateOrUpdateAtManagementGroupScopeResponse> {
    return this.beginCreateOrUpdateAtManagementGroupScope(groupId,deploymentName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DeploymentsCreateOrUpdateAtManagementGroupScopeResponse>;
  }

  /**
   * Gets a deployment.
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsGetAtManagementGroupScopeResponse>
   */
  getAtManagementGroupScope(groupId: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsGetAtManagementGroupScopeResponse>;
  /**
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  getAtManagementGroupScope(groupId: string, deploymentName: string, callback: msRest.ServiceCallback<Models.DeploymentExtended>): void;
  /**
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAtManagementGroupScope(groupId: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentExtended>): void;
  getAtManagementGroupScope(groupId: string, deploymentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeploymentExtended>, callback?: msRest.ServiceCallback<Models.DeploymentExtended>): Promise<Models.DeploymentsGetAtManagementGroupScopeResponse> {
    return this.client.sendOperationRequest(
      {
        groupId,
        deploymentName,
        options
      },
      getAtManagementGroupScopeOperationSpec,
      callback) as Promise<Models.DeploymentsGetAtManagementGroupScopeResponse>;
  }

  /**
   * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
   * deployment is canceled, the provisioningState is set to Canceled. Canceling a template
   * deployment stops the currently running template deployment and leaves the resources partially
   * deployed.
   * @summary Cancels a currently running template deployment.
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  cancelAtManagementGroupScope(groupId: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  cancelAtManagementGroupScope(groupId: string, deploymentName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  cancelAtManagementGroupScope(groupId: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  cancelAtManagementGroupScope(groupId: string, deploymentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        groupId,
        deploymentName,
        options
      },
      cancelAtManagementGroupScopeOperationSpec,
      callback);
  }

  /**
   * Validates whether the specified template is syntactically correct and will be accepted by Azure
   * Resource Manager..
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsValidateAtManagementGroupScopeResponse>
   */
  validateAtManagementGroupScope(groupId: string, deploymentName: string, parameters: Models.ScopedDeployment, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsValidateAtManagementGroupScopeResponse> {
    return this.beginValidateAtManagementGroupScope(groupId,deploymentName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DeploymentsValidateAtManagementGroupScopeResponse>;
  }

  /**
   * Returns changes that will be made by the deployment if executed at the scope of the management
   * group.
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsWhatIfAtManagementGroupScopeResponse>
   */
  whatIfAtManagementGroupScope(groupId: string, deploymentName: string, parameters: Models.ScopedDeploymentWhatIf, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsWhatIfAtManagementGroupScopeResponse> {
    return this.beginWhatIfAtManagementGroupScope(groupId,deploymentName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DeploymentsWhatIfAtManagementGroupScopeResponse>;
  }

  /**
   * Exports the template used for specified deployment.
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsExportTemplateAtManagementGroupScopeResponse>
   */
  exportTemplateAtManagementGroupScope(groupId: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsExportTemplateAtManagementGroupScopeResponse>;
  /**
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  exportTemplateAtManagementGroupScope(groupId: string, deploymentName: string, callback: msRest.ServiceCallback<Models.DeploymentExportResult>): void;
  /**
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  exportTemplateAtManagementGroupScope(groupId: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentExportResult>): void;
  exportTemplateAtManagementGroupScope(groupId: string, deploymentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeploymentExportResult>, callback?: msRest.ServiceCallback<Models.DeploymentExportResult>): Promise<Models.DeploymentsExportTemplateAtManagementGroupScopeResponse> {
    return this.client.sendOperationRequest(
      {
        groupId,
        deploymentName,
        options
      },
      exportTemplateAtManagementGroupScopeOperationSpec,
      callback) as Promise<Models.DeploymentsExportTemplateAtManagementGroupScopeResponse>;
  }

  /**
   * Get all the deployments for a management group.
   * @param groupId The management group ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsListAtManagementGroupScopeResponse>
   */
  listAtManagementGroupScope(groupId: string, options?: Models.DeploymentsListAtManagementGroupScopeOptionalParams): Promise<Models.DeploymentsListAtManagementGroupScopeResponse>;
  /**
   * @param groupId The management group ID.
   * @param callback The callback
   */
  listAtManagementGroupScope(groupId: string, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
  /**
   * @param groupId The management group ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAtManagementGroupScope(groupId: string, options: Models.DeploymentsListAtManagementGroupScopeOptionalParams, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
  listAtManagementGroupScope(groupId: string, options?: Models.DeploymentsListAtManagementGroupScopeOptionalParams | msRest.ServiceCallback<Models.DeploymentListResult>, callback?: msRest.ServiceCallback<Models.DeploymentListResult>): Promise<Models.DeploymentsListAtManagementGroupScopeResponse> {
    return this.client.sendOperationRequest(
      {
        groupId,
        options
      },
      listAtManagementGroupScopeOperationSpec,
      callback) as Promise<Models.DeploymentsListAtManagementGroupScopeResponse>;
  }

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template
   * deployment removes the associated deployment operations. This is an asynchronous operation that
   * returns a status of 202 until the template deployment is successfully deleted. The Location
   * response header contains the URI that is used to obtain the status of the process. While the
   * process is running, a call to the URI in the Location header returns a status of 202. When the
   * process finishes, the URI in the Location header returns a status of 204 on success. If the
   * asynchronous request failed, the URI in the Location header returns an error-level status code.
   * @summary Deletes a deployment from the deployment history.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteAtSubscriptionScope(deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteAtSubscriptionScope(deploymentName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Checks whether the deployment exists.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsCheckExistenceAtSubscriptionScopeResponse>
   */
  checkExistenceAtSubscriptionScope(deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsCheckExistenceAtSubscriptionScopeResponse>;
  /**
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  checkExistenceAtSubscriptionScope(deploymentName: string, callback: msRest.ServiceCallback<boolean>): void;
  /**
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkExistenceAtSubscriptionScope(deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;
  checkExistenceAtSubscriptionScope(deploymentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.DeploymentsCheckExistenceAtSubscriptionScopeResponse> {
    return this.client.sendOperationRequest(
      {
        deploymentName,
        options
      },
      checkExistenceAtSubscriptionScopeOperationSpec,
      callback) as Promise<Models.DeploymentsCheckExistenceAtSubscriptionScopeResponse>;
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   * @summary Deploys resources at subscription scope.
   * @param deploymentName The name of the deployment.
   * @param parameters Additional parameters supplied to the operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsCreateOrUpdateAtSubscriptionScopeResponse>
   */
  createOrUpdateAtSubscriptionScope(deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsCreateOrUpdateAtSubscriptionScopeResponse> {
    return this.beginCreateOrUpdateAtSubscriptionScope(deploymentName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DeploymentsCreateOrUpdateAtSubscriptionScopeResponse>;
  }

  /**
   * Gets a deployment.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsGetAtSubscriptionScopeResponse>
   */
  getAtSubscriptionScope(deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsGetAtSubscriptionScopeResponse>;
  /**
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  getAtSubscriptionScope(deploymentName: string, callback: msRest.ServiceCallback<Models.DeploymentExtended>): void;
  /**
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAtSubscriptionScope(deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentExtended>): void;
  getAtSubscriptionScope(deploymentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeploymentExtended>, callback?: msRest.ServiceCallback<Models.DeploymentExtended>): Promise<Models.DeploymentsGetAtSubscriptionScopeResponse> {
    return this.client.sendOperationRequest(
      {
        deploymentName,
        options
      },
      getAtSubscriptionScopeOperationSpec,
      callback) as Promise<Models.DeploymentsGetAtSubscriptionScopeResponse>;
  }

  /**
   * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
   * deployment is canceled, the provisioningState is set to Canceled. Canceling a template
   * deployment stops the currently running template deployment and leaves the resources partially
   * deployed.
   * @summary Cancels a currently running template deployment.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  cancelAtSubscriptionScope(deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  cancelAtSubscriptionScope(deploymentName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  cancelAtSubscriptionScope(deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  cancelAtSubscriptionScope(deploymentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        deploymentName,
        options
      },
      cancelAtSubscriptionScopeOperationSpec,
      callback);
  }

  /**
   * Validates whether the specified template is syntactically correct and will be accepted by Azure
   * Resource Manager..
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsValidateAtSubscriptionScopeResponse>
   */
  validateAtSubscriptionScope(deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsValidateAtSubscriptionScopeResponse> {
    return this.beginValidateAtSubscriptionScope(deploymentName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DeploymentsValidateAtSubscriptionScopeResponse>;
  }

  /**
   * Returns changes that will be made by the deployment if executed at the scope of the
   * subscription.
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to What If.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsWhatIfAtSubscriptionScopeResponse>
   */
  whatIfAtSubscriptionScope(deploymentName: string, parameters: Models.DeploymentWhatIf, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsWhatIfAtSubscriptionScopeResponse> {
    return this.beginWhatIfAtSubscriptionScope(deploymentName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DeploymentsWhatIfAtSubscriptionScopeResponse>;
  }

  /**
   * Exports the template used for specified deployment.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsExportTemplateAtSubscriptionScopeResponse>
   */
  exportTemplateAtSubscriptionScope(deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsExportTemplateAtSubscriptionScopeResponse>;
  /**
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  exportTemplateAtSubscriptionScope(deploymentName: string, callback: msRest.ServiceCallback<Models.DeploymentExportResult>): void;
  /**
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  exportTemplateAtSubscriptionScope(deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentExportResult>): void;
  exportTemplateAtSubscriptionScope(deploymentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeploymentExportResult>, callback?: msRest.ServiceCallback<Models.DeploymentExportResult>): Promise<Models.DeploymentsExportTemplateAtSubscriptionScopeResponse> {
    return this.client.sendOperationRequest(
      {
        deploymentName,
        options
      },
      exportTemplateAtSubscriptionScopeOperationSpec,
      callback) as Promise<Models.DeploymentsExportTemplateAtSubscriptionScopeResponse>;
  }

  /**
   * Get all the deployments for a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsListAtSubscriptionScopeResponse>
   */
  listAtSubscriptionScope(options?: Models.DeploymentsListAtSubscriptionScopeOptionalParams): Promise<Models.DeploymentsListAtSubscriptionScopeResponse>;
  /**
   * @param callback The callback
   */
  listAtSubscriptionScope(callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAtSubscriptionScope(options: Models.DeploymentsListAtSubscriptionScopeOptionalParams, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
  listAtSubscriptionScope(options?: Models.DeploymentsListAtSubscriptionScopeOptionalParams | msRest.ServiceCallback<Models.DeploymentListResult>, callback?: msRest.ServiceCallback<Models.DeploymentListResult>): Promise<Models.DeploymentsListAtSubscriptionScopeResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listAtSubscriptionScopeOperationSpec,
      callback) as Promise<Models.DeploymentsListAtSubscriptionScopeResponse>;
  }

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template
   * deployment removes the associated deployment operations. Deleting a template deployment does not
   * affect the state of the resource group. This is an asynchronous operation that returns a status
   * of 202 until the template deployment is successfully deleted. The Location response header
   * contains the URI that is used to obtain the status of the process. While the process is running,
   * a call to the URI in the Location header returns a status of 202. When the process finishes, the
   * URI in the Location header returns a status of 204 on success. If the asynchronous request
   * failed, the URI in the Location header returns an error-level status code.
   * @summary Deletes a deployment from the deployment history.
   * @param resourceGroupName The name of the resource group with the deployment to delete. The name
   * is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,deploymentName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Checks whether the deployment exists.
   * @param resourceGroupName The name of the resource group with the deployment to check. The name
   * is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsCheckExistenceResponse>
   */
  checkExistence(resourceGroupName: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsCheckExistenceResponse>;
  /**
   * @param resourceGroupName The name of the resource group with the deployment to check. The name
   * is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  checkExistence(resourceGroupName: string, deploymentName: string, callback: msRest.ServiceCallback<boolean>): void;
  /**
   * @param resourceGroupName The name of the resource group with the deployment to check. The name
   * is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkExistence(resourceGroupName: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;
  checkExistence(resourceGroupName: string, deploymentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.DeploymentsCheckExistenceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        deploymentName,
        options
      },
      checkExistenceOperationSpec,
      callback) as Promise<Models.DeploymentsCheckExistenceResponse>;
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   * @summary Deploys resources to a resource group.
   * @param resourceGroupName The name of the resource group to deploy the resources to. The name is
   * case insensitive. The resource group must already exist.
   * @param deploymentName The name of the deployment.
   * @param parameters Additional parameters supplied to the operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,deploymentName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DeploymentsCreateOrUpdateResponse>;
  }

  /**
   * Gets a deployment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsGetResponse>
   */
  get(resourceGroupName: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  get(resourceGroupName: string, deploymentName: string, callback: msRest.ServiceCallback<Models.DeploymentExtended>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentExtended>): void;
  get(resourceGroupName: string, deploymentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeploymentExtended>, callback?: msRest.ServiceCallback<Models.DeploymentExtended>): Promise<Models.DeploymentsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        deploymentName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.DeploymentsGetResponse>;
  }

  /**
   * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
   * deployment is canceled, the provisioningState is set to Canceled. Canceling a template
   * deployment stops the currently running template deployment and leaves the resource group
   * partially deployed.
   * @summary Cancels a currently running template deployment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  cancel(resourceGroupName: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  cancel(resourceGroupName: string, deploymentName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  cancel(resourceGroupName: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  cancel(resourceGroupName: string, deploymentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        deploymentName,
        options
      },
      cancelOperationSpec,
      callback);
  }

  /**
   * Validates whether the specified template is syntactically correct and will be accepted by Azure
   * Resource Manager..
   * @param resourceGroupName The name of the resource group the template will be deployed to. The
   * name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsValidateResponse>
   */
  validate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsValidateResponse> {
    return this.beginValidate(resourceGroupName,deploymentName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DeploymentsValidateResponse>;
  }

  /**
   * Returns changes that will be made by the deployment if executed at the scope of the resource
   * group.
   * @param resourceGroupName The name of the resource group the template will be deployed to. The
   * name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsWhatIfResponse>
   */
  whatIf(resourceGroupName: string, deploymentName: string, parameters: Models.DeploymentWhatIf, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsWhatIfResponse> {
    return this.beginWhatIf(resourceGroupName,deploymentName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DeploymentsWhatIfResponse>;
  }

  /**
   * Exports the template used for specified deployment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsExportTemplateResponse>
   */
  exportTemplate(resourceGroupName: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsExportTemplateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  exportTemplate(resourceGroupName: string, deploymentName: string, callback: msRest.ServiceCallback<Models.DeploymentExportResult>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  exportTemplate(resourceGroupName: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentExportResult>): void;
  exportTemplate(resourceGroupName: string, deploymentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeploymentExportResult>, callback?: msRest.ServiceCallback<Models.DeploymentExportResult>): Promise<Models.DeploymentsExportTemplateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        deploymentName,
        options
      },
      exportTemplateOperationSpec,
      callback) as Promise<Models.DeploymentsExportTemplateResponse>;
  }

  /**
   * Get all the deployments for a resource group.
   * @param resourceGroupName The name of the resource group with the deployments to get. The name is
   * case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: Models.DeploymentsListByResourceGroupOptionalParams): Promise<Models.DeploymentsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group with the deployments to get. The name is
   * case insensitive.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group with the deployments to get. The name is
   * case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: Models.DeploymentsListByResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: Models.DeploymentsListByResourceGroupOptionalParams | msRest.ServiceCallback<Models.DeploymentListResult>, callback?: msRest.ServiceCallback<Models.DeploymentListResult>): Promise<Models.DeploymentsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.DeploymentsListByResourceGroupResponse>;
  }

  /**
   * Calculate the hash of the given template.
   * @param template The template provided to calculate hash.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsCalculateTemplateHashResponse>
   */
  calculateTemplateHash(template: any, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsCalculateTemplateHashResponse>;
  /**
   * @param template The template provided to calculate hash.
   * @param callback The callback
   */
  calculateTemplateHash(template: any, callback: msRest.ServiceCallback<Models.TemplateHashResult>): void;
  /**
   * @param template The template provided to calculate hash.
   * @param options The optional parameters
   * @param callback The callback
   */
  calculateTemplateHash(template: any, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TemplateHashResult>): void;
  calculateTemplateHash(template: any, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TemplateHashResult>, callback?: msRest.ServiceCallback<Models.TemplateHashResult>): Promise<Models.DeploymentsCalculateTemplateHashResponse> {
    return this.client.sendOperationRequest(
      {
        template,
        options
      },
      calculateTemplateHashOperationSpec,
      callback) as Promise<Models.DeploymentsCalculateTemplateHashResponse>;
  }

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template
   * deployment removes the associated deployment operations. This is an asynchronous operation that
   * returns a status of 202 until the template deployment is successfully deleted. The Location
   * response header contains the URI that is used to obtain the status of the process. While the
   * process is running, a call to the URI in the Location header returns a status of 202. When the
   * process finishes, the URI in the Location header returns a status of 204 on success. If the
   * asynchronous request failed, the URI in the Location header returns an error-level status code.
   * @summary Deletes a deployment from the deployment history.
   * @param scope The resource scope.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteAtScope(scope: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        scope,
        deploymentName,
        options
      },
      beginDeleteAtScopeOperationSpec,
      options);
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   * @summary Deploys resources at a given scope.
   * @param scope The resource scope.
   * @param deploymentName The name of the deployment.
   * @param parameters Additional parameters supplied to the operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdateAtScope(scope: string, deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        scope,
        deploymentName,
        parameters,
        options
      },
      beginCreateOrUpdateAtScopeOperationSpec,
      options);
  }

  /**
   * Validates whether the specified template is syntactically correct and will be accepted by Azure
   * Resource Manager..
   * @param scope The resource scope.
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginValidateAtScope(scope: string, deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        scope,
        deploymentName,
        parameters,
        options
      },
      beginValidateAtScopeOperationSpec,
      options);
  }

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template
   * deployment removes the associated deployment operations. This is an asynchronous operation that
   * returns a status of 202 until the template deployment is successfully deleted. The Location
   * response header contains the URI that is used to obtain the status of the process. While the
   * process is running, a call to the URI in the Location header returns a status of 202. When the
   * process finishes, the URI in the Location header returns a status of 204 on success. If the
   * asynchronous request failed, the URI in the Location header returns an error-level status code.
   * @summary Deletes a deployment from the deployment history.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteAtTenantScope(deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        deploymentName,
        options
      },
      beginDeleteAtTenantScopeOperationSpec,
      options);
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   * @summary Deploys resources at tenant scope.
   * @param deploymentName The name of the deployment.
   * @param parameters Additional parameters supplied to the operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdateAtTenantScope(deploymentName: string, parameters: Models.ScopedDeployment, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        deploymentName,
        parameters,
        options
      },
      beginCreateOrUpdateAtTenantScopeOperationSpec,
      options);
  }

  /**
   * Validates whether the specified template is syntactically correct and will be accepted by Azure
   * Resource Manager..
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginValidateAtTenantScope(deploymentName: string, parameters: Models.ScopedDeployment, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        deploymentName,
        parameters,
        options
      },
      beginValidateAtTenantScopeOperationSpec,
      options);
  }

  /**
   * Returns changes that will be made by the deployment if executed at the scope of the tenant
   * group.
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginWhatIfAtTenantScope(deploymentName: string, parameters: Models.ScopedDeploymentWhatIf, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        deploymentName,
        parameters,
        options
      },
      beginWhatIfAtTenantScopeOperationSpec,
      options);
  }

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template
   * deployment removes the associated deployment operations. This is an asynchronous operation that
   * returns a status of 202 until the template deployment is successfully deleted. The Location
   * response header contains the URI that is used to obtain the status of the process. While the
   * process is running, a call to the URI in the Location header returns a status of 202. When the
   * process finishes, the URI in the Location header returns a status of 204 on success. If the
   * asynchronous request failed, the URI in the Location header returns an error-level status code.
   * @summary Deletes a deployment from the deployment history.
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteAtManagementGroupScope(groupId: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        groupId,
        deploymentName,
        options
      },
      beginDeleteAtManagementGroupScopeOperationSpec,
      options);
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   * @summary Deploys resources at management group scope.
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param parameters Additional parameters supplied to the operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdateAtManagementGroupScope(groupId: string, deploymentName: string, parameters: Models.ScopedDeployment, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        groupId,
        deploymentName,
        parameters,
        options
      },
      beginCreateOrUpdateAtManagementGroupScopeOperationSpec,
      options);
  }

  /**
   * Validates whether the specified template is syntactically correct and will be accepted by Azure
   * Resource Manager..
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginValidateAtManagementGroupScope(groupId: string, deploymentName: string, parameters: Models.ScopedDeployment, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        groupId,
        deploymentName,
        parameters,
        options
      },
      beginValidateAtManagementGroupScopeOperationSpec,
      options);
  }

  /**
   * Returns changes that will be made by the deployment if executed at the scope of the management
   * group.
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginWhatIfAtManagementGroupScope(groupId: string, deploymentName: string, parameters: Models.ScopedDeploymentWhatIf, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        groupId,
        deploymentName,
        parameters,
        options
      },
      beginWhatIfAtManagementGroupScopeOperationSpec,
      options);
  }

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template
   * deployment removes the associated deployment operations. This is an asynchronous operation that
   * returns a status of 202 until the template deployment is successfully deleted. The Location
   * response header contains the URI that is used to obtain the status of the process. While the
   * process is running, a call to the URI in the Location header returns a status of 202. When the
   * process finishes, the URI in the Location header returns a status of 204 on success. If the
   * asynchronous request failed, the URI in the Location header returns an error-level status code.
   * @summary Deletes a deployment from the deployment history.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteAtSubscriptionScope(deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        deploymentName,
        options
      },
      beginDeleteAtSubscriptionScopeOperationSpec,
      options);
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   * @summary Deploys resources at subscription scope.
   * @param deploymentName The name of the deployment.
   * @param parameters Additional parameters supplied to the operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdateAtSubscriptionScope(deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        deploymentName,
        parameters,
        options
      },
      beginCreateOrUpdateAtSubscriptionScopeOperationSpec,
      options);
  }

  /**
   * Validates whether the specified template is syntactically correct and will be accepted by Azure
   * Resource Manager..
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginValidateAtSubscriptionScope(deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        deploymentName,
        parameters,
        options
      },
      beginValidateAtSubscriptionScopeOperationSpec,
      options);
  }

  /**
   * Returns changes that will be made by the deployment if executed at the scope of the
   * subscription.
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to What If.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginWhatIfAtSubscriptionScope(deploymentName: string, parameters: Models.DeploymentWhatIf, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        deploymentName,
        parameters,
        options
      },
      beginWhatIfAtSubscriptionScopeOperationSpec,
      options);
  }

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template
   * deployment removes the associated deployment operations. Deleting a template deployment does not
   * affect the state of the resource group. This is an asynchronous operation that returns a status
   * of 202 until the template deployment is successfully deleted. The Location response header
   * contains the URI that is used to obtain the status of the process. While the process is running,
   * a call to the URI in the Location header returns a status of 202. When the process finishes, the
   * URI in the Location header returns a status of 204 on success. If the asynchronous request
   * failed, the URI in the Location header returns an error-level status code.
   * @summary Deletes a deployment from the deployment history.
   * @param resourceGroupName The name of the resource group with the deployment to delete. The name
   * is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        deploymentName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   * @summary Deploys resources to a resource group.
   * @param resourceGroupName The name of the resource group to deploy the resources to. The name is
   * case insensitive. The resource group must already exist.
   * @param deploymentName The name of the deployment.
   * @param parameters Additional parameters supplied to the operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        deploymentName,
        parameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Validates whether the specified template is syntactically correct and will be accepted by Azure
   * Resource Manager..
   * @param resourceGroupName The name of the resource group the template will be deployed to. The
   * name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginValidate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        deploymentName,
        parameters,
        options
      },
      beginValidateOperationSpec,
      options);
  }

  /**
   * Returns changes that will be made by the deployment if executed at the scope of the resource
   * group.
   * @param resourceGroupName The name of the resource group the template will be deployed to. The
   * name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginWhatIf(resourceGroupName: string, deploymentName: string, parameters: Models.DeploymentWhatIf, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        deploymentName,
        parameters,
        options
      },
      beginWhatIfOperationSpec,
      options);
  }

  /**
   * Get all the deployments at the given scope.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsListAtScopeNextResponse>
   */
  listAtScopeNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsListAtScopeNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listAtScopeNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAtScopeNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
  listAtScopeNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeploymentListResult>, callback?: msRest.ServiceCallback<Models.DeploymentListResult>): Promise<Models.DeploymentsListAtScopeNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listAtScopeNextOperationSpec,
      callback) as Promise<Models.DeploymentsListAtScopeNextResponse>;
  }

  /**
   * Get all the deployments at the tenant scope.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsListAtTenantScopeNextResponse>
   */
  listAtTenantScopeNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsListAtTenantScopeNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listAtTenantScopeNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAtTenantScopeNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
  listAtTenantScopeNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeploymentListResult>, callback?: msRest.ServiceCallback<Models.DeploymentListResult>): Promise<Models.DeploymentsListAtTenantScopeNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listAtTenantScopeNextOperationSpec,
      callback) as Promise<Models.DeploymentsListAtTenantScopeNextResponse>;
  }

  /**
   * Get all the deployments for a management group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsListAtManagementGroupScopeNextResponse>
   */
  listAtManagementGroupScopeNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsListAtManagementGroupScopeNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listAtManagementGroupScopeNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAtManagementGroupScopeNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
  listAtManagementGroupScopeNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeploymentListResult>, callback?: msRest.ServiceCallback<Models.DeploymentListResult>): Promise<Models.DeploymentsListAtManagementGroupScopeNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listAtManagementGroupScopeNextOperationSpec,
      callback) as Promise<Models.DeploymentsListAtManagementGroupScopeNextResponse>;
  }

  /**
   * Get all the deployments for a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsListAtSubscriptionScopeNextResponse>
   */
  listAtSubscriptionScopeNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsListAtSubscriptionScopeNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listAtSubscriptionScopeNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAtSubscriptionScopeNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
  listAtSubscriptionScopeNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeploymentListResult>, callback?: msRest.ServiceCallback<Models.DeploymentListResult>): Promise<Models.DeploymentsListAtSubscriptionScopeNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listAtSubscriptionScopeNextOperationSpec,
      callback) as Promise<Models.DeploymentsListAtSubscriptionScopeNextResponse>;
  }

  /**
   * Get all the deployments for a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeploymentListResult>, callback?: msRest.ServiceCallback<Models.DeploymentListResult>): Promise<Models.DeploymentsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.DeploymentsListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const checkExistenceAtScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "{scope}/providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.scope,
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAtScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{scope}/providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.scope,
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const cancelAtScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
  urlParameters: [
    Parameters.scope,
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const exportTemplateAtScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
  urlParameters: [
    Parameters.scope,
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExportResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAtScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{scope}/providers/Microsoft.Resources/deployments/",
  urlParameters: [
    Parameters.scope
  ],
  queryParameters: [
    Parameters.filter,
    Parameters.top,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const checkExistenceAtTenantScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAtTenantScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const cancelAtTenantScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
  urlParameters: [
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const exportTemplateAtTenantScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
  urlParameters: [
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExportResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAtTenantScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Resources/deployments/",
  queryParameters: [
    Parameters.filter,
    Parameters.top,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const checkExistenceAtManagementGroupScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.groupId,
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAtManagementGroupScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.groupId,
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const cancelAtManagementGroupScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
  urlParameters: [
    Parameters.groupId,
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const exportTemplateAtManagementGroupScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
  urlParameters: [
    Parameters.groupId,
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExportResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAtManagementGroupScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/",
  urlParameters: [
    Parameters.groupId
  ],
  queryParameters: [
    Parameters.filter,
    Parameters.top,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const checkExistenceAtSubscriptionScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAtSubscriptionScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const cancelAtSubscriptionScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
  urlParameters: [
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const exportTemplateAtSubscriptionScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
  urlParameters: [
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExportResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAtSubscriptionScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.filter,
    Parameters.top,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const checkExistenceOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const cancelOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const exportTemplateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExportResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.filter,
    Parameters.top,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const calculateTemplateHashOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Resources/calculateTemplateHash",
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "template",
    mapper: {
      required: true,
      serializedName: "template",
      type: {
        name: "Object"
      }
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.TemplateHashResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteAtScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "{scope}/providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.scope,
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateAtScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{scope}/providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.scope,
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Deployment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    201: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginValidateAtScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
  urlParameters: [
    Parameters.scope,
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Deployment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    202: {},
    400: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteAtTenantScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateAtTenantScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.ScopedDeployment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    201: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginValidateAtTenantScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Resources/deployments/{deploymentName}/validate",
  urlParameters: [
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.ScopedDeployment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    202: {},
    400: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginWhatIfAtTenantScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Resources/deployments/{deploymentName}/whatIf",
  urlParameters: [
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.ScopedDeploymentWhatIf,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.WhatIfOperationResult,
      headersMapper: Mappers.DeploymentsWhatIfAtTenantScopeHeaders
    },
    202: {
      headersMapper: Mappers.DeploymentsWhatIfAtTenantScopeHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.DeploymentsWhatIfAtTenantScopeHeaders
    }
  },
  serializer
};

const beginDeleteAtManagementGroupScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.groupId,
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateAtManagementGroupScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.groupId,
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.ScopedDeployment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    201: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginValidateAtManagementGroupScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
  urlParameters: [
    Parameters.groupId,
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.ScopedDeployment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    202: {},
    400: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginWhatIfAtManagementGroupScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf",
  urlParameters: [
    Parameters.groupId,
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.ScopedDeploymentWhatIf,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.WhatIfOperationResult,
      headersMapper: Mappers.DeploymentsWhatIfAtManagementGroupScopeHeaders
    },
    202: {
      headersMapper: Mappers.DeploymentsWhatIfAtManagementGroupScopeHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.DeploymentsWhatIfAtManagementGroupScopeHeaders
    }
  },
  serializer
};

const beginDeleteAtSubscriptionScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateAtSubscriptionScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Deployment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    201: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginValidateAtSubscriptionScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
  urlParameters: [
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Deployment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    202: {},
    400: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginWhatIfAtSubscriptionScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf",
  urlParameters: [
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.DeploymentWhatIf,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.WhatIfOperationResult,
      headersMapper: Mappers.DeploymentsWhatIfAtSubscriptionScopeHeaders
    },
    202: {
      headersMapper: Mappers.DeploymentsWhatIfAtSubscriptionScopeHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.DeploymentsWhatIfAtSubscriptionScopeHeaders
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Deployment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    201: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginValidateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Deployment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    202: {},
    400: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginWhatIfOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.DeploymentWhatIf,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.WhatIfOperationResult,
      headersMapper: Mappers.DeploymentsWhatIfHeaders
    },
    202: {
      headersMapper: Mappers.DeploymentsWhatIfHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError,
      headersMapper: Mappers.DeploymentsWhatIfHeaders
    }
  },
  serializer
};

const listAtScopeNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAtTenantScopeNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAtManagementGroupScopeNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAtSubscriptionScopeNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
