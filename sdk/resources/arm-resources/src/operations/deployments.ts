/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as coreArm from "@azure/core-arm";
import * as Models from "../models";
import * as Mappers from "../models/deploymentsMappers";
import * as Parameters from "../models/parameters";
import { ResourceManagementClientContext } from "../resourceManagementClientContext";

/** Class representing a Deployments. */
export class Deployments {
  private readonly client: ResourceManagementClientContext;

  /**
   * Create a Deployments.
   * @param {ResourceManagementClientContext} client Reference to the service client.
   */
  constructor(client: ResourceManagementClientContext) {
    this.client = client;
  }

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template
   * deployment removes the associated deployment operations. This is an asynchronous operation that
   * returns a status of 202 until the template deployment is successfully deleted. The Location
   * response header contains the URI that is used to obtain the status of the process. While the
   * process is running, a call to the URI in the Location header returns a status of 202. When the
   * process finishes, the URI in the Location header returns a status of 204 on success. If the
   * asynchronous request failed, the URI in the Location header returns an error-level status code.
   * @summary Deletes a deployment from the deployment history.
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  deleteAtManagementGroupScope(groupId: string, deploymentName: string, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse> {
    return this.beginDeleteAtManagementGroupScope(groupId,deploymentName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Checks whether the deployment exists.
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsCheckExistenceAtManagementGroupScopeResponse>
   */
  checkExistenceAtManagementGroupScope(groupId: string, deploymentName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DeploymentsCheckExistenceAtManagementGroupScopeResponse>;
  /**
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  checkExistenceAtManagementGroupScope(groupId: string, deploymentName: string, callback: coreHttp.ServiceCallback<boolean>): void;
  /**
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkExistenceAtManagementGroupScope(groupId: string, deploymentName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<boolean>): void;
  checkExistenceAtManagementGroupScope(groupId: string, deploymentName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<boolean>, callback?: coreHttp.ServiceCallback<boolean>): Promise<Models.DeploymentsCheckExistenceAtManagementGroupScopeResponse> {
    return this.client.sendOperationRequest(
      {
        groupId,
        deploymentName,
        options
      },
      checkExistenceAtManagementGroupScopeOperationSpec,
      callback) as Promise<Models.DeploymentsCheckExistenceAtManagementGroupScopeResponse>;
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   * @summary Deploys resources at management group scope.
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param parameters Additional parameters supplied to the operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsCreateOrUpdateAtManagementGroupScopeResponse>
   */
  createOrUpdateAtManagementGroupScope(groupId: string, deploymentName: string, parameters: Models.Deployment, options?: coreHttp.RequestOptionsBase): Promise<Models.DeploymentsCreateOrUpdateAtManagementGroupScopeResponse> {
    return this.beginCreateOrUpdateAtManagementGroupScope(groupId,deploymentName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DeploymentsCreateOrUpdateAtManagementGroupScopeResponse>;
  }

  /**
   * Gets a deployment.
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsGetAtManagementGroupScopeResponse>
   */
  getAtManagementGroupScope(groupId: string, deploymentName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DeploymentsGetAtManagementGroupScopeResponse>;
  /**
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  getAtManagementGroupScope(groupId: string, deploymentName: string, callback: coreHttp.ServiceCallback<Models.DeploymentExtended>): void;
  /**
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAtManagementGroupScope(groupId: string, deploymentName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.DeploymentExtended>): void;
  getAtManagementGroupScope(groupId: string, deploymentName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeploymentExtended>, callback?: coreHttp.ServiceCallback<Models.DeploymentExtended>): Promise<Models.DeploymentsGetAtManagementGroupScopeResponse> {
    return this.client.sendOperationRequest(
      {
        groupId,
        deploymentName,
        options
      },
      getAtManagementGroupScopeOperationSpec,
      callback) as Promise<Models.DeploymentsGetAtManagementGroupScopeResponse>;
  }

  /**
   * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
   * deployment is canceled, the provisioningState is set to Canceled. Canceling a template
   * deployment stops the currently running template deployment and leaves the resources partially
   * deployed.
   * @summary Cancels a currently running template deployment.
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  cancelAtManagementGroupScope(groupId: string, deploymentName: string, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  cancelAtManagementGroupScope(groupId: string, deploymentName: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  cancelAtManagementGroupScope(groupId: string, deploymentName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  cancelAtManagementGroupScope(groupId: string, deploymentName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        groupId,
        deploymentName,
        options
      },
      cancelAtManagementGroupScopeOperationSpec,
      callback);
  }

  /**
   * Validates whether the specified template is syntactically correct and will be accepted by Azure
   * Resource Manager..
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsValidateAtManagementGroupScopeResponse>
   */
  validateAtManagementGroupScope(groupId: string, deploymentName: string, parameters: Models.Deployment, options?: coreHttp.RequestOptionsBase): Promise<Models.DeploymentsValidateAtManagementGroupScopeResponse>;
  /**
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param callback The callback
   */
  validateAtManagementGroupScope(groupId: string, deploymentName: string, parameters: Models.Deployment, callback: coreHttp.ServiceCallback<Models.DeploymentValidateResult>): void;
  /**
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param options The optional parameters
   * @param callback The callback
   */
  validateAtManagementGroupScope(groupId: string, deploymentName: string, parameters: Models.Deployment, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.DeploymentValidateResult>): void;
  validateAtManagementGroupScope(groupId: string, deploymentName: string, parameters: Models.Deployment, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeploymentValidateResult>, callback?: coreHttp.ServiceCallback<Models.DeploymentValidateResult>): Promise<Models.DeploymentsValidateAtManagementGroupScopeResponse> {
    return this.client.sendOperationRequest(
      {
        groupId,
        deploymentName,
        parameters,
        options
      },
      validateAtManagementGroupScopeOperationSpec,
      callback) as Promise<Models.DeploymentsValidateAtManagementGroupScopeResponse>;
  }

  /**
   * Exports the template used for specified deployment.
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsExportTemplateAtManagementGroupScopeResponse>
   */
  exportTemplateAtManagementGroupScope(groupId: string, deploymentName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DeploymentsExportTemplateAtManagementGroupScopeResponse>;
  /**
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  exportTemplateAtManagementGroupScope(groupId: string, deploymentName: string, callback: coreHttp.ServiceCallback<Models.DeploymentExportResult>): void;
  /**
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  exportTemplateAtManagementGroupScope(groupId: string, deploymentName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.DeploymentExportResult>): void;
  exportTemplateAtManagementGroupScope(groupId: string, deploymentName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeploymentExportResult>, callback?: coreHttp.ServiceCallback<Models.DeploymentExportResult>): Promise<Models.DeploymentsExportTemplateAtManagementGroupScopeResponse> {
    return this.client.sendOperationRequest(
      {
        groupId,
        deploymentName,
        options
      },
      exportTemplateAtManagementGroupScopeOperationSpec,
      callback) as Promise<Models.DeploymentsExportTemplateAtManagementGroupScopeResponse>;
  }

  /**
   * Get all the deployments for a management group.
   * @param groupId The management group ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsListAtManagementGroupScopeResponse>
   */
  listAtManagementGroupScope(groupId: string, options?: Models.DeploymentsListAtManagementGroupScopeOptionalParams): Promise<Models.DeploymentsListAtManagementGroupScopeResponse>;
  /**
   * @param groupId The management group ID.
   * @param callback The callback
   */
  listAtManagementGroupScope(groupId: string, callback: coreHttp.ServiceCallback<Models.DeploymentListResult>): void;
  /**
   * @param groupId The management group ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAtManagementGroupScope(groupId: string, options: Models.DeploymentsListAtManagementGroupScopeOptionalParams, callback: coreHttp.ServiceCallback<Models.DeploymentListResult>): void;
  listAtManagementGroupScope(groupId: string, options?: Models.DeploymentsListAtManagementGroupScopeOptionalParams | coreHttp.ServiceCallback<Models.DeploymentListResult>, callback?: coreHttp.ServiceCallback<Models.DeploymentListResult>): Promise<Models.DeploymentsListAtManagementGroupScopeResponse> {
    return this.client.sendOperationRequest(
      {
        groupId,
        options
      },
      listAtManagementGroupScopeOperationSpec,
      callback) as Promise<Models.DeploymentsListAtManagementGroupScopeResponse>;
  }

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template
   * deployment removes the associated deployment operations. This is an asynchronous operation that
   * returns a status of 202 until the template deployment is successfully deleted. The Location
   * response header contains the URI that is used to obtain the status of the process. While the
   * process is running, a call to the URI in the Location header returns a status of 202. When the
   * process finishes, the URI in the Location header returns a status of 204 on success. If the
   * asynchronous request failed, the URI in the Location header returns an error-level status code.
   * @summary Deletes a deployment from the deployment history.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  deleteAtSubscriptionScope(deploymentName: string, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse> {
    return this.beginDeleteAtSubscriptionScope(deploymentName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Checks whether the deployment exists.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsCheckExistenceAtSubscriptionScopeResponse>
   */
  checkExistenceAtSubscriptionScope(deploymentName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DeploymentsCheckExistenceAtSubscriptionScopeResponse>;
  /**
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  checkExistenceAtSubscriptionScope(deploymentName: string, callback: coreHttp.ServiceCallback<boolean>): void;
  /**
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkExistenceAtSubscriptionScope(deploymentName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<boolean>): void;
  checkExistenceAtSubscriptionScope(deploymentName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<boolean>, callback?: coreHttp.ServiceCallback<boolean>): Promise<Models.DeploymentsCheckExistenceAtSubscriptionScopeResponse> {
    return this.client.sendOperationRequest(
      {
        deploymentName,
        options
      },
      checkExistenceAtSubscriptionScopeOperationSpec,
      callback) as Promise<Models.DeploymentsCheckExistenceAtSubscriptionScopeResponse>;
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   * @summary Deploys resources at subscription scope.
   * @param deploymentName The name of the deployment.
   * @param parameters Additional parameters supplied to the operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsCreateOrUpdateAtSubscriptionScopeResponse>
   */
  createOrUpdateAtSubscriptionScope(deploymentName: string, parameters: Models.Deployment, options?: coreHttp.RequestOptionsBase): Promise<Models.DeploymentsCreateOrUpdateAtSubscriptionScopeResponse> {
    return this.beginCreateOrUpdateAtSubscriptionScope(deploymentName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DeploymentsCreateOrUpdateAtSubscriptionScopeResponse>;
  }

  /**
   * Gets a deployment.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsGetAtSubscriptionScopeResponse>
   */
  getAtSubscriptionScope(deploymentName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DeploymentsGetAtSubscriptionScopeResponse>;
  /**
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  getAtSubscriptionScope(deploymentName: string, callback: coreHttp.ServiceCallback<Models.DeploymentExtended>): void;
  /**
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAtSubscriptionScope(deploymentName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.DeploymentExtended>): void;
  getAtSubscriptionScope(deploymentName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeploymentExtended>, callback?: coreHttp.ServiceCallback<Models.DeploymentExtended>): Promise<Models.DeploymentsGetAtSubscriptionScopeResponse> {
    return this.client.sendOperationRequest(
      {
        deploymentName,
        options
      },
      getAtSubscriptionScopeOperationSpec,
      callback) as Promise<Models.DeploymentsGetAtSubscriptionScopeResponse>;
  }

  /**
   * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
   * deployment is canceled, the provisioningState is set to Canceled. Canceling a template
   * deployment stops the currently running template deployment and leaves the resources partially
   * deployed.
   * @summary Cancels a currently running template deployment.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  cancelAtSubscriptionScope(deploymentName: string, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  cancelAtSubscriptionScope(deploymentName: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  cancelAtSubscriptionScope(deploymentName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  cancelAtSubscriptionScope(deploymentName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        deploymentName,
        options
      },
      cancelAtSubscriptionScopeOperationSpec,
      callback);
  }

  /**
   * Validates whether the specified template is syntactically correct and will be accepted by Azure
   * Resource Manager..
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsValidateAtSubscriptionScopeResponse>
   */
  validateAtSubscriptionScope(deploymentName: string, parameters: Models.Deployment, options?: coreHttp.RequestOptionsBase): Promise<Models.DeploymentsValidateAtSubscriptionScopeResponse>;
  /**
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param callback The callback
   */
  validateAtSubscriptionScope(deploymentName: string, parameters: Models.Deployment, callback: coreHttp.ServiceCallback<Models.DeploymentValidateResult>): void;
  /**
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param options The optional parameters
   * @param callback The callback
   */
  validateAtSubscriptionScope(deploymentName: string, parameters: Models.Deployment, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.DeploymentValidateResult>): void;
  validateAtSubscriptionScope(deploymentName: string, parameters: Models.Deployment, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeploymentValidateResult>, callback?: coreHttp.ServiceCallback<Models.DeploymentValidateResult>): Promise<Models.DeploymentsValidateAtSubscriptionScopeResponse> {
    return this.client.sendOperationRequest(
      {
        deploymentName,
        parameters,
        options
      },
      validateAtSubscriptionScopeOperationSpec,
      callback) as Promise<Models.DeploymentsValidateAtSubscriptionScopeResponse>;
  }

  /**
   * Exports the template used for specified deployment.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsExportTemplateAtSubscriptionScopeResponse>
   */
  exportTemplateAtSubscriptionScope(deploymentName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DeploymentsExportTemplateAtSubscriptionScopeResponse>;
  /**
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  exportTemplateAtSubscriptionScope(deploymentName: string, callback: coreHttp.ServiceCallback<Models.DeploymentExportResult>): void;
  /**
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  exportTemplateAtSubscriptionScope(deploymentName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.DeploymentExportResult>): void;
  exportTemplateAtSubscriptionScope(deploymentName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeploymentExportResult>, callback?: coreHttp.ServiceCallback<Models.DeploymentExportResult>): Promise<Models.DeploymentsExportTemplateAtSubscriptionScopeResponse> {
    return this.client.sendOperationRequest(
      {
        deploymentName,
        options
      },
      exportTemplateAtSubscriptionScopeOperationSpec,
      callback) as Promise<Models.DeploymentsExportTemplateAtSubscriptionScopeResponse>;
  }

  /**
   * Get all the deployments for a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsListAtSubscriptionScopeResponse>
   */
  listAtSubscriptionScope(options?: Models.DeploymentsListAtSubscriptionScopeOptionalParams): Promise<Models.DeploymentsListAtSubscriptionScopeResponse>;
  /**
   * @param callback The callback
   */
  listAtSubscriptionScope(callback: coreHttp.ServiceCallback<Models.DeploymentListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAtSubscriptionScope(options: Models.DeploymentsListAtSubscriptionScopeOptionalParams, callback: coreHttp.ServiceCallback<Models.DeploymentListResult>): void;
  listAtSubscriptionScope(options?: Models.DeploymentsListAtSubscriptionScopeOptionalParams | coreHttp.ServiceCallback<Models.DeploymentListResult>, callback?: coreHttp.ServiceCallback<Models.DeploymentListResult>): Promise<Models.DeploymentsListAtSubscriptionScopeResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listAtSubscriptionScopeOperationSpec,
      callback) as Promise<Models.DeploymentsListAtSubscriptionScopeResponse>;
  }

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template
   * deployment removes the associated deployment operations. Deleting a template deployment does not
   * affect the state of the resource group. This is an asynchronous operation that returns a status
   * of 202 until the template deployment is successfully deleted. The Location response header
   * contains the URI that is used to obtain the status of the process. While the process is running,
   * a call to the URI in the Location header returns a status of 202. When the process finishes, the
   * URI in the Location header returns a status of 204 on success. If the asynchronous request
   * failed, the URI in the Location header returns an error-level status code.
   * @summary Deletes a deployment from the deployment history.
   * @param resourceGroupName The name of the resource group with the deployment to delete. The name
   * is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  deleteMethod(resourceGroupName: string, deploymentName: string, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,deploymentName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Checks whether the deployment exists.
   * @param resourceGroupName The name of the resource group with the deployment to check. The name
   * is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsCheckExistenceResponse>
   */
  checkExistence(resourceGroupName: string, deploymentName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DeploymentsCheckExistenceResponse>;
  /**
   * @param resourceGroupName The name of the resource group with the deployment to check. The name
   * is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  checkExistence(resourceGroupName: string, deploymentName: string, callback: coreHttp.ServiceCallback<boolean>): void;
  /**
   * @param resourceGroupName The name of the resource group with the deployment to check. The name
   * is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkExistence(resourceGroupName: string, deploymentName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<boolean>): void;
  checkExistence(resourceGroupName: string, deploymentName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<boolean>, callback?: coreHttp.ServiceCallback<boolean>): Promise<Models.DeploymentsCheckExistenceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        deploymentName,
        options
      },
      checkExistenceOperationSpec,
      callback) as Promise<Models.DeploymentsCheckExistenceResponse>;
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   * @summary Deploys resources to a resource group.
   * @param resourceGroupName The name of the resource group to deploy the resources to. The name is
   * case insensitive. The resource group must already exist.
   * @param deploymentName The name of the deployment.
   * @param parameters Additional parameters supplied to the operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, options?: coreHttp.RequestOptionsBase): Promise<Models.DeploymentsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,deploymentName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DeploymentsCreateOrUpdateResponse>;
  }

  /**
   * Gets a deployment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsGetResponse>
   */
  get(resourceGroupName: string, deploymentName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DeploymentsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  get(resourceGroupName: string, deploymentName: string, callback: coreHttp.ServiceCallback<Models.DeploymentExtended>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, deploymentName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.DeploymentExtended>): void;
  get(resourceGroupName: string, deploymentName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeploymentExtended>, callback?: coreHttp.ServiceCallback<Models.DeploymentExtended>): Promise<Models.DeploymentsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        deploymentName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.DeploymentsGetResponse>;
  }

  /**
   * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
   * deployment is canceled, the provisioningState is set to Canceled. Canceling a template
   * deployment stops the currently running template deployment and leaves the resource group
   * partially deployed.
   * @summary Cancels a currently running template deployment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  cancel(resourceGroupName: string, deploymentName: string, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  cancel(resourceGroupName: string, deploymentName: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  cancel(resourceGroupName: string, deploymentName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  cancel(resourceGroupName: string, deploymentName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        deploymentName,
        options
      },
      cancelOperationSpec,
      callback);
  }

  /**
   * Validates whether the specified template is syntactically correct and will be accepted by Azure
   * Resource Manager..
   * @param resourceGroupName The name of the resource group the template will be deployed to. The
   * name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsValidateResponse>
   */
  validate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, options?: coreHttp.RequestOptionsBase): Promise<Models.DeploymentsValidateResponse>;
  /**
   * @param resourceGroupName The name of the resource group the template will be deployed to. The
   * name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param callback The callback
   */
  validate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, callback: coreHttp.ServiceCallback<Models.DeploymentValidateResult>): void;
  /**
   * @param resourceGroupName The name of the resource group the template will be deployed to. The
   * name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param parameters Parameters to validate.
   * @param options The optional parameters
   * @param callback The callback
   */
  validate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.DeploymentValidateResult>): void;
  validate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeploymentValidateResult>, callback?: coreHttp.ServiceCallback<Models.DeploymentValidateResult>): Promise<Models.DeploymentsValidateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        deploymentName,
        parameters,
        options
      },
      validateOperationSpec,
      callback) as Promise<Models.DeploymentsValidateResponse>;
  }

  /**
   * Exports the template used for specified deployment.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsExportTemplateResponse>
   */
  exportTemplate(resourceGroupName: string, deploymentName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DeploymentsExportTemplateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param callback The callback
   */
  exportTemplate(resourceGroupName: string, deploymentName: string, callback: coreHttp.ServiceCallback<Models.DeploymentExportResult>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param options The optional parameters
   * @param callback The callback
   */
  exportTemplate(resourceGroupName: string, deploymentName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.DeploymentExportResult>): void;
  exportTemplate(resourceGroupName: string, deploymentName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeploymentExportResult>, callback?: coreHttp.ServiceCallback<Models.DeploymentExportResult>): Promise<Models.DeploymentsExportTemplateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        deploymentName,
        options
      },
      exportTemplateOperationSpec,
      callback) as Promise<Models.DeploymentsExportTemplateResponse>;
  }

  /**
   * Get all the deployments for a resource group.
   * @param resourceGroupName The name of the resource group with the deployments to get. The name is
   * case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: Models.DeploymentsListByResourceGroupOptionalParams): Promise<Models.DeploymentsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group with the deployments to get. The name is
   * case insensitive.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: coreHttp.ServiceCallback<Models.DeploymentListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group with the deployments to get. The name is
   * case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: Models.DeploymentsListByResourceGroupOptionalParams, callback: coreHttp.ServiceCallback<Models.DeploymentListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: Models.DeploymentsListByResourceGroupOptionalParams | coreHttp.ServiceCallback<Models.DeploymentListResult>, callback?: coreHttp.ServiceCallback<Models.DeploymentListResult>): Promise<Models.DeploymentsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.DeploymentsListByResourceGroupResponse>;
  }

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template
   * deployment removes the associated deployment operations. This is an asynchronous operation that
   * returns a status of 202 until the template deployment is successfully deleted. The Location
   * response header contains the URI that is used to obtain the status of the process. While the
   * process is running, a call to the URI in the Location header returns a status of 202. When the
   * process finishes, the URI in the Location header returns a status of 204 on success. If the
   * asynchronous request failed, the URI in the Location header returns an error-level status code.
   * @summary Deletes a deployment from the deployment history.
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginDeleteAtManagementGroupScope(groupId: string, deploymentName: string, options?: coreHttp.RequestOptionsBase): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        groupId,
        deploymentName,
        options
      },
      beginDeleteAtManagementGroupScopeOperationSpec,
      options);
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   * @summary Deploys resources at management group scope.
   * @param groupId The management group ID.
   * @param deploymentName The name of the deployment.
   * @param parameters Additional parameters supplied to the operation.
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginCreateOrUpdateAtManagementGroupScope(groupId: string, deploymentName: string, parameters: Models.Deployment, options?: coreHttp.RequestOptionsBase): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        groupId,
        deploymentName,
        parameters,
        options
      },
      beginCreateOrUpdateAtManagementGroupScopeOperationSpec,
      options);
  }

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template
   * deployment removes the associated deployment operations. This is an asynchronous operation that
   * returns a status of 202 until the template deployment is successfully deleted. The Location
   * response header contains the URI that is used to obtain the status of the process. While the
   * process is running, a call to the URI in the Location header returns a status of 202. When the
   * process finishes, the URI in the Location header returns a status of 204 on success. If the
   * asynchronous request failed, the URI in the Location header returns an error-level status code.
   * @summary Deletes a deployment from the deployment history.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginDeleteAtSubscriptionScope(deploymentName: string, options?: coreHttp.RequestOptionsBase): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        deploymentName,
        options
      },
      beginDeleteAtSubscriptionScopeOperationSpec,
      options);
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   * @summary Deploys resources at subscription scope.
   * @param deploymentName The name of the deployment.
   * @param parameters Additional parameters supplied to the operation.
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginCreateOrUpdateAtSubscriptionScope(deploymentName: string, parameters: Models.Deployment, options?: coreHttp.RequestOptionsBase): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        deploymentName,
        parameters,
        options
      },
      beginCreateOrUpdateAtSubscriptionScopeOperationSpec,
      options);
  }

  /**
   * A template deployment that is currently running cannot be deleted. Deleting a template
   * deployment removes the associated deployment operations. Deleting a template deployment does not
   * affect the state of the resource group. This is an asynchronous operation that returns a status
   * of 202 until the template deployment is successfully deleted. The Location response header
   * contains the URI that is used to obtain the status of the process. While the process is running,
   * a call to the URI in the Location header returns a status of 202. When the process finishes, the
   * URI in the Location header returns a status of 204 on success. If the asynchronous request
   * failed, the URI in the Location header returns an error-level status code.
   * @summary Deletes a deployment from the deployment history.
   * @param resourceGroupName The name of the resource group with the deployment to delete. The name
   * is case insensitive.
   * @param deploymentName The name of the deployment.
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, deploymentName: string, options?: coreHttp.RequestOptionsBase): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        deploymentName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * You can provide the template and parameters directly in the request or link to JSON files.
   * @summary Deploys resources to a resource group.
   * @param resourceGroupName The name of the resource group to deploy the resources to. The name is
   * case insensitive. The resource group must already exist.
   * @param deploymentName The name of the deployment.
   * @param parameters Additional parameters supplied to the operation.
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, options?: coreHttp.RequestOptionsBase): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        deploymentName,
        parameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Get all the deployments for a management group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsListAtManagementGroupScopeNextResponse>
   */
  listAtManagementGroupScopeNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DeploymentsListAtManagementGroupScopeNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listAtManagementGroupScopeNext(nextPageLink: string, callback: coreHttp.ServiceCallback<Models.DeploymentListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAtManagementGroupScopeNext(nextPageLink: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.DeploymentListResult>): void;
  listAtManagementGroupScopeNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeploymentListResult>, callback?: coreHttp.ServiceCallback<Models.DeploymentListResult>): Promise<Models.DeploymentsListAtManagementGroupScopeNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listAtManagementGroupScopeNextOperationSpec,
      callback) as Promise<Models.DeploymentsListAtManagementGroupScopeNextResponse>;
  }

  /**
   * Get all the deployments for a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsListAtSubscriptionScopeNextResponse>
   */
  listAtSubscriptionScopeNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DeploymentsListAtSubscriptionScopeNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listAtSubscriptionScopeNext(nextPageLink: string, callback: coreHttp.ServiceCallback<Models.DeploymentListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAtSubscriptionScopeNext(nextPageLink: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.DeploymentListResult>): void;
  listAtSubscriptionScopeNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeploymentListResult>, callback?: coreHttp.ServiceCallback<Models.DeploymentListResult>): Promise<Models.DeploymentsListAtSubscriptionScopeNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listAtSubscriptionScopeNextOperationSpec,
      callback) as Promise<Models.DeploymentsListAtSubscriptionScopeNextResponse>;
  }

  /**
   * Get all the deployments for a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeploymentsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DeploymentsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: coreHttp.ServiceCallback<Models.DeploymentListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.DeploymentListResult>): void;
  listByResourceGroupNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeploymentListResult>, callback?: coreHttp.ServiceCallback<Models.DeploymentListResult>): Promise<Models.DeploymentsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.DeploymentsListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const checkExistenceAtManagementGroupScopeOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "HEAD",
  path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.groupId,
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAtManagementGroupScopeOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.groupId,
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const cancelAtManagementGroupScopeOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
  urlParameters: [
    Parameters.groupId,
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const validateAtManagementGroupScopeOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
  urlParameters: [
    Parameters.groupId,
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Deployment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    400: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const exportTemplateAtManagementGroupScopeOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
  urlParameters: [
    Parameters.groupId,
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExportResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAtManagementGroupScopeOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/",
  urlParameters: [
    Parameters.groupId
  ],
  queryParameters: [
    Parameters.filter,
    Parameters.top,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const checkExistenceAtSubscriptionScopeOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "HEAD",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAtSubscriptionScopeOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const cancelAtSubscriptionScopeOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
  urlParameters: [
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const validateAtSubscriptionScopeOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
  urlParameters: [
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Deployment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    400: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const exportTemplateAtSubscriptionScopeOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
  urlParameters: [
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExportResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAtSubscriptionScopeOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.filter,
    Parameters.top,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const checkExistenceOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "HEAD",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const cancelOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const validateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Deployment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    400: {
      bodyMapper: Mappers.DeploymentValidateResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const exportTemplateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExportResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.filter,
    Parameters.top,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteAtManagementGroupScopeOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.groupId,
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateAtManagementGroupScopeOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.groupId,
    Parameters.deploymentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Deployment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    201: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteAtSubscriptionScopeOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateAtSubscriptionScopeOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Deployment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    201: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.deploymentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Deployment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentExtended
    },
    201: {
      bodyMapper: Mappers.DeploymentExtended
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAtManagementGroupScopeNextOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAtSubscriptionScopeNextOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
