/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Result of the request to list Microsoft.Resources operations. It contains a list of operations and a URL link to get the next set of results. */
export interface OperationListResult {
  /** List of Microsoft.Resources operations. */
  value?: Operation[];
  /** URL to get the next set of operation list results if there are any. */
  nextLink?: string;
}

/** Microsoft.Resources operation */
export interface Operation {
  /** Operation name: {provider}/{resource}/{operation} */
  name?: string;
  /** The object that represents the operation. */
  display?: OperationDisplay;
}

/** The object that represents the operation. */
export interface OperationDisplay {
  /** Service provider: Microsoft.Resources */
  provider?: string;
  /** Resource on which the operation is performed: Profile, endpoint, etc. */
  resource?: string;
  /** Operation type: Read, write, delete, etc. */
  operation?: string;
  /** Description of the operation. */
  description?: string;
}

/** An error response for a resource management request. */
export interface CloudError {
  /** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.) */
  error?: ErrorResponse;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.) */
export interface ErrorResponse {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorResponse[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** Resource provider information. */
export interface Provider {
  /**
   * The provider ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** The namespace of the resource provider. */
  namespace?: string;
  /**
   * The registration state of the resource provider.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly registrationState?: string;
  /**
   * The registration policy of the resource provider.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly registrationPolicy?: string;
  /**
   * The collection of provider resource types.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceTypes?: ProviderResourceType[];
  /** The provider authorization consent state. */
  providerAuthorizationConsentState?: ProviderAuthorizationConsentState;
}

/** Resource type managed by the resource provider. */
export interface ProviderResourceType {
  /** The resource type. */
  resourceType?: string;
  /** The collection of locations where this resource type can be created. */
  locations?: string[];
  /** The location mappings that are supported by this resource type. */
  locationMappings?: ProviderExtendedLocation[];
  /** The aliases that are supported by this resource type. */
  aliases?: Alias[];
  /** The API version. */
  apiVersions?: string[];
  /**
   * The default API version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly defaultApiVersion?: string;
  zoneMappings?: ZoneMapping[];
  /**
   * The API profiles for the resource provider.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly apiProfiles?: ApiProfile[];
  /** The additional capabilities offered by this resource type. */
  capabilities?: string;
  /** The properties. */
  properties?: { [propertyName: string]: string };
}

/** The provider extended location. */
export interface ProviderExtendedLocation {
  /** The azure location. */
  location?: string;
  /** The extended location type. */
  type?: string;
  /** The extended locations for the azure location. */
  extendedLocations?: string[];
}

/** The alias type. */
export interface Alias {
  /** The alias name. */
  name?: string;
  /** The paths for an alias. */
  paths?: AliasPath[];
  /** The type of the alias. */
  type?: AliasType;
  /** The default path for an alias. */
  defaultPath?: string;
  /** The default pattern for an alias. */
  defaultPattern?: AliasPattern;
  /**
   * The default alias path metadata. Applies to the default path and to any alias path that doesn't have metadata
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly defaultMetadata?: AliasPathMetadata;
}

/** The type of the paths for alias. */
export interface AliasPath {
  /** The path of an alias. */
  path?: string;
  /** The API versions. */
  apiVersions?: string[];
  /** The pattern for an alias path. */
  pattern?: AliasPattern;
  /**
   * The metadata of the alias path. If missing, fall back to the default metadata of the alias.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly metadata?: AliasPathMetadata;
}

/** The type of the pattern for an alias path. */
export interface AliasPattern {
  /** The alias pattern phrase. */
  phrase?: string;
  /** The alias pattern variable. */
  variable?: string;
  /** The type of alias pattern */
  type?: AliasPatternType;
}

export interface AliasPathMetadata {
  /**
   * The type of the token that the alias path is referring to.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: AliasPathTokenType;
  /**
   * The attributes of the token that the alias path is referring to.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly attributes?: AliasPathAttributes;
}

export interface ZoneMapping {
  /** The location of the zone mapping. */
  location?: string;
  zones?: string[];
}

export interface ApiProfile {
  /**
   * The profile version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly profileVersion?: string;
  /**
   * The API version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly apiVersion?: string;
}

/** List of provider permissions. */
export interface ProviderPermissionListResult {
  /** An array of provider permissions. */
  value?: ProviderPermission[];
  /**
   * The URL to use for getting the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The provider permission */
export interface ProviderPermission {
  /** The application id. */
  applicationId?: string;
  /** Role definition properties. */
  roleDefinition?: RoleDefinition;
  /** Role definition properties. */
  managedByRoleDefinition?: RoleDefinition;
  /** The provider authorization consent state. */
  providerAuthorizationConsentState?: ProviderAuthorizationConsentState;
}

/** Role definition properties. */
export interface RoleDefinition {
  /** The role definition ID. */
  id?: string;
  /** The role definition name. */
  name?: string;
  /** If this is a service role. */
  isServiceRole?: boolean;
  /** Role definition permissions. */
  permissions?: Permission[];
  /** Role definition assignable scopes. */
  scopes?: string[];
}

/** Role definition permissions. */
export interface Permission {
  /** Allowed actions. */
  actions?: string[];
  /** Denied actions. */
  notActions?: string[];
  /** Allowed Data actions. */
  dataActions?: string[];
  /** Denied Data actions. */
  notDataActions?: string[];
}

/** The provider registration definition. */
export interface ProviderRegistrationRequest {
  /** The provider consent. */
  thirdPartyProviderConsent?: ProviderConsentDefinition;
}

/** The provider consent. */
export interface ProviderConsentDefinition {
  /** A value indicating whether authorization is consented or not. */
  consentToAuthorization?: boolean;
}

/** List of resource providers. */
export interface ProviderListResult {
  /** An array of resource providers. */
  value?: Provider[];
  /**
   * The URL to use for getting the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** List of resource types of a resource provider. */
export interface ProviderResourceTypeListResult {
  /** An array of resource types. */
  value?: ProviderResourceType[];
  /**
   * The URL to use for getting the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** List of resource groups. */
export interface ResourceListResult {
  /** An array of resources. */
  value?: GenericResourceExpanded[];
  /**
   * The URL to use for getting the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Plan for the resource. */
export interface Plan {
  /** The plan ID. */
  name?: string;
  /** The publisher ID. */
  publisher?: string;
  /** The offer ID. */
  product?: string;
  /** The promotion code. */
  promotionCode?: string;
  /** The plan's version. */
  version?: string;
}

/** SKU for the resource. */
export interface Sku {
  /** The SKU name. */
  name?: string;
  /** The SKU tier. */
  tier?: string;
  /** The SKU size. */
  size?: string;
  /** The SKU family. */
  family?: string;
  /** The SKU model. */
  model?: string;
  /** The SKU capacity. */
  capacity?: number;
}

/** Identity for the resource. */
export interface Identity {
  /**
   * The principal ID of resource identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** The identity type. */
  type?: ResourceIdentityType;
  /** The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'. */
  userAssignedIdentities?: {
    [propertyName: string]: IdentityUserAssignedIdentitiesValue;
  };
}

export interface IdentityUserAssignedIdentitiesValue {
  /**
   * The principal id of user assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client id of user assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** Specified resource. */
export interface Resource {
  /**
   * Resource ID
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Resource location */
  location?: string;
  /** Resource extended location. */
  extendedLocation?: ExtendedLocation;
  /** Resource tags */
  tags?: { [propertyName: string]: string };
}

/** Resource extended location. */
export interface ExtendedLocation {
  /** The extended location type. */
  type?: ExtendedLocationType;
  /** The extended location name. */
  name?: string;
}

/** Resource group information. */
export interface ResourceGroup {
  /**
   * The ID of the resource group.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource group.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource group.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The resource group properties. */
  properties?: ResourceGroupProperties;
  /** The location of the resource group. It cannot be changed after the resource group has been created. It must be one of the supported Azure locations. */
  location: string;
  /** The ID of the resource that manages this resource group. */
  managedBy?: string;
  /** The tags attached to the resource group. */
  tags?: { [propertyName: string]: string };
}

/** The resource group properties. */
export interface ResourceGroupProperties {
  /**
   * The provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** Resource group information. */
export interface ResourceGroupPatchable {
  /** The name of the resource group. */
  name?: string;
  /** The resource group properties. */
  properties?: ResourceGroupProperties;
  /** The ID of the resource that manages this resource group. */
  managedBy?: string;
  /** The tags attached to the resource group. */
  tags?: { [propertyName: string]: string };
}

/** Export resource group template request parameters. */
export interface ExportTemplateRequest {
  /** The IDs of the resources to filter the export by. To export all resources, supply an array with single entry '*'. */
  resources?: string[];
  /** The export template options. A CSV-formatted list containing zero or more of the following: 'IncludeParameterDefaultValue', 'IncludeComments', 'SkipResourceNameParameterization', 'SkipAllParameterization' */
  options?: string;
  /** The output format for the exported resources. */
  outputFormat?: ExportTemplateOutputFormat;
}

/** Resource group export result. */
export interface ResourceGroupExportResult {
  /** The template content. Used if outputFormat is empty or set to 'Json'. */
  template?: Record<string, unknown>;
  /** The formatted export content. Used if outputFormat is set to 'Bicep'. */
  output?: string;
  /** The template export error. */
  error?: ErrorResponse;
}

/** List of resource groups. */
export interface ResourceGroupListResult {
  /** An array of resource groups. */
  value?: ResourceGroup[];
  /**
   * The URL to use for getting the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Parameters of move resources. */
export interface ResourcesMoveInfo {
  /** The IDs of the resources. */
  resources?: string[];
  /** The target resource group. */
  targetResourceGroup?: string;
}

/** Tag information. */
export interface TagValue {
  /**
   * The tag value ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** The tag value. */
  tagValue?: string;
  /** The tag value count. */
  count?: TagCount;
}

/** Tag count. */
export interface TagCount {
  /** Type of count. */
  type?: string;
  /** Value of count. */
  value?: number;
}

/** Tag details. */
export interface TagDetails {
  /**
   * The tag name ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** The tag name. */
  tagName?: string;
  /** The total number of resources that use the resource tag. When a tag is initially created and has no associated resources, the value is 0. */
  count?: TagCount;
  /** The list of tag values. */
  values?: TagValue[];
}

/** List of subscription tags. */
export interface TagsListResult {
  /** An array of tags. */
  value?: TagDetails[];
  /**
   * The URL to use for getting the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Wrapper resource for tags API requests and responses. */
export interface TagsResource {
  /**
   * The ID of the tags wrapper resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the tags wrapper resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the tags wrapper resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The set of tags. */
  properties: Tags;
}

/** A dictionary of name and value pairs. */
export interface Tags {
  /** Dictionary of <string> */
  tags?: { [propertyName: string]: string };
}

/** Wrapper resource for tags patch API request only. */
export interface TagsPatchResource {
  /** The operation type for the patch API. */
  operation?: TagsPatchOperation;
  /** The set of tags. */
  properties?: Tags;
}

/** Resource filter. */
export interface GenericResourceFilter {
  /** The resource type. */
  resourceType?: string;
  /** The tag name. */
  tagname?: string;
  /** The tag value. */
  tagvalue?: string;
}

/** Resource group filter. */
export interface ResourceGroupFilter {
  /** The tag name. */
  tagName?: string;
  /** The tag value. */
  tagValue?: string;
}

/** Resource provider operation's display properties. */
export interface ResourceProviderOperationDisplayProperties {
  /** Operation description. */
  publisher?: string;
  /** Operation provider. */
  provider?: string;
  /** Operation resource. */
  resource?: string;
  /** Resource provider operation. */
  operation?: string;
  /** Operation description. */
  description?: string;
}

/** Sub-resource. */
export interface SubResource {
  /** Resource ID */
  id?: string;
}

/** Resource information. */
export interface GenericResource extends Resource {
  /** The plan of the resource. */
  plan?: Plan;
  /** The resource properties. */
  properties?: Record<string, unknown>;
  /** The kind of the resource. */
  kind?: string;
  /** ID of the resource that manages this resource. */
  managedBy?: string;
  /** The SKU of the resource. */
  sku?: Sku;
  /** The identity of the resource. */
  identity?: Identity;
}

/** Resource information. */
export interface GenericResourceExpanded extends GenericResource {
  /**
   * The created time of the resource. This is only present if requested via the $expand query parameter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdTime?: Date;
  /**
   * The changed time of the resource. This is only present if requested via the $expand query parameter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly changedTime?: Date;
  /**
   * The provisioning state of the resource. This is only present if requested via the $expand query parameter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** Defines headers for ResourceGroups_delete operation. */
export interface ResourceGroupsDeleteHeaders {
  /** URL to get status of this long-running operation. */
  location?: string;
}

/** Defines headers for Tags_createOrUpdateAtScope operation. */
export interface TagsCreateOrUpdateAtScopeHeaders {
  /** URL to get status of this long-running operation. */
  location?: string;
}

/** Defines headers for Tags_updateAtScope operation. */
export interface TagsUpdateAtScopeHeaders {
  /** URL to get status of this long-running operation. */
  location?: string;
}

/** Defines headers for Tags_deleteAtScope operation. */
export interface TagsDeleteAtScopeHeaders {
  /** URL to get status of this long-running operation. */
  location?: string;
}

/** Known values of {@link AliasPathTokenType} that the service accepts. */
export enum KnownAliasPathTokenType {
  /** The token type is not specified. */
  NotSpecified = "NotSpecified",
  /** The token type can be anything. */
  Any = "Any",
  /** The token type is string. */
  String = "String",
  /** The token type is object. */
  Object = "Object",
  /** The token type is array. */
  Array = "Array",
  /** The token type is integer. */
  Integer = "Integer",
  /** The token type is number. */
  Number = "Number",
  /** The token type is boolean. */
  Boolean = "Boolean",
}

/**
 * Defines values for AliasPathTokenType. \
 * {@link KnownAliasPathTokenType} can be used interchangeably with AliasPathTokenType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified**: The token type is not specified. \
 * **Any**: The token type can be anything. \
 * **String**: The token type is string. \
 * **Object**: The token type is object. \
 * **Array**: The token type is array. \
 * **Integer**: The token type is integer. \
 * **Number**: The token type is number. \
 * **Boolean**: The token type is boolean.
 */
export type AliasPathTokenType = string;

/** Known values of {@link AliasPathAttributes} that the service accepts. */
export enum KnownAliasPathAttributes {
  /** The token that the alias path is referring to has no attributes. */
  None = "None",
  /** The token that the alias path is referring to is modifiable by policies with 'modify' effect. */
  Modifiable = "Modifiable",
}

/**
 * Defines values for AliasPathAttributes. \
 * {@link KnownAliasPathAttributes} can be used interchangeably with AliasPathAttributes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: The token that the alias path is referring to has no attributes. \
 * **Modifiable**: The token that the alias path is referring to is modifiable by policies with 'modify' effect.
 */
export type AliasPathAttributes = string;

/** Known values of {@link ProviderAuthorizationConsentState} that the service accepts. */
export enum KnownProviderAuthorizationConsentState {
  /** NotSpecified */
  NotSpecified = "NotSpecified",
  /** Required */
  Required = "Required",
  /** NotRequired */
  NotRequired = "NotRequired",
  /** Consented */
  Consented = "Consented",
}

/**
 * Defines values for ProviderAuthorizationConsentState. \
 * {@link KnownProviderAuthorizationConsentState} can be used interchangeably with ProviderAuthorizationConsentState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Required** \
 * **NotRequired** \
 * **Consented**
 */
export type ProviderAuthorizationConsentState = string;

/** Known values of {@link ExtendedLocationType} that the service accepts. */
export enum KnownExtendedLocationType {
  /** EdgeZone */
  EdgeZone = "EdgeZone",
}

/**
 * Defines values for ExtendedLocationType. \
 * {@link KnownExtendedLocationType} can be used interchangeably with ExtendedLocationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EdgeZone**
 */
export type ExtendedLocationType = string;

/** Known values of {@link ExportTemplateOutputFormat} that the service accepts. */
export enum KnownExportTemplateOutputFormat {
  /** Json */
  Json = "Json",
  /** Bicep */
  Bicep = "Bicep",
}

/**
 * Defines values for ExportTemplateOutputFormat. \
 * {@link KnownExportTemplateOutputFormat} can be used interchangeably with ExportTemplateOutputFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Json** \
 * **Bicep**
 */
export type ExportTemplateOutputFormat = string;

/** Known values of {@link TagsPatchOperation} that the service accepts. */
export enum KnownTagsPatchOperation {
  /** The 'replace' option replaces the entire set of existing tags with a new set. */
  Replace = "Replace",
  /** The 'merge' option allows adding tags with new names and updating the values of tags with existing names. */
  Merge = "Merge",
  /** The 'delete' option allows selectively deleting tags based on given names or name\/value pairs. */
  Delete = "Delete",
}

/**
 * Defines values for TagsPatchOperation. \
 * {@link KnownTagsPatchOperation} can be used interchangeably with TagsPatchOperation,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Replace**: The 'replace' option replaces the entire set of existing tags with a new set. \
 * **Merge**: The 'merge' option allows adding tags with new names and updating the values of tags with existing names. \
 * **Delete**: The 'delete' option allows selectively deleting tags based on given names or name\/value pairs.
 */
export type TagsPatchOperation = string;
/** Defines values for AliasPatternType. */
export type AliasPatternType = "NotSpecified" | "Extract";
/** Defines values for AliasType. */
export type AliasType = "NotSpecified" | "PlainText" | "Mask";
/** Defines values for ResourceIdentityType. */
export type ResourceIdentityType =
  | "SystemAssigned"
  | "UserAssigned"
  | "SystemAssigned, UserAssigned"
  | "None";

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface ProvidersUnregisterOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the unregister operation. */
export type ProvidersUnregisterResponse = Provider;

/** Optional parameters. */
export interface ProvidersRegisterAtManagementGroupScopeOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ProvidersProviderPermissionsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the providerPermissions operation. */
export type ProvidersProviderPermissionsResponse = ProviderPermissionListResult;

/** Optional parameters. */
export interface ProvidersRegisterOptionalParams
  extends coreClient.OperationOptions {
  /** The third party consent for S2S. */
  properties?: ProviderRegistrationRequest;
}

/** Contains response data for the register operation. */
export type ProvidersRegisterResponse = Provider;

/** Optional parameters. */
export interface ProvidersListOptionalParams
  extends coreClient.OperationOptions {
  /** The properties to include in the results. For example, use &$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. */
  expand?: string;
}

/** Contains response data for the list operation. */
export type ProvidersListResponse = ProviderListResult;

/** Optional parameters. */
export interface ProvidersListAtTenantScopeOptionalParams
  extends coreClient.OperationOptions {
  /** The properties to include in the results. For example, use &$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. */
  expand?: string;
}

/** Contains response data for the listAtTenantScope operation. */
export type ProvidersListAtTenantScopeResponse = ProviderListResult;

/** Optional parameters. */
export interface ProvidersGetOptionalParams
  extends coreClient.OperationOptions {
  /** The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. */
  expand?: string;
}

/** Contains response data for the get operation. */
export type ProvidersGetResponse = Provider;

/** Optional parameters. */
export interface ProvidersGetAtTenantScopeOptionalParams
  extends coreClient.OperationOptions {
  /** The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. */
  expand?: string;
}

/** Contains response data for the getAtTenantScope operation. */
export type ProvidersGetAtTenantScopeResponse = Provider;

/** Optional parameters. */
export interface ProvidersListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ProvidersListNextResponse = ProviderListResult;

/** Optional parameters. */
export interface ProvidersListAtTenantScopeNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listAtTenantScopeNext operation. */
export type ProvidersListAtTenantScopeNextResponse = ProviderListResult;

/** Optional parameters. */
export interface ProviderResourceTypesListOptionalParams
  extends coreClient.OperationOptions {
  /** The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. */
  expand?: string;
}

/** Contains response data for the list operation. */
export type ProviderResourceTypesListResponse = ProviderResourceTypeListResult;

/** Optional parameters. */
export interface ResourcesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. For example, `$expand=createdTime,changedTime`. */
  expand?: string;
  /** The filter to apply on the operation.<br><br>The properties you can use for eq (equals) or ne (not equals) are: location, resourceType, name, resourceGroup, identity, identity/principalId, plan, plan/publisher, plan/product, plan/name, plan/version, and plan/promotionCode.<br><br>For example, to filter by a resource type, use: $filter=resourceType eq 'Microsoft.Network/virtualNetworks'<br><br>You can use substringof(value, property) in the filter. The properties you can use for substring are: name and resourceGroup.<br><br>For example, to get all resources with 'demo' anywhere in the name, use: $filter=substringof('demo', name)<br><br>You can link more than one substringof together by adding and/or operators.<br><br>You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue eq 'Value1'. When you filter by a tag name and value, the tags for each resource are not returned in the results.<br><br>You can use some properties together when filtering. The combinations you can use are: substringof and/or resourceType, plan and plan/publisher and plan/name, identity and identity/principalId. */
  filter?: string;
  /** The number of results to return. If null is passed, returns all resources. */
  top?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export type ResourcesListByResourceGroupResponse = ResourceListResult;

/** Optional parameters. */
export interface ResourcesMoveResourcesOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ResourcesValidateMoveResourcesOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ResourcesListOptionalParams
  extends coreClient.OperationOptions {
  /** Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. For example, `$expand=createdTime,changedTime`. */
  expand?: string;
  /** The filter to apply on the operation.<br><br>Filter comparison operators include `eq` (equals) and `ne` (not equals) and may be used with the following properties: `location`, `resourceType`, `name`, `resourceGroup`, `identity`, `identity/principalId`, `plan`, `plan/publisher`, `plan/product`, `plan/name`, `plan/version`, and `plan/promotionCode`.<br><br>For example, to filter by a resource type, use `$filter=resourceType eq 'Microsoft.Network/virtualNetworks'`<br><br><br>`substringof(value, property)` can  be used to filter for substrings of the following currently-supported properties: `name` and `resourceGroup`<br><br>For example, to get all resources with 'demo' anywhere in the resource name, use `$filter=substringof('demo', name)`<br><br>Multiple substring operations can also be combined using `and`/`or` operators.<br><br>Note that any truncated number of results queried via `$top` may also not be compatible when using a filter.<br><br><br>Resources can be filtered by tag names and values. For example, to filter for a tag name and value, use `$filter=tagName eq 'tag1' and tagValue eq 'Value1'`. Note that when resources are filtered by tag name and value, <b>the original tags for each resource will not be returned in the results.</b> Any list of additional properties queried via `$expand` may also not be compatible when filtering by tag names/values. <br><br>For tag names only, resources can be filtered by prefix using the following syntax: `$filter=startswith(tagName, 'depart')`. This query will return all resources with a tag name prefixed by the phrase `depart` (i.e.`department`, `departureDate`, `departureTime`, etc.)<br><br><br>Note that some properties can be combined when filtering resources, which include the following: `substringof() and/or resourceType`, `plan and plan/publisher and plan/name`, and `identity and identity/principalId`. */
  filter?: string;
  /** The number of recommendations per page if a paged version of this API is being used. */
  top?: number;
}

/** Contains response data for the list operation. */
export type ResourcesListResponse = ResourceListResult;

/** Optional parameters. */
export interface ResourcesCheckExistenceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkExistence operation. */
export type ResourcesCheckExistenceResponse = {
  body: boolean;
};

/** Optional parameters. */
export interface ResourcesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ResourcesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ResourcesCreateOrUpdateResponse = GenericResource;

/** Optional parameters. */
export interface ResourcesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type ResourcesUpdateResponse = GenericResource;

/** Optional parameters. */
export interface ResourcesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ResourcesGetResponse = GenericResource;

/** Optional parameters. */
export interface ResourcesCheckExistenceByIdOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkExistenceById operation. */
export type ResourcesCheckExistenceByIdResponse = {
  body: boolean;
};

/** Optional parameters. */
export interface ResourcesDeleteByIdOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ResourcesCreateOrUpdateByIdOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdateById operation. */
export type ResourcesCreateOrUpdateByIdResponse = GenericResource;

/** Optional parameters. */
export interface ResourcesUpdateByIdOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateById operation. */
export type ResourcesUpdateByIdResponse = GenericResource;

/** Optional parameters. */
export interface ResourcesGetByIdOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getById operation. */
export type ResourcesGetByIdResponse = GenericResource;

/** Optional parameters. */
export interface ResourcesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ResourcesListByResourceGroupNextResponse = ResourceListResult;

/** Optional parameters. */
export interface ResourcesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ResourcesListNextResponse = ResourceListResult;

/** Optional parameters. */
export interface ResourceGroupsCheckExistenceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkExistence operation. */
export type ResourceGroupsCheckExistenceResponse = {
  body: boolean;
};

/** Optional parameters. */
export interface ResourceGroupsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ResourceGroupsCreateOrUpdateResponse = ResourceGroup;

/** Optional parameters. */
export interface ResourceGroupsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** The resource types you want to force delete. Currently, only the following is supported: forceDeletionTypes=Microsoft.Compute/virtualMachines,Microsoft.Compute/virtualMachineScaleSets */
  forceDeletionTypes?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ResourceGroupsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ResourceGroupsGetResponse = ResourceGroup;

/** Optional parameters. */
export interface ResourceGroupsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type ResourceGroupsUpdateResponse = ResourceGroup;

/** Optional parameters. */
export interface ResourceGroupsExportTemplateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the exportTemplate operation. */
export type ResourceGroupsExportTemplateResponse = ResourceGroupExportResult;

/** Optional parameters. */
export interface ResourceGroupsListOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation.<br><br>You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue eq 'Value1' */
  filter?: string;
  /** The number of results to return. If null is passed, returns all resource groups. */
  top?: number;
}

/** Contains response data for the list operation. */
export type ResourceGroupsListResponse = ResourceGroupListResult;

/** Optional parameters. */
export interface ResourceGroupsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ResourceGroupsListNextResponse = ResourceGroupListResult;

/** Optional parameters. */
export interface TagsDeleteValueOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface TagsCreateOrUpdateValueOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdateValue operation. */
export type TagsCreateOrUpdateValueResponse = TagValue;

/** Optional parameters. */
export interface TagsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type TagsCreateOrUpdateResponse = TagDetails;

/** Optional parameters. */
export interface TagsDeleteOptionalParams extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface TagsListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type TagsListResponse = TagsListResult;

/** Optional parameters. */
export interface TagsCreateOrUpdateAtScopeOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdateAtScope operation. */
export type TagsCreateOrUpdateAtScopeResponse = TagsResource;

/** Optional parameters. */
export interface TagsUpdateAtScopeOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateAtScope operation. */
export type TagsUpdateAtScopeResponse = TagsResource;

/** Optional parameters. */
export interface TagsGetAtScopeOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getAtScope operation. */
export type TagsGetAtScopeResponse = TagsResource;

/** Optional parameters. */
export interface TagsDeleteAtScopeOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface TagsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type TagsListNextResponse = TagsListResult;

/** Optional parameters. */
export interface ResourceManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
