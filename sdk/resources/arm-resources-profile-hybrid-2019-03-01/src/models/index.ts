/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * Deployment filter.
 */
export interface DeploymentExtendedFilter {
  /**
   * The provisioning state.
   */
  provisioningState?: string;
}

/**
 * Resource filter.
 */
export interface GenericResourceFilter {
  /**
   * The resource type.
   */
  resourceType?: string;
  /**
   * The tag name.
   */
  tagname?: string;
  /**
   * The tag value.
   */
  tagvalue?: string;
}

/**
 * Resource group filter.
 */
export interface ResourceGroupFilter {
  /**
   * The tag name.
   */
  tagName?: string;
  /**
   * The tag value.
   */
  tagValue?: string;
}

/**
 * Entity representing the reference to the template.
 */
export interface TemplateLink {
  /**
   * The URI of the template to deploy.
   */
  uri: string;
  /**
   * If included, must match the ContentVersion in the template.
   */
  contentVersion?: string;
}

/**
 * Entity representing the reference to the deployment parameters.
 */
export interface ParametersLink {
  /**
   * The URI of the parameters file.
   */
  uri: string;
  /**
   * If included, must match the ContentVersion in the template.
   */
  contentVersion?: string;
}

/**
 * An interface representing DebugSetting.
 */
export interface DebugSetting {
  /**
   * Specifies the type of information to log for debugging. The permitted values are none,
   * requestContent, responseContent, or both requestContent and responseContent separated by a
   * comma. The default is none. When setting this value, carefully consider the type of
   * information you are passing in during deployment. By logging information about the request or
   * response, you could potentially expose sensitive data that is retrieved through the deployment
   * operations.
   */
  detailLevel?: string;
}

/**
 * Deployment on error behavior.
 */
export interface OnErrorDeployment {
  /**
   * The deployment on error behavior type. Possible values are LastSuccessful and
   * SpecificDeployment. Possible values include: 'LastSuccessful', 'SpecificDeployment'
   */
  type?: OnErrorDeploymentType;
  /**
   * The deployment to be used on error case.
   */
  deploymentName?: string;
}

/**
 * Deployment properties.
 */
export interface DeploymentProperties {
  /**
   * The template content. You use this element when you want to pass the template syntax directly
   * in the request rather than link to an existing template. It can be a JObject or well-formed
   * JSON string. Use either the templateLink property or the template property, but not both.
   */
  template?: any;
  /**
   * The URI of the template. Use either the templateLink property or the template property, but
   * not both.
   */
  templateLink?: TemplateLink;
  /**
   * Name and value pairs that define the deployment parameters for the template. You use this
   * element when you want to provide the parameter values directly in the request rather than link
   * to an existing parameter file. Use either the parametersLink property or the parameters
   * property, but not both. It can be a JObject or a well formed JSON string.
   */
  parameters?: any;
  /**
   * The URI of parameters file. You use this element to link to an existing parameters file. Use
   * either the parametersLink property or the parameters property, but not both.
   */
  parametersLink?: ParametersLink;
  /**
   * The mode that is used to deploy resources. This value can be either Incremental or Complete.
   * In Incremental mode, resources are deployed without deleting existing resources that are not
   * included in the template. In Complete mode, resources are deployed and existing resources in
   * the resource group that are not included in the template are deleted. Be careful when using
   * Complete mode as you may unintentionally delete resources. Possible values include:
   * 'Incremental', 'Complete'
   */
  mode: DeploymentMode;
  /**
   * The debug setting of the deployment.
   */
  debugSetting?: DebugSetting;
  /**
   * The deployment on error behavior.
   */
  onErrorDeployment?: OnErrorDeployment;
}

/**
 * Deployment operation parameters.
 */
export interface Deployment {
  /**
   * The location to store the deployment data.
   */
  location?: string;
  /**
   * The deployment properties.
   */
  properties: DeploymentProperties;
}

/**
 * The deployment export result.
 */
export interface DeploymentExportResult {
  /**
   * The template content.
   */
  template?: any;
}

/**
 * The detailed error message of resource management.
 */
export interface ResourceManagementErrorWithDetails {
  /**
   * The error code returned when exporting the template.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly code?: string;
  /**
   * The error message describing the export error.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * The target of the error.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly target?: string;
  /**
   * Validation error.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly details?: ResourceManagementErrorWithDetails[];
}

/**
 * The type of the paths for alias.
 */
export interface AliasPathType {
  /**
   * The path of an alias.
   */
  path?: string;
  /**
   * The API versions.
   */
  apiVersions?: string[];
}

/**
 * The alias type.
 */
export interface AliasType {
  /**
   * The alias name.
   */
  name?: string;
  /**
   * The paths for an alias.
   */
  paths?: AliasPathType[];
}

/**
 * Resource type managed by the resource provider.
 */
export interface ProviderResourceType {
  /**
   * The resource type.
   */
  resourceType?: string;
  /**
   * The collection of locations where this resource type can be created.
   */
  locations?: string[];
  /**
   * The aliases that are supported by this resource type.
   */
  aliases?: AliasType[];
  /**
   * The API version.
   */
  apiVersions?: string[];
  /**
   * The properties.
   */
  properties?: { [propertyName: string]: string };
}

/**
 * Resource provider information.
 */
export interface Provider {
  /**
   * The provider ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The namespace of the resource provider.
   */
  namespace?: string;
  /**
   * The registration state of the provider.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly registrationState?: string;
  /**
   * The collection of provider resource types.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resourceTypes?: ProviderResourceType[];
}

/**
 * Deployment dependency information.
 */
export interface BasicDependency {
  /**
   * The ID of the dependency.
   */
  id?: string;
  /**
   * The dependency resource type.
   */
  resourceType?: string;
  /**
   * The dependency resource name.
   */
  resourceName?: string;
}

/**
 * Deployment dependency information.
 */
export interface Dependency {
  /**
   * The list of dependencies.
   */
  dependsOn?: BasicDependency[];
  /**
   * The ID of the dependency.
   */
  id?: string;
  /**
   * The dependency resource type.
   */
  resourceType?: string;
  /**
   * The dependency resource name.
   */
  resourceName?: string;
}

/**
 * Deployment on error behavior with additional details.
 */
export interface OnErrorDeploymentExtended {
  /**
   * The state of the provisioning for the on error deployment.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * The deployment on error behavior type. Possible values are LastSuccessful and
   * SpecificDeployment. Possible values include: 'LastSuccessful', 'SpecificDeployment'
   */
  type?: OnErrorDeploymentType;
  /**
   * The deployment to be used on error case.
   */
  deploymentName?: string;
}

/**
 * Deployment properties with additional details.
 */
export interface DeploymentPropertiesExtended {
  /**
   * The state of the provisioning.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * The correlation ID of the deployment.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly correlationId?: string;
  /**
   * The timestamp of the template deployment.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly timestamp?: Date;
  /**
   * Key/value pairs that represent deployment output.
   */
  outputs?: any;
  /**
   * The list of resource providers needed for the deployment.
   */
  providers?: Provider[];
  /**
   * The list of deployment dependencies.
   */
  dependencies?: Dependency[];
  /**
   * The template content. Use only one of Template or TemplateLink.
   */
  template?: any;
  /**
   * The URI referencing the template. Use only one of Template or TemplateLink.
   */
  templateLink?: TemplateLink;
  /**
   * Deployment parameters. Use only one of Parameters or ParametersLink.
   */
  parameters?: any;
  /**
   * The URI referencing the parameters. Use only one of Parameters or ParametersLink.
   */
  parametersLink?: ParametersLink;
  /**
   * The deployment mode. Possible values are Incremental and Complete. Possible values include:
   * 'Incremental', 'Complete'
   */
  mode?: DeploymentMode;
  /**
   * The debug setting of the deployment.
   */
  debugSetting?: DebugSetting;
  /**
   * The deployment on error behavior.
   */
  onErrorDeployment?: OnErrorDeploymentExtended;
}

/**
 * Information from validate template deployment response.
 */
export interface DeploymentValidateResult {
  /**
   * Validation error.
   */
  error?: ResourceManagementErrorWithDetails;
  /**
   * The template deployment properties.
   */
  properties?: DeploymentPropertiesExtended;
}

/**
 * Deployment information.
 */
export interface DeploymentExtended extends BaseResource {
  /**
   * The ID of the deployment.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the deployment.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The type of the deployment.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * the location of the deployment.
   */
  location?: string;
  /**
   * Deployment properties.
   */
  properties?: DeploymentPropertiesExtended;
}

/**
 * Plan for the resource.
 */
export interface Plan {
  /**
   * The plan ID.
   */
  name?: string;
  /**
   * The publisher ID.
   */
  publisher?: string;
  /**
   * The offer ID.
   */
  product?: string;
  /**
   * The promotion code.
   */
  promotionCode?: string;
  /**
   * The plan's version.
   */
  version?: string;
}

/**
 * SKU for the resource.
 */
export interface Sku {
  /**
   * The SKU name.
   */
  name?: string;
  /**
   * The SKU tier.
   */
  tier?: string;
  /**
   * The SKU size.
   */
  size?: string;
  /**
   * The SKU family.
   */
  family?: string;
  /**
   * The SKU model.
   */
  model?: string;
  /**
   * The SKU capacity.
   */
  capacity?: number;
}

/**
 * An interface representing IdentityUserAssignedIdentitiesValue.
 */
export interface IdentityUserAssignedIdentitiesValue {
  /**
   * The principal id of user assigned identity.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalId?: string;
  /**
   * The client id of user assigned identity.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly clientId?: string;
}

/**
 * Identity for the resource.
 */
export interface Identity {
  /**
   * The principal ID of resource identity.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalId?: string;
  /**
   * The tenant ID of resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantId?: string;
  /**
   * The identity type. Possible values include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned,
   * UserAssigned', 'None'
   */
  type?: ResourceIdentityType;
  /**
   * The list of user identities associated with the resource. The user identity dictionary key
   * references will be ARM resource ids in the form:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
   */
  userAssignedIdentities?: { [propertyName: string]: IdentityUserAssignedIdentitiesValue };
}

/**
 * Specified resource.
 */
export interface Resource extends BaseResource {
  /**
   * Resource ID
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource location
   */
  location?: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Resource information.
 */
export interface GenericResource extends Resource {
  /**
   * The plan of the resource.
   */
  plan?: Plan;
  /**
   * The resource properties.
   */
  properties?: any;
  /**
   * The kind of the resource.
   */
  kind?: string;
  /**
   * ID of the resource that manages this resource.
   */
  managedBy?: string;
  /**
   * The SKU of the resource.
   */
  sku?: Sku;
  /**
   * The identity of the resource.
   */
  identity?: Identity;
}

/**
 * The resource group properties.
 */
export interface ResourceGroupProperties {
  /**
   * The provisioning state.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
}

/**
 * Resource group information.
 */
export interface ResourceGroup extends BaseResource {
  /**
   * The ID of the resource group.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the resource group.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The type of the resource group.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  properties?: ResourceGroupProperties;
  /**
   * The location of the resource group. It cannot be changed after the resource group has been
   * created. It must be one of the supported Azure locations.
   */
  location: string;
  /**
   * The ID of the resource that manages this resource group.
   */
  managedBy?: string;
  /**
   * The tags attached to the resource group.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Resource group information.
 */
export interface ResourceGroupPatchable {
  /**
   * The name of the resource group.
   */
  name?: string;
  properties?: ResourceGroupProperties;
  /**
   * The ID of the resource that manages this resource group.
   */
  managedBy?: string;
  /**
   * The tags attached to the resource group.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Parameters of move resources.
 */
export interface ResourcesMoveInfo {
  /**
   * The IDs of the resources.
   */
  resources?: string[];
  /**
   * The target resource group.
   */
  targetResourceGroup?: string;
}

/**
 * Export resource group template request parameters.
 */
export interface ExportTemplateRequest {
  /**
   * The IDs of the resources. The only supported string currently is '*' (all resources). Future
   * updates will support exporting specific resources.
   */
  resources?: string[];
  /**
   * The export template options. Supported values include 'IncludeParameterDefaultValue',
   * 'IncludeComments' or 'IncludeParameterDefaultValue, IncludeComments
   */
  options?: string;
}

/**
 * Tag count.
 */
export interface TagCount {
  /**
   * Type of count.
   */
  type?: string;
  /**
   * Value of count.
   */
  value?: number;
}

/**
 * Tag information.
 */
export interface TagValue extends BaseResource {
  /**
   * The tag ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The tag value.
   */
  tagValue?: string;
  /**
   * The tag value count.
   */
  count?: TagCount;
}

/**
 * Tag details.
 */
export interface TagDetails {
  /**
   * The tag ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The tag name.
   */
  tagName?: string;
  /**
   * The total number of resources that use the resource tag. When a tag is initially created and
   * has no associated resources, the value is 0.
   */
  count?: TagCount;
  /**
   * The list of tag values.
   */
  values?: TagValue[];
}

/**
 * Target resource.
 */
export interface TargetResource {
  /**
   * The ID of the resource.
   */
  id?: string;
  /**
   * The name of the resource.
   */
  resourceName?: string;
  /**
   * The type of the resource.
   */
  resourceType?: string;
}

/**
 * HTTP message.
 */
export interface HttpMessage {
  /**
   * HTTP message content.
   */
  content?: any;
}

/**
 * Deployment operation properties.
 */
export interface DeploymentOperationProperties {
  /**
   * The state of the provisioning.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * The date and time of the operation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly timestamp?: Date;
  /**
   * Deployment operation service request id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serviceRequestId?: string;
  /**
   * Operation status code.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly statusCode?: string;
  /**
   * Operation status message.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly statusMessage?: any;
  /**
   * The target resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetResource?: TargetResource;
  /**
   * The HTTP request message.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly request?: HttpMessage;
  /**
   * The HTTP response message.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly response?: HttpMessage;
}

/**
 * Deployment operation information.
 */
export interface DeploymentOperation {
  /**
   * Full deployment operation ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Deployment operation ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly operationId?: string;
  /**
   * Deployment properties.
   */
  properties?: DeploymentOperationProperties;
}

/**
 * Resource provider operation's display properties.
 */
export interface ResourceProviderOperationDisplayProperties {
  /**
   * Operation description.
   */
  publisher?: string;
  /**
   * Operation provider.
   */
  provider?: string;
  /**
   * Operation resource.
   */
  resource?: string;
  /**
   * Resource provider operation.
   */
  operation?: string;
  /**
   * Operation description.
   */
  description?: string;
}

/**
 * Sub-resource.
 */
export interface SubResource extends BaseResource {
  /**
   * Resource ID
   */
  id?: string;
}

/**
 * Resource group export result.
 */
export interface ResourceGroupExportResult {
  /**
   * The template content.
   */
  template?: any;
  /**
   * The error.
   */
  error?: ResourceManagementErrorWithDetails;
}

/**
 * The object that represents the operation.
 */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft.Resources
   */
  provider?: string;
  /**
   * Resource on which the operation is performed: Profile, endpoint, etc.
   */
  resource?: string;
  /**
   * Operation type: Read, write, delete, etc.
   */
  operation?: string;
  /**
   * Description of the operation.
   */
  description?: string;
}

/**
 * Microsoft.Resources operation
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}
   */
  name?: string;
  /**
   * The object that represents the operation.
   */
  display?: OperationDisplay;
}

/**
 * Optional Parameters.
 */
export interface DeploymentsListAtSubscriptionScopeOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. For example, you can use $filter=provisioningState eq
   * '{state}'.
   */
  filter?: string;
  /**
   * The number of results to get. If null is passed, returns all deployments.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface DeploymentsListByResourceGroupOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. For example, you can use $filter=provisioningState eq
   * '{state}'.
   */
  filter?: string;
  /**
   * The number of results to get. If null is passed, returns all deployments.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface ProvidersListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The number of results to return. If null is passed returns all deployments.
   */
  top?: number;
  /**
   * The properties to include in the results. For example, use &$expand=metadata in the query
   * string to retrieve resource provider metadata. To include property aliases in response, use
   * $expand=resourceTypes/aliases.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface ProvidersGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The $expand query parameter. For example, to include property aliases in response, use
   * $expand=resourceTypes/aliases.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface ResourcesListByResourceGroupOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation.<br><br>The properties you can use for eq (equals) or ne
   * (not equals) are: location, resourceType, name, resourceGroup, identity, identity/principalId,
   * plan, plan/publisher, plan/product, plan/name, plan/version, and
   * plan/promotionCode.<br><br>For example, to filter by a resource type, use:
   * $filter=resourceType eq 'Microsoft.Network/virtualNetworks'<br><br>You can use
   * substringof(value, property) in the filter. The properties you can use for substring are: name
   * and resourceGroup.<br><br>For example, to get all resources with 'demo' anywhere in the name,
   * use: $filter=substringof('demo', name)<br><br>You can link more than one substringof together
   * by adding and/or operators.<br><br>You can filter by tag names and values. For example, to
   * filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue eq
   * 'Value1'<br><br>You can use some properties together when filtering. The combinations you can
   * use are: substringof and/or resourceType, plan and plan/publisher and plan/name, identity and
   * identity/principalId.
   */
  filter?: string;
  /**
   * The $expand query parameter. You can expand createdTime and changedTime. For example, to
   * expand both properties, use $expand=changedTime,createdTime
   */
  expand?: string;
  /**
   * The number of results to return. If null is passed, returns all resources.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface ResourcesListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation.<br><br>The properties you can use for eq (equals) or ne
   * (not equals) are: location, resourceType, name, resourceGroup, identity, identity/principalId,
   * plan, plan/publisher, plan/product, plan/name, plan/version, and
   * plan/promotionCode.<br><br>For example, to filter by a resource type, use:
   * $filter=resourceType eq 'Microsoft.Network/virtualNetworks'<br><br>You can use
   * substringof(value, property) in the filter. The properties you can use for substring are: name
   * and resourceGroup.<br><br>For example, to get all resources with 'demo' anywhere in the name,
   * use: $filter=substringof('demo', name)<br><br>You can link more than one substringof together
   * by adding and/or operators.<br><br>You can filter by tag names and values. For example, to
   * filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue eq
   * 'Value1'<br><br>You can use some properties together when filtering. The combinations you can
   * use are: substringof and/or resourceType, plan and plan/publisher and plan/name, identity and
   * identity/principalId.
   */
  filter?: string;
  /**
   * The $expand query parameter. You can expand createdTime and changedTime. For example, to
   * expand both properties, use $expand=changedTime,createdTime
   */
  expand?: string;
  /**
   * The number of results to return. If null is passed, returns all resource groups.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface ResourceGroupsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation.<br><br>You can filter by tag names and values. For
   * example, to filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue eq
   * 'Value1'
   */
  filter?: string;
  /**
   * The number of results to return. If null is passed, returns all resource groups.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface DeploymentOperationsListAtSubscriptionScopeOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The number of results to return.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface DeploymentOperationsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The number of results to return.
   */
  top?: number;
}

/**
 * An interface representing ResourceManagementClientOptions.
 */
export interface ResourceManagementClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * @interface
 * Result of the request to list Microsoft.Resources operations. It contains a list of operations
 * and a URL link to get the next set of results.
 * @extends Array<Operation>
 */
export interface OperationListResult extends Array<Operation> {
  /**
   * URL to get the next set of operation list results if there are any.
   */
  nextLink?: string;
}

/**
 * @interface
 * List of deployments.
 * @extends Array<DeploymentExtended>
 */
export interface DeploymentListResult extends Array<DeploymentExtended> {
  /**
   * The URL to use for getting the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * List of resource providers.
 * @extends Array<Provider>
 */
export interface ProviderListResult extends Array<Provider> {
  /**
   * The URL to use for getting the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * List of resource groups.
 * @extends Array<GenericResource>
 */
export interface ResourceListResult extends Array<GenericResource> {
  /**
   * The URL to use for getting the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * List of resource groups.
 * @extends Array<ResourceGroup>
 */
export interface ResourceGroupListResult extends Array<ResourceGroup> {
  /**
   * The URL to use for getting the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * List of subscription tags.
 * @extends Array<TagDetails>
 */
export interface TagsListResult extends Array<TagDetails> {
  /**
   * The URL to use for getting the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * List of deployment operations.
 * @extends Array<DeploymentOperation>
 */
export interface DeploymentOperationsListResult extends Array<DeploymentOperation> {
  /**
   * The URL to use for getting the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Defines values for DeploymentMode.
 * Possible values include: 'Incremental', 'Complete'
 * @readonly
 * @enum {string}
 */
export type DeploymentMode = 'Incremental' | 'Complete';

/**
 * Defines values for OnErrorDeploymentType.
 * Possible values include: 'LastSuccessful', 'SpecificDeployment'
 * @readonly
 * @enum {string}
 */
export type OnErrorDeploymentType = 'LastSuccessful' | 'SpecificDeployment';

/**
 * Defines values for ResourceIdentityType.
 * Possible values include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned, UserAssigned',
 * 'None'
 * @readonly
 * @enum {string}
 */
export type ResourceIdentityType = 'SystemAssigned' | 'UserAssigned' | 'SystemAssigned, UserAssigned' | 'None';

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the checkExistenceAtSubscriptionScope operation.
 */
export type DeploymentsCheckExistenceAtSubscriptionScopeResponse = {
  /**
   * The parsed response body.
   */
  body: boolean;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: boolean;
    };
};

/**
 * Contains response data for the createOrUpdateAtSubscriptionScope operation.
 */
export type DeploymentsCreateOrUpdateAtSubscriptionScopeResponse = DeploymentExtended & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DeploymentExtended;
    };
};

/**
 * Contains response data for the getAtSubscriptionScope operation.
 */
export type DeploymentsGetAtSubscriptionScopeResponse = DeploymentExtended & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DeploymentExtended;
    };
};

/**
 * Contains response data for the validateAtSubscriptionScope operation.
 */
export type DeploymentsValidateAtSubscriptionScopeResponse = DeploymentValidateResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DeploymentValidateResult;
    };
};

/**
 * Contains response data for the exportTemplateAtSubscriptionScope operation.
 */
export type DeploymentsExportTemplateAtSubscriptionScopeResponse = DeploymentExportResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DeploymentExportResult;
    };
};

/**
 * Contains response data for the listAtSubscriptionScope operation.
 */
export type DeploymentsListAtSubscriptionScopeResponse = DeploymentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DeploymentListResult;
    };
};

/**
 * Contains response data for the checkExistence operation.
 */
export type DeploymentsCheckExistenceResponse = {
  /**
   * The parsed response body.
   */
  body: boolean;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: boolean;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DeploymentsCreateOrUpdateResponse = DeploymentExtended & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DeploymentExtended;
    };
};

/**
 * Contains response data for the get operation.
 */
export type DeploymentsGetResponse = DeploymentExtended & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DeploymentExtended;
    };
};

/**
 * Contains response data for the validate operation.
 */
export type DeploymentsValidateResponse = DeploymentValidateResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DeploymentValidateResult;
    };
};

/**
 * Contains response data for the exportTemplate operation.
 */
export type DeploymentsExportTemplateResponse = DeploymentExportResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DeploymentExportResult;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type DeploymentsListByResourceGroupResponse = DeploymentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DeploymentListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdateAtSubscriptionScope operation.
 */
export type DeploymentsBeginCreateOrUpdateAtSubscriptionScopeResponse = DeploymentExtended & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DeploymentExtended;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type DeploymentsBeginCreateOrUpdateResponse = DeploymentExtended & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DeploymentExtended;
    };
};

/**
 * Contains response data for the listAtSubscriptionScopeNext operation.
 */
export type DeploymentsListAtSubscriptionScopeNextResponse = DeploymentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DeploymentListResult;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type DeploymentsListByResourceGroupNextResponse = DeploymentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DeploymentListResult;
    };
};

/**
 * Contains response data for the unregister operation.
 */
export type ProvidersUnregisterResponse = Provider & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Provider;
    };
};

/**
 * Contains response data for the register operation.
 */
export type ProvidersRegisterResponse = Provider & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Provider;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ProvidersListResponse = ProviderListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProviderListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ProvidersGetResponse = Provider & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Provider;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ProvidersListNextResponse = ProviderListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProviderListResult;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ResourcesListByResourceGroupResponse = ResourceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ResourceListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ResourcesListResponse = ResourceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ResourceListResult;
    };
};

/**
 * Contains response data for the checkExistence operation.
 */
export type ResourcesCheckExistenceResponse = {
  /**
   * The parsed response body.
   */
  body: boolean;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: boolean;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ResourcesCreateOrUpdateResponse = GenericResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GenericResource;
    };
};

/**
 * Contains response data for the update operation.
 */
export type ResourcesUpdateResponse = GenericResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GenericResource;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ResourcesGetResponse = GenericResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GenericResource;
    };
};

/**
 * Contains response data for the checkExistenceById operation.
 */
export type ResourcesCheckExistenceByIdResponse = {
  /**
   * The parsed response body.
   */
  body: boolean;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: boolean;
    };
};

/**
 * Contains response data for the createOrUpdateById operation.
 */
export type ResourcesCreateOrUpdateByIdResponse = GenericResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GenericResource;
    };
};

/**
 * Contains response data for the updateById operation.
 */
export type ResourcesUpdateByIdResponse = GenericResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GenericResource;
    };
};

/**
 * Contains response data for the getById operation.
 */
export type ResourcesGetByIdResponse = GenericResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GenericResource;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ResourcesBeginCreateOrUpdateResponse = GenericResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GenericResource;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type ResourcesBeginUpdateResponse = GenericResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GenericResource;
    };
};

/**
 * Contains response data for the beginCreateOrUpdateById operation.
 */
export type ResourcesBeginCreateOrUpdateByIdResponse = GenericResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GenericResource;
    };
};

/**
 * Contains response data for the beginUpdateById operation.
 */
export type ResourcesBeginUpdateByIdResponse = GenericResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GenericResource;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type ResourcesListByResourceGroupNextResponse = ResourceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ResourceListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ResourcesListNextResponse = ResourceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ResourceListResult;
    };
};

/**
 * Contains response data for the checkExistence operation.
 */
export type ResourceGroupsCheckExistenceResponse = {
  /**
   * The parsed response body.
   */
  body: boolean;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: boolean;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ResourceGroupsCreateOrUpdateResponse = ResourceGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ResourceGroup;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ResourceGroupsGetResponse = ResourceGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ResourceGroup;
    };
};

/**
 * Contains response data for the update operation.
 */
export type ResourceGroupsUpdateResponse = ResourceGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ResourceGroup;
    };
};

/**
 * Contains response data for the exportTemplate operation.
 */
export type ResourceGroupsExportTemplateResponse = ResourceGroupExportResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ResourceGroupExportResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ResourceGroupsListResponse = ResourceGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ResourceGroupListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ResourceGroupsListNextResponse = ResourceGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ResourceGroupListResult;
    };
};

/**
 * Contains response data for the createOrUpdateValue operation.
 */
export type TagsCreateOrUpdateValueResponse = TagValue & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TagValue;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type TagsCreateOrUpdateResponse = TagDetails & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TagDetails;
    };
};

/**
 * Contains response data for the list operation.
 */
export type TagsListResponse = TagsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TagsListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type TagsListNextResponse = TagsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TagsListResult;
    };
};

/**
 * Contains response data for the getAtSubscriptionScope operation.
 */
export type DeploymentOperationsGetAtSubscriptionScopeResponse = DeploymentOperation & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DeploymentOperation;
    };
};

/**
 * Contains response data for the listAtSubscriptionScope operation.
 */
export type DeploymentOperationsListAtSubscriptionScopeResponse = DeploymentOperationsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DeploymentOperationsListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type DeploymentOperationsGetResponse = DeploymentOperation & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DeploymentOperation;
    };
};

/**
 * Contains response data for the list operation.
 */
export type DeploymentOperationsListResponse = DeploymentOperationsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DeploymentOperationsListResult;
    };
};

/**
 * Contains response data for the listAtSubscriptionScopeNext operation.
 */
export type DeploymentOperationsListAtSubscriptionScopeNextResponse = DeploymentOperationsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DeploymentOperationsListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type DeploymentOperationsListNextResponse = DeploymentOperationsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DeploymentOperationsListResult;
    };
};
