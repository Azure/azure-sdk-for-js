/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Projects } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MLTeamAccountManagementClient } from "../mLTeamAccountManagementClient";
import {
  Project,
  ProjectsListByWorkspaceNextOptionalParams,
  ProjectsListByWorkspaceOptionalParams,
  ProjectsGetOptionalParams,
  ProjectsGetResponse,
  ProjectsCreateOrUpdateOptionalParams,
  ProjectsCreateOrUpdateResponse,
  ProjectsDeleteOptionalParams,
  ProjectUpdateParameters,
  ProjectsUpdateOptionalParams,
  ProjectsUpdateResponse,
  ProjectsListByWorkspaceResponse,
  ProjectsListByWorkspaceNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Projects operations. */
export class ProjectsImpl implements Projects {
  private readonly client: MLTeamAccountManagementClient;

  /**
   * Initialize a new instance of the class Projects class.
   * @param client Reference to the service client
   */
  constructor(client: MLTeamAccountManagementClient) {
    this.client = client;
  }

  /**
   * Lists all the available machine learning projects under the specified workspace.
   * @param accountName The name of the machine learning team account.
   * @param workspaceName The name of the machine learning team account workspace.
   * @param resourceGroupName The name of the resource group to which the machine learning team account
   *                          belongs.
   * @param options The options parameters.
   */
  public listByWorkspace(
    accountName: string,
    workspaceName: string,
    resourceGroupName: string,
    options?: ProjectsListByWorkspaceOptionalParams
  ): PagedAsyncIterableIterator<Project> {
    const iter = this.listByWorkspacePagingAll(
      accountName,
      workspaceName,
      resourceGroupName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByWorkspacePagingPage(
          accountName,
          workspaceName,
          resourceGroupName,
          options
        );
      }
    };
  }

  private async *listByWorkspacePagingPage(
    accountName: string,
    workspaceName: string,
    resourceGroupName: string,
    options?: ProjectsListByWorkspaceOptionalParams
  ): AsyncIterableIterator<Project[]> {
    let result = await this._listByWorkspace(
      accountName,
      workspaceName,
      resourceGroupName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByWorkspaceNext(
        accountName,
        workspaceName,
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByWorkspacePagingAll(
    accountName: string,
    workspaceName: string,
    resourceGroupName: string,
    options?: ProjectsListByWorkspaceOptionalParams
  ): AsyncIterableIterator<Project> {
    for await (const page of this.listByWorkspacePagingPage(
      accountName,
      workspaceName,
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets the properties of the specified machine learning project.
   * @param resourceGroupName The name of the resource group to which the machine learning team account
   *                          belongs.
   * @param accountName The name of the machine learning team account.
   * @param workspaceName The name of the machine learning team account workspace.
   * @param projectName The name of the machine learning project under a team account workspace.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    workspaceName: string,
    projectName: string,
    options?: ProjectsGetOptionalParams
  ): Promise<ProjectsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, workspaceName, projectName, options },
      getOperationSpec
    );
  }

  /**
   * Creates or updates a project with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the machine learning team account
   *                          belongs.
   * @param accountName The name of the machine learning team account.
   * @param workspaceName The name of the machine learning team account workspace.
   * @param projectName The name of the machine learning project under a team account workspace.
   * @param parameters The parameters for creating or updating a project.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    accountName: string,
    workspaceName: string,
    projectName: string,
    parameters: Project,
    options?: ProjectsCreateOrUpdateOptionalParams
  ): Promise<ProjectsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        workspaceName,
        projectName,
        parameters,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Deletes a project.
   * @param resourceGroupName The name of the resource group to which the machine learning team account
   *                          belongs.
   * @param accountName The name of the machine learning team account.
   * @param workspaceName The name of the machine learning team account workspace.
   * @param projectName The name of the machine learning project under a team account workspace.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    accountName: string,
    workspaceName: string,
    projectName: string,
    options?: ProjectsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, workspaceName, projectName, options },
      deleteOperationSpec
    );
  }

  /**
   * Updates a project with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the machine learning team account
   *                          belongs.
   * @param accountName The name of the machine learning team account.
   * @param workspaceName The name of the machine learning team account workspace.
   * @param projectName The name of the machine learning project under a team account workspace.
   * @param parameters The parameters for updating a machine learning team account.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    accountName: string,
    workspaceName: string,
    projectName: string,
    parameters: ProjectUpdateParameters,
    options?: ProjectsUpdateOptionalParams
  ): Promise<ProjectsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        workspaceName,
        projectName,
        parameters,
        options
      },
      updateOperationSpec
    );
  }

  /**
   * Lists all the available machine learning projects under the specified workspace.
   * @param accountName The name of the machine learning team account.
   * @param workspaceName The name of the machine learning team account workspace.
   * @param resourceGroupName The name of the resource group to which the machine learning team account
   *                          belongs.
   * @param options The options parameters.
   */
  private _listByWorkspace(
    accountName: string,
    workspaceName: string,
    resourceGroupName: string,
    options?: ProjectsListByWorkspaceOptionalParams
  ): Promise<ProjectsListByWorkspaceResponse> {
    return this.client.sendOperationRequest(
      { accountName, workspaceName, resourceGroupName, options },
      listByWorkspaceOperationSpec
    );
  }

  /**
   * ListByWorkspaceNext
   * @param accountName The name of the machine learning team account.
   * @param workspaceName The name of the machine learning team account workspace.
   * @param resourceGroupName The name of the resource group to which the machine learning team account
   *                          belongs.
   * @param nextLink The nextLink from the previous successful call to the ListByWorkspace method.
   * @param options The options parameters.
   */
  private _listByWorkspaceNext(
    accountName: string,
    workspaceName: string,
    resourceGroupName: string,
    nextLink: string,
    options?: ProjectsListByWorkspaceNextOptionalParams
  ): Promise<ProjectsListByWorkspaceNextResponse> {
    return this.client.sendOperationRequest(
      { accountName, workspaceName, resourceGroupName, nextLink, options },
      listByWorkspaceNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces/{workspaceName}/projects/{projectName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Project
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.workspaceName,
    Parameters.projectName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces/{workspaceName}/projects/{projectName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Project
    },
    201: {
      bodyMapper: Mappers.Project
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.workspaceName,
    Parameters.projectName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces/{workspaceName}/projects/{projectName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.workspaceName,
    Parameters.projectName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces/{workspaceName}/projects/{projectName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Project
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.workspaceName,
    Parameters.projectName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByWorkspaceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces/{workspaceName}/projects",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.workspaceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByWorkspaceNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.nextLink,
    Parameters.workspaceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
