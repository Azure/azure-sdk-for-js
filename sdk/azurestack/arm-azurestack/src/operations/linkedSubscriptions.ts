/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/linkedSubscriptionsMappers";
import * as Parameters from "../models/parameters";
import { AzureStackManagementClientContext } from "../azureStackManagementClientContext";

/** Class representing a LinkedSubscriptions. */
export class LinkedSubscriptions {
  private readonly client: AzureStackManagementClientContext;

  /**
   * Create a LinkedSubscriptions.
   * @param {AzureStackManagementClientContext} client Reference to the service client.
   */
  constructor(client: AzureStackManagementClientContext) {
    this.client = client;
  }

  /**
   * Returns a list of all linked subscriptions under current resource group.
   * @param resourceGroup Name of the resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.LinkedSubscriptionsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroup: string, options?: msRest.RequestOptionsBase): Promise<Models.LinkedSubscriptionsListByResourceGroupResponse>;
  /**
   * @param resourceGroup Name of the resource group.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroup: string, callback: msRest.ServiceCallback<Models.LinkedSubscriptionsList>): void;
  /**
   * @param resourceGroup Name of the resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroup: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LinkedSubscriptionsList>): void;
  listByResourceGroup(resourceGroup: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LinkedSubscriptionsList>, callback?: msRest.ServiceCallback<Models.LinkedSubscriptionsList>): Promise<Models.LinkedSubscriptionsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroup,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.LinkedSubscriptionsListByResourceGroupResponse>;
  }

  /**
   * Returns a list of all linked subscriptions under current subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.LinkedSubscriptionsListBySubscriptionResponse>
   */
  listBySubscription(options?: msRest.RequestOptionsBase): Promise<Models.LinkedSubscriptionsListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.LinkedSubscriptionsList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LinkedSubscriptionsList>): void;
  listBySubscription(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LinkedSubscriptionsList>, callback?: msRest.ServiceCallback<Models.LinkedSubscriptionsList>): Promise<Models.LinkedSubscriptionsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.LinkedSubscriptionsListBySubscriptionResponse>;
  }

  /**
   * Returns the properties of a Linked Subscription resource.
   * @param resourceGroup Name of the resource group.
   * @param linkedSubscriptionName Name of the Linked Subscription resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.LinkedSubscriptionsGetResponse>
   */
  get(resourceGroup: string, linkedSubscriptionName: string, options?: msRest.RequestOptionsBase): Promise<Models.LinkedSubscriptionsGetResponse>;
  /**
   * @param resourceGroup Name of the resource group.
   * @param linkedSubscriptionName Name of the Linked Subscription resource.
   * @param callback The callback
   */
  get(resourceGroup: string, linkedSubscriptionName: string, callback: msRest.ServiceCallback<Models.LinkedSubscription>): void;
  /**
   * @param resourceGroup Name of the resource group.
   * @param linkedSubscriptionName Name of the Linked Subscription resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroup: string, linkedSubscriptionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LinkedSubscription>): void;
  get(resourceGroup: string, linkedSubscriptionName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LinkedSubscription>, callback?: msRest.ServiceCallback<Models.LinkedSubscription>): Promise<Models.LinkedSubscriptionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroup,
        linkedSubscriptionName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.LinkedSubscriptionsGetResponse>;
  }

  /**
   * Delete the requested Linked Subscription resource.
   * @param resourceGroup Name of the resource group.
   * @param linkedSubscriptionName Name of the Linked Subscription resource.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroup: string, linkedSubscriptionName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroup Name of the resource group.
   * @param linkedSubscriptionName Name of the Linked Subscription resource.
   * @param callback The callback
   */
  deleteMethod(resourceGroup: string, linkedSubscriptionName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroup Name of the resource group.
   * @param linkedSubscriptionName Name of the Linked Subscription resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroup: string, linkedSubscriptionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroup: string, linkedSubscriptionName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroup,
        linkedSubscriptionName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Create or update a linked subscription resource.
   * @param resourceGroup Name of the resource group.
   * @param linkedSubscriptionName Name of the Linked Subscription resource.
   * @param resource Linked subscription resource parameter.
   * @param [options] The optional parameters
   * @returns Promise<Models.LinkedSubscriptionsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroup: string, linkedSubscriptionName: string, resource: Models.LinkedSubscriptionParameter, options?: msRest.RequestOptionsBase): Promise<Models.LinkedSubscriptionsCreateOrUpdateResponse>;
  /**
   * @param resourceGroup Name of the resource group.
   * @param linkedSubscriptionName Name of the Linked Subscription resource.
   * @param resource Linked subscription resource parameter.
   * @param callback The callback
   */
  createOrUpdate(resourceGroup: string, linkedSubscriptionName: string, resource: Models.LinkedSubscriptionParameter, callback: msRest.ServiceCallback<Models.LinkedSubscription>): void;
  /**
   * @param resourceGroup Name of the resource group.
   * @param linkedSubscriptionName Name of the Linked Subscription resource.
   * @param resource Linked subscription resource parameter.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroup: string, linkedSubscriptionName: string, resource: Models.LinkedSubscriptionParameter, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LinkedSubscription>): void;
  createOrUpdate(resourceGroup: string, linkedSubscriptionName: string, resource: Models.LinkedSubscriptionParameter, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LinkedSubscription>, callback?: msRest.ServiceCallback<Models.LinkedSubscription>): Promise<Models.LinkedSubscriptionsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroup,
        linkedSubscriptionName,
        resource,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.LinkedSubscriptionsCreateOrUpdateResponse>;
  }

  /**
   * Patch a Linked Subscription resource.
   * @param resourceGroup Name of the resource group.
   * @param linkedSubscriptionName Name of the Linked Subscription resource.
   * @param resource Linked subscription resource parameter.
   * @param [options] The optional parameters
   * @returns Promise<Models.LinkedSubscriptionsUpdateResponse>
   */
  update(resourceGroup: string, linkedSubscriptionName: string, resource: Models.LinkedSubscriptionParameter, options?: msRest.RequestOptionsBase): Promise<Models.LinkedSubscriptionsUpdateResponse>;
  /**
   * @param resourceGroup Name of the resource group.
   * @param linkedSubscriptionName Name of the Linked Subscription resource.
   * @param resource Linked subscription resource parameter.
   * @param callback The callback
   */
  update(resourceGroup: string, linkedSubscriptionName: string, resource: Models.LinkedSubscriptionParameter, callback: msRest.ServiceCallback<Models.LinkedSubscription>): void;
  /**
   * @param resourceGroup Name of the resource group.
   * @param linkedSubscriptionName Name of the Linked Subscription resource.
   * @param resource Linked subscription resource parameter.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroup: string, linkedSubscriptionName: string, resource: Models.LinkedSubscriptionParameter, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LinkedSubscription>): void;
  update(resourceGroup: string, linkedSubscriptionName: string, resource: Models.LinkedSubscriptionParameter, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LinkedSubscription>, callback?: msRest.ServiceCallback<Models.LinkedSubscription>): Promise<Models.LinkedSubscriptionsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroup,
        linkedSubscriptionName,
        resource,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.LinkedSubscriptionsUpdateResponse>;
  }

  /**
   * Returns a list of all linked subscriptions under current resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.LinkedSubscriptionsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.LinkedSubscriptionsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.LinkedSubscriptionsList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LinkedSubscriptionsList>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LinkedSubscriptionsList>, callback?: msRest.ServiceCallback<Models.LinkedSubscriptionsList>): Promise<Models.LinkedSubscriptionsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.LinkedSubscriptionsListByResourceGroupNextResponse>;
  }

  /**
   * Returns a list of all linked subscriptions under current subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.LinkedSubscriptionsListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.LinkedSubscriptionsListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.LinkedSubscriptionsList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LinkedSubscriptionsList>): void;
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LinkedSubscriptionsList>, callback?: msRest.ServiceCallback<Models.LinkedSubscriptionsList>): Promise<Models.LinkedSubscriptionsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.LinkedSubscriptionsListBySubscriptionNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/linkedSubscriptions",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroup
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LinkedSubscriptionsList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.AzureStack/linkedSubscriptions",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LinkedSubscriptionsList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/linkedSubscriptions/{linkedSubscriptionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.linkedSubscriptionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LinkedSubscription
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/linkedSubscriptions/{linkedSubscriptionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.linkedSubscriptionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/linkedSubscriptions/{linkedSubscriptionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.linkedSubscriptionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "resource",
    mapper: {
      ...Mappers.LinkedSubscriptionParameter,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.LinkedSubscription
    },
    201: {
      bodyMapper: Mappers.LinkedSubscription
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/linkedSubscriptions/{linkedSubscriptionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.linkedSubscriptionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "resource",
    mapper: {
      ...Mappers.LinkedSubscriptionParameter,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.LinkedSubscription
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LinkedSubscriptionsList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LinkedSubscriptionsList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
