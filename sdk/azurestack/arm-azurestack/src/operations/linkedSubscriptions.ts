/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { LinkedSubscriptions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureStackManagementClient } from "../azureStackManagementClient";
import {
  LinkedSubscription,
  LinkedSubscriptionsListByResourceGroupNextOptionalParams,
  LinkedSubscriptionsListByResourceGroupOptionalParams,
  LinkedSubscriptionsListBySubscriptionNextOptionalParams,
  LinkedSubscriptionsListBySubscriptionOptionalParams,
  LinkedSubscriptionsListByResourceGroupResponse,
  LinkedSubscriptionsListBySubscriptionResponse,
  LinkedSubscriptionsGetOptionalParams,
  LinkedSubscriptionsGetResponse,
  LinkedSubscriptionsDeleteOptionalParams,
  LinkedSubscriptionParameter,
  LinkedSubscriptionsCreateOrUpdateOptionalParams,
  LinkedSubscriptionsCreateOrUpdateResponse,
  LinkedSubscriptionsUpdateOptionalParams,
  LinkedSubscriptionsUpdateResponse,
  LinkedSubscriptionsListByResourceGroupNextResponse,
  LinkedSubscriptionsListBySubscriptionNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing LinkedSubscriptions operations. */
export class LinkedSubscriptionsImpl implements LinkedSubscriptions {
  private readonly client: AzureStackManagementClient;

  /**
   * Initialize a new instance of the class LinkedSubscriptions class.
   * @param client Reference to the service client
   */
  constructor(client: AzureStackManagementClient) {
    this.client = client;
  }

  /**
   * Returns a list of all linked subscriptions under current resource group.
   * @param resourceGroup Name of the resource group.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroup: string,
    options?: LinkedSubscriptionsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<LinkedSubscription> {
    const iter = this.listByResourceGroupPagingAll(resourceGroup, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage(resourceGroup, options);
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroup: string,
    options?: LinkedSubscriptionsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<LinkedSubscription[]> {
    let result = await this._listByResourceGroup(resourceGroup, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroup,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroup: string,
    options?: LinkedSubscriptionsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<LinkedSubscription> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroup,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Returns a list of all linked subscriptions under current subscription.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: LinkedSubscriptionsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<LinkedSubscription> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionPagingPage(options);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: LinkedSubscriptionsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<LinkedSubscription[]> {
    let result = await this._listBySubscription(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: LinkedSubscriptionsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<LinkedSubscription> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Returns a list of all linked subscriptions under current resource group.
   * @param resourceGroup Name of the resource group.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroup: string,
    options?: LinkedSubscriptionsListByResourceGroupOptionalParams
  ): Promise<LinkedSubscriptionsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Returns a list of all linked subscriptions under current subscription.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: LinkedSubscriptionsListBySubscriptionOptionalParams
  ): Promise<LinkedSubscriptionsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * Returns the properties of a Linked Subscription resource.
   * @param resourceGroup Name of the resource group.
   * @param linkedSubscriptionName Name of the Linked Subscription resource.
   * @param options The options parameters.
   */
  get(
    resourceGroup: string,
    linkedSubscriptionName: string,
    options?: LinkedSubscriptionsGetOptionalParams
  ): Promise<LinkedSubscriptionsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, linkedSubscriptionName, options },
      getOperationSpec
    );
  }

  /**
   * Delete the requested Linked Subscription resource.
   * @param resourceGroup Name of the resource group.
   * @param linkedSubscriptionName Name of the Linked Subscription resource.
   * @param options The options parameters.
   */
  delete(
    resourceGroup: string,
    linkedSubscriptionName: string,
    options?: LinkedSubscriptionsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroup, linkedSubscriptionName, options },
      deleteOperationSpec
    );
  }

  /**
   * Create or update a linked subscription resource.
   * @param resourceGroup Name of the resource group.
   * @param linkedSubscriptionName Name of the Linked Subscription resource.
   * @param resource Linked subscription resource parameter.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroup: string,
    linkedSubscriptionName: string,
    resource: LinkedSubscriptionParameter,
    options?: LinkedSubscriptionsCreateOrUpdateOptionalParams
  ): Promise<LinkedSubscriptionsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, linkedSubscriptionName, resource, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Patch a Linked Subscription resource.
   * @param resourceGroup Name of the resource group.
   * @param linkedSubscriptionName Name of the Linked Subscription resource.
   * @param resource Linked subscription resource parameter.
   * @param options The options parameters.
   */
  update(
    resourceGroup: string,
    linkedSubscriptionName: string,
    resource: LinkedSubscriptionParameter,
    options?: LinkedSubscriptionsUpdateOptionalParams
  ): Promise<LinkedSubscriptionsUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, linkedSubscriptionName, resource, options },
      updateOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroup Name of the resource group.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroup: string,
    nextLink: string,
    options?: LinkedSubscriptionsListByResourceGroupNextOptionalParams
  ): Promise<LinkedSubscriptionsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: LinkedSubscriptionsListBySubscriptionNextOptionalParams
  ): Promise<LinkedSubscriptionsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/linkedSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LinkedSubscriptionsList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.AzureStack/linkedSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LinkedSubscriptionsList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/linkedSubscriptions/{linkedSubscriptionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LinkedSubscription
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.linkedSubscriptionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/linkedSubscriptions/{linkedSubscriptionName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.linkedSubscriptionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/linkedSubscriptions/{linkedSubscriptionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.LinkedSubscription
    },
    201: {
      bodyMapper: Mappers.LinkedSubscription
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.resource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.linkedSubscriptionName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/linkedSubscriptions/{linkedSubscriptionName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.LinkedSubscription
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.resource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.linkedSubscriptionName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LinkedSubscriptionsList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroup
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LinkedSubscriptionsList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
