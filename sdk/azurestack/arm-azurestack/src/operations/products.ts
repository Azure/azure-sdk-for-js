/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Products } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureStackManagementClient } from "../azureStackManagementClient";
import {
  Product,
  ProductsListNextOptionalParams,
  ProductsListOptionalParams,
  ProductsListResponse,
  ProductsGetOptionalParams,
  ProductsGetResponse,
  ProductsListDetailsOptionalParams,
  ProductsListDetailsResponse,
  ProductsGetProductsOptionalParams,
  ProductsGetProductsResponse,
  ProductsGetProductOptionalParams,
  ProductsGetProductResponse,
  ProductsUploadLogOptionalParams,
  ProductsUploadLogResponse,
  ProductsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Products operations. */
export class ProductsImpl implements Products {
  private readonly client: AzureStackManagementClient;

  /**
   * Initialize a new instance of the class Products class.
   * @param client Reference to the service client
   */
  constructor(client: AzureStackManagementClient) {
    this.client = client;
  }

  /**
   * Returns a list of products.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param options The options parameters.
   */
  public list(
    resourceGroup: string,
    registrationName: string,
    options?: ProductsListOptionalParams
  ): PagedAsyncIterableIterator<Product> {
    const iter = this.listPagingAll(resourceGroup, registrationName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(resourceGroup, registrationName, options);
      }
    };
  }

  private async *listPagingPage(
    resourceGroup: string,
    registrationName: string,
    options?: ProductsListOptionalParams
  ): AsyncIterableIterator<Product[]> {
    let result = await this._list(resourceGroup, registrationName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(
        resourceGroup,
        registrationName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    resourceGroup: string,
    registrationName: string,
    options?: ProductsListOptionalParams
  ): AsyncIterableIterator<Product> {
    for await (const page of this.listPagingPage(
      resourceGroup,
      registrationName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Returns a list of products.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param options The options parameters.
   */
  private _list(
    resourceGroup: string,
    registrationName: string,
    options?: ProductsListOptionalParams
  ): Promise<ProductsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, registrationName, options },
      listOperationSpec
    );
  }

  /**
   * Returns the specified product.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param productName Name of the product.
   * @param options The options parameters.
   */
  get(
    resourceGroup: string,
    registrationName: string,
    productName: string,
    options?: ProductsGetOptionalParams
  ): Promise<ProductsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, registrationName, productName, options },
      getOperationSpec
    );
  }

  /**
   * Returns the extended properties of a product.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param productName Name of the product.
   * @param options The options parameters.
   */
  listDetails(
    resourceGroup: string,
    registrationName: string,
    productName: string,
    options?: ProductsListDetailsOptionalParams
  ): Promise<ProductsListDetailsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, registrationName, productName, options },
      listDetailsOperationSpec
    );
  }

  /**
   * Returns a list of products.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param productName Name of the product.
   * @param options The options parameters.
   */
  getProducts(
    resourceGroup: string,
    registrationName: string,
    productName: string,
    options?: ProductsGetProductsOptionalParams
  ): Promise<ProductsGetProductsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, registrationName, productName, options },
      getProductsOperationSpec
    );
  }

  /**
   * Returns the specified product.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param productName Name of the product.
   * @param options The options parameters.
   */
  getProduct(
    resourceGroup: string,
    registrationName: string,
    productName: string,
    options?: ProductsGetProductOptionalParams
  ): Promise<ProductsGetProductResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, registrationName, productName, options },
      getProductOperationSpec
    );
  }

  /**
   * Returns the specified product.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param productName Name of the product.
   * @param options The options parameters.
   */
  uploadLog(
    resourceGroup: string,
    registrationName: string,
    productName: string,
    options?: ProductsUploadLogOptionalParams
  ): Promise<ProductsUploadLogResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, registrationName, productName, options },
      uploadLogOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroup: string,
    registrationName: string,
    nextLink: string,
    options?: ProductsListNextOptionalParams
  ): Promise<ProductsListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, registrationName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName,
    Parameters.productName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listDetailsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}/listDetails",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ExtendedProduct
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName,
    Parameters.productName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getProductsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}/getProducts",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ProductList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.deviceConfiguration,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName,
    Parameters.productName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getProductOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}/getProduct",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Product
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.deviceConfiguration,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName,
    Parameters.productName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const uploadLogOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}/uploadProductLog",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ProductLog
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.marketplaceProductLogUpdate,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName,
    Parameters.productName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProductList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
