/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Registrations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureStackManagementClient } from "../azureStackManagementClient";
import {
  Registration,
  RegistrationsListNextOptionalParams,
  RegistrationsListOptionalParams,
  RegistrationsListBySubscriptionNextOptionalParams,
  RegistrationsListBySubscriptionOptionalParams,
  RegistrationsListResponse,
  RegistrationsListBySubscriptionResponse,
  RegistrationsGetOptionalParams,
  RegistrationsGetResponse,
  RegistrationsDeleteOptionalParams,
  RegistrationParameter,
  RegistrationsCreateOrUpdateOptionalParams,
  RegistrationsCreateOrUpdateResponse,
  RegistrationsUpdateOptionalParams,
  RegistrationsUpdateResponse,
  RegistrationsGetActivationKeyOptionalParams,
  RegistrationsGetActivationKeyResponse,
  RegistrationsEnableRemoteManagementOptionalParams,
  RegistrationsListNextResponse,
  RegistrationsListBySubscriptionNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Registrations operations. */
export class RegistrationsImpl implements Registrations {
  private readonly client: AzureStackManagementClient;

  /**
   * Initialize a new instance of the class Registrations class.
   * @param client Reference to the service client
   */
  constructor(client: AzureStackManagementClient) {
    this.client = client;
  }

  /**
   * Returns a list of all registrations.
   * @param resourceGroup Name of the resource group.
   * @param options The options parameters.
   */
  public list(
    resourceGroup: string,
    options?: RegistrationsListOptionalParams
  ): PagedAsyncIterableIterator<Registration> {
    const iter = this.listPagingAll(resourceGroup, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(resourceGroup, options);
      }
    };
  }

  private async *listPagingPage(
    resourceGroup: string,
    options?: RegistrationsListOptionalParams
  ): AsyncIterableIterator<Registration[]> {
    let result = await this._list(resourceGroup, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(resourceGroup, continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    resourceGroup: string,
    options?: RegistrationsListOptionalParams
  ): AsyncIterableIterator<Registration> {
    for await (const page of this.listPagingPage(resourceGroup, options)) {
      yield* page;
    }
  }

  /**
   * Returns a list of all registrations under current subscription.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: RegistrationsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<Registration> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionPagingPage(options);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: RegistrationsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<Registration[]> {
    let result = await this._listBySubscription(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: RegistrationsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<Registration> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Returns a list of all registrations.
   * @param resourceGroup Name of the resource group.
   * @param options The options parameters.
   */
  private _list(
    resourceGroup: string,
    options?: RegistrationsListOptionalParams
  ): Promise<RegistrationsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, options },
      listOperationSpec
    );
  }

  /**
   * Returns a list of all registrations under current subscription.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: RegistrationsListBySubscriptionOptionalParams
  ): Promise<RegistrationsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * Returns the properties of an Azure Stack registration.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param options The options parameters.
   */
  get(
    resourceGroup: string,
    registrationName: string,
    options?: RegistrationsGetOptionalParams
  ): Promise<RegistrationsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, registrationName, options },
      getOperationSpec
    );
  }

  /**
   * Delete the requested Azure Stack registration.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param options The options parameters.
   */
  delete(
    resourceGroup: string,
    registrationName: string,
    options?: RegistrationsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroup, registrationName, options },
      deleteOperationSpec
    );
  }

  /**
   * Create or update an Azure Stack registration.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param token Registration token
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroup: string,
    registrationName: string,
    token: RegistrationParameter,
    options?: RegistrationsCreateOrUpdateOptionalParams
  ): Promise<RegistrationsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, registrationName, token, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Patch an Azure Stack registration.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param token Registration token
   * @param options The options parameters.
   */
  update(
    resourceGroup: string,
    registrationName: string,
    token: RegistrationParameter,
    options?: RegistrationsUpdateOptionalParams
  ): Promise<RegistrationsUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, registrationName, token, options },
      updateOperationSpec
    );
  }

  /**
   * Returns Azure Stack Activation Key.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param options The options parameters.
   */
  getActivationKey(
    resourceGroup: string,
    registrationName: string,
    options?: RegistrationsGetActivationKeyOptionalParams
  ): Promise<RegistrationsGetActivationKeyResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, registrationName, options },
      getActivationKeyOperationSpec
    );
  }

  /**
   * Enables remote management for device under the Azure Stack registration.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param options The options parameters.
   */
  enableRemoteManagement(
    resourceGroup: string,
    registrationName: string,
    options?: RegistrationsEnableRemoteManagementOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroup, registrationName, options },
      enableRemoteManagementOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroup Name of the resource group.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroup: string,
    nextLink: string,
    options?: RegistrationsListNextOptionalParams
  ): Promise<RegistrationsListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, nextLink, options },
      listNextOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: RegistrationsListBySubscriptionNextOptionalParams
  ): Promise<RegistrationsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RegistrationList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.AzureStack/registrations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RegistrationList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Registration
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Registration
    },
    201: {
      bodyMapper: Mappers.Registration
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.token,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Registration
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.token,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getActivationKeyOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/getactivationkey",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ActivationKeyResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const enableRemoteManagementOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/enableRemoteManagement",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RegistrationList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroup
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RegistrationList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
