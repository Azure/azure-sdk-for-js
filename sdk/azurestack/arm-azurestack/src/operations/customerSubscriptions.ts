/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { CustomerSubscriptions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureStackManagementClient } from "../azureStackManagementClient";
import {
  CustomerSubscription,
  CustomerSubscriptionsListNextOptionalParams,
  CustomerSubscriptionsListOptionalParams,
  CustomerSubscriptionsListResponse,
  CustomerSubscriptionsGetOptionalParams,
  CustomerSubscriptionsGetResponse,
  CustomerSubscriptionsDeleteOptionalParams,
  CustomerSubscriptionsCreateOptionalParams,
  CustomerSubscriptionsCreateResponse,
  CustomerSubscriptionsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing CustomerSubscriptions operations. */
export class CustomerSubscriptionsImpl implements CustomerSubscriptions {
  private readonly client: AzureStackManagementClient;

  /**
   * Initialize a new instance of the class CustomerSubscriptions class.
   * @param client Reference to the service client
   */
  constructor(client: AzureStackManagementClient) {
    this.client = client;
  }

  /**
   * Returns a list of products.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param options The options parameters.
   */
  public list(
    resourceGroup: string,
    registrationName: string,
    options?: CustomerSubscriptionsListOptionalParams
  ): PagedAsyncIterableIterator<CustomerSubscription> {
    const iter = this.listPagingAll(resourceGroup, registrationName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(resourceGroup, registrationName, options);
      }
    };
  }

  private async *listPagingPage(
    resourceGroup: string,
    registrationName: string,
    options?: CustomerSubscriptionsListOptionalParams
  ): AsyncIterableIterator<CustomerSubscription[]> {
    let result = await this._list(resourceGroup, registrationName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(
        resourceGroup,
        registrationName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    resourceGroup: string,
    registrationName: string,
    options?: CustomerSubscriptionsListOptionalParams
  ): AsyncIterableIterator<CustomerSubscription> {
    for await (const page of this.listPagingPage(
      resourceGroup,
      registrationName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Returns a list of products.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param options The options parameters.
   */
  private _list(
    resourceGroup: string,
    registrationName: string,
    options?: CustomerSubscriptionsListOptionalParams
  ): Promise<CustomerSubscriptionsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, registrationName, options },
      listOperationSpec
    );
  }

  /**
   * Returns the specified product.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param customerSubscriptionName Name of the product.
   * @param options The options parameters.
   */
  get(
    resourceGroup: string,
    registrationName: string,
    customerSubscriptionName: string,
    options?: CustomerSubscriptionsGetOptionalParams
  ): Promise<CustomerSubscriptionsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, registrationName, customerSubscriptionName, options },
      getOperationSpec
    );
  }

  /**
   * Deletes a customer subscription under a registration.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param customerSubscriptionName Name of the product.
   * @param options The options parameters.
   */
  delete(
    resourceGroup: string,
    registrationName: string,
    customerSubscriptionName: string,
    options?: CustomerSubscriptionsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroup, registrationName, customerSubscriptionName, options },
      deleteOperationSpec
    );
  }

  /**
   * Creates a new customer subscription under a registration.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param customerSubscriptionName Name of the product.
   * @param customerCreationParameters Parameters use to create a customer subscription.
   * @param options The options parameters.
   */
  create(
    resourceGroup: string,
    registrationName: string,
    customerSubscriptionName: string,
    customerCreationParameters: CustomerSubscription,
    options?: CustomerSubscriptionsCreateOptionalParams
  ): Promise<CustomerSubscriptionsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroup,
        registrationName,
        customerSubscriptionName,
        customerCreationParameters,
        options
      },
      createOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroup: string,
    registrationName: string,
    nextLink: string,
    options?: CustomerSubscriptionsListNextOptionalParams
  ): Promise<CustomerSubscriptionsListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, registrationName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/customerSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomerSubscriptionList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/customerSubscriptions/{customerSubscriptionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomerSubscription
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName,
    Parameters.customerSubscriptionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/customerSubscriptions/{customerSubscriptionName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName,
    Parameters.customerSubscriptionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/customerSubscriptions/{customerSubscriptionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.CustomerSubscription
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.customerCreationParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName,
    Parameters.customerSubscriptionName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomerSubscriptionList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
