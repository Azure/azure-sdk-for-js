/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError } from "@azure/ms-rest-azure-js";

export { BaseResource, CloudError };

/**
 * Schema of the Data property of an EventGridEvent for an Microsoft.Storage.BlobCreated event.
 */
export interface StorageBlobCreatedEventData {
  /**
   * The name of the API/operation that triggered this event.
   */
  api?: string;
  /**
   * A request id provided by the client of the storage API operation that triggered this event.
   */
  clientRequestId?: string;
  /**
   * The request id generated by the Storage service for the storage API operation that triggered
   * this event.
   */
  requestId?: string;
  /**
   * The etag of the blob at the time this event was triggered.
   */
  eTag?: string;
  /**
   * The content type of the blob. This is the same as what would be returned in the Content-Type
   * header from the blob.
   */
  contentType?: string;
  /**
   * The size of the blob in bytes. This is the same as what would be returned in the
   * Content-Length header from the blob.
   */
  contentLength?: number;
  /**
   * The offset of the blob in bytes.
   */
  contentOffset?: number;
  /**
   * The type of blob.
   */
  blobType?: string;
  /**
   * The path to the blob.
   */
  url?: string;
  /**
   * An opaque string value representing the logical sequence of events for any particular blob
   * name. Users can use standard string comparison to understand the relative sequence of two
   * events on the same blob name.
   */
  sequencer?: string;
  /**
   * The identity of the requester that triggered this event.
   */
  identity?: string;
  /**
   * For service use only. Diagnostic data occasionally included by the Azure Storage service. This
   * property should be ignored by event consumers.
   */
  storageDiagnostics?: any;
}

/**
 * Schema of the Data property of an EventGridEvent for an Microsoft.Storage.BlobDeleted event.
 */
export interface StorageBlobDeletedEventData {
  /**
   * The name of the API/operation that triggered this event.
   */
  api?: string;
  /**
   * A request id provided by the client of the storage API operation that triggered this event.
   */
  clientRequestId?: string;
  /**
   * The request id generated by the Storage service for the storage API operation that triggered
   * this event.
   */
  requestId?: string;
  /**
   * The content type of the blob. This is the same as what would be returned in the Content-Type
   * header from the blob.
   */
  contentType?: string;
  /**
   * The type of blob.
   */
  blobType?: string;
  /**
   * The path to the blob.
   */
  url?: string;
  /**
   * An opaque string value representing the logical sequence of events for any particular blob
   * name. Users can use standard string comparison to understand the relative sequence of two
   * events on the same blob name.
   */
  sequencer?: string;
  /**
   * The identity of the requester that triggered this event.
   */
  identity?: string;
  /**
   * For service use only. Diagnostic data occasionally included by the Azure Storage service. This
   * property should be ignored by event consumers.
   */
  storageDiagnostics?: any;
}

/**
 * Schema of the Data property of an EventGridEvent for an Microsoft.Storage.DirectoryCreated
 * event.
 */
export interface StorageDirectoryCreatedEventData {
  /**
   * The name of the API/operation that triggered this event.
   */
  api?: string;
  /**
   * A request id provided by the client of the storage API operation that triggered this event.
   */
  clientRequestId?: string;
  /**
   * The request id generated by the storage service for the storage API operation that triggered
   * this event.
   */
  requestId?: string;
  /**
   * The etag of the directory at the time this event was triggered.
   */
  eTag?: string;
  /**
   * The path to the directory.
   */
  url?: string;
  /**
   * An opaque string value representing the logical sequence of events for any particular
   * directory name. Users can use standard string comparison to understand the relative sequence
   * of two events on the same directory name.
   */
  sequencer?: string;
  /**
   * The identity of the requester that triggered this event.
   */
  identity?: string;
  /**
   * For service use only. Diagnostic data occasionally included by the Azure Storage service. This
   * property should be ignored by event consumers.
   */
  storageDiagnostics?: any;
}

/**
 * Schema of the Data property of an EventGridEvent for an Microsoft.Storage.DirectoryDeleted
 * event.
 */
export interface StorageDirectoryDeletedEventData {
  /**
   * The name of the API/operation that triggered this event.
   */
  api?: string;
  /**
   * A request id provided by the client of the storage API operation that triggered this event.
   */
  clientRequestId?: string;
  /**
   * The request id generated by the storage service for the storage API operation that triggered
   * this event.
   */
  requestId?: string;
  /**
   * The path to the deleted directory.
   */
  url?: string;
  /**
   * Is this event for a recursive delete operation.
   */
  recursive?: boolean;
  /**
   * An opaque string value representing the logical sequence of events for any particular
   * directory name. Users can use standard string comparison to understand the relative sequence
   * of two events on the same directory name.
   */
  sequencer?: string;
  /**
   * The identity of the requester that triggered this event.
   */
  identity?: string;
  /**
   * For service use only. Diagnostic data occasionally included by the Azure Storage service. This
   * property should be ignored by event consumers.
   */
  storageDiagnostics?: any;
}

/**
 * Schema of the Data property of an EventGridEvent for an Microsoft.Storage.BlobRenamed event.
 */
export interface StorageBlobRenamedEventData {
  /**
   * The name of the API/operation that triggered this event.
   */
  api?: string;
  /**
   * A request id provided by the client of the storage API operation that triggered this event.
   */
  clientRequestId?: string;
  /**
   * The request id generated by the storage service for the storage API operation that triggered
   * this event.
   */
  requestId?: string;
  /**
   * The path to the blob that was renamed.
   */
  sourceUrl?: string;
  /**
   * The new path to the blob after the rename operation.
   */
  destinationUrl?: string;
  /**
   * An opaque string value representing the logical sequence of events for any particular blob
   * name. Users can use standard string comparison to understand the relative sequence of two
   * events on the same blob name.
   */
  sequencer?: string;
  /**
   * The identity of the requester that triggered this event.
   */
  identity?: string;
  /**
   * For service use only. Diagnostic data occasionally included by the Azure Storage service. This
   * property should be ignored by event consumers.
   */
  storageDiagnostics?: any;
}

/**
 * Schema of the Data property of an EventGridEvent for an Microsoft.Storage.DirectoryRenamed
 * event.
 */
export interface StorageDirectoryRenamedEventData {
  /**
   * The name of the API/operation that triggered this event.
   */
  api?: string;
  /**
   * A request id provided by the client of the storage API operation that triggered this event.
   */
  clientRequestId?: string;
  /**
   * The request id generated by the storage service for the storage API operation that triggered
   * this event.
   */
  requestId?: string;
  /**
   * The path to the directory that was renamed.
   */
  sourceUrl?: string;
  /**
   * The new path to the directory after the rename operation.
   */
  destinationUrl?: string;
  /**
   * An opaque string value representing the logical sequence of events for any particular
   * directory name. Users can use standard string comparison to understand the relative sequence
   * of two events on the same directory name.
   */
  sequencer?: string;
  /**
   * The identity of the requester that triggered this event.
   */
  identity?: string;
  /**
   * For service use only. Diagnostic data occasionally included by the Azure Storage service. This
   * property should be ignored by event consumers.
   */
  storageDiagnostics?: any;
}

/**
 * Execution statistics of a specific policy action in a Blob Management cycle.
 */
export interface StorageLifecyclePolicyActionSummaryDetail {
  /**
   * Total number of objects to be acted on by this action.
   */
  totalObjectsCount?: number;
  /**
   * Number of success operations of this action.
   */
  successCount?: number;
  /**
   * Error messages of this action if any.
   */
  errorList?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for an
 * Microsoft.Storage.LifecyclePolicyCompleted event.
 */
export interface StorageLifecyclePolicyCompletedEventData {
  /**
   * The time the policy task was scheduled.
   */
  scheduleTime?: string;
  deleteSummary?: StorageLifecyclePolicyActionSummaryDetail;
  tierToCoolSummary?: StorageLifecyclePolicyActionSummaryDetail;
  tierToArchiveSummary?: StorageLifecyclePolicyActionSummaryDetail;
}

/**
 * Schema of the Data property of an EventGridEvent for an Microsoft.EventHub.CaptureFileCreated
 * event.
 */
export interface EventHubCaptureFileCreatedEventData {
  /**
   * The path to the capture file.
   */
  fileurl?: string;
  /**
   * The file type of the capture file.
   */
  fileType?: string;
  /**
   * The shard ID.
   */
  partitionId?: string;
  /**
   * The file size.
   */
  sizeInBytes?: number;
  /**
   * The number of events in the file.
   */
  eventCount?: number;
  /**
   * The smallest sequence number from the queue.
   */
  firstSequenceNumber?: number;
  /**
   * The last sequence number from the queue.
   */
  lastSequenceNumber?: number;
  /**
   * The first time from the queue.
   */
  firstEnqueueTime?: Date;
  /**
   * The last time from the queue.
   */
  lastEnqueueTime?: Date;
}

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceWriteSuccess
 * event. This is raised when a resource create or update operation succeeds.
 */
export interface ResourceWriteSuccessData {
  /**
   * The tenant ID of the resource.
   */
  tenantId?: string;
  /**
   * The subscription ID of the resource.
   */
  subscriptionId?: string;
  /**
   * The resource group of the resource.
   */
  resourceGroup?: string;
  /**
   * The resource provider performing the operation.
   */
  resourceProvider?: string;
  /**
   * The URI of the resource in the operation.
   */
  resourceUri?: string;
  /**
   * The operation that was performed.
   */
  operationName?: string;
  /**
   * The status of the operation.
   */
  status?: string;
  /**
   * The requested authorization for the operation.
   */
  authorization?: string;
  /**
   * The properties of the claims.
   */
  claims?: string;
  /**
   * An operation ID used for troubleshooting.
   */
  correlationId?: string;
  /**
   * The details of the operation.
   */
  httpRequest?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceWriteFailure
 * event. This is raised when a resource create or update operation fails.
 */
export interface ResourceWriteFailureData {
  /**
   * The tenant ID of the resource.
   */
  tenantId?: string;
  /**
   * The subscription ID of the resource.
   */
  subscriptionId?: string;
  /**
   * The resource group of the resource.
   */
  resourceGroup?: string;
  /**
   * The resource provider performing the operation.
   */
  resourceProvider?: string;
  /**
   * The URI of the resource in the operation.
   */
  resourceUri?: string;
  /**
   * The operation that was performed.
   */
  operationName?: string;
  /**
   * The status of the operation.
   */
  status?: string;
  /**
   * The requested authorization for the operation.
   */
  authorization?: string;
  /**
   * The properties of the claims.
   */
  claims?: string;
  /**
   * An operation ID used for troubleshooting.
   */
  correlationId?: string;
  /**
   * The details of the operation.
   */
  httpRequest?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceWriteCancel
 * event. This is raised when a resource create or update operation is canceled.
 */
export interface ResourceWriteCancelData {
  /**
   * The tenant ID of the resource.
   */
  tenantId?: string;
  /**
   * The subscription ID of the resource.
   */
  subscriptionId?: string;
  /**
   * The resource group of the resource.
   */
  resourceGroup?: string;
  /**
   * The resource provider performing the operation.
   */
  resourceProvider?: string;
  /**
   * The URI of the resource in the operation.
   */
  resourceUri?: string;
  /**
   * The operation that was performed.
   */
  operationName?: string;
  /**
   * The status of the operation.
   */
  status?: string;
  /**
   * The requested authorization for the operation.
   */
  authorization?: string;
  /**
   * The properties of the claims.
   */
  claims?: string;
  /**
   * An operation ID used for troubleshooting.
   */
  correlationId?: string;
  /**
   * The details of the operation.
   */
  httpRequest?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceDeleteSuccess
 * event. This is raised when a resource delete operation succeeds.
 */
export interface ResourceDeleteSuccessData {
  /**
   * The tenant ID of the resource.
   */
  tenantId?: string;
  /**
   * The subscription ID of the resource.
   */
  subscriptionId?: string;
  /**
   * The resource group of the resource.
   */
  resourceGroup?: string;
  /**
   * The resource provider performing the operation.
   */
  resourceProvider?: string;
  /**
   * The URI of the resource in the operation.
   */
  resourceUri?: string;
  /**
   * The operation that was performed.
   */
  operationName?: string;
  /**
   * The status of the operation.
   */
  status?: string;
  /**
   * The requested authorization for the operation.
   */
  authorization?: string;
  /**
   * The properties of the claims.
   */
  claims?: string;
  /**
   * An operation ID used for troubleshooting.
   */
  correlationId?: string;
  /**
   * The details of the operation.
   */
  httpRequest?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceDeleteFailure
 * event. This is raised when a resource delete operation fails.
 */
export interface ResourceDeleteFailureData {
  /**
   * The tenant ID of the resource.
   */
  tenantId?: string;
  /**
   * The subscription ID of the resource.
   */
  subscriptionId?: string;
  /**
   * The resource group of the resource.
   */
  resourceGroup?: string;
  /**
   * The resource provider performing the operation.
   */
  resourceProvider?: string;
  /**
   * The URI of the resource in the operation.
   */
  resourceUri?: string;
  /**
   * The operation that was performed.
   */
  operationName?: string;
  /**
   * The status of the operation.
   */
  status?: string;
  /**
   * The requested authorization for the operation.
   */
  authorization?: string;
  /**
   * The properties of the claims.
   */
  claims?: string;
  /**
   * An operation ID used for troubleshooting.
   */
  correlationId?: string;
  /**
   * The details of the operation.
   */
  httpRequest?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for an Microsoft.Resources.ResourceDeleteCancel
 * event. This is raised when a resource delete operation is canceled.
 */
export interface ResourceDeleteCancelData {
  /**
   * The tenant ID of the resource.
   */
  tenantId?: string;
  /**
   * The subscription ID of the resource.
   */
  subscriptionId?: string;
  /**
   * The resource group of the resource.
   */
  resourceGroup?: string;
  /**
   * The resource provider performing the operation.
   */
  resourceProvider?: string;
  /**
   * The URI of the resource in the operation.
   */
  resourceUri?: string;
  /**
   * The operation that was performed.
   */
  operationName?: string;
  /**
   * The status of the operation.
   */
  status?: string;
  /**
   * The requested authorization for the operation.
   */
  authorization?: string;
  /**
   * The properties of the claims.
   */
  claims?: string;
  /**
   * An operation ID used for troubleshooting.
   */
  correlationId?: string;
  /**
   * The details of the operation.
   */
  httpRequest?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceActionSuccess
 * event. This is raised when a resource action operation succeeds.
 */
export interface ResourceActionSuccessData {
  /**
   * The tenant ID of the resource.
   */
  tenantId?: string;
  /**
   * The subscription ID of the resource.
   */
  subscriptionId?: string;
  /**
   * The resource group of the resource.
   */
  resourceGroup?: string;
  /**
   * The resource provider performing the operation.
   */
  resourceProvider?: string;
  /**
   * The URI of the resource in the operation.
   */
  resourceUri?: string;
  /**
   * The operation that was performed.
   */
  operationName?: string;
  /**
   * The status of the operation.
   */
  status?: string;
  /**
   * The requested authorization for the operation.
   */
  authorization?: string;
  /**
   * The properties of the claims.
   */
  claims?: string;
  /**
   * An operation ID used for troubleshooting.
   */
  correlationId?: string;
  /**
   * The details of the operation.
   */
  httpRequest?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceActionFailure
 * event. This is raised when a resource action operation fails.
 */
export interface ResourceActionFailureData {
  /**
   * The tenant ID of the resource.
   */
  tenantId?: string;
  /**
   * The subscription ID of the resource.
   */
  subscriptionId?: string;
  /**
   * The resource group of the resource.
   */
  resourceGroup?: string;
  /**
   * The resource provider performing the operation.
   */
  resourceProvider?: string;
  /**
   * The URI of the resource in the operation.
   */
  resourceUri?: string;
  /**
   * The operation that was performed.
   */
  operationName?: string;
  /**
   * The status of the operation.
   */
  status?: string;
  /**
   * The requested authorization for the operation.
   */
  authorization?: string;
  /**
   * The properties of the claims.
   */
  claims?: string;
  /**
   * An operation ID used for troubleshooting.
   */
  correlationId?: string;
  /**
   * The details of the operation.
   */
  httpRequest?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for an Microsoft.Resources.ResourceActionCancel
 * event. This is raised when a resource action operation is canceled.
 */
export interface ResourceActionCancelData {
  /**
   * The tenant ID of the resource.
   */
  tenantId?: string;
  /**
   * The subscription ID of the resource.
   */
  subscriptionId?: string;
  /**
   * The resource group of the resource.
   */
  resourceGroup?: string;
  /**
   * The resource provider performing the operation.
   */
  resourceProvider?: string;
  /**
   * The URI of the resource in the operation.
   */
  resourceUri?: string;
  /**
   * The operation that was performed.
   */
  operationName?: string;
  /**
   * The status of the operation.
   */
  status?: string;
  /**
   * The requested authorization for the operation.
   */
  authorization?: string;
  /**
   * The properties of the claims.
   */
  claims?: string;
  /**
   * An operation ID used for troubleshooting.
   */
  correlationId?: string;
  /**
   * The details of the operation.
   */
  httpRequest?: string;
}

/**
 * Properties of an event published to an Event Grid topic.
 */
export interface EventGridEvent {
  /**
   * An unique identifier for the event.
   */
  id: string;
  /**
   * The resource path of the event source.
   */
  topic?: string;
  /**
   * A resource path relative to the topic path.
   */
  subject: string;
  /**
   * Event data specific to the event type.
   */
  data: any;
  /**
   * The type of the event that occurred.
   */
  eventType: string;
  /**
   * The time (in UTC) the event was generated.
   */
  eventTime: Date;
  /**
   * The schema version of the event metadata.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly metadataVersion?: string;
  /**
   * The schema version of the data object.
   */
  dataVersion: string;
}

/**
 * Schema of the Data property of an EventGridEvent for a
 * Microsoft.EventGrid.SubscriptionValidationEvent.
 */
export interface SubscriptionValidationEventData {
  /**
   * The validation code sent by Azure Event Grid to validate an event subscription. To complete
   * the validation handshake, the subscriber must either respond with this validation code as part
   * of the validation response, or perform a GET request on the validationUrl (available starting
   * version 2018-05-01-preview).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validationCode?: string;
  /**
   * The validation URL sent by Azure Event Grid (available starting version 2018-05-01-preview).
   * To complete the validation handshake, the subscriber must either respond with the
   * validationCode as part of the validation response, or perform a GET request on the
   * validationUrl (available starting version 2018-05-01-preview).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validationUrl?: string;
}

/**
 * To complete an event subscription validation handshake, a subscriber can use either the
 * validationCode or the validationUrl received in a SubscriptionValidationEvent. When the
 * validationCode is used, the SubscriptionValidationResponse can be used to build the response.
 */
export interface SubscriptionValidationResponse {
  /**
   * The validation response sent by the subscriber to Azure Event Grid to complete the validation
   * of an event subscription.
   */
  validationResponse?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for a
 * Microsoft.EventGrid.SubscriptionDeletedEvent.
 */
export interface SubscriptionDeletedEventData {
  /**
   * The Azure resource ID of the deleted event subscription.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly eventSubscriptionId?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for a device life cycle event (DeviceCreated,
 * DeviceDeleted).
 */
export interface DeviceLifeCycleEventProperties {
  /**
   * The unique identifier of the device. This case-sensitive string can be up to 128 characters
   * long, and supports ASCII 7-bit alphanumeric characters plus the following special characters:
   * - : . + % _ &#35; * ? ! ( ) , = @ ; $ '.
   */
  deviceId?: string;
  /**
   * Name of the IoT Hub where the device was created or deleted.
   */
  hubName?: string;
  /**
   * Information about the device twin, which is the cloud representation of application device
   * metadata.
   */
  twin?: DeviceTwinInfo;
}

/**
 * Event data for Microsoft.Devices.DeviceCreated event.
 */
export interface IotHubDeviceCreatedEventData extends DeviceLifeCycleEventProperties {
}

/**
 * Event data for Microsoft.Devices.DeviceDeleted event.
 */
export interface IotHubDeviceDeletedEventData extends DeviceLifeCycleEventProperties {
}

/**
 * Schema of the Data property of an EventGridEvent for a device connection state event
 * (DeviceConnected, DeviceDisconnected).
 */
export interface DeviceConnectionStateEventProperties {
  /**
   * The unique identifier of the device. This case-sensitive string can be up to 128 characters
   * long, and supports ASCII 7-bit alphanumeric characters plus the following special characters:
   * - : . + % _ &#35; * ? ! ( ) , = @ ; $ '.
   */
  deviceId?: string;
  /**
   * The unique identifier of the module. This case-sensitive string can be up to 128 characters
   * long, and supports ASCII 7-bit alphanumeric characters plus the following special characters:
   * - : . + % _ &#35; * ? ! ( ) , = @ ; $ '.
   */
  moduleId?: string;
  /**
   * Name of the IoT Hub where the device was created or deleted.
   */
  hubName?: string;
  /**
   * Information about the device connection state event.
   */
  deviceConnectionStateEventInfo?: DeviceConnectionStateEventInfo;
}

/**
 * Event data for Microsoft.Devices.DeviceConnected event.
 */
export interface IotHubDeviceConnectedEventData extends DeviceConnectionStateEventProperties {
}

/**
 * Event data for Microsoft.Devices.DeviceDisconnected event.
 */
export interface IotHubDeviceDisconnectedEventData extends DeviceConnectionStateEventProperties {
}

/**
 * Schema of the Data property of an EventGridEvent for a device telemetry event (DeviceTelemetry).
 */
export interface DeviceTelemetryEventProperties {
  /**
   * The content of the message from the device.
   */
  body?: any;
  /**
   * Application properties are user-defined strings that can be added to the message. These fields
   * are optional.
   */
  properties?: { [propertyName: string]: string };
  /**
   * System properties help identify contents and source of the messages.
   */
  systemProperties?: { [propertyName: string]: string };
}

/**
 * Event data for Microsoft.Devices.DeviceTelemetry event.
 */
export interface IotHubDeviceTelemetryEventData extends DeviceTelemetryEventProperties {
}

/**
 * Metadata information for the properties JSON document.
 */
export interface DeviceTwinMetadata {
  /**
   * The ISO8601 timestamp of the last time the properties were updated.
   */
  lastUpdated?: string;
}

/**
 * A portion of the properties that can be written only by the application back-end, and read by
 * the device.
 */
export interface DeviceTwinProperties {
  /**
   * Metadata information for the properties JSON document.
   */
  metadata?: DeviceTwinMetadata;
  /**
   * Version of device twin properties.
   */
  version?: number;
}

/**
 * Properties JSON element.
 */
export interface DeviceTwinInfoProperties {
  /**
   * A portion of the properties that can be written only by the application back-end, and read by
   * the device.
   */
  desired?: DeviceTwinProperties;
  /**
   * A portion of the properties that can be written only by the device, and read by the
   * application back-end.
   */
  reported?: DeviceTwinProperties;
}

/**
 * The thumbprint is a unique value for the x509 certificate, commonly used to find a particular
 * certificate in a certificate store. The thumbprint is dynamically generated using the SHA1
 * algorithm, and does not physically exist in the certificate.
 */
export interface DeviceTwinInfoX509Thumbprint {
  /**
   * Primary thumbprint for the x509 certificate.
   */
  primaryThumbprint?: string;
  /**
   * Secondary thumbprint for the x509 certificate.
   */
  secondaryThumbprint?: string;
}

/**
 * Information about the device twin, which is the cloud representation of application device
 * metadata.
 */
export interface DeviceTwinInfo {
  /**
   * Authentication type used for this device: either SAS, SelfSigned, or CertificateAuthority.
   */
  authenticationType?: string;
  /**
   * Count of cloud to device messages sent to this device.
   */
  cloudToDeviceMessageCount?: number;
  /**
   * Whether the device is connected or disconnected.
   */
  connectionState?: string;
  /**
   * The unique identifier of the device twin.
   */
  deviceId?: string;
  /**
   * A piece of information that describes the content of the device twin. Each etag is guaranteed
   * to be unique per device twin.
   */
  etag?: string;
  /**
   * The ISO8601 timestamp of the last activity.
   */
  lastActivityTime?: string;
  /**
   * Properties JSON element.
   */
  properties?: DeviceTwinInfoProperties;
  /**
   * Whether the device twin is enabled or disabled.
   */
  status?: string;
  /**
   * The ISO8601 timestamp of the last device twin status update.
   */
  statusUpdateTime?: string;
  /**
   * An integer that is incremented by one each time the device twin is updated.
   */
  version?: number;
  /**
   * The thumbprint is a unique value for the x509 certificate, commonly used to find a particular
   * certificate in a certificate store. The thumbprint is dynamically generated using the SHA1
   * algorithm, and does not physically exist in the certificate.
   */
  x509Thumbprint?: DeviceTwinInfoX509Thumbprint;
}

/**
 * Information about the device connection state event.
 */
export interface DeviceConnectionStateEventInfo {
  /**
   * Sequence number is string representation of a hexadecimal number. string compare can be used
   * to identify the larger number because both in ASCII and HEX numbers come after alphabets. If
   * you are converting the string to hex, then the number is a 256 bit number.
   */
  sequenceNumber?: string;
}

/**
 * The content of the event request message.
 */
export interface ContainerRegistryEventData {
  /**
   * The event ID.
   */
  id?: string;
  /**
   * The time at which the event occurred.
   */
  timestamp?: Date;
  /**
   * The action that encompasses the provided event.
   */
  action?: string;
  /**
   * The target of the event.
   */
  target?: ContainerRegistryEventTarget;
  /**
   * The request that generated the event.
   */
  request?: ContainerRegistryEventRequest;
  /**
   * The agent that initiated the event. For most situations, this could be from the authorization
   * context of the request.
   */
  actor?: ContainerRegistryEventActor;
  /**
   * The registry node that generated the event. Put differently, while the actor initiates the
   * event, the source generates it.
   */
  source?: ContainerRegistryEventSource;
}

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.ContainerRegistry.ImagePushed
 * event.
 */
export interface ContainerRegistryImagePushedEventData extends ContainerRegistryEventData {
}

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.ContainerRegistry.ImageDeleted
 * event.
 */
export interface ContainerRegistryImageDeletedEventData extends ContainerRegistryEventData {
}

/**
 * The content of the event request message.
 */
export interface ContainerRegistryArtifactEventData {
  /**
   * The event ID.
   */
  id?: string;
  /**
   * The time at which the event occurred.
   */
  timestamp?: Date;
  /**
   * The action that encompasses the provided event.
   */
  action?: string;
  /**
   * The target of the event.
   */
  target?: ContainerRegistryArtifactEventTarget;
}

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.ContainerRegistry.ChartPushed
 * event.
 */
export interface ContainerRegistryChartPushedEventData extends ContainerRegistryArtifactEventData {
}

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.ContainerRegistry.ChartDeleted
 * event.
 */
export interface ContainerRegistryChartDeletedEventData extends ContainerRegistryArtifactEventData {
}

/**
 * The target of the event.
 */
export interface ContainerRegistryEventTarget {
  /**
   * The MIME type of the referenced object.
   */
  mediaType?: string;
  /**
   * The number of bytes of the content. Same as Length field.
   */
  size?: number;
  /**
   * The digest of the content, as defined by the Registry V2 HTTP API Specification.
   */
  digest?: string;
  /**
   * The number of bytes of the content. Same as Size field.
   */
  length?: number;
  /**
   * The repository name.
   */
  repository?: string;
  /**
   * The direct URL to the content.
   */
  url?: string;
  /**
   * The tag name.
   */
  tag?: string;
}

/**
 * The request that generated the event.
 */
export interface ContainerRegistryEventRequest {
  /**
   * The ID of the request that initiated the event.
   */
  id?: string;
  /**
   * The IP or hostname and possibly port of the client connection that initiated the event. This
   * is the RemoteAddr from the standard http request.
   */
  addr?: string;
  /**
   * The externally accessible hostname of the registry instance, as specified by the http host
   * header on incoming requests.
   */
  host?: string;
  /**
   * The request method that generated the event.
   */
  method?: string;
  /**
   * The user agent header of the request.
   */
  useragent?: string;
}

/**
 * The agent that initiated the event. For most situations, this could be from the authorization
 * context of the request.
 */
export interface ContainerRegistryEventActor {
  /**
   * The subject or username associated with the request context that generated the event.
   */
  name?: string;
}

/**
 * The registry node that generated the event. Put differently, while the actor initiates the
 * event, the source generates it.
 */
export interface ContainerRegistryEventSource {
  /**
   * The IP or hostname and the port of the registry node that generated the event. Generally, this
   * will be resolved by os.Hostname() along with the running port.
   */
  addr?: string;
  /**
   * The running instance of an application. Changes after each restart.
   */
  instanceID?: string;
}

/**
 * The target of the event.
 */
export interface ContainerRegistryArtifactEventTarget {
  /**
   * The MIME type of the artifact.
   */
  mediaType?: string;
  /**
   * The size in bytes of the artifact.
   */
  size?: number;
  /**
   * The digest of the artifact.
   */
  digest?: string;
  /**
   * The repository name of the artifact.
   */
  repository?: string;
  /**
   * The tag of the artifact.
   */
  tag?: string;
  /**
   * The name of the artifact.
   */
  name?: string;
  /**
   * The version of the artifact.
   */
  version?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for a
 * Microsoft.ServiceBus.ActiveMessagesAvailableWithNoListeners event.
 */
export interface ServiceBusActiveMessagesAvailableWithNoListenersEventData {
  /**
   * The namespace name of the Microsoft.ServiceBus resource.
   */
  namespaceName?: string;
  /**
   * The endpoint of the Microsoft.ServiceBus resource.
   */
  requestUri?: string;
  /**
   * The entity type of the Microsoft.ServiceBus resource. Could be one of 'queue' or 'subscriber'.
   */
  entityType?: string;
  /**
   * The name of the Microsoft.ServiceBus queue. If the entity type is of type 'subscriber', then
   * this value will be null.
   */
  queueName?: string;
  /**
   * The name of the Microsoft.ServiceBus topic. If the entity type is of type 'queue', then this
   * value will be null.
   */
  topicName?: string;
  /**
   * The name of the Microsoft.ServiceBus topic's subscription. If the entity type is of type
   * 'queue', then this value will be null.
   */
  subscriptionName?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for a
 * Microsoft.ServiceBus.DeadletterMessagesAvailableWithNoListenersEvent event.
 */
export interface ServiceBusDeadletterMessagesAvailableWithNoListenersEventData {
  /**
   * The namespace name of the Microsoft.ServiceBus resource.
   */
  namespaceName?: string;
  /**
   * The endpoint of the Microsoft.ServiceBus resource.
   */
  requestUri?: string;
  /**
   * The entity type of the Microsoft.ServiceBus resource. Could be one of 'queue' or 'subscriber'.
   */
  entityType?: string;
  /**
   * The name of the Microsoft.ServiceBus queue. If the entity type is of type 'subscriber', then
   * this value will be null.
   */
  queueName?: string;
  /**
   * The name of the Microsoft.ServiceBus topic. If the entity type is of type 'queue', then this
   * value will be null.
   */
  topicName?: string;
  /**
   * The name of the Microsoft.ServiceBus topic's subscription. If the entity type is of type
   * 'queue', then this value will be null.
   */
  subscriptionName?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Media.JobStateChange event.
 */
export interface MediaJobStateChangeEventData {
  /**
   * The previous state of the Job. Possible values include: 'Canceled', 'Canceling', 'Error',
   * 'Finished', 'Processing', 'Queued', 'Scheduled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly previousState?: MediaJobState;
  /**
   * The new state of the Job. Possible values include: 'Canceled', 'Canceling', 'Error',
   * 'Finished', 'Processing', 'Queued', 'Scheduled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: MediaJobState;
  /**
   * Gets the Job correlation data.
   */
  correlationData?: { [propertyName: string]: string };
}

/**
 * Details of JobOutput errors.
 */
export interface MediaJobErrorDetail {
  /**
   * Code describing the error detail.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly code?: string;
  /**
   * A human-readable representation of the error.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
}

/**
 * Details of JobOutput errors.
 */
export interface MediaJobError {
  /**
   * Error code describing the error. Possible values include: 'ServiceError',
   * 'ServiceTransientError', 'DownloadNotAccessible', 'DownloadTransientError',
   * 'UploadNotAccessible', 'UploadTransientError', 'ConfigurationUnsupported', 'ContentMalformed',
   * 'ContentUnsupported'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly code?: MediaJobErrorCode;
  /**
   * A human-readable language-dependent representation of the error.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * Helps with categorization of errors. Possible values include: 'Service', 'Download', 'Upload',
   * 'Configuration', 'Content'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly category?: MediaJobErrorCategory;
  /**
   * Indicates that it may be possible to retry the Job. If retry is unsuccessful, please contact
   * Azure support via Azure Portal. Possible values include: 'DoNotRetry', 'MayRetry'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly retry?: MediaJobRetry;
  /**
   * An array of details about specific errors that led to this reported error.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly details?: MediaJobErrorDetail[];
}

/**
 * Contains the possible cases for MediaJobOutput.
 */
export type MediaJobOutputUnion = MediaJobOutput | MediaJobOutputAsset;

/**
 * The event data for a Job output.
 */
export interface MediaJobOutput {
  /**
   * Polymorphic Discriminator
   */
  odatatype: "MediaJobOutput";
  /**
   * Gets the Job output error.
   */
  error?: MediaJobError;
  /**
   * Gets the Job output label.
   */
  label?: string;
  /**
   * Gets the Job output progress.
   */
  progress: number;
  /**
   * Gets the Job output state. Possible values include: 'Canceled', 'Canceling', 'Error',
   * 'Finished', 'Processing', 'Queued', 'Scheduled'
   */
  state: MediaJobState;
}

/**
 * The event data for a Job output asset.
 */
export interface MediaJobOutputAsset {
  /**
   * Polymorphic Discriminator
   */
  odatatype: "#Microsoft.Media.JobOutputAsset";
  /**
   * Gets the Job output error.
   */
  error?: MediaJobError;
  /**
   * Gets the Job output label.
   */
  label?: string;
  /**
   * Gets the Job output progress.
   */
  progress: number;
  /**
   * Gets the Job output state. Possible values include: 'Canceled', 'Canceling', 'Error',
   * 'Finished', 'Processing', 'Queued', 'Scheduled'
   */
  state: MediaJobState;
  /**
   * Gets the Job output asset name.
   */
  assetName?: string;
}

/**
 * Job Output Progress Event Data.
 */
export interface MediaJobOutputProgressEventData {
  /**
   * Gets the Job output label.
   */
  label?: string;
  /**
   * Gets the Job output progress.
   */
  progress?: number;
  /**
   * Gets the Job correlation data.
   */
  jobCorrelationData?: { [propertyName: string]: string };
}

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Media.JobOutputStateChange
 * event.
 */
export interface MediaJobOutputStateChangeEventData {
  /**
   * The previous state of the Job. Possible values include: 'Canceled', 'Canceling', 'Error',
   * 'Finished', 'Processing', 'Queued', 'Scheduled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly previousState?: MediaJobState;
  /**
   * Gets the output.
   */
  output?: MediaJobOutputUnion;
  /**
   * Gets the Job correlation data.
   */
  jobCorrelationData?: { [propertyName: string]: string };
}

/**
 * Job scheduled event data
 */
export interface MediaJobScheduledEventData extends MediaJobStateChangeEventData {
}

/**
 * Job processing event data
 */
export interface MediaJobProcessingEventData extends MediaJobStateChangeEventData {
}

/**
 * Job canceling event data
 */
export interface MediaJobCancelingEventData extends MediaJobStateChangeEventData {
}

/**
 * Job finished event data
 */
export interface MediaJobFinishedEventData extends MediaJobStateChangeEventData {
  /**
   * Gets the Job outputs.
   */
  outputs?: MediaJobOutputUnion[];
}

/**
 * Job canceled event data
 */
export interface MediaJobCanceledEventData extends MediaJobStateChangeEventData {
  /**
   * Gets the Job outputs.
   */
  outputs?: MediaJobOutputUnion[];
}

/**
 * Job error state event data
 */
export interface MediaJobErroredEventData extends MediaJobStateChangeEventData {
  /**
   * Gets the Job outputs.
   */
  outputs?: MediaJobOutputUnion[];
}

/**
 * Job output canceled event data
 */
export interface MediaJobOutputCanceledEventData extends MediaJobOutputStateChangeEventData {
}

/**
 * Job output canceling event data
 */
export interface MediaJobOutputCancelingEventData extends MediaJobOutputStateChangeEventData {
}

/**
 * Job output error event data
 */
export interface MediaJobOutputErroredEventData extends MediaJobOutputStateChangeEventData {
}

/**
 * Job output finished event data
 */
export interface MediaJobOutputFinishedEventData extends MediaJobOutputStateChangeEventData {
}

/**
 * Job output processing event data
 */
export interface MediaJobOutputProcessingEventData extends MediaJobOutputStateChangeEventData {
}

/**
 * Job output scheduled event data
 */
export interface MediaJobOutputScheduledEventData extends MediaJobOutputStateChangeEventData {
}

/**
 * Encoder connect event data.
 */
export interface MediaLiveEventEncoderConnectedEventData {
  /**
   * Gets the ingest URL provided by the live event.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly ingestUrl?: string;
  /**
   * Gets the stream Id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly streamId?: string;
  /**
   * Gets the remote IP.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly encoderIp?: string;
  /**
   * Gets the remote port.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly encoderPort?: string;
}

/**
 * Encoder connection rejected event data.
 */
export interface MediaLiveEventConnectionRejectedEventData {
  /**
   * Gets the ingest URL provided by the live event.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly ingestUrl?: string;
  /**
   * Gets the stream Id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly streamId?: string;
  /**
   * Gets the remote IP.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly encoderIp?: string;
  /**
   * Gets the remote port.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly encoderPort?: string;
  /**
   * Gets the result code.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resultCode?: string;
}

/**
 * Encoder disconnected event data.
 */
export interface MediaLiveEventEncoderDisconnectedEventData {
  /**
   * Gets the ingest URL provided by the live event.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly ingestUrl?: string;
  /**
   * Gets the stream Id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly streamId?: string;
  /**
   * Gets the remote IP.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly encoderIp?: string;
  /**
   * Gets the remote port.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly encoderPort?: string;
  /**
   * Gets the result code.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resultCode?: string;
}

/**
 * Encoder connect event data.
 */
export interface MediaLiveEventIncomingStreamReceivedEventData {
  /**
   * Gets the ingest URL provided by the live event.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly ingestUrl?: string;
  /**
   * Gets the type of the track (Audio / Video).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly trackType?: string;
  /**
   * Gets the track name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly trackName?: string;
  /**
   * Gets the bitrate of the track.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly bitrate?: number;
  /**
   * Gets the remote IP.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly encoderIp?: string;
  /**
   * Gets the remote port.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly encoderPort?: string;
  /**
   * Gets the first timestamp of the data chunk received.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly timestamp?: string;
  /**
   * Gets the duration of the first data chunk.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly duration?: string;
  /**
   * Gets the timescale in which timestamp is represented.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly timescale?: string;
}

/**
 * Incoming streams out of sync event data.
 */
export interface MediaLiveEventIncomingStreamsOutOfSyncEventData {
  /**
   * Gets the minimum last timestamp received.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly minLastTimestamp?: string;
  /**
   * Gets the type of stream with minimum last timestamp.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly typeOfStreamWithMinLastTimestamp?: string;
  /**
   * Gets the maximum timestamp among all the tracks (audio or video).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly maxLastTimestamp?: string;
  /**
   * Gets the type of stream with maximum last timestamp.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly typeOfStreamWithMaxLastTimestamp?: string;
  /**
   * Gets the timescale in which "MinLastTimestamp" is represented.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly timescaleOfMinLastTimestamp?: string;
  /**
   * Gets the timescale in which "MaxLastTimestamp" is represented.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly timescaleOfMaxLastTimestamp?: string;
}

/**
 * Incoming video stream out of synch event data.
 */
export interface MediaLiveEventIncomingVideoStreamsOutOfSyncEventData {
  /**
   * Gets the first timestamp received for one of the quality levels.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly firstTimestamp?: string;
  /**
   * Gets the duration of the data chunk with first timestamp.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly firstDuration?: string;
  /**
   * Gets the timestamp received for some other quality levels.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly secondTimestamp?: string;
  /**
   * Gets the duration of the data chunk with second timestamp.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly secondDuration?: string;
  /**
   * Gets the timescale in which both the timestamps and durations are represented.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly timescale?: string;
}

/**
 * Ingest fragment dropped event data.
 */
export interface MediaLiveEventIncomingDataChunkDroppedEventData {
  /**
   * Gets the timestamp of the data chunk dropped.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly timestamp?: string;
  /**
   * Gets the type of the track (Audio / Video).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly trackType?: string;
  /**
   * Gets the bitrate of the track.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly bitrate?: number;
  /**
   * Gets the timescale of the Timestamp.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly timescale?: string;
  /**
   * Gets the result code for fragment drop operation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resultCode?: string;
  /**
   * Gets the name of the track for which fragment is dropped.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly trackName?: string;
}

/**
 * Ingest fragment dropped event data.
 */
export interface MediaLiveEventIngestHeartbeatEventData {
  /**
   * Gets the type of the track (Audio / Video).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly trackType?: string;
  /**
   * Gets the track name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly trackName?: string;
  /**
   * Gets the bitrate of the track.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly bitrate?: number;
  /**
   * Gets the incoming bitrate.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly incomingBitrate?: number;
  /**
   * Gets the last timestamp.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastTimestamp?: string;
  /**
   * Gets the timescale of the last timestamp.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly timescale?: string;
  /**
   * Gets the fragment Overlap count.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly overlapCount?: number;
  /**
   * Gets the fragment Discontinuity count.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly discontinuityCount?: number;
  /**
   * Gets Non increasing count.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nonincreasingCount?: number;
  /**
   * Gets a value indicating whether unexpected bitrate is present or not.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly unexpectedBitrate?: boolean;
  /**
   * Gets the state of the live event.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: string;
  /**
   * Gets a value indicating whether preview is healthy or not.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly healthy?: boolean;
}

/**
 * Ingest track discontinuity detected event data.
 */
export interface MediaLiveEventTrackDiscontinuityDetectedEventData {
  /**
   * Gets the type of the track (Audio / Video).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly trackType?: string;
  /**
   * Gets the track name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly trackName?: string;
  /**
   * Gets the bitrate.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly bitrate?: number;
  /**
   * Gets the timestamp of the previous fragment.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly previousTimestamp?: string;
  /**
   * Gets the timestamp of the current fragment.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly newTimestamp?: string;
  /**
   * Gets the timescale in which both timestamps and discontinuity gap are represented.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly timescale?: string;
  /**
   * Gets the discontinuity gap between PreviousTimestamp and NewTimestamp.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly discontinuityGap?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for a Geofence event (GeofenceEntered,
 * GeofenceExited, GeofenceResult).
 */
export interface MapsGeofenceEventProperties {
  /**
   * Lists of the geometry ID of the geofence which is expired relative to the user time in the
   * request.
   */
  expiredGeofenceGeometryId?: string[];
  /**
   * Lists the fence geometries that either fully contain the coordinate position or have an
   * overlap with the searchBuffer around the fence.
   */
  geometries?: MapsGeofenceGeometry[];
  /**
   * Lists of the geometry ID of the geofence which is in invalid period relative to the user time
   * in the request.
   */
  invalidPeriodGeofenceGeometryId?: string[];
  /**
   * True if at least one event is published to the Azure Maps event subscriber, false if no event
   * is published to the Azure Maps event subscriber.
   */
  isEventPublished?: boolean;
}

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Maps.GeofenceEntered event.
 */
export interface MapsGeofenceEnteredEventData extends MapsGeofenceEventProperties {
}

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Maps.GeofenceExited event.
 */
export interface MapsGeofenceExitedEventData extends MapsGeofenceEventProperties {
}

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Maps.GeofenceResult event.
 */
export interface MapsGeofenceResultEventData extends MapsGeofenceEventProperties {
}

/**
 * The geofence geometry.
 */
export interface MapsGeofenceGeometry {
  /**
   * ID of the device.
   */
  deviceId?: string;
  /**
   * Distance from the coordinate to the closest border of the geofence. Positive means the
   * coordinate is outside of the geofence. If the coordinate is outside of the geofence, but more
   * than the value of searchBuffer away from the closest geofence border, then the value is 999.
   * Negative means the coordinate is inside of the geofence. If the coordinate is inside the
   * polygon, but more than the value of searchBuffer away from the closest geofencing border,then
   * the value is -999. A value of 999 means that there is great confidence the coordinate is well
   * outside the geofence. A value of -999 means that there is great confidence the coordinate is
   * well within the geofence.
   */
  distance?: number;
  /**
   * The unique ID for the geofence geometry.
   */
  geometryId?: string;
  /**
   * Latitude of the nearest point of the geometry.
   */
  nearestLat?: number;
  /**
   * Longitude of the nearest point of the geometry.
   */
  nearestLon?: number;
  /**
   * The unique id returned from user upload service when uploading a geofence. Will not be
   * included in geofencing post API.
   */
  udId?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for an
 * Microsoft.AppConfiguration.KeyValueModified event.
 */
export interface AppConfigurationKeyValueModifiedEventData {
  /**
   * The key used to identify the key-value that was modified.
   */
  key?: string;
  /**
   * The label, if any, used to identify the key-value that was modified.
   */
  label?: string;
  /**
   * The etag representing the new state of the key-value.
   */
  etag?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for an
 * Microsoft.AppConfiguration.KeyValueDeleted event.
 */
export interface AppConfigurationKeyValueDeletedEventData {
  /**
   * The key used to identify the key-value that was deleted.
   */
  key?: string;
  /**
   * The label, if any, used to identify the key-value that was deleted.
   */
  label?: string;
  /**
   * The etag representing the key-value that was deleted.
   */
  etag?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for a
 * Microsoft.SignalRService.ClientConnectionConnected event.
 */
export interface SignalRServiceClientConnectionConnectedEventData {
  /**
   * The time at which the event occurred.
   */
  timestamp?: Date;
  /**
   * The hub of connected client connection.
   */
  hubName?: string;
  /**
   * The connection Id of connected client connection.
   */
  connectionId?: string;
  /**
   * The user Id of connected client connection.
   */
  userId?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for a
 * Microsoft.SignalRService.ClientConnectionDisconnected event.
 */
export interface SignalRServiceClientConnectionDisconnectedEventData {
  /**
   * The time at which the event occurred.
   */
  timestamp?: Date;
  /**
   * The hub of connected client connection.
   */
  hubName?: string;
  /**
   * The connection Id of connected client connection.
   */
  connectionId?: string;
  /**
   * The user Id of connected client connection.
   */
  userId?: string;
  /**
   * The message of error that cause the client connection disconnected.
   */
  errorMessage?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for an CertificateNewVersionCreated event.
 */
export interface KeyVaultCertificateNewVersionCreatedEventData {
  /**
   * The id of the object that triggered this event.
   */
  id?: string;
  /**
   * Key vault name of the object that triggered this event.
   */
  vaultName?: string;
  /**
   * The type of the object that triggered this event
   */
  objectType?: string;
  /**
   * The name of the object that triggered this event
   */
  objectName?: string;
  /**
   * The version of the object that triggered this event
   */
  version?: string;
  /**
   * Not before date of the object that triggered this event
   */
  nbf?: number;
  /**
   * The expiration date of the object that triggered this event
   */
  exp?: number;
}

/**
 * Schema of the Data property of an EventGridEvent for an CertificateNearExpiry event.
 */
export interface KeyVaultCertificateNearExpiryEventData {
  /**
   * The id of the object that triggered this event.
   */
  id?: string;
  /**
   * Key vault name of the object that triggered this event.
   */
  vaultName?: string;
  /**
   * The type of the object that triggered this event
   */
  objectType?: string;
  /**
   * The name of the object that triggered this event
   */
  objectName?: string;
  /**
   * The version of the object that triggered this event
   */
  version?: string;
  /**
   * Not before date of the object that triggered this event
   */
  nbf?: number;
  /**
   * The expiration date of the object that triggered this event
   */
  exp?: number;
}

/**
 * Schema of the Data property of an EventGridEvent for an CertificateExpired event.
 */
export interface KeyVaultCertificateExpiredEventData {
  /**
   * The id of the object that triggered this event.
   */
  id?: string;
  /**
   * Key vault name of the object that triggered this event.
   */
  vaultName?: string;
  /**
   * The type of the object that triggered this event
   */
  objectType?: string;
  /**
   * The name of the object that triggered this event
   */
  objectName?: string;
  /**
   * The version of the object that triggered this event
   */
  version?: string;
  /**
   * Not before date of the object that triggered this event
   */
  nbf?: number;
  /**
   * The expiration date of the object that triggered this event
   */
  exp?: number;
}

/**
 * Schema of the Data property of an EventGridEvent for an KeyNewVersionCreated event.
 */
export interface KeyVaultKeyNewVersionCreatedEventData {
  /**
   * The id of the object that triggered this event.
   */
  id?: string;
  /**
   * Key vault name of the object that triggered this event.
   */
  vaultName?: string;
  /**
   * The type of the object that triggered this event
   */
  objectType?: string;
  /**
   * The name of the object that triggered this event
   */
  objectName?: string;
  /**
   * The version of the object that triggered this event
   */
  version?: string;
  /**
   * Not before date of the object that triggered this event
   */
  nbf?: number;
  /**
   * The expiration date of the object that triggered this event
   */
  exp?: number;
}

/**
 * Schema of the Data property of an EventGridEvent for an KeyNearExpiry event.
 */
export interface KeyVaultKeyNearExpiryEventData {
  /**
   * The id of the object that triggered this event.
   */
  id?: string;
  /**
   * Key vault name of the object that triggered this event.
   */
  vaultName?: string;
  /**
   * The type of the object that triggered this event
   */
  objectType?: string;
  /**
   * The name of the object that triggered this event
   */
  objectName?: string;
  /**
   * The version of the object that triggered this event
   */
  version?: string;
  /**
   * Not before date of the object that triggered this event
   */
  nbf?: number;
  /**
   * The expiration date of the object that triggered this event
   */
  exp?: number;
}

/**
 * Schema of the Data property of an EventGridEvent for an KeyExpired event.
 */
export interface KeyVaultKeyExpiredEventData {
  /**
   * The id of the object that triggered this event.
   */
  id?: string;
  /**
   * Key vault name of the object that triggered this event.
   */
  vaultName?: string;
  /**
   * The type of the object that triggered this event
   */
  objectType?: string;
  /**
   * The name of the object that triggered this event
   */
  objectName?: string;
  /**
   * The version of the object that triggered this event
   */
  version?: string;
  /**
   * Not before date of the object that triggered this event
   */
  nbf?: number;
  /**
   * The expiration date of the object that triggered this event
   */
  exp?: number;
}

/**
 * Schema of the Data property of an EventGridEvent for an SecretNewVersionCreated event.
 */
export interface KeyVaultSecretNewVersionCreatedEventData {
  /**
   * The id of the object that triggered this event.
   */
  id?: string;
  /**
   * Key vault name of the object that triggered this event.
   */
  vaultName?: string;
  /**
   * The type of the object that triggered this event
   */
  objectType?: string;
  /**
   * The name of the object that triggered this event
   */
  objectName?: string;
  /**
   * The version of the object that triggered this event
   */
  version?: string;
  /**
   * Not before date of the object that triggered this event
   */
  nbf?: number;
  /**
   * The expiration date of the object that triggered this event
   */
  exp?: number;
}

/**
 * Schema of the Data property of an EventGridEvent for an SecretNearExpiry event.
 */
export interface KeyVaultSecretNearExpiryEventData {
  /**
   * The id of the object that triggered this event.
   */
  id?: string;
  /**
   * Key vault name of the object that triggered this event.
   */
  vaultName?: string;
  /**
   * The type of the object that triggered this event
   */
  objectType?: string;
  /**
   * The name of the object that triggered this event
   */
  objectName?: string;
  /**
   * The version of the object that triggered this event
   */
  version?: string;
  /**
   * Not before date of the object that triggered this event
   */
  nbf?: number;
  /**
   * The expiration date of the object that triggered this event
   */
  exp?: number;
}

/**
 * Schema of the Data property of an EventGridEvent for an SecretExpired event.
 */
export interface KeyVaultSecretExpiredEventData {
  /**
   * The id of the object that triggered this event.
   */
  id?: string;
  /**
   * Key vault name of the object that triggered this event.
   */
  vaultName?: string;
  /**
   * The type of the object that triggered this event
   */
  objectType?: string;
  /**
   * The name of the object that triggered this event
   */
  objectName?: string;
  /**
   * The version of the object that triggered this event
   */
  version?: string;
  /**
   * Not before date of the object that triggered this event
   */
  nbf?: number;
  /**
   * The expiration date of the object that triggered this event
   */
  exp?: number;
}

/**
 * Schema of the Data property of an EventGridEvent for an
 * Microsoft.MachineLearningServices.ModelRegistered event.
 */
export interface MachineLearningServicesModelRegisteredEventData {
  /**
   * The name of the model that was registered.
   */
  modelName?: string;
  /**
   * The version of the model that was registered.
   */
  modelVersion?: string;
  /**
   * The tags of the model that was registered.
   */
  modelTags?: any;
  /**
   * The properties of the model that was registered.
   */
  modelProperties?: any;
}

/**
 * Schema of the Data property of an EventGridEvent for an
 * Microsoft.MachineLearningServices.ModelDeployed event.
 */
export interface MachineLearningServicesModelDeployedEventData {
  /**
   * The name of the deployed service.
   */
  serviceName?: string;
  /**
   * The compute type (e.g. ACI, AKS) of the deployed service.
   */
  serviceComputeType?: string;
  /**
   * A common separated list of model IDs. The IDs of the models deployed in the service.
   */
  modelIds?: string;
  /**
   * The tags of the deployed service.
   */
  serviceTags?: any;
  /**
   * The properties of the deployed service.
   */
  serviceProperties?: any;
}

/**
 * Schema of the Data property of an EventGridEvent for an
 * Microsoft.MachineLearningServices.RunCompleted event.
 */
export interface MachineLearningServicesRunCompletedEventData {
  /**
   * The ID of the experiment that the run belongs to.
   */
  experimentId?: string;
  /**
   * The name of the experiment that the run belongs to.
   */
  experimentName?: string;
  /**
   * The ID of the Run that was completed.
   */
  runId?: string;
  /**
   * The Run Type of the completed Run.
   */
  runType?: string;
  /**
   * The tags of the completed Run.
   */
  runTags?: any;
  /**
   * The properties of the completed Run.
   */
  runProperties?: any;
}

/**
 * Schema of the Data property of an EventGridEvent for an
 * Microsoft.MachineLearningServices.DatasetDriftDetected event.
 */
export interface MachineLearningServicesDatasetDriftDetectedEventData {
  /**
   * The ID of the data drift monitor that triggered the event.
   */
  dataDriftId?: string;
  /**
   * The name of the data drift monitor that triggered the event.
   */
  dataDriftName?: string;
  /**
   * The ID of the Run that detected data drift.
   */
  runId?: string;
  /**
   * The ID of the base Dataset used to detect drift.
   */
  baseDatasetId?: string;
  /**
   * The ID of the target Dataset used to detect drift.
   */
  targetDatasetId?: string;
  /**
   * The coefficient result that triggered the event.
   */
  driftCoefficient?: number;
  /**
   * The start time of the target dataset time series that resulted in drift detection.
   */
  startTime?: Date;
  /**
   * The end time of the target dataset time series that resulted in drift detection.
   */
  endTime?: Date;
}

/**
 * Schema of the Data property of an EventGridEvent for an
 * Microsoft.MachineLearningServices.RunStatusChanged event.
 */
export interface MachineLearningServicesRunStatusChangedEventData {
  /**
   * The ID of the experiment that the Machine Learning Run belongs to.
   */
  experimentId?: string;
  /**
   * The name of the experiment that the Machine Learning Run belongs to.
   */
  experimentName?: string;
  /**
   * The ID of the Machine Learning Run.
   */
  runId?: string;
  /**
   * The Run Type of the Machine Learning Run.
   */
  runType?: string;
  /**
   * The tags of the Machine Learning Run.
   */
  runTags?: any;
  /**
   * The properties of the Machine Learning Run.
   */
  runProperties?: any;
  /**
   * The status of the Machine Learning Run.
   */
  runStatus?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for an Microsoft.Cache.PatchingCompleted event.
 */
export interface RedisPatchingCompletedEventData {
  /**
   * The time at which the event occurred.
   */
  timestamp?: Date;
  /**
   * The name of this event.
   */
  name?: string;
  /**
   * The status of this event. Failed or  succeeded
   */
  status?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for an Microsoft.Cache.ScalingCompleted event.
 */
export interface RedisScalingCompletedEventData {
  /**
   * The time at which the event occurred.
   */
  timestamp?: Date;
  /**
   * The name of this event.
   */
  name?: string;
  /**
   * The status of this event. Failed or  succeeded
   */
  status?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for an Microsoft.Cache.ExportRDBCompleted
 * event.
 */
export interface RedisExportRDBCompletedEventData {
  /**
   * The time at which the event occurred.
   */
  timestamp?: Date;
  /**
   * The name of this event.
   */
  name?: string;
  /**
   * The status of this event. Failed or  succeeded
   */
  status?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for an Microsoft.Cache.ImportRDBCompleted
 * event.
 */
export interface RedisImportRDBCompletedEventData {
  /**
   * The time at which the event occurred.
   */
  timestamp?: Date;
  /**
   * The name of this event.
   */
  name?: string;
  /**
   * The status of this event. Failed or  succeeded
   */
  status?: string;
}

/**
 * Detail of action on the app.
 */
export interface AppEventTypeDetail {
  /**
   * Type of action of the operation. Possible values include: 'Restarted', 'Stopped',
   * 'ChangedAppSettings', 'Started', 'Completed', 'Failed'
   */
  action?: AppAction;
}

/**
 * Schema of the Data property of an EventGridEvent for an Microsoft.Web.AppUpdated event.
 */
export interface WebAppUpdatedEventData {
  appEventTypeDetail?: AppEventTypeDetail;
  /**
   * name of the web site that had this event.
   */
  name?: string;
  /**
   * The client request id generated by the app service for the site API operation that triggered
   * this event.
   */
  clientRequestId?: string;
  /**
   * The correlation request id generated by the app service for the site API operation that
   * triggered this event.
   */
  correlationRequestId?: string;
  /**
   * The request id generated by the app service for the site API operation that triggered this
   * event.
   */
  requestId?: string;
  /**
   * HTTP request URL of this operation.
   */
  address?: string;
  /**
   * HTTP verb of this operation.
   */
  verb?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for an Microsoft.Web.BackupOperationStarted
 * event.
 */
export interface WebBackupOperationStartedEventData {
  appEventTypeDetail?: AppEventTypeDetail;
  /**
   * name of the web site that had this event.
   */
  name?: string;
  /**
   * The client request id generated by the app service for the site API operation that triggered
   * this event.
   */
  clientRequestId?: string;
  /**
   * The correlation request id generated by the app service for the site API operation that
   * triggered this event.
   */
  correlationRequestId?: string;
  /**
   * The request id generated by the app service for the site API operation that triggered this
   * event.
   */
  requestId?: string;
  /**
   * HTTP request URL of this operation.
   */
  address?: string;
  /**
   * HTTP verb of this operation.
   */
  verb?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for an Microsoft.Web.BackupOperationCompleted
 * event.
 */
export interface WebBackupOperationCompletedEventData {
  appEventTypeDetail?: AppEventTypeDetail;
  /**
   * name of the web site that had this event.
   */
  name?: string;
  /**
   * The client request id generated by the app service for the site API operation that triggered
   * this event.
   */
  clientRequestId?: string;
  /**
   * The correlation request id generated by the app service for the site API operation that
   * triggered this event.
   */
  correlationRequestId?: string;
  /**
   * The request id generated by the app service for the site API operation that triggered this
   * event.
   */
  requestId?: string;
  /**
   * HTTP request URL of this operation.
   */
  address?: string;
  /**
   * HTTP verb of this operation.
   */
  verb?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for an Microsoft.Web.BackupOperationFailed
 * event.
 */
export interface WebBackupOperationFailedEventData {
  appEventTypeDetail?: AppEventTypeDetail;
  /**
   * name of the web site that had this event.
   */
  name?: string;
  /**
   * The client request id generated by the app service for the site API operation that triggered
   * this event.
   */
  clientRequestId?: string;
  /**
   * The correlation request id generated by the app service for the site API operation that
   * triggered this event.
   */
  correlationRequestId?: string;
  /**
   * The request id generated by the app service for the site API operation that triggered this
   * event.
   */
  requestId?: string;
  /**
   * HTTP request URL of this operation.
   */
  address?: string;
  /**
   * HTTP verb of this operation.
   */
  verb?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for an Microsoft.Web.RestoreOperationStarted
 * event.
 */
export interface WebRestoreOperationStartedEventData {
  appEventTypeDetail?: AppEventTypeDetail;
  /**
   * name of the web site that had this event.
   */
  name?: string;
  /**
   * The client request id generated by the app service for the site API operation that triggered
   * this event.
   */
  clientRequestId?: string;
  /**
   * The correlation request id generated by the app service for the site API operation that
   * triggered this event.
   */
  correlationRequestId?: string;
  /**
   * The request id generated by the app service for the site API operation that triggered this
   * event.
   */
  requestId?: string;
  /**
   * HTTP request URL of this operation.
   */
  address?: string;
  /**
   * HTTP verb of this operation.
   */
  verb?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for an Microsoft.Web.RestoreOperationCompleted
 * event.
 */
export interface WebRestoreOperationCompletedEventData {
  appEventTypeDetail?: AppEventTypeDetail;
  /**
   * name of the web site that had this event.
   */
  name?: string;
  /**
   * The client request id generated by the app service for the site API operation that triggered
   * this event.
   */
  clientRequestId?: string;
  /**
   * The correlation request id generated by the app service for the site API operation that
   * triggered this event.
   */
  correlationRequestId?: string;
  /**
   * The request id generated by the app service for the site API operation that triggered this
   * event.
   */
  requestId?: string;
  /**
   * HTTP request URL of this operation.
   */
  address?: string;
  /**
   * HTTP verb of this operation.
   */
  verb?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for an Microsoft.Web.RestoreOperationFailed
 * event.
 */
export interface WebRestoreOperationFailedEventData {
  appEventTypeDetail?: AppEventTypeDetail;
  /**
   * name of the web site that had this event.
   */
  name?: string;
  /**
   * The client request id generated by the app service for the site API operation that triggered
   * this event.
   */
  clientRequestId?: string;
  /**
   * The correlation request id generated by the app service for the site API operation that
   * triggered this event.
   */
  correlationRequestId?: string;
  /**
   * The request id generated by the app service for the site API operation that triggered this
   * event.
   */
  requestId?: string;
  /**
   * HTTP request URL of this operation.
   */
  address?: string;
  /**
   * HTTP verb of this operation.
   */
  verb?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for an Microsoft.Web.SlotSwapStarted event.
 */
export interface WebSlotSwapStartedEventData {
  appEventTypeDetail?: AppEventTypeDetail;
  /**
   * name of the web site that had this event.
   */
  name?: string;
  /**
   * The client request id generated by the app service for the site API operation that triggered
   * this event.
   */
  clientRequestId?: string;
  /**
   * The correlation request id generated by the app service for the site API operation that
   * triggered this event.
   */
  correlationRequestId?: string;
  /**
   * The request id generated by the app service for the site API operation that triggered this
   * event.
   */
  requestId?: string;
  /**
   * HTTP request URL of this operation.
   */
  address?: string;
  /**
   * HTTP verb of this operation.
   */
  verb?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for an Microsoft.Web.SlotSwapCompleted event.
 */
export interface WebSlotSwapCompletedEventData {
  appEventTypeDetail?: AppEventTypeDetail;
  /**
   * name of the web site that had this event.
   */
  name?: string;
  /**
   * The client request id generated by the app service for the site API operation that triggered
   * this event.
   */
  clientRequestId?: string;
  /**
   * The correlation request id generated by the app service for the site API operation that
   * triggered this event.
   */
  correlationRequestId?: string;
  /**
   * The request id generated by the app service for the site API operation that triggered this
   * event.
   */
  requestId?: string;
  /**
   * HTTP request URL of this operation.
   */
  address?: string;
  /**
   * HTTP verb of this operation.
   */
  verb?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for an Microsoft.Web.SlotSwapFailed event.
 */
export interface WebSlotSwapFailedEventData {
  appEventTypeDetail?: AppEventTypeDetail;
  /**
   * name of the web site that had this event.
   */
  name?: string;
  /**
   * The client request id generated by the app service for the site API operation that triggered
   * this event.
   */
  clientRequestId?: string;
  /**
   * The correlation request id generated by the app service for the site API operation that
   * triggered this event.
   */
  correlationRequestId?: string;
  /**
   * The request id generated by the app service for the site API operation that triggered this
   * event.
   */
  requestId?: string;
  /**
   * HTTP request URL of this operation.
   */
  address?: string;
  /**
   * HTTP verb of this operation.
   */
  verb?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for an Microsoft.Web.SlotSwapWithPreviewStarted
 * event.
 */
export interface WebSlotSwapWithPreviewStartedEventData {
  appEventTypeDetail?: AppEventTypeDetail;
  /**
   * name of the web site that had this event.
   */
  name?: string;
  /**
   * The client request id generated by the app service for the site API operation that triggered
   * this event.
   */
  clientRequestId?: string;
  /**
   * The correlation request id generated by the app service for the site API operation that
   * triggered this event.
   */
  correlationRequestId?: string;
  /**
   * The request id generated by the app service for the site API operation that triggered this
   * event.
   */
  requestId?: string;
  /**
   * HTTP request URL of this operation.
   */
  address?: string;
  /**
   * HTTP verb of this operation.
   */
  verb?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for an
 * Microsoft.Web.SlotSwapWithPreviewCancelled event.
 */
export interface WebSlotSwapWithPreviewCancelledEventData {
  appEventTypeDetail?: AppEventTypeDetail;
  /**
   * name of the web site that had this event.
   */
  name?: string;
  /**
   * The client request id generated by the app service for the site API operation that triggered
   * this event.
   */
  clientRequestId?: string;
  /**
   * The correlation request id generated by the app service for the site API operation that
   * triggered this event.
   */
  correlationRequestId?: string;
  /**
   * The request id generated by the app service for the site API operation that triggered this
   * event.
   */
  requestId?: string;
  /**
   * HTTP request URL of this operation.
   */
  address?: string;
  /**
   * HTTP verb of this operation.
   */
  verb?: string;
}

/**
 * Detail of action on the app service plan.
 */
export interface AppServicePlanEventTypeDetail {
  /**
   * Kind of environment where app service plan is. Possible values include: 'Public', 'AseV1',
   * 'AseV2'
   */
  stampKind?: StampKind;
  /**
   * Type of action on the app service plan. Possible values include: 'Updated'
   */
  action?: AppServicePlanAction;
  /**
   * Possible values include: 'Started', 'Completed', 'Failed'
   */
  status?: AsyncStatus;
}

/**
 * sku of app service plan.
 */
export interface WebAppServicePlanUpdatedEventDataSku {
  /**
   * name of app service plan sku.
   */
  name?: string;
  /**
   * tier of app service plan sku.
   */
  tier?: string;
  /**
   * size of app service plan sku.
   */
  size?: string;
  /**
   * family of app service plan sku.
   */
  family?: string;
  /**
   * capacity of app service plan sku.
   */
  capacity?: string;
}

/**
 * Schema of the Data property of an EventGridEvent for an Microsoft.Web.AppServicePlanUpdated
 * event.
 */
export interface WebAppServicePlanUpdatedEventData {
  appServicePlanEventTypeDetail?: AppServicePlanEventTypeDetail;
  /**
   * sku of app service plan.
   */
  sku?: WebAppServicePlanUpdatedEventDataSku;
  /**
   * name of the app service plan that had this event.
   */
  name?: string;
  /**
   * The client request id generated by the app service for the app service plan API operation that
   * triggered this event.
   */
  clientRequestId?: string;
  /**
   * The correlation request id generated by the app service for the app service plan API operation
   * that triggered this event.
   */
  correlationRequestId?: string;
  /**
   * The request id generated by the app service for the app service plan API operation that
   * triggered this event.
   */
  requestId?: string;
  /**
   * HTTP request URL of this operation.
   */
  address?: string;
  /**
   * HTTP verb of this operation.
   */
  verb?: string;
}

/**
 * Defines values for MediaJobState.
 * Possible values include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued',
 * 'Scheduled'
 * @readonly
 * @enum {string}
 */
export type MediaJobState = 'Canceled' | 'Canceling' | 'Error' | 'Finished' | 'Processing' | 'Queued' | 'Scheduled';

/**
 * Defines values for MediaJobErrorCode.
 * Possible values include: 'ServiceError', 'ServiceTransientError', 'DownloadNotAccessible',
 * 'DownloadTransientError', 'UploadNotAccessible', 'UploadTransientError',
 * 'ConfigurationUnsupported', 'ContentMalformed', 'ContentUnsupported'
 * @readonly
 * @enum {string}
 */
export type MediaJobErrorCode = 'ServiceError' | 'ServiceTransientError' | 'DownloadNotAccessible' | 'DownloadTransientError' | 'UploadNotAccessible' | 'UploadTransientError' | 'ConfigurationUnsupported' | 'ContentMalformed' | 'ContentUnsupported';

/**
 * Defines values for MediaJobErrorCategory.
 * Possible values include: 'Service', 'Download', 'Upload', 'Configuration', 'Content'
 * @readonly
 * @enum {string}
 */
export type MediaJobErrorCategory = 'Service' | 'Download' | 'Upload' | 'Configuration' | 'Content';

/**
 * Defines values for MediaJobRetry.
 * Possible values include: 'DoNotRetry', 'MayRetry'
 * @readonly
 * @enum {string}
 */
export type MediaJobRetry = 'DoNotRetry' | 'MayRetry';

/**
 * Defines values for AppAction.
 * Possible values include: 'Restarted', 'Stopped', 'ChangedAppSettings', 'Started', 'Completed',
 * 'Failed'
 * @readonly
 * @enum {string}
 */
export type AppAction = 'Restarted' | 'Stopped' | 'ChangedAppSettings' | 'Started' | 'Completed' | 'Failed';

/**
 * Defines values for StampKind.
 * Possible values include: 'Public', 'AseV1', 'AseV2'
 * @readonly
 * @enum {string}
 */
export type StampKind = 'Public' | 'AseV1' | 'AseV2';

/**
 * Defines values for AppServicePlanAction.
 * Possible values include: 'Updated'
 * @readonly
 * @enum {string}
 */
export type AppServicePlanAction = 'Updated';

/**
 * Defines values for AsyncStatus.
 * Possible values include: 'Started', 'Completed', 'Failed'
 * @readonly
 * @enum {string}
 */
export type AsyncStatus = 'Started' | 'Completed' | 'Failed';
