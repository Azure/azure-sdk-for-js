/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { ServiceClientOptions } from "@azure/core-client";

export type MediaJobOutputUnion = MediaJobOutput | MediaJobOutputAsset;

/** Properties of an event published to an Event Grid topic using the EventGrid Schema. */
export interface EventGridEvent {
  /** An unique identifier for the event. */
  id: string;
  /** The resource path of the event source. */
  topic?: string;
  /** A resource path relative to the topic path. */
  subject: string;
  /** Event data specific to the event type. */
  data: any;
  /** The type of the event that occurred. */
  eventType: string;
  /** The time (in UTC) the event was generated. */
  eventTime: Date;
  /**
   * The schema version of the event metadata.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly metadataVersion?: string;
  /** The schema version of the data object. */
  dataVersion: string;
}

/** Properties of an event published to an Event Grid topic using the CloudEvent 1.0 Schema */
export interface CloudEvent {
  /** Describes unknown properties. The value of an unknown property can be of "any" type. */
  [property: string]: any;
  /** An identifier for the event. The combination of id and source must be unique for each distinct event. */
  id: string;
  /** Identifies the context in which an event happened. The combination of id and source must be unique for each distinct event. */
  source: string;
  /** Event data specific to the event type. */
  data?: any;
  /** Event data specific to the event type, encoded as a base64 string. */
  dataBase64?: Uint8Array;
  /** Type of event related to the originating occurrence. */
  type: string;
  /** The time (in UTC) the event was generated, in RFC3339 format. */
  time?: Date;
  /** The version of the CloudEvents specification which the event uses. */
  specversion: string;
  /** Identifies the schema that data adheres to. */
  dataschema?: string;
  /** Content type of data value. */
  datacontenttype?: string;
  /** This describes the subject of the event in the context of the event producer (identified by source). */
  subject?: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Storage.BlobCreated event. */
export interface StorageBlobCreatedEventData {
  /** The name of the API/operation that triggered this event. */
  api: string;
  /** A request id provided by the client of the storage API operation that triggered this event. */
  clientRequestId: string;
  /** The request id generated by the Storage service for the storage API operation that triggered this event. */
  requestId: string;
  /** The etag of the blob at the time this event was triggered. */
  eTag: string;
  /** The content type of the blob. This is the same as what would be returned in the Content-Type header from the blob. */
  contentType: string;
  /** The size of the blob in bytes. This is the same as what would be returned in the Content-Length header from the blob. */
  contentLength: number;
  /** The offset of the blob in bytes. */
  contentOffset: number;
  /** The type of blob. */
  blobType: string;
  /** The path to the blob. */
  url: string;
  /** An opaque string value representing the logical sequence of events for any particular blob name. Users can use standard string comparison to understand the relative sequence of two events on the same blob name. */
  sequencer: string;
  /** The identity of the requester that triggered this event. */
  identity: string;
  /** For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers. */
  storageDiagnostics: any;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Storage.BlobDeleted event. */
export interface StorageBlobDeletedEventData {
  /** The name of the API/operation that triggered this event. */
  api: string;
  /** A request id provided by the client of the storage API operation that triggered this event. */
  clientRequestId: string;
  /** The request id generated by the Storage service for the storage API operation that triggered this event. */
  requestId: string;
  /** The content type of the blob. This is the same as what would be returned in the Content-Type header from the blob. */
  contentType: string;
  /** The type of blob. */
  blobType: string;
  /** The path to the blob. */
  url: string;
  /** An opaque string value representing the logical sequence of events for any particular blob name. Users can use standard string comparison to understand the relative sequence of two events on the same blob name. */
  sequencer: string;
  /** The identity of the requester that triggered this event. */
  identity: string;
  /** For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers. */
  storageDiagnostics: any;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Storage.DirectoryCreated event. */
export interface StorageDirectoryCreatedEventData {
  /** The name of the API/operation that triggered this event. */
  api: string;
  /** A request id provided by the client of the storage API operation that triggered this event. */
  clientRequestId: string;
  /** The request id generated by the storage service for the storage API operation that triggered this event. */
  requestId: string;
  /** The etag of the directory at the time this event was triggered. */
  eTag: string;
  /** The path to the directory. */
  url: string;
  /** An opaque string value representing the logical sequence of events for any particular directory name. Users can use standard string comparison to understand the relative sequence of two events on the same directory name. */
  sequencer: string;
  /** The identity of the requester that triggered this event. */
  identity: string;
  /** For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers. */
  storageDiagnostics: any;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Storage.DirectoryDeleted event. */
export interface StorageDirectoryDeletedEventData {
  /** The name of the API/operation that triggered this event. */
  api: string;
  /** A request id provided by the client of the storage API operation that triggered this event. */
  clientRequestId: string;
  /** The request id generated by the storage service for the storage API operation that triggered this event. */
  requestId: string;
  /** The path to the deleted directory. */
  url: string;
  /** Is this event for a recursive delete operation. */
  recursive: boolean;
  /** An opaque string value representing the logical sequence of events for any particular directory name. Users can use standard string comparison to understand the relative sequence of two events on the same directory name. */
  sequencer: string;
  /** The identity of the requester that triggered this event. */
  identity: string;
  /** For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers. */
  storageDiagnostics: any;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Storage.BlobRenamed event. */
export interface StorageBlobRenamedEventData {
  /** The name of the API/operation that triggered this event. */
  api: string;
  /** A request id provided by the client of the storage API operation that triggered this event. */
  clientRequestId: string;
  /** The request id generated by the storage service for the storage API operation that triggered this event. */
  requestId: string;
  /** The path to the blob that was renamed. */
  sourceUrl: string;
  /** The new path to the blob after the rename operation. */
  destinationUrl: string;
  /** An opaque string value representing the logical sequence of events for any particular blob name. Users can use standard string comparison to understand the relative sequence of two events on the same blob name. */
  sequencer: string;
  /** The identity of the requester that triggered this event. */
  identity: string;
  /** For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers. */
  storageDiagnostics: any;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Storage.DirectoryRenamed event. */
export interface StorageDirectoryRenamedEventData {
  /** The name of the API/operation that triggered this event. */
  api: string;
  /** A request id provided by the client of the storage API operation that triggered this event. */
  clientRequestId: string;
  /** The request id generated by the storage service for the storage API operation that triggered this event. */
  requestId: string;
  /** The path to the directory that was renamed. */
  sourceUrl: string;
  /** The new path to the directory after the rename operation. */
  destinationUrl: string;
  /** An opaque string value representing the logical sequence of events for any particular directory name. Users can use standard string comparison to understand the relative sequence of two events on the same directory name. */
  sequencer: string;
  /** The identity of the requester that triggered this event. */
  identity: string;
  /** For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers. */
  storageDiagnostics: any;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Storage.LifecyclePolicyCompleted event. */
export interface StorageLifecyclePolicyCompletedEventData {
  /** The time the policy task was scheduled. */
  scheduleTime: string;
  /** Execution statistics of a specific policy action in a Blob Management cycle. */
  deleteSummary: StorageLifecyclePolicyActionSummaryDetail;
  /** Execution statistics of a specific policy action in a Blob Management cycle. */
  tierToCoolSummary: StorageLifecyclePolicyActionSummaryDetail;
  /** Execution statistics of a specific policy action in a Blob Management cycle. */
  tierToArchiveSummary: StorageLifecyclePolicyActionSummaryDetail;
}

/** Execution statistics of a specific policy action in a Blob Management cycle. */
export interface StorageLifecyclePolicyActionSummaryDetail {
  /** Total number of objects to be acted on by this action. */
  totalObjectsCount: number;
  /** Number of success operations of this action. */
  successCount: number;
  /** Error messages of this action if any. */
  errorList: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Storage.BlobTierChanged event. */
export interface StorageBlobTierChangedEventData {
  /** The name of the API/operation that triggered this event. */
  api: string;
  /** A request id provided by the client of the storage API operation that triggered this event. */
  clientRequestId: string;
  /** The request id generated by the Storage service for the storage API operation that triggered this event. */
  requestId: string;
  /** The content type of the blob. This is the same as what would be returned in the Content-Type header from the blob. */
  contentType: string;
  /** The size of the blob in bytes. This is the same as what would be returned in the Content-Length header from the blob. */
  contentLength: number;
  /** The type of blob. */
  blobType: string;
  /** The path to the blob. */
  url: string;
  /** An opaque string value representing the logical sequence of events for any particular blob name. Users can use standard string comparison to understand the relative sequence of two events on the same blob name. */
  sequencer: string;
  /** The identity of the requester that triggered this event. */
  identity: string;
  /** For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers. */
  storageDiagnostics: any;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Storage.AsyncOperationInitiated event. */
export interface StorageAsyncOperationInitiatedEventData {
  /** The name of the API/operation that triggered this event. */
  api: string;
  /** A request id provided by the client of the storage API operation that triggered this event. */
  clientRequestId: string;
  /** The request id generated by the Storage service for the storage API operation that triggered this event. */
  requestId: string;
  /** The content type of the blob. This is the same as what would be returned in the Content-Type header from the blob. */
  contentType: string;
  /** The size of the blob in bytes. This is the same as what would be returned in the Content-Length header from the blob. */
  contentLength: number;
  /** The type of blob. */
  blobType: string;
  /** The path to the blob. */
  url: string;
  /** An opaque string value representing the logical sequence of events for any particular blob name. Users can use standard string comparison to understand the relative sequence of two events on the same blob name. */
  sequencer: string;
  /** The identity of the requester that triggered this event. */
  identity: string;
  /** For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers. */
  storageDiagnostics: any;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.EventHub.CaptureFileCreated event. */
export interface EventHubCaptureFileCreatedEventData {
  /** The path to the capture file. */
  fileurl: string;
  /** The file type of the capture file. */
  fileType: string;
  /** The shard ID. */
  partitionId: string;
  /** The file size. */
  sizeInBytes: number;
  /** The number of events in the file. */
  eventCount: number;
  /** The smallest sequence number from the queue. */
  firstSequenceNumber: number;
  /** The last sequence number from the queue. */
  lastSequenceNumber: number;
  /** The first time from the queue. */
  firstEnqueueTime: string;
  /** The last time from the queue. */
  lastEnqueueTime: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceWriteSuccess event. This is raised when a resource create or update operation succeeds. */
export interface ResourceWriteSuccessEventData {
  /** The tenant ID of the resource. */
  tenantId: string;
  /** The subscription ID of the resource. */
  subscriptionId: string;
  /** The resource group of the resource. */
  resourceGroup: string;
  /** The resource provider performing the operation. */
  resourceProvider: string;
  /** The URI of the resource in the operation. */
  resourceUri: string;
  /** The operation that was performed. */
  operationName: string;
  /** The status of the operation. */
  status: string;
  /** The requested authorization for the operation. */
  authorization: string;
  /** The properties of the claims. */
  claims: string;
  /** An operation ID used for troubleshooting. */
  correlationId: string;
  /** The details of the operation. */
  httpRequest: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceWriteFailure event. This is raised when a resource create or update operation fails. */
export interface ResourceWriteFailureEventData {
  /** The tenant ID of the resource. */
  tenantId: string;
  /** The subscription ID of the resource. */
  subscriptionId: string;
  /** The resource group of the resource. */
  resourceGroup: string;
  /** The resource provider performing the operation. */
  resourceProvider: string;
  /** The URI of the resource in the operation. */
  resourceUri: string;
  /** The operation that was performed. */
  operationName: string;
  /** The status of the operation. */
  status: string;
  /** The requested authorization for the operation. */
  authorization: string;
  /** The properties of the claims. */
  claims: string;
  /** An operation ID used for troubleshooting. */
  correlationId: string;
  /** The details of the operation. */
  httpRequest: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceWriteCancel event. This is raised when a resource create or update operation is canceled. */
export interface ResourceWriteCancelEventData {
  /** The tenant ID of the resource. */
  tenantId: string;
  /** The subscription ID of the resource. */
  subscriptionId: string;
  /** The resource group of the resource. */
  resourceGroup: string;
  /** The resource provider performing the operation. */
  resourceProvider: string;
  /** The URI of the resource in the operation. */
  resourceUri: string;
  /** The operation that was performed. */
  operationName: string;
  /** The status of the operation. */
  status: string;
  /** The requested authorization for the operation. */
  authorization: string;
  /** The properties of the claims. */
  claims: string;
  /** An operation ID used for troubleshooting. */
  correlationId: string;
  /** The details of the operation. */
  httpRequest: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceDeleteSuccess event. This is raised when a resource delete operation succeeds. */
export interface ResourceDeleteSuccessEventData {
  /** The tenant ID of the resource. */
  tenantId: string;
  /** The subscription ID of the resource. */
  subscriptionId: string;
  /** The resource group of the resource. */
  resourceGroup: string;
  /** The resource provider performing the operation. */
  resourceProvider: string;
  /** The URI of the resource in the operation. */
  resourceUri: string;
  /** The operation that was performed. */
  operationName: string;
  /** The status of the operation. */
  status: string;
  /** The requested authorization for the operation. */
  authorization: string;
  /** The properties of the claims. */
  claims: string;
  /** An operation ID used for troubleshooting. */
  correlationId: string;
  /** The details of the operation. */
  httpRequest: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceDeleteFailure event. This is raised when a resource delete operation fails. */
export interface ResourceDeleteFailureEventData {
  /** The tenant ID of the resource. */
  tenantId: string;
  /** The subscription ID of the resource. */
  subscriptionId: string;
  /** The resource group of the resource. */
  resourceGroup: string;
  /** The resource provider performing the operation. */
  resourceProvider: string;
  /** The URI of the resource in the operation. */
  resourceUri: string;
  /** The operation that was performed. */
  operationName: string;
  /** The status of the operation. */
  status: string;
  /** The requested authorization for the operation. */
  authorization: string;
  /** The properties of the claims. */
  claims: string;
  /** An operation ID used for troubleshooting. */
  correlationId: string;
  /** The details of the operation. */
  httpRequest: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceDeleteCancel event. This is raised when a resource delete operation is canceled. */
export interface ResourceDeleteCancelEventData {
  /** The tenant ID of the resource. */
  tenantId: string;
  /** The subscription ID of the resource. */
  subscriptionId: string;
  /** The resource group of the resource. */
  resourceGroup: string;
  /** The resource provider performing the operation. */
  resourceProvider: string;
  /** The URI of the resource in the operation. */
  resourceUri: string;
  /** The operation that was performed. */
  operationName: string;
  /** The status of the operation. */
  status: string;
  /** The requested authorization for the operation. */
  authorization: string;
  /** The properties of the claims. */
  claims: string;
  /** An operation ID used for troubleshooting. */
  correlationId: string;
  /** The details of the operation. */
  httpRequest: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceActionSuccess event. This is raised when a resource action operation succeeds. */
export interface ResourceActionSuccessEventData {
  /** The tenant ID of the resource. */
  tenantId: string;
  /** The subscription ID of the resource. */
  subscriptionId: string;
  /** The resource group of the resource. */
  resourceGroup: string;
  /** The resource provider performing the operation. */
  resourceProvider: string;
  /** The URI of the resource in the operation. */
  resourceUri: string;
  /** The operation that was performed. */
  operationName: string;
  /** The status of the operation. */
  status: string;
  /** The requested authorization for the operation. */
  authorization: string;
  /** The properties of the claims. */
  claims: string;
  /** An operation ID used for troubleshooting. */
  correlationId: string;
  /** The details of the operation. */
  httpRequest: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceActionFailure event. This is raised when a resource action operation fails. */
export interface ResourceActionFailureEventData {
  /** The tenant ID of the resource. */
  tenantId: string;
  /** The subscription ID of the resource. */
  subscriptionId: string;
  /** The resource group of the resource. */
  resourceGroup: string;
  /** The resource provider performing the operation. */
  resourceProvider: string;
  /** The URI of the resource in the operation. */
  resourceUri: string;
  /** The operation that was performed. */
  operationName: string;
  /** The status of the operation. */
  status: string;
  /** The requested authorization for the operation. */
  authorization: string;
  /** The properties of the claims. */
  claims: string;
  /** An operation ID used for troubleshooting. */
  correlationId: string;
  /** The details of the operation. */
  httpRequest: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceActionCancel event. This is raised when a resource action operation is canceled. */
export interface ResourceActionCancelEventData {
  /** The tenant ID of the resource. */
  tenantId: string;
  /** The subscription ID of the resource. */
  subscriptionId: string;
  /** The resource group of the resource. */
  resourceGroup: string;
  /** The resource provider performing the operation. */
  resourceProvider: string;
  /** The URI of the resource in the operation. */
  resourceUri: string;
  /** The operation that was performed. */
  operationName: string;
  /** The status of the operation. */
  status: string;
  /** The requested authorization for the operation. */
  authorization: string;
  /** The properties of the claims. */
  claims: string;
  /** An operation ID used for troubleshooting. */
  correlationId: string;
  /** The details of the operation. */
  httpRequest: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.EventGrid.SubscriptionValidationEvent event. */
export interface SubscriptionValidationEventData {
  /**
   * The validation code sent by Azure Event Grid to validate an event subscription. To complete the validation handshake, the subscriber must either respond with this validation code as part of the validation response, or perform a GET request on the validationUrl (available starting version 2018-05-01-preview).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationCode: string;
  /**
   * The validation URL sent by Azure Event Grid (available starting version 2018-05-01-preview). To complete the validation handshake, the subscriber must either respond with the validationCode as part of the validation response, or perform a GET request on the validationUrl (available starting version 2018-05-01-preview).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationUrl: string;
}

/** To complete an event subscription validation handshake, a subscriber can use either the validationCode or the validationUrl received in a SubscriptionValidationEvent. When the validationCode is used, the SubscriptionValidationResponse can be used to build the response. */
export interface SubscriptionValidationResponse {
  /** The validation response sent by the subscriber to Azure Event Grid to complete the validation of an event subscription. */
  validationResponse: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.EventGrid.SubscriptionDeletedEvent event. */
export interface SubscriptionDeletedEventData {
  /**
   * The Azure resource ID of the deleted event subscription.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly eventSubscriptionId: string;
}

/** Schema of the Data property of an EventGridEvent for a device life cycle event (DeviceCreated, DeviceDeleted). */
export interface DeviceLifeCycleEvent {
  /** The unique identifier of the device. This case-sensitive string can be up to 128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following special characters: - : . + % _ &#35; * ? ! ( ) , = @ ; $ '. */
  deviceId: string;
  /** Name of the IoT Hub where the device was created or deleted. */
  hubName: string;
  /** Information about the device twin, which is the cloud representation of application device metadata. */
  twin: DeviceTwinInfo;
}

/** Information about the device twin, which is the cloud representation of application device metadata. */
export interface DeviceTwinInfo {
  /** Authentication type used for this device: either SAS, SelfSigned, or CertificateAuthority. */
  authenticationType: string;
  /** Count of cloud to device messages sent to this device. */
  cloudToDeviceMessageCount: number;
  /** Whether the device is connected or disconnected. */
  connectionState: string;
  /** The unique identifier of the device twin. */
  deviceId: string;
  /** A piece of information that describes the content of the device twin. Each etag is guaranteed to be unique per device twin. */
  etag: string;
  /** The ISO8601 timestamp of the last activity. */
  lastActivityTime: string;
  /** Properties JSON element. */
  properties: DeviceTwinInfoProperties;
  /** Whether the device twin is enabled or disabled. */
  status: string;
  /** The ISO8601 timestamp of the last device twin status update. */
  statusUpdateTime: string;
  /** An integer that is incremented by one each time the device twin is updated. */
  version: number;
  /** The thumbprint is a unique value for the x509 certificate, commonly used to find a particular certificate in a certificate store. The thumbprint is dynamically generated using the SHA1 algorithm, and does not physically exist in the certificate. */
  x509Thumbprint: DeviceTwinInfoX509Thumbprint;
}

/** Properties JSON element. */
export interface DeviceTwinInfoProperties {
  /** A portion of the properties that can be written only by the application back-end, and read by the device. */
  desired?: DeviceTwin;
  /** A portion of the properties that can be written only by the device, and read by the application back-end. */
  reported?: DeviceTwin;
}

/** A portion of the properties that can be written only by the application back-end, and read by the device. */
export interface DeviceTwin {
  /** Metadata information for the properties JSON document. */
  metadata: DeviceTwinMetadata;
  /** Version of device twin properties. */
  version: number;
}

/** Metadata information for the properties JSON document. */
export interface DeviceTwinMetadata {
  /** The ISO8601 timestamp of the last time the properties were updated. */
  lastUpdated: string;
}

/** The thumbprint is a unique value for the x509 certificate, commonly used to find a particular certificate in a certificate store. The thumbprint is dynamically generated using the SHA1 algorithm, and does not physically exist in the certificate. */
export interface DeviceTwinInfoX509Thumbprint {
  /** Primary thumbprint for the x509 certificate. */
  primaryThumbprint?: string;
  /** Secondary thumbprint for the x509 certificate. */
  secondaryThumbprint?: string;
}

/** Schema of the Data property of an EventGridEvent for a device connection state event (DeviceConnected, DeviceDisconnected). */
export interface DeviceConnectionStateEvent {
  /** The unique identifier of the device. This case-sensitive string can be up to 128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following special characters: - : . + % _ &#35; * ? ! ( ) , = @ ; $ '. */
  deviceId: string;
  /** The unique identifier of the module. This case-sensitive string can be up to 128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following special characters: - : . + % _ &#35; * ? ! ( ) , = @ ; $ '. */
  moduleId: string;
  /** Name of the IoT Hub where the device was created or deleted. */
  hubName: string;
  /** Information about the device connection state event. */
  deviceConnectionStateEventInfo: DeviceConnectionStateEventInfo;
}

/** Information about the device connection state event. */
export interface DeviceConnectionStateEventInfo {
  /** Sequence number is string representation of a hexadecimal number. string compare can be used to identify the larger number because both in ASCII and HEX numbers come after alphabets. If you are converting the string to hex, then the number is a 256 bit number. */
  sequenceNumber: string;
}

/** Schema of the Data property of an EventGridEvent for a device telemetry event (DeviceTelemetry). */
export interface DeviceTelemetryEvent {
  /** The content of the message from the device. */
  body: any;
  /** Application properties are user-defined strings that can be added to the message. These fields are optional. */
  properties: { [propertyName: string]: string };
  /** System properties help identify contents and source of the messages. */
  systemProperties: { [propertyName: string]: string };
}

/** The content of the event request message. */
export interface ContainerRegistryEventData {
  /** The event ID. */
  id: string;
  /** The time at which the event occurred. */
  timestamp: string;
  /** The action that encompasses the provided event. */
  action: string;
  /** The target of the event. */
  target: ContainerRegistryEventTarget;
  /** The request that generated the event. */
  request: ContainerRegistryEventRequest;
  /** The agent that initiated the event. For most situations, this could be from the authorization context of the request. */
  actor: ContainerRegistryEventActor;
  /** The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it. */
  source: ContainerRegistryEventSource;
}

/** The target of the event. */
export interface ContainerRegistryEventTarget {
  /** The MIME type of the referenced object. */
  mediaType: string;
  /** The number of bytes of the content. Same as Length field. */
  size: number;
  /** The digest of the content, as defined by the Registry V2 HTTP API Specification. */
  digest: string;
  /** The number of bytes of the content. Same as Size field. */
  length: number;
  /** The repository name. */
  repository: string;
  /** The direct URL to the content. */
  url: string;
  /** The tag name. */
  tag: string;
}

/** The request that generated the event. */
export interface ContainerRegistryEventRequest {
  /** The ID of the request that initiated the event. */
  id: string;
  /** The IP or hostname and possibly port of the client connection that initiated the event. This is the RemoteAddr from the standard http request. */
  addr: string;
  /** The externally accessible hostname of the registry instance, as specified by the http host header on incoming requests. */
  host: string;
  /** The request method that generated the event. */
  method: string;
  /** The user agent header of the request. */
  useragent: string;
}

/** The agent that initiated the event. For most situations, this could be from the authorization context of the request. */
export interface ContainerRegistryEventActor {
  /** The subject or username associated with the request context that generated the event. */
  name: string;
}

/** The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it. */
export interface ContainerRegistryEventSource {
  /** The IP or hostname and the port of the registry node that generated the event. Generally, this will be resolved by os.Hostname() along with the running port. */
  addr: string;
  /** The running instance of an application. Changes after each restart. */
  instanceID: string;
}

/** The content of the event request message. */
export interface ContainerRegistryArtifactEventData {
  /** The event ID. */
  id: string;
  /** The time at which the event occurred. */
  timestamp: string;
  /** The action that encompasses the provided event. */
  action: string;
  /** The target of the event. */
  target: ContainerRegistryArtifactEventTarget;
}

/** The target of the event. */
export interface ContainerRegistryArtifactEventTarget {
  /** The MIME type of the artifact. */
  mediaType: string;
  /** The size in bytes of the artifact. */
  size: number;
  /** The digest of the artifact. */
  digest: string;
  /** The repository name of the artifact. */
  repository: string;
  /** The tag of the artifact. */
  tag: string;
  /** The name of the artifact. */
  name: string;
  /** The version of the artifact. */
  version: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ServiceBus.ActiveMessagesAvailableWithNoListeners event. */
export interface ServiceBusActiveMessagesAvailableWithNoListenersEventData {
  /** The namespace name of the Microsoft.ServiceBus resource. */
  namespaceName: string;
  /** The endpoint of the Microsoft.ServiceBus resource. */
  requestUri: string;
  /** The entity type of the Microsoft.ServiceBus resource. Could be one of 'queue' or 'subscriber'. */
  entityType: string;
  /** The name of the Microsoft.ServiceBus queue. If the entity type is of type 'subscriber', then this value will be null. */
  queueName: string;
  /** The name of the Microsoft.ServiceBus topic. If the entity type is of type 'queue', then this value will be null. */
  topicName: string;
  /** The name of the Microsoft.ServiceBus topic's subscription. If the entity type is of type 'queue', then this value will be null. */
  subscriptionName: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ServiceBus.DeadletterMessagesAvailableWithNoListenersEvent event. */
export interface ServiceBusDeadletterMessagesAvailableWithNoListenersEventData {
  /** The namespace name of the Microsoft.ServiceBus resource. */
  namespaceName: string;
  /** The endpoint of the Microsoft.ServiceBus resource. */
  requestUri: string;
  /** The entity type of the Microsoft.ServiceBus resource. Could be one of 'queue' or 'subscriber'. */
  entityType: string;
  /** The name of the Microsoft.ServiceBus queue. If the entity type is of type 'subscriber', then this value will be null. */
  queueName: string;
  /** The name of the Microsoft.ServiceBus topic. If the entity type is of type 'queue', then this value will be null. */
  topicName: string;
  /** The name of the Microsoft.ServiceBus topic's subscription. If the entity type is of type 'queue', then this value will be null. */
  subscriptionName: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ServiceBus.ActiveMessagesAvailablePeriodicNotifications event. */
export interface ServiceBusActiveMessagesAvailablePeriodicNotificationsEventData {
  /** The namespace name of the Microsoft.ServiceBus resource. */
  namespaceName: string;
  /** The endpoint of the Microsoft.ServiceBus resource. */
  requestUri: string;
  /** The entity type of the Microsoft.ServiceBus resource. Could be one of 'queue' or 'subscriber'. */
  entityType: string;
  /** The name of the Microsoft.ServiceBus queue. If the entity type is of type 'subscriber', then this value will be null. */
  queueName: string;
  /** The name of the Microsoft.ServiceBus topic. If the entity type is of type 'queue', then this value will be null. */
  topicName: string;
  /** The name of the Microsoft.ServiceBus topic's subscription. If the entity type is of type 'queue', then this value will be null. */
  subscriptionName: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.ServiceBus.DeadletterMessagesAvailablePeriodicNotifications event. */
export interface ServiceBusDeadletterMessagesAvailablePeriodicNotificationsEventData {
  /** The namespace name of the Microsoft.ServiceBus resource. */
  namespaceName: string;
  /** The endpoint of the Microsoft.ServiceBus resource. */
  requestUri: string;
  /** The entity type of the Microsoft.ServiceBus resource. Could be one of 'queue' or 'subscriber'. */
  entityType: string;
  /** The name of the Microsoft.ServiceBus queue. If the entity type is of type 'subscriber', then this value will be null. */
  queueName: string;
  /** The name of the Microsoft.ServiceBus topic. If the entity type is of type 'queue', then this value will be null. */
  topicName: string;
  /** The name of the Microsoft.ServiceBus topic's subscription. If the entity type is of type 'queue', then this value will be null. */
  subscriptionName: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Media.JobStateChange event. */
export interface MediaJobStateChangeEventData {
  /**
   * The previous state of the Job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly previousState: MediaJobState;
  /**
   * The new state of the Job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state: MediaJobState;
  /** Gets the Job correlation data. */
  correlationData: { [propertyName: string]: string };
}

/** Details of JobOutput errors. */
export interface MediaJobError {
  /**
   * Error code describing the error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code: MediaJobErrorCode;
  /**
   * A human-readable language-dependent representation of the error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message: string;
  /**
   * Helps with categorization of errors.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly category: MediaJobErrorCategory;
  /**
   * Indicates that it may be possible to retry the Job. If retry is unsuccessful, please contact Azure support via Azure Portal.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly retry: MediaJobRetry;
  /**
   * An array of details about specific errors that led to this reported error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details: MediaJobErrorDetail[];
}

/** Details of JobOutput errors. */
export interface MediaJobErrorDetail {
  /**
   * Code describing the error detail.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code: string;
  /**
   * A human-readable representation of the error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message: string;
}

/** The event data for a Job output. */
export interface MediaJobOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  odataType: "#Microsoft.Media.JobOutputAsset";
  /** Gets the Job output error. */
  error?: MediaJobError;
  /** Gets the Job output label. */
  label?: string;
  /** Gets the Job output progress. */
  progress: number;
  /** Gets the Job output state. */
  state: MediaJobState;
}

/** Job Output Progress Event Data. Schema of the Data property of an EventGridEvent for a Microsoft.Media.JobOutputProgress event. */
export interface MediaJobOutputProgressEventData {
  /** Gets the Job output label. */
  label: string;
  /** Gets the Job output progress. */
  progress: number;
  /** Gets the Job correlation data. */
  jobCorrelationData: { [propertyName: string]: string };
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Media.JobOutputStateChange event. */
export interface MediaJobOutputStateChangeEventData {
  /**
   * The previous state of the Job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly previousState: MediaJobState;
  /** Gets the output. */
  output: MediaJobOutputUnion;
  /** Gets the Job correlation data. */
  jobCorrelationData: { [propertyName: string]: string };
}

/** Encoder connect event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.LiveEventEncoderConnected event. */
export interface MediaLiveEventEncoderConnectedEventData {
  /**
   * Gets the ingest URL provided by the live event.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ingestUrl: string;
  /**
   * Gets the stream Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly streamId: string;
  /**
   * Gets the remote IP.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly encoderIp: string;
  /**
   * Gets the remote port.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly encoderPort: string;
}

/** Encoder connection rejected event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.LiveEventConnectionRejected event. */
export interface MediaLiveEventConnectionRejectedEventData {
  /**
   * Gets the ingest URL provided by the live event.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ingestUrl: string;
  /**
   * Gets the stream Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly streamId: string;
  /**
   * Gets the remote IP.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly encoderIp: string;
  /**
   * Gets the remote port.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly encoderPort: string;
  /**
   * Gets the result code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resultCode: string;
}

/** Encoder disconnected event data. Schema of the Data property of an EventGridEvent for a Microsoft.Media.LiveEventEncoderDisconnected event. */
export interface MediaLiveEventEncoderDisconnectedEventData {
  /**
   * Gets the ingest URL provided by the live event.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ingestUrl: string;
  /**
   * Gets the stream Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly streamId: string;
  /**
   * Gets the remote IP.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly encoderIp: string;
  /**
   * Gets the remote port.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly encoderPort: string;
  /**
   * Gets the result code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resultCode: string;
}

/** Encoder connect event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.LiveEventIncomingStreamReceived event. */
export interface MediaLiveEventIncomingStreamReceivedEventData {
  /**
   * Gets the ingest URL provided by the live event.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ingestUrl: string;
  /**
   * Gets the type of the track (Audio / Video).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly trackType: string;
  /**
   * Gets the track name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly trackName: string;
  /**
   * Gets the bitrate of the track.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly bitrate: number;
  /**
   * Gets the remote IP.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly encoderIp: string;
  /**
   * Gets the remote port.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly encoderPort: string;
  /**
   * Gets the first timestamp of the data chunk received.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timestamp: string;
  /**
   * Gets the duration of the first data chunk.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly duration: string;
  /**
   * Gets the timescale in which timestamp is represented.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timescale: string;
}

/** Incoming streams out of sync event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.LiveEventIncomingStreamsOutOfSync event. */
export interface MediaLiveEventIncomingStreamsOutOfSyncEventData {
  /**
   * Gets the minimum last timestamp received.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly minLastTimestamp: string;
  /**
   * Gets the type of stream with minimum last timestamp.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly typeOfStreamWithMinLastTimestamp: string;
  /**
   * Gets the maximum timestamp among all the tracks (audio or video).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly maxLastTimestamp: string;
  /**
   * Gets the type of stream with maximum last timestamp.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly typeOfStreamWithMaxLastTimestamp: string;
  /**
   * Gets the timescale in which "MinLastTimestamp" is represented.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timescaleOfMinLastTimestamp: string;
  /**
   * Gets the timescale in which "MaxLastTimestamp" is represented.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timescaleOfMaxLastTimestamp: string;
}

/** Incoming video stream out of synch event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.LiveEventIncomingVideoStreamsOutOfSync event. */
export interface MediaLiveEventIncomingVideoStreamsOutOfSyncEventData {
  /**
   * Gets the first timestamp received for one of the quality levels.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly firstTimestamp: string;
  /**
   * Gets the duration of the data chunk with first timestamp.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly firstDuration: string;
  /**
   * Gets the timestamp received for some other quality levels.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly secondTimestamp: string;
  /**
   * Gets the duration of the data chunk with second timestamp.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly secondDuration: string;
  /**
   * Gets the timescale in which both the timestamps and durations are represented.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timescale: string;
}

/** Ingest fragment dropped event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.LiveEventIncomingDataChunkDropped event. */
export interface MediaLiveEventIncomingDataChunkDroppedEventData {
  /**
   * Gets the timestamp of the data chunk dropped.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timestamp: string;
  /**
   * Gets the type of the track (Audio / Video).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly trackType: string;
  /**
   * Gets the bitrate of the track.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly bitrate: number;
  /**
   * Gets the timescale of the Timestamp.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timescale: string;
  /**
   * Gets the result code for fragment drop operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resultCode: string;
  /**
   * Gets the name of the track for which fragment is dropped.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly trackName: string;
}

/** Ingest fragment dropped event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.LiveEventIngestHeartbeat event. */
export interface MediaLiveEventIngestHeartbeatEventData {
  /**
   * Gets the type of the track (Audio / Video).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly trackType: string;
  /**
   * Gets the track name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly trackName: string;
  /**
   * Gets the bitrate of the track.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly bitrate: number;
  /**
   * Gets the incoming bitrate.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly incomingBitrate: number;
  /**
   * Gets the last timestamp.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastTimestamp: string;
  /**
   * Gets the timescale of the last timestamp.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timescale: string;
  /**
   * Gets the fragment Overlap count.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly overlapCount: number;
  /**
   * Gets the fragment Discontinuity count.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly discontinuityCount: number;
  /**
   * Gets Non increasing count.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nonincreasingCount: number;
  /**
   * Gets a value indicating whether unexpected bitrate is present or not.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly unexpectedBitrate: boolean;
  /**
   * Gets the state of the live event.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state: string;
  /**
   * Gets a value indicating whether preview is healthy or not.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly healthy: boolean;
}

/** Ingest track discontinuity detected event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.LiveEventTrackDiscontinuityDetected event. */
export interface MediaLiveEventTrackDiscontinuityDetectedEventData {
  /**
   * Gets the type of the track (Audio / Video).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly trackType: string;
  /**
   * Gets the track name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly trackName: string;
  /**
   * Gets the bitrate.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly bitrate: number;
  /**
   * Gets the timestamp of the previous fragment.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly previousTimestamp: string;
  /**
   * Gets the timestamp of the current fragment.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly newTimestamp: string;
  /**
   * Gets the timescale in which both timestamps and discontinuity gap are represented.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timescale: string;
  /**
   * Gets the discontinuity gap between PreviousTimestamp and NewTimestamp.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly discontinuityGap: string;
}

/** Schema of the Data property of an EventGridEvent for a Geofence event (GeofenceEntered, GeofenceExited, GeofenceResult). */
export interface MapsGeofenceEvent {
  /** Lists of the geometry ID of the geofence which is expired relative to the user time in the request. */
  expiredGeofenceGeometryId: string[];
  /** Lists the fence geometries that either fully contain the coordinate position or have an overlap with the searchBuffer around the fence. */
  geometries: MapsGeofenceGeometry[];
  /** Lists of the geometry ID of the geofence which is in invalid period relative to the user time in the request. */
  invalidPeriodGeofenceGeometryId: string[];
  /** True if at least one event is published to the Azure Maps event subscriber, false if no event is published to the Azure Maps event subscriber. */
  isEventPublished: boolean;
}

/** The geofence geometry. */
export interface MapsGeofenceGeometry {
  /** ID of the device. */
  deviceId: string;
  /** Distance from the coordinate to the closest border of the geofence. Positive means the coordinate is outside of the geofence. If the coordinate is outside of the geofence, but more than the value of searchBuffer away from the closest geofence border, then the value is 999. Negative means the coordinate is inside of the geofence. If the coordinate is inside the polygon, but more than the value of searchBuffer away from the closest geofencing border,then the value is -999. A value of 999 means that there is great confidence the coordinate is well outside the geofence. A value of -999 means that there is great confidence the coordinate is well within the geofence. */
  distance: number;
  /** The unique ID for the geofence geometry. */
  geometryId: string;
  /** Latitude of the nearest point of the geometry. */
  nearestLat: number;
  /** Longitude of the nearest point of the geometry. */
  nearestLon: number;
  /** The unique id returned from user upload service when uploading a geofence. Will not be included in geofencing post API. */
  udId: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.AppConfiguration.KeyValueModified event. */
export interface AppConfigurationKeyValueModifiedEventData {
  /** The key used to identify the key-value that was modified. */
  key: string;
  /** The label, if any, used to identify the key-value that was modified. */
  label: string;
  /** The etag representing the new state of the key-value. */
  etag: string;
  /** The sync token representing the server state after the event. */
  syncToken: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.AppConfiguration.KeyValueDeleted event. */
export interface AppConfigurationKeyValueDeletedEventData {
  /** The key used to identify the key-value that was deleted. */
  key: string;
  /** The label, if any, used to identify the key-value that was deleted. */
  label: string;
  /** The etag representing the key-value that was deleted. */
  etag: string;
  /** The sync token representing the server state after the event. */
  syncToken: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.SignalRService.ClientConnectionConnected event. */
export interface SignalRServiceClientConnectionConnectedEventData {
  /** The time at which the event occurred. */
  timestamp: string;
  /** The hub of connected client connection. */
  hubName: string;
  /** The connection Id of connected client connection. */
  connectionId: string;
  /** The user Id of connected client connection. */
  userId: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.SignalRService.ClientConnectionDisconnected event. */
export interface SignalRServiceClientConnectionDisconnectedEventData {
  /** The time at which the event occurred. */
  timestamp: string;
  /** The hub of connected client connection. */
  hubName: string;
  /** The connection Id of connected client connection. */
  connectionId: string;
  /** The user Id of connected client connection. */
  userId: string;
  /** The message of error that cause the client connection disconnected. */
  errorMessage: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.CertificateNewVersionCreated event. */
export interface KeyVaultCertificateNewVersionCreatedEventData {
  /** The id of the object that triggered this event. */
  id: string;
  /** Key vault name of the object that triggered this event. */
  vaultName: string;
  /** The type of the object that triggered this event */
  objectType: string;
  /** The name of the object that triggered this event */
  objectName: string;
  /** The version of the object that triggered this event */
  version: string;
  /** Not before date of the object that triggered this event */
  nbf: number;
  /** The expiration date of the object that triggered this event */
  exp: number;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.CertificateNearExpiry event. */
export interface KeyVaultCertificateNearExpiryEventData {
  /** The id of the object that triggered this event. */
  id: string;
  /** Key vault name of the object that triggered this event. */
  vaultName: string;
  /** The type of the object that triggered this event */
  objectType: string;
  /** The name of the object that triggered this event */
  objectName: string;
  /** The version of the object that triggered this event */
  version: string;
  /** Not before date of the object that triggered this event */
  nbf: number;
  /** The expiration date of the object that triggered this event */
  exp: number;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.CertificateExpired event. */
export interface KeyVaultCertificateExpiredEventData {
  /** The id of the object that triggered this event. */
  id: string;
  /** Key vault name of the object that triggered this event. */
  vaultName: string;
  /** The type of the object that triggered this event */
  objectType: string;
  /** The name of the object that triggered this event */
  objectName: string;
  /** The version of the object that triggered this event */
  version: string;
  /** Not before date of the object that triggered this event */
  nbf: number;
  /** The expiration date of the object that triggered this event */
  exp: number;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.KeyNewVersionCreated event. */
export interface KeyVaultKeyNewVersionCreatedEventData {
  /** The id of the object that triggered this event. */
  id: string;
  /** Key vault name of the object that triggered this event. */
  vaultName: string;
  /** The type of the object that triggered this event */
  objectType: string;
  /** The name of the object that triggered this event */
  objectName: string;
  /** The version of the object that triggered this event */
  version: string;
  /** Not before date of the object that triggered this event */
  nbf: number;
  /** The expiration date of the object that triggered this event */
  exp: number;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.KeyNearExpiry event. */
export interface KeyVaultKeyNearExpiryEventData {
  /** The id of the object that triggered this event. */
  id: string;
  /** Key vault name of the object that triggered this event. */
  vaultName: string;
  /** The type of the object that triggered this event */
  objectType: string;
  /** The name of the object that triggered this event */
  objectName: string;
  /** The version of the object that triggered this event */
  version: string;
  /** Not before date of the object that triggered this event */
  nbf: number;
  /** The expiration date of the object that triggered this event */
  exp: number;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.KeyExpired event. */
export interface KeyVaultKeyExpiredEventData {
  /** The id of the object that triggered this event. */
  id: string;
  /** Key vault name of the object that triggered this event. */
  vaultName: string;
  /** The type of the object that triggered this event */
  objectType: string;
  /** The name of the object that triggered this event */
  objectName: string;
  /** The version of the object that triggered this event */
  version: string;
  /** Not before date of the object that triggered this event */
  nbf: number;
  /** The expiration date of the object that triggered this event */
  exp: number;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.SecretNewVersionCreated event. */
export interface KeyVaultSecretNewVersionCreatedEventData {
  /** The id of the object that triggered this event. */
  id: string;
  /** Key vault name of the object that triggered this event. */
  vaultName: string;
  /** The type of the object that triggered this event */
  objectType: string;
  /** The name of the object that triggered this event */
  objectName: string;
  /** The version of the object that triggered this event */
  version: string;
  /** Not before date of the object that triggered this event */
  nbf: number;
  /** The expiration date of the object that triggered this event */
  exp: number;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.SecretNearExpiry event. */
export interface KeyVaultSecretNearExpiryEventData {
  /** The id of the object that triggered this event. */
  id: string;
  /** Key vault name of the object that triggered this event. */
  vaultName: string;
  /** The type of the object that triggered this event */
  objectType: string;
  /** The name of the object that triggered this event */
  objectName: string;
  /** The version of the object that triggered this event */
  version: string;
  /** Not before date of the object that triggered this event */
  nbf: number;
  /** The expiration date of the object that triggered this event */
  exp: number;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.SecretExpired event. */
export interface KeyVaultSecretExpiredEventData {
  /** The id of the object that triggered this event. */
  id: string;
  /** Key vault name of the object that triggered this event. */
  vaultName: string;
  /** The type of the object that triggered this event */
  objectType: string;
  /** The name of the object that triggered this event */
  objectName: string;
  /** The version of the object that triggered this event */
  version: string;
  /** Not before date of the object that triggered this event */
  nbf: number;
  /** The expiration date of the object that triggered this event */
  exp: number;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.VaultAccessPolicyChanged event. */
export interface KeyVaultAccessPolicyChangedEventData {
  /** The id of the object that triggered this event. */
  id: string;
  /** Key vault name of the object that triggered this event. */
  vaultName: string;
  /** The type of the object that triggered this event */
  objectType: string;
  /** The name of the object that triggered this event */
  objectName: string;
  /** The version of the object that triggered this event */
  version: string;
  /** Not before date of the object that triggered this event */
  nbf: number;
  /** The expiration date of the object that triggered this event */
  exp: number;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.MachineLearningServices.ModelRegistered event. */
export interface MachineLearningServicesModelRegisteredEventData {
  /** The name of the model that was registered. */
  modelName: string;
  /** The version of the model that was registered. */
  modelVersion: string;
  /** The tags of the model that was registered. */
  modelTags: any;
  /** The properties of the model that was registered. */
  modelProperties: any;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.MachineLearningServices.ModelDeployed event. */
export interface MachineLearningServicesModelDeployedEventData {
  /** The name of the deployed service. */
  serviceName: string;
  /** The compute type (e.g. ACI, AKS) of the deployed service. */
  serviceComputeType: string;
  /** A common separated list of model IDs. The IDs of the models deployed in the service. */
  modelIds: string;
  /** The tags of the deployed service. */
  serviceTags: any;
  /** The properties of the deployed service. */
  serviceProperties: any;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.MachineLearningServices.RunCompleted event. */
export interface MachineLearningServicesRunCompletedEventData {
  /** The ID of the experiment that the run belongs to. */
  experimentId: string;
  /** The name of the experiment that the run belongs to. */
  experimentName: string;
  /** The ID of the Run that was completed. */
  runId: string;
  /** The Run Type of the completed Run. */
  runType: string;
  /** The tags of the completed Run. */
  runTags: any;
  /** The properties of the completed Run. */
  runProperties: any;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.MachineLearningServices.DatasetDriftDetected event. */
export interface MachineLearningServicesDatasetDriftDetectedEventData {
  /** The ID of the data drift monitor that triggered the event. */
  dataDriftId: string;
  /** The name of the data drift monitor that triggered the event. */
  dataDriftName: string;
  /** The ID of the Run that detected data drift. */
  runId: string;
  /** The ID of the base Dataset used to detect drift. */
  baseDatasetId: string;
  /** The ID of the target Dataset used to detect drift. */
  targetDatasetId: string;
  /** The coefficient result that triggered the event. */
  driftCoefficient: number;
  /** The start time of the target dataset time series that resulted in drift detection. */
  startTime: string;
  /** The end time of the target dataset time series that resulted in drift detection. */
  endTime: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.MachineLearningServices.RunStatusChanged event. */
export interface MachineLearningServicesRunStatusChangedEventData {
  /** The ID of the experiment that the Machine Learning Run belongs to. */
  experimentId: string;
  /** The name of the experiment that the Machine Learning Run belongs to. */
  experimentName: string;
  /** The ID of the Machine Learning Run. */
  runId: string;
  /** The Run Type of the Machine Learning Run. */
  runType: string;
  /** The tags of the Machine Learning Run. */
  runTags: any;
  /** The properties of the Machine Learning Run. */
  runProperties: any;
  /** The status of the Machine Learning Run. */
  runStatus: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Cache.PatchingCompleted event. */
export interface RedisPatchingCompletedEventData {
  /** The time at which the event occurred. */
  timestamp: string;
  /** The name of this event. */
  name: string;
  /** The status of this event. Failed or  succeeded */
  status: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Cache.ScalingCompleted event. */
export interface RedisScalingCompletedEventData {
  /** The time at which the event occurred. */
  timestamp: string;
  /** The name of this event. */
  name: string;
  /** The status of this event. Failed or  succeeded */
  status: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Cache.ExportRDBCompleted event. */
export interface RedisExportRDBCompletedEventData {
  /** The time at which the event occurred. */
  timestamp: string;
  /** The name of this event. */
  name: string;
  /** The status of this event. Failed or  succeeded */
  status: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Cache.ImportRDBCompleted event. */
export interface RedisImportRDBCompletedEventData {
  /** The time at which the event occurred. */
  timestamp: string;
  /** The name of this event. */
  name: string;
  /** The status of this event. Failed or  succeeded */
  status: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Web.AppUpdated event. */
export interface WebAppUpdatedEventData {
  /** Detail of action on the app. */
  appEventTypeDetail: AppEventTypeDetail;
  /** name of the web site that had this event. */
  name: string;
  /** The client request id generated by the app service for the site API operation that triggered this event. */
  clientRequestId: string;
  /** The correlation request id generated by the app service for the site API operation that triggered this event. */
  correlationRequestId: string;
  /** The request id generated by the app service for the site API operation that triggered this event. */
  requestId: string;
  /** HTTP request URL of this operation. */
  address: string;
  /** HTTP verb of this operation. */
  verb: string;
}

/** Detail of action on the app. */
export interface AppEventTypeDetail {
  /** Type of action of the operation. */
  action: AppAction;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Web.BackupOperationStarted event. */
export interface WebBackupOperationStartedEventData {
  /** Detail of action on the app. */
  appEventTypeDetail: AppEventTypeDetail;
  /** name of the web site that had this event. */
  name: string;
  /** The client request id generated by the app service for the site API operation that triggered this event. */
  clientRequestId: string;
  /** The correlation request id generated by the app service for the site API operation that triggered this event. */
  correlationRequestId: string;
  /** The request id generated by the app service for the site API operation that triggered this event. */
  requestId: string;
  /** HTTP request URL of this operation. */
  address: string;
  /** HTTP verb of this operation. */
  verb: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Web.BackupOperationCompleted event. */
export interface WebBackupOperationCompletedEventData {
  /** Detail of action on the app. */
  appEventTypeDetail: AppEventTypeDetail;
  /** name of the web site that had this event. */
  name: string;
  /** The client request id generated by the app service for the site API operation that triggered this event. */
  clientRequestId: string;
  /** The correlation request id generated by the app service for the site API operation that triggered this event. */
  correlationRequestId: string;
  /** The request id generated by the app service for the site API operation that triggered this event. */
  requestId: string;
  /** HTTP request URL of this operation. */
  address: string;
  /** HTTP verb of this operation. */
  verb: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Web.BackupOperationFailed event. */
export interface WebBackupOperationFailedEventData {
  /** Detail of action on the app. */
  appEventTypeDetail: AppEventTypeDetail;
  /** name of the web site that had this event. */
  name: string;
  /** The client request id generated by the app service for the site API operation that triggered this event. */
  clientRequestId: string;
  /** The correlation request id generated by the app service for the site API operation that triggered this event. */
  correlationRequestId: string;
  /** The request id generated by the app service for the site API operation that triggered this event. */
  requestId: string;
  /** HTTP request URL of this operation. */
  address: string;
  /** HTTP verb of this operation. */
  verb: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Web.RestoreOperationStarted event. */
export interface WebRestoreOperationStartedEventData {
  /** Detail of action on the app. */
  appEventTypeDetail: AppEventTypeDetail;
  /** name of the web site that had this event. */
  name: string;
  /** The client request id generated by the app service for the site API operation that triggered this event. */
  clientRequestId: string;
  /** The correlation request id generated by the app service for the site API operation that triggered this event. */
  correlationRequestId: string;
  /** The request id generated by the app service for the site API operation that triggered this event. */
  requestId: string;
  /** HTTP request URL of this operation. */
  address: string;
  /** HTTP verb of this operation. */
  verb: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Web.RestoreOperationCompleted event. */
export interface WebRestoreOperationCompletedEventData {
  /** Detail of action on the app. */
  appEventTypeDetail: AppEventTypeDetail;
  /** name of the web site that had this event. */
  name: string;
  /** The client request id generated by the app service for the site API operation that triggered this event. */
  clientRequestId: string;
  /** The correlation request id generated by the app service for the site API operation that triggered this event. */
  correlationRequestId: string;
  /** The request id generated by the app service for the site API operation that triggered this event. */
  requestId: string;
  /** HTTP request URL of this operation. */
  address: string;
  /** HTTP verb of this operation. */
  verb: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Web.RestoreOperationFailed event. */
export interface WebRestoreOperationFailedEventData {
  /** Detail of action on the app. */
  appEventTypeDetail: AppEventTypeDetail;
  /** name of the web site that had this event. */
  name: string;
  /** The client request id generated by the app service for the site API operation that triggered this event. */
  clientRequestId: string;
  /** The correlation request id generated by the app service for the site API operation that triggered this event. */
  correlationRequestId: string;
  /** The request id generated by the app service for the site API operation that triggered this event. */
  requestId: string;
  /** HTTP request URL of this operation. */
  address: string;
  /** HTTP verb of this operation. */
  verb: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Web.SlotSwapStarted event. */
export interface WebSlotSwapStartedEventData {
  /** Detail of action on the app. */
  appEventTypeDetail: AppEventTypeDetail;
  /** name of the web site that had this event. */
  name: string;
  /** The client request id generated by the app service for the site API operation that triggered this event. */
  clientRequestId: string;
  /** The correlation request id generated by the app service for the site API operation that triggered this event. */
  correlationRequestId: string;
  /** The request id generated by the app service for the site API operation that triggered this event. */
  requestId: string;
  /** HTTP request URL of this operation. */
  address: string;
  /** HTTP verb of this operation. */
  verb: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Web.SlotSwapCompleted event. */
export interface WebSlotSwapCompletedEventData {
  /** Detail of action on the app. */
  appEventTypeDetail: AppEventTypeDetail;
  /** name of the web site that had this event. */
  name: string;
  /** The client request id generated by the app service for the site API operation that triggered this event. */
  clientRequestId: string;
  /** The correlation request id generated by the app service for the site API operation that triggered this event. */
  correlationRequestId: string;
  /** The request id generated by the app service for the site API operation that triggered this event. */
  requestId: string;
  /** HTTP request URL of this operation. */
  address: string;
  /** HTTP verb of this operation. */
  verb: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Web.SlotSwapFailed event. */
export interface WebSlotSwapFailedEventData {
  /** Detail of action on the app. */
  appEventTypeDetail: AppEventTypeDetail;
  /** name of the web site that had this event. */
  name: string;
  /** The client request id generated by the app service for the site API operation that triggered this event. */
  clientRequestId: string;
  /** The correlation request id generated by the app service for the site API operation that triggered this event. */
  correlationRequestId: string;
  /** The request id generated by the app service for the site API operation that triggered this event. */
  requestId: string;
  /** HTTP request URL of this operation. */
  address: string;
  /** HTTP verb of this operation. */
  verb: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Web.SlotSwapWithPreviewStarted event. */
export interface WebSlotSwapWithPreviewStartedEventData {
  /** Detail of action on the app. */
  appEventTypeDetail: AppEventTypeDetail;
  /** name of the web site that had this event. */
  name: string;
  /** The client request id generated by the app service for the site API operation that triggered this event. */
  clientRequestId: string;
  /** The correlation request id generated by the app service for the site API operation that triggered this event. */
  correlationRequestId: string;
  /** The request id generated by the app service for the site API operation that triggered this event. */
  requestId: string;
  /** HTTP request URL of this operation. */
  address: string;
  /** HTTP verb of this operation. */
  verb: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Web.SlotSwapWithPreviewCancelled event. */
export interface WebSlotSwapWithPreviewCancelledEventData {
  /** Detail of action on the app. */
  appEventTypeDetail: AppEventTypeDetail;
  /** name of the web site that had this event. */
  name: string;
  /** The client request id generated by the app service for the site API operation that triggered this event. */
  clientRequestId: string;
  /** The correlation request id generated by the app service for the site API operation that triggered this event. */
  correlationRequestId: string;
  /** The request id generated by the app service for the site API operation that triggered this event. */
  requestId: string;
  /** HTTP request URL of this operation. */
  address: string;
  /** HTTP verb of this operation. */
  verb: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Web.AppServicePlanUpdated event. */
export interface WebAppServicePlanUpdatedEventData {
  /** Detail of action on the app service plan. */
  appServicePlanEventTypeDetail: AppServicePlanEventTypeDetail;
  /** sku of app service plan. */
  sku: WebAppServicePlanUpdatedEventDataSku;
  /** name of the app service plan that had this event. */
  name: string;
  /** The client request id generated by the app service for the app service plan API operation that triggered this event. */
  clientRequestId: string;
  /** The correlation request id generated by the app service for the app service plan API operation that triggered this event. */
  correlationRequestId: string;
  /** The request id generated by the app service for the app service plan API operation that triggered this event. */
  requestId: string;
  /** HTTP request URL of this operation. */
  address: string;
  /** HTTP verb of this operation. */
  verb: string;
}

/** Detail of action on the app service plan. */
export interface AppServicePlanEventTypeDetail {
  /** Kind of environment where app service plan is. */
  stampKind: StampKind;
  /** Type of action on the app service plan. */
  action: AppServicePlanAction;
  /** Asynchronous operation status of the operation on the app service plan. */
  status: AsyncStatus;
}

/** sku of app service plan. */
export interface WebAppServicePlanUpdatedEventDataSku {
  /** name of app service plan sku. */
  name?: string;
  /** tier of app service plan sku. */
  tier?: string;
  /** size of app service plan sku. */
  size?: string;
  /** family of app service plan sku. */
  family?: string;
  /** capacity of app service plan sku. */
  capacity?: string;
}

/** Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model must be interpreted as a union: Apart from rawId, at most one further property may be set. */
export interface CommunicationIdentifierModel {
  /** Raw Id of the identifier. Optional in requests, required in responses. */
  rawId: string;
  /** The communication user. */
  communicationUser?: CommunicationUserIdentifierModel;
  /** The phone number. */
  phoneNumber?: PhoneNumberIdentifierModel;
  /** The Microsoft Teams user. */
  microsoftTeamsUser?: MicrosoftTeamsUserIdentifierModel;
}

/** A user that got created with an Azure Communication Services resource. */
export interface CommunicationUserIdentifierModel {
  /** The Id of the communication user. */
  id: string;
}

/** A phone number. */
export interface PhoneNumberIdentifierModel {
  /** The phone number in E.164 format. */
  value: string;
}

/** A Microsoft Teams user. */
export interface MicrosoftTeamsUserIdentifierModel {
  /** The Id of the Microsoft Teams user. If not anonymous, this is the AAD object Id of the user. */
  userId: string;
  /** True if the Microsoft Teams user is anonymous. By default false if missing. */
  isAnonymous?: boolean;
  /** The cloud that the Microsoft Teams user belongs to. By default 'public' if missing. */
  cloud?: CommunicationCloudEnvironmentModel;
}

/** Schema of common properties of all chat events */
export interface AcsChatEventBase {
  /** The communication identifier of the target user */
  recipientCommunicationIdentifier: CommunicationIdentifierModel;
  /** The transaction id will be used as co-relation vector */
  transactionId: string;
  /** The chat thread id */
  threadId: string;
}

/** Schema of common properties of all thread-level chat events */
export interface AcsChatEventInThreadBase {
  /** The transaction id will be used as co-relation vector */
  transactionId: string;
  /** The chat thread id */
  threadId: string;
}

/** Schema of the chat thread participant */
export interface AcsChatThreadParticipant {
  /** The name of the user */
  displayName: string;
  /** The communication identifier of the user */
  participantCommunicationIdentifier: CommunicationIdentifierModel;
}

/** Schema for details of a delivery attempt */
export interface AcsSmsDeliveryAttempt {
  /** TimeStamp when delivery was attempted */
  timestamp: string;
  /** Number of segments that were successfully delivered */
  segmentsSucceeded: number;
  /** Number of segments whose delivery failed */
  segmentsFailed: number;
}

/** Schema of common properties of all SMS events */
export interface AcsSmsEventBase {
  /** The identity of the SMS message */
  messageId: string;
  /** The identity of SMS message sender */
  from: string;
  /** The identity of SMS message receiver */
  to: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RecordingFileStatusUpdated event. */
export interface AcsRecordingFileStatusUpdatedEventData {
  /** The details of recording storage information */
  recordingStorageInfo: AcsRecordingStorageInfo;
  /** The time at which the recording started */
  recordingStartTime: string;
  /** The recording duration in milliseconds */
  recordingDurationMs: number;
  /** The reason for ending recording session */
  sessionEndReason: string;
}

/** Schema for all properties of Recording Storage Information. */
export interface AcsRecordingStorageInfo {
  /** List of details of recording chunks information */
  recordingChunks: AcsRecordingChunkInfo[];
}

/** Schema for all properties of  Recording Chunk Information. */
export interface AcsRecordingChunkInfo {
  /** The documentId of the recording chunk */
  documentId: string;
  /** The index of the recording chunk */
  index: number;
  /** The reason for ending the recording chunk */
  endReason: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.PolicyInsights.PolicyStateCreated event. */
export interface PolicyInsightsPolicyStateCreatedEventData {
  /** The time that the resource was scanned by Azure Policy in the Universal ISO 8601 DateTime format yyyy-MM-ddTHH:mm:ss.fffffffZ. */
  timestamp: string;
  /** The resource ID of the policy assignment. */
  policyAssignmentId: string;
  /** The resource ID of the policy definition. */
  policyDefinitionId: string;
  /** The reference ID for the policy definition inside the initiative definition, if the policy assignment is for an initiative. May be empty. */
  policyDefinitionReferenceId: string;
  /** The compliance state of the resource with respect to the policy assignment. */
  complianceState: string;
  /** The subscription ID of the resource. */
  subscriptionId: string;
  /** The compliance reason code. May be empty. */
  complianceReasonCode: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.PolicyInsights.PolicyStateChanged event. */
export interface PolicyInsightsPolicyStateChangedEventData {
  /** The time that the resource was scanned by Azure Policy in the Universal ISO 8601 DateTime format yyyy-MM-ddTHH:mm:ss.fffffffZ. */
  timestamp: string;
  /** The resource ID of the policy assignment. */
  policyAssignmentId: string;
  /** The resource ID of the policy definition. */
  policyDefinitionId: string;
  /** The reference ID for the policy definition inside the initiative definition, if the policy assignment is for an initiative. May be empty. */
  policyDefinitionReferenceId: string;
  /** The compliance state of the resource with respect to the policy assignment. */
  complianceState: string;
  /** The subscription ID of the resource. */
  subscriptionId: string;
  /** The compliance reason code. May be empty. */
  complianceReasonCode: string;
}

/** Schema of the Data property of an EventGridEvent for a Microsoft.PolicyInsights.PolicyStateDeleted event. */
export interface PolicyInsightsPolicyStateDeletedEventData {
  /** The time that the resource was scanned by Azure Policy in the Universal ISO 8601 DateTime format yyyy-MM-ddTHH:mm:ss.fffffffZ. */
  timestamp: string;
  /** The resource ID of the policy assignment. */
  policyAssignmentId: string;
  /** The resource ID of the policy definition. */
  policyDefinitionId: string;
  /** The reference ID for the policy definition inside the initiative definition, if the policy assignment is for an initiative. May be empty. */
  policyDefinitionReferenceId: string;
  /** The compliance state of the resource with respect to the policy assignment. */
  complianceState: string;
  /** The subscription ID of the resource. */
  subscriptionId: string;
  /** The compliance reason code. May be empty. */
  complianceReasonCode: string;
}

/** Event data for Microsoft.Devices.DeviceCreated event. */
export type IotHubDeviceCreatedEventData = DeviceLifeCycleEvent & {};

/** Event data for Microsoft.Devices.DeviceDeleted event. */
export type IotHubDeviceDeletedEventData = DeviceLifeCycleEvent & {};

/** Event data for Microsoft.Devices.DeviceConnected event. */
export type IotHubDeviceConnectedEventData = DeviceConnectionStateEvent & {};

/** Event data for Microsoft.Devices.DeviceDisconnected event. */
export type IotHubDeviceDisconnectedEventData = DeviceConnectionStateEvent & {};

/** Event data for Microsoft.Devices.DeviceTelemetry event. */
export type IotHubDeviceTelemetryEventData = DeviceTelemetryEvent & {};

/** Schema of the Data property of an EventGridEvent for a Microsoft.ContainerRegistry.ImagePushed event. */
export type ContainerRegistryImagePushedEventData = ContainerRegistryEventData & {};

/** Schema of the Data property of an EventGridEvent for a Microsoft.ContainerRegistry.ImageDeleted event. */
export type ContainerRegistryImageDeletedEventData = ContainerRegistryEventData & {};

/** Schema of the Data property of an EventGridEvent for a Microsoft.ContainerRegistry.ChartPushed event. */
export type ContainerRegistryChartPushedEventData = ContainerRegistryArtifactEventData & {};

/** Schema of the Data property of an EventGridEvent for a Microsoft.ContainerRegistry.ChartDeleted event. */
export type ContainerRegistryChartDeletedEventData = ContainerRegistryArtifactEventData & {};

/** Job scheduled event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobScheduled event. */
export type MediaJobScheduledEventData = MediaJobStateChangeEventData & {};

/** Job processing event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobProcessing event. */
export type MediaJobProcessingEventData = MediaJobStateChangeEventData & {};

/** Job canceling event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobCanceling event. */
export type MediaJobCancelingEventData = MediaJobStateChangeEventData & {};

/** Job finished event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobFinished event. */
export type MediaJobFinishedEventData = MediaJobStateChangeEventData & {
  /** Gets the Job outputs. */
  outputs: MediaJobOutputUnion[];
};

/** Job canceled event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobCanceled event. */
export type MediaJobCanceledEventData = MediaJobStateChangeEventData & {
  /** Gets the Job outputs. */
  outputs: MediaJobOutputUnion[];
};

/** Job error state event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobErrored event. */
export type MediaJobErroredEventData = MediaJobStateChangeEventData & {
  /** Gets the Job outputs. */
  outputs: MediaJobOutputUnion[];
};

/** The event data for a Job output asset. */
export type MediaJobOutputAsset = MediaJobOutput & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  odataType: "#Microsoft.Media.JobOutputAsset";
  /** Gets the Job output asset name. */
  assetName: string;
};

/** Job output canceled event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobOutputCanceled event. */
export type MediaJobOutputCanceledEventData = MediaJobOutputStateChangeEventData & {};

/** Job output canceling event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobOutputCanceling event. */
export type MediaJobOutputCancelingEventData = MediaJobOutputStateChangeEventData & {};

/** Job output error event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobOutputErrored event. */
export type MediaJobOutputErroredEventData = MediaJobOutputStateChangeEventData & {};

/** Job output finished event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobOutputFinished event. */
export type MediaJobOutputFinishedEventData = MediaJobOutputStateChangeEventData & {};

/** Job output processing event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobOutputProcessing event. */
export type MediaJobOutputProcessingEventData = MediaJobOutputStateChangeEventData & {};

/** Job output scheduled event data. Schema of the data property of an EventGridEvent for a Microsoft.Media.JobOutputScheduled event. */
export type MediaJobOutputScheduledEventData = MediaJobOutputStateChangeEventData & {};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Maps.GeofenceEntered event. */
export type MapsGeofenceEnteredEventData = MapsGeofenceEvent & {};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Maps.GeofenceExited event. */
export type MapsGeofenceExitedEventData = MapsGeofenceEvent & {};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Maps.GeofenceResult event. */
export type MapsGeofenceResultEventData = MapsGeofenceEvent & {};

/** Schema of common properties of all chat message events */
export type AcsChatMessageEventBase = AcsChatEventBase & {
  /** The chat message id */
  messageId: string;
  /** The communication identifier of the sender */
  senderCommunicationIdentifier: CommunicationIdentifierModel;
  /** The display name of the sender */
  senderDisplayName: string;
  /** The original compose time of the message */
  composeTime: string;
  /** The type of the message */
  type: string;
  /** The version of the message */
  version: number;
};

/** Schema of common properties of all chat thread events */
export type AcsChatThreadEventBase = AcsChatEventBase & {
  /** The original creation time of the thread */
  createTime: string;
  /** The version of the thread */
  version: number;
};

/** Schema of common properties of all thread-level chat message events */
export type AcsChatMessageEventInThreadBase = AcsChatEventInThreadBase & {
  /** The chat message id */
  messageId: string;
  /** The communication identifier of the sender */
  senderCommunicationIdentifier: CommunicationIdentifierModel;
  /** The display name of the sender */
  senderDisplayName: string;
  /** The original compose time of the message */
  composeTime: string;
  /** The type of the message */
  type: string;
  /** The version of the message */
  version: number;
};

/** Schema of common properties of all chat thread events */
export type AcsChatThreadEventInThreadBase = AcsChatEventInThreadBase & {
  /** The original creation time of the thread */
  createTime: string;
  /** The version of the thread */
  version: number;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatThreadParticipantAdded event. */
export type AcsChatParticipantAddedToThreadEventData = AcsChatEventInThreadBase & {
  /** The time at which the user was added to the thread */
  time: string;
  /** The communication identifier of the user who added the user */
  addedByCommunicationIdentifier: CommunicationIdentifierModel;
  /** The details of the user who was added */
  participantAdded: AcsChatThreadParticipant;
  /** The version of the thread */
  version: number;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatThreadParticipantRemoved event. */
export type AcsChatParticipantRemovedFromThreadEventData = AcsChatEventInThreadBase & {
  /** The time at which the user was removed to the thread */
  time: string;
  /** The communication identifier of the user who removed the user */
  removedByCommunicationIdentifier: CommunicationIdentifierModel;
  /** The details of the user who was removed */
  participantRemoved: AcsChatThreadParticipant;
  /** The version of the thread */
  version: number;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.SMSDeliveryReportReceived event. */
export type AcsSmsDeliveryReportReceivedEventData = AcsSmsEventBase & {
  /** Status of Delivery */
  deliveryStatus: string;
  /** Details about Delivery Status */
  deliveryStatusDetails: string;
  /** List of details of delivery attempts made */
  deliveryAttempts: AcsSmsDeliveryAttempt[];
  /** The time at which the SMS delivery report was received */
  receivedTimestamp: string;
  /** Customer Content */
  tag: string;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.SMSReceived event. */
export type AcsSmsReceivedEventData = AcsSmsEventBase & {
  /** The SMS content */
  message: string;
  /** The time at which the SMS was received */
  receivedTimestamp: string;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatMessageReceived event. */
export type AcsChatMessageReceivedEventData = AcsChatMessageEventBase & {
  /** The body of the chat message */
  messageBody: string;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatMessageEdited event. */
export type AcsChatMessageEditedEventData = AcsChatMessageEventBase & {
  /** The body of the chat message */
  messageBody: string;
  /** The time at which the message was edited */
  editTime: string;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatMessageDeleted event. */
export type AcsChatMessageDeletedEventData = AcsChatMessageEventBase & {
  /** The time at which the message was deleted */
  deleteTime: string;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatThreadCreatedWithUser event. */
export type AcsChatThreadCreatedWithUserEventData = AcsChatThreadEventBase & {
  /** The communication identifier of the user who created the thread */
  createdByCommunicationIdentifier: CommunicationIdentifierModel;
  /** The thread properties */
  properties: { [propertyName: string]: any };
  /** The list of properties of participants who are part of the thread */
  participants: AcsChatThreadParticipant[];
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatThreadWithUserDeleted event. */
export type AcsChatThreadWithUserDeletedEventData = AcsChatThreadEventBase & {
  /** The communication identifier of the user who deleted the thread */
  deletedByCommunicationIdentifier: CommunicationIdentifierModel;
  /** The deletion time of the thread */
  deleteTime: string;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatThreadPropertiesUpdatedPerUser event. */
export type AcsChatThreadPropertiesUpdatedPerUserEventData = AcsChatThreadEventBase & {
  /** The communication identifier of the user who updated the thread properties */
  editedByCommunicationIdentifier: CommunicationIdentifierModel;
  /** The time at which the properties of the thread were updated */
  editTime: string;
  /** The updated thread properties */
  properties: { [propertyName: string]: any };
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatParticipantAddedToThreadWithUser event. */
export type AcsChatParticipantAddedToThreadWithUserEventData = AcsChatThreadEventBase & {
  /** The time at which the user was added to the thread */
  time: string;
  /** The communication identifier of the user who added the user */
  addedByCommunicationIdentifier: CommunicationIdentifierModel;
  /** The details of the user who was added */
  participantAdded: AcsChatThreadParticipant;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatParticipantRemovedFromThreadWithUser event. */
export type AcsChatParticipantRemovedFromThreadWithUserEventData = AcsChatThreadEventBase & {
  /** The time at which the user was removed to the thread */
  time: string;
  /** The communication identifier of the user who removed the user */
  removedByCommunicationIdentifier: CommunicationIdentifierModel;
  /** The details of the user who was removed */
  participantRemoved: AcsChatThreadParticipant;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatMessageReceivedInThread event. */
export type AcsChatMessageReceivedInThreadEventData = AcsChatMessageEventInThreadBase & {
  /** The body of the chat message */
  messageBody: string;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatMessageEditedInThread event. */
export type AcsChatMessageEditedInThreadEventData = AcsChatMessageEventInThreadBase & {
  /** The body of the chat message */
  messageBody: string;
  /** The time at which the message was edited */
  editTime: string;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatMessageDeletedInThread event. */
export type AcsChatMessageDeletedInThreadEventData = AcsChatMessageEventInThreadBase & {
  /** The time at which the message was deleted */
  deleteTime: string;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatThreadCreated event. */
export type AcsChatThreadCreatedEventData = AcsChatThreadEventInThreadBase & {
  /** The communication identifier of the user who created the thread */
  createdByCommunicationIdentifier: CommunicationIdentifierModel;
  /** The thread properties */
  properties: { [propertyName: string]: any };
  /** The list of properties of participants who are part of the thread */
  participants: AcsChatThreadParticipant[];
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatThreadDeleted event. */
export type AcsChatThreadDeletedEventData = AcsChatThreadEventInThreadBase & {
  /** The communication identifier of the user who deleted the thread */
  deletedByCommunicationIdentifier: CommunicationIdentifierModel;
  /** The deletion time of the thread */
  deleteTime: string;
};

/** Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatThreadPropertiesUpdated event. */
export type AcsChatThreadPropertiesUpdatedEventData = AcsChatThreadEventInThreadBase & {
  /** The communication identifier of the user who updated the thread properties */
  editedByCommunicationIdentifier: CommunicationIdentifierModel;
  /** The time at which the properties of the thread were updated */
  editTime: string;
  /** The updated thread properties */
  properties: { [propertyName: string]: any };
};

/** Known values of {@link AppAction} that the service accepts. */
export const enum KnownAppAction {
  /** Web app was restarted. */
  Restarted = "Restarted",
  /** Web app was stopped. */
  Stopped = "Stopped",
  /** There was an operation to change app setting on the web app. */
  ChangedAppSettings = "ChangedAppSettings",
  /** The job has started. */
  Started = "Started",
  /** The job has completed. */
  Completed = "Completed",
  /** The job has failed to complete. */
  Failed = "Failed"
}

/**
 * Defines values for AppAction. \
 * {@link KnownAppAction} can be used interchangeably with AppAction,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Restarted**: Web app was restarted. \
 * **Stopped**: Web app was stopped. \
 * **ChangedAppSettings**: There was an operation to change app setting on the web app. \
 * **Started**: The job has started. \
 * **Completed**: The job has completed. \
 * **Failed**: The job has failed to complete.
 */
export type AppAction = string;

/** Known values of {@link StampKind} that the service accepts. */
export const enum KnownStampKind {
  /** App Service Plan is running on a public stamp. */
  Public = "Public",
  /** App Service Plan is running on an App Service Environment V1. */
  AseV1 = "AseV1",
  /** App Service Plan is running on an App Service Environment V2. */
  AseV2 = "AseV2"
}

/**
 * Defines values for StampKind. \
 * {@link KnownStampKind} can be used interchangeably with StampKind,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Public**: App Service Plan is running on a public stamp. \
 * **AseV1**: App Service Plan is running on an App Service Environment V1. \
 * **AseV2**: App Service Plan is running on an App Service Environment V2.
 */
export type StampKind = string;

/** Known values of {@link AppServicePlanAction} that the service accepts. */
export const enum KnownAppServicePlanAction {
  /** App Service plan is being updated. */
  Updated = "Updated"
}

/**
 * Defines values for AppServicePlanAction. \
 * {@link KnownAppServicePlanAction} can be used interchangeably with AppServicePlanAction,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Updated**: App Service plan is being updated.
 */
export type AppServicePlanAction = string;

/** Known values of {@link AsyncStatus} that the service accepts. */
export const enum KnownAsyncStatus {
  /** Async operation has started. */
  Started = "Started",
  /** Async operation has completed. */
  Completed = "Completed",
  /** Async operation failed to complete. */
  Failed = "Failed"
}

/**
 * Defines values for AsyncStatus. \
 * {@link KnownAsyncStatus} can be used interchangeably with AsyncStatus,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Started**: Async operation has started. \
 * **Completed**: Async operation has completed. \
 * **Failed**: Async operation failed to complete.
 */
export type AsyncStatus = string;

/** Known values of {@link CommunicationCloudEnvironmentModel} that the service accepts. */
export const enum KnownCommunicationCloudEnvironmentModel {
  Public = "public",
  Dod = "dod",
  Gcch = "gcch"
}

/**
 * Defines values for CommunicationCloudEnvironmentModel. \
 * {@link KnownCommunicationCloudEnvironmentModel} can be used interchangeably with CommunicationCloudEnvironmentModel,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **public** \
 * **dod** \
 * **gcch**
 */
export type CommunicationCloudEnvironmentModel = string;
/** Defines values for MediaJobState. */
export type MediaJobState =
  | "Canceled"
  | "Canceling"
  | "Error"
  | "Finished"
  | "Processing"
  | "Queued"
  | "Scheduled";
/** Defines values for MediaJobErrorCode. */
export type MediaJobErrorCode =
  | "ServiceError"
  | "ServiceTransientError"
  | "DownloadNotAccessible"
  | "DownloadTransientError"
  | "UploadNotAccessible"
  | "UploadTransientError"
  | "ConfigurationUnsupported"
  | "ContentMalformed"
  | "ContentUnsupported";
/** Defines values for MediaJobErrorCategory. */
export type MediaJobErrorCategory =
  | "Service"
  | "Download"
  | "Upload"
  | "Configuration"
  | "Content";
/** Defines values for MediaJobRetry. */
export type MediaJobRetry = "DoNotRetry" | "MayRetry";

/** Optional parameters. */
export interface GeneratedClientOptionalParams extends ServiceClientOptions {
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
