/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import {
  PipelineRequest,
  PipelineResponse,
  SendRequest,
} from "@azure/core-rest-pipeline";
import * as Parameters from "./models/parameters.js";
import * as Mappers from "./models/mappers.js";
import {
  GeneratedClientOptionalParams,
  EventGridEvent,
  PublishEventGridEventsOptionalParams,
  CloudEvent,
  PublishCloudEventEventsOptionalParams,
  PublishCustomEventEventsOptionalParams,
} from "./models/index.js";

/** @internal */
export class GeneratedClient extends coreClient.ServiceClient {
  apiVersion: string;

  /**
   * Initializes a new instance of the GeneratedClient class.
   * @param options The parameter options
   */
  constructor(options?: GeneratedClientOptionalParams) {
    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: GeneratedClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
    };

    const packageDetails = `azsdk-js-eventgrid/5.11.0`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix,
      },
      endpoint: options.endpoint ?? options.baseUri ?? "{topicHostname}",
    };
    super(optionsWithDefaults);

    // Assigning values to Constant parameters
    this.apiVersion = options.apiVersion || "2018-01-01";
    this.addCustomApiVersionPolicy(options.apiVersion);
  }

  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
  private addCustomApiVersionPolicy(apiVersion?: string) {
    if (!apiVersion) {
      return;
    }
    const apiVersionPolicy = {
      name: "CustomApiVersionPolicy",
      async sendRequest(
        request: PipelineRequest,
        next: SendRequest,
      ): Promise<PipelineResponse> {
        const param = request.url.split("?");
        if (param.length > 1) {
          const newParams = param[1].split("&").map((item) => {
            if (item.indexOf("api-version") > -1) {
              return "api-version=" + apiVersion;
            } else {
              return item;
            }
          });
          request.url = param[0] + "?" + newParams.join("&");
        }
        return next(request);
      },
    };
    this.pipeline.addPolicy(apiVersionPolicy);
  }

  /**
   * Publishes a batch of events to an Azure Event Grid topic.
   * @param topicHostname The host name of the topic, e.g. topic1.westus2-1.eventgrid.azure.net
   * @param events An array of events to be published to Event Grid.
   * @param options The options parameters.
   */
  publishEventGridEvents(
    topicHostname: string,
    events: EventGridEvent[],
    options?: PublishEventGridEventsOptionalParams,
  ): Promise<void> {
    return this.sendOperationRequest(
      { topicHostname, events, options },
      publishEventGridEventsOperationSpec,
    );
  }

  /**
   * Publishes a batch of events to an Azure Event Grid topic.
   * @param topicHostname The host name of the topic, e.g. topic1.westus2-1.eventgrid.azure.net
   * @param events An array of events to be published to Event Grid.
   * @param options The options parameters.
   */
  publishCloudEventEvents(
    topicHostname: string,
    events: CloudEvent[],
    options?: PublishCloudEventEventsOptionalParams,
  ): Promise<void> {
    return this.sendOperationRequest(
      { topicHostname, events, options },
      publishCloudEventEventsOperationSpec,
    );
  }

  /**
   * Publishes a batch of events to an Azure Event Grid topic.
   * @param topicHostname The host name of the topic, e.g. topic1.westus2-1.eventgrid.azure.net
   * @param events An array of events to be published to Event Grid.
   * @param options The options parameters.
   */
  publishCustomEventEvents(
    topicHostname: string,
    events: Record<string, unknown>[],
    options?: PublishCustomEventEventsOptionalParams,
  ): Promise<void> {
    return this.sendOperationRequest(
      { topicHostname, events, options },
      publishCustomEventEventsOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const publishEventGridEventsOperationSpec: coreClient.OperationSpec = {
  path: "",
  httpMethod: "POST",
  responses: { 200: {}, default: {} },
  requestBody: Parameters.events,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.topicHostname],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer,
};
const publishCloudEventEventsOperationSpec: coreClient.OperationSpec = {
  path: "",
  httpMethod: "POST",
  responses: { 200: {}, default: {} },
  requestBody: Parameters.events1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.topicHostname],
  headerParameters: [Parameters.contentType1, Parameters.aegChannelName],
  mediaType: "json",
  serializer,
};
const publishCustomEventEventsOperationSpec: coreClient.OperationSpec = {
  path: "",
  httpMethod: "POST",
  responses: { 200: {}, default: {} },
  requestBody: Parameters.events2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.topicHostname],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer,
};
