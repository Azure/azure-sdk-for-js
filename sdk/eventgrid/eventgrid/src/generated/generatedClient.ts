/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationOptions,
  OperationResponse,
  OperationSpec,
  createSerializer
} from "@azure/core-client";
import * as Parameters from "./models/parameters";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { GeneratedClientContext } from "./generatedClientContext";
import { GeneratedClientOptionalParams, EventGridEvent, CloudEvent } from "./models";

class GeneratedClient extends GeneratedClientContext {
  /**
   * Initializes a new instance of the GeneratedClient class.
   * @param options The parameter options
   */
  constructor(options?: GeneratedClientOptionalParams) {
    super(options);
  }

  /**
   * Publishes a batch of events to an Azure Event Grid topic.
   * @param topicHostname The host name of the topic, e.g. topic1.westus2-1.eventgrid.azure.net
   * @param events An array of events to be published to Event Grid.
   * @param options The options parameters.
   */
  publishEvents(
    topicHostname: string,
    events: EventGridEvent[],
    options?: OperationOptions
  ): Promise<OperationResponse> {
    return this.sendOperationRequest(
      { topicHostname, events, options },
      publishEventsOperationSpec
    ) as Promise<OperationResponse>;
  }

  /**
   * Publishes a batch of events to an Azure Event Grid topic.
   * @param topicHostname The host name of the topic, e.g. topic1.westus2-1.eventgrid.azure.net
   * @param events An array of events to be published to Event Grid.
   * @param options The options parameters.
   */
  publishCloudEventEvents(
    topicHostname: string,
    events: CloudEvent[],
    options?: OperationOptions
  ): Promise<OperationResponse> {
    return this.sendOperationRequest(
      { topicHostname, events, options },
      publishCloudEventEventsOperationSpec
    ) as Promise<OperationResponse>;
  }

  /**
   * Publishes a batch of events to an Azure Event Grid topic.
   * @param topicHostname The host name of the topic, e.g. topic1.westus2-1.eventgrid.azure.net
   * @param events An array of events to be published to Event Grid.
   * @param options The options parameters.
   */
  publishCustomEventEvents(
    topicHostname: string,
    events: any[],
    options?: OperationOptions
  ): Promise<OperationResponse> {
    return this.sendOperationRequest(
      { topicHostname, events, options },
      publishCustomEventEventsOperationSpec
    ) as Promise<OperationResponse>;
  }
}
// Operation Specifications

const serializer = createSerializer(Mappers, /* isXml */ false);

const publishEventsOperationSpec: OperationSpec = {
  path: "/api/events",
  httpMethod: "POST",
  responses: { 200: {}, default: {} },
  requestBody: Parameters.events,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.topicHostname],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const publishCloudEventEventsOperationSpec: OperationSpec = {
  path: "/api/events",
  httpMethod: "POST",
  responses: { 200: {}, default: {} },
  requestBody: Parameters.events1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.topicHostname],
  headerParameters: [Parameters.contentType1],
  mediaType: "json",
  serializer
};
const publishCustomEventEventsOperationSpec: OperationSpec = {
  path: "/api/events",
  httpMethod: "POST",
  responses: { 200: {}, default: {} },
  requestBody: Parameters.events2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.topicHostname],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};

// Operation Specifications

export {
  GeneratedClient,
  GeneratedClientContext,
  Models as GeneratedModels,
  Mappers as GeneratedMappers
};
