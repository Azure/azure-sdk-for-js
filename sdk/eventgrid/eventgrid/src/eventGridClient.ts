/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import {
  EventGridClientOptionalParams,
  EventGridEvent,
  PublishEventsOptionalParams,
  CloudEvent,
  PublishCloudEventEventsOptionalParams,
  PublishCustomEventEventsOptionalParams
} from "./models";

export class EventGridClient extends coreClient.ServiceClient {
  apiVersion: string;

  /**
   * Initializes a new instance of the EventGridClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    options?: EventGridClientOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: EventGridClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-eventgrid/1.0.0-beta.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    if (!options.credentialScopes) {
      options.credentialScopes = ["https://management.azure.com/.default"];
    }
    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      baseUri: options.endpoint || "https://{topicHostname}"
    };
    super(optionsWithDefaults);

    // Assigning values to Constant parameters
    this.apiVersion = options.apiVersion || "2018-01-01";
  }

  /**
   * Publishes a batch of events to an Azure Event Grid topic.
   * @param topicHostname The host name of the topic, e.g. topic1.westus2-1.eventgrid.azure.net
   * @param events An array of events to be published to Event Grid.
   * @param options The options parameters.
   */
  publishEvents(
    topicHostname: string,
    events: EventGridEvent[],
    options?: PublishEventsOptionalParams
  ): Promise<void> {
    return this.sendOperationRequest(
      { topicHostname, events, options },
      publishEventsOperationSpec
    );
  }

  /**
   * Publishes a batch of events to an Azure Event Grid topic.
   * @param topicHostname The host name of the topic, e.g. topic1.westus2-1.eventgrid.azure.net
   * @param events An array of events to be published to Event Grid.
   * @param options The options parameters.
   */
  publishCloudEventEvents(
    topicHostname: string,
    events: CloudEvent[],
    options?: PublishCloudEventEventsOptionalParams
  ): Promise<void> {
    return this.sendOperationRequest(
      { topicHostname, events, options },
      publishCloudEventEventsOperationSpec
    );
  }

  /**
   * Publishes a batch of events to an Azure Event Grid topic.
   * @param topicHostname The host name of the topic, e.g. topic1.westus2-1.eventgrid.azure.net
   * @param events An array of events to be published to Event Grid.
   * @param options The options parameters.
   */
  publishCustomEventEvents(
    topicHostname: string,
    events: Record<string, unknown>[],
    options?: PublishCustomEventEventsOptionalParams
  ): Promise<void> {
    return this.sendOperationRequest(
      { topicHostname, events, options },
      publishCustomEventEventsOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const publishEventsOperationSpec: coreClient.OperationSpec = {
  path: "/api/events",
  httpMethod: "POST",
  responses: { 200: {}, default: {} },
  requestBody: Parameters.events,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.topicHostname],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const publishCloudEventEventsOperationSpec: coreClient.OperationSpec = {
  path: "/api/events",
  httpMethod: "POST",
  responses: { 200: {}, default: {} },
  requestBody: Parameters.events1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.topicHostname],
  headerParameters: [Parameters.contentType1],
  mediaType: "json",
  serializer
};
const publishCustomEventEventsOperationSpec: coreClient.OperationSpec = {
  path: "/api/events",
  httpMethod: "POST",
  responses: { 200: {}, default: {} },
  requestBody: Parameters.events2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.topicHostname],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
