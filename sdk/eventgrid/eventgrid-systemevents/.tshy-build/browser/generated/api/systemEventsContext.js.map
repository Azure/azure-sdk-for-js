{"version":3,"file":"systemEventsContext.js","sourceRoot":"","sources":["../../../../src/generated/api/systemEventsContext.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAElC,OAAO,EAAE,MAAM,EAAE,MAAM,cAAc,CAAC;AACtC,OAAO,EAAyB,SAAS,EAAE,MAAM,yBAAyB,CAAC;AAQ3E,6CAA6C;AAC7C,MAAM,UAAU,kBAAkB,CAChC,aAAqB,EACrB,UAA4C,EAAE;;IAE9C,MAAM,WAAW,GACf,MAAA,MAAA,OAAO,CAAC,QAAQ,mCAAI,OAAO,CAAC,OAAO,mCAAI,MAAM,CAAC,aAAa,CAAC,CAAC;IAC/D,MAAM,iBAAiB,GAAG,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,gBAAgB,0CAAE,eAAe,CAAC;IACrE,MAAM,aAAa,GAAG,8CAA8C,CAAC;IACrE,MAAM,eAAe,GAAG,iBAAiB;QACvC,CAAC,CAAC,GAAG,iBAAiB,iBAAiB,aAAa,EAAE;QACtD,CAAC,CAAC,gBAAgB,aAAa,EAAE,CAAC;IACpC,MAAM,qCACD,OAAO,KACV,gBAAgB,EAAE,EAAE,eAAe,EAAE,EACrC,cAAc,EAAE,EAAE,MAAM,EAAE,MAAA,MAAA,OAAO,CAAC,cAAc,0CAAE,MAAM,mCAAI,MAAM,CAAC,IAAI,EAAE,GAC1E,EAJK,EAAE,UAAU,EAAE,CAAC,OAIpB,EAJyB,cAAc,cAAlC,cAAoC,CAIzC,CAAC;IACF,MAAM,aAAa,GAAG,SAAS,CAAC,WAAW,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC;IACxE,aAAa,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,kBAAkB,EAAE,CAAC,CAAC;IAClE,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;QACvB,MAAM,CAAC,OAAO,CACZ,0FAA0F,CAC3F,CAAC;IACJ,CAAC;IACD,OAAO,aAAa,CAAC;AACvB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { logger } from \"../logger.js\";\nimport { Client, ClientOptions, getClient } from \"@azure-rest/core-client\";\n\n/** Azure Messaging EventGrid SystemEvents */\nexport interface SystemEventsContext extends Client {}\n\n/** Optional parameters for the client. */\nexport interface SystemEventsClientOptionalParams extends ClientOptions {}\n\n/** Azure Messaging EventGrid SystemEvents */\nexport function createSystemEvents(\n  endpointParam: string,\n  options: SystemEventsClientOptionalParams = {},\n): SystemEventsContext {\n  const endpointUrl =\n    options.endpoint ?? options.baseUrl ?? String(endpointParam);\n  const prefixFromOptions = options?.userAgentOptions?.userAgentPrefix;\n  const userAgentInfo = `azsdk-js-eventgrid-systemevents/1.0.0-beta.1`;\n  const userAgentPrefix = prefixFromOptions\n    ? `${prefixFromOptions} azsdk-js-api ${userAgentInfo}`\n    : `azsdk-js-api ${userAgentInfo}`;\n  const { apiVersion: _, ...updatedOptions } = {\n    ...options,\n    userAgentOptions: { userAgentPrefix },\n    loggingOptions: { logger: options.loggingOptions?.logger ?? logger.info },\n  };\n  const clientContext = getClient(endpointUrl, undefined, updatedOptions);\n  clientContext.pipeline.removePolicy({ name: \"ApiVersionPolicy\" });\n  if (options.apiVersion) {\n    logger.warning(\n      \"This client does not support client api-version, please change it at the operation level\",\n    );\n  }\n  return clientContext;\n}\n"]}