/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { EventChannels } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { EventGridManagementClientContext } from "../eventGridManagementClientContext";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  EventChannel,
  EventChannelsListByPartnerNamespaceNextOptionalParams,
  EventChannelsListByPartnerNamespaceOptionalParams,
  EventChannelsGetOptionalParams,
  EventChannelsGetResponse,
  EventChannelsCreateOrUpdateOptionalParams,
  EventChannelsCreateOrUpdateResponse,
  EventChannelsDeleteOptionalParams,
  EventChannelsListByPartnerNamespaceResponse,
  EventChannelsListByPartnerNamespaceNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing EventChannels operations. */
export class EventChannelsImpl implements EventChannels {
  private readonly client: EventGridManagementClientContext;

  /**
   * Initialize a new instance of the class EventChannels class.
   * @param client Reference to the service client
   */
  constructor(client: EventGridManagementClientContext) {
    this.client = client;
  }

  /**
   * List all the event channels in a partner namespace.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param options The options parameters.
   */
  public listByPartnerNamespace(
    resourceGroupName: string,
    partnerNamespaceName: string,
    options?: EventChannelsListByPartnerNamespaceOptionalParams
  ): PagedAsyncIterableIterator<EventChannel> {
    const iter = this.listByPartnerNamespacePagingAll(
      resourceGroupName,
      partnerNamespaceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByPartnerNamespacePagingPage(
          resourceGroupName,
          partnerNamespaceName,
          options
        );
      }
    };
  }

  private async *listByPartnerNamespacePagingPage(
    resourceGroupName: string,
    partnerNamespaceName: string,
    options?: EventChannelsListByPartnerNamespaceOptionalParams
  ): AsyncIterableIterator<EventChannel[]> {
    let result = await this._listByPartnerNamespace(
      resourceGroupName,
      partnerNamespaceName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByPartnerNamespaceNext(
        resourceGroupName,
        partnerNamespaceName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByPartnerNamespacePagingAll(
    resourceGroupName: string,
    partnerNamespaceName: string,
    options?: EventChannelsListByPartnerNamespaceOptionalParams
  ): AsyncIterableIterator<EventChannel> {
    for await (const page of this.listByPartnerNamespacePagingPage(
      resourceGroupName,
      partnerNamespaceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get properties of an event channel.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param eventChannelName Name of the event channel.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    partnerNamespaceName: string,
    eventChannelName: string,
    options?: EventChannelsGetOptionalParams
  ): Promise<EventChannelsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, partnerNamespaceName, eventChannelName, options },
      getOperationSpec
    );
  }

  /**
   * Asynchronously creates a new event channel with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param eventChannelName Name of the event channel.
   * @param eventChannelInfo EventChannel information.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    partnerNamespaceName: string,
    eventChannelName: string,
    eventChannelInfo: EventChannel,
    options?: EventChannelsCreateOrUpdateOptionalParams
  ): Promise<EventChannelsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        partnerNamespaceName,
        eventChannelName,
        eventChannelInfo,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Delete existing event channel.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param eventChannelName Name of the event channel.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    partnerNamespaceName: string,
    eventChannelName: string,
    options?: EventChannelsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, partnerNamespaceName, eventChannelName, options },
      deleteOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * Delete existing event channel.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param eventChannelName Name of the event channel.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    partnerNamespaceName: string,
    eventChannelName: string,
    options?: EventChannelsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      partnerNamespaceName,
      eventChannelName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * List all the event channels in a partner namespace.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param options The options parameters.
   */
  private _listByPartnerNamespace(
    resourceGroupName: string,
    partnerNamespaceName: string,
    options?: EventChannelsListByPartnerNamespaceOptionalParams
  ): Promise<EventChannelsListByPartnerNamespaceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, partnerNamespaceName, options },
      listByPartnerNamespaceOperationSpec
    );
  }

  /**
   * ListByPartnerNamespaceNext
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param nextLink The nextLink from the previous successful call to the ListByPartnerNamespace method.
   * @param options The options parameters.
   */
  private _listByPartnerNamespaceNext(
    resourceGroupName: string,
    partnerNamespaceName: string,
    nextLink: string,
    options?: EventChannelsListByPartnerNamespaceNextOptionalParams
  ): Promise<EventChannelsListByPartnerNamespaceNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, partnerNamespaceName, nextLink, options },
      listByPartnerNamespaceNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/eventChannels/{eventChannelName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventChannel
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerNamespaceName,
    Parameters.eventChannelName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/eventChannels/{eventChannelName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.EventChannel
    },
    default: {}
  },
  requestBody: Parameters.eventChannelInfo,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerNamespaceName,
    Parameters.eventChannelName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/eventChannels/{eventChannelName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerNamespaceName,
    Parameters.eventChannelName
  ],
  serializer
};
const listByPartnerNamespaceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/eventChannels",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventChannelsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerNamespaceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByPartnerNamespaceNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventChannelsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.partnerNamespaceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
