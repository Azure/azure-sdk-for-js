/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/topicTypesMappers";
import * as Parameters from "../models/parameters";
import { EventGridManagementClientContext } from "../eventGridManagementClientContext";

/** Class representing a TopicTypes. */
export class TopicTypes {
  private readonly client: EventGridManagementClientContext;

  /**
   * Create a TopicTypes.
   * @param {EventGridManagementClientContext} client Reference to the service client.
   */
  constructor(client: EventGridManagementClientContext) {
    this.client = client;
  }

  /**
   * List all registered topic types.
   * @summary List topic types.
   * @param [options] The optional parameters
   * @returns Promise<Models.TopicTypesListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.TopicTypesListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.TopicTypesListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TopicTypesListResult>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TopicTypesListResult>, callback?: msRest.ServiceCallback<Models.TopicTypesListResult>): Promise<Models.TopicTypesListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.TopicTypesListResponse>;
  }

  /**
   * Get information about a topic type.
   * @summary Get a topic type.
   * @param topicTypeName Name of the topic type.
   * @param [options] The optional parameters
   * @returns Promise<Models.TopicTypesGetResponse>
   */
  get(topicTypeName: string, options?: msRest.RequestOptionsBase): Promise<Models.TopicTypesGetResponse>;
  /**
   * @param topicTypeName Name of the topic type.
   * @param callback The callback
   */
  get(topicTypeName: string, callback: msRest.ServiceCallback<Models.TopicTypeInfo>): void;
  /**
   * @param topicTypeName Name of the topic type.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(topicTypeName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TopicTypeInfo>): void;
  get(topicTypeName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TopicTypeInfo>, callback?: msRest.ServiceCallback<Models.TopicTypeInfo>): Promise<Models.TopicTypesGetResponse> {
    return this.client.sendOperationRequest(
      {
        topicTypeName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.TopicTypesGetResponse>;
  }

  /**
   * List event types for a topic type.
   * @summary List event types.
   * @param topicTypeName Name of the topic type.
   * @param [options] The optional parameters
   * @returns Promise<Models.TopicTypesListEventTypesResponse>
   */
  listEventTypes(topicTypeName: string, options?: msRest.RequestOptionsBase): Promise<Models.TopicTypesListEventTypesResponse>;
  /**
   * @param topicTypeName Name of the topic type.
   * @param callback The callback
   */
  listEventTypes(topicTypeName: string, callback: msRest.ServiceCallback<Models.EventTypesListResult>): void;
  /**
   * @param topicTypeName Name of the topic type.
   * @param options The optional parameters
   * @param callback The callback
   */
  listEventTypes(topicTypeName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EventTypesListResult>): void;
  listEventTypes(topicTypeName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EventTypesListResult>, callback?: msRest.ServiceCallback<Models.EventTypesListResult>): Promise<Models.TopicTypesListEventTypesResponse> {
    return this.client.sendOperationRequest(
      {
        topicTypeName,
        options
      },
      listEventTypesOperationSpec,
      callback) as Promise<Models.TopicTypesListEventTypesResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.EventGrid/topicTypes",
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TopicTypesListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.EventGrid/topicTypes/{topicTypeName}",
  urlParameters: [
    Parameters.topicTypeName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TopicTypeInfo
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listEventTypesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventTypes",
  urlParameters: [
    Parameters.topicTypeName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventTypesListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
