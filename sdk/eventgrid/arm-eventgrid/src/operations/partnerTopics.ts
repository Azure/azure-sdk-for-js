/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { PartnerTopics } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { EventGridManagementClient } from "../eventGridManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  PartnerTopic,
  PartnerTopicsListBySubscriptionNextOptionalParams,
  PartnerTopicsListBySubscriptionOptionalParams,
  PartnerTopicsListBySubscriptionResponse,
  PartnerTopicsListByResourceGroupNextOptionalParams,
  PartnerTopicsListByResourceGroupOptionalParams,
  PartnerTopicsListByResourceGroupResponse,
  PartnerTopicsGetOptionalParams,
  PartnerTopicsGetResponse,
  PartnerTopicsCreateOrUpdateOptionalParams,
  PartnerTopicsCreateOrUpdateResponse,
  PartnerTopicsDeleteOptionalParams,
  PartnerTopicUpdateParameters,
  PartnerTopicsUpdateOptionalParams,
  PartnerTopicsUpdateResponse,
  PartnerTopicsActivateOptionalParams,
  PartnerTopicsActivateResponse,
  PartnerTopicsDeactivateOptionalParams,
  PartnerTopicsDeactivateResponse,
  PartnerTopicsListBySubscriptionNextResponse,
  PartnerTopicsListByResourceGroupNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing PartnerTopics operations. */
export class PartnerTopicsImpl implements PartnerTopics {
  private readonly client: EventGridManagementClient;

  /**
   * Initialize a new instance of the class PartnerTopics class.
   * @param client Reference to the service client
   */
  constructor(client: EventGridManagementClient) {
    this.client = client;
  }

  /**
   * List all the partner topics under an Azure subscription.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: PartnerTopicsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<PartnerTopic> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: PartnerTopicsListBySubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<PartnerTopic[]> {
    let result: PartnerTopicsListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: PartnerTopicsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<PartnerTopic> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List all the partner topics under a resource group.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: PartnerTopicsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<PartnerTopic> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: PartnerTopicsListByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<PartnerTopic[]> {
    let result: PartnerTopicsListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: PartnerTopicsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<PartnerTopic> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get properties of a partner topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerTopicName Name of the partner topic.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    partnerTopicName: string,
    options?: PartnerTopicsGetOptionalParams
  ): Promise<PartnerTopicsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, partnerTopicName, options },
      getOperationSpec
    );
  }

  /**
   * Asynchronously creates a new partner topic with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerTopicName Name of the partner topic.
   * @param partnerTopicInfo Partner Topic information.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    partnerTopicName: string,
    partnerTopicInfo: PartnerTopic,
    options?: PartnerTopicsCreateOrUpdateOptionalParams
  ): Promise<PartnerTopicsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, partnerTopicName, partnerTopicInfo, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Delete existing partner topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerTopicName Name of the partner topic.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    partnerTopicName: string,
    options?: PartnerTopicsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, partnerTopicName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete existing partner topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerTopicName Name of the partner topic.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    partnerTopicName: string,
    options?: PartnerTopicsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      partnerTopicName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Asynchronously updates a partner topic with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerTopicName Name of the partner topic.
   * @param partnerTopicUpdateParameters PartnerTopic update information.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    partnerTopicName: string,
    partnerTopicUpdateParameters: PartnerTopicUpdateParameters,
    options?: PartnerTopicsUpdateOptionalParams
  ): Promise<PartnerTopicsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        partnerTopicName,
        partnerTopicUpdateParameters,
        options
      },
      updateOperationSpec
    );
  }

  /**
   * List all the partner topics under an Azure subscription.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: PartnerTopicsListBySubscriptionOptionalParams
  ): Promise<PartnerTopicsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * List all the partner topics under a resource group.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: PartnerTopicsListByResourceGroupOptionalParams
  ): Promise<PartnerTopicsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Activate a newly created partner topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerTopicName Name of the partner topic.
   * @param options The options parameters.
   */
  activate(
    resourceGroupName: string,
    partnerTopicName: string,
    options?: PartnerTopicsActivateOptionalParams
  ): Promise<PartnerTopicsActivateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, partnerTopicName, options },
      activateOperationSpec
    );
  }

  /**
   * Deactivate specific partner topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerTopicName Name of the partner topic.
   * @param options The options parameters.
   */
  deactivate(
    resourceGroupName: string,
    partnerTopicName: string,
    options?: PartnerTopicsDeactivateOptionalParams
  ): Promise<PartnerTopicsDeactivateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, partnerTopicName, options },
      deactivateOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: PartnerTopicsListBySubscriptionNextOptionalParams
  ): Promise<PartnerTopicsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: PartnerTopicsListByResourceGroupNextOptionalParams
  ): Promise<PartnerTopicsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PartnerTopic
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerTopicName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PartnerTopic
    },
    201: {
      bodyMapper: Mappers.PartnerTopic
    },
    default: {}
  },
  requestBody: Parameters.partnerTopicInfo,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerTopicName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerTopicName
  ],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}",
  httpMethod: "PATCH",
  responses: {
    200: {},
    201: {
      bodyMapper: Mappers.PartnerTopic
    },
    default: {}
  },
  requestBody: Parameters.partnerTopicUpdateParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerTopicName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/partnerTopics",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PartnerTopicsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PartnerTopicsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const activateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}/activate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PartnerTopic
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerTopicName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deactivateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}/deactivate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PartnerTopic
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerTopicName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PartnerTopicsListResult
    },
    default: {}
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PartnerTopicsListResult
    },
    default: {}
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
