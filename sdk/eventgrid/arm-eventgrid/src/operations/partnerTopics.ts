/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/partnerTopicsMappers";
import * as Parameters from "../models/parameters";
import { EventGridManagementClientContext } from "../eventGridManagementClientContext";

/** Class representing a PartnerTopics. */
export class PartnerTopics {
  private readonly client: EventGridManagementClientContext;

  /**
   * Create a PartnerTopics.
   * @param {EventGridManagementClientContext} client Reference to the service client.
   */
  constructor(client: EventGridManagementClientContext) {
    this.client = client;
  }

  /**
   * Get properties of a partner topic.
   * @summary Get a partner topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerTopicName Name of the partner topic.
   * @param [options] The optional parameters
   * @returns Promise<Models.PartnerTopicsGetResponse>
   */
  get(resourceGroupName: string, partnerTopicName: string, options?: msRest.RequestOptionsBase): Promise<Models.PartnerTopicsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerTopicName Name of the partner topic.
   * @param callback The callback
   */
  get(resourceGroupName: string, partnerTopicName: string, callback: msRest.ServiceCallback<Models.PartnerTopic>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerTopicName Name of the partner topic.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, partnerTopicName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PartnerTopic>): void;
  get(resourceGroupName: string, partnerTopicName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PartnerTopic>, callback?: msRest.ServiceCallback<Models.PartnerTopic>): Promise<Models.PartnerTopicsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        partnerTopicName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.PartnerTopicsGetResponse>;
  }

  /**
   * Delete existing partner topic.
   * @summary Delete a partner topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerTopicName Name of the partner topic.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, partnerTopicName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,partnerTopicName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Asynchronously updates a partner topic with the specified parameters.
   * @summary Update a partner topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerTopicName Name of the partner topic.
   * @param partnerTopicUpdateParameters PartnerTopic update information.
   * @param [options] The optional parameters
   * @returns Promise<Models.PartnerTopicsUpdateResponse>
   */
  update(resourceGroupName: string, partnerTopicName: string, partnerTopicUpdateParameters: Models.PartnerTopicUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.PartnerTopicsUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerTopicName Name of the partner topic.
   * @param partnerTopicUpdateParameters PartnerTopic update information.
   * @param callback The callback
   */
  update(resourceGroupName: string, partnerTopicName: string, partnerTopicUpdateParameters: Models.PartnerTopicUpdateParameters, callback: msRest.ServiceCallback<Models.PartnerTopic>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerTopicName Name of the partner topic.
   * @param partnerTopicUpdateParameters PartnerTopic update information.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, partnerTopicName: string, partnerTopicUpdateParameters: Models.PartnerTopicUpdateParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PartnerTopic>): void;
  update(resourceGroupName: string, partnerTopicName: string, partnerTopicUpdateParameters: Models.PartnerTopicUpdateParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PartnerTopic>, callback?: msRest.ServiceCallback<Models.PartnerTopic>): Promise<Models.PartnerTopicsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        partnerTopicName,
        partnerTopicUpdateParameters,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.PartnerTopicsUpdateResponse>;
  }

  /**
   * List all the partner topics under an Azure subscription.
   * @summary List partner topics under an Azure subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.PartnerTopicsListBySubscriptionResponse>
   */
  listBySubscription(options?: Models.PartnerTopicsListBySubscriptionOptionalParams): Promise<Models.PartnerTopicsListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.PartnerTopicsListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: Models.PartnerTopicsListBySubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.PartnerTopicsListResult>): void;
  listBySubscription(options?: Models.PartnerTopicsListBySubscriptionOptionalParams | msRest.ServiceCallback<Models.PartnerTopicsListResult>, callback?: msRest.ServiceCallback<Models.PartnerTopicsListResult>): Promise<Models.PartnerTopicsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.PartnerTopicsListBySubscriptionResponse>;
  }

  /**
   * List all the partner topics under a resource group.
   * @summary List partner topics under a resource group.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.PartnerTopicsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: Models.PartnerTopicsListByResourceGroupOptionalParams): Promise<Models.PartnerTopicsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.PartnerTopicsListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: Models.PartnerTopicsListByResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.PartnerTopicsListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: Models.PartnerTopicsListByResourceGroupOptionalParams | msRest.ServiceCallback<Models.PartnerTopicsListResult>, callback?: msRest.ServiceCallback<Models.PartnerTopicsListResult>): Promise<Models.PartnerTopicsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.PartnerTopicsListByResourceGroupResponse>;
  }

  /**
   * Activate a newly created partner topic.
   * @summary Activate a partner topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerTopicName Name of the partner topic.
   * @param [options] The optional parameters
   * @returns Promise<Models.PartnerTopicsActivateResponse>
   */
  activate(resourceGroupName: string, partnerTopicName: string, options?: msRest.RequestOptionsBase): Promise<Models.PartnerTopicsActivateResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerTopicName Name of the partner topic.
   * @param callback The callback
   */
  activate(resourceGroupName: string, partnerTopicName: string, callback: msRest.ServiceCallback<Models.PartnerTopic>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerTopicName Name of the partner topic.
   * @param options The optional parameters
   * @param callback The callback
   */
  activate(resourceGroupName: string, partnerTopicName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PartnerTopic>): void;
  activate(resourceGroupName: string, partnerTopicName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PartnerTopic>, callback?: msRest.ServiceCallback<Models.PartnerTopic>): Promise<Models.PartnerTopicsActivateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        partnerTopicName,
        options
      },
      activateOperationSpec,
      callback) as Promise<Models.PartnerTopicsActivateResponse>;
  }

  /**
   * Deactivate specific partner topic.
   * @summary Deactivate a partner topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerTopicName Name of the partner topic.
   * @param [options] The optional parameters
   * @returns Promise<Models.PartnerTopicsDeactivateResponse>
   */
  deactivate(resourceGroupName: string, partnerTopicName: string, options?: msRest.RequestOptionsBase): Promise<Models.PartnerTopicsDeactivateResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerTopicName Name of the partner topic.
   * @param callback The callback
   */
  deactivate(resourceGroupName: string, partnerTopicName: string, callback: msRest.ServiceCallback<Models.PartnerTopic>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerTopicName Name of the partner topic.
   * @param options The optional parameters
   * @param callback The callback
   */
  deactivate(resourceGroupName: string, partnerTopicName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PartnerTopic>): void;
  deactivate(resourceGroupName: string, partnerTopicName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PartnerTopic>, callback?: msRest.ServiceCallback<Models.PartnerTopic>): Promise<Models.PartnerTopicsDeactivateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        partnerTopicName,
        options
      },
      deactivateOperationSpec,
      callback) as Promise<Models.PartnerTopicsDeactivateResponse>;
  }

  /**
   * Delete existing partner topic.
   * @summary Delete a partner topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerTopicName Name of the partner topic.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, partnerTopicName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        partnerTopicName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * List all the partner topics under an Azure subscription.
   * @summary List partner topics under an Azure subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PartnerTopicsListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: Models.PartnerTopicsListBySubscriptionNextOptionalParams): Promise<Models.PartnerTopicsListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PartnerTopicsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: Models.PartnerTopicsListBySubscriptionNextOptionalParams, callback: msRest.ServiceCallback<Models.PartnerTopicsListResult>): void;
  listBySubscriptionNext(nextPageLink: string, options?: Models.PartnerTopicsListBySubscriptionNextOptionalParams | msRest.ServiceCallback<Models.PartnerTopicsListResult>, callback?: msRest.ServiceCallback<Models.PartnerTopicsListResult>): Promise<Models.PartnerTopicsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.PartnerTopicsListBySubscriptionNextResponse>;
  }

  /**
   * List all the partner topics under a resource group.
   * @summary List partner topics under a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PartnerTopicsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: Models.PartnerTopicsListByResourceGroupNextOptionalParams): Promise<Models.PartnerTopicsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PartnerTopicsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: Models.PartnerTopicsListByResourceGroupNextOptionalParams, callback: msRest.ServiceCallback<Models.PartnerTopicsListResult>): void;
  listByResourceGroupNext(nextPageLink: string, options?: Models.PartnerTopicsListByResourceGroupNextOptionalParams | msRest.ServiceCallback<Models.PartnerTopicsListResult>, callback?: msRest.ServiceCallback<Models.PartnerTopicsListResult>): Promise<Models.PartnerTopicsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.PartnerTopicsListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerTopicName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PartnerTopic
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerTopicName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "partnerTopicUpdateParameters",
    mapper: {
      ...Mappers.PartnerTopicUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {},
    201: {
      bodyMapper: Mappers.PartnerTopic
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/partnerTopics",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PartnerTopicsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PartnerTopicsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const activateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}/activate",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerTopicName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PartnerTopic
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deactivateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}/deactivate",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerTopicName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PartnerTopic
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerTopicName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PartnerTopicsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PartnerTopicsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
