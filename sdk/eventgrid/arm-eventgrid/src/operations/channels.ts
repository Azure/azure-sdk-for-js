/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Channels } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { EventGridManagementClient } from "../eventGridManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  Channel,
  ChannelsListByPartnerNamespaceNextOptionalParams,
  ChannelsListByPartnerNamespaceOptionalParams,
  ChannelsListByPartnerNamespaceResponse,
  ChannelsGetOptionalParams,
  ChannelsGetResponse,
  ChannelsCreateOrUpdateOptionalParams,
  ChannelsCreateOrUpdateResponse,
  ChannelsDeleteOptionalParams,
  ChannelUpdateParameters,
  ChannelsUpdateOptionalParams,
  ChannelsGetFullUrlOptionalParams,
  ChannelsGetFullUrlResponse,
  ChannelsListByPartnerNamespaceNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Channels operations. */
export class ChannelsImpl implements Channels {
  private readonly client: EventGridManagementClient;

  /**
   * Initialize a new instance of the class Channels class.
   * @param client Reference to the service client
   */
  constructor(client: EventGridManagementClient) {
    this.client = client;
  }

  /**
   * List all the channels in a partner namespace.
   * @param resourceGroupName The name of the resource group within the partners subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param options The options parameters.
   */
  public listByPartnerNamespace(
    resourceGroupName: string,
    partnerNamespaceName: string,
    options?: ChannelsListByPartnerNamespaceOptionalParams
  ): PagedAsyncIterableIterator<Channel> {
    const iter = this.listByPartnerNamespacePagingAll(
      resourceGroupName,
      partnerNamespaceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByPartnerNamespacePagingPage(
          resourceGroupName,
          partnerNamespaceName,
          options,
          settings
        );
      }
    };
  }

  private async *listByPartnerNamespacePagingPage(
    resourceGroupName: string,
    partnerNamespaceName: string,
    options?: ChannelsListByPartnerNamespaceOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Channel[]> {
    let result: ChannelsListByPartnerNamespaceResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByPartnerNamespace(
        resourceGroupName,
        partnerNamespaceName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByPartnerNamespaceNext(
        resourceGroupName,
        partnerNamespaceName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByPartnerNamespacePagingAll(
    resourceGroupName: string,
    partnerNamespaceName: string,
    options?: ChannelsListByPartnerNamespaceOptionalParams
  ): AsyncIterableIterator<Channel> {
    for await (const page of this.listByPartnerNamespacePagingPage(
      resourceGroupName,
      partnerNamespaceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get properties of a channel.
   * @param resourceGroupName The name of the resource group within the partners subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param channelName Name of the channel.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    partnerNamespaceName: string,
    channelName: string,
    options?: ChannelsGetOptionalParams
  ): Promise<ChannelsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, partnerNamespaceName, channelName, options },
      getOperationSpec
    );
  }

  /**
   * Synchronously creates or updates a new channel with the specified parameters.
   * @param resourceGroupName The name of the resource group within the partners subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param channelName Name of the channel.
   * @param channelInfo Channel information.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    partnerNamespaceName: string,
    channelName: string,
    channelInfo: Channel,
    options?: ChannelsCreateOrUpdateOptionalParams
  ): Promise<ChannelsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        partnerNamespaceName,
        channelName,
        channelInfo,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Delete an existing channel.
   * @param resourceGroupName The name of the resource group within the partners subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param channelName Name of the channel.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    partnerNamespaceName: string,
    channelName: string,
    options?: ChannelsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, partnerNamespaceName, channelName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete an existing channel.
   * @param resourceGroupName The name of the resource group within the partners subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param channelName Name of the channel.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    partnerNamespaceName: string,
    channelName: string,
    options?: ChannelsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      partnerNamespaceName,
      channelName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Synchronously updates a channel with the specified parameters.
   * @param resourceGroupName The name of the resource group within the partners subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param channelName Name of the channel.
   * @param channelUpdateParameters Channel update information.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    partnerNamespaceName: string,
    channelName: string,
    channelUpdateParameters: ChannelUpdateParameters,
    options?: ChannelsUpdateOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        partnerNamespaceName,
        channelName,
        channelUpdateParameters,
        options
      },
      updateOperationSpec
    );
  }

  /**
   * List all the channels in a partner namespace.
   * @param resourceGroupName The name of the resource group within the partners subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param options The options parameters.
   */
  private _listByPartnerNamespace(
    resourceGroupName: string,
    partnerNamespaceName: string,
    options?: ChannelsListByPartnerNamespaceOptionalParams
  ): Promise<ChannelsListByPartnerNamespaceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, partnerNamespaceName, options },
      listByPartnerNamespaceOperationSpec
    );
  }

  /**
   * Get the full endpoint URL of a partner destination channel.
   * @param resourceGroupName The name of the resource group within the partners subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param channelName Name of the Channel.
   * @param options The options parameters.
   */
  getFullUrl(
    resourceGroupName: string,
    partnerNamespaceName: string,
    channelName: string,
    options?: ChannelsGetFullUrlOptionalParams
  ): Promise<ChannelsGetFullUrlResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, partnerNamespaceName, channelName, options },
      getFullUrlOperationSpec
    );
  }

  /**
   * ListByPartnerNamespaceNext
   * @param resourceGroupName The name of the resource group within the partners subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param nextLink The nextLink from the previous successful call to the ListByPartnerNamespace method.
   * @param options The options parameters.
   */
  private _listByPartnerNamespaceNext(
    resourceGroupName: string,
    partnerNamespaceName: string,
    nextLink: string,
    options?: ChannelsListByPartnerNamespaceNextOptionalParams
  ): Promise<ChannelsListByPartnerNamespaceNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, partnerNamespaceName, nextLink, options },
      listByPartnerNamespaceNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/channels/{channelName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Channel
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerNamespaceName,
    Parameters.channelName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/channels/{channelName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Channel
    },
    201: {
      bodyMapper: Mappers.Channel
    },
    default: {}
  },
  requestBody: Parameters.channelInfo,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerNamespaceName,
    Parameters.channelName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/channels/{channelName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerNamespaceName,
    Parameters.channelName
  ],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/channels/{channelName}",
  httpMethod: "PATCH",
  responses: { 200: {}, default: {} },
  requestBody: Parameters.channelUpdateParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerNamespaceName,
    Parameters.channelName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByPartnerNamespaceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/channels",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ChannelsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerNamespaceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getFullUrlOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/channels/{channelName}/getFullUrl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionFullUrl
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerNamespaceName,
    Parameters.channelName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByPartnerNamespaceNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ChannelsListResult
    },
    default: {}
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerNamespaceName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
