/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PartnerDestinations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { EventGridManagementClient } from "../eventGridManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  PartnerDestination,
  PartnerDestinationsListBySubscriptionNextOptionalParams,
  PartnerDestinationsListBySubscriptionOptionalParams,
  PartnerDestinationsListByResourceGroupNextOptionalParams,
  PartnerDestinationsListByResourceGroupOptionalParams,
  PartnerDestinationsGetOptionalParams,
  PartnerDestinationsGetResponse,
  PartnerDestinationsCreateOrUpdateOptionalParams,
  PartnerDestinationsCreateOrUpdateResponse,
  PartnerDestinationsDeleteOptionalParams,
  PartnerDestinationUpdateParameters,
  PartnerDestinationsUpdateOptionalParams,
  PartnerDestinationsUpdateResponse,
  PartnerDestinationsListBySubscriptionResponse,
  PartnerDestinationsListByResourceGroupResponse,
  PartnerDestinationsActivateOptionalParams,
  PartnerDestinationsActivateResponse,
  PartnerDestinationsListBySubscriptionNextResponse,
  PartnerDestinationsListByResourceGroupNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing PartnerDestinations operations. */
export class PartnerDestinationsImpl implements PartnerDestinations {
  private readonly client: EventGridManagementClient;

  /**
   * Initialize a new instance of the class PartnerDestinations class.
   * @param client Reference to the service client
   */
  constructor(client: EventGridManagementClient) {
    this.client = client;
  }

  /**
   * List all the partner destinations under an Azure subscription.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: PartnerDestinationsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<PartnerDestination> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionPagingPage(options);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: PartnerDestinationsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<PartnerDestination[]> {
    let result = await this._listBySubscription(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: PartnerDestinationsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<PartnerDestination> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List all the partner destinations under a resource group.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: PartnerDestinationsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<PartnerDestination> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage(resourceGroupName, options);
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: PartnerDestinationsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<PartnerDestination[]> {
    let result = await this._listByResourceGroup(resourceGroupName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: PartnerDestinationsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<PartnerDestination> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get properties of a partner destination.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerDestinationName Name of the partner destination.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    partnerDestinationName: string,
    options?: PartnerDestinationsGetOptionalParams
  ): Promise<PartnerDestinationsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, partnerDestinationName, options },
      getOperationSpec
    );
  }

  /**
   * Asynchronously creates a new partner destination with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerDestinationName Name of the partner destination.
   * @param partnerDestination Partner destination create information.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    partnerDestinationName: string,
    partnerDestination: PartnerDestination,
    options?: PartnerDestinationsCreateOrUpdateOptionalParams
  ): Promise<PartnerDestinationsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        partnerDestinationName,
        partnerDestination,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Delete existing partner destination.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerDestinationName Name of the partner destination.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    partnerDestinationName: string,
    options?: PartnerDestinationsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, partnerDestinationName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete existing partner destination.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerDestinationName Name of the partner destination.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    partnerDestinationName: string,
    options?: PartnerDestinationsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      partnerDestinationName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Asynchronously updates a partner destination with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerDestinationName Name of the partner destination.
   * @param partnerDestinationUpdateParameters Partner destination update information.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    partnerDestinationName: string,
    partnerDestinationUpdateParameters: PartnerDestinationUpdateParameters,
    options?: PartnerDestinationsUpdateOptionalParams
  ): Promise<PartnerDestinationsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        partnerDestinationName,
        partnerDestinationUpdateParameters,
        options
      },
      updateOperationSpec
    );
  }

  /**
   * List all the partner destinations under an Azure subscription.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: PartnerDestinationsListBySubscriptionOptionalParams
  ): Promise<PartnerDestinationsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * List all the partner destinations under a resource group.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: PartnerDestinationsListByResourceGroupOptionalParams
  ): Promise<PartnerDestinationsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Activate a newly created partner destination.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerDestinationName Name of the partner destination.
   * @param options The options parameters.
   */
  activate(
    resourceGroupName: string,
    partnerDestinationName: string,
    options?: PartnerDestinationsActivateOptionalParams
  ): Promise<PartnerDestinationsActivateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, partnerDestinationName, options },
      activateOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: PartnerDestinationsListBySubscriptionNextOptionalParams
  ): Promise<PartnerDestinationsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: PartnerDestinationsListByResourceGroupNextOptionalParams
  ): Promise<PartnerDestinationsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerDestinations/{partnerDestinationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PartnerDestination
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerDestinationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerDestinations/{partnerDestinationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PartnerDestination
    },
    201: {
      bodyMapper: Mappers.PartnerDestination
    },
    default: {}
  },
  requestBody: Parameters.partnerDestination,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerDestinationName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerDestinations/{partnerDestinationName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerDestinationName
  ],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerDestinations/{partnerDestinationName}",
  httpMethod: "PATCH",
  responses: {
    200: {},
    201: {
      bodyMapper: Mappers.PartnerDestination
    },
    default: {}
  },
  requestBody: Parameters.partnerDestinationUpdateParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerDestinationName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/partnerDestinations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PartnerDestinationsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerDestinations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PartnerDestinationsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const activateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerDestinations/{partnerDestinationName}/activate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PartnerDestination
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerDestinationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PartnerDestinationsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PartnerDestinationsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
