/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/partnerRegistrationsMappers";
import * as Parameters from "../models/parameters";
import { EventGridManagementClientContext } from "../eventGridManagementClientContext";

/** Class representing a PartnerRegistrations. */
export class PartnerRegistrations {
  private readonly client: EventGridManagementClientContext;

  /**
   * Create a PartnerRegistrations.
   * @param {EventGridManagementClientContext} client Reference to the service client.
   */
  constructor(client: EventGridManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets a partner registration with the specified parameters.
   * @summary Get a partner registration.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerRegistrationName Name of the partner registration.
   * @param [options] The optional parameters
   * @returns Promise<Models.PartnerRegistrationsGetResponse>
   */
  get(resourceGroupName: string, partnerRegistrationName: string, options?: msRest.RequestOptionsBase): Promise<Models.PartnerRegistrationsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerRegistrationName Name of the partner registration.
   * @param callback The callback
   */
  get(resourceGroupName: string, partnerRegistrationName: string, callback: msRest.ServiceCallback<Models.PartnerRegistration>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerRegistrationName Name of the partner registration.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, partnerRegistrationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PartnerRegistration>): void;
  get(resourceGroupName: string, partnerRegistrationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PartnerRegistration>, callback?: msRest.ServiceCallback<Models.PartnerRegistration>): Promise<Models.PartnerRegistrationsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        partnerRegistrationName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.PartnerRegistrationsGetResponse>;
  }

  /**
   * Creates a new partner registration with the specified parameters.
   * @summary Create a partner registration.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerRegistrationName Name of the partner registration.
   * @param partnerRegistrationInfo PartnerRegistration information.
   * @param [options] The optional parameters
   * @returns Promise<Models.PartnerRegistrationsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, partnerRegistrationName: string, partnerRegistrationInfo: Models.PartnerRegistration, options?: msRest.RequestOptionsBase): Promise<Models.PartnerRegistrationsCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerRegistrationName Name of the partner registration.
   * @param partnerRegistrationInfo PartnerRegistration information.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, partnerRegistrationName: string, partnerRegistrationInfo: Models.PartnerRegistration, callback: msRest.ServiceCallback<Models.PartnerRegistration>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerRegistrationName Name of the partner registration.
   * @param partnerRegistrationInfo PartnerRegistration information.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, partnerRegistrationName: string, partnerRegistrationInfo: Models.PartnerRegistration, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PartnerRegistration>): void;
  createOrUpdate(resourceGroupName: string, partnerRegistrationName: string, partnerRegistrationInfo: Models.PartnerRegistration, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PartnerRegistration>, callback?: msRest.ServiceCallback<Models.PartnerRegistration>): Promise<Models.PartnerRegistrationsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        partnerRegistrationName,
        partnerRegistrationInfo,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.PartnerRegistrationsCreateOrUpdateResponse>;
  }

  /**
   * Deletes a partner registration with the specified parameters.
   * @summary Delete a partner registration.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerRegistrationName Name of the partner registration.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, partnerRegistrationName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerRegistrationName Name of the partner registration.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, partnerRegistrationName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerRegistrationName Name of the partner registration.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, partnerRegistrationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, partnerRegistrationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        partnerRegistrationName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Updates a partner registration with the specified parameters.
   * @summary Update a partner registration.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerRegistrationName Name of the partner registration.
   * @param partnerRegistrationUpdateParameters Partner registration update information.
   * @param [options] The optional parameters
   * @returns Promise<Models.PartnerRegistrationsUpdateResponse>
   */
  update(resourceGroupName: string, partnerRegistrationName: string, partnerRegistrationUpdateParameters: Models.PartnerRegistrationUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.PartnerRegistrationsUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerRegistrationName Name of the partner registration.
   * @param partnerRegistrationUpdateParameters Partner registration update information.
   * @param callback The callback
   */
  update(resourceGroupName: string, partnerRegistrationName: string, partnerRegistrationUpdateParameters: Models.PartnerRegistrationUpdateParameters, callback: msRest.ServiceCallback<Models.PartnerRegistration>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerRegistrationName Name of the partner registration.
   * @param partnerRegistrationUpdateParameters Partner registration update information.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, partnerRegistrationName: string, partnerRegistrationUpdateParameters: Models.PartnerRegistrationUpdateParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PartnerRegistration>): void;
  update(resourceGroupName: string, partnerRegistrationName: string, partnerRegistrationUpdateParameters: Models.PartnerRegistrationUpdateParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PartnerRegistration>, callback?: msRest.ServiceCallback<Models.PartnerRegistration>): Promise<Models.PartnerRegistrationsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        partnerRegistrationName,
        partnerRegistrationUpdateParameters,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.PartnerRegistrationsUpdateResponse>;
  }

  /**
   * List all the partner registrations under an Azure subscription.
   * @summary List partner registrations under an Azure subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.PartnerRegistrationsListBySubscriptionResponse>
   */
  listBySubscription(options?: Models.PartnerRegistrationsListBySubscriptionOptionalParams): Promise<Models.PartnerRegistrationsListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.PartnerRegistrationsListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: Models.PartnerRegistrationsListBySubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.PartnerRegistrationsListResult>): void;
  listBySubscription(options?: Models.PartnerRegistrationsListBySubscriptionOptionalParams | msRest.ServiceCallback<Models.PartnerRegistrationsListResult>, callback?: msRest.ServiceCallback<Models.PartnerRegistrationsListResult>): Promise<Models.PartnerRegistrationsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.PartnerRegistrationsListBySubscriptionResponse>;
  }

  /**
   * List all the partner registrations under a resource group.
   * @summary List partner registrations under a resource group.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.PartnerRegistrationsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: Models.PartnerRegistrationsListByResourceGroupOptionalParams): Promise<Models.PartnerRegistrationsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.PartnerRegistrationsListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: Models.PartnerRegistrationsListByResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.PartnerRegistrationsListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: Models.PartnerRegistrationsListByResourceGroupOptionalParams | msRest.ServiceCallback<Models.PartnerRegistrationsListResult>, callback?: msRest.ServiceCallback<Models.PartnerRegistrationsListResult>): Promise<Models.PartnerRegistrationsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.PartnerRegistrationsListByResourceGroupResponse>;
  }

  /**
   * List all partners registrations.
   * @summary List all available partners registrations.
   * @param [options] The optional parameters
   * @returns Promise<Models.PartnerRegistrationsListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.PartnerRegistrationsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.PartnerRegistrationsListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PartnerRegistrationsListResult>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PartnerRegistrationsListResult>, callback?: msRest.ServiceCallback<Models.PartnerRegistrationsListResult>): Promise<Models.PartnerRegistrationsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.PartnerRegistrationsListResponse>;
  }

  /**
   * List all the partner registrations under an Azure subscription.
   * @summary List partner registrations under an Azure subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PartnerRegistrationsListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: Models.PartnerRegistrationsListBySubscriptionNextOptionalParams): Promise<Models.PartnerRegistrationsListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PartnerRegistrationsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: Models.PartnerRegistrationsListBySubscriptionNextOptionalParams, callback: msRest.ServiceCallback<Models.PartnerRegistrationsListResult>): void;
  listBySubscriptionNext(nextPageLink: string, options?: Models.PartnerRegistrationsListBySubscriptionNextOptionalParams | msRest.ServiceCallback<Models.PartnerRegistrationsListResult>, callback?: msRest.ServiceCallback<Models.PartnerRegistrationsListResult>): Promise<Models.PartnerRegistrationsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.PartnerRegistrationsListBySubscriptionNextResponse>;
  }

  /**
   * List all the partner registrations under a resource group.
   * @summary List partner registrations under a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PartnerRegistrationsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: Models.PartnerRegistrationsListByResourceGroupNextOptionalParams): Promise<Models.PartnerRegistrationsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PartnerRegistrationsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: Models.PartnerRegistrationsListByResourceGroupNextOptionalParams, callback: msRest.ServiceCallback<Models.PartnerRegistrationsListResult>): void;
  listByResourceGroupNext(nextPageLink: string, options?: Models.PartnerRegistrationsListByResourceGroupNextOptionalParams | msRest.ServiceCallback<Models.PartnerRegistrationsListResult>, callback?: msRest.ServiceCallback<Models.PartnerRegistrationsListResult>): Promise<Models.PartnerRegistrationsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.PartnerRegistrationsListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations/{partnerRegistrationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerRegistrationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PartnerRegistration
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations/{partnerRegistrationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerRegistrationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "partnerRegistrationInfo",
    mapper: {
      ...Mappers.PartnerRegistration,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PartnerRegistration
    },
    202: {
      bodyMapper: Mappers.PartnerRegistration
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations/{partnerRegistrationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerRegistrationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations/{partnerRegistrationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.partnerRegistrationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "partnerRegistrationUpdateParameters",
    mapper: {
      ...Mappers.PartnerRegistrationUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {},
    201: {
      bodyMapper: Mappers.PartnerRegistration
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/partnerRegistrations",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PartnerRegistrationsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PartnerRegistrationsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.EventGrid/partnerRegistrations",
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PartnerRegistrationsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PartnerRegistrationsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PartnerRegistrationsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
