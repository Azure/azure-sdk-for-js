/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { PrivateLinkResources } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { EventGridManagementClient } from "../eventGridManagementClient";
import {
  PrivateLinkResource,
  PrivateLinkResourcesListByResourceNextOptionalParams,
  PrivateLinkResourcesListByResourceOptionalParams,
  PrivateLinkResourcesListByResourceResponse,
  PrivateLinkResourcesGetOptionalParams,
  PrivateLinkResourcesGetResponse,
  PrivateLinkResourcesListByResourceNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing PrivateLinkResources operations. */
export class PrivateLinkResourcesImpl implements PrivateLinkResources {
  private readonly client: EventGridManagementClient;

  /**
   * Initialize a new instance of the class PrivateLinkResources class.
   * @param client Reference to the service client
   */
  constructor(client: EventGridManagementClient) {
    this.client = client;
  }

  /**
   * List all the private link resources under a topic, domain, or partner namespace.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param parentType The type of the parent resource. This can be either \'topics\', \'domains\', or
   *                   \'partnerNamespaces\'.
   * @param parentName The name of the parent resource (namely, either, the topic name, domain name, or
   *                   partner namespace name).
   * @param options The options parameters.
   */
  public listByResource(
    resourceGroupName: string,
    parentType: string,
    parentName: string,
    options?: PrivateLinkResourcesListByResourceOptionalParams
  ): PagedAsyncIterableIterator<PrivateLinkResource> {
    const iter = this.listByResourcePagingAll(
      resourceGroupName,
      parentType,
      parentName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourcePagingPage(
          resourceGroupName,
          parentType,
          parentName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourcePagingPage(
    resourceGroupName: string,
    parentType: string,
    parentName: string,
    options?: PrivateLinkResourcesListByResourceOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<PrivateLinkResource[]> {
    let result: PrivateLinkResourcesListByResourceResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResource(
        resourceGroupName,
        parentType,
        parentName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceNext(
        resourceGroupName,
        parentType,
        parentName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourcePagingAll(
    resourceGroupName: string,
    parentType: string,
    parentName: string,
    options?: PrivateLinkResourcesListByResourceOptionalParams
  ): AsyncIterableIterator<PrivateLinkResource> {
    for await (const page of this.listByResourcePagingPage(
      resourceGroupName,
      parentType,
      parentName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get properties of a private link resource.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param parentType The type of the parent resource. This can be either \'topics\', \'domains\', or
   *                   \'partnerNamespaces\'.
   * @param parentName The name of the parent resource (namely, either, the topic name, domain name, or
   *                   partner namespace name).
   * @param privateLinkResourceName The name of private link resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    parentType: string,
    parentName: string,
    privateLinkResourceName: string,
    options?: PrivateLinkResourcesGetOptionalParams
  ): Promise<PrivateLinkResourcesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        parentType,
        parentName,
        privateLinkResourceName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * List all the private link resources under a topic, domain, or partner namespace.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param parentType The type of the parent resource. This can be either \'topics\', \'domains\', or
   *                   \'partnerNamespaces\'.
   * @param parentName The name of the parent resource (namely, either, the topic name, domain name, or
   *                   partner namespace name).
   * @param options The options parameters.
   */
  private _listByResource(
    resourceGroupName: string,
    parentType: string,
    parentName: string,
    options?: PrivateLinkResourcesListByResourceOptionalParams
  ): Promise<PrivateLinkResourcesListByResourceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, parentType, parentName, options },
      listByResourceOperationSpec
    );
  }

  /**
   * ListByResourceNext
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param parentType The type of the parent resource. This can be either \'topics\', \'domains\', or
   *                   \'partnerNamespaces\'.
   * @param parentName The name of the parent resource (namely, either, the topic name, domain name, or
   *                   partner namespace name).
   * @param nextLink The nextLink from the previous successful call to the ListByResource method.
   * @param options The options parameters.
   */
  private _listByResourceNext(
    resourceGroupName: string,
    parentType: string,
    parentName: string,
    nextLink: string,
    options?: PrivateLinkResourcesListByResourceNextOptionalParams
  ): Promise<PrivateLinkResourcesListByResourceNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, parentType, parentName, nextLink, options },
      listByResourceNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/{parentType}/{parentName}/privateLinkResources/{privateLinkResourceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateLinkResource
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.parentName,
    Parameters.parentType1,
    Parameters.privateLinkResourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/{parentType}/{parentName}/privateLinkResources",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateLinkResourcesListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.parentName,
    Parameters.parentType1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateLinkResourcesListResult
    },
    default: {}
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.parentName,
    Parameters.parentType1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
