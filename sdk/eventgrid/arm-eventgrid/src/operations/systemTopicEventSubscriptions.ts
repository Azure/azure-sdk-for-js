/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/systemTopicEventSubscriptionsMappers";
import * as Parameters from "../models/parameters";
import { EventGridManagementClientContext } from "../eventGridManagementClientContext";

/** Class representing a SystemTopicEventSubscriptions. */
export class SystemTopicEventSubscriptions {
  private readonly client: EventGridManagementClientContext;

  /**
   * Create a SystemTopicEventSubscriptions.
   * @param {EventGridManagementClientContext} client Reference to the service client.
   */
  constructor(client: EventGridManagementClientContext) {
    this.client = client;
  }

  /**
   * Get an event subscription.
   * @summary Get an event subscription of a system topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param systemTopicName Name of the system topic.
   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription
   * names must be between 3 and 100 characters in length and use alphanumeric letters only.
   * @param [options] The optional parameters
   * @returns Promise<Models.SystemTopicEventSubscriptionsGetResponse>
   */
  get(resourceGroupName: string, systemTopicName: string, eventSubscriptionName: string, options?: msRest.RequestOptionsBase): Promise<Models.SystemTopicEventSubscriptionsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param systemTopicName Name of the system topic.
   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription
   * names must be between 3 and 100 characters in length and use alphanumeric letters only.
   * @param callback The callback
   */
  get(resourceGroupName: string, systemTopicName: string, eventSubscriptionName: string, callback: msRest.ServiceCallback<Models.EventSubscription>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param systemTopicName Name of the system topic.
   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription
   * names must be between 3 and 100 characters in length and use alphanumeric letters only.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, systemTopicName: string, eventSubscriptionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EventSubscription>): void;
  get(resourceGroupName: string, systemTopicName: string, eventSubscriptionName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EventSubscription>, callback?: msRest.ServiceCallback<Models.EventSubscription>): Promise<Models.SystemTopicEventSubscriptionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        systemTopicName,
        eventSubscriptionName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.SystemTopicEventSubscriptionsGetResponse>;
  }

  /**
   * Asynchronously creates or updates an event subscription with the specified parameters. Existing
   * event subscriptions will be updated with this API.
   * @summary Create or update an event subscription for a system topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param systemTopicName Name of the system topic.
   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription
   * names must be between 3 and 100 characters in length and use alphanumeric letters only.
   * @param eventSubscriptionInfo Event subscription properties containing the destination and filter
   * information.
   * @param [options] The optional parameters
   * @returns Promise<Models.SystemTopicEventSubscriptionsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, systemTopicName: string, eventSubscriptionName: string, eventSubscriptionInfo: Models.EventSubscription, options?: msRest.RequestOptionsBase): Promise<Models.SystemTopicEventSubscriptionsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,systemTopicName,eventSubscriptionName,eventSubscriptionInfo,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SystemTopicEventSubscriptionsCreateOrUpdateResponse>;
  }

  /**
   * Delete an event subscription of a system topic.
   * @summary Delete an event subscription of a system topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param systemTopicName Name of the system topic.
   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription
   * names must be between 3 and 100 characters in length and use alphanumeric letters only.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, systemTopicName: string, eventSubscriptionName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,systemTopicName,eventSubscriptionName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Update event subscription of a system topic.
   * @summary Update event subscription of a system topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param systemTopicName Name of the system topic.
   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription
   * names must be between 3 and 100 characters in length and use alphanumeric letters only.
   * @param eventSubscriptionUpdateParameters Updated event subscription information.
   * @param [options] The optional parameters
   * @returns Promise<Models.SystemTopicEventSubscriptionsUpdateResponse>
   */
  update(resourceGroupName: string, systemTopicName: string, eventSubscriptionName: string, eventSubscriptionUpdateParameters: Models.EventSubscriptionUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.SystemTopicEventSubscriptionsUpdateResponse> {
    return this.beginUpdate(resourceGroupName,systemTopicName,eventSubscriptionName,eventSubscriptionUpdateParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SystemTopicEventSubscriptionsUpdateResponse>;
  }

  /**
   * Get the full endpoint URL for an event subscription of a system topic.
   * @summary Get full URL of an event subscription of a system topic
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param systemTopicName Name of the system topic.
   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription
   * names must be between 3 and 100 characters in length and use alphanumeric letters only.
   * @param [options] The optional parameters
   * @returns Promise<Models.SystemTopicEventSubscriptionsGetFullUrlResponse>
   */
  getFullUrl(resourceGroupName: string, systemTopicName: string, eventSubscriptionName: string, options?: msRest.RequestOptionsBase): Promise<Models.SystemTopicEventSubscriptionsGetFullUrlResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param systemTopicName Name of the system topic.
   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription
   * names must be between 3 and 100 characters in length and use alphanumeric letters only.
   * @param callback The callback
   */
  getFullUrl(resourceGroupName: string, systemTopicName: string, eventSubscriptionName: string, callback: msRest.ServiceCallback<Models.EventSubscriptionFullUrl>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param systemTopicName Name of the system topic.
   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription
   * names must be between 3 and 100 characters in length and use alphanumeric letters only.
   * @param options The optional parameters
   * @param callback The callback
   */
  getFullUrl(resourceGroupName: string, systemTopicName: string, eventSubscriptionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EventSubscriptionFullUrl>): void;
  getFullUrl(resourceGroupName: string, systemTopicName: string, eventSubscriptionName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EventSubscriptionFullUrl>, callback?: msRest.ServiceCallback<Models.EventSubscriptionFullUrl>): Promise<Models.SystemTopicEventSubscriptionsGetFullUrlResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        systemTopicName,
        eventSubscriptionName,
        options
      },
      getFullUrlOperationSpec,
      callback) as Promise<Models.SystemTopicEventSubscriptionsGetFullUrlResponse>;
  }

  /**
   * List event subscriptions that belong to a specific system topic.
   * @summary List event subscriptions of a system topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param systemTopicName Name of the system topic.
   * @param [options] The optional parameters
   * @returns Promise<Models.SystemTopicEventSubscriptionsListBySystemTopicResponse>
   */
  listBySystemTopic(resourceGroupName: string, systemTopicName: string, options?: Models.SystemTopicEventSubscriptionsListBySystemTopicOptionalParams): Promise<Models.SystemTopicEventSubscriptionsListBySystemTopicResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param systemTopicName Name of the system topic.
   * @param callback The callback
   */
  listBySystemTopic(resourceGroupName: string, systemTopicName: string, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param systemTopicName Name of the system topic.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySystemTopic(resourceGroupName: string, systemTopicName: string, options: Models.SystemTopicEventSubscriptionsListBySystemTopicOptionalParams, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  listBySystemTopic(resourceGroupName: string, systemTopicName: string, options?: Models.SystemTopicEventSubscriptionsListBySystemTopicOptionalParams | msRest.ServiceCallback<Models.EventSubscriptionsListResult>, callback?: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): Promise<Models.SystemTopicEventSubscriptionsListBySystemTopicResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        systemTopicName,
        options
      },
      listBySystemTopicOperationSpec,
      callback) as Promise<Models.SystemTopicEventSubscriptionsListBySystemTopicResponse>;
  }

  /**
   * Get all delivery attributes for an event subscription.
   * @summary Get delivery attributes for an event subscription.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param systemTopicName Name of the system topic.
   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription
   * names must be between 3 and 100 characters in length and use alphanumeric letters only.
   * @param [options] The optional parameters
   * @returns Promise<Models.SystemTopicEventSubscriptionsGetDeliveryAttributesResponse>
   */
  getDeliveryAttributes(resourceGroupName: string, systemTopicName: string, eventSubscriptionName: string, options?: msRest.RequestOptionsBase): Promise<Models.SystemTopicEventSubscriptionsGetDeliveryAttributesResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param systemTopicName Name of the system topic.
   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription
   * names must be between 3 and 100 characters in length and use alphanumeric letters only.
   * @param callback The callback
   */
  getDeliveryAttributes(resourceGroupName: string, systemTopicName: string, eventSubscriptionName: string, callback: msRest.ServiceCallback<Models.DeliveryAttributeListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param systemTopicName Name of the system topic.
   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription
   * names must be between 3 and 100 characters in length and use alphanumeric letters only.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeliveryAttributes(resourceGroupName: string, systemTopicName: string, eventSubscriptionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeliveryAttributeListResult>): void;
  getDeliveryAttributes(resourceGroupName: string, systemTopicName: string, eventSubscriptionName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeliveryAttributeListResult>, callback?: msRest.ServiceCallback<Models.DeliveryAttributeListResult>): Promise<Models.SystemTopicEventSubscriptionsGetDeliveryAttributesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        systemTopicName,
        eventSubscriptionName,
        options
      },
      getDeliveryAttributesOperationSpec,
      callback) as Promise<Models.SystemTopicEventSubscriptionsGetDeliveryAttributesResponse>;
  }

  /**
   * Asynchronously creates or updates an event subscription with the specified parameters. Existing
   * event subscriptions will be updated with this API.
   * @summary Create or update an event subscription for a system topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param systemTopicName Name of the system topic.
   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription
   * names must be between 3 and 100 characters in length and use alphanumeric letters only.
   * @param eventSubscriptionInfo Event subscription properties containing the destination and filter
   * information.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, systemTopicName: string, eventSubscriptionName: string, eventSubscriptionInfo: Models.EventSubscription, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        systemTopicName,
        eventSubscriptionName,
        eventSubscriptionInfo,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Delete an event subscription of a system topic.
   * @summary Delete an event subscription of a system topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param systemTopicName Name of the system topic.
   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription
   * names must be between 3 and 100 characters in length and use alphanumeric letters only.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, systemTopicName: string, eventSubscriptionName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        systemTopicName,
        eventSubscriptionName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Update event subscription of a system topic.
   * @summary Update event subscription of a system topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param systemTopicName Name of the system topic.
   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription
   * names must be between 3 and 100 characters in length and use alphanumeric letters only.
   * @param eventSubscriptionUpdateParameters Updated event subscription information.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, systemTopicName: string, eventSubscriptionName: string, eventSubscriptionUpdateParameters: Models.EventSubscriptionUpdateParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        systemTopicName,
        eventSubscriptionName,
        eventSubscriptionUpdateParameters,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * List event subscriptions that belong to a specific system topic.
   * @summary List event subscriptions of a system topic.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SystemTopicEventSubscriptionsListBySystemTopicNextResponse>
   */
  listBySystemTopicNext(nextPageLink: string, options?: Models.SystemTopicEventSubscriptionsListBySystemTopicNextOptionalParams): Promise<Models.SystemTopicEventSubscriptionsListBySystemTopicNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySystemTopicNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySystemTopicNext(nextPageLink: string, options: Models.SystemTopicEventSubscriptionsListBySystemTopicNextOptionalParams, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  listBySystemTopicNext(nextPageLink: string, options?: Models.SystemTopicEventSubscriptionsListBySystemTopicNextOptionalParams | msRest.ServiceCallback<Models.EventSubscriptionsListResult>, callback?: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): Promise<Models.SystemTopicEventSubscriptionsListBySystemTopicNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySystemTopicNextOperationSpec,
      callback) as Promise<Models.SystemTopicEventSubscriptionsListBySystemTopicNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}/eventSubscriptions/{eventSubscriptionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.systemTopicName,
    Parameters.eventSubscriptionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscription
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getFullUrlOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}/eventSubscriptions/{eventSubscriptionName}/getFullUrl",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.systemTopicName,
    Parameters.eventSubscriptionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionFullUrl
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listBySystemTopicOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}/eventSubscriptions",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.systemTopicName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDeliveryAttributesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}/eventSubscriptions/{eventSubscriptionName}/getDeliveryAttributes",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.systemTopicName,
    Parameters.eventSubscriptionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeliveryAttributeListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}/eventSubscriptions/{eventSubscriptionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.systemTopicName,
    Parameters.eventSubscriptionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "eventSubscriptionInfo",
    mapper: {
      ...Mappers.EventSubscription,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.EventSubscription
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}/eventSubscriptions/{eventSubscriptionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.systemTopicName,
    Parameters.eventSubscriptionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}/eventSubscriptions/{eventSubscriptionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.systemTopicName,
    Parameters.eventSubscriptionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "eventSubscriptionUpdateParameters",
    mapper: {
      ...Mappers.EventSubscriptionUpdateParameters,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.EventSubscription
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listBySystemTopicNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
