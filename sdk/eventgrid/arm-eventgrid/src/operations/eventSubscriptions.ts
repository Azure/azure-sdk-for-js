/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/eventSubscriptionsMappers";
import * as Parameters from "../models/parameters";
import { EventGridManagementClientContext } from "../eventGridManagementClientContext";

/** Class representing a EventSubscriptions. */
export class EventSubscriptions {
  private readonly client: EventGridManagementClientContext;

  /**
   * Create a EventSubscriptions.
   * @param {EventGridManagementClientContext} client Reference to the service client.
   */
  constructor(client: EventGridManagementClientContext) {
    this.client = client;
  }

  /**
   * Get properties of an event subscription.
   * @summary Get an event subscription.
   * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
   * group, or a top level resource belonging to a resource provider namespace, or an EventGrid
   * topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription,
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   * for a resource, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
   * for an EventGrid topic.
   * @param eventSubscriptionName Name of the event subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventSubscriptionsGetResponse>
   */
  get(scope: string, eventSubscriptionName: string, options?: msRest.RequestOptionsBase): Promise<Models.EventSubscriptionsGetResponse>;
  /**
   * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
   * group, or a top level resource belonging to a resource provider namespace, or an EventGrid
   * topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription,
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   * for a resource, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
   * for an EventGrid topic.
   * @param eventSubscriptionName Name of the event subscription.
   * @param callback The callback
   */
  get(scope: string, eventSubscriptionName: string, callback: msRest.ServiceCallback<Models.EventSubscription>): void;
  /**
   * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
   * group, or a top level resource belonging to a resource provider namespace, or an EventGrid
   * topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription,
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   * for a resource, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
   * for an EventGrid topic.
   * @param eventSubscriptionName Name of the event subscription.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(scope: string, eventSubscriptionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EventSubscription>): void;
  get(scope: string, eventSubscriptionName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EventSubscription>, callback?: msRest.ServiceCallback<Models.EventSubscription>): Promise<Models.EventSubscriptionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        eventSubscriptionName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.EventSubscriptionsGetResponse>;
  }

  /**
   * Asynchronously creates a new event subscription or updates an existing event subscription based
   * on the specified scope.
   * @summary Create or update an event subscription.
   * @param scope The identifier of the resource to which the event subscription needs to be created
   * or updated. The scope can be a subscription, or a resource group, or a top level resource
   * belonging to a resource provider namespace, or an EventGrid topic. For example, use
   * '/subscriptions/{subscriptionId}/' for a subscription,
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   * for a resource, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
   * for an EventGrid topic.
   * @param eventSubscriptionName Name of the event subscription. Event subscription names must be
   * between 3 and 64 characters in length and should use alphanumeric letters only.
   * @param eventSubscriptionInfo Event subscription properties containing the destination and filter
   * information.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventSubscriptionsCreateOrUpdateResponse>
   */
  createOrUpdate(scope: string, eventSubscriptionName: string, eventSubscriptionInfo: Models.EventSubscription, options?: msRest.RequestOptionsBase): Promise<Models.EventSubscriptionsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(scope,eventSubscriptionName,eventSubscriptionInfo,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.EventSubscriptionsCreateOrUpdateResponse>;
  }

  /**
   * Delete an existing event subscription.
   * @summary Delete an event subscription.
   * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
   * group, or a top level resource belonging to a resource provider namespace, or an EventGrid
   * topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription,
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   * for a resource, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
   * for an EventGrid topic.
   * @param eventSubscriptionName Name of the event subscription.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(scope: string, eventSubscriptionName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(scope,eventSubscriptionName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Asynchronously updates an existing event subscription.
   * @summary Update an event subscription.
   * @param scope The scope of existing event subscription. The scope can be a subscription, or a
   * resource group, or a top level resource belonging to a resource provider namespace, or an
   * EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription,
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   * for a resource, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
   * for an EventGrid topic.
   * @param eventSubscriptionName Name of the event subscription to be updated.
   * @param eventSubscriptionUpdateParameters Updated event subscription information.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventSubscriptionsUpdateResponse>
   */
  update(scope: string, eventSubscriptionName: string, eventSubscriptionUpdateParameters: Models.EventSubscriptionUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.EventSubscriptionsUpdateResponse> {
    return this.beginUpdate(scope,eventSubscriptionName,eventSubscriptionUpdateParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.EventSubscriptionsUpdateResponse>;
  }

  /**
   * Get the full endpoint URL for an event subscription.
   * @summary Get full URL of an event subscription.
   * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
   * group, or a top level resource belonging to a resource provider namespace, or an EventGrid
   * topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription,
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   * for a resource, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
   * for an EventGrid topic.
   * @param eventSubscriptionName Name of the event subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventSubscriptionsGetFullUrlResponse>
   */
  getFullUrl(scope: string, eventSubscriptionName: string, options?: msRest.RequestOptionsBase): Promise<Models.EventSubscriptionsGetFullUrlResponse>;
  /**
   * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
   * group, or a top level resource belonging to a resource provider namespace, or an EventGrid
   * topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription,
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   * for a resource, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
   * for an EventGrid topic.
   * @param eventSubscriptionName Name of the event subscription.
   * @param callback The callback
   */
  getFullUrl(scope: string, eventSubscriptionName: string, callback: msRest.ServiceCallback<Models.EventSubscriptionFullUrl>): void;
  /**
   * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
   * group, or a top level resource belonging to a resource provider namespace, or an EventGrid
   * topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription,
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   * for a resource, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
   * for an EventGrid topic.
   * @param eventSubscriptionName Name of the event subscription.
   * @param options The optional parameters
   * @param callback The callback
   */
  getFullUrl(scope: string, eventSubscriptionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EventSubscriptionFullUrl>): void;
  getFullUrl(scope: string, eventSubscriptionName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EventSubscriptionFullUrl>, callback?: msRest.ServiceCallback<Models.EventSubscriptionFullUrl>): Promise<Models.EventSubscriptionsGetFullUrlResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        eventSubscriptionName,
        options
      },
      getFullUrlOperationSpec,
      callback) as Promise<Models.EventSubscriptionsGetFullUrlResponse>;
  }

  /**
   * List all aggregated global event subscriptions under a specific Azure subscription.
   * @summary Get an aggregated list of all global event subscriptions under an Azure subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventSubscriptionsListGlobalBySubscriptionResponse>
   */
  listGlobalBySubscription(options?: Models.EventSubscriptionsListGlobalBySubscriptionOptionalParams): Promise<Models.EventSubscriptionsListGlobalBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listGlobalBySubscription(callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listGlobalBySubscription(options: Models.EventSubscriptionsListGlobalBySubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  listGlobalBySubscription(options?: Models.EventSubscriptionsListGlobalBySubscriptionOptionalParams | msRest.ServiceCallback<Models.EventSubscriptionsListResult>, callback?: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): Promise<Models.EventSubscriptionsListGlobalBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listGlobalBySubscriptionOperationSpec,
      callback) as Promise<Models.EventSubscriptionsListGlobalBySubscriptionResponse>;
  }

  /**
   * List all global event subscriptions under an Azure subscription for a topic type.
   * @summary List all global event subscriptions for a topic type.
   * @param topicTypeName Name of the topic type.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse>
   */
  listGlobalBySubscriptionForTopicType(topicTypeName: string, options?: Models.EventSubscriptionsListGlobalBySubscriptionForTopicTypeOptionalParams): Promise<Models.EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse>;
  /**
   * @param topicTypeName Name of the topic type.
   * @param callback The callback
   */
  listGlobalBySubscriptionForTopicType(topicTypeName: string, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  /**
   * @param topicTypeName Name of the topic type.
   * @param options The optional parameters
   * @param callback The callback
   */
  listGlobalBySubscriptionForTopicType(topicTypeName: string, options: Models.EventSubscriptionsListGlobalBySubscriptionForTopicTypeOptionalParams, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  listGlobalBySubscriptionForTopicType(topicTypeName: string, options?: Models.EventSubscriptionsListGlobalBySubscriptionForTopicTypeOptionalParams | msRest.ServiceCallback<Models.EventSubscriptionsListResult>, callback?: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): Promise<Models.EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse> {
    return this.client.sendOperationRequest(
      {
        topicTypeName,
        options
      },
      listGlobalBySubscriptionForTopicTypeOperationSpec,
      callback) as Promise<Models.EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse>;
  }

  /**
   * List all global event subscriptions under a specific Azure subscription and resource group.
   * @summary List all global event subscriptions under an Azure subscription and resource group.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventSubscriptionsListGlobalByResourceGroupResponse>
   */
  listGlobalByResourceGroup(resourceGroupName: string, options?: Models.EventSubscriptionsListGlobalByResourceGroupOptionalParams): Promise<Models.EventSubscriptionsListGlobalByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param callback The callback
   */
  listGlobalByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param options The optional parameters
   * @param callback The callback
   */
  listGlobalByResourceGroup(resourceGroupName: string, options: Models.EventSubscriptionsListGlobalByResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  listGlobalByResourceGroup(resourceGroupName: string, options?: Models.EventSubscriptionsListGlobalByResourceGroupOptionalParams | msRest.ServiceCallback<Models.EventSubscriptionsListResult>, callback?: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): Promise<Models.EventSubscriptionsListGlobalByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listGlobalByResourceGroupOperationSpec,
      callback) as Promise<Models.EventSubscriptionsListGlobalByResourceGroupResponse>;
  }

  /**
   * List all global event subscriptions under a resource group for a specific topic type.
   * @summary List all global event subscriptions under a resource group for a topic type.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param topicTypeName Name of the topic type.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse>
   */
  listGlobalByResourceGroupForTopicType(resourceGroupName: string, topicTypeName: string, options?: Models.EventSubscriptionsListGlobalByResourceGroupForTopicTypeOptionalParams): Promise<Models.EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param topicTypeName Name of the topic type.
   * @param callback The callback
   */
  listGlobalByResourceGroupForTopicType(resourceGroupName: string, topicTypeName: string, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param topicTypeName Name of the topic type.
   * @param options The optional parameters
   * @param callback The callback
   */
  listGlobalByResourceGroupForTopicType(resourceGroupName: string, topicTypeName: string, options: Models.EventSubscriptionsListGlobalByResourceGroupForTopicTypeOptionalParams, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  listGlobalByResourceGroupForTopicType(resourceGroupName: string, topicTypeName: string, options?: Models.EventSubscriptionsListGlobalByResourceGroupForTopicTypeOptionalParams | msRest.ServiceCallback<Models.EventSubscriptionsListResult>, callback?: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): Promise<Models.EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        topicTypeName,
        options
      },
      listGlobalByResourceGroupForTopicTypeOperationSpec,
      callback) as Promise<Models.EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse>;
  }

  /**
   * List all event subscriptions from the given location under a specific Azure subscription.
   * @summary List all regional event subscriptions under an Azure subscription.
   * @param location Name of the location.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventSubscriptionsListRegionalBySubscriptionResponse>
   */
  listRegionalBySubscription(location: string, options?: Models.EventSubscriptionsListRegionalBySubscriptionOptionalParams): Promise<Models.EventSubscriptionsListRegionalBySubscriptionResponse>;
  /**
   * @param location Name of the location.
   * @param callback The callback
   */
  listRegionalBySubscription(location: string, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  /**
   * @param location Name of the location.
   * @param options The optional parameters
   * @param callback The callback
   */
  listRegionalBySubscription(location: string, options: Models.EventSubscriptionsListRegionalBySubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  listRegionalBySubscription(location: string, options?: Models.EventSubscriptionsListRegionalBySubscriptionOptionalParams | msRest.ServiceCallback<Models.EventSubscriptionsListResult>, callback?: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): Promise<Models.EventSubscriptionsListRegionalBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        options
      },
      listRegionalBySubscriptionOperationSpec,
      callback) as Promise<Models.EventSubscriptionsListRegionalBySubscriptionResponse>;
  }

  /**
   * List all event subscriptions from the given location under a specific Azure subscription and
   * resource group.
   * @summary List all regional event subscriptions under an Azure subscription and resource group.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param location Name of the location.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventSubscriptionsListRegionalByResourceGroupResponse>
   */
  listRegionalByResourceGroup(resourceGroupName: string, location: string, options?: Models.EventSubscriptionsListRegionalByResourceGroupOptionalParams): Promise<Models.EventSubscriptionsListRegionalByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param location Name of the location.
   * @param callback The callback
   */
  listRegionalByResourceGroup(resourceGroupName: string, location: string, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param location Name of the location.
   * @param options The optional parameters
   * @param callback The callback
   */
  listRegionalByResourceGroup(resourceGroupName: string, location: string, options: Models.EventSubscriptionsListRegionalByResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  listRegionalByResourceGroup(resourceGroupName: string, location: string, options?: Models.EventSubscriptionsListRegionalByResourceGroupOptionalParams | msRest.ServiceCallback<Models.EventSubscriptionsListResult>, callback?: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): Promise<Models.EventSubscriptionsListRegionalByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        location,
        options
      },
      listRegionalByResourceGroupOperationSpec,
      callback) as Promise<Models.EventSubscriptionsListRegionalByResourceGroupResponse>;
  }

  /**
   * List all event subscriptions from the given location under a specific Azure subscription and
   * topic type.
   * @summary List all regional event subscriptions under an Azure subscription for a topic type.
   * @param location Name of the location.
   * @param topicTypeName Name of the topic type.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse>
   */
  listRegionalBySubscriptionForTopicType(location: string, topicTypeName: string, options?: Models.EventSubscriptionsListRegionalBySubscriptionForTopicTypeOptionalParams): Promise<Models.EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse>;
  /**
   * @param location Name of the location.
   * @param topicTypeName Name of the topic type.
   * @param callback The callback
   */
  listRegionalBySubscriptionForTopicType(location: string, topicTypeName: string, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  /**
   * @param location Name of the location.
   * @param topicTypeName Name of the topic type.
   * @param options The optional parameters
   * @param callback The callback
   */
  listRegionalBySubscriptionForTopicType(location: string, topicTypeName: string, options: Models.EventSubscriptionsListRegionalBySubscriptionForTopicTypeOptionalParams, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  listRegionalBySubscriptionForTopicType(location: string, topicTypeName: string, options?: Models.EventSubscriptionsListRegionalBySubscriptionForTopicTypeOptionalParams | msRest.ServiceCallback<Models.EventSubscriptionsListResult>, callback?: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): Promise<Models.EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        topicTypeName,
        options
      },
      listRegionalBySubscriptionForTopicTypeOperationSpec,
      callback) as Promise<Models.EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse>;
  }

  /**
   * List all event subscriptions from the given location under a specific Azure subscription and
   * resource group and topic type.
   * @summary List all regional event subscriptions under an Azure subscription and resource group
   * for a topic type.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param location Name of the location.
   * @param topicTypeName Name of the topic type.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse>
   */
  listRegionalByResourceGroupForTopicType(resourceGroupName: string, location: string, topicTypeName: string, options?: Models.EventSubscriptionsListRegionalByResourceGroupForTopicTypeOptionalParams): Promise<Models.EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param location Name of the location.
   * @param topicTypeName Name of the topic type.
   * @param callback The callback
   */
  listRegionalByResourceGroupForTopicType(resourceGroupName: string, location: string, topicTypeName: string, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param location Name of the location.
   * @param topicTypeName Name of the topic type.
   * @param options The optional parameters
   * @param callback The callback
   */
  listRegionalByResourceGroupForTopicType(resourceGroupName: string, location: string, topicTypeName: string, options: Models.EventSubscriptionsListRegionalByResourceGroupForTopicTypeOptionalParams, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  listRegionalByResourceGroupForTopicType(resourceGroupName: string, location: string, topicTypeName: string, options?: Models.EventSubscriptionsListRegionalByResourceGroupForTopicTypeOptionalParams | msRest.ServiceCallback<Models.EventSubscriptionsListResult>, callback?: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): Promise<Models.EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        location,
        topicTypeName,
        options
      },
      listRegionalByResourceGroupForTopicTypeOperationSpec,
      callback) as Promise<Models.EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse>;
  }

  /**
   * List all event subscriptions that have been created for a specific topic.
   * @summary List all event subscriptions for a specific topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param providerNamespace Namespace of the provider of the topic.
   * @param resourceTypeName Name of the resource type.
   * @param resourceName Name of the resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventSubscriptionsListByResourceResponse>
   */
  listByResource(resourceGroupName: string, providerNamespace: string, resourceTypeName: string, resourceName: string, options?: Models.EventSubscriptionsListByResourceOptionalParams): Promise<Models.EventSubscriptionsListByResourceResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param providerNamespace Namespace of the provider of the topic.
   * @param resourceTypeName Name of the resource type.
   * @param resourceName Name of the resource.
   * @param callback The callback
   */
  listByResource(resourceGroupName: string, providerNamespace: string, resourceTypeName: string, resourceName: string, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param providerNamespace Namespace of the provider of the topic.
   * @param resourceTypeName Name of the resource type.
   * @param resourceName Name of the resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResource(resourceGroupName: string, providerNamespace: string, resourceTypeName: string, resourceName: string, options: Models.EventSubscriptionsListByResourceOptionalParams, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  listByResource(resourceGroupName: string, providerNamespace: string, resourceTypeName: string, resourceName: string, options?: Models.EventSubscriptionsListByResourceOptionalParams | msRest.ServiceCallback<Models.EventSubscriptionsListResult>, callback?: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): Promise<Models.EventSubscriptionsListByResourceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        providerNamespace,
        resourceTypeName,
        resourceName,
        options
      },
      listByResourceOperationSpec,
      callback) as Promise<Models.EventSubscriptionsListByResourceResponse>;
  }

  /**
   * List all event subscriptions that have been created for a specific domain topic.
   * @summary List all event subscriptions for a specific domain topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param domainName Name of the top level domain.
   * @param topicName Name of the domain topic.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventSubscriptionsListByDomainTopicResponse>
   */
  listByDomainTopic(resourceGroupName: string, domainName: string, topicName: string, options?: Models.EventSubscriptionsListByDomainTopicOptionalParams): Promise<Models.EventSubscriptionsListByDomainTopicResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param domainName Name of the top level domain.
   * @param topicName Name of the domain topic.
   * @param callback The callback
   */
  listByDomainTopic(resourceGroupName: string, domainName: string, topicName: string, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param domainName Name of the top level domain.
   * @param topicName Name of the domain topic.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByDomainTopic(resourceGroupName: string, domainName: string, topicName: string, options: Models.EventSubscriptionsListByDomainTopicOptionalParams, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  listByDomainTopic(resourceGroupName: string, domainName: string, topicName: string, options?: Models.EventSubscriptionsListByDomainTopicOptionalParams | msRest.ServiceCallback<Models.EventSubscriptionsListResult>, callback?: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): Promise<Models.EventSubscriptionsListByDomainTopicResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        domainName,
        topicName,
        options
      },
      listByDomainTopicOperationSpec,
      callback) as Promise<Models.EventSubscriptionsListByDomainTopicResponse>;
  }

  /**
   * Get all delivery attributes for an event subscription.
   * @summary Get delivery attributes for an event subscription.
   * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
   * group, or a top level resource belonging to a resource provider namespace, or an EventGrid
   * topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription,
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   * for a resource, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
   * for an EventGrid topic.
   * @param eventSubscriptionName Name of the event subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventSubscriptionsGetDeliveryAttributesResponse>
   */
  getDeliveryAttributes(scope: string, eventSubscriptionName: string, options?: msRest.RequestOptionsBase): Promise<Models.EventSubscriptionsGetDeliveryAttributesResponse>;
  /**
   * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
   * group, or a top level resource belonging to a resource provider namespace, or an EventGrid
   * topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription,
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   * for a resource, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
   * for an EventGrid topic.
   * @param eventSubscriptionName Name of the event subscription.
   * @param callback The callback
   */
  getDeliveryAttributes(scope: string, eventSubscriptionName: string, callback: msRest.ServiceCallback<Models.DeliveryAttributeListResult>): void;
  /**
   * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
   * group, or a top level resource belonging to a resource provider namespace, or an EventGrid
   * topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription,
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   * for a resource, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
   * for an EventGrid topic.
   * @param eventSubscriptionName Name of the event subscription.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeliveryAttributes(scope: string, eventSubscriptionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeliveryAttributeListResult>): void;
  getDeliveryAttributes(scope: string, eventSubscriptionName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeliveryAttributeListResult>, callback?: msRest.ServiceCallback<Models.DeliveryAttributeListResult>): Promise<Models.EventSubscriptionsGetDeliveryAttributesResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        eventSubscriptionName,
        options
      },
      getDeliveryAttributesOperationSpec,
      callback) as Promise<Models.EventSubscriptionsGetDeliveryAttributesResponse>;
  }

  /**
   * Asynchronously creates a new event subscription or updates an existing event subscription based
   * on the specified scope.
   * @summary Create or update an event subscription.
   * @param scope The identifier of the resource to which the event subscription needs to be created
   * or updated. The scope can be a subscription, or a resource group, or a top level resource
   * belonging to a resource provider namespace, or an EventGrid topic. For example, use
   * '/subscriptions/{subscriptionId}/' for a subscription,
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   * for a resource, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
   * for an EventGrid topic.
   * @param eventSubscriptionName Name of the event subscription. Event subscription names must be
   * between 3 and 64 characters in length and should use alphanumeric letters only.
   * @param eventSubscriptionInfo Event subscription properties containing the destination and filter
   * information.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(scope: string, eventSubscriptionName: string, eventSubscriptionInfo: Models.EventSubscription, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        scope,
        eventSubscriptionName,
        eventSubscriptionInfo,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Delete an existing event subscription.
   * @summary Delete an event subscription.
   * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
   * group, or a top level resource belonging to a resource provider namespace, or an EventGrid
   * topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription,
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   * for a resource, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
   * for an EventGrid topic.
   * @param eventSubscriptionName Name of the event subscription.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(scope: string, eventSubscriptionName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        scope,
        eventSubscriptionName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Asynchronously updates an existing event subscription.
   * @summary Update an event subscription.
   * @param scope The scope of existing event subscription. The scope can be a subscription, or a
   * resource group, or a top level resource belonging to a resource provider namespace, or an
   * EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription,
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   * for a resource, and
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
   * for an EventGrid topic.
   * @param eventSubscriptionName Name of the event subscription to be updated.
   * @param eventSubscriptionUpdateParameters Updated event subscription information.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(scope: string, eventSubscriptionName: string, eventSubscriptionUpdateParameters: Models.EventSubscriptionUpdateParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        scope,
        eventSubscriptionName,
        eventSubscriptionUpdateParameters,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * List all aggregated global event subscriptions under a specific Azure subscription.
   * @summary Get an aggregated list of all global event subscriptions under an Azure subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventSubscriptionsListGlobalBySubscriptionNextResponse>
   */
  listGlobalBySubscriptionNext(nextPageLink: string, options?: Models.EventSubscriptionsListGlobalBySubscriptionNextOptionalParams): Promise<Models.EventSubscriptionsListGlobalBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listGlobalBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listGlobalBySubscriptionNext(nextPageLink: string, options: Models.EventSubscriptionsListGlobalBySubscriptionNextOptionalParams, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  listGlobalBySubscriptionNext(nextPageLink: string, options?: Models.EventSubscriptionsListGlobalBySubscriptionNextOptionalParams | msRest.ServiceCallback<Models.EventSubscriptionsListResult>, callback?: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): Promise<Models.EventSubscriptionsListGlobalBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listGlobalBySubscriptionNextOperationSpec,
      callback) as Promise<Models.EventSubscriptionsListGlobalBySubscriptionNextResponse>;
  }

  /**
   * List all global event subscriptions under an Azure subscription for a topic type.
   * @summary List all global event subscriptions for a topic type.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventSubscriptionsListGlobalBySubscriptionForTopicTypeNextResponse>
   */
  listGlobalBySubscriptionForTopicTypeNext(nextPageLink: string, options?: Models.EventSubscriptionsListGlobalBySubscriptionForTopicTypeNextOptionalParams): Promise<Models.EventSubscriptionsListGlobalBySubscriptionForTopicTypeNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listGlobalBySubscriptionForTopicTypeNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listGlobalBySubscriptionForTopicTypeNext(nextPageLink: string, options: Models.EventSubscriptionsListGlobalBySubscriptionForTopicTypeNextOptionalParams, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  listGlobalBySubscriptionForTopicTypeNext(nextPageLink: string, options?: Models.EventSubscriptionsListGlobalBySubscriptionForTopicTypeNextOptionalParams | msRest.ServiceCallback<Models.EventSubscriptionsListResult>, callback?: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): Promise<Models.EventSubscriptionsListGlobalBySubscriptionForTopicTypeNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listGlobalBySubscriptionForTopicTypeNextOperationSpec,
      callback) as Promise<Models.EventSubscriptionsListGlobalBySubscriptionForTopicTypeNextResponse>;
  }

  /**
   * List all global event subscriptions under a specific Azure subscription and resource group.
   * @summary List all global event subscriptions under an Azure subscription and resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventSubscriptionsListGlobalByResourceGroupNextResponse>
   */
  listGlobalByResourceGroupNext(nextPageLink: string, options?: Models.EventSubscriptionsListGlobalByResourceGroupNextOptionalParams): Promise<Models.EventSubscriptionsListGlobalByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listGlobalByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listGlobalByResourceGroupNext(nextPageLink: string, options: Models.EventSubscriptionsListGlobalByResourceGroupNextOptionalParams, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  listGlobalByResourceGroupNext(nextPageLink: string, options?: Models.EventSubscriptionsListGlobalByResourceGroupNextOptionalParams | msRest.ServiceCallback<Models.EventSubscriptionsListResult>, callback?: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): Promise<Models.EventSubscriptionsListGlobalByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listGlobalByResourceGroupNextOperationSpec,
      callback) as Promise<Models.EventSubscriptionsListGlobalByResourceGroupNextResponse>;
  }

  /**
   * List all global event subscriptions under a resource group for a specific topic type.
   * @summary List all global event subscriptions under a resource group for a topic type.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventSubscriptionsListGlobalByResourceGroupForTopicTypeNextResponse>
   */
  listGlobalByResourceGroupForTopicTypeNext(nextPageLink: string, options?: Models.EventSubscriptionsListGlobalByResourceGroupForTopicTypeNextOptionalParams): Promise<Models.EventSubscriptionsListGlobalByResourceGroupForTopicTypeNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listGlobalByResourceGroupForTopicTypeNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listGlobalByResourceGroupForTopicTypeNext(nextPageLink: string, options: Models.EventSubscriptionsListGlobalByResourceGroupForTopicTypeNextOptionalParams, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  listGlobalByResourceGroupForTopicTypeNext(nextPageLink: string, options?: Models.EventSubscriptionsListGlobalByResourceGroupForTopicTypeNextOptionalParams | msRest.ServiceCallback<Models.EventSubscriptionsListResult>, callback?: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): Promise<Models.EventSubscriptionsListGlobalByResourceGroupForTopicTypeNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listGlobalByResourceGroupForTopicTypeNextOperationSpec,
      callback) as Promise<Models.EventSubscriptionsListGlobalByResourceGroupForTopicTypeNextResponse>;
  }

  /**
   * List all event subscriptions from the given location under a specific Azure subscription.
   * @summary List all regional event subscriptions under an Azure subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventSubscriptionsListRegionalBySubscriptionNextResponse>
   */
  listRegionalBySubscriptionNext(nextPageLink: string, options?: Models.EventSubscriptionsListRegionalBySubscriptionNextOptionalParams): Promise<Models.EventSubscriptionsListRegionalBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listRegionalBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listRegionalBySubscriptionNext(nextPageLink: string, options: Models.EventSubscriptionsListRegionalBySubscriptionNextOptionalParams, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  listRegionalBySubscriptionNext(nextPageLink: string, options?: Models.EventSubscriptionsListRegionalBySubscriptionNextOptionalParams | msRest.ServiceCallback<Models.EventSubscriptionsListResult>, callback?: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): Promise<Models.EventSubscriptionsListRegionalBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listRegionalBySubscriptionNextOperationSpec,
      callback) as Promise<Models.EventSubscriptionsListRegionalBySubscriptionNextResponse>;
  }

  /**
   * List all event subscriptions from the given location under a specific Azure subscription and
   * resource group.
   * @summary List all regional event subscriptions under an Azure subscription and resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventSubscriptionsListRegionalByResourceGroupNextResponse>
   */
  listRegionalByResourceGroupNext(nextPageLink: string, options?: Models.EventSubscriptionsListRegionalByResourceGroupNextOptionalParams): Promise<Models.EventSubscriptionsListRegionalByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listRegionalByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listRegionalByResourceGroupNext(nextPageLink: string, options: Models.EventSubscriptionsListRegionalByResourceGroupNextOptionalParams, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  listRegionalByResourceGroupNext(nextPageLink: string, options?: Models.EventSubscriptionsListRegionalByResourceGroupNextOptionalParams | msRest.ServiceCallback<Models.EventSubscriptionsListResult>, callback?: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): Promise<Models.EventSubscriptionsListRegionalByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listRegionalByResourceGroupNextOperationSpec,
      callback) as Promise<Models.EventSubscriptionsListRegionalByResourceGroupNextResponse>;
  }

  /**
   * List all event subscriptions from the given location under a specific Azure subscription and
   * topic type.
   * @summary List all regional event subscriptions under an Azure subscription for a topic type.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventSubscriptionsListRegionalBySubscriptionForTopicTypeNextResponse>
   */
  listRegionalBySubscriptionForTopicTypeNext(nextPageLink: string, options?: Models.EventSubscriptionsListRegionalBySubscriptionForTopicTypeNextOptionalParams): Promise<Models.EventSubscriptionsListRegionalBySubscriptionForTopicTypeNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listRegionalBySubscriptionForTopicTypeNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listRegionalBySubscriptionForTopicTypeNext(nextPageLink: string, options: Models.EventSubscriptionsListRegionalBySubscriptionForTopicTypeNextOptionalParams, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  listRegionalBySubscriptionForTopicTypeNext(nextPageLink: string, options?: Models.EventSubscriptionsListRegionalBySubscriptionForTopicTypeNextOptionalParams | msRest.ServiceCallback<Models.EventSubscriptionsListResult>, callback?: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): Promise<Models.EventSubscriptionsListRegionalBySubscriptionForTopicTypeNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listRegionalBySubscriptionForTopicTypeNextOperationSpec,
      callback) as Promise<Models.EventSubscriptionsListRegionalBySubscriptionForTopicTypeNextResponse>;
  }

  /**
   * List all event subscriptions from the given location under a specific Azure subscription and
   * resource group and topic type.
   * @summary List all regional event subscriptions under an Azure subscription and resource group
   * for a topic type.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventSubscriptionsListRegionalByResourceGroupForTopicTypeNextResponse>
   */
  listRegionalByResourceGroupForTopicTypeNext(nextPageLink: string, options?: Models.EventSubscriptionsListRegionalByResourceGroupForTopicTypeNextOptionalParams): Promise<Models.EventSubscriptionsListRegionalByResourceGroupForTopicTypeNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listRegionalByResourceGroupForTopicTypeNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listRegionalByResourceGroupForTopicTypeNext(nextPageLink: string, options: Models.EventSubscriptionsListRegionalByResourceGroupForTopicTypeNextOptionalParams, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  listRegionalByResourceGroupForTopicTypeNext(nextPageLink: string, options?: Models.EventSubscriptionsListRegionalByResourceGroupForTopicTypeNextOptionalParams | msRest.ServiceCallback<Models.EventSubscriptionsListResult>, callback?: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): Promise<Models.EventSubscriptionsListRegionalByResourceGroupForTopicTypeNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listRegionalByResourceGroupForTopicTypeNextOperationSpec,
      callback) as Promise<Models.EventSubscriptionsListRegionalByResourceGroupForTopicTypeNextResponse>;
  }

  /**
   * List all event subscriptions that have been created for a specific topic.
   * @summary List all event subscriptions for a specific topic.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventSubscriptionsListByResourceNextResponse>
   */
  listByResourceNext(nextPageLink: string, options?: Models.EventSubscriptionsListByResourceNextOptionalParams): Promise<Models.EventSubscriptionsListByResourceNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceNext(nextPageLink: string, options: Models.EventSubscriptionsListByResourceNextOptionalParams, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  listByResourceNext(nextPageLink: string, options?: Models.EventSubscriptionsListByResourceNextOptionalParams | msRest.ServiceCallback<Models.EventSubscriptionsListResult>, callback?: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): Promise<Models.EventSubscriptionsListByResourceNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceNextOperationSpec,
      callback) as Promise<Models.EventSubscriptionsListByResourceNextResponse>;
  }

  /**
   * List all event subscriptions that have been created for a specific domain topic.
   * @summary List all event subscriptions for a specific domain topic.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventSubscriptionsListByDomainTopicNextResponse>
   */
  listByDomainTopicNext(nextPageLink: string, options?: Models.EventSubscriptionsListByDomainTopicNextOptionalParams): Promise<Models.EventSubscriptionsListByDomainTopicNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByDomainTopicNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByDomainTopicNext(nextPageLink: string, options: Models.EventSubscriptionsListByDomainTopicNextOptionalParams, callback: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): void;
  listByDomainTopicNext(nextPageLink: string, options?: Models.EventSubscriptionsListByDomainTopicNextOptionalParams | msRest.ServiceCallback<Models.EventSubscriptionsListResult>, callback?: msRest.ServiceCallback<Models.EventSubscriptionsListResult>): Promise<Models.EventSubscriptionsListByDomainTopicNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByDomainTopicNextOperationSpec,
      callback) as Promise<Models.EventSubscriptionsListByDomainTopicNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}",
  urlParameters: [
    Parameters.scope0,
    Parameters.eventSubscriptionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscription
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getFullUrlOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}/getFullUrl",
  urlParameters: [
    Parameters.scope0,
    Parameters.eventSubscriptionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionFullUrl
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listGlobalBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/eventSubscriptions",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listGlobalBySubscriptionForTopicTypeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventSubscriptions",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.topicTypeName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listGlobalByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/eventSubscriptions",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listGlobalByResourceGroupForTopicTypeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventSubscriptions",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.topicTypeName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listRegionalBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/locations/{location}/eventSubscriptions",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.location
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listRegionalByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/locations/{location}/eventSubscriptions",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listRegionalBySubscriptionForTopicTypeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/locations/{location}/topicTypes/{topicTypeName}/eventSubscriptions",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.topicTypeName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listRegionalByResourceGroupForTopicTypeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/locations/{location}/topicTypes/{topicTypeName}/eventSubscriptions",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.topicTypeName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerNamespace}/{resourceTypeName}/{resourceName}/providers/Microsoft.EventGrid/eventSubscriptions",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.providerNamespace,
    Parameters.resourceTypeName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByDomainTopicOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{topicName}/providers/Microsoft.EventGrid/eventSubscriptions",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.domainName,
    Parameters.topicName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDeliveryAttributesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}/getDeliveryAttributes",
  urlParameters: [
    Parameters.scope0,
    Parameters.eventSubscriptionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeliveryAttributeListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}",
  urlParameters: [
    Parameters.scope0,
    Parameters.eventSubscriptionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "eventSubscriptionInfo",
    mapper: {
      ...Mappers.EventSubscription,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.EventSubscription
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}",
  urlParameters: [
    Parameters.scope0,
    Parameters.eventSubscriptionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}",
  urlParameters: [
    Parameters.scope0,
    Parameters.eventSubscriptionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "eventSubscriptionUpdateParameters",
    mapper: {
      ...Mappers.EventSubscriptionUpdateParameters,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.EventSubscription
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listGlobalBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listGlobalBySubscriptionForTopicTypeNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listGlobalByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listGlobalByResourceGroupForTopicTypeNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listRegionalBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listRegionalByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listRegionalBySubscriptionForTopicTypeNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listRegionalByResourceGroupForTopicTypeNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByDomainTopicNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
