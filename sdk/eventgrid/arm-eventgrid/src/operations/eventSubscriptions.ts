/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { EventSubscriptions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { EventGridManagementClient } from "../eventGridManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  EventSubscription,
  EventSubscriptionsListGlobalBySubscriptionNextOptionalParams,
  EventSubscriptionsListGlobalBySubscriptionOptionalParams,
  EventSubscriptionsListGlobalBySubscriptionResponse,
  EventSubscriptionsListGlobalBySubscriptionForTopicTypeNextOptionalParams,
  EventSubscriptionsListGlobalBySubscriptionForTopicTypeOptionalParams,
  EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse,
  EventSubscriptionsListGlobalByResourceGroupNextOptionalParams,
  EventSubscriptionsListGlobalByResourceGroupOptionalParams,
  EventSubscriptionsListGlobalByResourceGroupResponse,
  EventSubscriptionsListGlobalByResourceGroupForTopicTypeNextOptionalParams,
  EventSubscriptionsListGlobalByResourceGroupForTopicTypeOptionalParams,
  EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse,
  EventSubscriptionsListRegionalBySubscriptionNextOptionalParams,
  EventSubscriptionsListRegionalBySubscriptionOptionalParams,
  EventSubscriptionsListRegionalBySubscriptionResponse,
  EventSubscriptionsListRegionalByResourceGroupNextOptionalParams,
  EventSubscriptionsListRegionalByResourceGroupOptionalParams,
  EventSubscriptionsListRegionalByResourceGroupResponse,
  EventSubscriptionsListRegionalBySubscriptionForTopicTypeNextOptionalParams,
  EventSubscriptionsListRegionalBySubscriptionForTopicTypeOptionalParams,
  EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse,
  EventSubscriptionsListRegionalByResourceGroupForTopicTypeNextOptionalParams,
  EventSubscriptionsListRegionalByResourceGroupForTopicTypeOptionalParams,
  EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse,
  EventSubscriptionsListByResourceNextOptionalParams,
  EventSubscriptionsListByResourceOptionalParams,
  EventSubscriptionsListByResourceResponse,
  EventSubscriptionsListByDomainTopicNextOptionalParams,
  EventSubscriptionsListByDomainTopicOptionalParams,
  EventSubscriptionsListByDomainTopicResponse,
  EventSubscriptionsGetOptionalParams,
  EventSubscriptionsGetResponse,
  EventSubscriptionsCreateOrUpdateOptionalParams,
  EventSubscriptionsCreateOrUpdateResponse,
  EventSubscriptionsDeleteOptionalParams,
  EventSubscriptionUpdateParameters,
  EventSubscriptionsUpdateOptionalParams,
  EventSubscriptionsUpdateResponse,
  EventSubscriptionsGetFullUrlOptionalParams,
  EventSubscriptionsGetFullUrlResponse,
  EventSubscriptionsGetDeliveryAttributesOptionalParams,
  EventSubscriptionsGetDeliveryAttributesResponse,
  EventSubscriptionsListGlobalBySubscriptionNextResponse,
  EventSubscriptionsListGlobalBySubscriptionForTopicTypeNextResponse,
  EventSubscriptionsListGlobalByResourceGroupNextResponse,
  EventSubscriptionsListGlobalByResourceGroupForTopicTypeNextResponse,
  EventSubscriptionsListRegionalBySubscriptionNextResponse,
  EventSubscriptionsListRegionalByResourceGroupNextResponse,
  EventSubscriptionsListRegionalBySubscriptionForTopicTypeNextResponse,
  EventSubscriptionsListRegionalByResourceGroupForTopicTypeNextResponse,
  EventSubscriptionsListByResourceNextResponse,
  EventSubscriptionsListByDomainTopicNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing EventSubscriptions operations. */
export class EventSubscriptionsImpl implements EventSubscriptions {
  private readonly client: EventGridManagementClient;

  /**
   * Initialize a new instance of the class EventSubscriptions class.
   * @param client Reference to the service client
   */
  constructor(client: EventGridManagementClient) {
    this.client = client;
  }

  /**
   * List all aggregated global event subscriptions under a specific Azure subscription.
   * @param options The options parameters.
   */
  public listGlobalBySubscription(
    options?: EventSubscriptionsListGlobalBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<EventSubscription> {
    const iter = this.listGlobalBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listGlobalBySubscriptionPagingPage(options, settings);
      }
    };
  }

  private async *listGlobalBySubscriptionPagingPage(
    options?: EventSubscriptionsListGlobalBySubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<EventSubscription[]> {
    let result: EventSubscriptionsListGlobalBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listGlobalBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listGlobalBySubscriptionNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listGlobalBySubscriptionPagingAll(
    options?: EventSubscriptionsListGlobalBySubscriptionOptionalParams
  ): AsyncIterableIterator<EventSubscription> {
    for await (const page of this.listGlobalBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List all global event subscriptions under an Azure subscription for a topic type.
   * @param topicTypeName Name of the topic type.
   * @param options The options parameters.
   */
  public listGlobalBySubscriptionForTopicType(
    topicTypeName: string,
    options?: EventSubscriptionsListGlobalBySubscriptionForTopicTypeOptionalParams
  ): PagedAsyncIterableIterator<EventSubscription> {
    const iter = this.listGlobalBySubscriptionForTopicTypePagingAll(
      topicTypeName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listGlobalBySubscriptionForTopicTypePagingPage(
          topicTypeName,
          options,
          settings
        );
      }
    };
  }

  private async *listGlobalBySubscriptionForTopicTypePagingPage(
    topicTypeName: string,
    options?: EventSubscriptionsListGlobalBySubscriptionForTopicTypeOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<EventSubscription[]> {
    let result: EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listGlobalBySubscriptionForTopicType(
        topicTypeName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listGlobalBySubscriptionForTopicTypeNext(
        topicTypeName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listGlobalBySubscriptionForTopicTypePagingAll(
    topicTypeName: string,
    options?: EventSubscriptionsListGlobalBySubscriptionForTopicTypeOptionalParams
  ): AsyncIterableIterator<EventSubscription> {
    for await (const page of this.listGlobalBySubscriptionForTopicTypePagingPage(
      topicTypeName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List all global event subscriptions under a specific Azure subscription and resource group.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param options The options parameters.
   */
  public listGlobalByResourceGroup(
    resourceGroupName: string,
    options?: EventSubscriptionsListGlobalByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<EventSubscription> {
    const iter = this.listGlobalByResourceGroupPagingAll(
      resourceGroupName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listGlobalByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listGlobalByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: EventSubscriptionsListGlobalByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<EventSubscription[]> {
    let result: EventSubscriptionsListGlobalByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listGlobalByResourceGroup(
        resourceGroupName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listGlobalByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listGlobalByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: EventSubscriptionsListGlobalByResourceGroupOptionalParams
  ): AsyncIterableIterator<EventSubscription> {
    for await (const page of this.listGlobalByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List all global event subscriptions under a resource group for a specific topic type.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param topicTypeName Name of the topic type.
   * @param options The options parameters.
   */
  public listGlobalByResourceGroupForTopicType(
    resourceGroupName: string,
    topicTypeName: string,
    options?: EventSubscriptionsListGlobalByResourceGroupForTopicTypeOptionalParams
  ): PagedAsyncIterableIterator<EventSubscription> {
    const iter = this.listGlobalByResourceGroupForTopicTypePagingAll(
      resourceGroupName,
      topicTypeName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listGlobalByResourceGroupForTopicTypePagingPage(
          resourceGroupName,
          topicTypeName,
          options,
          settings
        );
      }
    };
  }

  private async *listGlobalByResourceGroupForTopicTypePagingPage(
    resourceGroupName: string,
    topicTypeName: string,
    options?: EventSubscriptionsListGlobalByResourceGroupForTopicTypeOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<EventSubscription[]> {
    let result: EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listGlobalByResourceGroupForTopicType(
        resourceGroupName,
        topicTypeName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listGlobalByResourceGroupForTopicTypeNext(
        resourceGroupName,
        topicTypeName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listGlobalByResourceGroupForTopicTypePagingAll(
    resourceGroupName: string,
    topicTypeName: string,
    options?: EventSubscriptionsListGlobalByResourceGroupForTopicTypeOptionalParams
  ): AsyncIterableIterator<EventSubscription> {
    for await (const page of this.listGlobalByResourceGroupForTopicTypePagingPage(
      resourceGroupName,
      topicTypeName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List all event subscriptions from the given location under a specific Azure subscription.
   * @param location Name of the location.
   * @param options The options parameters.
   */
  public listRegionalBySubscription(
    location: string,
    options?: EventSubscriptionsListRegionalBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<EventSubscription> {
    const iter = this.listRegionalBySubscriptionPagingAll(location, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listRegionalBySubscriptionPagingPage(
          location,
          options,
          settings
        );
      }
    };
  }

  private async *listRegionalBySubscriptionPagingPage(
    location: string,
    options?: EventSubscriptionsListRegionalBySubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<EventSubscription[]> {
    let result: EventSubscriptionsListRegionalBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listRegionalBySubscription(location, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listRegionalBySubscriptionNext(
        location,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listRegionalBySubscriptionPagingAll(
    location: string,
    options?: EventSubscriptionsListRegionalBySubscriptionOptionalParams
  ): AsyncIterableIterator<EventSubscription> {
    for await (const page of this.listRegionalBySubscriptionPagingPage(
      location,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List all event subscriptions from the given location under a specific Azure subscription and
   * resource group.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param location Name of the location.
   * @param options The options parameters.
   */
  public listRegionalByResourceGroup(
    resourceGroupName: string,
    location: string,
    options?: EventSubscriptionsListRegionalByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<EventSubscription> {
    const iter = this.listRegionalByResourceGroupPagingAll(
      resourceGroupName,
      location,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listRegionalByResourceGroupPagingPage(
          resourceGroupName,
          location,
          options,
          settings
        );
      }
    };
  }

  private async *listRegionalByResourceGroupPagingPage(
    resourceGroupName: string,
    location: string,
    options?: EventSubscriptionsListRegionalByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<EventSubscription[]> {
    let result: EventSubscriptionsListRegionalByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listRegionalByResourceGroup(
        resourceGroupName,
        location,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listRegionalByResourceGroupNext(
        resourceGroupName,
        location,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listRegionalByResourceGroupPagingAll(
    resourceGroupName: string,
    location: string,
    options?: EventSubscriptionsListRegionalByResourceGroupOptionalParams
  ): AsyncIterableIterator<EventSubscription> {
    for await (const page of this.listRegionalByResourceGroupPagingPage(
      resourceGroupName,
      location,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List all event subscriptions from the given location under a specific Azure subscription and topic
   * type.
   * @param location Name of the location.
   * @param topicTypeName Name of the topic type.
   * @param options The options parameters.
   */
  public listRegionalBySubscriptionForTopicType(
    location: string,
    topicTypeName: string,
    options?: EventSubscriptionsListRegionalBySubscriptionForTopicTypeOptionalParams
  ): PagedAsyncIterableIterator<EventSubscription> {
    const iter = this.listRegionalBySubscriptionForTopicTypePagingAll(
      location,
      topicTypeName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listRegionalBySubscriptionForTopicTypePagingPage(
          location,
          topicTypeName,
          options,
          settings
        );
      }
    };
  }

  private async *listRegionalBySubscriptionForTopicTypePagingPage(
    location: string,
    topicTypeName: string,
    options?: EventSubscriptionsListRegionalBySubscriptionForTopicTypeOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<EventSubscription[]> {
    let result: EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listRegionalBySubscriptionForTopicType(
        location,
        topicTypeName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listRegionalBySubscriptionForTopicTypeNext(
        location,
        topicTypeName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listRegionalBySubscriptionForTopicTypePagingAll(
    location: string,
    topicTypeName: string,
    options?: EventSubscriptionsListRegionalBySubscriptionForTopicTypeOptionalParams
  ): AsyncIterableIterator<EventSubscription> {
    for await (const page of this.listRegionalBySubscriptionForTopicTypePagingPage(
      location,
      topicTypeName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List all event subscriptions from the given location under a specific Azure subscription and
   * resource group and topic type.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param location Name of the location.
   * @param topicTypeName Name of the topic type.
   * @param options The options parameters.
   */
  public listRegionalByResourceGroupForTopicType(
    resourceGroupName: string,
    location: string,
    topicTypeName: string,
    options?: EventSubscriptionsListRegionalByResourceGroupForTopicTypeOptionalParams
  ): PagedAsyncIterableIterator<EventSubscription> {
    const iter = this.listRegionalByResourceGroupForTopicTypePagingAll(
      resourceGroupName,
      location,
      topicTypeName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listRegionalByResourceGroupForTopicTypePagingPage(
          resourceGroupName,
          location,
          topicTypeName,
          options,
          settings
        );
      }
    };
  }

  private async *listRegionalByResourceGroupForTopicTypePagingPage(
    resourceGroupName: string,
    location: string,
    topicTypeName: string,
    options?: EventSubscriptionsListRegionalByResourceGroupForTopicTypeOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<EventSubscription[]> {
    let result: EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listRegionalByResourceGroupForTopicType(
        resourceGroupName,
        location,
        topicTypeName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listRegionalByResourceGroupForTopicTypeNext(
        resourceGroupName,
        location,
        topicTypeName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listRegionalByResourceGroupForTopicTypePagingAll(
    resourceGroupName: string,
    location: string,
    topicTypeName: string,
    options?: EventSubscriptionsListRegionalByResourceGroupForTopicTypeOptionalParams
  ): AsyncIterableIterator<EventSubscription> {
    for await (const page of this.listRegionalByResourceGroupForTopicTypePagingPage(
      resourceGroupName,
      location,
      topicTypeName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List all event subscriptions that have been created for a specific resource.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param providerNamespace Namespace of the provider of the topic.
   * @param resourceTypeName Name of the resource type.
   * @param resourceName Name of the resource.
   * @param options The options parameters.
   */
  public listByResource(
    resourceGroupName: string,
    providerNamespace: string,
    resourceTypeName: string,
    resourceName: string,
    options?: EventSubscriptionsListByResourceOptionalParams
  ): PagedAsyncIterableIterator<EventSubscription> {
    const iter = this.listByResourcePagingAll(
      resourceGroupName,
      providerNamespace,
      resourceTypeName,
      resourceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourcePagingPage(
          resourceGroupName,
          providerNamespace,
          resourceTypeName,
          resourceName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourcePagingPage(
    resourceGroupName: string,
    providerNamespace: string,
    resourceTypeName: string,
    resourceName: string,
    options?: EventSubscriptionsListByResourceOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<EventSubscription[]> {
    let result: EventSubscriptionsListByResourceResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResource(
        resourceGroupName,
        providerNamespace,
        resourceTypeName,
        resourceName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceNext(
        resourceGroupName,
        providerNamespace,
        resourceTypeName,
        resourceName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourcePagingAll(
    resourceGroupName: string,
    providerNamespace: string,
    resourceTypeName: string,
    resourceName: string,
    options?: EventSubscriptionsListByResourceOptionalParams
  ): AsyncIterableIterator<EventSubscription> {
    for await (const page of this.listByResourcePagingPage(
      resourceGroupName,
      providerNamespace,
      resourceTypeName,
      resourceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List all event subscriptions that have been created for a specific domain topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param domainName Name of the top level domain.
   * @param topicName Name of the domain topic.
   * @param options The options parameters.
   */
  public listByDomainTopic(
    resourceGroupName: string,
    domainName: string,
    topicName: string,
    options?: EventSubscriptionsListByDomainTopicOptionalParams
  ): PagedAsyncIterableIterator<EventSubscription> {
    const iter = this.listByDomainTopicPagingAll(
      resourceGroupName,
      domainName,
      topicName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByDomainTopicPagingPage(
          resourceGroupName,
          domainName,
          topicName,
          options,
          settings
        );
      }
    };
  }

  private async *listByDomainTopicPagingPage(
    resourceGroupName: string,
    domainName: string,
    topicName: string,
    options?: EventSubscriptionsListByDomainTopicOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<EventSubscription[]> {
    let result: EventSubscriptionsListByDomainTopicResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByDomainTopic(
        resourceGroupName,
        domainName,
        topicName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByDomainTopicNext(
        resourceGroupName,
        domainName,
        topicName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByDomainTopicPagingAll(
    resourceGroupName: string,
    domainName: string,
    topicName: string,
    options?: EventSubscriptionsListByDomainTopicOptionalParams
  ): AsyncIterableIterator<EventSubscription> {
    for await (const page of this.listByDomainTopicPagingPage(
      resourceGroupName,
      domainName,
      topicName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get properties of an event subscription.
   * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
   *              group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic.
   *              For example, use '/subscriptions/{subscriptionId}/' for a subscription,
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   *              for a resource, and
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
   *              for an EventGrid topic.
   * @param eventSubscriptionName Name of the event subscription.
   * @param options The options parameters.
   */
  get(
    scope: string,
    eventSubscriptionName: string,
    options?: EventSubscriptionsGetOptionalParams
  ): Promise<EventSubscriptionsGetResponse> {
    return this.client.sendOperationRequest(
      { scope, eventSubscriptionName, options },
      getOperationSpec
    );
  }

  /**
   * Asynchronously creates a new event subscription or updates an existing event subscription based on
   * the specified scope.
   * @param scope The identifier of the resource to which the event subscription needs to be created or
   *              updated. The scope can be a subscription, or a resource group, or a top level resource belonging to
   *              a resource provider namespace, or an EventGrid topic. For example, use
   *              '/subscriptions/{subscriptionId}/' for a subscription,
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   *              for a resource, and
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
   *              for an EventGrid topic.
   * @param eventSubscriptionName Name of the event subscription. Event subscription names must be
   *                              between 3 and 64 characters in length and should use alphanumeric letters only.
   * @param eventSubscriptionInfo Event subscription properties containing the destination and filter
   *                              information.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    scope: string,
    eventSubscriptionName: string,
    eventSubscriptionInfo: EventSubscription,
    options?: EventSubscriptionsCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<EventSubscriptionsCreateOrUpdateResponse>,
      EventSubscriptionsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<EventSubscriptionsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { scope, eventSubscriptionName, eventSubscriptionInfo, options },
      createOrUpdateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Asynchronously creates a new event subscription or updates an existing event subscription based on
   * the specified scope.
   * @param scope The identifier of the resource to which the event subscription needs to be created or
   *              updated. The scope can be a subscription, or a resource group, or a top level resource belonging to
   *              a resource provider namespace, or an EventGrid topic. For example, use
   *              '/subscriptions/{subscriptionId}/' for a subscription,
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   *              for a resource, and
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
   *              for an EventGrid topic.
   * @param eventSubscriptionName Name of the event subscription. Event subscription names must be
   *                              between 3 and 64 characters in length and should use alphanumeric letters only.
   * @param eventSubscriptionInfo Event subscription properties containing the destination and filter
   *                              information.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    scope: string,
    eventSubscriptionName: string,
    eventSubscriptionInfo: EventSubscription,
    options?: EventSubscriptionsCreateOrUpdateOptionalParams
  ): Promise<EventSubscriptionsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      scope,
      eventSubscriptionName,
      eventSubscriptionInfo,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete an existing event subscription.
   * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
   *              group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic.
   *              For example, use '/subscriptions/{subscriptionId}/' for a subscription,
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   *              for a resource, and
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
   *              for an EventGrid topic.
   * @param eventSubscriptionName Name of the event subscription.
   * @param options The options parameters.
   */
  async beginDelete(
    scope: string,
    eventSubscriptionName: string,
    options?: EventSubscriptionsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { scope, eventSubscriptionName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete an existing event subscription.
   * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
   *              group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic.
   *              For example, use '/subscriptions/{subscriptionId}/' for a subscription,
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   *              for a resource, and
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
   *              for an EventGrid topic.
   * @param eventSubscriptionName Name of the event subscription.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    scope: string,
    eventSubscriptionName: string,
    options?: EventSubscriptionsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      scope,
      eventSubscriptionName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Asynchronously updates an existing event subscription.
   * @param scope The scope of existing event subscription. The scope can be a subscription, or a
   *              resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid
   *              topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription,
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   *              for a resource, and
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
   *              for an EventGrid topic.
   * @param eventSubscriptionName Name of the event subscription to be updated.
   * @param eventSubscriptionUpdateParameters Updated event subscription information.
   * @param options The options parameters.
   */
  async beginUpdate(
    scope: string,
    eventSubscriptionName: string,
    eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters,
    options?: EventSubscriptionsUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<EventSubscriptionsUpdateResponse>,
      EventSubscriptionsUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<EventSubscriptionsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        scope,
        eventSubscriptionName,
        eventSubscriptionUpdateParameters,
        options
      },
      updateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Asynchronously updates an existing event subscription.
   * @param scope The scope of existing event subscription. The scope can be a subscription, or a
   *              resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid
   *              topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription,
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   *              for a resource, and
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
   *              for an EventGrid topic.
   * @param eventSubscriptionName Name of the event subscription to be updated.
   * @param eventSubscriptionUpdateParameters Updated event subscription information.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    scope: string,
    eventSubscriptionName: string,
    eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters,
    options?: EventSubscriptionsUpdateOptionalParams
  ): Promise<EventSubscriptionsUpdateResponse> {
    const poller = await this.beginUpdate(
      scope,
      eventSubscriptionName,
      eventSubscriptionUpdateParameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Get the full endpoint URL for an event subscription.
   * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
   *              group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic.
   *              For example, use '/subscriptions/{subscriptionId}/' for a subscription,
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   *              for a resource, and
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
   *              for an EventGrid topic.
   * @param eventSubscriptionName Name of the event subscription.
   * @param options The options parameters.
   */
  getFullUrl(
    scope: string,
    eventSubscriptionName: string,
    options?: EventSubscriptionsGetFullUrlOptionalParams
  ): Promise<EventSubscriptionsGetFullUrlResponse> {
    return this.client.sendOperationRequest(
      { scope, eventSubscriptionName, options },
      getFullUrlOperationSpec
    );
  }

  /**
   * List all aggregated global event subscriptions under a specific Azure subscription.
   * @param options The options parameters.
   */
  private _listGlobalBySubscription(
    options?: EventSubscriptionsListGlobalBySubscriptionOptionalParams
  ): Promise<EventSubscriptionsListGlobalBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listGlobalBySubscriptionOperationSpec
    );
  }

  /**
   * List all global event subscriptions under an Azure subscription for a topic type.
   * @param topicTypeName Name of the topic type.
   * @param options The options parameters.
   */
  private _listGlobalBySubscriptionForTopicType(
    topicTypeName: string,
    options?: EventSubscriptionsListGlobalBySubscriptionForTopicTypeOptionalParams
  ): Promise<EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse> {
    return this.client.sendOperationRequest(
      { topicTypeName, options },
      listGlobalBySubscriptionForTopicTypeOperationSpec
    );
  }

  /**
   * List all global event subscriptions under a specific Azure subscription and resource group.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param options The options parameters.
   */
  private _listGlobalByResourceGroup(
    resourceGroupName: string,
    options?: EventSubscriptionsListGlobalByResourceGroupOptionalParams
  ): Promise<EventSubscriptionsListGlobalByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listGlobalByResourceGroupOperationSpec
    );
  }

  /**
   * List all global event subscriptions under a resource group for a specific topic type.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param topicTypeName Name of the topic type.
   * @param options The options parameters.
   */
  private _listGlobalByResourceGroupForTopicType(
    resourceGroupName: string,
    topicTypeName: string,
    options?: EventSubscriptionsListGlobalByResourceGroupForTopicTypeOptionalParams
  ): Promise<EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, topicTypeName, options },
      listGlobalByResourceGroupForTopicTypeOperationSpec
    );
  }

  /**
   * List all event subscriptions from the given location under a specific Azure subscription.
   * @param location Name of the location.
   * @param options The options parameters.
   */
  private _listRegionalBySubscription(
    location: string,
    options?: EventSubscriptionsListRegionalBySubscriptionOptionalParams
  ): Promise<EventSubscriptionsListRegionalBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { location, options },
      listRegionalBySubscriptionOperationSpec
    );
  }

  /**
   * List all event subscriptions from the given location under a specific Azure subscription and
   * resource group.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param location Name of the location.
   * @param options The options parameters.
   */
  private _listRegionalByResourceGroup(
    resourceGroupName: string,
    location: string,
    options?: EventSubscriptionsListRegionalByResourceGroupOptionalParams
  ): Promise<EventSubscriptionsListRegionalByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, location, options },
      listRegionalByResourceGroupOperationSpec
    );
  }

  /**
   * List all event subscriptions from the given location under a specific Azure subscription and topic
   * type.
   * @param location Name of the location.
   * @param topicTypeName Name of the topic type.
   * @param options The options parameters.
   */
  private _listRegionalBySubscriptionForTopicType(
    location: string,
    topicTypeName: string,
    options?: EventSubscriptionsListRegionalBySubscriptionForTopicTypeOptionalParams
  ): Promise<EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse> {
    return this.client.sendOperationRequest(
      { location, topicTypeName, options },
      listRegionalBySubscriptionForTopicTypeOperationSpec
    );
  }

  /**
   * List all event subscriptions from the given location under a specific Azure subscription and
   * resource group and topic type.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param location Name of the location.
   * @param topicTypeName Name of the topic type.
   * @param options The options parameters.
   */
  private _listRegionalByResourceGroupForTopicType(
    resourceGroupName: string,
    location: string,
    topicTypeName: string,
    options?: EventSubscriptionsListRegionalByResourceGroupForTopicTypeOptionalParams
  ): Promise<
    EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse
  > {
    return this.client.sendOperationRequest(
      { resourceGroupName, location, topicTypeName, options },
      listRegionalByResourceGroupForTopicTypeOperationSpec
    );
  }

  /**
   * List all event subscriptions that have been created for a specific resource.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param providerNamespace Namespace of the provider of the topic.
   * @param resourceTypeName Name of the resource type.
   * @param resourceName Name of the resource.
   * @param options The options parameters.
   */
  private _listByResource(
    resourceGroupName: string,
    providerNamespace: string,
    resourceTypeName: string,
    resourceName: string,
    options?: EventSubscriptionsListByResourceOptionalParams
  ): Promise<EventSubscriptionsListByResourceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        providerNamespace,
        resourceTypeName,
        resourceName,
        options
      },
      listByResourceOperationSpec
    );
  }

  /**
   * List all event subscriptions that have been created for a specific domain topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param domainName Name of the top level domain.
   * @param topicName Name of the domain topic.
   * @param options The options parameters.
   */
  private _listByDomainTopic(
    resourceGroupName: string,
    domainName: string,
    topicName: string,
    options?: EventSubscriptionsListByDomainTopicOptionalParams
  ): Promise<EventSubscriptionsListByDomainTopicResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, domainName, topicName, options },
      listByDomainTopicOperationSpec
    );
  }

  /**
   * Get all delivery attributes for an event subscription.
   * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
   *              group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic.
   *              For example, use '/subscriptions/{subscriptionId}/' for a subscription,
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
   *              for a resource, and
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
   *              for an EventGrid topic.
   * @param eventSubscriptionName Name of the event subscription.
   * @param options The options parameters.
   */
  getDeliveryAttributes(
    scope: string,
    eventSubscriptionName: string,
    options?: EventSubscriptionsGetDeliveryAttributesOptionalParams
  ): Promise<EventSubscriptionsGetDeliveryAttributesResponse> {
    return this.client.sendOperationRequest(
      { scope, eventSubscriptionName, options },
      getDeliveryAttributesOperationSpec
    );
  }

  /**
   * ListGlobalBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListGlobalBySubscription
   *                 method.
   * @param options The options parameters.
   */
  private _listGlobalBySubscriptionNext(
    nextLink: string,
    options?: EventSubscriptionsListGlobalBySubscriptionNextOptionalParams
  ): Promise<EventSubscriptionsListGlobalBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listGlobalBySubscriptionNextOperationSpec
    );
  }

  /**
   * ListGlobalBySubscriptionForTopicTypeNext
   * @param topicTypeName Name of the topic type.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListGlobalBySubscriptionForTopicType method.
   * @param options The options parameters.
   */
  private _listGlobalBySubscriptionForTopicTypeNext(
    topicTypeName: string,
    nextLink: string,
    options?: EventSubscriptionsListGlobalBySubscriptionForTopicTypeNextOptionalParams
  ): Promise<
    EventSubscriptionsListGlobalBySubscriptionForTopicTypeNextResponse
  > {
    return this.client.sendOperationRequest(
      { topicTypeName, nextLink, options },
      listGlobalBySubscriptionForTopicTypeNextOperationSpec
    );
  }

  /**
   * ListGlobalByResourceGroupNext
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param nextLink The nextLink from the previous successful call to the ListGlobalByResourceGroup
   *                 method.
   * @param options The options parameters.
   */
  private _listGlobalByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: EventSubscriptionsListGlobalByResourceGroupNextOptionalParams
  ): Promise<EventSubscriptionsListGlobalByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listGlobalByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListGlobalByResourceGroupForTopicTypeNext
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param topicTypeName Name of the topic type.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListGlobalByResourceGroupForTopicType method.
   * @param options The options parameters.
   */
  private _listGlobalByResourceGroupForTopicTypeNext(
    resourceGroupName: string,
    topicTypeName: string,
    nextLink: string,
    options?: EventSubscriptionsListGlobalByResourceGroupForTopicTypeNextOptionalParams
  ): Promise<
    EventSubscriptionsListGlobalByResourceGroupForTopicTypeNextResponse
  > {
    return this.client.sendOperationRequest(
      { resourceGroupName, topicTypeName, nextLink, options },
      listGlobalByResourceGroupForTopicTypeNextOperationSpec
    );
  }

  /**
   * ListRegionalBySubscriptionNext
   * @param location Name of the location.
   * @param nextLink The nextLink from the previous successful call to the ListRegionalBySubscription
   *                 method.
   * @param options The options parameters.
   */
  private _listRegionalBySubscriptionNext(
    location: string,
    nextLink: string,
    options?: EventSubscriptionsListRegionalBySubscriptionNextOptionalParams
  ): Promise<EventSubscriptionsListRegionalBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { location, nextLink, options },
      listRegionalBySubscriptionNextOperationSpec
    );
  }

  /**
   * ListRegionalByResourceGroupNext
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param location Name of the location.
   * @param nextLink The nextLink from the previous successful call to the ListRegionalByResourceGroup
   *                 method.
   * @param options The options parameters.
   */
  private _listRegionalByResourceGroupNext(
    resourceGroupName: string,
    location: string,
    nextLink: string,
    options?: EventSubscriptionsListRegionalByResourceGroupNextOptionalParams
  ): Promise<EventSubscriptionsListRegionalByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, location, nextLink, options },
      listRegionalByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListRegionalBySubscriptionForTopicTypeNext
   * @param location Name of the location.
   * @param topicTypeName Name of the topic type.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListRegionalBySubscriptionForTopicType method.
   * @param options The options parameters.
   */
  private _listRegionalBySubscriptionForTopicTypeNext(
    location: string,
    topicTypeName: string,
    nextLink: string,
    options?: EventSubscriptionsListRegionalBySubscriptionForTopicTypeNextOptionalParams
  ): Promise<
    EventSubscriptionsListRegionalBySubscriptionForTopicTypeNextResponse
  > {
    return this.client.sendOperationRequest(
      { location, topicTypeName, nextLink, options },
      listRegionalBySubscriptionForTopicTypeNextOperationSpec
    );
  }

  /**
   * ListRegionalByResourceGroupForTopicTypeNext
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param location Name of the location.
   * @param topicTypeName Name of the topic type.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListRegionalByResourceGroupForTopicType method.
   * @param options The options parameters.
   */
  private _listRegionalByResourceGroupForTopicTypeNext(
    resourceGroupName: string,
    location: string,
    topicTypeName: string,
    nextLink: string,
    options?: EventSubscriptionsListRegionalByResourceGroupForTopicTypeNextOptionalParams
  ): Promise<
    EventSubscriptionsListRegionalByResourceGroupForTopicTypeNextResponse
  > {
    return this.client.sendOperationRequest(
      { resourceGroupName, location, topicTypeName, nextLink, options },
      listRegionalByResourceGroupForTopicTypeNextOperationSpec
    );
  }

  /**
   * ListByResourceNext
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param providerNamespace Namespace of the provider of the topic.
   * @param resourceTypeName Name of the resource type.
   * @param resourceName Name of the resource.
   * @param nextLink The nextLink from the previous successful call to the ListByResource method.
   * @param options The options parameters.
   */
  private _listByResourceNext(
    resourceGroupName: string,
    providerNamespace: string,
    resourceTypeName: string,
    resourceName: string,
    nextLink: string,
    options?: EventSubscriptionsListByResourceNextOptionalParams
  ): Promise<EventSubscriptionsListByResourceNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        providerNamespace,
        resourceTypeName,
        resourceName,
        nextLink,
        options
      },
      listByResourceNextOperationSpec
    );
  }

  /**
   * ListByDomainTopicNext
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param domainName Name of the top level domain.
   * @param topicName Name of the domain topic.
   * @param nextLink The nextLink from the previous successful call to the ListByDomainTopic method.
   * @param options The options parameters.
   */
  private _listByDomainTopicNext(
    resourceGroupName: string,
    domainName: string,
    topicName: string,
    nextLink: string,
    options?: EventSubscriptionsListByDomainTopicNextOptionalParams
  ): Promise<EventSubscriptionsListByDomainTopicNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, domainName, topicName, nextLink, options },
      listByDomainTopicNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscription
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.eventSubscriptionName,
    Parameters.scope
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscription
    },
    201: {
      bodyMapper: Mappers.EventSubscription
    },
    202: {
      bodyMapper: Mappers.EventSubscription
    },
    204: {
      bodyMapper: Mappers.EventSubscription
    },
    default: {}
  },
  requestBody: Parameters.eventSubscriptionInfo,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.eventSubscriptionName,
    Parameters.scope
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.eventSubscriptionName,
    Parameters.scope
  ],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscription
    },
    201: {
      bodyMapper: Mappers.EventSubscription
    },
    202: {
      bodyMapper: Mappers.EventSubscription
    },
    204: {
      bodyMapper: Mappers.EventSubscription
    },
    default: {}
  },
  requestBody: Parameters.eventSubscriptionUpdateParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.eventSubscriptionName,
    Parameters.scope
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getFullUrlOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}/getFullUrl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionFullUrl
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.eventSubscriptionName,
    Parameters.scope
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listGlobalBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/eventSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listGlobalBySubscriptionForTopicTypeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.topicTypeName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listGlobalByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/eventSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listGlobalByResourceGroupForTopicTypeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.topicTypeName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listRegionalBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/locations/{location}/eventSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listRegionalByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/locations/{location}/eventSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listRegionalBySubscriptionForTopicTypeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/locations/{location}/topicTypes/{topicTypeName}/eventSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.topicTypeName,
    Parameters.location
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listRegionalByResourceGroupForTopicTypeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/locations/{location}/topicTypes/{topicTypeName}/eventSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.topicTypeName,
    Parameters.location
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerNamespace}/{resourceTypeName}/{resourceName}/providers/Microsoft.EventGrid/eventSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.providerNamespace,
    Parameters.resourceTypeName,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByDomainTopicOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{topicName}/providers/Microsoft.EventGrid/eventSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.domainName,
    Parameters.topicName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getDeliveryAttributesOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}/getDeliveryAttributes",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeliveryAttributeListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.eventSubscriptionName,
    Parameters.scope
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listGlobalBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listGlobalBySubscriptionForTopicTypeNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.topicTypeName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listGlobalByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listGlobalByResourceGroupForTopicTypeNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.topicTypeName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listRegionalBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.location
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listRegionalByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.location
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listRegionalBySubscriptionForTopicTypeNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.topicTypeName,
    Parameters.location
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listRegionalByResourceGroupForTopicTypeNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.topicTypeName,
    Parameters.location
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.providerNamespace,
    Parameters.resourceTypeName,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByDomainTopicNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventSubscriptionsListResult
    },
    default: {}
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.domainName,
    Parameters.topicName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
