/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/domainTopicsMappers";
import * as Parameters from "../models/parameters";
import { EventGridManagementClientContext } from "../eventGridManagementClientContext";

/** Class representing a DomainTopics. */
export class DomainTopics {
  private readonly client: EventGridManagementClientContext;

  /**
   * Create a DomainTopics.
   * @param {EventGridManagementClientContext} client Reference to the service client.
   */
  constructor(client: EventGridManagementClientContext) {
    this.client = client;
  }

  /**
   * Get properties of a domain topic.
   * @summary Get a domain topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param domainName Name of the domain.
   * @param domainTopicName Name of the topic.
   * @param [options] The optional parameters
   * @returns Promise<Models.DomainTopicsGetResponse>
   */
  get(resourceGroupName: string, domainName: string, domainTopicName: string, options?: msRest.RequestOptionsBase): Promise<Models.DomainTopicsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param domainName Name of the domain.
   * @param domainTopicName Name of the topic.
   * @param callback The callback
   */
  get(resourceGroupName: string, domainName: string, domainTopicName: string, callback: msRest.ServiceCallback<Models.DomainTopic>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param domainName Name of the domain.
   * @param domainTopicName Name of the topic.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, domainName: string, domainTopicName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DomainTopic>): void;
  get(resourceGroupName: string, domainName: string, domainTopicName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DomainTopic>, callback?: msRest.ServiceCallback<Models.DomainTopic>): Promise<Models.DomainTopicsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        domainName,
        domainTopicName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.DomainTopicsGetResponse>;
  }

  /**
   * Asynchronously creates or updates a new domain topic with the specified parameters.
   * @summary Create or update a domain topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param domainName Name of the domain.
   * @param domainTopicName Name of the domain topic.
   * @param [options] The optional parameters
   * @returns Promise<Models.DomainTopicsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, domainName: string, domainTopicName: string, options?: msRest.RequestOptionsBase): Promise<Models.DomainTopicsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,domainName,domainTopicName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DomainTopicsCreateOrUpdateResponse>;
  }

  /**
   * Delete existing domain topic.
   * @summary Delete a domain topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param domainName Name of the domain.
   * @param domainTopicName Name of the domain topic.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, domainName: string, domainTopicName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,domainName,domainTopicName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * List all the topics in a domain.
   * @summary List domain topics.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param domainName Domain name.
   * @param [options] The optional parameters
   * @returns Promise<Models.DomainTopicsListByDomainResponse>
   */
  listByDomain(resourceGroupName: string, domainName: string, options?: Models.DomainTopicsListByDomainOptionalParams): Promise<Models.DomainTopicsListByDomainResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param domainName Domain name.
   * @param callback The callback
   */
  listByDomain(resourceGroupName: string, domainName: string, callback: msRest.ServiceCallback<Models.DomainTopicsListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param domainName Domain name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByDomain(resourceGroupName: string, domainName: string, options: Models.DomainTopicsListByDomainOptionalParams, callback: msRest.ServiceCallback<Models.DomainTopicsListResult>): void;
  listByDomain(resourceGroupName: string, domainName: string, options?: Models.DomainTopicsListByDomainOptionalParams | msRest.ServiceCallback<Models.DomainTopicsListResult>, callback?: msRest.ServiceCallback<Models.DomainTopicsListResult>): Promise<Models.DomainTopicsListByDomainResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        domainName,
        options
      },
      listByDomainOperationSpec,
      callback) as Promise<Models.DomainTopicsListByDomainResponse>;
  }

  /**
   * Asynchronously creates or updates a new domain topic with the specified parameters.
   * @summary Create or update a domain topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param domainName Name of the domain.
   * @param domainTopicName Name of the domain topic.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, domainName: string, domainTopicName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        domainName,
        domainTopicName,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Delete existing domain topic.
   * @summary Delete a domain topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param domainName Name of the domain.
   * @param domainTopicName Name of the domain topic.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, domainName: string, domainTopicName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        domainName,
        domainTopicName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * List all the topics in a domain.
   * @summary List domain topics.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DomainTopicsListByDomainNextResponse>
   */
  listByDomainNext(nextPageLink: string, options?: Models.DomainTopicsListByDomainNextOptionalParams): Promise<Models.DomainTopicsListByDomainNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByDomainNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DomainTopicsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByDomainNext(nextPageLink: string, options: Models.DomainTopicsListByDomainNextOptionalParams, callback: msRest.ServiceCallback<Models.DomainTopicsListResult>): void;
  listByDomainNext(nextPageLink: string, options?: Models.DomainTopicsListByDomainNextOptionalParams | msRest.ServiceCallback<Models.DomainTopicsListResult>, callback?: msRest.ServiceCallback<Models.DomainTopicsListResult>): Promise<Models.DomainTopicsListByDomainNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByDomainNextOperationSpec,
      callback) as Promise<Models.DomainTopicsListByDomainNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{domainTopicName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.domainName,
    Parameters.domainTopicName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DomainTopic
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByDomainOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.domainName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DomainTopicsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{domainTopicName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.domainName,
    Parameters.domainTopicName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    201: {
      bodyMapper: Mappers.DomainTopic
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{domainTopicName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.domainName,
    Parameters.domainTopicName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByDomainNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DomainTopicsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
