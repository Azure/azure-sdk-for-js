/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import { TokenCredential } from "@azure/core-auth";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as operations from "./operations";
import { EventGridManagementClientContext } from "./eventGridManagementClientContext";


class EventGridManagementClient extends EventGridManagementClientContext {
  // Operation groups
  domains: operations.Domains;
  domainTopics: operations.DomainTopics;
  eventSubscriptions: operations.EventSubscriptions;
  systemTopicEventSubscriptions: operations.SystemTopicEventSubscriptions;
  operations: operations.Operations;
  topics: operations.Topics;
  privateEndpointConnections: operations.PrivateEndpointConnections;
  privateLinkResources: operations.PrivateLinkResources;
  systemTopics: operations.SystemTopics;
  extensionTopics: operations.ExtensionTopics;
  topicTypes: operations.TopicTypes;

  /**
   * Initializes a new instance of the EventGridManagementClient class.
   * @param credentials Credentials needed for the client to connect to Azure. Credentials
   * implementing the TokenCredential interface from the @azure/identity package are recommended. For
   * more information about these credentials, see
   * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
   * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
   * @azure/ms-rest-browserauth are also supported.
   * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure
   * subscription. The subscription ID forms part of the URI for every service call.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials | TokenCredential, subscriptionId: string, options?: Models.EventGridManagementClientOptions) {
    super(credentials, subscriptionId, options);
    this.domains = new operations.Domains(this);
    this.domainTopics = new operations.DomainTopics(this);
    this.eventSubscriptions = new operations.EventSubscriptions(this);
    this.systemTopicEventSubscriptions = new operations.SystemTopicEventSubscriptions(this);
    this.operations = new operations.Operations(this);
    this.topics = new operations.Topics(this);
    this.privateEndpointConnections = new operations.PrivateEndpointConnections(this);
    this.privateLinkResources = new operations.PrivateLinkResources(this);
    this.systemTopics = new operations.SystemTopics(this);
    this.extensionTopics = new operations.ExtensionTopics(this);
    this.topicTypes = new operations.TopicTypes(this);
  }
}

// Operation Specifications

export {
  EventGridManagementClient,
  EventGridManagementClientContext,
  Models as EventGridManagementModels,
  Mappers as EventGridManagementMappers
};
export * from "./operations";
