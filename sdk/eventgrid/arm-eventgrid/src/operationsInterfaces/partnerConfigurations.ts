/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  PartnerConfiguration,
  PartnerConfigurationsListByResourceGroupOptionalParams,
  PartnerConfigurationsListBySubscriptionOptionalParams,
  PartnerConfigurationsGetOptionalParams,
  PartnerConfigurationsGetResponse,
  PartnerConfigurationsCreateOrUpdateOptionalParams,
  PartnerConfigurationsCreateOrUpdateResponse,
  PartnerConfigurationsDeleteOptionalParams,
  PartnerConfigurationUpdateParameters,
  PartnerConfigurationsUpdateOptionalParams,
  PartnerConfigurationsUpdateResponse,
  Partner,
  PartnerConfigurationsAuthorizePartnerOptionalParams,
  PartnerConfigurationsAuthorizePartnerResponse,
  PartnerConfigurationsUnauthorizePartnerOptionalParams,
  PartnerConfigurationsUnauthorizePartnerResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a PartnerConfigurations. */
export interface PartnerConfigurations {
  /**
   * List all the partner configurations under a resource group.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: PartnerConfigurationsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<PartnerConfiguration>;
  /**
   * List all the partner configurations under an Azure subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: PartnerConfigurationsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<PartnerConfiguration>;
  /**
   * Get properties of a partner configuration.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    options?: PartnerConfigurationsGetOptionalParams
  ): Promise<PartnerConfigurationsGetResponse>;
  /**
   * Synchronously creates or updates a partner configuration with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerConfigurationInfo Partner configuration information.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    partnerConfigurationInfo: PartnerConfiguration,
    options?: PartnerConfigurationsCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<PartnerConfigurationsCreateOrUpdateResponse>,
      PartnerConfigurationsCreateOrUpdateResponse
    >
  >;
  /**
   * Synchronously creates or updates a partner configuration with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerConfigurationInfo Partner configuration information.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    partnerConfigurationInfo: PartnerConfiguration,
    options?: PartnerConfigurationsCreateOrUpdateOptionalParams
  ): Promise<PartnerConfigurationsCreateOrUpdateResponse>;
  /**
   * Delete existing partner configuration.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    options?: PartnerConfigurationsDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Delete existing partner configuration.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    options?: PartnerConfigurationsDeleteOptionalParams
  ): Promise<void>;
  /**
   * Synchronously updates a partner configuration with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerConfigurationUpdateParameters Partner configuration update information.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    partnerConfigurationUpdateParameters: PartnerConfigurationUpdateParameters,
    options?: PartnerConfigurationsUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<PartnerConfigurationsUpdateResponse>,
      PartnerConfigurationsUpdateResponse
    >
  >;
  /**
   * Synchronously updates a partner configuration with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerConfigurationUpdateParameters Partner configuration update information.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    partnerConfigurationUpdateParameters: PartnerConfigurationUpdateParameters,
    options?: PartnerConfigurationsUpdateOptionalParams
  ): Promise<PartnerConfigurationsUpdateResponse>;
  /**
   * Authorize a single partner either by partner registration immutable Id or by partner name.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerInfo The information of the partner to be authorized.
   * @param options The options parameters.
   */
  authorizePartner(
    resourceGroupName: string,
    partnerInfo: Partner,
    options?: PartnerConfigurationsAuthorizePartnerOptionalParams
  ): Promise<PartnerConfigurationsAuthorizePartnerResponse>;
  /**
   * Unauthorize a single partner either by partner registration immutable Id or by partner name.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerInfo The information of the partner to be unauthorized.
   * @param options The options parameters.
   */
  unauthorizePartner(
    resourceGroupName: string,
    partnerInfo: Partner,
    options?: PartnerConfigurationsUnauthorizePartnerOptionalParams
  ): Promise<PartnerConfigurationsUnauthorizePartnerResponse>;
}
