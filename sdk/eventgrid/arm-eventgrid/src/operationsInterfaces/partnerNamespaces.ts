/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  PartnerNamespace,
  PartnerNamespacesListBySubscriptionOptionalParams,
  PartnerNamespacesListByResourceGroupOptionalParams,
  PartnerNamespacesGetOptionalParams,
  PartnerNamespacesGetResponse,
  PartnerNamespacesCreateOrUpdateOptionalParams,
  PartnerNamespacesCreateOrUpdateResponse,
  PartnerNamespacesDeleteOptionalParams,
  PartnerNamespaceUpdateParameters,
  PartnerNamespacesUpdateOptionalParams,
  PartnerNamespacesListSharedAccessKeysOptionalParams,
  PartnerNamespacesListSharedAccessKeysResponse,
  PartnerNamespaceRegenerateKeyRequest,
  PartnerNamespacesRegenerateKeyOptionalParams,
  PartnerNamespacesRegenerateKeyResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a PartnerNamespaces. */
export interface PartnerNamespaces {
  /**
   * List all the partner namespaces under an Azure subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: PartnerNamespacesListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<PartnerNamespace>;
  /**
   * List all the partner namespaces under a resource group.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: PartnerNamespacesListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<PartnerNamespace>;
  /**
   * Get properties of a partner namespace.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    partnerNamespaceName: string,
    options?: PartnerNamespacesGetOptionalParams
  ): Promise<PartnerNamespacesGetResponse>;
  /**
   * Asynchronously creates a new partner namespace with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param partnerNamespaceInfo PartnerNamespace information.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    partnerNamespaceName: string,
    partnerNamespaceInfo: PartnerNamespace,
    options?: PartnerNamespacesCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<PartnerNamespacesCreateOrUpdateResponse>,
      PartnerNamespacesCreateOrUpdateResponse
    >
  >;
  /**
   * Asynchronously creates a new partner namespace with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param partnerNamespaceInfo PartnerNamespace information.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    partnerNamespaceName: string,
    partnerNamespaceInfo: PartnerNamespace,
    options?: PartnerNamespacesCreateOrUpdateOptionalParams
  ): Promise<PartnerNamespacesCreateOrUpdateResponse>;
  /**
   * Delete existing partner namespace.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    partnerNamespaceName: string,
    options?: PartnerNamespacesDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Delete existing partner namespace.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    partnerNamespaceName: string,
    options?: PartnerNamespacesDeleteOptionalParams
  ): Promise<void>;
  /**
   * Asynchronously updates a partner namespace with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param partnerNamespaceUpdateParameters Partner namespace update information.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    partnerNamespaceName: string,
    partnerNamespaceUpdateParameters: PartnerNamespaceUpdateParameters,
    options?: PartnerNamespacesUpdateOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Asynchronously updates a partner namespace with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param partnerNamespaceUpdateParameters Partner namespace update information.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    partnerNamespaceName: string,
    partnerNamespaceUpdateParameters: PartnerNamespaceUpdateParameters,
    options?: PartnerNamespacesUpdateOptionalParams
  ): Promise<void>;
  /**
   * List the two keys used to publish to a partner namespace.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param options The options parameters.
   */
  listSharedAccessKeys(
    resourceGroupName: string,
    partnerNamespaceName: string,
    options?: PartnerNamespacesListSharedAccessKeysOptionalParams
  ): Promise<PartnerNamespacesListSharedAccessKeysResponse>;
  /**
   * Regenerate a shared access key for a partner namespace.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerNamespaceName Name of the partner namespace.
   * @param regenerateKeyRequest Request body to regenerate key.
   * @param options The options parameters.
   */
  regenerateKey(
    resourceGroupName: string,
    partnerNamespaceName: string,
    regenerateKeyRequest: PartnerNamespaceRegenerateKeyRequest,
    options?: PartnerNamespacesRegenerateKeyOptionalParams
  ): Promise<PartnerNamespacesRegenerateKeyResponse>;
}
