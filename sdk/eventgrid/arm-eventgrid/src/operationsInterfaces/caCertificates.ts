/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  CaCertificate,
  CaCertificatesListByNamespaceOptionalParams,
  CaCertificatesGetOptionalParams,
  CaCertificatesGetResponse,
  CaCertificatesCreateOrUpdateOptionalParams,
  CaCertificatesCreateOrUpdateResponse,
  CaCertificatesDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a CaCertificates. */
export interface CaCertificates {
  /**
   * Get all the CA certificates under a namespace.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param namespaceName Name of the namespace.
   * @param options The options parameters.
   */
  listByNamespace(
    resourceGroupName: string,
    namespaceName: string,
    options?: CaCertificatesListByNamespaceOptionalParams
  ): PagedAsyncIterableIterator<CaCertificate>;
  /**
   * Get properties of a CA certificate.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param namespaceName Name of the namespace.
   * @param caCertificateName Name of the CA certificate.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    namespaceName: string,
    caCertificateName: string,
    options?: CaCertificatesGetOptionalParams
  ): Promise<CaCertificatesGetResponse>;
  /**
   * Create or update a CA certificate with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param namespaceName Name of the namespace.
   * @param caCertificateName The CA certificate name.
   * @param caCertificateInfo CA certificate information.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    namespaceName: string,
    caCertificateName: string,
    caCertificateInfo: CaCertificate,
    options?: CaCertificatesCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<CaCertificatesCreateOrUpdateResponse>,
      CaCertificatesCreateOrUpdateResponse
    >
  >;
  /**
   * Create or update a CA certificate with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param namespaceName Name of the namespace.
   * @param caCertificateName The CA certificate name.
   * @param caCertificateInfo CA certificate information.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    namespaceName: string,
    caCertificateName: string,
    caCertificateInfo: CaCertificate,
    options?: CaCertificatesCreateOrUpdateOptionalParams
  ): Promise<CaCertificatesCreateOrUpdateResponse>;
  /**
   * Delete an existing CA certificate.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param namespaceName Name of the namespace.
   * @param caCertificateName Name of the CA certificate.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    namespaceName: string,
    caCertificateName: string,
    options?: CaCertificatesDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Delete an existing CA certificate.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param namespaceName Name of the namespace.
   * @param caCertificateName Name of the CA certificate.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    namespaceName: string,
    caCertificateName: string,
    options?: CaCertificatesDeleteOptionalParams
  ): Promise<void>;
}
