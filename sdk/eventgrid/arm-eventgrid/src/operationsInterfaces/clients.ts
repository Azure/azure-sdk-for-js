/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Client,
  ClientsListByNamespaceOptionalParams,
  ClientsGetOptionalParams,
  ClientsGetResponse,
  ClientsCreateOrUpdateOptionalParams,
  ClientsCreateOrUpdateResponse,
  ClientsDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Clients. */
export interface Clients {
  /**
   * Get all the permission bindings under a namespace.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param namespaceName Name of the namespace.
   * @param options The options parameters.
   */
  listByNamespace(
    resourceGroupName: string,
    namespaceName: string,
    options?: ClientsListByNamespaceOptionalParams
  ): PagedAsyncIterableIterator<Client>;
  /**
   * Get properties of a client.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param namespaceName Name of the namespace.
   * @param clientName Name of the client.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    namespaceName: string,
    clientName: string,
    options?: ClientsGetOptionalParams
  ): Promise<ClientsGetResponse>;
  /**
   * Create or update a client with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param namespaceName Name of the namespace.
   * @param clientName The client name.
   * @param clientInfo Client information.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    namespaceName: string,
    clientName: string,
    clientInfo: Client,
    options?: ClientsCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<ClientsCreateOrUpdateResponse>,
      ClientsCreateOrUpdateResponse
    >
  >;
  /**
   * Create or update a client with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param namespaceName Name of the namespace.
   * @param clientName The client name.
   * @param clientInfo Client information.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    namespaceName: string,
    clientName: string,
    clientInfo: Client,
    options?: ClientsCreateOrUpdateOptionalParams
  ): Promise<ClientsCreateOrUpdateResponse>;
  /**
   * Delete an existing client.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param namespaceName Name of the namespace.
   * @param clientName Name of the client.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    namespaceName: string,
    clientName: string,
    options?: ClientsDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Delete an existing client.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param namespaceName Name of the namespace.
   * @param clientName Name of the client.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    namespaceName: string,
    clientName: string,
    options?: ClientsDeleteOptionalParams
  ): Promise<void>;
}
