/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Topic,
  TopicsListBySubscriptionOptionalParams,
  TopicsListByResourceGroupOptionalParams,
  EventType,
  TopicsListEventTypesOptionalParams,
  TopicsGetOptionalParams,
  TopicsGetResponse,
  TopicsCreateOrUpdateOptionalParams,
  TopicsCreateOrUpdateResponse,
  TopicsDeleteOptionalParams,
  TopicsDeleteResponse,
  TopicUpdateParameters,
  TopicsUpdateOptionalParams,
  TopicsListSharedAccessKeysOptionalParams,
  TopicsListSharedAccessKeysResponse,
  TopicRegenerateKeyRequest,
  TopicsRegenerateKeyOptionalParams,
  TopicsRegenerateKeyResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Topics. */
export interface Topics {
  /**
   * List all the topics under an Azure subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: TopicsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<Topic>;
  /**
   * List all the topics under a resource group.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: TopicsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<Topic>;
  /**
   * List event types for a topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param providerNamespace Namespace of the provider of the topic.
   * @param resourceTypeName Name of the topic type.
   * @param resourceName Name of the topic.
   * @param options The options parameters.
   */
  listEventTypes(
    resourceGroupName: string,
    providerNamespace: string,
    resourceTypeName: string,
    resourceName: string,
    options?: TopicsListEventTypesOptionalParams
  ): PagedAsyncIterableIterator<EventType>;
  /**
   * Get properties of a topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param topicName Name of the topic.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    topicName: string,
    options?: TopicsGetOptionalParams
  ): Promise<TopicsGetResponse>;
  /**
   * Asynchronously creates a new topic with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param topicName Name of the topic.
   * @param topicInfo Topic information.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    topicName: string,
    topicInfo: Topic,
    options?: TopicsCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<TopicsCreateOrUpdateResponse>,
      TopicsCreateOrUpdateResponse
    >
  >;
  /**
   * Asynchronously creates a new topic with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param topicName Name of the topic.
   * @param topicInfo Topic information.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    topicName: string,
    topicInfo: Topic,
    options?: TopicsCreateOrUpdateOptionalParams
  ): Promise<TopicsCreateOrUpdateResponse>;
  /**
   * Delete existing topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param topicName Name of the topic.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    topicName: string,
    options?: TopicsDeleteOptionalParams
  ): Promise<
    SimplePollerLike<OperationState<TopicsDeleteResponse>, TopicsDeleteResponse>
  >;
  /**
   * Delete existing topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param topicName Name of the topic.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    topicName: string,
    options?: TopicsDeleteOptionalParams
  ): Promise<TopicsDeleteResponse>;
  /**
   * Asynchronously updates a topic with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param topicName Name of the topic.
   * @param topicUpdateParameters Topic update information.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    topicName: string,
    topicUpdateParameters: TopicUpdateParameters,
    options?: TopicsUpdateOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Asynchronously updates a topic with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param topicName Name of the topic.
   * @param topicUpdateParameters Topic update information.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    topicName: string,
    topicUpdateParameters: TopicUpdateParameters,
    options?: TopicsUpdateOptionalParams
  ): Promise<void>;
  /**
   * List the two keys used to publish to a topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param topicName Name of the topic.
   * @param options The options parameters.
   */
  listSharedAccessKeys(
    resourceGroupName: string,
    topicName: string,
    options?: TopicsListSharedAccessKeysOptionalParams
  ): Promise<TopicsListSharedAccessKeysResponse>;
  /**
   * Regenerate a shared access key for a topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param topicName Name of the topic.
   * @param regenerateKeyRequest Request body to regenerate key.
   * @param options The options parameters.
   */
  beginRegenerateKey(
    resourceGroupName: string,
    topicName: string,
    regenerateKeyRequest: TopicRegenerateKeyRequest,
    options?: TopicsRegenerateKeyOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<TopicsRegenerateKeyResponse>,
      TopicsRegenerateKeyResponse
    >
  >;
  /**
   * Regenerate a shared access key for a topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param topicName Name of the topic.
   * @param regenerateKeyRequest Request body to regenerate key.
   * @param options The options parameters.
   */
  beginRegenerateKeyAndWait(
    resourceGroupName: string,
    topicName: string,
    regenerateKeyRequest: TopicRegenerateKeyRequest,
    options?: TopicsRegenerateKeyOptionalParams
  ): Promise<TopicsRegenerateKeyResponse>;
}
