/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  NamespaceTopic,
  NamespaceTopicsListByNamespaceOptionalParams,
  NamespaceTopicsGetOptionalParams,
  NamespaceTopicsGetResponse,
  NamespaceTopicsCreateOrUpdateOptionalParams,
  NamespaceTopicsCreateOrUpdateResponse,
  NamespaceTopicsDeleteOptionalParams,
  NamespaceTopicUpdateParameters,
  NamespaceTopicsUpdateOptionalParams,
  NamespaceTopicsUpdateResponse,
  NamespaceTopicsListSharedAccessKeysOptionalParams,
  NamespaceTopicsListSharedAccessKeysResponse,
  TopicRegenerateKeyRequest,
  NamespaceTopicsRegenerateKeyOptionalParams,
  NamespaceTopicsRegenerateKeyResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a NamespaceTopics. */
export interface NamespaceTopics {
  /**
   * List all the namespace topics under a namespace.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param namespaceName Name of the namespace.
   * @param options The options parameters.
   */
  listByNamespace(
    resourceGroupName: string,
    namespaceName: string,
    options?: NamespaceTopicsListByNamespaceOptionalParams
  ): PagedAsyncIterableIterator<NamespaceTopic>;
  /**
   * Get properties of a namespace topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param namespaceName Name of the namespace.
   * @param topicName Name of the namespace topic.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    namespaceName: string,
    topicName: string,
    options?: NamespaceTopicsGetOptionalParams
  ): Promise<NamespaceTopicsGetResponse>;
  /**
   * Asynchronously creates a new namespace topic with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param namespaceName Name of the namespace.
   * @param topicName Name of the namespace topic.
   * @param namespaceTopicInfo Namespace topic information.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    namespaceName: string,
    topicName: string,
    namespaceTopicInfo: NamespaceTopic,
    options?: NamespaceTopicsCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<NamespaceTopicsCreateOrUpdateResponse>,
      NamespaceTopicsCreateOrUpdateResponse
    >
  >;
  /**
   * Asynchronously creates a new namespace topic with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param namespaceName Name of the namespace.
   * @param topicName Name of the namespace topic.
   * @param namespaceTopicInfo Namespace topic information.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    namespaceName: string,
    topicName: string,
    namespaceTopicInfo: NamespaceTopic,
    options?: NamespaceTopicsCreateOrUpdateOptionalParams
  ): Promise<NamespaceTopicsCreateOrUpdateResponse>;
  /**
   * Delete existing namespace topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param namespaceName Name of the namespace.
   * @param topicName Name of the topic.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    namespaceName: string,
    topicName: string,
    options?: NamespaceTopicsDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Delete existing namespace topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param namespaceName Name of the namespace.
   * @param topicName Name of the topic.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    namespaceName: string,
    topicName: string,
    options?: NamespaceTopicsDeleteOptionalParams
  ): Promise<void>;
  /**
   * Asynchronously updates a namespace topic with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param namespaceName Name of the namespace.
   * @param topicName Name of the namespace topic.
   * @param namespaceTopicUpdateParameters Namespace topic update information.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    namespaceName: string,
    topicName: string,
    namespaceTopicUpdateParameters: NamespaceTopicUpdateParameters,
    options?: NamespaceTopicsUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<NamespaceTopicsUpdateResponse>,
      NamespaceTopicsUpdateResponse
    >
  >;
  /**
   * Asynchronously updates a namespace topic with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param namespaceName Name of the namespace.
   * @param topicName Name of the namespace topic.
   * @param namespaceTopicUpdateParameters Namespace topic update information.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    namespaceName: string,
    topicName: string,
    namespaceTopicUpdateParameters: NamespaceTopicUpdateParameters,
    options?: NamespaceTopicsUpdateOptionalParams
  ): Promise<NamespaceTopicsUpdateResponse>;
  /**
   * List the two keys used to publish to a namespace topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param namespaceName Name of the namespace.
   * @param topicName Name of the topic.
   * @param options The options parameters.
   */
  listSharedAccessKeys(
    resourceGroupName: string,
    namespaceName: string,
    topicName: string,
    options?: NamespaceTopicsListSharedAccessKeysOptionalParams
  ): Promise<NamespaceTopicsListSharedAccessKeysResponse>;
  /**
   * Regenerate a shared access key for a namespace topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param namespaceName Name of the namespace.
   * @param topicName Name of the topic.
   * @param regenerateKeyRequest Request body to regenerate key.
   * @param options The options parameters.
   */
  beginRegenerateKey(
    resourceGroupName: string,
    namespaceName: string,
    topicName: string,
    regenerateKeyRequest: TopicRegenerateKeyRequest,
    options?: NamespaceTopicsRegenerateKeyOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<NamespaceTopicsRegenerateKeyResponse>,
      NamespaceTopicsRegenerateKeyResponse
    >
  >;
  /**
   * Regenerate a shared access key for a namespace topic.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param namespaceName Name of the namespace.
   * @param topicName Name of the topic.
   * @param regenerateKeyRequest Request body to regenerate key.
   * @param options The options parameters.
   */
  beginRegenerateKeyAndWait(
    resourceGroupName: string,
    namespaceName: string,
    topicName: string,
    regenerateKeyRequest: TopicRegenerateKeyRequest,
    options?: NamespaceTopicsRegenerateKeyOptionalParams
  ): Promise<NamespaceTopicsRegenerateKeyResponse>;
}
