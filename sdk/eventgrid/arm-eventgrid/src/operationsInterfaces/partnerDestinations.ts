/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  PartnerDestination,
  PartnerDestinationsListBySubscriptionOptionalParams,
  PartnerDestinationsListByResourceGroupOptionalParams,
  PartnerDestinationsGetOptionalParams,
  PartnerDestinationsGetResponse,
  PartnerDestinationsCreateOrUpdateOptionalParams,
  PartnerDestinationsCreateOrUpdateResponse,
  PartnerDestinationsDeleteOptionalParams,
  PartnerDestinationUpdateParameters,
  PartnerDestinationsUpdateOptionalParams,
  PartnerDestinationsUpdateResponse,
  PartnerDestinationsActivateOptionalParams,
  PartnerDestinationsActivateResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a PartnerDestinations. */
export interface PartnerDestinations {
  /**
   * List all the partner destinations under an Azure subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: PartnerDestinationsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<PartnerDestination>;
  /**
   * List all the partner destinations under a resource group.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: PartnerDestinationsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<PartnerDestination>;
  /**
   * Get properties of a partner destination.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerDestinationName Name of the partner destination.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    partnerDestinationName: string,
    options?: PartnerDestinationsGetOptionalParams
  ): Promise<PartnerDestinationsGetResponse>;
  /**
   * Asynchronously creates a new partner destination with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerDestinationName Name of the partner destination.
   * @param partnerDestination Partner destination create information.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    partnerDestinationName: string,
    partnerDestination: PartnerDestination,
    options?: PartnerDestinationsCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<PartnerDestinationsCreateOrUpdateResponse>,
      PartnerDestinationsCreateOrUpdateResponse
    >
  >;
  /**
   * Asynchronously creates a new partner destination with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerDestinationName Name of the partner destination.
   * @param partnerDestination Partner destination create information.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    partnerDestinationName: string,
    partnerDestination: PartnerDestination,
    options?: PartnerDestinationsCreateOrUpdateOptionalParams
  ): Promise<PartnerDestinationsCreateOrUpdateResponse>;
  /**
   * Delete existing partner destination.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerDestinationName Name of the partner destination.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    partnerDestinationName: string,
    options?: PartnerDestinationsDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Delete existing partner destination.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerDestinationName Name of the partner destination.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    partnerDestinationName: string,
    options?: PartnerDestinationsDeleteOptionalParams
  ): Promise<void>;
  /**
   * Asynchronously updates a partner destination with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerDestinationName Name of the partner destination.
   * @param partnerDestinationUpdateParameters Partner destination update information.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    partnerDestinationName: string,
    partnerDestinationUpdateParameters: PartnerDestinationUpdateParameters,
    options?: PartnerDestinationsUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<PartnerDestinationsUpdateResponse>,
      PartnerDestinationsUpdateResponse
    >
  >;
  /**
   * Asynchronously updates a partner destination with the specified parameters.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerDestinationName Name of the partner destination.
   * @param partnerDestinationUpdateParameters Partner destination update information.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    partnerDestinationName: string,
    partnerDestinationUpdateParameters: PartnerDestinationUpdateParameters,
    options?: PartnerDestinationsUpdateOptionalParams
  ): Promise<PartnerDestinationsUpdateResponse>;
  /**
   * Activate a newly created partner destination.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param partnerDestinationName Name of the partner destination.
   * @param options The options parameters.
   */
  activate(
    resourceGroupName: string,
    partnerDestinationName: string,
    options?: PartnerDestinationsActivateOptionalParams
  ): Promise<PartnerDestinationsActivateResponse>;
}
