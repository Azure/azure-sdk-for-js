/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type InputSchemaMappingUnion =
  | InputSchemaMapping
  | JsonInputSchemaMapping;
export type DeliveryAttributeMappingUnion =
  | DeliveryAttributeMapping
  | StaticDeliveryAttributeMapping
  | DynamicDeliveryAttributeMapping;
export type EventSubscriptionDestinationUnion =
  | EventSubscriptionDestination
  | WebHookEventSubscriptionDestination
  | EventHubEventSubscriptionDestination
  | StorageQueueEventSubscriptionDestination
  | HybridConnectionEventSubscriptionDestination
  | ServiceBusQueueEventSubscriptionDestination
  | ServiceBusTopicEventSubscriptionDestination
  | AzureFunctionEventSubscriptionDestination;
export type AdvancedFilterUnion =
  | AdvancedFilter
  | NumberInAdvancedFilter
  | NumberNotInAdvancedFilter
  | NumberLessThanAdvancedFilter
  | NumberGreaterThanAdvancedFilter
  | NumberLessThanOrEqualsAdvancedFilter
  | NumberGreaterThanOrEqualsAdvancedFilter
  | BoolEqualsAdvancedFilter
  | StringInAdvancedFilter
  | StringNotInAdvancedFilter
  | StringBeginsWithAdvancedFilter
  | StringEndsWithAdvancedFilter
  | StringContainsAdvancedFilter
  | NumberInRangeAdvancedFilter
  | NumberNotInRangeAdvancedFilter
  | StringNotBeginsWithAdvancedFilter
  | StringNotEndsWithAdvancedFilter
  | StringNotContainsAdvancedFilter
  | IsNullOrUndefinedAdvancedFilter
  | IsNotNullAdvancedFilter;
export type DeadLetterDestinationUnion =
  | DeadLetterDestination
  | StorageBlobDeadLetterDestination;

/** Properties of the corresponding partner topic of a Channel. */
export interface PartnerTopicInfo {
  /**
   * Azure subscription ID of the subscriber. The partner topic associated with the channel will be
   * created under this Azure subscription.
   */
  azureSubscriptionId?: string;
  /**
   * Azure Resource Group of the subscriber. The partner topic associated with the channel will be
   * created under this resource group.
   */
  resourceGroupName?: string;
  /** Name of the partner topic associated with the channel. */
  name?: string;
  /**
   * Event Type Information for the partner topic. This information is provided by the publisher and can be used by the
   * subscriber to view different types of events that are published.
   */
  eventTypeInfo?: EventTypeInfo;
  /**
   * The source information is provided by the publisher to determine the scope or context from which the events
   * are originating. This information can be used by the subscriber during the approval process of the
   * created partner topic.
   */
  source?: string;
}

/** The event type information for Channels. */
export interface EventTypeInfo {
  /** The kind of event type used. */
  kind?: EventDefinitionKind;
  /**
   * A collection of inline event types for the resource. The inline event type keys are of type string which represents the name of the event.
   * An example of a valid inline event name is "Contoso.OrderCreated".
   * The inline event type values are of type InlineEventProperties and will contain additional information for every inline event type.
   */
  inlineEventTypes?: { [propertyName: string]: InlineEventProperties };
}

/** Additional information about every inline event. */
export interface InlineEventProperties {
  /** The description for the inline event. */
  description?: string;
  /** The displayName for the inline event. */
  displayName?: string;
  /** The documentationUrl for the inline event. */
  documentationUrl?: string;
  /** The dataSchemaUrl for the inline event. */
  dataSchemaUrl?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Definition of a Resource. */
export interface Resource {
  /**
   * Fully qualified identifier of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Name of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** Properties of the Channel update. */
export interface ChannelUpdateParameters {
  /**
   * Expiration time of the channel. If this timer expires while the corresponding partner topic or partner destination is never activated,
   * the channel and corresponding partner topic or partner destination are deleted.
   */
  expirationTimeIfNotActivatedUtc?: Date;
  /** Partner topic properties which can be updated if the channel is of type PartnerTopic. */
  partnerTopicInfo?: PartnerUpdateTopicInfo;
}

/** Update properties for the corresponding partner topic of a channel. */
export interface PartnerUpdateTopicInfo {
  /** Event type info for the partner topic */
  eventTypeInfo?: EventTypeInfo;
}

/** Result of the List Channels operation */
export interface ChannelsListResult {
  /** A collection of Channels. */
  value?: Channel[];
  /** A link for the next page of channels. */
  nextLink?: string;
}

/** Full endpoint url of an event subscription */
export interface EventSubscriptionFullUrl {
  /** The URL that represents the endpoint of the destination of an event subscription. */
  endpointUrl?: string;
}

/** PrivateEndpoint information. */
export interface PrivateEndpoint {
  /** The ARM identifier for Private Endpoint. */
  id?: string;
}

/** ConnectionState information. */
export interface ConnectionState {
  /** Status of the connection. */
  status?: PersistedConnectionStatus;
  /** Description of the connection state. */
  description?: string;
  /** Actions required (if any). */
  actionsRequired?: string;
}

/** By default, Event Grid expects events to be in the Event Grid event schema. Specifying an input schema mapping enables publishing to Event Grid using a custom input schema. Currently, the only supported type of InputSchemaMapping is 'JsonInputSchemaMapping'. */
export interface InputSchemaMapping {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  inputSchemaMappingType: "Json";
}

export interface InboundIpRule {
  /** IP Address in CIDR notation e.g., 10.0.0.0/8. */
  ipMask?: string;
  /** Action to perform based on the match or no match of the IpMask. */
  action?: IpActionType;
}

/** The identity information for the resource. */
export interface IdentityInfo {
  /** The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity. */
  type?: IdentityType;
  /** The principal ID of resource identity. */
  principalId?: string;
  /** The tenant ID of resource. */
  tenantId?: string;
  /**
   * The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
   * This property is currently not used and reserved for future usage.
   */
  userAssignedIdentities?: { [propertyName: string]: UserIdentityProperties };
}

/** The information about the user identity. */
export interface UserIdentityProperties {
  /** The principal id of user assigned identity. */
  principalId?: string;
  /** The client id of user assigned identity. */
  clientId?: string;
}

/** Properties of the Domain update. */
export interface DomainUpdateParameters {
  /** Tags of the domains resource. */
  tags?: { [propertyName: string]: string };
  /** Identity information for the resource. */
  identity?: IdentityInfo;
  /**
   * This determines if traffic is allowed over public network. By default it is enabled.
   * You can further restrict to specific IPs by configuring <seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.DomainUpdateParameterProperties.InboundIpRules" />
   */
  publicNetworkAccess?: PublicNetworkAccess;
  /** This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled. */
  inboundIpRules?: InboundIpRule[];
  /** This boolean is used to enable or disable local auth. Default value is false. When the property is set to true, only AAD token will be used to authenticate if user is allowed to publish to the domain. */
  disableLocalAuth?: boolean;
  /**
   * This Boolean is used to specify the creation mechanism for 'all' the Event Grid Domain Topics associated with this Event Grid Domain resource.
   * In this context, creation of domain topic can be auto-managed (when true) or self-managed (when false). The default value for this property is true.
   * When this property is null or set to true, Event Grid is responsible of automatically creating the domain topic when the first event subscription is
   * created at the scope of the domain topic. If this property is set to false, then creating the first event subscription will require creating a domain topic
   * by the user. The self-management mode can be used if the user wants full control of when the domain topic is created, while auto-managed mode provides the
   * flexibility to perform less operations and manage fewer resources by the user. Also, note that in auto-managed creation mode, user is allowed to create the
   * domain topic on demand if needed.
   */
  autoCreateTopicWithFirstSubscription?: boolean;
  /**
   * This Boolean is used to specify the deletion mechanism for 'all' the Event Grid Domain Topics associated with this Event Grid Domain resource.
   * In this context, deletion of domain topic can be auto-managed (when true) or self-managed (when false). The default value for this property is true.
   * When this property is set to true, Event Grid is responsible of automatically deleting the domain topic when the last event subscription at the scope
   * of the domain topic is deleted. If this property is set to false, then the user needs to manually delete the domain topic when it is no longer needed
   * (e.g., when last event subscription is deleted and the resource needs to be cleaned up). The self-management mode can be used if the user wants full
   * control of when the domain topic needs to be deleted, while auto-managed mode provides the flexibility to perform less operations and manage fewer
   * resources by the user.
   */
  autoDeleteTopicWithLastSubscription?: boolean;
  /** The data residency boundary for the domain. */
  dataResidencyBoundary?: DataResidencyBoundary;
}

/** Result of the List Domains operation. */
export interface DomainsListResult {
  /** A collection of Domains. */
  value?: Domain[];
  /** A link for the next page of domains. */
  nextLink?: string;
}

/** Shared access keys of the Domain. */
export interface DomainSharedAccessKeys {
  /** Shared access key1 for the domain. */
  key1?: string;
  /** Shared access key2 for the domain. */
  key2?: string;
}

/** Domain regenerate share access key request. */
export interface DomainRegenerateKeyRequest {
  /** Key name to regenerate key1 or key2. */
  keyName: string;
}

/** Result of the List Domain Topics operation. */
export interface DomainTopicsListResult {
  /** A collection of Domain Topics. */
  value?: DomainTopic[];
  /** A link for the next page of domain topics. */
  nextLink?: string;
}

/** Result of the Get delivery attributes operation. */
export interface DeliveryAttributeListResult {
  /** A collection of DeliveryAttributeMapping */
  value?: DeliveryAttributeMappingUnion[];
}

/** Delivery attribute mapping details. */
export interface DeliveryAttributeMapping {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "Static" | "Dynamic";
  /** Name of the delivery attribute or header. */
  name?: string;
}

/** Information about the destination for an event subscription. */
export interface EventSubscriptionDestination {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  endpointType:
    | "WebHook"
    | "EventHub"
    | "StorageQueue"
    | "HybridConnection"
    | "ServiceBusQueue"
    | "ServiceBusTopic"
    | "AzureFunction";
}

/** Information about the delivery for an event subscription with resource identity. */
export interface DeliveryWithResourceIdentity {
  /** The identity to use when delivering events. */
  identity?: EventSubscriptionIdentity;
  /**
   * Information about the destination where events have to be delivered for the event subscription.
   * Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
   */
  destination?: EventSubscriptionDestinationUnion;
}

/** The identity information with the event subscription. */
export interface EventSubscriptionIdentity {
  /** The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity. */
  type?: EventSubscriptionIdentityType;
  /** The user identity associated with the resource. */
  userAssignedIdentity?: string;
}

/** Filter for the Event Subscription. */
export interface EventSubscriptionFilter {
  /**
   * An optional string to filter events for an event subscription based on a resource path prefix.
   * The format of this depends on the publisher of the events.
   * Wildcard characters are not supported in this path.
   */
  subjectBeginsWith?: string;
  /**
   * An optional string to filter events for an event subscription based on a resource path suffix.
   * Wildcard characters are not supported in this path.
   */
  subjectEndsWith?: string;
  /** A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null. */
  includedEventTypes?: string[];
  /**
   * Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
   * should be compared in a case sensitive manner.
   */
  isSubjectCaseSensitive?: boolean;
  /** Allows advanced filters to be evaluated against an array of values instead of expecting a singular value. */
  enableAdvancedFilteringOnArrays?: boolean;
  /** An array of advanced filters that are used for filtering event subscriptions. */
  advancedFilters?: AdvancedFilterUnion[];
}

/** This is the base type that represents an advanced filter. To configure an advanced filter, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class such as BoolEqualsAdvancedFilter, NumberInAdvancedFilter, StringEqualsAdvancedFilter etc. depending on the type of the key based on which you want to filter. */
export interface AdvancedFilter {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  operatorType:
    | "NumberIn"
    | "NumberNotIn"
    | "NumberLessThan"
    | "NumberGreaterThan"
    | "NumberLessThanOrEquals"
    | "NumberGreaterThanOrEquals"
    | "BoolEquals"
    | "StringIn"
    | "StringNotIn"
    | "StringBeginsWith"
    | "StringEndsWith"
    | "StringContains"
    | "NumberInRange"
    | "NumberNotInRange"
    | "StringNotBeginsWith"
    | "StringNotEndsWith"
    | "StringNotContains"
    | "IsNullOrUndefined"
    | "IsNotNull";
  /** The field/property in the event based on which you want to filter. */
  key?: string;
}

/** Information about the retry policy for an event subscription. */
export interface RetryPolicy {
  /** Maximum number of delivery retry attempts for events. */
  maxDeliveryAttempts?: number;
  /** Time To Live (in minutes) for events. */
  eventTimeToLiveInMinutes?: number;
}

/** Information about the dead letter destination for an event subscription. To configure a deadletter destination, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class. Currently, StorageBlobDeadLetterDestination is the only class that derives from this class. */
export interface DeadLetterDestination {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  endpointType: "StorageBlob";
}

/** Information about the deadletter destination with resource identity. */
export interface DeadLetterWithResourceIdentity {
  /** The identity to use when dead-lettering events. */
  identity?: EventSubscriptionIdentity;
  /**
   * Information about the destination where events have to be delivered for the event subscription.
   * Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
   */
  deadLetterDestination?: DeadLetterDestinationUnion;
}

/** Properties of the Event Subscription update. */
export interface EventSubscriptionUpdateParameters {
  /**
   * Information about the destination where events have to be delivered for the event subscription.
   * Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
   */
  destination?: EventSubscriptionDestinationUnion;
  /**
   * Information about the destination where events have to be delivered for the event subscription.
   * Uses the managed identity setup on the parent resource (topic / domain) to acquire the authentication tokens being used during delivery / dead-lettering.
   */
  deliveryWithResourceIdentity?: DeliveryWithResourceIdentity;
  /** Information about the filter for the event subscription. */
  filter?: EventSubscriptionFilter;
  /** List of user defined labels. */
  labels?: string[];
  /** Information about the expiration time for the event subscription. */
  expirationTimeUtc?: Date;
  /** The event delivery schema for the event subscription. */
  eventDeliverySchema?: EventDeliverySchema;
  /** The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events. */
  retryPolicy?: RetryPolicy;
  /**
   * The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
   * Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
   */
  deadLetterDestination?: DeadLetterDestinationUnion;
  /**
   * The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
   * Uses the managed identity setup on the parent resource (topic / domain) to acquire the authentication tokens being used during delivery / dead-lettering.
   */
  deadLetterWithResourceIdentity?: DeadLetterWithResourceIdentity;
}

/** Result of the List EventSubscriptions operation */
export interface EventSubscriptionsListResult {
  /** A collection of EventSubscriptions */
  value?: EventSubscription[];
  /** A link for the next page of event subscriptions */
  nextLink?: string;
}

/** Result of the List Operations operation */
export interface OperationsListResult {
  /** A collection of operations */
  value?: Operation[];
}

/** Represents an operation returned by the GetOperations request. */
export interface Operation {
  /** Name of the operation. */
  name?: string;
  /** Display name of the operation. */
  display?: OperationInfo;
  /** Origin of the operation. */
  origin?: string;
  /** This Boolean is used to determine if the operation is a data plane action or not. */
  isDataAction?: boolean;
  /** Properties of the operation. */
  properties?: Record<string, unknown>;
}

/** Information about an operation */
export interface OperationInfo {
  /** Name of the provider */
  provider?: string;
  /** Name of the resource type */
  resource?: string;
  /** Name of the operation */
  operation?: string;
  /** Description of the operation */
  description?: string;
}

/** Properties of the Topic update */
export interface TopicUpdateParameters {
  /** Tags of the Topic resource. */
  tags?: { [propertyName: string]: string };
  /** Topic resource identity information. */
  identity?: IdentityInfo;
  /**
   * This determines if traffic is allowed over public network. By default it is enabled.
   * You can further restrict to specific IPs by configuring <seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.TopicUpdateParameterProperties.InboundIpRules" />
   */
  publicNetworkAccess?: PublicNetworkAccess;
  /** This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled. */
  inboundIpRules?: InboundIpRule[];
  /** This boolean is used to enable or disable local auth. Default value is false. When the property is set to true, only AAD token will be used to authenticate if user is allowed to publish to the topic. */
  disableLocalAuth?: boolean;
  /** The data residency boundary for the topic. */
  dataResidencyBoundary?: DataResidencyBoundary;
}

/** Result of the List Topics operation */
export interface TopicsListResult {
  /** A collection of Topics */
  value?: Topic[];
  /** A link for the next page of topics */
  nextLink?: string;
}

/** Shared access keys of the Topic */
export interface TopicSharedAccessKeys {
  /** Shared access key1 for the topic. */
  key1?: string;
  /** Shared access key2 for the topic. */
  key2?: string;
}

/** Topic regenerate share access key request */
export interface TopicRegenerateKeyRequest {
  /** Key name to regenerate key1 or key2 */
  keyName: string;
}

/** The partner authorization details. */
export interface PartnerAuthorization {
  /**
   * Time used to validate the authorization expiration time for each authorized partner. If DefaultMaximumExpirationTimeInDays is
   * not specified, the default is 7 days. Otherwise, allowed values are between 1 and 365 days.
   */
  defaultMaximumExpirationTimeInDays?: number;
  /** The list of authorized partners. */
  authorizedPartnersList?: Partner[];
}

/** Information about the partner. */
export interface Partner {
  /** The immutableId of the corresponding partner registration. */
  partnerRegistrationImmutableId?: string;
  /** The partner name. */
  partnerName?: string;
  /**
   * Expiration time of the partner authorization. If this timer expires, any request from this partner to create, update or delete resources in subscriber's
   * context will fail. If specified, the allowed values are between 1 to the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration.
   * If not specified, the default value will be the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration or 7 if this value is not specified.
   */
  authorizationExpirationTimeInUtc?: Date;
}

/** Properties of the partner configuration update. */
export interface PartnerConfigurationUpdateParameters {
  /** Tags of the partner configuration resource. */
  tags?: { [propertyName: string]: string };
  /** The default time used to validate the maximum expiration time for each authorized partners in days. Allowed values ar between 1 and 365 days. */
  defaultMaximumExpirationTimeInDays?: number;
}

/** Result of the List partner configurations operation */
export interface PartnerConfigurationsListResult {
  /** A collection of partner configurations. */
  value?: PartnerConfiguration[];
  /** A link for the next page of partner configurations. */
  nextLink?: string;
}

/** Properties of the Partner Namespace update. */
export interface PartnerNamespaceUpdateParameters {
  /** Tags of the Partner Namespace. */
  tags?: { [propertyName: string]: string };
  /**
   * This determines if traffic is allowed over public network. By default it is enabled.
   * You can further restrict to specific IPs by configuring <seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.PartnerNamespaceUpdateParameterProperties.InboundIpRules" />
   */
  publicNetworkAccess?: PublicNetworkAccess;
  /** This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled. */
  inboundIpRules?: InboundIpRule[];
  /** This boolean is used to enable or disable local auth. Default value is false. When the property is set to true, only AAD token will be used to authenticate if user is allowed to publish to the partner namespace. */
  disableLocalAuth?: boolean;
}

/** Result of the List Partner Namespaces operation */
export interface PartnerNamespacesListResult {
  /** A collection of partner namespaces. */
  value?: PartnerNamespace[];
  /** A link for the next page of partner namespaces. */
  nextLink?: string;
}

/** Shared access keys of the partner namespace. */
export interface PartnerNamespaceSharedAccessKeys {
  /** Shared access key1 for the partner namespace. */
  key1?: string;
  /** Shared access key2 for the partner namespace. */
  key2?: string;
}

/** PartnerNamespace regenerate shared access key request. */
export interface PartnerNamespaceRegenerateKeyRequest {
  /** Key name to regenerate (key1 or key2). */
  keyName: string;
}

/** Properties of the Partner Registration update. */
export interface PartnerRegistrationUpdateParameters {
  /** Tags of the partner registration resource. */
  tags?: { [propertyName: string]: string };
}

/** Result of the List Partner Registrations operation. */
export interface PartnerRegistrationsListResult {
  /** A collection of partner registrations. */
  value?: PartnerRegistration[];
  /** A link for the next page of partner registrations. */
  nextLink?: string;
}

/** Properties of the Partner Topic update. */
export interface PartnerTopicUpdateParameters {
  /** Tags of the Partner Topic resource. */
  tags?: { [propertyName: string]: string };
  /** Identity information for the Partner Topic resource. */
  identity?: IdentityInfo;
}

/** Result of the List Partner Topics operation. */
export interface PartnerTopicsListResult {
  /** A collection of partner topics. */
  value?: PartnerTopic[];
  /** A link for the next page of partner topics. */
  nextLink?: string;
}

/** Result of the list of all private endpoint connections operation. */
export interface PrivateEndpointConnectionListResult {
  /** A collection of private endpoint connection resources. */
  value?: PrivateEndpointConnection[];
  /** A link for the next page of private endpoint connection resources. */
  nextLink?: string;
}

/** Information of the private link resource. */
export interface PrivateLinkResource {
  /** Fully qualified identifier of the resource. */
  id?: string;
  /** Name of the resource. */
  name?: string;
  /** Type of the resource. */
  type?: string;
  groupId?: string;
  displayName?: string;
  requiredMembers?: string[];
  requiredZoneNames?: string[];
}

/** Result of the List private link resources operation. */
export interface PrivateLinkResourcesListResult {
  /** A collection of private link resources */
  value?: PrivateLinkResource[];
  /** A link for the next page of private link resources. */
  nextLink?: string;
}

/** Properties of the System Topic update. */
export interface SystemTopicUpdateParameters {
  /** Tags of the system topic. */
  tags?: { [propertyName: string]: string };
  /** Resource identity information. */
  identity?: IdentityInfo;
}

/** Result of the List System topics operation. */
export interface SystemTopicsListResult {
  /** A collection of system Topics. */
  value?: SystemTopic[];
  /** A link for the next page of topics. */
  nextLink?: string;
}

/** Result of the List Event Types operation */
export interface EventTypesListResult {
  /** A collection of event types */
  value?: EventType[];
}

/** Result of the List Topic Types operation */
export interface TopicTypesListResult {
  /** A collection of topic types */
  value?: TopicTypeInfo[];
}

/** Information about the partner. */
export interface PartnerDetails {
  /** This is short description about the partner. The length of this description should not exceed 256 characters. */
  description?: string;
  /** Long description for the partner's scenarios and integration.Length of this description should not exceed 2048 characters. */
  longDescription?: string;
  /**
   * URI of the partner website that can be used by Azure customers to setup Event Grid
   * integration on an event source.
   */
  setupUri?: string;
}

/** Result of the List verified partners operation */
export interface VerifiedPartnersListResult {
  /** A collection of verified partners. */
  value?: VerifiedPartner[];
  /** A link for the next page of verified partners if any. */
  nextLink?: string;
}

/** This is used to express the source of an input schema mapping for a single target field in the Event Grid Event schema. This is currently used in the mappings for the 'id', 'topic' and 'eventtime' properties. This represents a field in the input event schema. */
export interface JsonField {
  /** Name of a field in the input event schema that's to be used as the source of a mapping. */
  sourceField?: string;
}

/**
 * This is used to express the source of an input schema mapping for a single target field
 * in the Event Grid Event schema. This is currently used in the mappings for the 'subject',
 * 'eventtype' and 'dataversion' properties. This represents a field in the input event schema
 * along with a default value to be used, and at least one of these two properties should be provided.
 */
export interface JsonFieldWithDefault {
  /** Name of a field in the input event schema that's to be used as the source of a mapping. */
  sourceField?: string;
  /** The default value to be used for mapping when a SourceField is not provided or if there's no property with the specified name in the published JSON event payload. */
  defaultValue?: string;
}

/** Channel info. */
export type Channel = Resource & {
  /**
   * The system metadata relating to Channel resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** The type of the event channel which represents the direction flow of events. */
  channelType?: ChannelType;
  /** This property should be populated when channelType is PartnerTopic and represents information about the partner topic resource corresponding to the channel. */
  partnerTopicInfo?: PartnerTopicInfo;
  /** Context or helpful message that can be used during the approval process by the subscriber. */
  messageForActivation?: string;
  /** Provisioning state of the channel. */
  provisioningState?: ChannelProvisioningState;
  /** The readiness state of the corresponding partner topic. */
  readinessState?: ReadinessState;
  /**
   * Expiration time of the channel. If this timer expires while the corresponding partner topic is never activated,
   * the channel and corresponding partner topic are deleted.
   */
  expirationTimeIfNotActivatedUtc?: Date;
};

export type PrivateEndpointConnection = Resource & {
  /** The Private Endpoint resource for this Connection. */
  privateEndpoint?: PrivateEndpoint;
  /** GroupIds from the private link service resource. */
  groupIds?: string[];
  /** Details about the state of the connection. */
  privateLinkServiceConnectionState?: ConnectionState;
  /** Provisioning state of the Private Endpoint Connection. */
  provisioningState?: ResourceProvisioningState;
};

/** Definition of a Tracked Resource. */
export type TrackedResource = Resource & {
  /** Location of the resource. */
  location: string;
  /** Tags of the resource. */
  tags?: { [propertyName: string]: string };
};

/** Domain Topic. */
export type DomainTopic = Resource & {
  /**
   * The system metadata relating to Domain Topic resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * Provisioning state of the domain topic.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: DomainTopicProvisioningState;
};

/** Event Subscription */
export type EventSubscription = Resource & {
  /**
   * The system metadata relating to Event Subscription resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * Name of the topic of the event subscription.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly topic?: string;
  /**
   * Provisioning state of the event subscription.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: EventSubscriptionProvisioningState;
  /**
   * Information about the destination where events have to be delivered for the event subscription.
   * Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
   */
  destination?: EventSubscriptionDestinationUnion;
  /**
   * Information about the destination where events have to be delivered for the event subscription.
   * Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
   */
  deliveryWithResourceIdentity?: DeliveryWithResourceIdentity;
  /** Information about the filter for the event subscription. */
  filter?: EventSubscriptionFilter;
  /** List of user defined labels. */
  labels?: string[];
  /** Expiration time of the event subscription. */
  expirationTimeUtc?: Date;
  /** The event delivery schema for the event subscription. */
  eventDeliverySchema?: EventDeliverySchema;
  /** The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events. */
  retryPolicy?: RetryPolicy;
  /**
   * The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
   * Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
   */
  deadLetterDestination?: DeadLetterDestinationUnion;
  /**
   * The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
   * Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
   */
  deadLetterWithResourceIdentity?: DeadLetterWithResourceIdentity;
};

/** Partner configuration information */
export type PartnerConfiguration = Resource & {
  /**
   * The system metadata relating to partner configuration resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Location of the resource. */
  location?: string;
  /** Tags of the resource. */
  tags?: { [propertyName: string]: string };
  /** The details of authorized partners. */
  partnerAuthorization?: PartnerAuthorization;
  /** Provisioning state of the partner configuration. */
  provisioningState?: PartnerConfigurationProvisioningState;
};

/** Event Type for a subject under a topic */
export type EventType = Resource & {
  /** Display name of the event type. */
  displayName?: string;
  /** Description of the event type. */
  description?: string;
  /** Url of the schema for this event type. */
  schemaUrl?: string;
  /** IsInDefaultSet flag of the event type. */
  isInDefaultSet?: boolean;
};

/** Event grid Extension Topic. This is used for getting Event Grid related metrics for Azure resources. */
export type ExtensionTopic = Resource & {
  /**
   * The system metadata relating to Extension Topic resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Description of the extension topic. */
  description?: string;
  /** System topic resource id which is mapped to the source. */
  systemTopic?: string;
};

/** Properties of a topic type info. */
export type TopicTypeInfo = Resource & {
  /** Namespace of the provider of the topic type. */
  provider?: string;
  /** Display Name for the topic type. */
  displayName?: string;
  /** Description of the topic type. */
  description?: string;
  /** Region type of the resource. */
  resourceRegionType?: ResourceRegionType;
  /** Provisioning state of the topic type */
  provisioningState?: TopicTypeProvisioningState;
  /** List of locations supported by this topic type. */
  supportedLocations?: string[];
  /** Source resource format. */
  sourceResourceFormat?: string;
  /** Supported source scopes. */
  supportedScopesForSource?: TopicTypeSourceScope[];
};

/** Verified partner information */
export type VerifiedPartner = Resource & {
  /**
   * The system metadata relating to Verified Partner resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** ImmutableId of the corresponding partner registration. */
  partnerRegistrationImmutableId?: string;
  /** Official name of the Partner. */
  organizationName?: string;
  /** Display name of the verified partner. */
  partnerDisplayName?: string;
  /** Details of the partner topic scenario. */
  partnerTopicDetails?: PartnerDetails;
  /** Provisioning state of the verified partner. */
  provisioningState?: VerifiedPartnerProvisioningState;
};

/** This enables publishing to Event Grid using a custom input schema. This can be used to map properties from a custom input JSON schema to the Event Grid event schema. */
export type JsonInputSchemaMapping = InputSchemaMapping & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  inputSchemaMappingType: "Json";
  /** The mapping information for the Id property of the Event Grid Event. */
  id?: JsonField;
  /** The mapping information for the Topic property of the Event Grid Event. */
  topic?: JsonField;
  /** The mapping information for the EventTime property of the Event Grid Event. */
  eventTime?: JsonField;
  /** The mapping information for the EventType property of the Event Grid Event. */
  eventType?: JsonFieldWithDefault;
  /** The mapping information for the Subject property of the Event Grid Event. */
  subject?: JsonFieldWithDefault;
  /** The mapping information for the DataVersion property of the Event Grid Event. */
  dataVersion?: JsonFieldWithDefault;
};

/** Static delivery attribute mapping details. */
export type StaticDeliveryAttributeMapping = DeliveryAttributeMapping & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "Static";
  /** Value of the delivery attribute. */
  value?: string;
  /** Boolean flag to tell if the attribute contains sensitive information . */
  isSecret?: boolean;
};

/** Dynamic delivery attribute mapping details. */
export type DynamicDeliveryAttributeMapping = DeliveryAttributeMapping & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "Dynamic";
  /** JSON path in the event which contains attribute value. */
  sourceField?: string;
};

/** Information about the webhook destination for an event subscription. */
export type WebHookEventSubscriptionDestination = EventSubscriptionDestination & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  endpointType: "WebHook";
  /** The URL that represents the endpoint of the destination of an event subscription. */
  endpointUrl?: string;
  /**
   * The base URL that represents the endpoint of the destination of an event subscription.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endpointBaseUrl?: string;
  /** Maximum number of events per batch. */
  maxEventsPerBatch?: number;
  /** Preferred batch size in Kilobytes. */
  preferredBatchSizeInKilobytes?: number;
  /** The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests. */
  azureActiveDirectoryTenantId?: string;
  /** The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests. */
  azureActiveDirectoryApplicationIdOrUri?: string;
  /** Delivery attribute details. */
  deliveryAttributeMappings?: DeliveryAttributeMappingUnion[];
};

/** Information about the event hub destination for an event subscription. */
export type EventHubEventSubscriptionDestination = EventSubscriptionDestination & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  endpointType: "EventHub";
  /** The Azure Resource Id that represents the endpoint of an Event Hub destination of an event subscription. */
  resourceId?: string;
  /** Delivery attribute details. */
  deliveryAttributeMappings?: DeliveryAttributeMappingUnion[];
};

/** Information about the storage queue destination for an event subscription. */
export type StorageQueueEventSubscriptionDestination = EventSubscriptionDestination & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  endpointType: "StorageQueue";
  /** The Azure Resource ID of the storage account that contains the queue that is the destination of an event subscription. */
  resourceId?: string;
  /** The name of the Storage queue under a storage account that is the destination of an event subscription. */
  queueName?: string;
  /** Storage queue message time to live in seconds. */
  queueMessageTimeToLiveInSeconds?: number;
};

/** Information about the HybridConnection destination for an event subscription. */
export type HybridConnectionEventSubscriptionDestination = EventSubscriptionDestination & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  endpointType: "HybridConnection";
  /** The Azure Resource ID of an hybrid connection that is the destination of an event subscription. */
  resourceId?: string;
  /** Delivery attribute details. */
  deliveryAttributeMappings?: DeliveryAttributeMappingUnion[];
};

/** Information about the service bus destination for an event subscription. */
export type ServiceBusQueueEventSubscriptionDestination = EventSubscriptionDestination & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  endpointType: "ServiceBusQueue";
  /** The Azure Resource Id that represents the endpoint of the Service Bus destination of an event subscription. */
  resourceId?: string;
  /** Delivery attribute details. */
  deliveryAttributeMappings?: DeliveryAttributeMappingUnion[];
};

/** Information about the service bus topic destination for an event subscription. */
export type ServiceBusTopicEventSubscriptionDestination = EventSubscriptionDestination & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  endpointType: "ServiceBusTopic";
  /** The Azure Resource Id that represents the endpoint of the Service Bus Topic destination of an event subscription. */
  resourceId?: string;
  /** Delivery attribute details. */
  deliveryAttributeMappings?: DeliveryAttributeMappingUnion[];
};

/** Information about the azure function destination for an event subscription. */
export type AzureFunctionEventSubscriptionDestination = EventSubscriptionDestination & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  endpointType: "AzureFunction";
  /** The Azure Resource Id that represents the endpoint of the Azure Function destination of an event subscription. */
  resourceId?: string;
  /** Maximum number of events per batch. */
  maxEventsPerBatch?: number;
  /** Preferred batch size in Kilobytes. */
  preferredBatchSizeInKilobytes?: number;
  /** Delivery attribute details. */
  deliveryAttributeMappings?: DeliveryAttributeMappingUnion[];
};

/** NumberIn Advanced Filter. */
export type NumberInAdvancedFilter = AdvancedFilter & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  operatorType: "NumberIn";
  /** The set of filter values. */
  values?: number[];
};

/** NumberNotIn Advanced Filter. */
export type NumberNotInAdvancedFilter = AdvancedFilter & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  operatorType: "NumberNotIn";
  /** The set of filter values. */
  values?: number[];
};

/** NumberLessThan Advanced Filter. */
export type NumberLessThanAdvancedFilter = AdvancedFilter & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  operatorType: "NumberLessThan";
  /** The filter value. */
  value?: number;
};

/** NumberGreaterThan Advanced Filter. */
export type NumberGreaterThanAdvancedFilter = AdvancedFilter & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  operatorType: "NumberGreaterThan";
  /** The filter value. */
  value?: number;
};

/** NumberLessThanOrEquals Advanced Filter. */
export type NumberLessThanOrEqualsAdvancedFilter = AdvancedFilter & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  operatorType: "NumberLessThanOrEquals";
  /** The filter value. */
  value?: number;
};

/** NumberGreaterThanOrEquals Advanced Filter. */
export type NumberGreaterThanOrEqualsAdvancedFilter = AdvancedFilter & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  operatorType: "NumberGreaterThanOrEquals";
  /** The filter value. */
  value?: number;
};

/** BoolEquals Advanced Filter. */
export type BoolEqualsAdvancedFilter = AdvancedFilter & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  operatorType: "BoolEquals";
  /** The boolean filter value. */
  value?: boolean;
};

/** StringIn Advanced Filter. */
export type StringInAdvancedFilter = AdvancedFilter & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  operatorType: "StringIn";
  /** The set of filter values. */
  values?: string[];
};

/** StringNotIn Advanced Filter. */
export type StringNotInAdvancedFilter = AdvancedFilter & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  operatorType: "StringNotIn";
  /** The set of filter values. */
  values?: string[];
};

/** StringBeginsWith Advanced Filter. */
export type StringBeginsWithAdvancedFilter = AdvancedFilter & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  operatorType: "StringBeginsWith";
  /** The set of filter values. */
  values?: string[];
};

/** StringEndsWith Advanced Filter. */
export type StringEndsWithAdvancedFilter = AdvancedFilter & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  operatorType: "StringEndsWith";
  /** The set of filter values. */
  values?: string[];
};

/** StringContains Advanced Filter. */
export type StringContainsAdvancedFilter = AdvancedFilter & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  operatorType: "StringContains";
  /** The set of filter values. */
  values?: string[];
};

/** NumberInRange Advanced Filter. */
export type NumberInRangeAdvancedFilter = AdvancedFilter & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  operatorType: "NumberInRange";
  /** The set of filter values. */
  values?: number[][];
};

/** NumberNotInRange Advanced Filter. */
export type NumberNotInRangeAdvancedFilter = AdvancedFilter & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  operatorType: "NumberNotInRange";
  /** The set of filter values. */
  values?: number[][];
};

/** StringNotBeginsWith Advanced Filter. */
export type StringNotBeginsWithAdvancedFilter = AdvancedFilter & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  operatorType: "StringNotBeginsWith";
  /** The set of filter values. */
  values?: string[];
};

/** StringNotEndsWith Advanced Filter. */
export type StringNotEndsWithAdvancedFilter = AdvancedFilter & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  operatorType: "StringNotEndsWith";
  /** The set of filter values. */
  values?: string[];
};

/** StringNotContains Advanced Filter. */
export type StringNotContainsAdvancedFilter = AdvancedFilter & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  operatorType: "StringNotContains";
  /** The set of filter values. */
  values?: string[];
};

/** IsNullOrUndefined Advanced Filter. */
export type IsNullOrUndefinedAdvancedFilter = AdvancedFilter & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  operatorType: "IsNullOrUndefined";
};

/** IsNotNull Advanced Filter. */
export type IsNotNullAdvancedFilter = AdvancedFilter & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  operatorType: "IsNotNull";
};

/** Information about the storage blob based dead letter destination. */
export type StorageBlobDeadLetterDestination = DeadLetterDestination & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  endpointType: "StorageBlob";
  /** The Azure Resource ID of the storage account that is the destination of the deadletter events */
  resourceId?: string;
  /** The name of the Storage blob container that is the destination of the deadletter events */
  blobContainerName?: string;
};

/** EventGrid Domain. */
export type Domain = TrackedResource & {
  /**
   * The system metadata relating to the Event Grid Domain resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Identity information for the Event Grid Domain resource. */
  identity?: IdentityInfo;
  /**
   * List of private endpoint connections.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateEndpointConnections?: PrivateEndpointConnection[];
  /**
   * Provisioning state of the Event Grid Domain Resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: DomainProvisioningState;
  /**
   * Endpoint for the Event Grid Domain Resource which is used for publishing the events.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endpoint?: string;
  /** This determines the format that Event Grid should expect for incoming events published to the Event Grid Domain Resource. */
  inputSchema?: InputSchema;
  /** Information about the InputSchemaMapping which specified the info about mapping event payload. */
  inputSchemaMapping?: InputSchemaMappingUnion;
  /**
   * Metric resource id for the Event Grid Domain Resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly metricResourceId?: string;
  /**
   * This determines if traffic is allowed over public network. By default it is enabled.
   * You can further restrict to specific IPs by configuring <seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.DomainProperties.InboundIpRules" />
   */
  publicNetworkAccess?: PublicNetworkAccess;
  /** This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled. */
  inboundIpRules?: InboundIpRule[];
  /** This boolean is used to enable or disable local auth. Default value is false. When the property is set to true, only AAD token will be used to authenticate if user is allowed to publish to the domain. */
  disableLocalAuth?: boolean;
  /**
   * This Boolean is used to specify the creation mechanism for 'all' the Event Grid Domain Topics associated with this Event Grid Domain resource.
   * In this context, creation of domain topic can be auto-managed (when true) or self-managed (when false). The default value for this property is true.
   * When this property is null or set to true, Event Grid is responsible of automatically creating the domain topic when the first event subscription is
   * created at the scope of the domain topic. If this property is set to false, then creating the first event subscription will require creating a domain topic
   * by the user. The self-management mode can be used if the user wants full control of when the domain topic is created, while auto-managed mode provides the
   * flexibility to perform less operations and manage fewer resources by the user. Also, note that in auto-managed creation mode, user is allowed to create the
   * domain topic on demand if needed.
   */
  autoCreateTopicWithFirstSubscription?: boolean;
  /**
   * This Boolean is used to specify the deletion mechanism for 'all' the Event Grid Domain Topics associated with this Event Grid Domain resource.
   * In this context, deletion of domain topic can be auto-managed (when true) or self-managed (when false). The default value for this property is true.
   * When this property is set to true, Event Grid is responsible of automatically deleting the domain topic when the last event subscription at the scope
   * of the domain topic is deleted. If this property is set to false, then the user needs to manually delete the domain topic when it is no longer needed
   * (e.g., when last event subscription is deleted and the resource needs to be cleaned up). The self-management mode can be used if the user wants full
   * control of when the domain topic needs to be deleted, while auto-managed mode provides the flexibility to perform less operations and manage fewer
   * resources by the user.
   */
  autoDeleteTopicWithLastSubscription?: boolean;
  /** Data Residency Boundary of the resource. */
  dataResidencyBoundary?: DataResidencyBoundary;
};

/** EventGrid Topic */
export type Topic = TrackedResource & {
  /** Identity information for the resource. */
  identity?: IdentityInfo;
  /**
   * The system metadata relating to Topic resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly privateEndpointConnections?: PrivateEndpointConnection[];
  /**
   * Provisioning state of the topic.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: TopicProvisioningState;
  /**
   * Endpoint for the topic.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endpoint?: string;
  /** This determines the format that Event Grid should expect for incoming events published to the topic. */
  inputSchema?: InputSchema;
  /** This enables publishing using custom event schemas. An InputSchemaMapping can be specified to map various properties of a source schema to various required properties of the EventGridEvent schema. */
  inputSchemaMapping?: InputSchemaMappingUnion;
  /**
   * Metric resource id for the topic.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly metricResourceId?: string;
  /**
   * This determines if traffic is allowed over public network. By default it is enabled.
   * You can further restrict to specific IPs by configuring <seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.TopicProperties.InboundIpRules" />
   */
  publicNetworkAccess?: PublicNetworkAccess;
  /** This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled. */
  inboundIpRules?: InboundIpRule[];
  /** This boolean is used to enable or disable local auth. Default value is false. When the property is set to true, only AAD token will be used to authenticate if user is allowed to publish to the topic. */
  disableLocalAuth?: boolean;
  /** Data Residency Boundary of the resource. */
  dataResidencyBoundary?: DataResidencyBoundary;
};

/** EventGrid Partner Namespace. */
export type PartnerNamespace = TrackedResource & {
  /**
   * The system metadata relating to Partner Namespace resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly privateEndpointConnections?: PrivateEndpointConnection[];
  /**
   * Provisioning state of the partner namespace.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: PartnerNamespaceProvisioningState;
  /**
   * The fully qualified ARM Id of the partner registration that should be associated with this partner namespace. This takes the following format:
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations/{partnerRegistrationName}.
   */
  partnerRegistrationFullyQualifiedId?: string;
  /**
   * Endpoint for the partner namespace.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endpoint?: string;
  /**
   * This determines if traffic is allowed over public network. By default it is enabled.
   * You can further restrict to specific IPs by configuring <seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.PartnerNamespaceProperties.InboundIpRules" />
   */
  publicNetworkAccess?: PublicNetworkAccess;
  /** This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled. */
  inboundIpRules?: InboundIpRule[];
  /** This boolean is used to enable or disable local auth. Default value is false. When the property is set to true, only AAD token will be used to authenticate if user is allowed to publish to the partner namespace. */
  disableLocalAuth?: boolean;
  /**
   * This determines if events published to this partner namespace should use the source attribute in the event payload
   * or use the channel name in the header when matching to the partner topic. If none is specified, source attribute routing will be used to match the partner topic.
   */
  partnerTopicRoutingMode?: PartnerTopicRoutingMode;
};

/** Information about a partner registration. */
export type PartnerRegistration = TrackedResource & {
  /**
   * The system metadata relating to Partner Registration resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * Provisioning state of the partner registration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: PartnerRegistrationProvisioningState;
  /**
   * The immutableId of the corresponding partner registration.
   * Note: This property is marked for deprecation and is not supported in any future GA API version
   */
  partnerRegistrationImmutableId?: string;
};

/** Event Grid Partner Topic. */
export type PartnerTopic = TrackedResource & {
  /**
   * The system metadata relating to Partner Topic resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Identity information for the Partner Topic resource. */
  identity?: IdentityInfo;
  /** The immutableId of the corresponding partner registration. */
  partnerRegistrationImmutableId?: string;
  /** Source associated with this partner topic. This represents a unique partner resource. */
  source?: string;
  /** Event Type information from the corresponding event channel. */
  eventTypeInfo?: EventTypeInfo;
  /**
   * Expiration time of the partner topic. If this timer expires while the partner topic is still never activated,
   * the partner topic and corresponding event channel are deleted.
   */
  expirationTimeIfNotActivatedUtc?: Date;
  /**
   * Provisioning state of the partner topic.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: PartnerTopicProvisioningState;
  /** Activation state of the partner topic. */
  activationState?: PartnerTopicActivationState;
  /**
   * Friendly description about the topic. This can be set by the publisher/partner to show custom description for the customer partner topic.
   * This will be helpful to remove any ambiguity of the origin of creation of the partner topic for the customer.
   */
  partnerTopicFriendlyDescription?: string;
  /** Context or helpful message that can be used during the approval process by the subscriber. */
  messageForActivation?: string;
};

/** EventGrid System Topic. */
export type SystemTopic = TrackedResource & {
  /** Identity information for the resource. */
  identity?: IdentityInfo;
  /**
   * The system metadata relating to System Topic resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * Provisioning state of the system topic.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ResourceProvisioningState;
  /** Source for the system topic. */
  source?: string;
  /** TopicType for the system topic. */
  topicType?: string;
  /**
   * Metric resource id for the system topic.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly metricResourceId?: string;
};

/** Known values of {@link ChannelType} that the service accepts. */
export enum KnownChannelType {
  PartnerTopic = "PartnerTopic"
}

/**
 * Defines values for ChannelType. \
 * {@link KnownChannelType} can be used interchangeably with ChannelType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PartnerTopic**
 */
export type ChannelType = string;

/** Known values of {@link EventDefinitionKind} that the service accepts. */
export enum KnownEventDefinitionKind {
  Inline = "Inline"
}

/**
 * Defines values for EventDefinitionKind. \
 * {@link KnownEventDefinitionKind} can be used interchangeably with EventDefinitionKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Inline**
 */
export type EventDefinitionKind = string;

/** Known values of {@link ChannelProvisioningState} that the service accepts. */
export enum KnownChannelProvisioningState {
  Creating = "Creating",
  Updating = "Updating",
  Deleting = "Deleting",
  Succeeded = "Succeeded",
  Canceled = "Canceled",
  Failed = "Failed",
  IdleDueToMirroredPartnerTopicDeletion = "IdleDueToMirroredPartnerTopicDeletion"
}

/**
 * Defines values for ChannelProvisioningState. \
 * {@link KnownChannelProvisioningState} can be used interchangeably with ChannelProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed** \
 * **IdleDueToMirroredPartnerTopicDeletion**
 */
export type ChannelProvisioningState = string;

/** Known values of {@link ReadinessState} that the service accepts. */
export enum KnownReadinessState {
  NeverActivated = "NeverActivated",
  Activated = "Activated"
}

/**
 * Defines values for ReadinessState. \
 * {@link KnownReadinessState} can be used interchangeably with ReadinessState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NeverActivated** \
 * **Activated**
 */
export type ReadinessState = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  User = "User",
  Application = "Application",
  ManagedIdentity = "ManagedIdentity",
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link PersistedConnectionStatus} that the service accepts. */
export enum KnownPersistedConnectionStatus {
  Pending = "Pending",
  Approved = "Approved",
  Rejected = "Rejected",
  Disconnected = "Disconnected"
}

/**
 * Defines values for PersistedConnectionStatus. \
 * {@link KnownPersistedConnectionStatus} can be used interchangeably with PersistedConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected** \
 * **Disconnected**
 */
export type PersistedConnectionStatus = string;

/** Known values of {@link ResourceProvisioningState} that the service accepts. */
export enum KnownResourceProvisioningState {
  Creating = "Creating",
  Updating = "Updating",
  Deleting = "Deleting",
  Succeeded = "Succeeded",
  Canceled = "Canceled",
  Failed = "Failed"
}

/**
 * Defines values for ResourceProvisioningState. \
 * {@link KnownResourceProvisioningState} can be used interchangeably with ResourceProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed**
 */
export type ResourceProvisioningState = string;

/** Known values of {@link DomainProvisioningState} that the service accepts. */
export enum KnownDomainProvisioningState {
  Creating = "Creating",
  Updating = "Updating",
  Deleting = "Deleting",
  Succeeded = "Succeeded",
  Canceled = "Canceled",
  Failed = "Failed"
}

/**
 * Defines values for DomainProvisioningState. \
 * {@link KnownDomainProvisioningState} can be used interchangeably with DomainProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed**
 */
export type DomainProvisioningState = string;

/** Known values of {@link InputSchema} that the service accepts. */
export enum KnownInputSchema {
  EventGridSchema = "EventGridSchema",
  CustomEventSchema = "CustomEventSchema",
  CloudEventSchemaV10 = "CloudEventSchemaV1_0"
}

/**
 * Defines values for InputSchema. \
 * {@link KnownInputSchema} can be used interchangeably with InputSchema,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EventGridSchema** \
 * **CustomEventSchema** \
 * **CloudEventSchemaV1_0**
 */
export type InputSchema = string;

/** Known values of {@link InputSchemaMappingType} that the service accepts. */
export enum KnownInputSchemaMappingType {
  Json = "Json"
}

/**
 * Defines values for InputSchemaMappingType. \
 * {@link KnownInputSchemaMappingType} can be used interchangeably with InputSchemaMappingType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Json**
 */
export type InputSchemaMappingType = string;

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export enum KnownPublicNetworkAccess {
  Enabled = "Enabled",
  Disabled = "Disabled"
}

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type PublicNetworkAccess = string;

/** Known values of {@link IpActionType} that the service accepts. */
export enum KnownIpActionType {
  Allow = "Allow"
}

/**
 * Defines values for IpActionType. \
 * {@link KnownIpActionType} can be used interchangeably with IpActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Allow**
 */
export type IpActionType = string;

/** Known values of {@link DataResidencyBoundary} that the service accepts. */
export enum KnownDataResidencyBoundary {
  WithinGeopair = "WithinGeopair",
  WithinRegion = "WithinRegion"
}

/**
 * Defines values for DataResidencyBoundary. \
 * {@link KnownDataResidencyBoundary} can be used interchangeably with DataResidencyBoundary,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **WithinGeopair** \
 * **WithinRegion**
 */
export type DataResidencyBoundary = string;

/** Known values of {@link IdentityType} that the service accepts. */
export enum KnownIdentityType {
  None = "None",
  SystemAssigned = "SystemAssigned",
  UserAssigned = "UserAssigned",
  SystemAssignedUserAssigned = "SystemAssigned, UserAssigned"
}

/**
 * Defines values for IdentityType. \
 * {@link KnownIdentityType} can be used interchangeably with IdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned, UserAssigned**
 */
export type IdentityType = string;

/** Known values of {@link DomainTopicProvisioningState} that the service accepts. */
export enum KnownDomainTopicProvisioningState {
  Creating = "Creating",
  Updating = "Updating",
  Deleting = "Deleting",
  Succeeded = "Succeeded",
  Canceled = "Canceled",
  Failed = "Failed"
}

/**
 * Defines values for DomainTopicProvisioningState. \
 * {@link KnownDomainTopicProvisioningState} can be used interchangeably with DomainTopicProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed**
 */
export type DomainTopicProvisioningState = string;

/** Known values of {@link DeliveryAttributeMappingType} that the service accepts. */
export enum KnownDeliveryAttributeMappingType {
  Static = "Static",
  Dynamic = "Dynamic"
}

/**
 * Defines values for DeliveryAttributeMappingType. \
 * {@link KnownDeliveryAttributeMappingType} can be used interchangeably with DeliveryAttributeMappingType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Static** \
 * **Dynamic**
 */
export type DeliveryAttributeMappingType = string;

/** Known values of {@link EventSubscriptionProvisioningState} that the service accepts. */
export enum KnownEventSubscriptionProvisioningState {
  Creating = "Creating",
  Updating = "Updating",
  Deleting = "Deleting",
  Succeeded = "Succeeded",
  Canceled = "Canceled",
  Failed = "Failed",
  AwaitingManualAction = "AwaitingManualAction"
}

/**
 * Defines values for EventSubscriptionProvisioningState. \
 * {@link KnownEventSubscriptionProvisioningState} can be used interchangeably with EventSubscriptionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed** \
 * **AwaitingManualAction**
 */
export type EventSubscriptionProvisioningState = string;

/** Known values of {@link EndpointType} that the service accepts. */
export enum KnownEndpointType {
  WebHook = "WebHook",
  EventHub = "EventHub",
  StorageQueue = "StorageQueue",
  HybridConnection = "HybridConnection",
  ServiceBusQueue = "ServiceBusQueue",
  ServiceBusTopic = "ServiceBusTopic",
  AzureFunction = "AzureFunction"
}

/**
 * Defines values for EndpointType. \
 * {@link KnownEndpointType} can be used interchangeably with EndpointType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **WebHook** \
 * **EventHub** \
 * **StorageQueue** \
 * **HybridConnection** \
 * **ServiceBusQueue** \
 * **ServiceBusTopic** \
 * **AzureFunction**
 */
export type EndpointType = string;

/** Known values of {@link EventSubscriptionIdentityType} that the service accepts. */
export enum KnownEventSubscriptionIdentityType {
  SystemAssigned = "SystemAssigned",
  UserAssigned = "UserAssigned"
}

/**
 * Defines values for EventSubscriptionIdentityType. \
 * {@link KnownEventSubscriptionIdentityType} can be used interchangeably with EventSubscriptionIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SystemAssigned** \
 * **UserAssigned**
 */
export type EventSubscriptionIdentityType = string;

/** Known values of {@link AdvancedFilterOperatorType} that the service accepts. */
export enum KnownAdvancedFilterOperatorType {
  NumberIn = "NumberIn",
  NumberNotIn = "NumberNotIn",
  NumberLessThan = "NumberLessThan",
  NumberGreaterThan = "NumberGreaterThan",
  NumberLessThanOrEquals = "NumberLessThanOrEquals",
  NumberGreaterThanOrEquals = "NumberGreaterThanOrEquals",
  BoolEquals = "BoolEquals",
  StringIn = "StringIn",
  StringNotIn = "StringNotIn",
  StringBeginsWith = "StringBeginsWith",
  StringEndsWith = "StringEndsWith",
  StringContains = "StringContains",
  NumberInRange = "NumberInRange",
  NumberNotInRange = "NumberNotInRange",
  StringNotBeginsWith = "StringNotBeginsWith",
  StringNotEndsWith = "StringNotEndsWith",
  StringNotContains = "StringNotContains",
  IsNullOrUndefined = "IsNullOrUndefined",
  IsNotNull = "IsNotNull"
}

/**
 * Defines values for AdvancedFilterOperatorType. \
 * {@link KnownAdvancedFilterOperatorType} can be used interchangeably with AdvancedFilterOperatorType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NumberIn** \
 * **NumberNotIn** \
 * **NumberLessThan** \
 * **NumberGreaterThan** \
 * **NumberLessThanOrEquals** \
 * **NumberGreaterThanOrEquals** \
 * **BoolEquals** \
 * **StringIn** \
 * **StringNotIn** \
 * **StringBeginsWith** \
 * **StringEndsWith** \
 * **StringContains** \
 * **NumberInRange** \
 * **NumberNotInRange** \
 * **StringNotBeginsWith** \
 * **StringNotEndsWith** \
 * **StringNotContains** \
 * **IsNullOrUndefined** \
 * **IsNotNull**
 */
export type AdvancedFilterOperatorType = string;

/** Known values of {@link EventDeliverySchema} that the service accepts. */
export enum KnownEventDeliverySchema {
  EventGridSchema = "EventGridSchema",
  CustomInputSchema = "CustomInputSchema",
  CloudEventSchemaV10 = "CloudEventSchemaV1_0"
}

/**
 * Defines values for EventDeliverySchema. \
 * {@link KnownEventDeliverySchema} can be used interchangeably with EventDeliverySchema,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EventGridSchema** \
 * **CustomInputSchema** \
 * **CloudEventSchemaV1_0**
 */
export type EventDeliverySchema = string;

/** Known values of {@link DeadLetterEndPointType} that the service accepts. */
export enum KnownDeadLetterEndPointType {
  StorageBlob = "StorageBlob"
}

/**
 * Defines values for DeadLetterEndPointType. \
 * {@link KnownDeadLetterEndPointType} can be used interchangeably with DeadLetterEndPointType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **StorageBlob**
 */
export type DeadLetterEndPointType = string;

/** Known values of {@link TopicProvisioningState} that the service accepts. */
export enum KnownTopicProvisioningState {
  Creating = "Creating",
  Updating = "Updating",
  Deleting = "Deleting",
  Succeeded = "Succeeded",
  Canceled = "Canceled",
  Failed = "Failed"
}

/**
 * Defines values for TopicProvisioningState. \
 * {@link KnownTopicProvisioningState} can be used interchangeably with TopicProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed**
 */
export type TopicProvisioningState = string;

/** Known values of {@link PartnerConfigurationProvisioningState} that the service accepts. */
export enum KnownPartnerConfigurationProvisioningState {
  Creating = "Creating",
  Updating = "Updating",
  Deleting = "Deleting",
  Succeeded = "Succeeded",
  Canceled = "Canceled",
  Failed = "Failed"
}

/**
 * Defines values for PartnerConfigurationProvisioningState. \
 * {@link KnownPartnerConfigurationProvisioningState} can be used interchangeably with PartnerConfigurationProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed**
 */
export type PartnerConfigurationProvisioningState = string;

/** Known values of {@link PartnerNamespaceProvisioningState} that the service accepts. */
export enum KnownPartnerNamespaceProvisioningState {
  Creating = "Creating",
  Updating = "Updating",
  Deleting = "Deleting",
  Succeeded = "Succeeded",
  Canceled = "Canceled",
  Failed = "Failed"
}

/**
 * Defines values for PartnerNamespaceProvisioningState. \
 * {@link KnownPartnerNamespaceProvisioningState} can be used interchangeably with PartnerNamespaceProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed**
 */
export type PartnerNamespaceProvisioningState = string;

/** Known values of {@link PartnerTopicRoutingMode} that the service accepts. */
export enum KnownPartnerTopicRoutingMode {
  SourceEventAttribute = "SourceEventAttribute",
  ChannelNameHeader = "ChannelNameHeader"
}

/**
 * Defines values for PartnerTopicRoutingMode. \
 * {@link KnownPartnerTopicRoutingMode} can be used interchangeably with PartnerTopicRoutingMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SourceEventAttribute** \
 * **ChannelNameHeader**
 */
export type PartnerTopicRoutingMode = string;

/** Known values of {@link PartnerRegistrationProvisioningState} that the service accepts. */
export enum KnownPartnerRegistrationProvisioningState {
  Creating = "Creating",
  Updating = "Updating",
  Deleting = "Deleting",
  Succeeded = "Succeeded",
  Canceled = "Canceled",
  Failed = "Failed"
}

/**
 * Defines values for PartnerRegistrationProvisioningState. \
 * {@link KnownPartnerRegistrationProvisioningState} can be used interchangeably with PartnerRegistrationProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed**
 */
export type PartnerRegistrationProvisioningState = string;

/** Known values of {@link PartnerTopicProvisioningState} that the service accepts. */
export enum KnownPartnerTopicProvisioningState {
  Creating = "Creating",
  Updating = "Updating",
  Deleting = "Deleting",
  Succeeded = "Succeeded",
  Canceled = "Canceled",
  Failed = "Failed",
  IdleDueToMirroredChannelResourceDeletion = "IdleDueToMirroredChannelResourceDeletion"
}

/**
 * Defines values for PartnerTopicProvisioningState. \
 * {@link KnownPartnerTopicProvisioningState} can be used interchangeably with PartnerTopicProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed** \
 * **IdleDueToMirroredChannelResourceDeletion**
 */
export type PartnerTopicProvisioningState = string;

/** Known values of {@link PartnerTopicActivationState} that the service accepts. */
export enum KnownPartnerTopicActivationState {
  NeverActivated = "NeverActivated",
  Activated = "Activated",
  Deactivated = "Deactivated"
}

/**
 * Defines values for PartnerTopicActivationState. \
 * {@link KnownPartnerTopicActivationState} can be used interchangeably with PartnerTopicActivationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NeverActivated** \
 * **Activated** \
 * **Deactivated**
 */
export type PartnerTopicActivationState = string;

/** Known values of {@link PrivateEndpointConnectionsParentType} that the service accepts. */
export enum KnownPrivateEndpointConnectionsParentType {
  Topics = "topics",
  Domains = "domains",
  PartnerNamespaces = "partnerNamespaces"
}

/**
 * Defines values for PrivateEndpointConnectionsParentType. \
 * {@link KnownPrivateEndpointConnectionsParentType} can be used interchangeably with PrivateEndpointConnectionsParentType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **topics** \
 * **domains** \
 * **partnerNamespaces**
 */
export type PrivateEndpointConnectionsParentType = string;

/** Known values of {@link ResourceRegionType} that the service accepts. */
export enum KnownResourceRegionType {
  RegionalResource = "RegionalResource",
  GlobalResource = "GlobalResource"
}

/**
 * Defines values for ResourceRegionType. \
 * {@link KnownResourceRegionType} can be used interchangeably with ResourceRegionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **RegionalResource** \
 * **GlobalResource**
 */
export type ResourceRegionType = string;

/** Known values of {@link TopicTypeProvisioningState} that the service accepts. */
export enum KnownTopicTypeProvisioningState {
  Creating = "Creating",
  Updating = "Updating",
  Deleting = "Deleting",
  Succeeded = "Succeeded",
  Canceled = "Canceled",
  Failed = "Failed"
}

/**
 * Defines values for TopicTypeProvisioningState. \
 * {@link KnownTopicTypeProvisioningState} can be used interchangeably with TopicTypeProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed**
 */
export type TopicTypeProvisioningState = string;

/** Known values of {@link TopicTypeSourceScope} that the service accepts. */
export enum KnownTopicTypeSourceScope {
  Resource = "Resource",
  ResourceGroup = "ResourceGroup",
  AzureSubscription = "AzureSubscription",
  ManagementGroup = "ManagementGroup"
}

/**
 * Defines values for TopicTypeSourceScope. \
 * {@link KnownTopicTypeSourceScope} can be used interchangeably with TopicTypeSourceScope,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Resource** \
 * **ResourceGroup** \
 * **AzureSubscription** \
 * **ManagementGroup**
 */
export type TopicTypeSourceScope = string;

/** Known values of {@link VerifiedPartnerProvisioningState} that the service accepts. */
export enum KnownVerifiedPartnerProvisioningState {
  Creating = "Creating",
  Updating = "Updating",
  Deleting = "Deleting",
  Succeeded = "Succeeded",
  Canceled = "Canceled",
  Failed = "Failed"
}

/**
 * Defines values for VerifiedPartnerProvisioningState. \
 * {@link KnownVerifiedPartnerProvisioningState} can be used interchangeably with VerifiedPartnerProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed**
 */
export type VerifiedPartnerProvisioningState = string;

/** Optional parameters. */
export interface ChannelsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ChannelsGetResponse = Channel;

/** Optional parameters. */
export interface ChannelsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ChannelsCreateOrUpdateResponse = Channel;

/** Optional parameters. */
export interface ChannelsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ChannelsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ChannelsListByPartnerNamespaceOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listByPartnerNamespace operation. */
export type ChannelsListByPartnerNamespaceResponse = ChannelsListResult;

/** Optional parameters. */
export interface ChannelsGetFullUrlOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getFullUrl operation. */
export type ChannelsGetFullUrlResponse = EventSubscriptionFullUrl;

/** Optional parameters. */
export interface ChannelsListByPartnerNamespaceNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listByPartnerNamespaceNext operation. */
export type ChannelsListByPartnerNamespaceNextResponse = ChannelsListResult;

/** Optional parameters. */
export interface DomainsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DomainsGetResponse = Domain;

/** Optional parameters. */
export interface DomainsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type DomainsCreateOrUpdateResponse = Domain;

/** Optional parameters. */
export interface DomainsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DomainsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DomainsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listBySubscription operation. */
export type DomainsListBySubscriptionResponse = DomainsListResult;

/** Optional parameters. */
export interface DomainsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export type DomainsListByResourceGroupResponse = DomainsListResult;

/** Optional parameters. */
export interface DomainsListSharedAccessKeysOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listSharedAccessKeys operation. */
export type DomainsListSharedAccessKeysResponse = DomainSharedAccessKeys;

/** Optional parameters. */
export interface DomainsRegenerateKeyOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the regenerateKey operation. */
export type DomainsRegenerateKeyResponse = DomainSharedAccessKeys;

/** Optional parameters. */
export interface DomainsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listBySubscriptionNext operation. */
export type DomainsListBySubscriptionNextResponse = DomainsListResult;

/** Optional parameters. */
export interface DomainsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listByResourceGroupNext operation. */
export type DomainsListByResourceGroupNextResponse = DomainsListResult;

/** Optional parameters. */
export interface DomainTopicsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DomainTopicsGetResponse = DomainTopic;

/** Optional parameters. */
export interface DomainTopicsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type DomainTopicsCreateOrUpdateResponse = DomainTopic;

/** Optional parameters. */
export interface DomainTopicsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DomainTopicsListByDomainOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listByDomain operation. */
export type DomainTopicsListByDomainResponse = DomainTopicsListResult;

/** Optional parameters. */
export interface DomainTopicsListByDomainNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listByDomainNext operation. */
export type DomainTopicsListByDomainNextResponse = DomainTopicsListResult;

/** Optional parameters. */
export interface TopicEventSubscriptionsGetDeliveryAttributesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getDeliveryAttributes operation. */
export type TopicEventSubscriptionsGetDeliveryAttributesResponse = DeliveryAttributeListResult;

/** Optional parameters. */
export interface TopicEventSubscriptionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type TopicEventSubscriptionsGetResponse = EventSubscription;

/** Optional parameters. */
export interface TopicEventSubscriptionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type TopicEventSubscriptionsCreateOrUpdateResponse = EventSubscription;

/** Optional parameters. */
export interface TopicEventSubscriptionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface TopicEventSubscriptionsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type TopicEventSubscriptionsUpdateResponse = EventSubscription;

/** Optional parameters. */
export interface TopicEventSubscriptionsGetFullUrlOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getFullUrl operation. */
export type TopicEventSubscriptionsGetFullUrlResponse = EventSubscriptionFullUrl;

/** Optional parameters. */
export interface TopicEventSubscriptionsListOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the list operation. */
export type TopicEventSubscriptionsListResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface TopicEventSubscriptionsListNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listNext operation. */
export type TopicEventSubscriptionsListNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface DomainEventSubscriptionsGetDeliveryAttributesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getDeliveryAttributes operation. */
export type DomainEventSubscriptionsGetDeliveryAttributesResponse = DeliveryAttributeListResult;

/** Optional parameters. */
export interface DomainEventSubscriptionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DomainEventSubscriptionsGetResponse = EventSubscription;

/** Optional parameters. */
export interface DomainEventSubscriptionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type DomainEventSubscriptionsCreateOrUpdateResponse = EventSubscription;

/** Optional parameters. */
export interface DomainEventSubscriptionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DomainEventSubscriptionsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type DomainEventSubscriptionsUpdateResponse = EventSubscription;

/** Optional parameters. */
export interface DomainEventSubscriptionsGetFullUrlOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getFullUrl operation. */
export type DomainEventSubscriptionsGetFullUrlResponse = EventSubscriptionFullUrl;

/** Optional parameters. */
export interface DomainEventSubscriptionsListOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the list operation. */
export type DomainEventSubscriptionsListResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface DomainEventSubscriptionsListNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listNext operation. */
export type DomainEventSubscriptionsListNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface EventSubscriptionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type EventSubscriptionsGetResponse = EventSubscription;

/** Optional parameters. */
export interface EventSubscriptionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type EventSubscriptionsCreateOrUpdateResponse = EventSubscription;

/** Optional parameters. */
export interface EventSubscriptionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface EventSubscriptionsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type EventSubscriptionsUpdateResponse = EventSubscription;

/** Optional parameters. */
export interface EventSubscriptionsGetFullUrlOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getFullUrl operation. */
export type EventSubscriptionsGetFullUrlResponse = EventSubscriptionFullUrl;

/** Optional parameters. */
export interface EventSubscriptionsListGlobalBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listGlobalBySubscription operation. */
export type EventSubscriptionsListGlobalBySubscriptionResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface EventSubscriptionsListGlobalBySubscriptionForTopicTypeOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listGlobalBySubscriptionForTopicType operation. */
export type EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface EventSubscriptionsListGlobalByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listGlobalByResourceGroup operation. */
export type EventSubscriptionsListGlobalByResourceGroupResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface EventSubscriptionsListGlobalByResourceGroupForTopicTypeOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listGlobalByResourceGroupForTopicType operation. */
export type EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface EventSubscriptionsListRegionalBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listRegionalBySubscription operation. */
export type EventSubscriptionsListRegionalBySubscriptionResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface EventSubscriptionsListRegionalByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listRegionalByResourceGroup operation. */
export type EventSubscriptionsListRegionalByResourceGroupResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface EventSubscriptionsListRegionalBySubscriptionForTopicTypeOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listRegionalBySubscriptionForTopicType operation. */
export type EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface EventSubscriptionsListRegionalByResourceGroupForTopicTypeOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listRegionalByResourceGroupForTopicType operation. */
export type EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface EventSubscriptionsListByResourceOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listByResource operation. */
export type EventSubscriptionsListByResourceResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface EventSubscriptionsListByDomainTopicOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listByDomainTopic operation. */
export type EventSubscriptionsListByDomainTopicResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface EventSubscriptionsGetDeliveryAttributesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getDeliveryAttributes operation. */
export type EventSubscriptionsGetDeliveryAttributesResponse = DeliveryAttributeListResult;

/** Optional parameters. */
export interface EventSubscriptionsListGlobalBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listGlobalBySubscriptionNext operation. */
export type EventSubscriptionsListGlobalBySubscriptionNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface EventSubscriptionsListGlobalBySubscriptionForTopicTypeNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listGlobalBySubscriptionForTopicTypeNext operation. */
export type EventSubscriptionsListGlobalBySubscriptionForTopicTypeNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface EventSubscriptionsListGlobalByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listGlobalByResourceGroupNext operation. */
export type EventSubscriptionsListGlobalByResourceGroupNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface EventSubscriptionsListGlobalByResourceGroupForTopicTypeNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listGlobalByResourceGroupForTopicTypeNext operation. */
export type EventSubscriptionsListGlobalByResourceGroupForTopicTypeNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface EventSubscriptionsListRegionalBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listRegionalBySubscriptionNext operation. */
export type EventSubscriptionsListRegionalBySubscriptionNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface EventSubscriptionsListRegionalByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listRegionalByResourceGroupNext operation. */
export type EventSubscriptionsListRegionalByResourceGroupNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface EventSubscriptionsListRegionalBySubscriptionForTopicTypeNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listRegionalBySubscriptionForTopicTypeNext operation. */
export type EventSubscriptionsListRegionalBySubscriptionForTopicTypeNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface EventSubscriptionsListRegionalByResourceGroupForTopicTypeNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listRegionalByResourceGroupForTopicTypeNext operation. */
export type EventSubscriptionsListRegionalByResourceGroupForTopicTypeNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface EventSubscriptionsListByResourceNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listByResourceNext operation. */
export type EventSubscriptionsListByResourceNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface EventSubscriptionsListByDomainTopicNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listByDomainTopicNext operation. */
export type EventSubscriptionsListByDomainTopicNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface DomainTopicEventSubscriptionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DomainTopicEventSubscriptionsGetResponse = EventSubscription;

/** Optional parameters. */
export interface DomainTopicEventSubscriptionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type DomainTopicEventSubscriptionsCreateOrUpdateResponse = EventSubscription;

/** Optional parameters. */
export interface DomainTopicEventSubscriptionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DomainTopicEventSubscriptionsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type DomainTopicEventSubscriptionsUpdateResponse = EventSubscription;

/** Optional parameters. */
export interface DomainTopicEventSubscriptionsGetFullUrlOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getFullUrl operation. */
export type DomainTopicEventSubscriptionsGetFullUrlResponse = EventSubscriptionFullUrl;

/** Optional parameters. */
export interface DomainTopicEventSubscriptionsListOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the list operation. */
export type DomainTopicEventSubscriptionsListResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface DomainTopicEventSubscriptionsGetDeliveryAttributesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getDeliveryAttributes operation. */
export type DomainTopicEventSubscriptionsGetDeliveryAttributesResponse = DeliveryAttributeListResult;

/** Optional parameters. */
export interface DomainTopicEventSubscriptionsListNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listNext operation. */
export type DomainTopicEventSubscriptionsListNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface SystemTopicEventSubscriptionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SystemTopicEventSubscriptionsGetResponse = EventSubscription;

/** Optional parameters. */
export interface SystemTopicEventSubscriptionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type SystemTopicEventSubscriptionsCreateOrUpdateResponse = EventSubscription;

/** Optional parameters. */
export interface SystemTopicEventSubscriptionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface SystemTopicEventSubscriptionsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type SystemTopicEventSubscriptionsUpdateResponse = EventSubscription;

/** Optional parameters. */
export interface SystemTopicEventSubscriptionsGetFullUrlOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getFullUrl operation. */
export type SystemTopicEventSubscriptionsGetFullUrlResponse = EventSubscriptionFullUrl;

/** Optional parameters. */
export interface SystemTopicEventSubscriptionsListBySystemTopicOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listBySystemTopic operation. */
export type SystemTopicEventSubscriptionsListBySystemTopicResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface SystemTopicEventSubscriptionsGetDeliveryAttributesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getDeliveryAttributes operation. */
export type SystemTopicEventSubscriptionsGetDeliveryAttributesResponse = DeliveryAttributeListResult;

/** Optional parameters. */
export interface SystemTopicEventSubscriptionsListBySystemTopicNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listBySystemTopicNext operation. */
export type SystemTopicEventSubscriptionsListBySystemTopicNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface PartnerTopicEventSubscriptionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PartnerTopicEventSubscriptionsGetResponse = EventSubscription;

/** Optional parameters. */
export interface PartnerTopicEventSubscriptionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type PartnerTopicEventSubscriptionsCreateOrUpdateResponse = EventSubscription;

/** Optional parameters. */
export interface PartnerTopicEventSubscriptionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface PartnerTopicEventSubscriptionsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type PartnerTopicEventSubscriptionsUpdateResponse = EventSubscription;

/** Optional parameters. */
export interface PartnerTopicEventSubscriptionsGetFullUrlOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getFullUrl operation. */
export type PartnerTopicEventSubscriptionsGetFullUrlResponse = EventSubscriptionFullUrl;

/** Optional parameters. */
export interface PartnerTopicEventSubscriptionsListByPartnerTopicOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listByPartnerTopic operation. */
export type PartnerTopicEventSubscriptionsListByPartnerTopicResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface PartnerTopicEventSubscriptionsGetDeliveryAttributesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getDeliveryAttributes operation. */
export type PartnerTopicEventSubscriptionsGetDeliveryAttributesResponse = DeliveryAttributeListResult;

/** Optional parameters. */
export interface PartnerTopicEventSubscriptionsListByPartnerTopicNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listByPartnerTopicNext operation. */
export type PartnerTopicEventSubscriptionsListByPartnerTopicNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationsListResult;

/** Optional parameters. */
export interface TopicsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type TopicsGetResponse = Topic;

/** Optional parameters. */
export interface TopicsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type TopicsCreateOrUpdateResponse = Topic;

/** Optional parameters. */
export interface TopicsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface TopicsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface TopicsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listBySubscription operation. */
export type TopicsListBySubscriptionResponse = TopicsListResult;

/** Optional parameters. */
export interface TopicsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export type TopicsListByResourceGroupResponse = TopicsListResult;

/** Optional parameters. */
export interface TopicsListSharedAccessKeysOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listSharedAccessKeys operation. */
export type TopicsListSharedAccessKeysResponse = TopicSharedAccessKeys;

/** Optional parameters. */
export interface TopicsRegenerateKeyOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the regenerateKey operation. */
export type TopicsRegenerateKeyResponse = TopicSharedAccessKeys;

/** Optional parameters. */
export interface TopicsListEventTypesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listEventTypes operation. */
export type TopicsListEventTypesResponse = EventTypesListResult;

/** Optional parameters. */
export interface TopicsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listBySubscriptionNext operation. */
export type TopicsListBySubscriptionNextResponse = TopicsListResult;

/** Optional parameters. */
export interface TopicsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listByResourceGroupNext operation. */
export type TopicsListByResourceGroupNextResponse = TopicsListResult;

/** Optional parameters. */
export interface PartnerConfigurationsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PartnerConfigurationsGetResponse = PartnerConfiguration;

/** Optional parameters. */
export interface PartnerConfigurationsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type PartnerConfigurationsCreateOrUpdateResponse = PartnerConfiguration;

/** Optional parameters. */
export interface PartnerConfigurationsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface PartnerConfigurationsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type PartnerConfigurationsUpdateResponse = PartnerConfiguration;

/** Optional parameters. */
export interface PartnerConfigurationsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type PartnerConfigurationsListByResourceGroupResponse = PartnerConfigurationsListResult;

/** Optional parameters. */
export interface PartnerConfigurationsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listBySubscription operation. */
export type PartnerConfigurationsListBySubscriptionResponse = PartnerConfigurationsListResult;

/** Optional parameters. */
export interface PartnerConfigurationsAuthorizePartnerOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the authorizePartner operation. */
export type PartnerConfigurationsAuthorizePartnerResponse = PartnerConfiguration;

/** Optional parameters. */
export interface PartnerConfigurationsUnauthorizePartnerOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the unauthorizePartner operation. */
export type PartnerConfigurationsUnauthorizePartnerResponse = PartnerConfiguration;

/** Optional parameters. */
export interface PartnerConfigurationsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listBySubscriptionNext operation. */
export type PartnerConfigurationsListBySubscriptionNextResponse = PartnerConfigurationsListResult;

/** Optional parameters. */
export interface PartnerNamespacesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PartnerNamespacesGetResponse = PartnerNamespace;

/** Optional parameters. */
export interface PartnerNamespacesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type PartnerNamespacesCreateOrUpdateResponse = PartnerNamespace;

/** Optional parameters. */
export interface PartnerNamespacesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface PartnerNamespacesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface PartnerNamespacesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listBySubscription operation. */
export type PartnerNamespacesListBySubscriptionResponse = PartnerNamespacesListResult;

/** Optional parameters. */
export interface PartnerNamespacesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export type PartnerNamespacesListByResourceGroupResponse = PartnerNamespacesListResult;

/** Optional parameters. */
export interface PartnerNamespacesListSharedAccessKeysOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listSharedAccessKeys operation. */
export type PartnerNamespacesListSharedAccessKeysResponse = PartnerNamespaceSharedAccessKeys;

/** Optional parameters. */
export interface PartnerNamespacesRegenerateKeyOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the regenerateKey operation. */
export type PartnerNamespacesRegenerateKeyResponse = PartnerNamespaceSharedAccessKeys;

/** Optional parameters. */
export interface PartnerNamespacesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listBySubscriptionNext operation. */
export type PartnerNamespacesListBySubscriptionNextResponse = PartnerNamespacesListResult;

/** Optional parameters. */
export interface PartnerNamespacesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listByResourceGroupNext operation. */
export type PartnerNamespacesListByResourceGroupNextResponse = PartnerNamespacesListResult;

/** Optional parameters. */
export interface PartnerRegistrationsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PartnerRegistrationsGetResponse = PartnerRegistration;

/** Optional parameters. */
export interface PartnerRegistrationsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type PartnerRegistrationsCreateOrUpdateResponse = PartnerRegistration;

/** Optional parameters. */
export interface PartnerRegistrationsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface PartnerRegistrationsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface PartnerRegistrationsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listBySubscription operation. */
export type PartnerRegistrationsListBySubscriptionResponse = PartnerRegistrationsListResult;

/** Optional parameters. */
export interface PartnerRegistrationsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export type PartnerRegistrationsListByResourceGroupResponse = PartnerRegistrationsListResult;

/** Optional parameters. */
export interface PartnerRegistrationsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listBySubscriptionNext operation. */
export type PartnerRegistrationsListBySubscriptionNextResponse = PartnerRegistrationsListResult;

/** Optional parameters. */
export interface PartnerRegistrationsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listByResourceGroupNext operation. */
export type PartnerRegistrationsListByResourceGroupNextResponse = PartnerRegistrationsListResult;

/** Optional parameters. */
export interface PartnerTopicsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PartnerTopicsGetResponse = PartnerTopic;

/** Optional parameters. */
export interface PartnerTopicsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type PartnerTopicsCreateOrUpdateResponse = PartnerTopic;

/** Optional parameters. */
export interface PartnerTopicsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface PartnerTopicsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type PartnerTopicsUpdateResponse = PartnerTopic;

/** Optional parameters. */
export interface PartnerTopicsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listBySubscription operation. */
export type PartnerTopicsListBySubscriptionResponse = PartnerTopicsListResult;

/** Optional parameters. */
export interface PartnerTopicsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export type PartnerTopicsListByResourceGroupResponse = PartnerTopicsListResult;

/** Optional parameters. */
export interface PartnerTopicsActivateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the activate operation. */
export type PartnerTopicsActivateResponse = PartnerTopic;

/** Optional parameters. */
export interface PartnerTopicsDeactivateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the deactivate operation. */
export type PartnerTopicsDeactivateResponse = PartnerTopic;

/** Optional parameters. */
export interface PartnerTopicsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listBySubscriptionNext operation. */
export type PartnerTopicsListBySubscriptionNextResponse = PartnerTopicsListResult;

/** Optional parameters. */
export interface PartnerTopicsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listByResourceGroupNext operation. */
export type PartnerTopicsListByResourceGroupNextResponse = PartnerTopicsListResult;

/** Optional parameters. */
export interface PrivateEndpointConnectionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;

/** Optional parameters. */
export interface PrivateEndpointConnectionsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type PrivateEndpointConnectionsUpdateResponse = PrivateEndpointConnection;

/** Optional parameters. */
export interface PrivateEndpointConnectionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface PrivateEndpointConnectionsListByResourceOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listByResource operation. */
export type PrivateEndpointConnectionsListByResourceResponse = PrivateEndpointConnectionListResult;

/** Optional parameters. */
export interface PrivateEndpointConnectionsListByResourceNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listByResourceNext operation. */
export type PrivateEndpointConnectionsListByResourceNextResponse = PrivateEndpointConnectionListResult;

/** Optional parameters. */
export interface PrivateLinkResourcesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PrivateLinkResourcesGetResponse = PrivateLinkResource;

/** Optional parameters. */
export interface PrivateLinkResourcesListByResourceOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listByResource operation. */
export type PrivateLinkResourcesListByResourceResponse = PrivateLinkResourcesListResult;

/** Optional parameters. */
export interface PrivateLinkResourcesListByResourceNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listByResourceNext operation. */
export type PrivateLinkResourcesListByResourceNextResponse = PrivateLinkResourcesListResult;

/** Optional parameters. */
export interface SystemTopicsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SystemTopicsGetResponse = SystemTopic;

/** Optional parameters. */
export interface SystemTopicsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type SystemTopicsCreateOrUpdateResponse = SystemTopic;

/** Optional parameters. */
export interface SystemTopicsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface SystemTopicsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type SystemTopicsUpdateResponse = SystemTopic;

/** Optional parameters. */
export interface SystemTopicsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listBySubscription operation. */
export type SystemTopicsListBySubscriptionResponse = SystemTopicsListResult;

/** Optional parameters. */
export interface SystemTopicsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export type SystemTopicsListByResourceGroupResponse = SystemTopicsListResult;

/** Optional parameters. */
export interface SystemTopicsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listBySubscriptionNext operation. */
export type SystemTopicsListBySubscriptionNextResponse = SystemTopicsListResult;

/** Optional parameters. */
export interface SystemTopicsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listByResourceGroupNext operation. */
export type SystemTopicsListByResourceGroupNextResponse = SystemTopicsListResult;

/** Optional parameters. */
export interface ExtensionTopicsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ExtensionTopicsGetResponse = ExtensionTopic;

/** Optional parameters. */
export interface TopicTypesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type TopicTypesListResponse = TopicTypesListResult;

/** Optional parameters. */
export interface TopicTypesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type TopicTypesGetResponse = TopicTypeInfo;

/** Optional parameters. */
export interface TopicTypesListEventTypesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listEventTypes operation. */
export type TopicTypesListEventTypesResponse = EventTypesListResult;

/** Optional parameters. */
export interface VerifiedPartnersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VerifiedPartnersGetResponse = VerifiedPartner;

/** Optional parameters. */
export interface VerifiedPartnersListOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the list operation. */
export type VerifiedPartnersListResponse = VerifiedPartnersListResult;

/** Optional parameters. */
export interface VerifiedPartnersListNextOptionalParams
  extends coreClient.OperationOptions {
  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
  filter?: string;
  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
  top?: number;
}

/** Contains response data for the listNext operation. */
export type VerifiedPartnersListNextResponse = VerifiedPartnersListResult;

/** Optional parameters. */
export interface EventGridManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
