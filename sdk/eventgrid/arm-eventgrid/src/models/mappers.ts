/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const PrivateEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InputSchemaMapping: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InputSchemaMapping",
    uberParent: "InputSchemaMapping",
    polymorphicDiscriminator: {
      serializedName: "inputSchemaMappingType",
      clientName: "inputSchemaMappingType"
    },
    modelProperties: {
      inputSchemaMappingType: {
        serializedName: "inputSchemaMappingType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InboundIpRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InboundIpRule",
    modelProperties: {
      ipMask: {
        serializedName: "ipMask",
        type: {
          name: "String"
        }
      },
      action: {
        serializedName: "action",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const IdentityInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IdentityInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserIdentityProperties" }
          }
        }
      }
    }
  }
};

export const UserIdentityProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserIdentityProperties",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DomainUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DomainUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "IdentityInfo"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      inboundIpRules: {
        serializedName: "properties.inboundIpRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InboundIpRule"
            }
          }
        }
      },
      disableLocalAuth: {
        serializedName: "properties.disableLocalAuth",
        type: {
          name: "Boolean"
        }
      },
      autoCreateTopicWithFirstSubscription: {
        serializedName: "properties.autoCreateTopicWithFirstSubscription",
        type: {
          name: "Boolean"
        }
      },
      autoDeleteTopicWithLastSubscription: {
        serializedName: "properties.autoDeleteTopicWithLastSubscription",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DomainsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DomainsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Domain"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DomainSharedAccessKeys: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DomainSharedAccessKeys",
    modelProperties: {
      key1: {
        serializedName: "key1",
        type: {
          name: "String"
        }
      },
      key2: {
        serializedName: "key2",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DomainRegenerateKeyRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DomainRegenerateKeyRequest",
    modelProperties: {
      keyName: {
        serializedName: "keyName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DomainTopicsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DomainTopicsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DomainTopic"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventSubscriptionDestination: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventSubscriptionDestination",
    uberParent: "EventSubscriptionDestination",
    polymorphicDiscriminator: {
      serializedName: "endpointType",
      clientName: "endpointType"
    },
    modelProperties: {
      endpointType: {
        serializedName: "endpointType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeliveryWithResourceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeliveryWithResourceIdentity",
    modelProperties: {
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "EventSubscriptionIdentity"
        }
      },
      destination: {
        serializedName: "destination",
        type: {
          name: "Composite",
          className: "EventSubscriptionDestination"
        }
      }
    }
  }
};

export const EventSubscriptionIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventSubscriptionIdentity",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      userAssignedIdentity: {
        serializedName: "userAssignedIdentity",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventSubscriptionFilter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventSubscriptionFilter",
    modelProperties: {
      subjectBeginsWith: {
        serializedName: "subjectBeginsWith",
        type: {
          name: "String"
        }
      },
      subjectEndsWith: {
        serializedName: "subjectEndsWith",
        type: {
          name: "String"
        }
      },
      includedEventTypes: {
        serializedName: "includedEventTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      isSubjectCaseSensitive: {
        defaultValue: false,
        serializedName: "isSubjectCaseSensitive",
        type: {
          name: "Boolean"
        }
      },
      enableAdvancedFilteringOnArrays: {
        serializedName: "enableAdvancedFilteringOnArrays",
        type: {
          name: "Boolean"
        }
      },
      advancedFilters: {
        serializedName: "advancedFilters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AdvancedFilter"
            }
          }
        }
      }
    }
  }
};

export const AdvancedFilter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AdvancedFilter",
    uberParent: "AdvancedFilter",
    polymorphicDiscriminator: {
      serializedName: "operatorType",
      clientName: "operatorType"
    },
    modelProperties: {
      operatorType: {
        serializedName: "operatorType",
        required: true,
        type: {
          name: "String"
        }
      },
      key: {
        serializedName: "key",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RetryPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RetryPolicy",
    modelProperties: {
      maxDeliveryAttempts: {
        defaultValue: 30,
        serializedName: "maxDeliveryAttempts",
        type: {
          name: "Number"
        }
      },
      eventTimeToLiveInMinutes: {
        defaultValue: 1440,
        serializedName: "eventTimeToLiveInMinutes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DeadLetterDestination: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeadLetterDestination",
    uberParent: "DeadLetterDestination",
    polymorphicDiscriminator: {
      serializedName: "endpointType",
      clientName: "endpointType"
    },
    modelProperties: {
      endpointType: {
        serializedName: "endpointType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeadLetterWithResourceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeadLetterWithResourceIdentity",
    modelProperties: {
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "EventSubscriptionIdentity"
        }
      },
      deadLetterDestination: {
        serializedName: "deadLetterDestination",
        type: {
          name: "Composite",
          className: "DeadLetterDestination"
        }
      }
    }
  }
};

export const EventSubscriptionUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventSubscriptionUpdateParameters",
    modelProperties: {
      destination: {
        serializedName: "destination",
        type: {
          name: "Composite",
          className: "EventSubscriptionDestination"
        }
      },
      deliveryWithResourceIdentity: {
        serializedName: "deliveryWithResourceIdentity",
        type: {
          name: "Composite",
          className: "DeliveryWithResourceIdentity"
        }
      },
      filter: {
        serializedName: "filter",
        type: {
          name: "Composite",
          className: "EventSubscriptionFilter"
        }
      },
      labels: {
        serializedName: "labels",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      expirationTimeUtc: {
        serializedName: "expirationTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      eventDeliverySchema: {
        serializedName: "eventDeliverySchema",
        type: {
          name: "String"
        }
      },
      retryPolicy: {
        serializedName: "retryPolicy",
        type: {
          name: "Composite",
          className: "RetryPolicy"
        }
      },
      deadLetterDestination: {
        serializedName: "deadLetterDestination",
        type: {
          name: "Composite",
          className: "DeadLetterDestination"
        }
      },
      deadLetterWithResourceIdentity: {
        serializedName: "deadLetterWithResourceIdentity",
        type: {
          name: "Composite",
          className: "DeadLetterWithResourceIdentity"
        }
      }
    }
  }
};

export const EventSubscriptionFullUrl: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventSubscriptionFullUrl",
    modelProperties: {
      endpointUrl: {
        serializedName: "endpointUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventSubscriptionsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventSubscriptionsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EventSubscription"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeliveryAttributeListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeliveryAttributeListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeliveryAttributeMapping"
            }
          }
        }
      }
    }
  }
};

export const DeliveryAttributeMapping: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeliveryAttributeMapping",
    uberParent: "DeliveryAttributeMapping",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationInfo"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const OperationInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationInfo",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TopicUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TopicUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "IdentityInfo"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      inboundIpRules: {
        serializedName: "properties.inboundIpRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InboundIpRule"
            }
          }
        }
      },
      disableLocalAuth: {
        serializedName: "properties.disableLocalAuth",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const TopicsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TopicsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Topic"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TopicSharedAccessKeys: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TopicSharedAccessKeys",
    modelProperties: {
      key1: {
        serializedName: "key1",
        type: {
          name: "String"
        }
      },
      key2: {
        serializedName: "key2",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TopicRegenerateKeyRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TopicRegenerateKeyRequest",
    modelProperties: {
      keyName: {
        serializedName: "keyName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      groupId: {
        serializedName: "properties.groupId",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        serializedName: "properties.requiredMembers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      requiredZoneNames: {
        serializedName: "properties.requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const PrivateLinkResourcesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourcesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SystemTopicUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemTopicUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "IdentityInfo"
        }
      }
    }
  }
};

export const SystemTopicsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemTopicsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SystemTopic"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventTypesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventTypesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EventType"
            }
          }
        }
      }
    }
  }
};

export const TopicTypesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TopicTypesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TopicTypeInfo"
            }
          }
        }
      }
    }
  }
};

export const JsonField: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JsonField",
    modelProperties: {
      sourceField: {
        serializedName: "sourceField",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JsonFieldWithDefault: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JsonFieldWithDefault",
    modelProperties: {
      sourceField: {
        serializedName: "sourceField",
        type: {
          name: "String"
        }
      },
      defaultValue: {
        serializedName: "defaultValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...Resource.type.modelProperties,
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      groupIds: {
        serializedName: "properties.groupIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "ConnectionState"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const DomainTopic: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DomainTopic",
    modelProperties: {
      ...Resource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventSubscription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventSubscription",
    modelProperties: {
      ...Resource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      topic: {
        serializedName: "properties.topic",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      destination: {
        serializedName: "properties.destination",
        type: {
          name: "Composite",
          className: "EventSubscriptionDestination"
        }
      },
      deliveryWithResourceIdentity: {
        serializedName: "properties.deliveryWithResourceIdentity",
        type: {
          name: "Composite",
          className: "DeliveryWithResourceIdentity"
        }
      },
      filter: {
        serializedName: "properties.filter",
        type: {
          name: "Composite",
          className: "EventSubscriptionFilter"
        }
      },
      labels: {
        serializedName: "properties.labels",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      expirationTimeUtc: {
        serializedName: "properties.expirationTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      eventDeliverySchema: {
        serializedName: "properties.eventDeliverySchema",
        type: {
          name: "String"
        }
      },
      retryPolicy: {
        serializedName: "properties.retryPolicy",
        type: {
          name: "Composite",
          className: "RetryPolicy"
        }
      },
      deadLetterDestination: {
        serializedName: "properties.deadLetterDestination",
        type: {
          name: "Composite",
          className: "DeadLetterDestination"
        }
      },
      deadLetterWithResourceIdentity: {
        serializedName: "properties.deadLetterWithResourceIdentity",
        type: {
          name: "Composite",
          className: "DeadLetterWithResourceIdentity"
        }
      }
    }
  }
};

export const EventType: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventType",
    modelProperties: {
      ...Resource.type.modelProperties,
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      schemaUrl: {
        serializedName: "properties.schemaUrl",
        type: {
          name: "String"
        }
      },
      isInDefaultSet: {
        serializedName: "properties.isInDefaultSet",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ExtensionTopic: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtensionTopic",
    modelProperties: {
      ...Resource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      systemTopic: {
        serializedName: "properties.systemTopic",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TopicTypeInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TopicTypeInfo",
    modelProperties: {
      ...Resource.type.modelProperties,
      provider: {
        serializedName: "properties.provider",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      resourceRegionType: {
        serializedName: "properties.resourceRegionType",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      supportedLocations: {
        serializedName: "properties.supportedLocations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      sourceResourceFormat: {
        serializedName: "properties.sourceResourceFormat",
        type: {
          name: "String"
        }
      },
      supportedScopesForSource: {
        serializedName: "properties.supportedScopesForSource",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const JsonInputSchemaMapping: coreClient.CompositeMapper = {
  serializedName: "Json",
  type: {
    name: "Composite",
    className: "JsonInputSchemaMapping",
    uberParent: "InputSchemaMapping",
    polymorphicDiscriminator: InputSchemaMapping.type.polymorphicDiscriminator,
    modelProperties: {
      ...InputSchemaMapping.type.modelProperties,
      id: {
        serializedName: "properties.id",
        type: {
          name: "Composite",
          className: "JsonField"
        }
      },
      topic: {
        serializedName: "properties.topic",
        type: {
          name: "Composite",
          className: "JsonField"
        }
      },
      eventTime: {
        serializedName: "properties.eventTime",
        type: {
          name: "Composite",
          className: "JsonField"
        }
      },
      eventType: {
        serializedName: "properties.eventType",
        type: {
          name: "Composite",
          className: "JsonFieldWithDefault"
        }
      },
      subject: {
        serializedName: "properties.subject",
        type: {
          name: "Composite",
          className: "JsonFieldWithDefault"
        }
      },
      dataVersion: {
        serializedName: "properties.dataVersion",
        type: {
          name: "Composite",
          className: "JsonFieldWithDefault"
        }
      }
    }
  }
};

export const WebHookEventSubscriptionDestination: coreClient.CompositeMapper = {
  serializedName: "WebHook",
  type: {
    name: "Composite",
    className: "WebHookEventSubscriptionDestination",
    uberParent: "EventSubscriptionDestination",
    polymorphicDiscriminator:
      EventSubscriptionDestination.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventSubscriptionDestination.type.modelProperties,
      endpointUrl: {
        serializedName: "properties.endpointUrl",
        type: {
          name: "String"
        }
      },
      endpointBaseUrl: {
        serializedName: "properties.endpointBaseUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      maxEventsPerBatch: {
        defaultValue: 1,
        serializedName: "properties.maxEventsPerBatch",
        type: {
          name: "Number"
        }
      },
      preferredBatchSizeInKilobytes: {
        defaultValue: 64,
        serializedName: "properties.preferredBatchSizeInKilobytes",
        type: {
          name: "Number"
        }
      },
      azureActiveDirectoryTenantId: {
        serializedName: "properties.azureActiveDirectoryTenantId",
        type: {
          name: "String"
        }
      },
      azureActiveDirectoryApplicationIdOrUri: {
        serializedName: "properties.azureActiveDirectoryApplicationIdOrUri",
        type: {
          name: "String"
        }
      },
      deliveryAttributeMappings: {
        serializedName: "properties.deliveryAttributeMappings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeliveryAttributeMapping"
            }
          }
        }
      }
    }
  }
};

export const EventHubEventSubscriptionDestination: coreClient.CompositeMapper = {
  serializedName: "EventHub",
  type: {
    name: "Composite",
    className: "EventHubEventSubscriptionDestination",
    uberParent: "EventSubscriptionDestination",
    polymorphicDiscriminator:
      EventSubscriptionDestination.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventSubscriptionDestination.type.modelProperties,
      resourceId: {
        serializedName: "properties.resourceId",
        type: {
          name: "String"
        }
      },
      deliveryAttributeMappings: {
        serializedName: "properties.deliveryAttributeMappings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeliveryAttributeMapping"
            }
          }
        }
      }
    }
  }
};

export const StorageQueueEventSubscriptionDestination: coreClient.CompositeMapper = {
  serializedName: "StorageQueue",
  type: {
    name: "Composite",
    className: "StorageQueueEventSubscriptionDestination",
    uberParent: "EventSubscriptionDestination",
    polymorphicDiscriminator:
      EventSubscriptionDestination.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventSubscriptionDestination.type.modelProperties,
      resourceId: {
        serializedName: "properties.resourceId",
        type: {
          name: "String"
        }
      },
      queueName: {
        serializedName: "properties.queueName",
        type: {
          name: "String"
        }
      },
      queueMessageTimeToLiveInSeconds: {
        serializedName: "properties.queueMessageTimeToLiveInSeconds",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const HybridConnectionEventSubscriptionDestination: coreClient.CompositeMapper = {
  serializedName: "HybridConnection",
  type: {
    name: "Composite",
    className: "HybridConnectionEventSubscriptionDestination",
    uberParent: "EventSubscriptionDestination",
    polymorphicDiscriminator:
      EventSubscriptionDestination.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventSubscriptionDestination.type.modelProperties,
      resourceId: {
        serializedName: "properties.resourceId",
        type: {
          name: "String"
        }
      },
      deliveryAttributeMappings: {
        serializedName: "properties.deliveryAttributeMappings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeliveryAttributeMapping"
            }
          }
        }
      }
    }
  }
};

export const ServiceBusQueueEventSubscriptionDestination: coreClient.CompositeMapper = {
  serializedName: "ServiceBusQueue",
  type: {
    name: "Composite",
    className: "ServiceBusQueueEventSubscriptionDestination",
    uberParent: "EventSubscriptionDestination",
    polymorphicDiscriminator:
      EventSubscriptionDestination.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventSubscriptionDestination.type.modelProperties,
      resourceId: {
        serializedName: "properties.resourceId",
        type: {
          name: "String"
        }
      },
      deliveryAttributeMappings: {
        serializedName: "properties.deliveryAttributeMappings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeliveryAttributeMapping"
            }
          }
        }
      }
    }
  }
};

export const ServiceBusTopicEventSubscriptionDestination: coreClient.CompositeMapper = {
  serializedName: "ServiceBusTopic",
  type: {
    name: "Composite",
    className: "ServiceBusTopicEventSubscriptionDestination",
    uberParent: "EventSubscriptionDestination",
    polymorphicDiscriminator:
      EventSubscriptionDestination.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventSubscriptionDestination.type.modelProperties,
      resourceId: {
        serializedName: "properties.resourceId",
        type: {
          name: "String"
        }
      },
      deliveryAttributeMappings: {
        serializedName: "properties.deliveryAttributeMappings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeliveryAttributeMapping"
            }
          }
        }
      }
    }
  }
};

export const AzureFunctionEventSubscriptionDestination: coreClient.CompositeMapper = {
  serializedName: "AzureFunction",
  type: {
    name: "Composite",
    className: "AzureFunctionEventSubscriptionDestination",
    uberParent: "EventSubscriptionDestination",
    polymorphicDiscriminator:
      EventSubscriptionDestination.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventSubscriptionDestination.type.modelProperties,
      resourceId: {
        serializedName: "properties.resourceId",
        type: {
          name: "String"
        }
      },
      maxEventsPerBatch: {
        defaultValue: 1,
        serializedName: "properties.maxEventsPerBatch",
        type: {
          name: "Number"
        }
      },
      preferredBatchSizeInKilobytes: {
        defaultValue: 64,
        serializedName: "properties.preferredBatchSizeInKilobytes",
        type: {
          name: "Number"
        }
      },
      deliveryAttributeMappings: {
        serializedName: "properties.deliveryAttributeMappings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeliveryAttributeMapping"
            }
          }
        }
      }
    }
  }
};

export const NumberInAdvancedFilter: coreClient.CompositeMapper = {
  serializedName: "NumberIn",
  type: {
    name: "Composite",
    className: "NumberInAdvancedFilter",
    uberParent: "AdvancedFilter",
    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,
    modelProperties: {
      ...AdvancedFilter.type.modelProperties,
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const NumberNotInAdvancedFilter: coreClient.CompositeMapper = {
  serializedName: "NumberNotIn",
  type: {
    name: "Composite",
    className: "NumberNotInAdvancedFilter",
    uberParent: "AdvancedFilter",
    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,
    modelProperties: {
      ...AdvancedFilter.type.modelProperties,
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const NumberLessThanAdvancedFilter: coreClient.CompositeMapper = {
  serializedName: "NumberLessThan",
  type: {
    name: "Composite",
    className: "NumberLessThanAdvancedFilter",
    uberParent: "AdvancedFilter",
    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,
    modelProperties: {
      ...AdvancedFilter.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const NumberGreaterThanAdvancedFilter: coreClient.CompositeMapper = {
  serializedName: "NumberGreaterThan",
  type: {
    name: "Composite",
    className: "NumberGreaterThanAdvancedFilter",
    uberParent: "AdvancedFilter",
    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,
    modelProperties: {
      ...AdvancedFilter.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const NumberLessThanOrEqualsAdvancedFilter: coreClient.CompositeMapper = {
  serializedName: "NumberLessThanOrEquals",
  type: {
    name: "Composite",
    className: "NumberLessThanOrEqualsAdvancedFilter",
    uberParent: "AdvancedFilter",
    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,
    modelProperties: {
      ...AdvancedFilter.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const NumberGreaterThanOrEqualsAdvancedFilter: coreClient.CompositeMapper = {
  serializedName: "NumberGreaterThanOrEquals",
  type: {
    name: "Composite",
    className: "NumberGreaterThanOrEqualsAdvancedFilter",
    uberParent: "AdvancedFilter",
    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,
    modelProperties: {
      ...AdvancedFilter.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BoolEqualsAdvancedFilter: coreClient.CompositeMapper = {
  serializedName: "BoolEquals",
  type: {
    name: "Composite",
    className: "BoolEqualsAdvancedFilter",
    uberParent: "AdvancedFilter",
    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,
    modelProperties: {
      ...AdvancedFilter.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const StringInAdvancedFilter: coreClient.CompositeMapper = {
  serializedName: "StringIn",
  type: {
    name: "Composite",
    className: "StringInAdvancedFilter",
    uberParent: "AdvancedFilter",
    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,
    modelProperties: {
      ...AdvancedFilter.type.modelProperties,
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const StringNotInAdvancedFilter: coreClient.CompositeMapper = {
  serializedName: "StringNotIn",
  type: {
    name: "Composite",
    className: "StringNotInAdvancedFilter",
    uberParent: "AdvancedFilter",
    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,
    modelProperties: {
      ...AdvancedFilter.type.modelProperties,
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const StringBeginsWithAdvancedFilter: coreClient.CompositeMapper = {
  serializedName: "StringBeginsWith",
  type: {
    name: "Composite",
    className: "StringBeginsWithAdvancedFilter",
    uberParent: "AdvancedFilter",
    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,
    modelProperties: {
      ...AdvancedFilter.type.modelProperties,
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const StringEndsWithAdvancedFilter: coreClient.CompositeMapper = {
  serializedName: "StringEndsWith",
  type: {
    name: "Composite",
    className: "StringEndsWithAdvancedFilter",
    uberParent: "AdvancedFilter",
    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,
    modelProperties: {
      ...AdvancedFilter.type.modelProperties,
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const StringContainsAdvancedFilter: coreClient.CompositeMapper = {
  serializedName: "StringContains",
  type: {
    name: "Composite",
    className: "StringContainsAdvancedFilter",
    uberParent: "AdvancedFilter",
    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,
    modelProperties: {
      ...AdvancedFilter.type.modelProperties,
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const StorageBlobDeadLetterDestination: coreClient.CompositeMapper = {
  serializedName: "StorageBlob",
  type: {
    name: "Composite",
    className: "StorageBlobDeadLetterDestination",
    uberParent: "DeadLetterDestination",
    polymorphicDiscriminator:
      DeadLetterDestination.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeadLetterDestination.type.modelProperties,
      resourceId: {
        serializedName: "properties.resourceId",
        type: {
          name: "String"
        }
      },
      blobContainerName: {
        serializedName: "properties.blobContainerName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StaticDeliveryAttributeMapping: coreClient.CompositeMapper = {
  serializedName: "Static",
  type: {
    name: "Composite",
    className: "StaticDeliveryAttributeMapping",
    uberParent: "DeliveryAttributeMapping",
    polymorphicDiscriminator:
      DeliveryAttributeMapping.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryAttributeMapping.type.modelProperties,
      value: {
        serializedName: "properties.value",
        type: {
          name: "String"
        }
      },
      isSecret: {
        defaultValue: false,
        serializedName: "properties.isSecret",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DynamicDeliveryAttributeMapping: coreClient.CompositeMapper = {
  serializedName: "Dynamic",
  type: {
    name: "Composite",
    className: "DynamicDeliveryAttributeMapping",
    uberParent: "DeliveryAttributeMapping",
    polymorphicDiscriminator:
      DeliveryAttributeMapping.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryAttributeMapping.type.modelProperties,
      sourceField: {
        serializedName: "properties.sourceField",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Domain: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Domain",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "IdentityInfo"
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      endpoint: {
        serializedName: "properties.endpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      inputSchema: {
        serializedName: "properties.inputSchema",
        type: {
          name: "String"
        }
      },
      inputSchemaMapping: {
        serializedName: "properties.inputSchemaMapping",
        type: {
          name: "Composite",
          className: "InputSchemaMapping"
        }
      },
      metricResourceId: {
        serializedName: "properties.metricResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      inboundIpRules: {
        serializedName: "properties.inboundIpRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InboundIpRule"
            }
          }
        }
      },
      disableLocalAuth: {
        defaultValue: false,
        serializedName: "properties.disableLocalAuth",
        type: {
          name: "Boolean"
        }
      },
      autoCreateTopicWithFirstSubscription: {
        defaultValue: true,
        serializedName: "properties.autoCreateTopicWithFirstSubscription",
        type: {
          name: "Boolean"
        }
      },
      autoDeleteTopicWithLastSubscription: {
        defaultValue: true,
        serializedName: "properties.autoDeleteTopicWithLastSubscription",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Topic: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Topic",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "IdentityInfo"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      endpoint: {
        serializedName: "properties.endpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      inputSchema: {
        serializedName: "properties.inputSchema",
        type: {
          name: "String"
        }
      },
      inputSchemaMapping: {
        serializedName: "properties.inputSchemaMapping",
        type: {
          name: "Composite",
          className: "InputSchemaMapping"
        }
      },
      metricResourceId: {
        serializedName: "properties.metricResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      inboundIpRules: {
        serializedName: "properties.inboundIpRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InboundIpRule"
            }
          }
        }
      },
      disableLocalAuth: {
        defaultValue: false,
        serializedName: "properties.disableLocalAuth",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SystemTopic: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemTopic",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "IdentityInfo"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "properties.source",
        type: {
          name: "String"
        }
      },
      topicType: {
        serializedName: "properties.topicType",
        type: {
          name: "String"
        }
      },
      metricResourceId: {
        serializedName: "properties.metricResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  InputSchemaMapping: InputSchemaMapping,
  EventSubscriptionDestination: EventSubscriptionDestination,
  AdvancedFilter: AdvancedFilter,
  DeadLetterDestination: DeadLetterDestination,
  DeliveryAttributeMapping: DeliveryAttributeMapping,
  "InputSchemaMapping.Json": JsonInputSchemaMapping,
  "EventSubscriptionDestination.WebHook": WebHookEventSubscriptionDestination,
  "EventSubscriptionDestination.EventHub": EventHubEventSubscriptionDestination,
  "EventSubscriptionDestination.StorageQueue": StorageQueueEventSubscriptionDestination,
  "EventSubscriptionDestination.HybridConnection": HybridConnectionEventSubscriptionDestination,
  "EventSubscriptionDestination.ServiceBusQueue": ServiceBusQueueEventSubscriptionDestination,
  "EventSubscriptionDestination.ServiceBusTopic": ServiceBusTopicEventSubscriptionDestination,
  "EventSubscriptionDestination.AzureFunction": AzureFunctionEventSubscriptionDestination,
  "AdvancedFilter.NumberIn": NumberInAdvancedFilter,
  "AdvancedFilter.NumberNotIn": NumberNotInAdvancedFilter,
  "AdvancedFilter.NumberLessThan": NumberLessThanAdvancedFilter,
  "AdvancedFilter.NumberGreaterThan": NumberGreaterThanAdvancedFilter,
  "AdvancedFilter.NumberLessThanOrEquals": NumberLessThanOrEqualsAdvancedFilter,
  "AdvancedFilter.NumberGreaterThanOrEquals": NumberGreaterThanOrEqualsAdvancedFilter,
  "AdvancedFilter.BoolEquals": BoolEqualsAdvancedFilter,
  "AdvancedFilter.StringIn": StringInAdvancedFilter,
  "AdvancedFilter.StringNotIn": StringNotInAdvancedFilter,
  "AdvancedFilter.StringBeginsWith": StringBeginsWithAdvancedFilter,
  "AdvancedFilter.StringEndsWith": StringEndsWithAdvancedFilter,
  "AdvancedFilter.StringContains": StringContainsAdvancedFilter,
  "DeadLetterDestination.StorageBlob": StorageBlobDeadLetterDestination,
  "DeliveryAttributeMapping.Static": StaticDeliveryAttributeMapping,
  "DeliveryAttributeMapping.Dynamic": DynamicDeliveryAttributeMapping
};
