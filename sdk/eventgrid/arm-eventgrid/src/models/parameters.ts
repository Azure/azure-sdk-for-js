/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";

export const acceptLanguage: msRest.OperationParameter = {
  parameterPath: "acceptLanguage",
  mapper: {
    serializedName: "accept-language",
    defaultValue: 'en-US',
    type: {
      name: "String"
    }
  }
};
export const apiVersion: msRest.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    required: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};
export const domainName: msRest.OperationURLParameter = {
  parameterPath: "domainName",
  mapper: {
    required: true,
    serializedName: "domainName",
    type: {
      name: "String"
    }
  }
};
export const domainTopicName: msRest.OperationURLParameter = {
  parameterPath: "domainTopicName",
  mapper: {
    required: true,
    serializedName: "domainTopicName",
    type: {
      name: "String"
    }
  }
};
export const eventChannelName: msRest.OperationURLParameter = {
  parameterPath: "eventChannelName",
  mapper: {
    required: true,
    serializedName: "eventChannelName",
    type: {
      name: "String"
    }
  }
};
export const eventSubscriptionName: msRest.OperationURLParameter = {
  parameterPath: "eventSubscriptionName",
  mapper: {
    required: true,
    serializedName: "eventSubscriptionName",
    type: {
      name: "String"
    }
  }
};
export const filter: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "filter"
  ],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};
export const location: msRest.OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    required: true,
    serializedName: "location",
    type: {
      name: "String"
    }
  }
};
export const nextPageLink: msRest.OperationURLParameter = {
  parameterPath: "nextPageLink",
  mapper: {
    required: true,
    serializedName: "nextLink",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
export const parentName: msRest.OperationURLParameter = {
  parameterPath: "parentName",
  mapper: {
    required: true,
    serializedName: "parentName",
    type: {
      name: "String"
    }
  }
};
export const parentType: msRest.OperationURLParameter = {
  parameterPath: "parentType",
  mapper: {
    required: true,
    serializedName: "parentType",
    type: {
      name: "String"
    }
  }
};
export const partnerNamespaceName: msRest.OperationURLParameter = {
  parameterPath: "partnerNamespaceName",
  mapper: {
    required: true,
    serializedName: "partnerNamespaceName",
    type: {
      name: "String"
    }
  }
};
export const partnerRegistrationName: msRest.OperationURLParameter = {
  parameterPath: "partnerRegistrationName",
  mapper: {
    required: true,
    serializedName: "partnerRegistrationName",
    type: {
      name: "String"
    }
  }
};
export const partnerTopicName: msRest.OperationURLParameter = {
  parameterPath: "partnerTopicName",
  mapper: {
    required: true,
    serializedName: "partnerTopicName",
    type: {
      name: "String"
    }
  }
};
export const privateEndpointConnectionName: msRest.OperationURLParameter = {
  parameterPath: "privateEndpointConnectionName",
  mapper: {
    required: true,
    serializedName: "privateEndpointConnectionName",
    type: {
      name: "String"
    }
  }
};
export const privateLinkResourceName: msRest.OperationURLParameter = {
  parameterPath: "privateLinkResourceName",
  mapper: {
    required: true,
    serializedName: "privateLinkResourceName",
    type: {
      name: "String"
    }
  }
};
export const providerNamespace: msRest.OperationURLParameter = {
  parameterPath: "providerNamespace",
  mapper: {
    required: true,
    serializedName: "providerNamespace",
    type: {
      name: "String"
    }
  }
};
export const resourceGroupName: msRest.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    required: true,
    serializedName: "resourceGroupName",
    type: {
      name: "String"
    }
  }
};
export const resourceName: msRest.OperationURLParameter = {
  parameterPath: "resourceName",
  mapper: {
    required: true,
    serializedName: "resourceName",
    type: {
      name: "String"
    }
  }
};
export const resourceTypeName: msRest.OperationURLParameter = {
  parameterPath: "resourceTypeName",
  mapper: {
    required: true,
    serializedName: "resourceTypeName",
    type: {
      name: "String"
    }
  }
};
export const scope0: msRest.OperationURLParameter = {
  parameterPath: "scope",
  mapper: {
    required: true,
    serializedName: "scope",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
export const scope1: msRest.OperationURLParameter = {
  parameterPath: "scope",
  mapper: {
    required: true,
    serializedName: "scope",
    type: {
      name: "String"
    }
  }
};
export const subscriptionId: msRest.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    required: true,
    serializedName: "subscriptionId",
    type: {
      name: "String"
    }
  }
};
export const systemTopicName: msRest.OperationURLParameter = {
  parameterPath: "systemTopicName",
  mapper: {
    required: true,
    serializedName: "systemTopicName",
    type: {
      name: "String"
    }
  }
};
export const top: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "top"
  ],
  mapper: {
    serializedName: "$top",
    type: {
      name: "Number"
    }
  }
};
export const topicName: msRest.OperationURLParameter = {
  parameterPath: "topicName",
  mapper: {
    required: true,
    serializedName: "topicName",
    type: {
      name: "String"
    }
  }
};
export const topicTypeName: msRest.OperationURLParameter = {
  parameterPath: "topicTypeName",
  mapper: {
    required: true,
    serializedName: "topicTypeName",
    type: {
      name: "String"
    }
  }
};
