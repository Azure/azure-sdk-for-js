/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  record,
  RecorderEnvironmentSetup,
  Recorder
} from "@azure-tools/test-recorder";
import * as assert from "assert";
import { ClientSecretCredential } from "@azure/identity";
import { EventGridManagementClient } from "../src/eventGridManagementClient";

const recorderEnvSetup: RecorderEnvironmentSetup = {
  replaceableVariables: {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
  },
  customizationsOnRecordings: [
    (recording: any): any =>
      recording.replace(
        /"access_token":"[^"]*"/g,
        `"access_token":"access_token"`
      )
  ],
  queryParametersToSkip: []
};

describe("Eventgrid test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: EventGridManagementClient;
  let location: string;
  let resourceGroupName: string;
  let topicName: string;
  let domainName: string;

  beforeEach(async function () {
    recorder = record(this, recorderEnvSetup);
    subscriptionId = env.SUBSCRIPTION_ID;
    // This is an example of how the environment variables are used
    const credential = new ClientSecretCredential(
      env.AZURE_TENANT_ID,
      env.AZURE_CLIENT_ID,
      env.AZURE_CLIENT_SECRET
    );
    client = new EventGridManagementClient(credential, subscriptionId);
    location = "eastus";
    resourceGroupName = "myjstest";
    topicName = "mytopicxxx";
    domainName = "mydomainxxx";
  });

  afterEach(async function () {
    await recorder.stop();
  });

  it("topics create test", async function () {
    const res = await client.topics.beginCreateOrUpdateAndWait(resourceGroupName, topicName, { location: "westcentralus" });
    assert.equal(res.name, topicName);
  });

  it("topics listByResourceGroup test", async function () {
    const resArray = new Array();
    for await (let item of client.topics.listByResourceGroup(resourceGroupName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("topics delete test", async function () {
    const res = await client.topics.beginDeleteAndWait(resourceGroupName, topicName);
    const resArray = new Array();
    for await (let item of client.topics.listByResourceGroup(resourceGroupName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });

  it("domains create test", async function () {
    const res = await client.domains.beginCreateOrUpdateAndWait(resourceGroupName, domainName, { location: location });
    assert.equal(res.name, domainName);
  });

  it("domains update test", async function () {
    const res = await client.domains.beginUpdateAndWait(resourceGroupName, domainName, {
      tags: {
        tag1: "value1",
        tag2: "value2"
      }
    });
    //It's void response
  });

  it("domains get test", async function () {
    const res = await client.domains.get(resourceGroupName, domainName);
    assert.equal(res.name, domainName);
  });

  it("domains listByResourceGroup test", async function () {
    const resArray = new Array();
    for await (let item of client.domains.listByResourceGroup(resourceGroupName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1)
  });

  it("domains delete test", async function () {
    const res = await client.domains.beginDeleteAndWait(resourceGroupName, domainName);
    const resArray = new Array();
    for await (let item of client.domains.listByResourceGroup(resourceGroupName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });
});
