/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  DeploymentStack,
  DeploymentStacksListAtResourceGroupOptionalParams,
  DeploymentStacksListAtSubscriptionOptionalParams,
  DeploymentStacksListAtManagementGroupOptionalParams,
  DeploymentStacksCreateOrUpdateAtResourceGroupOptionalParams,
  DeploymentStacksCreateOrUpdateAtResourceGroupResponse,
  DeploymentStacksGetAtResourceGroupOptionalParams,
  DeploymentStacksGetAtResourceGroupResponse,
  DeploymentStacksDeleteAtResourceGroupOptionalParams,
  DeploymentStacksCreateOrUpdateAtSubscriptionOptionalParams,
  DeploymentStacksCreateOrUpdateAtSubscriptionResponse,
  DeploymentStacksGetAtSubscriptionOptionalParams,
  DeploymentStacksGetAtSubscriptionResponse,
  DeploymentStacksDeleteAtSubscriptionOptionalParams,
  DeploymentStacksCreateOrUpdateAtManagementGroupOptionalParams,
  DeploymentStacksCreateOrUpdateAtManagementGroupResponse,
  DeploymentStacksGetAtManagementGroupOptionalParams,
  DeploymentStacksGetAtManagementGroupResponse,
  DeploymentStacksDeleteAtManagementGroupOptionalParams,
  DeploymentStacksExportTemplateAtResourceGroupOptionalParams,
  DeploymentStacksExportTemplateAtResourceGroupResponse,
  DeploymentStacksExportTemplateAtSubscriptionOptionalParams,
  DeploymentStacksExportTemplateAtSubscriptionResponse,
  DeploymentStacksExportTemplateAtManagementGroupOptionalParams,
  DeploymentStacksExportTemplateAtManagementGroupResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a DeploymentStacks. */
export interface DeploymentStacks {
  /**
   * Lists all the Deployment Stacks within the specified resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listAtResourceGroup(
    resourceGroupName: string,
    options?: DeploymentStacksListAtResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<DeploymentStack>;
  /**
   * Lists all the Deployment Stacks within the specified subscription.
   * @param options The options parameters.
   */
  listAtSubscription(
    options?: DeploymentStacksListAtSubscriptionOptionalParams
  ): PagedAsyncIterableIterator<DeploymentStack>;
  /**
   * Lists all the Deployment Stacks within the specified management group.
   * @param managementGroupId Management Group.
   * @param options The options parameters.
   */
  listAtManagementGroup(
    managementGroupId: string,
    options?: DeploymentStacksListAtManagementGroupOptionalParams
  ): PagedAsyncIterableIterator<DeploymentStack>;
  /**
   * Creates or updates a Deployment Stack.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentStackName Name of the deployment stack.
   * @param deploymentStack Deployment Stack supplied to the operation.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAtResourceGroup(
    resourceGroupName: string,
    deploymentStackName: string,
    deploymentStack: DeploymentStack,
    options?: DeploymentStacksCreateOrUpdateAtResourceGroupOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<DeploymentStacksCreateOrUpdateAtResourceGroupResponse>,
      DeploymentStacksCreateOrUpdateAtResourceGroupResponse
    >
  >;
  /**
   * Creates or updates a Deployment Stack.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentStackName Name of the deployment stack.
   * @param deploymentStack Deployment Stack supplied to the operation.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAtResourceGroupAndWait(
    resourceGroupName: string,
    deploymentStackName: string,
    deploymentStack: DeploymentStack,
    options?: DeploymentStacksCreateOrUpdateAtResourceGroupOptionalParams
  ): Promise<DeploymentStacksCreateOrUpdateAtResourceGroupResponse>;
  /**
   * Gets a Deployment Stack with a given name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentStackName Name of the deployment stack.
   * @param options The options parameters.
   */
  getAtResourceGroup(
    resourceGroupName: string,
    deploymentStackName: string,
    options?: DeploymentStacksGetAtResourceGroupOptionalParams
  ): Promise<DeploymentStacksGetAtResourceGroupResponse>;
  /**
   * Deletes a Deployment Stack by name. When operation completes, status code 200 returned without
   * content.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentStackName Name of the deployment stack.
   * @param options The options parameters.
   */
  beginDeleteAtResourceGroup(
    resourceGroupName: string,
    deploymentStackName: string,
    options?: DeploymentStacksDeleteAtResourceGroupOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Deletes a Deployment Stack by name. When operation completes, status code 200 returned without
   * content.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentStackName Name of the deployment stack.
   * @param options The options parameters.
   */
  beginDeleteAtResourceGroupAndWait(
    resourceGroupName: string,
    deploymentStackName: string,
    options?: DeploymentStacksDeleteAtResourceGroupOptionalParams
  ): Promise<void>;
  /**
   * Creates or updates a Deployment Stack.
   * @param deploymentStackName Name of the deployment stack.
   * @param deploymentStack Deployment Stack supplied to the operation.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAtSubscription(
    deploymentStackName: string,
    deploymentStack: DeploymentStack,
    options?: DeploymentStacksCreateOrUpdateAtSubscriptionOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<DeploymentStacksCreateOrUpdateAtSubscriptionResponse>,
      DeploymentStacksCreateOrUpdateAtSubscriptionResponse
    >
  >;
  /**
   * Creates or updates a Deployment Stack.
   * @param deploymentStackName Name of the deployment stack.
   * @param deploymentStack Deployment Stack supplied to the operation.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAtSubscriptionAndWait(
    deploymentStackName: string,
    deploymentStack: DeploymentStack,
    options?: DeploymentStacksCreateOrUpdateAtSubscriptionOptionalParams
  ): Promise<DeploymentStacksCreateOrUpdateAtSubscriptionResponse>;
  /**
   * Gets a Deployment Stack with a given name.
   * @param deploymentStackName Name of the deployment stack.
   * @param options The options parameters.
   */
  getAtSubscription(
    deploymentStackName: string,
    options?: DeploymentStacksGetAtSubscriptionOptionalParams
  ): Promise<DeploymentStacksGetAtSubscriptionResponse>;
  /**
   * Deletes a Deployment Stack by name. When operation completes, status code 200 returned without
   * content.
   * @param deploymentStackName Name of the deployment stack.
   * @param options The options parameters.
   */
  beginDeleteAtSubscription(
    deploymentStackName: string,
    options?: DeploymentStacksDeleteAtSubscriptionOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Deletes a Deployment Stack by name. When operation completes, status code 200 returned without
   * content.
   * @param deploymentStackName Name of the deployment stack.
   * @param options The options parameters.
   */
  beginDeleteAtSubscriptionAndWait(
    deploymentStackName: string,
    options?: DeploymentStacksDeleteAtSubscriptionOptionalParams
  ): Promise<void>;
  /**
   * Creates or updates a Deployment Stack.
   * @param managementGroupId Management Group.
   * @param deploymentStackName Name of the deployment stack.
   * @param deploymentStack Deployment Stack supplied to the operation.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAtManagementGroup(
    managementGroupId: string,
    deploymentStackName: string,
    deploymentStack: DeploymentStack,
    options?: DeploymentStacksCreateOrUpdateAtManagementGroupOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<DeploymentStacksCreateOrUpdateAtManagementGroupResponse>,
      DeploymentStacksCreateOrUpdateAtManagementGroupResponse
    >
  >;
  /**
   * Creates or updates a Deployment Stack.
   * @param managementGroupId Management Group.
   * @param deploymentStackName Name of the deployment stack.
   * @param deploymentStack Deployment Stack supplied to the operation.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAtManagementGroupAndWait(
    managementGroupId: string,
    deploymentStackName: string,
    deploymentStack: DeploymentStack,
    options?: DeploymentStacksCreateOrUpdateAtManagementGroupOptionalParams
  ): Promise<DeploymentStacksCreateOrUpdateAtManagementGroupResponse>;
  /**
   * Gets a Deployment Stack with a given name.
   * @param managementGroupId Management Group.
   * @param deploymentStackName Name of the deployment stack.
   * @param options The options parameters.
   */
  getAtManagementGroup(
    managementGroupId: string,
    deploymentStackName: string,
    options?: DeploymentStacksGetAtManagementGroupOptionalParams
  ): Promise<DeploymentStacksGetAtManagementGroupResponse>;
  /**
   * Deletes a Deployment Stack by name. When operation completes, status code 200 returned without
   * content.
   * @param managementGroupId Management Group.
   * @param deploymentStackName Name of the deployment stack.
   * @param options The options parameters.
   */
  beginDeleteAtManagementGroup(
    managementGroupId: string,
    deploymentStackName: string,
    options?: DeploymentStacksDeleteAtManagementGroupOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Deletes a Deployment Stack by name. When operation completes, status code 200 returned without
   * content.
   * @param managementGroupId Management Group.
   * @param deploymentStackName Name of the deployment stack.
   * @param options The options parameters.
   */
  beginDeleteAtManagementGroupAndWait(
    managementGroupId: string,
    deploymentStackName: string,
    options?: DeploymentStacksDeleteAtManagementGroupOptionalParams
  ): Promise<void>;
  /**
   * Exports the template used to create the deployment stack.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentStackName Name of the deployment stack.
   * @param options The options parameters.
   */
  exportTemplateAtResourceGroup(
    resourceGroupName: string,
    deploymentStackName: string,
    options?: DeploymentStacksExportTemplateAtResourceGroupOptionalParams
  ): Promise<DeploymentStacksExportTemplateAtResourceGroupResponse>;
  /**
   * Exports the template used to create the deployment stack.
   * @param deploymentStackName Name of the deployment stack.
   * @param options The options parameters.
   */
  exportTemplateAtSubscription(
    deploymentStackName: string,
    options?: DeploymentStacksExportTemplateAtSubscriptionOptionalParams
  ): Promise<DeploymentStacksExportTemplateAtSubscriptionResponse>;
  /**
   * Exports the template used to create the deployment stack.
   * @param managementGroupId Management Group.
   * @param deploymentStackName Name of the deployment stack.
   * @param options The options parameters.
   */
  exportTemplateAtManagementGroup(
    managementGroupId: string,
    deploymentStackName: string,
    options?: DeploymentStacksExportTemplateAtManagementGroupOptionalParams
  ): Promise<DeploymentStacksExportTemplateAtManagementGroupResponse>;
}
