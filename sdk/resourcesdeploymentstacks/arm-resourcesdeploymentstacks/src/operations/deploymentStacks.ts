/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { DeploymentStacks } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DeploymentStacksClient } from "../deploymentStacksClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  DeploymentStack,
  DeploymentStacksListAtResourceGroupNextOptionalParams,
  DeploymentStacksListAtResourceGroupOptionalParams,
  DeploymentStacksListAtResourceGroupResponse,
  DeploymentStacksListAtSubscriptionNextOptionalParams,
  DeploymentStacksListAtSubscriptionOptionalParams,
  DeploymentStacksListAtSubscriptionResponse,
  DeploymentStacksListAtManagementGroupNextOptionalParams,
  DeploymentStacksListAtManagementGroupOptionalParams,
  DeploymentStacksListAtManagementGroupResponse,
  DeploymentStacksCreateOrUpdateAtResourceGroupOptionalParams,
  DeploymentStacksCreateOrUpdateAtResourceGroupResponse,
  DeploymentStacksGetAtResourceGroupOptionalParams,
  DeploymentStacksGetAtResourceGroupResponse,
  DeploymentStacksDeleteAtResourceGroupOptionalParams,
  DeploymentStacksCreateOrUpdateAtSubscriptionOptionalParams,
  DeploymentStacksCreateOrUpdateAtSubscriptionResponse,
  DeploymentStacksGetAtSubscriptionOptionalParams,
  DeploymentStacksGetAtSubscriptionResponse,
  DeploymentStacksDeleteAtSubscriptionOptionalParams,
  DeploymentStacksCreateOrUpdateAtManagementGroupOptionalParams,
  DeploymentStacksCreateOrUpdateAtManagementGroupResponse,
  DeploymentStacksGetAtManagementGroupOptionalParams,
  DeploymentStacksGetAtManagementGroupResponse,
  DeploymentStacksDeleteAtManagementGroupOptionalParams,
  DeploymentStacksExportTemplateAtResourceGroupOptionalParams,
  DeploymentStacksExportTemplateAtResourceGroupResponse,
  DeploymentStacksExportTemplateAtSubscriptionOptionalParams,
  DeploymentStacksExportTemplateAtSubscriptionResponse,
  DeploymentStacksExportTemplateAtManagementGroupOptionalParams,
  DeploymentStacksExportTemplateAtManagementGroupResponse,
  DeploymentStacksValidateStackAtResourceGroupOptionalParams,
  DeploymentStacksValidateStackAtResourceGroupResponse,
  DeploymentStacksValidateStackAtSubscriptionOptionalParams,
  DeploymentStacksValidateStackAtSubscriptionResponse,
  DeploymentStacksValidateStackAtManagementGroupOptionalParams,
  DeploymentStacksValidateStackAtManagementGroupResponse,
  DeploymentStacksListAtResourceGroupNextResponse,
  DeploymentStacksListAtSubscriptionNextResponse,
  DeploymentStacksListAtManagementGroupNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing DeploymentStacks operations. */
export class DeploymentStacksImpl implements DeploymentStacks {
  private readonly client: DeploymentStacksClient;

  /**
   * Initialize a new instance of the class DeploymentStacks class.
   * @param client Reference to the service client
   */
  constructor(client: DeploymentStacksClient) {
    this.client = client;
  }

  /**
   * Lists all the Deployment stacks within the specified Resource Group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listAtResourceGroup(
    resourceGroupName: string,
    options?: DeploymentStacksListAtResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<DeploymentStack> {
    const iter = this.listAtResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listAtResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings,
        );
      },
    };
  }

  private async *listAtResourceGroupPagingPage(
    resourceGroupName: string,
    options?: DeploymentStacksListAtResourceGroupOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<DeploymentStack[]> {
    let result: DeploymentStacksListAtResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listAtResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listAtResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listAtResourceGroupPagingAll(
    resourceGroupName: string,
    options?: DeploymentStacksListAtResourceGroupOptionalParams,
  ): AsyncIterableIterator<DeploymentStack> {
    for await (const page of this.listAtResourceGroupPagingPage(
      resourceGroupName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists all the Deployment stacks within the specified Subscription.
   * @param options The options parameters.
   */
  public listAtSubscription(
    options?: DeploymentStacksListAtSubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<DeploymentStack> {
    const iter = this.listAtSubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listAtSubscriptionPagingPage(options, settings);
      },
    };
  }

  private async *listAtSubscriptionPagingPage(
    options?: DeploymentStacksListAtSubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<DeploymentStack[]> {
    let result: DeploymentStacksListAtSubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listAtSubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listAtSubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listAtSubscriptionPagingAll(
    options?: DeploymentStacksListAtSubscriptionOptionalParams,
  ): AsyncIterableIterator<DeploymentStack> {
    for await (const page of this.listAtSubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Lists all the Deployment stacks within the specified Management Group.
   * @param managementGroupId Management Group id.
   * @param options The options parameters.
   */
  public listAtManagementGroup(
    managementGroupId: string,
    options?: DeploymentStacksListAtManagementGroupOptionalParams,
  ): PagedAsyncIterableIterator<DeploymentStack> {
    const iter = this.listAtManagementGroupPagingAll(
      managementGroupId,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listAtManagementGroupPagingPage(
          managementGroupId,
          options,
          settings,
        );
      },
    };
  }

  private async *listAtManagementGroupPagingPage(
    managementGroupId: string,
    options?: DeploymentStacksListAtManagementGroupOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<DeploymentStack[]> {
    let result: DeploymentStacksListAtManagementGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listAtManagementGroup(managementGroupId, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listAtManagementGroupNext(
        managementGroupId,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listAtManagementGroupPagingAll(
    managementGroupId: string,
    options?: DeploymentStacksListAtManagementGroupOptionalParams,
  ): AsyncIterableIterator<DeploymentStack> {
    for await (const page of this.listAtManagementGroupPagingPage(
      managementGroupId,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists all the Deployment stacks within the specified Resource Group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listAtResourceGroup(
    resourceGroupName: string,
    options?: DeploymentStacksListAtResourceGroupOptionalParams,
  ): Promise<DeploymentStacksListAtResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listAtResourceGroupOperationSpec,
    );
  }

  /**
   * Lists all the Deployment stacks within the specified Subscription.
   * @param options The options parameters.
   */
  private _listAtSubscription(
    options?: DeploymentStacksListAtSubscriptionOptionalParams,
  ): Promise<DeploymentStacksListAtSubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listAtSubscriptionOperationSpec,
    );
  }

  /**
   * Lists all the Deployment stacks within the specified Management Group.
   * @param managementGroupId Management Group id.
   * @param options The options parameters.
   */
  private _listAtManagementGroup(
    managementGroupId: string,
    options?: DeploymentStacksListAtManagementGroupOptionalParams,
  ): Promise<DeploymentStacksListAtManagementGroupResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, options },
      listAtManagementGroupOperationSpec,
    );
  }

  /**
   * Creates or updates a Deployment stack at Resource Group scope.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentStackName Name of the deployment stack.
   * @param deploymentStack Deployment stack supplied to the operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAtResourceGroup(
    resourceGroupName: string,
    deploymentStackName: string,
    deploymentStack: DeploymentStack,
    options?: DeploymentStacksCreateOrUpdateAtResourceGroupOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<DeploymentStacksCreateOrUpdateAtResourceGroupResponse>,
      DeploymentStacksCreateOrUpdateAtResourceGroupResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<DeploymentStacksCreateOrUpdateAtResourceGroupResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        deploymentStackName,
        deploymentStack,
        options,
      },
      spec: createOrUpdateAtResourceGroupOperationSpec,
    });
    const poller = await createHttpPoller<
      DeploymentStacksCreateOrUpdateAtResourceGroupResponse,
      OperationState<DeploymentStacksCreateOrUpdateAtResourceGroupResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates or updates a Deployment stack at Resource Group scope.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentStackName Name of the deployment stack.
   * @param deploymentStack Deployment stack supplied to the operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAtResourceGroupAndWait(
    resourceGroupName: string,
    deploymentStackName: string,
    deploymentStack: DeploymentStack,
    options?: DeploymentStacksCreateOrUpdateAtResourceGroupOptionalParams,
  ): Promise<DeploymentStacksCreateOrUpdateAtResourceGroupResponse> {
    const poller = await this.beginCreateOrUpdateAtResourceGroup(
      resourceGroupName,
      deploymentStackName,
      deploymentStack,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets a Deployment stack with a given name at Resource Group scope.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentStackName Name of the deployment stack.
   * @param options The options parameters.
   */
  getAtResourceGroup(
    resourceGroupName: string,
    deploymentStackName: string,
    options?: DeploymentStacksGetAtResourceGroupOptionalParams,
  ): Promise<DeploymentStacksGetAtResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, deploymentStackName, options },
      getAtResourceGroupOperationSpec,
    );
  }

  /**
   * Deletes a Deployment stack by name at Resource Group scope. When operation completes, status code
   * 200 returned without content.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentStackName Name of the deployment stack.
   * @param options The options parameters.
   */
  async beginDeleteAtResourceGroup(
    resourceGroupName: string,
    deploymentStackName: string,
    options?: DeploymentStacksDeleteAtResourceGroupOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, deploymentStackName, options },
      spec: deleteAtResourceGroupOperationSpec,
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes a Deployment stack by name at Resource Group scope. When operation completes, status code
   * 200 returned without content.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentStackName Name of the deployment stack.
   * @param options The options parameters.
   */
  async beginDeleteAtResourceGroupAndWait(
    resourceGroupName: string,
    deploymentStackName: string,
    options?: DeploymentStacksDeleteAtResourceGroupOptionalParams,
  ): Promise<void> {
    const poller = await this.beginDeleteAtResourceGroup(
      resourceGroupName,
      deploymentStackName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Creates or updates a Deployment stack at Subscription scope.
   * @param deploymentStackName Name of the deployment stack.
   * @param deploymentStack Deployment stack supplied to the operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAtSubscription(
    deploymentStackName: string,
    deploymentStack: DeploymentStack,
    options?: DeploymentStacksCreateOrUpdateAtSubscriptionOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<DeploymentStacksCreateOrUpdateAtSubscriptionResponse>,
      DeploymentStacksCreateOrUpdateAtSubscriptionResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<DeploymentStacksCreateOrUpdateAtSubscriptionResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { deploymentStackName, deploymentStack, options },
      spec: createOrUpdateAtSubscriptionOperationSpec,
    });
    const poller = await createHttpPoller<
      DeploymentStacksCreateOrUpdateAtSubscriptionResponse,
      OperationState<DeploymentStacksCreateOrUpdateAtSubscriptionResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates or updates a Deployment stack at Subscription scope.
   * @param deploymentStackName Name of the deployment stack.
   * @param deploymentStack Deployment stack supplied to the operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAtSubscriptionAndWait(
    deploymentStackName: string,
    deploymentStack: DeploymentStack,
    options?: DeploymentStacksCreateOrUpdateAtSubscriptionOptionalParams,
  ): Promise<DeploymentStacksCreateOrUpdateAtSubscriptionResponse> {
    const poller = await this.beginCreateOrUpdateAtSubscription(
      deploymentStackName,
      deploymentStack,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets a Deployment stack with a given name at Subscription scope.
   * @param deploymentStackName Name of the deployment stack.
   * @param options The options parameters.
   */
  getAtSubscription(
    deploymentStackName: string,
    options?: DeploymentStacksGetAtSubscriptionOptionalParams,
  ): Promise<DeploymentStacksGetAtSubscriptionResponse> {
    return this.client.sendOperationRequest(
      { deploymentStackName, options },
      getAtSubscriptionOperationSpec,
    );
  }

  /**
   * Deletes a Deployment stack by name at Subscription scope. When operation completes, status code 200
   * returned without content.
   * @param deploymentStackName Name of the deployment stack.
   * @param options The options parameters.
   */
  async beginDeleteAtSubscription(
    deploymentStackName: string,
    options?: DeploymentStacksDeleteAtSubscriptionOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { deploymentStackName, options },
      spec: deleteAtSubscriptionOperationSpec,
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes a Deployment stack by name at Subscription scope. When operation completes, status code 200
   * returned without content.
   * @param deploymentStackName Name of the deployment stack.
   * @param options The options parameters.
   */
  async beginDeleteAtSubscriptionAndWait(
    deploymentStackName: string,
    options?: DeploymentStacksDeleteAtSubscriptionOptionalParams,
  ): Promise<void> {
    const poller = await this.beginDeleteAtSubscription(
      deploymentStackName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Creates or updates a Deployment stack at Management Group scope.
   * @param managementGroupId Management Group id.
   * @param deploymentStackName Name of the deployment stack.
   * @param deploymentStack Deployment stack supplied to the operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAtManagementGroup(
    managementGroupId: string,
    deploymentStackName: string,
    deploymentStack: DeploymentStack,
    options?: DeploymentStacksCreateOrUpdateAtManagementGroupOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<DeploymentStacksCreateOrUpdateAtManagementGroupResponse>,
      DeploymentStacksCreateOrUpdateAtManagementGroupResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<DeploymentStacksCreateOrUpdateAtManagementGroupResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        managementGroupId,
        deploymentStackName,
        deploymentStack,
        options,
      },
      spec: createOrUpdateAtManagementGroupOperationSpec,
    });
    const poller = await createHttpPoller<
      DeploymentStacksCreateOrUpdateAtManagementGroupResponse,
      OperationState<DeploymentStacksCreateOrUpdateAtManagementGroupResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates or updates a Deployment stack at Management Group scope.
   * @param managementGroupId Management Group id.
   * @param deploymentStackName Name of the deployment stack.
   * @param deploymentStack Deployment stack supplied to the operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAtManagementGroupAndWait(
    managementGroupId: string,
    deploymentStackName: string,
    deploymentStack: DeploymentStack,
    options?: DeploymentStacksCreateOrUpdateAtManagementGroupOptionalParams,
  ): Promise<DeploymentStacksCreateOrUpdateAtManagementGroupResponse> {
    const poller = await this.beginCreateOrUpdateAtManagementGroup(
      managementGroupId,
      deploymentStackName,
      deploymentStack,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets a Deployment stack with a given name at Management Group scope.
   * @param managementGroupId Management Group id.
   * @param deploymentStackName Name of the deployment stack.
   * @param options The options parameters.
   */
  getAtManagementGroup(
    managementGroupId: string,
    deploymentStackName: string,
    options?: DeploymentStacksGetAtManagementGroupOptionalParams,
  ): Promise<DeploymentStacksGetAtManagementGroupResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, deploymentStackName, options },
      getAtManagementGroupOperationSpec,
    );
  }

  /**
   * Deletes a Deployment stack by name at Management Group scope. When operation completes, status code
   * 200 returned without content.
   * @param managementGroupId Management Group id.
   * @param deploymentStackName Name of the deployment stack.
   * @param options The options parameters.
   */
  async beginDeleteAtManagementGroup(
    managementGroupId: string,
    deploymentStackName: string,
    options?: DeploymentStacksDeleteAtManagementGroupOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { managementGroupId, deploymentStackName, options },
      spec: deleteAtManagementGroupOperationSpec,
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes a Deployment stack by name at Management Group scope. When operation completes, status code
   * 200 returned without content.
   * @param managementGroupId Management Group id.
   * @param deploymentStackName Name of the deployment stack.
   * @param options The options parameters.
   */
  async beginDeleteAtManagementGroupAndWait(
    managementGroupId: string,
    deploymentStackName: string,
    options?: DeploymentStacksDeleteAtManagementGroupOptionalParams,
  ): Promise<void> {
    const poller = await this.beginDeleteAtManagementGroup(
      managementGroupId,
      deploymentStackName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Exports the template used to create the Deployment stack at Resource Group scope.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentStackName Name of the deployment stack.
   * @param options The options parameters.
   */
  exportTemplateAtResourceGroup(
    resourceGroupName: string,
    deploymentStackName: string,
    options?: DeploymentStacksExportTemplateAtResourceGroupOptionalParams,
  ): Promise<DeploymentStacksExportTemplateAtResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, deploymentStackName, options },
      exportTemplateAtResourceGroupOperationSpec,
    );
  }

  /**
   * Exports the template used to create the Deployment stack at Subscription scope.
   * @param deploymentStackName Name of the deployment stack.
   * @param options The options parameters.
   */
  exportTemplateAtSubscription(
    deploymentStackName: string,
    options?: DeploymentStacksExportTemplateAtSubscriptionOptionalParams,
  ): Promise<DeploymentStacksExportTemplateAtSubscriptionResponse> {
    return this.client.sendOperationRequest(
      { deploymentStackName, options },
      exportTemplateAtSubscriptionOperationSpec,
    );
  }

  /**
   * Exports the template used to create the Deployment stack at Management Group scope.
   * @param managementGroupId Management Group id.
   * @param deploymentStackName Name of the deployment stack.
   * @param options The options parameters.
   */
  exportTemplateAtManagementGroup(
    managementGroupId: string,
    deploymentStackName: string,
    options?: DeploymentStacksExportTemplateAtManagementGroupOptionalParams,
  ): Promise<DeploymentStacksExportTemplateAtManagementGroupResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, deploymentStackName, options },
      exportTemplateAtManagementGroupOperationSpec,
    );
  }

  /**
   * Runs preflight validation on the Resource Group scoped Deployment stack template to verify its
   * acceptance to Azure Resource Manager.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentStackName Name of the deployment stack.
   * @param deploymentStack Deployment stack to validate.
   * @param options The options parameters.
   */
  async beginValidateStackAtResourceGroup(
    resourceGroupName: string,
    deploymentStackName: string,
    deploymentStack: DeploymentStack,
    options?: DeploymentStacksValidateStackAtResourceGroupOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<DeploymentStacksValidateStackAtResourceGroupResponse>,
      DeploymentStacksValidateStackAtResourceGroupResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<DeploymentStacksValidateStackAtResourceGroupResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        deploymentStackName,
        deploymentStack,
        options,
      },
      spec: validateStackAtResourceGroupOperationSpec,
    });
    const poller = await createHttpPoller<
      DeploymentStacksValidateStackAtResourceGroupResponse,
      OperationState<DeploymentStacksValidateStackAtResourceGroupResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Runs preflight validation on the Resource Group scoped Deployment stack template to verify its
   * acceptance to Azure Resource Manager.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param deploymentStackName Name of the deployment stack.
   * @param deploymentStack Deployment stack to validate.
   * @param options The options parameters.
   */
  async beginValidateStackAtResourceGroupAndWait(
    resourceGroupName: string,
    deploymentStackName: string,
    deploymentStack: DeploymentStack,
    options?: DeploymentStacksValidateStackAtResourceGroupOptionalParams,
  ): Promise<DeploymentStacksValidateStackAtResourceGroupResponse> {
    const poller = await this.beginValidateStackAtResourceGroup(
      resourceGroupName,
      deploymentStackName,
      deploymentStack,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Runs preflight validation on the Subscription scoped Deployment stack template to verify its
   * acceptance to Azure Resource Manager.
   * @param deploymentStackName Name of the deployment stack.
   * @param deploymentStack Deployment stack to validate.
   * @param options The options parameters.
   */
  async beginValidateStackAtSubscription(
    deploymentStackName: string,
    deploymentStack: DeploymentStack,
    options?: DeploymentStacksValidateStackAtSubscriptionOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<DeploymentStacksValidateStackAtSubscriptionResponse>,
      DeploymentStacksValidateStackAtSubscriptionResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<DeploymentStacksValidateStackAtSubscriptionResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { deploymentStackName, deploymentStack, options },
      spec: validateStackAtSubscriptionOperationSpec,
    });
    const poller = await createHttpPoller<
      DeploymentStacksValidateStackAtSubscriptionResponse,
      OperationState<DeploymentStacksValidateStackAtSubscriptionResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Runs preflight validation on the Subscription scoped Deployment stack template to verify its
   * acceptance to Azure Resource Manager.
   * @param deploymentStackName Name of the deployment stack.
   * @param deploymentStack Deployment stack to validate.
   * @param options The options parameters.
   */
  async beginValidateStackAtSubscriptionAndWait(
    deploymentStackName: string,
    deploymentStack: DeploymentStack,
    options?: DeploymentStacksValidateStackAtSubscriptionOptionalParams,
  ): Promise<DeploymentStacksValidateStackAtSubscriptionResponse> {
    const poller = await this.beginValidateStackAtSubscription(
      deploymentStackName,
      deploymentStack,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Runs preflight validation on the Management Group scoped Deployment stack template to verify its
   * acceptance to Azure Resource Manager.
   * @param managementGroupId Management Group id.
   * @param deploymentStackName Name of the deployment stack.
   * @param deploymentStack Deployment stack to validate.
   * @param options The options parameters.
   */
  async beginValidateStackAtManagementGroup(
    managementGroupId: string,
    deploymentStackName: string,
    deploymentStack: DeploymentStack,
    options?: DeploymentStacksValidateStackAtManagementGroupOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<DeploymentStacksValidateStackAtManagementGroupResponse>,
      DeploymentStacksValidateStackAtManagementGroupResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<DeploymentStacksValidateStackAtManagementGroupResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        managementGroupId,
        deploymentStackName,
        deploymentStack,
        options,
      },
      spec: validateStackAtManagementGroupOperationSpec,
    });
    const poller = await createHttpPoller<
      DeploymentStacksValidateStackAtManagementGroupResponse,
      OperationState<DeploymentStacksValidateStackAtManagementGroupResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Runs preflight validation on the Management Group scoped Deployment stack template to verify its
   * acceptance to Azure Resource Manager.
   * @param managementGroupId Management Group id.
   * @param deploymentStackName Name of the deployment stack.
   * @param deploymentStack Deployment stack to validate.
   * @param options The options parameters.
   */
  async beginValidateStackAtManagementGroupAndWait(
    managementGroupId: string,
    deploymentStackName: string,
    deploymentStack: DeploymentStack,
    options?: DeploymentStacksValidateStackAtManagementGroupOptionalParams,
  ): Promise<DeploymentStacksValidateStackAtManagementGroupResponse> {
    const poller = await this.beginValidateStackAtManagementGroup(
      managementGroupId,
      deploymentStackName,
      deploymentStack,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListAtResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListAtResourceGroup method.
   * @param options The options parameters.
   */
  private _listAtResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: DeploymentStacksListAtResourceGroupNextOptionalParams,
  ): Promise<DeploymentStacksListAtResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listAtResourceGroupNextOperationSpec,
    );
  }

  /**
   * ListAtSubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListAtSubscription method.
   * @param options The options parameters.
   */
  private _listAtSubscriptionNext(
    nextLink: string,
    options?: DeploymentStacksListAtSubscriptionNextOptionalParams,
  ): Promise<DeploymentStacksListAtSubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAtSubscriptionNextOperationSpec,
    );
  }

  /**
   * ListAtManagementGroupNext
   * @param managementGroupId Management Group id.
   * @param nextLink The nextLink from the previous successful call to the ListAtManagementGroup method.
   * @param options The options parameters.
   */
  private _listAtManagementGroupNext(
    managementGroupId: string,
    nextLink: string,
    options?: DeploymentStacksListAtManagementGroupNextOptionalParams,
  ): Promise<DeploymentStacksListAtManagementGroupNextResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, nextLink, options },
      listAtManagementGroupNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listAtResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentStacks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentStackListResult,
    },
    default: {
      bodyMapper: Mappers.DeploymentStacksError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listAtSubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deploymentStacks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentStackListResult,
    },
    default: {
      bodyMapper: Mappers.DeploymentStacksError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listAtManagementGroupOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Resources/deploymentStacks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentStackListResult,
    },
    default: {
      bodyMapper: Mappers.DeploymentStacksError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.managementGroupId],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateAtResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentStacks/{deploymentStackName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentStack,
    },
    201: {
      bodyMapper: Mappers.DeploymentStack,
    },
    202: {
      bodyMapper: Mappers.DeploymentStack,
    },
    204: {
      bodyMapper: Mappers.DeploymentStack,
    },
    default: {
      bodyMapper: Mappers.DeploymentStacksError,
    },
  },
  requestBody: Parameters.deploymentStack,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.deploymentStackName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const getAtResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentStacks/{deploymentStackName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentStack,
    },
    default: {
      bodyMapper: Mappers.DeploymentStacksError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.deploymentStackName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const deleteAtResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentStacks/{deploymentStackName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.DeploymentStacksError,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.unmanageActionResources,
    Parameters.unmanageActionResourceGroups,
    Parameters.unmanageActionManagementGroups,
    Parameters.bypassStackOutOfSyncError,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.deploymentStackName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateAtSubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deploymentStacks/{deploymentStackName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentStack,
    },
    201: {
      bodyMapper: Mappers.DeploymentStack,
    },
    202: {
      bodyMapper: Mappers.DeploymentStack,
    },
    204: {
      bodyMapper: Mappers.DeploymentStack,
    },
    default: {
      bodyMapper: Mappers.DeploymentStacksError,
    },
  },
  requestBody: Parameters.deploymentStack,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.deploymentStackName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const getAtSubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deploymentStacks/{deploymentStackName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentStack,
    },
    default: {
      bodyMapper: Mappers.DeploymentStacksError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.deploymentStackName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const deleteAtSubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deploymentStacks/{deploymentStackName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.DeploymentStacksError,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.unmanageActionResources,
    Parameters.unmanageActionResourceGroups,
    Parameters.unmanageActionManagementGroups,
    Parameters.bypassStackOutOfSyncError,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.deploymentStackName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateAtManagementGroupOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Resources/deploymentStacks/{deploymentStackName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentStack,
    },
    201: {
      bodyMapper: Mappers.DeploymentStack,
    },
    202: {
      bodyMapper: Mappers.DeploymentStack,
    },
    204: {
      bodyMapper: Mappers.DeploymentStack,
    },
    default: {
      bodyMapper: Mappers.DeploymentStacksError,
    },
  },
  requestBody: Parameters.deploymentStack,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.deploymentStackName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const getAtManagementGroupOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Resources/deploymentStacks/{deploymentStackName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentStack,
    },
    default: {
      bodyMapper: Mappers.DeploymentStacksError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.deploymentStackName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const deleteAtManagementGroupOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Resources/deploymentStacks/{deploymentStackName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.DeploymentStacksError,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.unmanageActionResources,
    Parameters.unmanageActionResourceGroups,
    Parameters.unmanageActionManagementGroups,
    Parameters.bypassStackOutOfSyncError,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.deploymentStackName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const exportTemplateAtResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentStacks/{deploymentStackName}/exportTemplate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentStackTemplateDefinition,
    },
    default: {
      bodyMapper: Mappers.DeploymentStacksError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.deploymentStackName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const exportTemplateAtSubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deploymentStacks/{deploymentStackName}/exportTemplate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentStackTemplateDefinition,
    },
    default: {
      bodyMapper: Mappers.DeploymentStacksError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.deploymentStackName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const exportTemplateAtManagementGroupOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Resources/deploymentStacks/{deploymentStackName}/exportTemplate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentStackTemplateDefinition,
    },
    default: {
      bodyMapper: Mappers.DeploymentStacksError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.deploymentStackName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const validateStackAtResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentStacks/{deploymentStackName}/validate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentStackValidateResult,
    },
    201: {
      bodyMapper: Mappers.DeploymentStackValidateResult,
    },
    202: {
      bodyMapper: Mappers.DeploymentStackValidateResult,
    },
    204: {
      bodyMapper: Mappers.DeploymentStackValidateResult,
    },
    default: {
      bodyMapper: Mappers.DeploymentStacksError,
    },
  },
  requestBody: Parameters.deploymentStack,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.deploymentStackName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const validateStackAtSubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deploymentStacks/{deploymentStackName}/validate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentStackValidateResult,
    },
    201: {
      bodyMapper: Mappers.DeploymentStackValidateResult,
    },
    202: {
      bodyMapper: Mappers.DeploymentStackValidateResult,
    },
    204: {
      bodyMapper: Mappers.DeploymentStackValidateResult,
    },
    default: {
      bodyMapper: Mappers.DeploymentStacksError,
    },
  },
  requestBody: Parameters.deploymentStack,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.deploymentStackName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const validateStackAtManagementGroupOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Resources/deploymentStacks/{deploymentStackName}/validate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentStackValidateResult,
    },
    201: {
      bodyMapper: Mappers.DeploymentStackValidateResult,
    },
    202: {
      bodyMapper: Mappers.DeploymentStackValidateResult,
    },
    204: {
      bodyMapper: Mappers.DeploymentStackValidateResult,
    },
    default: {
      bodyMapper: Mappers.DeploymentStacksError,
    },
  },
  requestBody: Parameters.deploymentStack,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.deploymentStackName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listAtResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentStackListResult,
    },
    default: {
      bodyMapper: Mappers.DeploymentStacksError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listAtSubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentStackListResult,
    },
    default: {
      bodyMapper: Mappers.DeploymentStacksError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listAtManagementGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentStackListResult,
    },
    default: {
      bodyMapper: Mappers.DeploymentStacksError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
