/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/recoveryServicesMappers";
import * as Parameters from "../models/parameters";
import { RecoveryServicesClientContext } from "../recoveryServicesClientContext";

/** Class representing a RecoveryServices. */
export class RecoveryServices {
  private readonly client: RecoveryServicesClientContext;

  /**
   * Create a RecoveryServices.
   * @param {RecoveryServicesClientContext} client Reference to the service client.
   */
  constructor(client: RecoveryServicesClientContext) {
    this.client = client;
  }

  /**
   * @summary API to check for resource name availability.
   * A name is available if no other resource exists that has the same SubscriptionId, Resource Name
   * and Type
   * or if one or more such resources exist, each of these must be GC'd and their time of deletion be
   * more than 24 Hours Ago
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param location Location of the resource
   * @param input Contains information about Resource type and Resource name
   * @param [options] The optional parameters
   * @returns Promise<Models.RecoveryServicesCheckNameAvailabilityResponse>
   */
  checkNameAvailability(resourceGroupName: string, location: string, input: Models.CheckNameAvailabilityParameters, options?: msRest.RequestOptionsBase): Promise<Models.RecoveryServicesCheckNameAvailabilityResponse>;
  /**
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param location Location of the resource
   * @param input Contains information about Resource type and Resource name
   * @param callback The callback
   */
  checkNameAvailability(resourceGroupName: string, location: string, input: Models.CheckNameAvailabilityParameters, callback: msRest.ServiceCallback<Models.CheckNameAvailabilityResult>): void;
  /**
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param location Location of the resource
   * @param input Contains information about Resource type and Resource name
   * @param options The optional parameters
   * @param callback The callback
   */
  checkNameAvailability(resourceGroupName: string, location: string, input: Models.CheckNameAvailabilityParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CheckNameAvailabilityResult>): void;
  checkNameAvailability(resourceGroupName: string, location: string, input: Models.CheckNameAvailabilityParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CheckNameAvailabilityResult>, callback?: msRest.ServiceCallback<Models.CheckNameAvailabilityResult>): Promise<Models.RecoveryServicesCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        location,
        input,
        options
      },
      checkNameAvailabilityOperationSpec,
      callback) as Promise<Models.RecoveryServicesCheckNameAvailabilityResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const checkNameAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/locations/{location}/checkNameAvailability",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "input",
    mapper: {
      ...Mappers.CheckNameAvailabilityParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
