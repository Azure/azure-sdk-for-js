/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Usages } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { RecoveryServicesClient } from "../recoveryServicesClient";
import {
  VaultUsage,
  UsagesListByVaultsOptionalParams,
  UsagesListByVaultsResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Usages operations. */
export class UsagesImpl implements Usages {
  private readonly client: RecoveryServicesClient;

  /**
   * Initialize a new instance of the class Usages class.
   * @param client Reference to the service client
   */
  constructor(client: RecoveryServicesClient) {
    this.client = client;
  }

  /**
   * Fetches the usages of the vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param vaultName The name of the recovery services vault.
   * @param options The options parameters.
   */
  public listByVaults(
    resourceGroupName: string,
    vaultName: string,
    options?: UsagesListByVaultsOptionalParams
  ): PagedAsyncIterableIterator<VaultUsage> {
    const iter = this.listByVaultsPagingAll(
      resourceGroupName,
      vaultName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByVaultsPagingPage(
          resourceGroupName,
          vaultName,
          options
        );
      }
    };
  }

  private async *listByVaultsPagingPage(
    resourceGroupName: string,
    vaultName: string,
    options?: UsagesListByVaultsOptionalParams
  ): AsyncIterableIterator<VaultUsage[]> {
    let result = await this._listByVaults(
      resourceGroupName,
      vaultName,
      options
    );
    yield result.value || [];
  }

  private async *listByVaultsPagingAll(
    resourceGroupName: string,
    vaultName: string,
    options?: UsagesListByVaultsOptionalParams
  ): AsyncIterableIterator<VaultUsage> {
    for await (const page of this.listByVaultsPagingPage(
      resourceGroupName,
      vaultName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Fetches the usages of the vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   *                          present.
   * @param vaultName The name of the recovery services vault.
   * @param options The options parameters.
   */
  private _listByVaults(
    resourceGroupName: string,
    vaultName: string,
    options?: UsagesListByVaultsOptionalParams
  ): Promise<UsagesListByVaultsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, vaultName, options },
      listByVaultsOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByVaultsOperationSpec: coreClient.OperationSpec = {
  path:
    "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/usages",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VaultUsageList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
