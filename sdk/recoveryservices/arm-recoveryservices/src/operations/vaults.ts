/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/vaultsMappers";
import * as Parameters from "../models/parameters";
import { RecoveryServicesClientContext } from "../recoveryServicesClientContext";

/** Class representing a Vaults. */
export class Vaults {
  private readonly client: RecoveryServicesClientContext;

  /**
   * Create a Vaults.
   * @param {RecoveryServicesClientContext} client Reference to the service client.
   */
  constructor(client: RecoveryServicesClientContext) {
    this.client = client;
  }

  /**
   * Fetches all the resources of the specified type in the subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.VaultsListBySubscriptionIdResponse>
   */
  listBySubscriptionId(options?: msRest.RequestOptionsBase): Promise<Models.VaultsListBySubscriptionIdResponse>;
  /**
   * @param callback The callback
   */
  listBySubscriptionId(callback: msRest.ServiceCallback<Models.VaultList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionId(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VaultList>): void;
  listBySubscriptionId(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VaultList>, callback?: msRest.ServiceCallback<Models.VaultList>): Promise<Models.VaultsListBySubscriptionIdResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionIdOperationSpec,
      callback) as Promise<Models.VaultsListBySubscriptionIdResponse>;
  }

  /**
   * Retrieve a list of Vaults.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param [options] The optional parameters
   * @returns Promise<Models.VaultsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.VaultsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.VaultList>): void;
  /**
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VaultList>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VaultList>, callback?: msRest.ServiceCallback<Models.VaultList>): Promise<Models.VaultsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.VaultsListByResourceGroupResponse>;
  }

  /**
   * Get the Vault details.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param vaultName The name of the recovery services vault.
   * @param [options] The optional parameters
   * @returns Promise<Models.VaultsGetResponse>
   */
  get(resourceGroupName: string, vaultName: string, options?: msRest.RequestOptionsBase): Promise<Models.VaultsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param vaultName The name of the recovery services vault.
   * @param callback The callback
   */
  get(resourceGroupName: string, vaultName: string, callback: msRest.ServiceCallback<Models.Vault>): void;
  /**
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param vaultName The name of the recovery services vault.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, vaultName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Vault>): void;
  get(resourceGroupName: string, vaultName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Vault>, callback?: msRest.ServiceCallback<Models.Vault>): Promise<Models.VaultsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vaultName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.VaultsGetResponse>;
  }

  /**
   * Creates or updates a Recovery Services vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param vaultName The name of the recovery services vault.
   * @param vault Recovery Services Vault to be created.
   * @param [options] The optional parameters
   * @returns Promise<Models.VaultsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, vaultName: string, vault: Models.Vault, options?: msRest.RequestOptionsBase): Promise<Models.VaultsCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param vaultName The name of the recovery services vault.
   * @param vault Recovery Services Vault to be created.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, vaultName: string, vault: Models.Vault, callback: msRest.ServiceCallback<Models.Vault>): void;
  /**
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param vaultName The name of the recovery services vault.
   * @param vault Recovery Services Vault to be created.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, vaultName: string, vault: Models.Vault, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Vault>): void;
  createOrUpdate(resourceGroupName: string, vaultName: string, vault: Models.Vault, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Vault>, callback?: msRest.ServiceCallback<Models.Vault>): Promise<Models.VaultsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vaultName,
        vault,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.VaultsCreateOrUpdateResponse>;
  }

  /**
   * Deletes a vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param vaultName The name of the recovery services vault.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, vaultName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param vaultName The name of the recovery services vault.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, vaultName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param vaultName The name of the recovery services vault.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, vaultName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, vaultName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vaultName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Updates the vault.
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param vaultName The name of the recovery services vault.
   * @param vault Recovery Services Vault to be created.
   * @param [options] The optional parameters
   * @returns Promise<Models.VaultsUpdateResponse>
   */
  update(resourceGroupName: string, vaultName: string, vault: Models.PatchVault, options?: msRest.RequestOptionsBase): Promise<Models.VaultsUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param vaultName The name of the recovery services vault.
   * @param vault Recovery Services Vault to be created.
   * @param callback The callback
   */
  update(resourceGroupName: string, vaultName: string, vault: Models.PatchVault, callback: msRest.ServiceCallback<Models.Vault>): void;
  /**
   * @param resourceGroupName The name of the resource group where the recovery services vault is
   * present.
   * @param vaultName The name of the recovery services vault.
   * @param vault Recovery Services Vault to be created.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, vaultName: string, vault: Models.PatchVault, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Vault>): void;
  update(resourceGroupName: string, vaultName: string, vault: Models.PatchVault, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Vault>, callback?: msRest.ServiceCallback<Models.Vault>): Promise<Models.VaultsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        vaultName,
        vault,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.VaultsUpdateResponse>;
  }

  /**
   * Fetches all the resources of the specified type in the subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.VaultsListBySubscriptionIdNextResponse>
   */
  listBySubscriptionIdNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.VaultsListBySubscriptionIdNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionIdNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.VaultList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionIdNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VaultList>): void;
  listBySubscriptionIdNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VaultList>, callback?: msRest.ServiceCallback<Models.VaultList>): Promise<Models.VaultsListBySubscriptionIdNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionIdNextOperationSpec,
      callback) as Promise<Models.VaultsListBySubscriptionIdNextResponse>;
  }

  /**
   * Retrieve a list of Vaults.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.VaultsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.VaultsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.VaultList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VaultList>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VaultList>, callback?: msRest.ServiceCallback<Models.VaultList>): Promise<Models.VaultsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.VaultsListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listBySubscriptionIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/vaults",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VaultList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VaultList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Vault
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "vault",
    mapper: {
      ...Mappers.Vault,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Vault
    },
    201: {
      bodyMapper: Mappers.Vault
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.vaultName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "vault",
    mapper: {
      ...Mappers.PatchVault,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Vault
    },
    201: {
      bodyMapper: Mappers.Vault
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listBySubscriptionIdNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VaultList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VaultList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
