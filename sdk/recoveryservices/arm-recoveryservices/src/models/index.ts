/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type ResourceCertificateDetailsUnion =
  | ResourceCertificateDetails
  | ResourceCertificateAndAadDetails
  | ResourceCertificateAndAcsDetails;

/** Details of the certificate to be uploaded to the vault. */
export interface CertificateRequest {
  /** Raw certificate data. */
  properties?: RawCertificateData;
}

/** Raw certificate data. */
export interface RawCertificateData {
  /** Specifies the authentication type. */
  authType?: AuthType;
  /** The base64 encoded certificate raw data string */
  certificate?: Uint8Array;
}

/** Certificate corresponding to a vault that can be used by clients to register themselves with the vault. */
export interface VaultCertificateResponse {
  /**
   * Resource name associated with the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/...
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Resource Id represents the complete path to the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** Certificate details representing the Vault credentials. */
  properties?: ResourceCertificateDetailsUnion;
}

/** Certificate details representing the Vault credentials. */
export interface ResourceCertificateDetails {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  authType: "AzureActiveDirectory" | "AccessControlService";
  /** The base64 encoded certificate raw data string. */
  certificate?: Uint8Array;
  /** Certificate friendly name. */
  friendlyName?: string;
  /** Certificate issuer. */
  issuer?: string;
  /** Resource ID of the vault. */
  resourceId?: number;
  /** Certificate Subject Name. */
  subject?: string;
  /** Certificate thumbprint. */
  thumbprint?: string;
  /** Certificate Validity start Date time. */
  validFrom?: Date;
  /** Certificate Validity End Date time. */
  validTo?: Date;
}

/** Replication usages for vault. */
export interface ReplicationUsageList {
  /** The list of replication usages for the given vault. */
  value?: ReplicationUsage[];
}

/** Replication usages of a vault. */
export interface ReplicationUsage {
  /** Summary of the replication monitoring data for this vault. */
  monitoringSummary?: MonitoringSummary;
  /** Summary of the replication jobs data for this vault. */
  jobsSummary?: JobsSummary;
  /** Number of replication protected items for this vault. */
  protectedItemCount?: number;
  /** Number of replication recovery plans for this vault. */
  recoveryPlanCount?: number;
  /** Number of servers registered to this vault. */
  registeredServersCount?: number;
  /** The authentication type of recovery service providers in the vault. */
  recoveryServicesProviderAuthType?: number;
}

/** Summary of the replication monitoring data for this vault. */
export interface MonitoringSummary {
  /** Count of unhealthy VMs. */
  unHealthyVmCount?: number;
  /** Count of unhealthy replication providers. */
  unHealthyProviderCount?: number;
  /** Count of all critical warnings. */
  eventsCount?: number;
  /** Count of all deprecated recovery service providers. */
  deprecatedProviderCount?: number;
  /** Count of all the supported recovery service providers. */
  supportedProviderCount?: number;
  /** Count of all the unsupported recovery service providers. */
  unsupportedProviderCount?: number;
}

/** Summary of the replication job data for this vault. */
export interface JobsSummary {
  /** Count of failed jobs. */
  failedJobs?: number;
  /** Count of suspended jobs. */
  suspendedJobs?: number;
  /** Count of in-progress jobs. */
  inProgressJobs?: number;
}

/** Class which represent the stamps associated with the vault. */
export interface PrivateLinkResources {
  /** A collection of private link resources */
  value?: PrivateLinkResource[];
  /** Link to the next chunk of the response */
  nextLink?: string;
}

/** Information of the private link resource. */
export interface PrivateLinkResource {
  /**
   * Fully qualified identifier of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Name of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * e.g. Microsoft.RecoveryServices/vaults/privateLinkResources
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * e.g. f9ad6492-33d4-4690-9999-6bfd52a0d081 (Backup) or f9ad6492-33d4-4690-9999-6bfd52a0d082 (SiteRecovery)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly groupId?: string;
  /**
   * [backup-ecs1, backup-prot1, backup-prot1b, backup-prot1c, backup-id1]
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly requiredMembers?: string[];
  /**
   * The private link resource Private link DNS zone name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly requiredZoneNames?: string[];
}

/** An error response from Azure Backup. */
export interface CloudError {
  /** The resource management error response. */
  error?: ErrorModel;
}

/** The resource management error response. */
export interface ErrorModel {
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorModel[];
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** Resource Name availability input parameters - Resource type and resource name */
export interface CheckNameAvailabilityParameters {
  /** Describes the Resource type: Microsoft.RecoveryServices/Vaults */
  type?: string;
  /** Resource name for which availability needs to be checked */
  name?: string;
}

/** Response for check name availability API. Resource provider will set availability as true | false. */
export interface CheckNameAvailabilityResult {
  nameAvailable?: boolean;
  reason?: string;
  message?: string;
}

/** Capabilities information */
export interface CapabilitiesProperties {
  dnsZones?: DNSZone[];
}

/** DNSZone information */
export interface DNSZone {
  /** Subresource type for vault AzureBackup, AzureBackup_secondary or AzureSiteRecovery */
  subResource?: VaultSubResourceType;
}

/** Base class for request and response capabilities information for Microsoft.RecoveryServices */
export interface ResourceCapabilitiesBase {
  /** Describes the Resource type: Microsoft.RecoveryServices/Vaults */
  type: string;
}

/** Capabilities properties in response */
export interface CapabilitiesResponseProperties {
  dnsZones?: DNSZoneResponse[];
}

/** The response model for a list of Vaults. */
export interface VaultList {
  value?: Vault[];
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly nextLink?: string;
}

/** Identity for the resource. */
export interface IdentityData {
  /**
   * The principal ID of resource identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identities. */
  type: ResourceIdentityType;
  /** The list of user-assigned identities associated with the resource. The user-assigned identity dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'. */
  userAssignedIdentities?: { [propertyName: string]: UserIdentity };
}

/** A resource identity that is managed by the user of the service. */
export interface UserIdentity {
  /**
   * The principal ID of the user-assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client ID of the user-assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** Properties of the vault. */
export interface VaultProperties {
  /**
   * Provisioning State.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** Details for upgrading vault. */
  upgradeDetails?: UpgradeDetails;
  /**
   * List of private endpoint connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateEndpointConnections?: PrivateEndpointConnectionVaultProperties[];
  /**
   * Private endpoint state for backup.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateEndpointStateForBackup?: VaultPrivateEndpointState;
  /**
   * Private endpoint state for site recovery.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateEndpointStateForSiteRecovery?: VaultPrivateEndpointState;
  /** Customer Managed Key details of the resource. */
  encryption?: VaultPropertiesEncryption;
  /** The details of the latest move operation performed on the Azure Resource */
  moveDetails?: VaultPropertiesMoveDetails;
  /**
   * The State of the Resource after the move operation
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly moveState?: ResourceMoveState;
  /**
   * Backup storage version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly backupStorageVersion?: BackupStorageVersion;
  /** property to enable or disable resource provider inbound network traffic from public clients */
  publicNetworkAccess?: PublicNetworkAccess;
  /** Monitoring Settings of the vault */
  monitoringSettings?: MonitoringSettings;
  /** The redundancy Settings of a Vault */
  redundancySettings?: VaultPropertiesRedundancySettings;
  /** Security Settings of the vault */
  securitySettings?: SecuritySettings;
}

/** Details for upgrading vault. */
export interface UpgradeDetails {
  /**
   * ID of the vault upgrade operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operationId?: string;
  /**
   * UTC time at which the upgrade operation has started.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startTimeUtc?: Date;
  /**
   * UTC time at which the upgrade operation status was last updated.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastUpdatedTimeUtc?: Date;
  /**
   * UTC time at which the upgrade operation has ended.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endTimeUtc?: Date;
  /**
   * Status of the vault upgrade operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: VaultUpgradeState;
  /**
   * Message to the user containing information about the upgrade operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The way the vault upgrade was triggered.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly triggerType?: TriggerType;
  /**
   * Resource ID of the upgraded vault.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly upgradedResourceId?: string;
  /**
   * Resource ID of the vault before the upgrade.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly previousResourceId?: string;
}

/** Information to be stored in Vault properties as an element of privateEndpointConnections List. */
export interface PrivateEndpointConnectionVaultProperties {
  /**
   * Format of id subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.[Service]/{resource}/{resourceName}/privateEndpointConnections/{connectionName}.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Private Endpoint Connection Response Properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly properties?: PrivateEndpointConnection;
  /**
   * The name of the private Endpoint Connection
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type, which will be of the format, Microsoft.RecoveryServices/vaults/privateEndpointConnections
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The location of the private Endpoint connection
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly location?: string;
}

/** Private Endpoint Connection Response Properties. */
export interface PrivateEndpointConnection {
  /**
   * Gets or sets provisioning state of the private endpoint connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The Private Endpoint network resource that is linked to the Private Endpoint connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateEndpoint?: PrivateEndpoint;
  /**
   * Gets or sets private link service connection state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
  /** Group Ids for the Private Endpoint */
  groupIds?: VaultSubResourceType[];
}

/** The Private Endpoint network resource that is linked to the Private Endpoint connection. */
export interface PrivateEndpoint {
  /**
   * Gets or sets id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** Gets or sets private link service connection state. */
export interface PrivateLinkServiceConnectionState {
  /**
   * Gets or sets the status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: PrivateEndpointConnectionStatus;
  /**
   * Gets or sets description.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
  /**
   * Gets or sets actions required.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionsRequired?: string;
}

/** Customer Managed Key details of the resource. */
export interface VaultPropertiesEncryption {
  /** The properties of the Key Vault which hosts CMK */
  keyVaultProperties?: CmkKeyVaultProperties;
  /** The details of the identity used for CMK */
  kekIdentity?: CmkKekIdentity;
  /** Enabling/Disabling the Double Encryption state */
  infrastructureEncryption?: InfrastructureEncryptionState;
}

/** The properties of the Key Vault which hosts CMK */
export interface CmkKeyVaultProperties {
  /** The key uri of the Customer Managed Key */
  keyUri?: string;
}

/** The details of the identity used for CMK */
export interface CmkKekIdentity {
  /** Indicate that system assigned identity should be used. Mutually exclusive with 'userAssignedIdentity' field */
  useSystemAssignedIdentity?: boolean;
  /** The user assigned identity to be used to grant permissions in case the type of identity used is UserAssigned */
  userAssignedIdentity?: string;
}

/** The details of the latest move operation performed on the Azure Resource */
export interface VaultPropertiesMoveDetails {
  /**
   * OperationId of the Resource Move Operation
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operationId?: string;
  /**
   * Start Time of the Resource Move Operation
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startTimeUtc?: Date;
  /**
   * End Time of the Resource Move Operation
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly completionTimeUtc?: Date;
  /**
   * Source Resource of the Resource Move Operation
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceResourceId?: string;
  /**
   * Target Resource of the Resource Move Operation
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetResourceId?: string;
}

/** Monitoring Settings of the vault */
export interface MonitoringSettings {
  /** Settings for Azure Monitor based alerts */
  azureMonitorAlertSettings?: AzureMonitorAlertSettings;
  /** Settings for classic alerts */
  classicAlertSettings?: ClassicAlertSettings;
}

/** Settings for Azure Monitor based alerts */
export interface AzureMonitorAlertSettings {
  alertsForAllJobFailures?: AlertsState;
}

/** Settings for classic alerts */
export interface ClassicAlertSettings {
  alertsForCriticalOperations?: AlertsState;
}

/** The redundancy Settings of a Vault */
export interface VaultPropertiesRedundancySettings {
  /**
   * The storage redundancy setting of a vault
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly standardTierStorageRedundancy?: StandardTierStorageRedundancy;
  /**
   * Flag to show if Cross Region Restore is enabled on the Vault or not
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly crossRegionRestore?: CrossRegionRestore;
}

/** Security Settings of the vault */
export interface SecuritySettings {
  /** Immutability Settings of a vault */
  immutabilitySettings?: ImmutabilitySettings;
}

/** Immutability Settings of vault */
export interface ImmutabilitySettings {
  state?: ImmutabilityState;
}

/** Identifies the unique system identifier for each Azure resource. */
export interface Sku {
  /** Name of SKU is RS0 (Recovery Services 0th version) and the tier is standard tier. They do not have affect on backend storage redundancy or any other vault settings. To manage storage redundancy, use the backupstorageconfig */
  name: SkuName;
  /** The Sku tier. */
  tier?: string;
  /** The sku family */
  family?: string;
  /** The sku size */
  size?: string;
  /** The sku capacity */
  capacity?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The type of identity that last modified the resource. */
  lastModifiedAt?: Date;
}

/** ARM Resource. */
export interface Resource {
  /**
   * Resource Id represents the complete path to the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource name associated with the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/...
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Optional ETag. */
  etag?: string;
}

/** Operations List response which contains list of available APIs. */
export interface ClientDiscoveryResponse {
  /** List of available operations. */
  value?: ClientDiscoveryValueForSingleApi[];
  /** Link to the next chunk of the response */
  nextLink?: string;
}

/** Available operation details. */
export interface ClientDiscoveryValueForSingleApi {
  /** Name of the Operation. */
  name?: string;
  /** Contains the localized display information for this particular operation */
  display?: ClientDiscoveryDisplay;
  /** The intended executor of the operation;governs the display of the operation in the RBAC UX and the audit logs UX */
  origin?: string;
  /** ShoeBox properties for the given operation. */
  properties?: ClientDiscoveryForProperties;
}

/** Localized display information of an operation. */
export interface ClientDiscoveryDisplay {
  /** Name of the provider for display purposes */
  provider?: string;
  /** ResourceType for which this Operation can be performed. */
  resource?: string;
  /** Operations Name itself. */
  operation?: string;
  /** Description of the operation having details of what operation is about. */
  description?: string;
}

/** Class to represent shoebox properties in json client discovery. */
export interface ClientDiscoveryForProperties {
  /** Operation properties. */
  serviceSpecification?: ClientDiscoveryForServiceSpecification;
}

/** Class to represent shoebox service specification in json client discovery. */
export interface ClientDiscoveryForServiceSpecification {
  /** List of log specifications of this operation. */
  logSpecifications?: ClientDiscoveryForLogSpecification[];
}

/** Class to represent shoebox log specification in json client discovery. */
export interface ClientDiscoveryForLogSpecification {
  /** Name of the log. */
  name?: string;
  /** Localized display name */
  displayName?: string;
  /** Blobs created in customer storage account per hour */
  blobDuration?: string;
}

/** Operation Resource */
export interface OperationResource {
  /** End time of the operation */
  endTime?: Date;
  /** Required if status == failed or status == canceled. This is the OData v4 error format, used by the RPC and will go into the v2.2 Azure REST API guidelines. */
  error?: ErrorModel;
  /** It should match what is used to GET the operation result */
  id?: string;
  /** It must match the last segment of the "id" field, and will typically be a GUID / system generated value */
  name?: string;
  /** The status of the operation. (InProgress/Success/Failed/Cancelled) */
  status?: string;
  /** Start time of the operation */
  startTime?: Date;
}

/** Usage for vault. */
export interface VaultUsageList {
  /** The list of usages for the given vault. */
  value?: VaultUsage[];
}

/** Usages of a vault. */
export interface VaultUsage {
  /** Unit of the usage. */
  unit?: UsagesUnit;
  /** Quota period of usage. */
  quotaPeriod?: string;
  /** Next reset time of usage. */
  nextResetTime?: Date;
  /** Current value of usage. */
  currentValue?: number;
  /** Limit of usage. */
  limit?: number;
  /** Name of usage. */
  name?: NameInfo;
}

/** The name of usage. */
export interface NameInfo {
  /** Value of usage. */
  value?: string;
  /** Localized value of usage. */
  localizedValue?: string;
}

/** Certificate details representing the Vault credentials for AAD. */
export interface ResourceCertificateAndAadDetails
  extends ResourceCertificateDetails {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  authType: "AzureActiveDirectory";
  /** AAD tenant authority. */
  aadAuthority: string;
  /** AAD tenant Id. */
  aadTenantId: string;
  /** AAD service principal clientId. */
  servicePrincipalClientId: string;
  /** AAD service principal ObjectId. */
  servicePrincipalObjectId: string;
  /** Azure Management Endpoint Audience. */
  azureManagementEndpointAudience: string;
  /** Service Resource Id. */
  serviceResourceId?: string;
  /** AAD audience for the resource */
  aadAudience?: string;
}

/** Certificate details representing the Vault credentials for ACS. */
export interface ResourceCertificateAndAcsDetails
  extends ResourceCertificateDetails {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  authType: "AccessControlService";
  /** ACS namespace name - tenant for our service. */
  globalAcsNamespace: string;
  /** Acs mgmt host name to connect to. */
  globalAcsHostName: string;
  /** Global ACS namespace RP realm. */
  globalAcsRPRealm: string;
}

/** DNSZone information for Microsoft.RecoveryServices */
export interface DNSZoneResponse extends DNSZone {
  /** The private link resource Private link DNS zone names. */
  requiredZoneNames?: string[];
}

/** Input to get capabilities information for Microsoft.RecoveryServices */
export interface ResourceCapabilities extends ResourceCapabilitiesBase {
  /** Capabilities information */
  properties?: CapabilitiesProperties;
}

/** Capabilities response for Microsoft.RecoveryServices */
export interface CapabilitiesResponse extends ResourceCapabilitiesBase {
  /** Capabilities properties in response */
  properties?: CapabilitiesResponseProperties;
}

/** Tracked resource with location. */
export interface TrackedResource extends Resource {
  /** Resource location. */
  location: string;
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/** Tracked resource with location. */
export interface PatchTrackedResource extends Resource {
  /** Resource location. */
  location?: string;
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/** Vault extended information. */
export interface VaultExtendedInfoResource extends Resource {
  /** Integrity key. */
  integrityKey?: string;
  /** Encryption key. */
  encryptionKey?: string;
  /** Encryption key thumbprint. */
  encryptionKeyThumbprint?: string;
  /** Algorithm for Vault ExtendedInfo */
  algorithm?: string;
}

/** Resource information, as returned by the resource provider. */
export interface Vault extends TrackedResource {
  /** Identity for the resource. */
  identity?: IdentityData;
  /** Properties of the vault. */
  properties?: VaultProperties;
  /** Identifies the unique system identifier for each Azure resource. */
  sku?: Sku;
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Patch Resource information, as returned by the resource provider. */
export interface PatchVault extends PatchTrackedResource {
  /** Properties of the vault. */
  properties?: VaultProperties;
  /** Identifies the unique system identifier for each Azure resource. */
  sku?: Sku;
  /** Identity for the resource. */
  identity?: IdentityData;
}

/** Known values of {@link AuthType} that the service accepts. */
export enum KnownAuthType {
  /** Invalid */
  Invalid = "Invalid",
  /** ACS */
  ACS = "ACS",
  /** AAD */
  AAD = "AAD",
  /** AccessControlService */
  AccessControlService = "AccessControlService",
  /** AzureActiveDirectory */
  AzureActiveDirectory = "AzureActiveDirectory"
}

/**
 * Defines values for AuthType. \
 * {@link KnownAuthType} can be used interchangeably with AuthType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **ACS** \
 * **AAD** \
 * **AccessControlService** \
 * **AzureActiveDirectory**
 */
export type AuthType = string;

/** Known values of {@link VaultSubResourceType} that the service accepts. */
export enum KnownVaultSubResourceType {
  /** AzureBackup */
  AzureBackup = "AzureBackup",
  /** AzureBackupSecondary */
  AzureBackupSecondary = "AzureBackup_secondary",
  /** AzureSiteRecovery */
  AzureSiteRecovery = "AzureSiteRecovery"
}

/**
 * Defines values for VaultSubResourceType. \
 * {@link KnownVaultSubResourceType} can be used interchangeably with VaultSubResourceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AzureBackup** \
 * **AzureBackup_secondary** \
 * **AzureSiteRecovery**
 */
export type VaultSubResourceType = string;

/** Known values of {@link ResourceIdentityType} that the service accepts. */
export enum KnownResourceIdentityType {
  /** SystemAssigned */
  SystemAssigned = "SystemAssigned",
  /** None */
  None = "None",
  /** UserAssigned */
  UserAssigned = "UserAssigned",
  /** SystemAssignedUserAssigned */
  SystemAssignedUserAssigned = "SystemAssigned, UserAssigned"
}

/**
 * Defines values for ResourceIdentityType. \
 * {@link KnownResourceIdentityType} can be used interchangeably with ResourceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SystemAssigned** \
 * **None** \
 * **UserAssigned** \
 * **SystemAssigned, UserAssigned**
 */
export type ResourceIdentityType = string;

/** Known values of {@link VaultUpgradeState} that the service accepts. */
export enum KnownVaultUpgradeState {
  /** Unknown */
  Unknown = "Unknown",
  /** InProgress */
  InProgress = "InProgress",
  /** Upgraded */
  Upgraded = "Upgraded",
  /** Failed */
  Failed = "Failed"
}

/**
 * Defines values for VaultUpgradeState. \
 * {@link KnownVaultUpgradeState} can be used interchangeably with VaultUpgradeState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **InProgress** \
 * **Upgraded** \
 * **Failed**
 */
export type VaultUpgradeState = string;

/** Known values of {@link TriggerType} that the service accepts. */
export enum KnownTriggerType {
  /** UserTriggered */
  UserTriggered = "UserTriggered",
  /** ForcedUpgrade */
  ForcedUpgrade = "ForcedUpgrade"
}

/**
 * Defines values for TriggerType. \
 * {@link KnownTriggerType} can be used interchangeably with TriggerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **UserTriggered** \
 * **ForcedUpgrade**
 */
export type TriggerType = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Deleting */
  Deleting = "Deleting",
  /** Failed */
  Failed = "Failed",
  /** Pending */
  Pending = "Pending"
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Deleting** \
 * **Failed** \
 * **Pending**
 */
export type ProvisioningState = string;

/** Known values of {@link PrivateEndpointConnectionStatus} that the service accepts. */
export enum KnownPrivateEndpointConnectionStatus {
  /** Pending */
  Pending = "Pending",
  /** Approved */
  Approved = "Approved",
  /** Rejected */
  Rejected = "Rejected",
  /** Disconnected */
  Disconnected = "Disconnected"
}

/**
 * Defines values for PrivateEndpointConnectionStatus. \
 * {@link KnownPrivateEndpointConnectionStatus} can be used interchangeably with PrivateEndpointConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected** \
 * **Disconnected**
 */
export type PrivateEndpointConnectionStatus = string;

/** Known values of {@link VaultPrivateEndpointState} that the service accepts. */
export enum KnownVaultPrivateEndpointState {
  /** None */
  None = "None",
  /** Enabled */
  Enabled = "Enabled"
}

/**
 * Defines values for VaultPrivateEndpointState. \
 * {@link KnownVaultPrivateEndpointState} can be used interchangeably with VaultPrivateEndpointState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Enabled**
 */
export type VaultPrivateEndpointState = string;

/** Known values of {@link InfrastructureEncryptionState} that the service accepts. */
export enum KnownInfrastructureEncryptionState {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for InfrastructureEncryptionState. \
 * {@link KnownInfrastructureEncryptionState} can be used interchangeably with InfrastructureEncryptionState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type InfrastructureEncryptionState = string;

/** Known values of {@link ResourceMoveState} that the service accepts. */
export enum KnownResourceMoveState {
  /** Unknown */
  Unknown = "Unknown",
  /** InProgress */
  InProgress = "InProgress",
  /** PrepareFailed */
  PrepareFailed = "PrepareFailed",
  /** CommitFailed */
  CommitFailed = "CommitFailed",
  /** PrepareTimedout */
  PrepareTimedout = "PrepareTimedout",
  /** CommitTimedout */
  CommitTimedout = "CommitTimedout",
  /** MoveSucceeded */
  MoveSucceeded = "MoveSucceeded",
  /** Failure */
  Failure = "Failure",
  /** CriticalFailure */
  CriticalFailure = "CriticalFailure",
  /** PartialSuccess */
  PartialSuccess = "PartialSuccess"
}

/**
 * Defines values for ResourceMoveState. \
 * {@link KnownResourceMoveState} can be used interchangeably with ResourceMoveState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **InProgress** \
 * **PrepareFailed** \
 * **CommitFailed** \
 * **PrepareTimedout** \
 * **CommitTimedout** \
 * **MoveSucceeded** \
 * **Failure** \
 * **CriticalFailure** \
 * **PartialSuccess**
 */
export type ResourceMoveState = string;

/** Known values of {@link BackupStorageVersion} that the service accepts. */
export enum KnownBackupStorageVersion {
  /** V1 */
  V1 = "V1",
  /** V2 */
  V2 = "V2",
  /** Unassigned */
  Unassigned = "Unassigned"
}

/**
 * Defines values for BackupStorageVersion. \
 * {@link KnownBackupStorageVersion} can be used interchangeably with BackupStorageVersion,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **V1** \
 * **V2** \
 * **Unassigned**
 */
export type BackupStorageVersion = string;

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export enum KnownPublicNetworkAccess {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type PublicNetworkAccess = string;

/** Known values of {@link AlertsState} that the service accepts. */
export enum KnownAlertsState {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for AlertsState. \
 * {@link KnownAlertsState} can be used interchangeably with AlertsState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type AlertsState = string;

/** Known values of {@link StandardTierStorageRedundancy} that the service accepts. */
export enum KnownStandardTierStorageRedundancy {
  /** LocallyRedundant */
  LocallyRedundant = "LocallyRedundant",
  /** GeoRedundant */
  GeoRedundant = "GeoRedundant",
  /** ZoneRedundant */
  ZoneRedundant = "ZoneRedundant"
}

/**
 * Defines values for StandardTierStorageRedundancy. \
 * {@link KnownStandardTierStorageRedundancy} can be used interchangeably with StandardTierStorageRedundancy,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **LocallyRedundant** \
 * **GeoRedundant** \
 * **ZoneRedundant**
 */
export type StandardTierStorageRedundancy = string;

/** Known values of {@link CrossRegionRestore} that the service accepts. */
export enum KnownCrossRegionRestore {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for CrossRegionRestore. \
 * {@link KnownCrossRegionRestore} can be used interchangeably with CrossRegionRestore,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type CrossRegionRestore = string;

/** Known values of {@link ImmutabilityState} that the service accepts. */
export enum KnownImmutabilityState {
  /** Disabled */
  Disabled = "Disabled",
  /** Unlocked */
  Unlocked = "Unlocked",
  /** Locked */
  Locked = "Locked"
}

/**
 * Defines values for ImmutabilityState. \
 * {@link KnownImmutabilityState} can be used interchangeably with ImmutabilityState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Unlocked** \
 * **Locked**
 */
export type ImmutabilityState = string;

/** Known values of {@link SkuName} that the service accepts. */
export enum KnownSkuName {
  /** Standard */
  Standard = "Standard",
  /** RS0 */
  RS0 = "RS0"
}

/**
 * Defines values for SkuName. \
 * {@link KnownSkuName} can be used interchangeably with SkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard** \
 * **RS0**
 */
export type SkuName = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link UsagesUnit} that the service accepts. */
export enum KnownUsagesUnit {
  /** Count */
  Count = "Count",
  /** Bytes */
  Bytes = "Bytes",
  /** Seconds */
  Seconds = "Seconds",
  /** Percent */
  Percent = "Percent",
  /** CountPerSecond */
  CountPerSecond = "CountPerSecond",
  /** BytesPerSecond */
  BytesPerSecond = "BytesPerSecond"
}

/**
 * Defines values for UsagesUnit. \
 * {@link KnownUsagesUnit} can be used interchangeably with UsagesUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Count** \
 * **Bytes** \
 * **Seconds** \
 * **Percent** \
 * **CountPerSecond** \
 * **BytesPerSecond**
 */
export type UsagesUnit = string;

/** Optional parameters. */
export interface VaultCertificatesCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type VaultCertificatesCreateResponse = VaultCertificateResponse;

/** Optional parameters. */
export interface RegisteredIdentitiesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ReplicationUsagesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ReplicationUsagesListResponse = ReplicationUsageList;

/** Optional parameters. */
export interface PrivateLinkResourcesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type PrivateLinkResourcesListResponse = PrivateLinkResources;

/** Optional parameters. */
export interface PrivateLinkResourcesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PrivateLinkResourcesGetResponse = PrivateLinkResource;

/** Optional parameters. */
export interface PrivateLinkResourcesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type PrivateLinkResourcesListNextResponse = PrivateLinkResources;

/** Optional parameters. */
export interface RecoveryServicesCheckNameAvailabilityOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkNameAvailability operation. */
export type RecoveryServicesCheckNameAvailabilityResponse = CheckNameAvailabilityResult;

/** Optional parameters. */
export interface RecoveryServicesCapabilitiesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the capabilities operation. */
export type RecoveryServicesCapabilitiesResponse = CapabilitiesResponse;

/** Optional parameters. */
export interface VaultsListBySubscriptionIdOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionId operation. */
export type VaultsListBySubscriptionIdResponse = VaultList;

/** Optional parameters. */
export interface VaultsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type VaultsListByResourceGroupResponse = VaultList;

/** Optional parameters. */
export interface VaultsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VaultsGetResponse = Vault;

/** Optional parameters. */
export interface VaultsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type VaultsCreateOrUpdateResponse = Vault;

/** Optional parameters. */
export interface VaultsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface VaultsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type VaultsUpdateResponse = Vault;

/** Optional parameters. */
export interface VaultsListBySubscriptionIdNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionIdNext operation. */
export type VaultsListBySubscriptionIdNextResponse = VaultList;

/** Optional parameters. */
export interface VaultsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type VaultsListByResourceGroupNextResponse = VaultList;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = ClientDiscoveryResponse;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = ClientDiscoveryResponse;

/** Optional parameters. */
export interface VaultExtendedInfoGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VaultExtendedInfoGetResponse = VaultExtendedInfoResource;

/** Optional parameters. */
export interface VaultExtendedInfoCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type VaultExtendedInfoCreateOrUpdateResponse = VaultExtendedInfoResource;

/** Optional parameters. */
export interface VaultExtendedInfoUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type VaultExtendedInfoUpdateResponse = VaultExtendedInfoResource;

/** Optional parameters. */
export interface GetOperationStatusOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getOperationStatus operation. */
export type GetOperationStatusResponse = OperationResource;

/** Optional parameters. */
export interface GetOperationResultOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getOperationResult operation. */
export type GetOperationResultResponse = Vault;

/** Optional parameters. */
export interface UsagesListByVaultsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByVaults operation. */
export type UsagesListByVaultsResponse = VaultUsageList;

/** Optional parameters. */
export interface RecoveryServicesClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
