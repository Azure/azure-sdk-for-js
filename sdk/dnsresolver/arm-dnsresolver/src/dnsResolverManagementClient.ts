/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import {
  DnsResolversImpl,
  InboundEndpointsImpl,
  OutboundEndpointsImpl,
  DnsForwardingRulesetsImpl,
  ForwardingRulesImpl,
  VirtualNetworkLinksImpl
} from "./operations";
import {
  DnsResolvers,
  InboundEndpoints,
  OutboundEndpoints,
  DnsForwardingRulesets,
  ForwardingRules,
  VirtualNetworkLinks
} from "./operationsInterfaces";
import { DnsResolverManagementClientOptionalParams } from "./models";

export class DnsResolverManagementClient extends coreClient.ServiceClient {
  $host: string;
  subscriptionId: string;
  apiVersion: string;

  /**
   * Initializes a new instance of the DnsResolverManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The ID of the target subscription.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: DnsResolverManagementClientOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: DnsResolverManagementClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-dnsresolver/1.0.0-beta.2`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    if (!options.credentialScopes) {
      options.credentialScopes = ["https://management.azure.com/.default"];
    }
    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      baseUri: options.endpoint || "https://management.azure.com"
    };
    super(optionsWithDefaults);
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2020-04-01-preview";
    this.dnsResolvers = new DnsResolversImpl(this);
    this.inboundEndpoints = new InboundEndpointsImpl(this);
    this.outboundEndpoints = new OutboundEndpointsImpl(this);
    this.dnsForwardingRulesets = new DnsForwardingRulesetsImpl(this);
    this.forwardingRules = new ForwardingRulesImpl(this);
    this.virtualNetworkLinks = new VirtualNetworkLinksImpl(this);
  }

  dnsResolvers: DnsResolvers;
  inboundEndpoints: InboundEndpoints;
  outboundEndpoints: OutboundEndpoints;
  dnsForwardingRulesets: DnsForwardingRulesets;
  forwardingRules: ForwardingRules;
  virtualNetworkLinks: VirtualNetworkLinks;
}
