/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ForwardingRules } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DnsResolverManagementClient } from "../dnsResolverManagementClient";
import {
  ForwardingRule,
  ForwardingRulesListNextOptionalParams,
  ForwardingRulesListOptionalParams,
  ForwardingRulesCreateOrUpdateOptionalParams,
  ForwardingRulesCreateOrUpdateResponse,
  ForwardingRulePatch,
  ForwardingRulesUpdateOptionalParams,
  ForwardingRulesUpdateResponse,
  ForwardingRulesDeleteOptionalParams,
  ForwardingRulesGetOptionalParams,
  ForwardingRulesGetResponse,
  ForwardingRulesListResponse,
  ForwardingRulesListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ForwardingRules operations. */
export class ForwardingRulesImpl implements ForwardingRules {
  private readonly client: DnsResolverManagementClient;

  /**
   * Initialize a new instance of the class ForwardingRules class.
   * @param client Reference to the service client
   */
  constructor(client: DnsResolverManagementClient) {
    this.client = client;
  }

  /**
   * Lists forwarding rules in a DNS forwarding ruleset.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    dnsForwardingRulesetName: string,
    options?: ForwardingRulesListOptionalParams
  ): PagedAsyncIterableIterator<ForwardingRule> {
    const iter = this.listPagingAll(
      resourceGroupName,
      dnsForwardingRulesetName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(
          resourceGroupName,
          dnsForwardingRulesetName,
          options
        );
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    dnsForwardingRulesetName: string,
    options?: ForwardingRulesListOptionalParams
  ): AsyncIterableIterator<ForwardingRule[]> {
    let result = await this._list(
      resourceGroupName,
      dnsForwardingRulesetName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        dnsForwardingRulesetName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    dnsForwardingRulesetName: string,
    options?: ForwardingRulesListOptionalParams
  ): AsyncIterableIterator<ForwardingRule> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      dnsForwardingRulesetName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Creates or updates a forwarding rule in a DNS forwarding ruleset.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
   * @param forwardingRuleName The name of the forwarding rule.
   * @param parameters Parameters supplied to the CreateOrUpdate operation.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    dnsForwardingRulesetName: string,
    forwardingRuleName: string,
    parameters: ForwardingRule,
    options?: ForwardingRulesCreateOrUpdateOptionalParams
  ): Promise<ForwardingRulesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dnsForwardingRulesetName,
        forwardingRuleName,
        parameters,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Updates a forwarding rule in a DNS forwarding ruleset.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
   * @param forwardingRuleName The name of the forwarding rule.
   * @param parameters Parameters supplied to the Update operation.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    dnsForwardingRulesetName: string,
    forwardingRuleName: string,
    parameters: ForwardingRulePatch,
    options?: ForwardingRulesUpdateOptionalParams
  ): Promise<ForwardingRulesUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dnsForwardingRulesetName,
        forwardingRuleName,
        parameters,
        options
      },
      updateOperationSpec
    );
  }

  /**
   * Deletes a forwarding rule in a DNS forwarding ruleset. WARNING: This operation cannot be undone.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
   * @param forwardingRuleName The name of the forwarding rule.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    dnsForwardingRulesetName: string,
    forwardingRuleName: string,
    options?: ForwardingRulesDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dnsForwardingRulesetName,
        forwardingRuleName,
        options
      },
      deleteOperationSpec
    );
  }

  /**
   * Gets properties of a forwarding rule in a DNS forwarding ruleset.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
   * @param forwardingRuleName The name of the forwarding rule.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    dnsForwardingRulesetName: string,
    forwardingRuleName: string,
    options?: ForwardingRulesGetOptionalParams
  ): Promise<ForwardingRulesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dnsForwardingRulesetName,
        forwardingRuleName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Lists forwarding rules in a DNS forwarding ruleset.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    dnsForwardingRulesetName: string,
    options?: ForwardingRulesListOptionalParams
  ): Promise<ForwardingRulesListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, dnsForwardingRulesetName, options },
      listOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param dnsForwardingRulesetName The name of the DNS forwarding ruleset.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    dnsForwardingRulesetName: string,
    nextLink: string,
    options?: ForwardingRulesListNextOptionalParams
  ): Promise<ForwardingRulesListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, dnsForwardingRulesetName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}/forwardingRules/{forwardingRuleName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ForwardingRule
    },
    201: {
      bodyMapper: Mappers.ForwardingRule
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dnsForwardingRulesetName,
    Parameters.forwardingRuleName
  ],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}/forwardingRules/{forwardingRuleName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ForwardingRule
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters9,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dnsForwardingRulesetName,
    Parameters.forwardingRuleName
  ],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.ifMatch
  ],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}/forwardingRules/{forwardingRuleName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dnsForwardingRulesetName,
    Parameters.forwardingRuleName
  ],
  headerParameters: [Parameters.accept, Parameters.ifMatch],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}/forwardingRules/{forwardingRuleName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ForwardingRule
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dnsForwardingRulesetName,
    Parameters.forwardingRuleName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsForwardingRulesets/{dnsForwardingRulesetName}/forwardingRules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ForwardingRuleListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dnsForwardingRulesetName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ForwardingRuleListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.dnsForwardingRulesetName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
