/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  DnsResolver as DnsResolverMapper,
  DnsResolverPatch as DnsResolverPatchMapper,
  InboundEndpoint as InboundEndpointMapper,
  InboundEndpointPatch as InboundEndpointPatchMapper,
  OutboundEndpoint as OutboundEndpointMapper,
  OutboundEndpointPatch as OutboundEndpointPatchMapper,
  DnsForwardingRuleset as DnsForwardingRulesetMapper,
  DnsForwardingRulesetPatch as DnsForwardingRulesetPatchMapper,
  ForwardingRule as ForwardingRuleMapper,
  ForwardingRulePatch as ForwardingRulePatchMapper,
  VirtualNetworkLink as VirtualNetworkLinkMapper,
  VirtualNetworkLinkPatch as VirtualNetworkLinkPatchMapper,
  DnsResolverPolicy as DnsResolverPolicyMapper,
  DnsResolverPolicyPatch as DnsResolverPolicyPatchMapper,
  DnsSecurityRule as DnsSecurityRuleMapper,
  DnsSecurityRulePatch as DnsSecurityRulePatchMapper,
  DnsResolverPolicyVirtualNetworkLink as DnsResolverPolicyVirtualNetworkLinkMapper,
  DnsResolverPolicyVirtualNetworkLinkPatch as DnsResolverPolicyVirtualNetworkLinkPatchMapper,
  DnsResolverDomainList as DnsResolverDomainListMapper,
  DnsResolverDomainListPatch as DnsResolverDomainListPatchMapper,
} from "../models/mappers";

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const parameters: OperationParameter = {
  parameterPath: "parameters",
  mapper: DnsResolverMapper,
};

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "Uuid",
    },
  },
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1,
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const dnsResolverName: OperationURLParameter = {
  parameterPath: "dnsResolverName",
  mapper: {
    serializedName: "dnsResolverName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2023-07-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const ifMatch: OperationParameter = {
  parameterPath: ["options", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String",
    },
  },
};

export const ifNoneMatch: OperationParameter = {
  parameterPath: ["options", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String",
    },
  },
};

export const parameters1: OperationParameter = {
  parameterPath: "parameters",
  mapper: DnsResolverPatchMapper,
};

export const top: OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    serializedName: "$top",
    type: {
      name: "Number",
    },
  },
};

export const virtualNetworkName: OperationURLParameter = {
  parameterPath: "virtualNetworkName",
  mapper: {
    serializedName: "virtualNetworkName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const parameters2: OperationParameter = {
  parameterPath: "parameters",
  mapper: InboundEndpointMapper,
};

export const inboundEndpointName: OperationURLParameter = {
  parameterPath: "inboundEndpointName",
  mapper: {
    serializedName: "inboundEndpointName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const parameters3: OperationParameter = {
  parameterPath: "parameters",
  mapper: InboundEndpointPatchMapper,
};

export const parameters4: OperationParameter = {
  parameterPath: "parameters",
  mapper: OutboundEndpointMapper,
};

export const outboundEndpointName: OperationURLParameter = {
  parameterPath: "outboundEndpointName",
  mapper: {
    serializedName: "outboundEndpointName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const parameters5: OperationParameter = {
  parameterPath: "parameters",
  mapper: OutboundEndpointPatchMapper,
};

export const parameters6: OperationParameter = {
  parameterPath: "parameters",
  mapper: DnsForwardingRulesetMapper,
};

export const dnsForwardingRulesetName: OperationURLParameter = {
  parameterPath: "dnsForwardingRulesetName",
  mapper: {
    serializedName: "dnsForwardingRulesetName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const parameters7: OperationParameter = {
  parameterPath: "parameters",
  mapper: DnsForwardingRulesetPatchMapper,
};

export const parameters8: OperationParameter = {
  parameterPath: "parameters",
  mapper: ForwardingRuleMapper,
};

export const forwardingRuleName: OperationURLParameter = {
  parameterPath: "forwardingRuleName",
  mapper: {
    serializedName: "forwardingRuleName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const parameters9: OperationParameter = {
  parameterPath: "parameters",
  mapper: ForwardingRulePatchMapper,
};

export const parameters10: OperationParameter = {
  parameterPath: "parameters",
  mapper: VirtualNetworkLinkMapper,
};

export const virtualNetworkLinkName: OperationURLParameter = {
  parameterPath: "virtualNetworkLinkName",
  mapper: {
    serializedName: "virtualNetworkLinkName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const parameters11: OperationParameter = {
  parameterPath: "parameters",
  mapper: VirtualNetworkLinkPatchMapper,
};

export const parameters12: OperationParameter = {
  parameterPath: "parameters",
  mapper: DnsResolverPolicyMapper,
};

export const dnsResolverPolicyName: OperationURLParameter = {
  parameterPath: "dnsResolverPolicyName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9]([a-zA-Z0-9_\\-]*[a-zA-Z0-9])?$"),
      MaxLength: 80,
      MinLength: 1,
    },
    serializedName: "dnsResolverPolicyName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const parameters13: OperationParameter = {
  parameterPath: "parameters",
  mapper: DnsResolverPolicyPatchMapper,
};

export const virtualNetworkName1: OperationURLParameter = {
  parameterPath: "virtualNetworkName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^.+$"),
      MinLength: 1,
    },
    serializedName: "virtualNetworkName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const parameters14: OperationParameter = {
  parameterPath: "parameters",
  mapper: DnsSecurityRuleMapper,
};

export const dnsSecurityRuleName: OperationURLParameter = {
  parameterPath: "dnsSecurityRuleName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9]([a-zA-Z0-9_\\-]*[a-zA-Z0-9])?$"),
      MaxLength: 80,
      MinLength: 1,
    },
    serializedName: "dnsSecurityRuleName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const parameters15: OperationParameter = {
  parameterPath: "parameters",
  mapper: DnsSecurityRulePatchMapper,
};

export const parameters16: OperationParameter = {
  parameterPath: "parameters",
  mapper: DnsResolverPolicyVirtualNetworkLinkMapper,
};

export const dnsResolverPolicyVirtualNetworkLinkName: OperationURLParameter = {
  parameterPath: "dnsResolverPolicyVirtualNetworkLinkName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9]([a-zA-Z0-9_\\-]*[a-zA-Z0-9])?$"),
      MaxLength: 80,
      MinLength: 1,
    },
    serializedName: "dnsResolverPolicyVirtualNetworkLinkName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const parameters17: OperationParameter = {
  parameterPath: "parameters",
  mapper: DnsResolverPolicyVirtualNetworkLinkPatchMapper,
};

export const parameters18: OperationParameter = {
  parameterPath: "parameters",
  mapper: DnsResolverDomainListMapper,
};

export const dnsResolverDomainListName: OperationURLParameter = {
  parameterPath: "dnsResolverDomainListName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9]([a-zA-Z0-9_\\-]*[a-zA-Z0-9])?$"),
      MaxLength: 80,
      MinLength: 1,
    },
    serializedName: "dnsResolverDomainListName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const parameters19: OperationParameter = {
  parameterPath: "parameters",
  mapper: DnsResolverDomainListPatchMapper,
};
