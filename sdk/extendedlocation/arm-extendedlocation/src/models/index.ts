/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Lists of Custom Locations operations. */
export interface CustomLocationOperationsList {
  /** Next page of operations. */
  nextLink?: string;
  /** Array of customLocationOperation */
  value: CustomLocationOperation[];
}

/** Custom Locations operation. */
export interface CustomLocationOperation {
  /**
   * Is this Operation a data plane operation
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /**
   * The name of the compute operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The origin of the compute operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: string;
  /**
   * The description of the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
  /**
   * The display name of the compute operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The resource provider for the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The display name of the resource the operation applies to.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** The List Custom Locations operation response. */
export interface CustomLocationListResult {
  /**
   * The URL to use for getting the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
  /**
   * The list of Custom Locations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: CustomLocation[];
}

/** Identity for the resource. */
export interface Identity {
  /**
   * The principal ID of resource identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** The identity type. */
  type?: ResourceIdentityType;
}

/** This is optional input that contains the authentication that should be used to generate the namespace. */
export interface CustomLocationPropertiesAuthentication {
  /** The type of the Custom Locations authentication */
  type?: string;
  /** The kubeconfig value. */
  value?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** The Custom Locations patchable resource definition. */
export interface PatchableCustomLocations {
  /** Identity for the resource. */
  identity?: Identity;
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /** This is optional input that contains the authentication that should be used to generate the namespace. */
  authentication?: CustomLocationPropertiesAuthentication;
  /** Contains the reference to the add-on that contains charts to deploy CRDs and operators. */
  clusterExtensionIds?: string[];
  /** Display name for the Custom Locations location. */
  displayName?: string;
  /** Connected Cluster or AKS Cluster. The Custom Locations RP will perform a checkAccess API for listAdminCredentials permissions. */
  hostResourceId?: string;
  /** Type of host the Custom Locations is referencing (Kubernetes, etc...). */
  hostType?: HostType;
  /** Kubernetes namespace that will be created on the specified cluster. */
  namespace?: string;
  /** Provisioning State for the Custom Location. */
  provisioningState?: string;
}

/** List of EnabledResourceTypes definition. */
export interface EnabledResourceTypesListResult {
  /**
   * The URL to use for getting the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
  /**
   * The list of EnabledResourceTypes available for a customLocation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: EnabledResourceType[];
}

/** Metadata of the Resource Type. */
export interface EnabledResourceTypePropertiesTypesMetadataItem {
  /** Api Version of Resource Type */
  apiVersion?: string;
  /** Resource Provider Namespace of Resource Type */
  resourceProviderNamespace?: string;
  /** Resource Type */
  resourceType?: string;
}

/** The Find Target Resource Group operation request. */
export interface CustomLocationFindTargetResourceGroupProperties {
  /** Labels of the custom resource, this is a map of {key,value} pairs. */
  labels?: { [propertyName: string]: string };
}

/** The Find Target Resource Group operation response. */
export interface CustomLocationFindTargetResourceGroupResult {
  /**
   * The matching resource sync rule is the particular resource sync rule that matched the match expressions and labels and had lowest priority. This is the rule responsible for mapping the target resource to the target resource group.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly matchedResourceSyncRule?: string;
  /**
   * The target resource group of matching resource sync rule. The labels from the request will be used to find out matching resource sync rule against the selector property of the resource sync rule. The one with highest priority will be returned if there are multiple matching rules.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetResourceGroup?: string;
}

/** The List Resource Sync Rules operation response. */
export interface ResourceSyncRuleListResult {
  /**
   * The URL to use for getting the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
  /**
   * The list of Resource Sync Rules.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: ResourceSyncRule[];
}

/** A label selector is composed of two parts, matchLabels and matchExpressions. The first part, matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is 'key', the operator is 'In', and the values array contains only 'value'. The second part, matchExpressions is a list of resource selector requirements. Valid operators include In, NotIn, Exists, and DoesNotExist. The values set must be non-empty in the case of In and NotIn. The values set must be empty in the case of Exists and DoesNotExist. All of the requirements, from both matchLabels and matchExpressions must all be satisfied in order to match. */
export interface ResourceSyncRulePropertiesSelector {
  /** MatchExpressions is a list of resource selector requirements. Valid operators include In, NotIn, Exists, and DoesNotExist. The values set must be non-empty in the case of In and NotIn. The values set must be empty in the case of Exists and DoesNotExist. */
  matchExpressions?: MatchExpressionsProperties[];
  /** MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is 'key', the operator is 'In', and the values array contains only 'value'. */
  matchLabels?: { [propertyName: string]: string };
}

/** Resource Sync Rules matchExpression property definition. */
export interface MatchExpressionsProperties {
  /** Key is the label key that the selector applies to. */
  key?: string;
  /** The Operator field represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. */
  operator?: string;
  /** The label value */
  values?: string[];
}

/** The Resource Sync Rules patchable resource definition. */
export interface PatchableResourceSyncRule {
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /** Priority represents a priority of the Resource Sync Rule */
  priority?: number;
  /**
   * Provisioning State for the Resource Sync Rule.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** A label selector is composed of two parts, matchLabels and matchExpressions. The first part, matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is 'key', the operator is 'In', and the values array contains only 'value'. The second part, matchExpressions is a list of resource selector requirements. Valid operators include In, NotIn, Exists, and DoesNotExist. The values set must be non-empty in the case of In and NotIn. The values set must be empty in the case of Exists and DoesNotExist. All of the requirements, from both matchLabels and matchExpressions must all be satisfied in order to match. */
  selector?: ResourceSyncRulePropertiesSelector;
  /** For an unmapped custom resource, its labels will be used to find matching resource sync rules. If this resource sync rule is one of the matching rules with highest priority, then the unmapped custom resource will be projected to the target resource group associated with this resource sync rule. The user creating this resource sync rule should have write permissions on the target resource group and this write permission will be validated when creating the resource sync rule. */
  targetResourceGroup?: string;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** Custom Locations definition. */
export interface CustomLocation extends TrackedResource {
  /** Identity for the resource. */
  identity?: Identity;
  /**
   * Metadata pertaining to creation and last modification of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** This is optional input that contains the authentication that should be used to generate the namespace. */
  authentication?: CustomLocationPropertiesAuthentication;
  /** Contains the reference to the add-on that contains charts to deploy CRDs and operators. */
  clusterExtensionIds?: string[];
  /** Display name for the Custom Locations location. */
  displayName?: string;
  /** Connected Cluster or AKS Cluster. The Custom Locations RP will perform a checkAccess API for listAdminCredentials permissions. */
  hostResourceId?: string;
  /** Type of host the Custom Locations is referencing (Kubernetes, etc...). */
  hostType?: HostType;
  /** Kubernetes namespace that will be created on the specified cluster. */
  namespace?: string;
  /** Provisioning State for the Custom Location. */
  provisioningState?: string;
}

/** Resource Sync Rules definition. */
export interface ResourceSyncRule extends TrackedResource {
  /**
   * Metadata pertaining to creation and last modification of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Priority represents a priority of the Resource Sync Rule */
  priority?: number;
  /**
   * Provisioning State for the Resource Sync Rule.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** A label selector is composed of two parts, matchLabels and matchExpressions. The first part, matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is 'key', the operator is 'In', and the values array contains only 'value'. The second part, matchExpressions is a list of resource selector requirements. Valid operators include In, NotIn, Exists, and DoesNotExist. The values set must be non-empty in the case of In and NotIn. The values set must be empty in the case of Exists and DoesNotExist. All of the requirements, from both matchLabels and matchExpressions must all be satisfied in order to match. */
  selector?: ResourceSyncRulePropertiesSelector;
  /** For an unmapped custom resource, its labels will be used to find matching resource sync rules. If this resource sync rule is one of the matching rules with highest priority, then the unmapped custom resource will be projected to the target resource group associated with this resource sync rule. The user creating this resource sync rule should have write permissions on the target resource group and this write permission will be validated when creating the resource sync rule. */
  targetResourceGroup?: string;
}

/** EnabledResourceType definition. */
export interface EnabledResourceType extends ProxyResource {
  /**
   * Metadata pertaining to creation and last modification of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Cluster Extension ID */
  clusterExtensionId?: string;
  /** Cluster Extension Type */
  extensionType?: string;
  /** Metadata of the Resource Type */
  typesMetadata?: EnabledResourceTypePropertiesTypesMetadataItem[];
}

/** Known values of {@link ResourceIdentityType} that the service accepts. */
export enum KnownResourceIdentityType {
  /** SystemAssigned */
  SystemAssigned = "SystemAssigned",
  /** None */
  None = "None"
}

/**
 * Defines values for ResourceIdentityType. \
 * {@link KnownResourceIdentityType} can be used interchangeably with ResourceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SystemAssigned** \
 * **None**
 */
export type ResourceIdentityType = string;

/** Known values of {@link HostType} that the service accepts. */
export enum KnownHostType {
  /** Kubernetes */
  Kubernetes = "Kubernetes"
}

/**
 * Defines values for HostType. \
 * {@link KnownHostType} can be used interchangeably with HostType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Kubernetes**
 */
export type HostType = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Optional parameters. */
export interface CustomLocationsListOperationsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listOperations operation. */
export type CustomLocationsListOperationsResponse = CustomLocationOperationsList;

/** Optional parameters. */
export interface CustomLocationsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type CustomLocationsListBySubscriptionResponse = CustomLocationListResult;

/** Optional parameters. */
export interface CustomLocationsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type CustomLocationsListByResourceGroupResponse = CustomLocationListResult;

/** Optional parameters. */
export interface CustomLocationsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type CustomLocationsGetResponse = CustomLocation;

/** Optional parameters. */
export interface CustomLocationsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type CustomLocationsCreateOrUpdateResponse = CustomLocation;

/** Optional parameters. */
export interface CustomLocationsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface CustomLocationsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Identity for the resource. */
  identity?: Identity;
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /** This is optional input that contains the authentication that should be used to generate the namespace. */
  authentication?: CustomLocationPropertiesAuthentication;
  /** Contains the reference to the add-on that contains charts to deploy CRDs and operators. */
  clusterExtensionIds?: string[];
  /** Display name for the Custom Locations location. */
  displayName?: string;
  /** Connected Cluster or AKS Cluster. The Custom Locations RP will perform a checkAccess API for listAdminCredentials permissions. */
  hostResourceId?: string;
  /** Type of host the Custom Locations is referencing (Kubernetes, etc...). */
  hostType?: HostType;
  /** Kubernetes namespace that will be created on the specified cluster. */
  namespace?: string;
  /** Provisioning State for the Custom Location. */
  provisioningState?: string;
}

/** Contains response data for the update operation. */
export type CustomLocationsUpdateResponse = CustomLocation;

/** Optional parameters. */
export interface CustomLocationsListEnabledResourceTypesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listEnabledResourceTypes operation. */
export type CustomLocationsListEnabledResourceTypesResponse = EnabledResourceTypesListResult;

/** Optional parameters. */
export interface CustomLocationsFindTargetResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the findTargetResourceGroup operation. */
export type CustomLocationsFindTargetResourceGroupResponse = CustomLocationFindTargetResourceGroupResult;

/** Optional parameters. */
export interface CustomLocationsListOperationsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listOperationsNext operation. */
export type CustomLocationsListOperationsNextResponse = CustomLocationOperationsList;

/** Optional parameters. */
export interface CustomLocationsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type CustomLocationsListBySubscriptionNextResponse = CustomLocationListResult;

/** Optional parameters. */
export interface CustomLocationsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type CustomLocationsListByResourceGroupNextResponse = CustomLocationListResult;

/** Optional parameters. */
export interface CustomLocationsListEnabledResourceTypesNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listEnabledResourceTypesNext operation. */
export type CustomLocationsListEnabledResourceTypesNextResponse = EnabledResourceTypesListResult;

/** Optional parameters. */
export interface ResourceSyncRulesListByCustomLocationIDOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByCustomLocationID operation. */
export type ResourceSyncRulesListByCustomLocationIDResponse = ResourceSyncRuleListResult;

/** Optional parameters. */
export interface ResourceSyncRulesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ResourceSyncRulesGetResponse = ResourceSyncRule;

/** Optional parameters. */
export interface ResourceSyncRulesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ResourceSyncRulesCreateOrUpdateResponse = ResourceSyncRule;

/** Optional parameters. */
export interface ResourceSyncRulesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ResourceSyncRulesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /** Priority represents a priority of the Resource Sync Rule */
  priority?: number;
  /** A label selector is composed of two parts, matchLabels and matchExpressions. The first part, matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is 'key', the operator is 'In', and the values array contains only 'value'. The second part, matchExpressions is a list of resource selector requirements. Valid operators include In, NotIn, Exists, and DoesNotExist. The values set must be non-empty in the case of In and NotIn. The values set must be empty in the case of Exists and DoesNotExist. All of the requirements, from both matchLabels and matchExpressions must all be satisfied in order to match. */
  selector?: ResourceSyncRulePropertiesSelector;
  /** For an unmapped custom resource, its labels will be used to find matching resource sync rules. If this resource sync rule is one of the matching rules with highest priority, then the unmapped custom resource will be projected to the target resource group associated with this resource sync rule. The user creating this resource sync rule should have write permissions on the target resource group and this write permission will be validated when creating the resource sync rule. */
  targetResourceGroup?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type ResourceSyncRulesUpdateResponse = ResourceSyncRule;

/** Optional parameters. */
export interface ResourceSyncRulesListByCustomLocationIDNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByCustomLocationIDNext operation. */
export type ResourceSyncRulesListByCustomLocationIDNextResponse = ResourceSyncRuleListResult;

/** Optional parameters. */
export interface CustomLocationsManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
