/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { CustomLocations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CustomLocationsManagementClient } from "../customLocationsManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  CustomLocationOperation,
  CustomLocationsListOperationsNextOptionalParams,
  CustomLocationsListOperationsOptionalParams,
  CustomLocationsListOperationsResponse,
  CustomLocation,
  CustomLocationsListBySubscriptionNextOptionalParams,
  CustomLocationsListBySubscriptionOptionalParams,
  CustomLocationsListBySubscriptionResponse,
  CustomLocationsListByResourceGroupNextOptionalParams,
  CustomLocationsListByResourceGroupOptionalParams,
  CustomLocationsListByResourceGroupResponse,
  EnabledResourceType,
  CustomLocationsListEnabledResourceTypesNextOptionalParams,
  CustomLocationsListEnabledResourceTypesOptionalParams,
  CustomLocationsListEnabledResourceTypesResponse,
  CustomLocationsGetOptionalParams,
  CustomLocationsGetResponse,
  CustomLocationsCreateOrUpdateOptionalParams,
  CustomLocationsCreateOrUpdateResponse,
  CustomLocationsDeleteOptionalParams,
  CustomLocationsUpdateOptionalParams,
  CustomLocationsUpdateResponse,
  CustomLocationFindTargetResourceGroupProperties,
  CustomLocationsFindTargetResourceGroupOptionalParams,
  CustomLocationsFindTargetResourceGroupResponse,
  CustomLocationsListOperationsNextResponse,
  CustomLocationsListBySubscriptionNextResponse,
  CustomLocationsListByResourceGroupNextResponse,
  CustomLocationsListEnabledResourceTypesNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing CustomLocations operations. */
export class CustomLocationsImpl implements CustomLocations {
  private readonly client: CustomLocationsManagementClient;

  /**
   * Initialize a new instance of the class CustomLocations class.
   * @param client Reference to the service client
   */
  constructor(client: CustomLocationsManagementClient) {
    this.client = client;
  }

  /**
   * Lists all available Custom Locations operations.
   * @param options The options parameters.
   */
  public listOperations(
    options?: CustomLocationsListOperationsOptionalParams
  ): PagedAsyncIterableIterator<CustomLocationOperation> {
    const iter = this.listOperationsPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listOperationsPagingPage(options, settings);
      }
    };
  }

  private async *listOperationsPagingPage(
    options?: CustomLocationsListOperationsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<CustomLocationOperation[]> {
    let result: CustomLocationsListOperationsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listOperations(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listOperationsNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listOperationsPagingAll(
    options?: CustomLocationsListOperationsOptionalParams
  ): AsyncIterableIterator<CustomLocationOperation> {
    for await (const page of this.listOperationsPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets a list of Custom Locations in the specified subscription. The operation returns properties of
   * each Custom Location
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: CustomLocationsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<CustomLocation> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: CustomLocationsListBySubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<CustomLocation[]> {
    let result: CustomLocationsListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: CustomLocationsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<CustomLocation> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets a list of Custom Locations in the specified subscription and resource group. The operation
   * returns properties of each Custom Location.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: CustomLocationsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<CustomLocation> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: CustomLocationsListByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<CustomLocation[]> {
    let result: CustomLocationsListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: CustomLocationsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<CustomLocation> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets the list of the Enabled Resource Types.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName Custom Locations name.
   * @param options The options parameters.
   */
  public listEnabledResourceTypes(
    resourceGroupName: string,
    resourceName: string,
    options?: CustomLocationsListEnabledResourceTypesOptionalParams
  ): PagedAsyncIterableIterator<EnabledResourceType> {
    const iter = this.listEnabledResourceTypesPagingAll(
      resourceGroupName,
      resourceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listEnabledResourceTypesPagingPage(
          resourceGroupName,
          resourceName,
          options,
          settings
        );
      }
    };
  }

  private async *listEnabledResourceTypesPagingPage(
    resourceGroupName: string,
    resourceName: string,
    options?: CustomLocationsListEnabledResourceTypesOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<EnabledResourceType[]> {
    let result: CustomLocationsListEnabledResourceTypesResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listEnabledResourceTypes(
        resourceGroupName,
        resourceName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listEnabledResourceTypesNext(
        resourceGroupName,
        resourceName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listEnabledResourceTypesPagingAll(
    resourceGroupName: string,
    resourceName: string,
    options?: CustomLocationsListEnabledResourceTypesOptionalParams
  ): AsyncIterableIterator<EnabledResourceType> {
    for await (const page of this.listEnabledResourceTypesPagingPage(
      resourceGroupName,
      resourceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists all available Custom Locations operations.
   * @param options The options parameters.
   */
  private _listOperations(
    options?: CustomLocationsListOperationsOptionalParams
  ): Promise<CustomLocationsListOperationsResponse> {
    return this.client.sendOperationRequest(
      { options },
      listOperationsOperationSpec
    );
  }

  /**
   * Gets a list of Custom Locations in the specified subscription. The operation returns properties of
   * each Custom Location
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: CustomLocationsListBySubscriptionOptionalParams
  ): Promise<CustomLocationsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * Gets a list of Custom Locations in the specified subscription and resource group. The operation
   * returns properties of each Custom Location.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: CustomLocationsListByResourceGroupOptionalParams
  ): Promise<CustomLocationsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Gets the details of the customLocation with a specified resource group and name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName Custom Locations name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    resourceName: string,
    options?: CustomLocationsGetOptionalParams
  ): Promise<CustomLocationsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      getOperationSpec
    );
  }

  /**
   * Creates or updates a Custom Location in the specified Subscription and Resource Group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName Custom Locations name.
   * @param parameters Parameters supplied to create or update a Custom Location.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    resourceName: string,
    parameters: CustomLocation,
    options?: CustomLocationsCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<CustomLocationsCreateOrUpdateResponse>,
      CustomLocationsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<CustomLocationsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, resourceName, parameters, options },
      createOrUpdateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates or updates a Custom Location in the specified Subscription and Resource Group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName Custom Locations name.
   * @param parameters Parameters supplied to create or update a Custom Location.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    resourceName: string,
    parameters: CustomLocation,
    options?: CustomLocationsCreateOrUpdateOptionalParams
  ): Promise<CustomLocationsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      resourceName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes the Custom Location with the specified Resource Name, Resource Group, and Subscription Id.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName Custom Locations name.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    resourceName: string,
    options?: CustomLocationsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, resourceName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes the Custom Location with the specified Resource Name, Resource Group, and Subscription Id.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName Custom Locations name.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    resourceName: string,
    options?: CustomLocationsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      resourceName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates a Custom Location with the specified Resource Name in the specified Resource Group and
   * Subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName Custom Locations name.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    resourceName: string,
    options?: CustomLocationsUpdateOptionalParams
  ): Promise<CustomLocationsUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      updateOperationSpec
    );
  }

  /**
   * Gets the list of the Enabled Resource Types.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName Custom Locations name.
   * @param options The options parameters.
   */
  private _listEnabledResourceTypes(
    resourceGroupName: string,
    resourceName: string,
    options?: CustomLocationsListEnabledResourceTypesOptionalParams
  ): Promise<CustomLocationsListEnabledResourceTypesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      listEnabledResourceTypesOperationSpec
    );
  }

  /**
   * Returns the target resource group associated with the resource sync rules of the Custom Location
   * that match the rules passed in with the Find Target Resource Group Request.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName Custom Locations name.
   * @param parameters Parameters of the find target resource group request.
   * @param options The options parameters.
   */
  findTargetResourceGroup(
    resourceGroupName: string,
    resourceName: string,
    parameters: CustomLocationFindTargetResourceGroupProperties,
    options?: CustomLocationsFindTargetResourceGroupOptionalParams
  ): Promise<CustomLocationsFindTargetResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, parameters, options },
      findTargetResourceGroupOperationSpec
    );
  }

  /**
   * ListOperationsNext
   * @param nextLink The nextLink from the previous successful call to the ListOperations method.
   * @param options The options parameters.
   */
  private _listOperationsNext(
    nextLink: string,
    options?: CustomLocationsListOperationsNextOptionalParams
  ): Promise<CustomLocationsListOperationsNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listOperationsNextOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: CustomLocationsListBySubscriptionNextOptionalParams
  ): Promise<CustomLocationsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: CustomLocationsListByResourceGroupNextOptionalParams
  ): Promise<CustomLocationsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListEnabledResourceTypesNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName Custom Locations name.
   * @param nextLink The nextLink from the previous successful call to the ListEnabledResourceTypes
   *                 method.
   * @param options The options parameters.
   */
  private _listEnabledResourceTypesNext(
    resourceGroupName: string,
    resourceName: string,
    nextLink: string,
    options?: CustomLocationsListEnabledResourceTypesNextOptionalParams
  ): Promise<CustomLocationsListEnabledResourceTypesNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, nextLink, options },
      listEnabledResourceTypesNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationsOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.ExtendedLocation/operations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomLocationOperationsList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.ExtendedLocation/customLocations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomLocationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ExtendedLocation/customLocations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomLocationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ExtendedLocation/customLocations/{resourceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomLocation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ExtendedLocation/customLocations/{resourceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.CustomLocation
    },
    201: {
      bodyMapper: Mappers.CustomLocation
    },
    202: {
      bodyMapper: Mappers.CustomLocation
    },
    204: {
      bodyMapper: Mappers.CustomLocation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ExtendedLocation/customLocations/{resourceName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ExtendedLocation/customLocations/{resourceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.CustomLocation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: {
    parameterPath: {
      identity: ["options", "identity"],
      tags: ["options", "tags"],
      authentication: ["options", "authentication"],
      clusterExtensionIds: ["options", "clusterExtensionIds"],
      displayName: ["options", "displayName"],
      hostResourceId: ["options", "hostResourceId"],
      hostType: ["options", "hostType"],
      namespace: ["options", "namespace"],
      provisioningState: ["options", "provisioningState"]
    },
    mapper: { ...Mappers.PatchableCustomLocations, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listEnabledResourceTypesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ExtendedLocation/customLocations/{resourceName}/enabledResourceTypes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EnabledResourceTypesListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const findTargetResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ExtendedLocation/customLocations/{resourceName}/findTargetResourceGroup",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CustomLocationFindTargetResourceGroupResult
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listOperationsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomLocationOperationsList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomLocationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomLocationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listEnabledResourceTypesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EnabledResourceTypesListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
