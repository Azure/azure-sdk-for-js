/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { CustomLocationsContext } from "./customLocationsContext";


class CustomLocations extends CustomLocationsContext {
  /**
   * Initializes a new instance of the CustomLocations class.
   * @param credentials Credentials needed for the client to connect to Azure.
   * @param subscriptionId The ID of the target subscription.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, subscriptionId: string, options?: Models.CustomLocationsOptions) {
    super(credentials, subscriptionId, options);
  }

  /**
   * Lists all available Custom Locations operations.
   * @param [options] The optional parameters
   * @returns Promise<Models.CustomLocationsListOperationsResponse>
   */
  listOperations(options?: msRest.RequestOptionsBase): Promise<Models.CustomLocationsListOperationsResponse>;
  /**
   * @param callback The callback
   */
  listOperations(callback: msRest.ServiceCallback<Models.CustomLocationOperationsList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listOperations(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CustomLocationOperationsList>): void;
  listOperations(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CustomLocationOperationsList>, callback?: msRest.ServiceCallback<Models.CustomLocationOperationsList>): Promise<Models.CustomLocationsListOperationsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listOperationsOperationSpec,
      callback) as Promise<Models.CustomLocationsListOperationsResponse>;
  }

  /**
   * Gets a list of Custom Locations in the specified subscription. The operation returns properties
   * of each Custom Location
   * @summary Gets a list of Custom Locations in a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.CustomLocationsListBySubscriptionResponse>
   */
  listBySubscription(options?: msRest.RequestOptionsBase): Promise<Models.CustomLocationsListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.CustomLocationListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CustomLocationListResult>): void;
  listBySubscription(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CustomLocationListResult>, callback?: msRest.ServiceCallback<Models.CustomLocationListResult>): Promise<Models.CustomLocationsListBySubscriptionResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.CustomLocationsListBySubscriptionResponse>;
  }

  /**
   * Gets a list of Custom Locations in the specified subscription and resource group. The operation
   * returns properties of each Custom Location.
   * @summary Gets a list of Custom Locations in the specified subscription and resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.CustomLocationsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.CustomLocationsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.CustomLocationListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CustomLocationListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CustomLocationListResult>, callback?: msRest.ServiceCallback<Models.CustomLocationListResult>): Promise<Models.CustomLocationsListByResourceGroupResponse> {
    return this.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.CustomLocationsListByResourceGroupResponse>;
  }

  /**
   * Gets the details of the customLocation with a specified resource group and name.
   * @summary Gets a Custom Location.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName Custom Locations name.
   * @param [options] The optional parameters
   * @returns Promise<Models.CustomLocationsGetResponse>
   */
  get(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase): Promise<Models.CustomLocationsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName Custom Locations name.
   * @param callback The callback
   */
  get(resourceGroupName: string, resourceName: string, callback: msRest.ServiceCallback<Models.CustomLocation>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName Custom Locations name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, resourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CustomLocation>): void;
  get(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CustomLocation>, callback?: msRest.ServiceCallback<Models.CustomLocation>): Promise<Models.CustomLocationsGetResponse> {
    return this.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.CustomLocationsGetResponse>;
  }

  /**
   * Creates or updates a Custom Location in the specified Subscription and Resource Group
   * @summary Creates or updates a Custom Location.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName Custom Locations name.
   * @param parameters Parameters supplied to create or update a Custom Location.
   * @param [options] The optional parameters
   * @returns Promise<Models.CustomLocationsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, resourceName: string, parameters: Models.CustomLocation, options?: msRest.RequestOptionsBase): Promise<Models.CustomLocationsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,resourceName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.CustomLocationsCreateOrUpdateResponse>;
  }

  /**
   * Deletes the Custom Location with the specified Resource Name, Resource Group, and Subscription
   * Id.
   * @summary Deletes a Custom Location.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName Custom Locations name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,resourceName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Updates a Custom Location with the specified Resource Name in the specified Resource Group and
   * Subscription.
   * @summary Updates a Custom Location.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName Custom Locations name.
   * @param [options] The optional parameters
   * @returns Promise<Models.CustomLocationsUpdateResponse>
   */
  update(resourceGroupName: string, resourceName: string, options?: Models.CustomLocationsUpdateOptionalParams): Promise<Models.CustomLocationsUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName Custom Locations name.
   * @param callback The callback
   */
  update(resourceGroupName: string, resourceName: string, callback: msRest.ServiceCallback<Models.CustomLocation>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName Custom Locations name.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, resourceName: string, options: Models.CustomLocationsUpdateOptionalParams, callback: msRest.ServiceCallback<Models.CustomLocation>): void;
  update(resourceGroupName: string, resourceName: string, options?: Models.CustomLocationsUpdateOptionalParams | msRest.ServiceCallback<Models.CustomLocation>, callback?: msRest.ServiceCallback<Models.CustomLocation>): Promise<Models.CustomLocationsUpdateResponse> {
    return this.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.CustomLocationsUpdateResponse>;
  }

  /**
   * Gets the list of the Enabled Resource Types.
   * @summary Gets the list of Enabled Resource Types.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName Custom Locations name.
   * @param [options] The optional parameters
   * @returns Promise<Models.CustomLocationsListEnabledResourceTypesResponse>
   */
  listEnabledResourceTypes(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase): Promise<Models.CustomLocationsListEnabledResourceTypesResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName Custom Locations name.
   * @param callback The callback
   */
  listEnabledResourceTypes(resourceGroupName: string, resourceName: string, callback: msRest.ServiceCallback<Models.EnabledResourceTypesListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName Custom Locations name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listEnabledResourceTypes(resourceGroupName: string, resourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EnabledResourceTypesListResult>): void;
  listEnabledResourceTypes(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EnabledResourceTypesListResult>, callback?: msRest.ServiceCallback<Models.EnabledResourceTypesListResult>): Promise<Models.CustomLocationsListEnabledResourceTypesResponse> {
    return this.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        options
      },
      listEnabledResourceTypesOperationSpec,
      callback) as Promise<Models.CustomLocationsListEnabledResourceTypesResponse>;
  }

  /**
   * Gets the details of the Enabled Resource Type.
   * @summary Gets details of a Enabled Resource Type.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName Custom Locations name.
   * @param enabledResourceTypeName Custom Locations Enabled Resource Type name.
   * @param [options] The optional parameters
   * @returns Promise<Models.CustomLocationsGetEnabledResourceTypeResponse>
   */
  getEnabledResourceType(resourceGroupName: string, resourceName: string, enabledResourceTypeName: string, options?: msRest.RequestOptionsBase): Promise<Models.CustomLocationsGetEnabledResourceTypeResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName Custom Locations name.
   * @param enabledResourceTypeName Custom Locations Enabled Resource Type name.
   * @param callback The callback
   */
  getEnabledResourceType(resourceGroupName: string, resourceName: string, enabledResourceTypeName: string, callback: msRest.ServiceCallback<Models.EnabledResourceType>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName Custom Locations name.
   * @param enabledResourceTypeName Custom Locations Enabled Resource Type name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getEnabledResourceType(resourceGroupName: string, resourceName: string, enabledResourceTypeName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EnabledResourceType>): void;
  getEnabledResourceType(resourceGroupName: string, resourceName: string, enabledResourceTypeName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EnabledResourceType>, callback?: msRest.ServiceCallback<Models.EnabledResourceType>): Promise<Models.CustomLocationsGetEnabledResourceTypeResponse> {
    return this.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        enabledResourceTypeName,
        options
      },
      getEnabledResourceTypeOperationSpec,
      callback) as Promise<Models.CustomLocationsGetEnabledResourceTypeResponse>;
  }

  /**
   * Creates or updates a Custom Location in the specified Subscription and Resource Group
   * @summary Creates or updates a Custom Location.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName Custom Locations name.
   * @param parameters Parameters supplied to create or update a Custom Location.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, resourceName: string, parameters: Models.CustomLocation, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.sendLRORequest(
      {
        resourceGroupName,
        resourceName,
        parameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Deletes the Custom Location with the specified Resource Name, Resource Group, and Subscription
   * Id.
   * @summary Deletes a Custom Location.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName Custom Locations name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.sendLRORequest(
      {
        resourceGroupName,
        resourceName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Lists all available Custom Locations operations.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.CustomLocationsListOperationsNextResponse>
   */
  listOperationsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.CustomLocationsListOperationsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listOperationsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CustomLocationOperationsList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listOperationsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CustomLocationOperationsList>): void;
  listOperationsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CustomLocationOperationsList>, callback?: msRest.ServiceCallback<Models.CustomLocationOperationsList>): Promise<Models.CustomLocationsListOperationsNextResponse> {
    return this.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listOperationsNextOperationSpec,
      callback) as Promise<Models.CustomLocationsListOperationsNextResponse>;
  }

  /**
   * Gets a list of Custom Locations in the specified subscription. The operation returns properties
   * of each Custom Location
   * @summary Gets a list of Custom Locations in a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.CustomLocationsListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.CustomLocationsListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CustomLocationListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CustomLocationListResult>): void;
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CustomLocationListResult>, callback?: msRest.ServiceCallback<Models.CustomLocationListResult>): Promise<Models.CustomLocationsListBySubscriptionNextResponse> {
    return this.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.CustomLocationsListBySubscriptionNextResponse>;
  }

  /**
   * Gets a list of Custom Locations in the specified subscription and resource group. The operation
   * returns properties of each Custom Location.
   * @summary Gets a list of Custom Locations in the specified subscription and resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.CustomLocationsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.CustomLocationsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CustomLocationListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CustomLocationListResult>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CustomLocationListResult>, callback?: msRest.ServiceCallback<Models.CustomLocationListResult>): Promise<Models.CustomLocationsListByResourceGroupNextResponse> {
    return this.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.CustomLocationsListByResourceGroupNextResponse>;
  }

  /**
   * Gets the list of the Enabled Resource Types.
   * @summary Gets the list of Enabled Resource Types.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.CustomLocationsListEnabledResourceTypesNextResponse>
   */
  listEnabledResourceTypesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.CustomLocationsListEnabledResourceTypesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listEnabledResourceTypesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.EnabledResourceTypesListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listEnabledResourceTypesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EnabledResourceTypesListResult>): void;
  listEnabledResourceTypesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EnabledResourceTypesListResult>, callback?: msRest.ServiceCallback<Models.EnabledResourceTypesListResult>): Promise<Models.CustomLocationsListEnabledResourceTypesNextResponse> {
    return this.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listEnabledResourceTypesNextOperationSpec,
      callback) as Promise<Models.CustomLocationsListEnabledResourceTypesNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.ExtendedLocation/operations",
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CustomLocationOperationsList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.ExtendedLocation/customLocations",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CustomLocationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ExtendedLocation/customLocations",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CustomLocationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ExtendedLocation/customLocations/{resourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CustomLocation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ExtendedLocation/customLocations/{resourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      authentication: [
        "options",
        "authentication"
      ],
      clusterExtensionIds: [
        "options",
        "clusterExtensionIds"
      ],
      displayName: [
        "options",
        "displayName"
      ],
      hostResourceId: [
        "options",
        "hostResourceId"
      ],
      hostType: [
        "options",
        "hostType"
      ],
      namespace: [
        "options",
        "namespace"
      ],
      provisioningState: [
        "options",
        "provisioningState"
      ],
      tags: [
        "options",
        "tags"
      ]
    },
    mapper: {
      ...Mappers.PatchableCustomLocations,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CustomLocation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listEnabledResourceTypesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ExtendedLocation/customLocations/{resourceName}/enabledResourceTypes",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EnabledResourceTypesListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getEnabledResourceTypeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ExtendedLocation/customLocations/{resourceName}/enabledResourceTypes/{enabledResourceTypeName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.enabledResourceTypeName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EnabledResourceType
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ExtendedLocation/customLocations/{resourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.CustomLocation,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CustomLocation
    },
    201: {
      bodyMapper: Mappers.CustomLocation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ExtendedLocation/customLocations/{resourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listOperationsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CustomLocationOperationsList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CustomLocationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CustomLocationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listEnabledResourceTypesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EnabledResourceTypesListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

export {
  CustomLocations,
  CustomLocationsContext,
  Models as CustomLocationsModels,
  Mappers as CustomLocationsMappers
};
