/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Instances } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DeviceUpdate } from "../deviceUpdate";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  Instance,
  InstancesListByAccountNextOptionalParams,
  InstancesListByAccountOptionalParams,
  InstancesListByAccountResponse,
  InstancesGetOptionalParams,
  InstancesGetResponse,
  InstancesHeadOptionalParams,
  InstancesHeadResponse,
  InstancesCreateOptionalParams,
  InstancesCreateResponse,
  InstancesDeleteOptionalParams,
  TagUpdate,
  InstancesUpdateOptionalParams,
  InstancesUpdateResponse,
  InstancesListByAccountNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Instances operations. */
export class InstancesImpl implements Instances {
  private readonly client: DeviceUpdate;

  /**
   * Initialize a new instance of the class Instances class.
   * @param client Reference to the service client
   */
  constructor(client: DeviceUpdate) {
    this.client = client;
  }

  /**
   * Returns instances for the given account name.
   * @param resourceGroupName The resource group name.
   * @param accountName Account name.
   * @param options The options parameters.
   */
  public listByAccount(
    resourceGroupName: string,
    accountName: string,
    options?: InstancesListByAccountOptionalParams
  ): PagedAsyncIterableIterator<Instance> {
    const iter = this.listByAccountPagingAll(
      resourceGroupName,
      accountName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByAccountPagingPage(
          resourceGroupName,
          accountName,
          options,
          settings
        );
      }
    };
  }

  private async *listByAccountPagingPage(
    resourceGroupName: string,
    accountName: string,
    options?: InstancesListByAccountOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Instance[]> {
    let result: InstancesListByAccountResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByAccount(
        resourceGroupName,
        accountName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByAccountNext(
        resourceGroupName,
        accountName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByAccountPagingAll(
    resourceGroupName: string,
    accountName: string,
    options?: InstancesListByAccountOptionalParams
  ): AsyncIterableIterator<Instance> {
    for await (const page of this.listByAccountPagingPage(
      resourceGroupName,
      accountName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Returns instances for the given account name.
   * @param resourceGroupName The resource group name.
   * @param accountName Account name.
   * @param options The options parameters.
   */
  private _listByAccount(
    resourceGroupName: string,
    accountName: string,
    options?: InstancesListByAccountOptionalParams
  ): Promise<InstancesListByAccountResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, options },
      listByAccountOperationSpec
    );
  }

  /**
   * Returns instance details for the given instance and account name.
   * @param resourceGroupName The resource group name.
   * @param accountName Account name.
   * @param instanceName Instance name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    instanceName: string,
    options?: InstancesGetOptionalParams
  ): Promise<InstancesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, instanceName, options },
      getOperationSpec
    );
  }

  /**
   * Checks whether instance exists.
   * @param resourceGroupName The resource group name.
   * @param accountName Account name.
   * @param instanceName Instance name.
   * @param options The options parameters.
   */
  head(
    resourceGroupName: string,
    accountName: string,
    instanceName: string,
    options?: InstancesHeadOptionalParams
  ): Promise<InstancesHeadResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, instanceName, options },
      headOperationSpec
    );
  }

  /**
   * Creates or updates instance.
   * @param resourceGroupName The resource group name.
   * @param accountName Account name.
   * @param instanceName Instance name.
   * @param instance Instance details.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    accountName: string,
    instanceName: string,
    instance: Instance,
    options?: InstancesCreateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<InstancesCreateResponse>,
      InstancesCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<InstancesCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, accountName, instanceName, instance, options },
      createOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates or updates instance.
   * @param resourceGroupName The resource group name.
   * @param accountName Account name.
   * @param instanceName Instance name.
   * @param instance Instance details.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    accountName: string,
    instanceName: string,
    instance: Instance,
    options?: InstancesCreateOptionalParams
  ): Promise<InstancesCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      accountName,
      instanceName,
      instance,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes instance.
   * @param resourceGroupName The resource group name.
   * @param accountName Account name.
   * @param instanceName Instance name.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    accountName: string,
    instanceName: string,
    options?: InstancesDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, accountName, instanceName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes instance.
   * @param resourceGroupName The resource group name.
   * @param accountName Account name.
   * @param instanceName Instance name.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    accountName: string,
    instanceName: string,
    options?: InstancesDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      accountName,
      instanceName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates instance's tags.
   * @param resourceGroupName The resource group name.
   * @param accountName Account name.
   * @param instanceName Instance name.
   * @param tagUpdatePayload Updated tags.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    accountName: string,
    instanceName: string,
    tagUpdatePayload: TagUpdate,
    options?: InstancesUpdateOptionalParams
  ): Promise<InstancesUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        instanceName,
        tagUpdatePayload,
        options
      },
      updateOperationSpec
    );
  }

  /**
   * ListByAccountNext
   * @param resourceGroupName The resource group name.
   * @param accountName Account name.
   * @param nextLink The nextLink from the previous successful call to the ListByAccount method.
   * @param options The options parameters.
   */
  private _listByAccountNext(
    resourceGroupName: string,
    accountName: string,
    nextLink: string,
    options?: InstancesListByAccountNextOptionalParams
  ): Promise<InstancesListByAccountNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, nextLink, options },
      listByAccountNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByAccountOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceUpdate/accounts/{accountName}/instances",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InstanceList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceUpdate/accounts/{accountName}/instances/{instanceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Instance
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.instanceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const headOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceUpdate/accounts/{accountName}/instances/{instanceName}",
  httpMethod: "HEAD",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.instanceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceUpdate/accounts/{accountName}/instances/{instanceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Instance
    },
    201: {
      bodyMapper: Mappers.Instance
    },
    202: {
      bodyMapper: Mappers.Instance
    },
    204: {
      bodyMapper: Mappers.Instance
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.instance,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.instanceName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceUpdate/accounts/{accountName}/instances/{instanceName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.instanceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceUpdate/accounts/{accountName}/instances/{instanceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Instance
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.tagUpdatePayload,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.instanceName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const listByAccountNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InstanceList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
