/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  CheckNameAvailabilityRequest as CheckNameAvailabilityRequestMapper,
  Account as AccountMapper,
  AccountUpdate as AccountUpdateMapper,
  Instance as InstanceMapper,
  TagUpdate as TagUpdateMapper,
  PrivateEndpointConnection as PrivateEndpointConnectionMapper,
  PrivateEndpointConnectionProxy as PrivateEndpointConnectionProxyMapper,
  PrivateEndpointUpdate as PrivateEndpointUpdateMapper
} from "../models/mappers";

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const request: OperationParameter = {
  parameterPath: "request",
  mapper: CheckNameAvailabilityRequestMapper
};

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2022-10-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const accountName: OperationURLParameter = {
  parameterPath: "accountName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9]+(-[A-Za-z0-9]+)*$"),
      MaxLength: 24,
      MinLength: 3
    },
    serializedName: "accountName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const account: OperationParameter = {
  parameterPath: "account",
  mapper: AccountMapper
};

export const accountUpdatePayload: OperationParameter = {
  parameterPath: "accountUpdatePayload",
  mapper: AccountUpdateMapper
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const instanceName: OperationURLParameter = {
  parameterPath: "instanceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9]+(-[A-Za-z0-9]+)*$"),
      MaxLength: 36,
      MinLength: 3
    },
    serializedName: "instanceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const instance: OperationParameter = {
  parameterPath: "instance",
  mapper: InstanceMapper
};

export const tagUpdatePayload: OperationParameter = {
  parameterPath: "tagUpdatePayload",
  mapper: TagUpdateMapper
};

export const privateEndpointConnectionName: OperationURLParameter = {
  parameterPath: "privateEndpointConnectionName",
  mapper: {
    serializedName: "privateEndpointConnectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const privateEndpointConnection: OperationParameter = {
  parameterPath: "privateEndpointConnection",
  mapper: PrivateEndpointConnectionMapper
};

export const groupId: OperationURLParameter = {
  parameterPath: "groupId",
  mapper: {
    serializedName: "groupId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const privateEndpointConnectionProxy: OperationParameter = {
  parameterPath: "privateEndpointConnectionProxy",
  mapper: PrivateEndpointConnectionProxyMapper
};

export const privateEndpointConnectionProxyId: OperationURLParameter = {
  parameterPath: "privateEndpointConnectionProxyId",
  mapper: {
    serializedName: "privateEndpointConnectionProxyId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const privateEndpointUpdate: OperationParameter = {
  parameterPath: "privateEndpointUpdate",
  mapper: PrivateEndpointUpdateMapper
};
