/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SpanStatusCode } from "@azure/core-tracing";
import { createSpan } from "../tracing";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DeviceUpdateClientContext } from "../deviceUpdateClientContext";
import {
  DeviceClass,
  UpdateId,
  Device,
  DevicesGetAllDevicesNextOptionalParams,
  DevicesGetAllDevicesOptionalParams,
  DeviceTag,
  Group,
  UpdatableDevices,
  DevicesGetGroupBestUpdatesNextOptionalParams,
  DevicesGetGroupBestUpdatesOptionalParams,
  DevicesGetAllDeviceClassesResponse,
  DevicesGetDeviceClassResponse,
  DevicesGetDeviceClassDeviceIdsResponse,
  DevicesGetDeviceClassInstallableUpdatesResponse,
  DevicesGetAllDevicesResponse,
  DevicesGetDeviceResponse,
  DevicesGetUpdateComplianceResponse,
  DevicesGetAllDeviceTagsResponse,
  DevicesGetDeviceTagResponse,
  DevicesGetAllGroupsResponse,
  DevicesGetGroupResponse,
  DevicesCreateOrUpdateGroupResponse,
  DevicesGetGroupUpdateComplianceResponse,
  DevicesGetGroupBestUpdatesResponse,
  DevicesGetAllDeviceClassesNextResponse,
  DevicesGetDeviceClassDeviceIdsNextResponse,
  DevicesGetDeviceClassInstallableUpdatesNextResponse,
  DevicesGetAllDevicesNextResponse,
  DevicesGetAllDeviceTagsNextResponse,
  DevicesGetAllGroupsNextResponse,
  DevicesGetGroupBestUpdatesNextResponse
} from "../models";

/** Class representing a Devices. */
export class Devices {
  private readonly client: DeviceUpdateClientContext;

  /**
   * Initialize a new instance of the class Devices class.
   * @param client Reference to the service client
   */
  constructor(client: DeviceUpdateClientContext) {
    this.client = client;
  }

  /**
   * Gets a list of all device classes (unique combinations of device manufacturer and model) for all
   * devices connected to Device Update for IoT Hub.
   * @param options The options parameters.
   */
  public listAllDeviceClasses(
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<DeviceClass> {
    const iter = this.getAllDeviceClassesPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getAllDeviceClassesPagingPage(options);
      }
    };
  }

  private async *getAllDeviceClassesPagingPage(
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<DeviceClass[]> {
    let result = await this._getAllDeviceClasses(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getAllDeviceClassesNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *getAllDeviceClassesPagingAll(
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<DeviceClass> {
    for await (const page of this.getAllDeviceClassesPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets a list of device identifiers in a device class.
   * @param deviceClassId Device class identifier.
   * @param options The options parameters.
   */
  public listDeviceClassDeviceIds(
    deviceClassId: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<string> {
    const iter = this.getDeviceClassDeviceIdsPagingAll(deviceClassId, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getDeviceClassDeviceIdsPagingPage(deviceClassId, options);
      }
    };
  }

  private async *getDeviceClassDeviceIdsPagingPage(
    deviceClassId: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<string[]> {
    let result = await this._getDeviceClassDeviceIds(deviceClassId, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getDeviceClassDeviceIdsNext(deviceClassId, continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *getDeviceClassDeviceIdsPagingAll(
    deviceClassId: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<string> {
    for await (const page of this.getDeviceClassDeviceIdsPagingPage(deviceClassId, options)) {
      yield* page;
    }
  }

  /**
   * Gets a list of installable updates for a device class.
   * @param deviceClassId Device class identifier.
   * @param options The options parameters.
   */
  public listDeviceClassInstallableUpdates(
    deviceClassId: string,
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<UpdateId> {
    const iter = this.getDeviceClassInstallableUpdatesPagingAll(deviceClassId, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getDeviceClassInstallableUpdatesPagingPage(deviceClassId, options);
      }
    };
  }

  private async *getDeviceClassInstallableUpdatesPagingPage(
    deviceClassId: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<UpdateId[]> {
    let result = await this._getDeviceClassInstallableUpdates(deviceClassId, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getDeviceClassInstallableUpdatesNext(
        deviceClassId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *getDeviceClassInstallableUpdatesPagingAll(
    deviceClassId: string,
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<UpdateId> {
    for await (const page of this.getDeviceClassInstallableUpdatesPagingPage(
      deviceClassId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets a list of devices connected to Device Update for IoT Hub.
   * @param options The options parameters.
   */
  public listAllDevices(
    options?: DevicesGetAllDevicesOptionalParams
  ): PagedAsyncIterableIterator<Device> {
    const iter = this.getAllDevicesPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getAllDevicesPagingPage(options);
      }
    };
  }

  private async *getAllDevicesPagingPage(
    options?: DevicesGetAllDevicesOptionalParams
  ): AsyncIterableIterator<Device[]> {
    let result = await this._getAllDevices(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getAllDevicesNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *getAllDevicesPagingAll(
    options?: DevicesGetAllDevicesOptionalParams
  ): AsyncIterableIterator<Device> {
    for await (const page of this.getAllDevicesPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets a list of available group device tags for all devices connected to Device Update for IoT Hub.
   * @param options The options parameters.
   */
  public listAllDeviceTags(
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<DeviceTag> {
    const iter = this.getAllDeviceTagsPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getAllDeviceTagsPagingPage(options);
      }
    };
  }

  private async *getAllDeviceTagsPagingPage(
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<DeviceTag[]> {
    let result = await this._getAllDeviceTags(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getAllDeviceTagsNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *getAllDeviceTagsPagingAll(
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<DeviceTag> {
    for await (const page of this.getAllDeviceTagsPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets a list of all device groups.
   * @param options The options parameters.
   */
  public listAllGroups(options?: coreHttp.OperationOptions): PagedAsyncIterableIterator<Group> {
    const iter = this.getAllGroupsPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getAllGroupsPagingPage(options);
      }
    };
  }

  private async *getAllGroupsPagingPage(
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Group[]> {
    let result = await this._getAllGroups(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getAllGroupsNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *getAllGroupsPagingAll(
    options?: coreHttp.OperationOptions
  ): AsyncIterableIterator<Group> {
    for await (const page of this.getAllGroupsPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Get the best available updates for a group and a count of how many devices need each update.
   * @param groupId Group identifier.
   * @param options The options parameters.
   */
  public listGroupBestUpdates(
    groupId: string,
    options?: DevicesGetGroupBestUpdatesOptionalParams
  ): PagedAsyncIterableIterator<UpdatableDevices> {
    const iter = this.getGroupBestUpdatesPagingAll(groupId, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getGroupBestUpdatesPagingPage(groupId, options);
      }
    };
  }

  private async *getGroupBestUpdatesPagingPage(
    groupId: string,
    options?: DevicesGetGroupBestUpdatesOptionalParams
  ): AsyncIterableIterator<UpdatableDevices[]> {
    let result = await this._getGroupBestUpdates(groupId, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getGroupBestUpdatesNext(groupId, continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *getGroupBestUpdatesPagingAll(
    groupId: string,
    options?: DevicesGetGroupBestUpdatesOptionalParams
  ): AsyncIterableIterator<UpdatableDevices> {
    for await (const page of this.getGroupBestUpdatesPagingPage(groupId, options)) {
      yield* page;
    }
  }

  /**
   * Gets a list of all device classes (unique combinations of device manufacturer and model) for all
   * devices connected to Device Update for IoT Hub.
   * @param options The options parameters.
   */
  private async _getAllDeviceClasses(
    options?: coreHttp.OperationOptions
  ): Promise<DevicesGetAllDeviceClassesResponse> {
    const { span, updatedOptions } = createSpan(
      "DeviceUpdateClient-_getAllDeviceClasses",
      coreHttp.operationOptionsToRequestOptionsBase(options || {})
    );
    const operationArguments: coreHttp.OperationArguments = {
      options: updatedOptions
    };
    try {
      const result = await this.client.sendOperationRequest(
        operationArguments,
        getAllDeviceClassesOperationSpec
      );
      return result as DevicesGetAllDeviceClassesResponse;
    } catch (error) {
      span.setStatus({
        code: SpanStatusCode.ERROR,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Gets the properties of a device class.
   * @param deviceClassId Device class identifier.
   * @param options The options parameters.
   */
  async getDeviceClass(
    deviceClassId: string,
    options?: coreHttp.OperationOptions
  ): Promise<DevicesGetDeviceClassResponse> {
    const { span, updatedOptions } = createSpan(
      "DeviceUpdateClient-getDeviceClass",
      coreHttp.operationOptionsToRequestOptionsBase(options || {})
    );
    const operationArguments: coreHttp.OperationArguments = {
      deviceClassId,
      options: updatedOptions
    };
    try {
      const result = await this.client.sendOperationRequest(
        operationArguments,
        getDeviceClassOperationSpec
      );
      return result as DevicesGetDeviceClassResponse;
    } catch (error) {
      span.setStatus({
        code: SpanStatusCode.ERROR,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Gets a list of device identifiers in a device class.
   * @param deviceClassId Device class identifier.
   * @param options The options parameters.
   */
  private async _getDeviceClassDeviceIds(
    deviceClassId: string,
    options?: coreHttp.OperationOptions
  ): Promise<DevicesGetDeviceClassDeviceIdsResponse> {
    const { span, updatedOptions } = createSpan(
      "DeviceUpdateClient-_getDeviceClassDeviceIds",
      coreHttp.operationOptionsToRequestOptionsBase(options || {})
    );
    const operationArguments: coreHttp.OperationArguments = {
      deviceClassId,
      options: updatedOptions
    };
    try {
      const result = await this.client.sendOperationRequest(
        operationArguments,
        getDeviceClassDeviceIdsOperationSpec
      );
      return result as DevicesGetDeviceClassDeviceIdsResponse;
    } catch (error) {
      span.setStatus({
        code: SpanStatusCode.ERROR,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Gets a list of installable updates for a device class.
   * @param deviceClassId Device class identifier.
   * @param options The options parameters.
   */
  private async _getDeviceClassInstallableUpdates(
    deviceClassId: string,
    options?: coreHttp.OperationOptions
  ): Promise<DevicesGetDeviceClassInstallableUpdatesResponse> {
    const { span, updatedOptions } = createSpan(
      "DeviceUpdateClient-_getDeviceClassInstallableUpdates",
      coreHttp.operationOptionsToRequestOptionsBase(options || {})
    );
    const operationArguments: coreHttp.OperationArguments = {
      deviceClassId,
      options: updatedOptions
    };
    try {
      const result = await this.client.sendOperationRequest(
        operationArguments,
        getDeviceClassInstallableUpdatesOperationSpec
      );
      return result as DevicesGetDeviceClassInstallableUpdatesResponse;
    } catch (error) {
      span.setStatus({
        code: SpanStatusCode.ERROR,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Gets a list of devices connected to Device Update for IoT Hub.
   * @param options The options parameters.
   */
  private async _getAllDevices(
    options?: DevicesGetAllDevicesOptionalParams
  ): Promise<DevicesGetAllDevicesResponse> {
    const { span, updatedOptions } = createSpan(
      "DeviceUpdateClient-_getAllDevices",
      coreHttp.operationOptionsToRequestOptionsBase(options || {})
    );
    const operationArguments: coreHttp.OperationArguments = {
      options: updatedOptions
    };
    try {
      const result = await this.client.sendOperationRequest(
        operationArguments,
        getAllDevicesOperationSpec
      );
      return result as DevicesGetAllDevicesResponse;
    } catch (error) {
      span.setStatus({
        code: SpanStatusCode.ERROR,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Gets the device properties and latest deployment status for a device connected to Device Update for
   * IoT Hub.
   * @param deviceId Device identifier in Azure IOT Hub.
   * @param options The options parameters.
   */
  async getDevice(
    deviceId: string,
    options?: coreHttp.OperationOptions
  ): Promise<DevicesGetDeviceResponse> {
    const { span, updatedOptions } = createSpan(
      "DeviceUpdateClient-getDevice",
      coreHttp.operationOptionsToRequestOptionsBase(options || {})
    );
    const operationArguments: coreHttp.OperationArguments = {
      deviceId,
      options: updatedOptions
    };
    try {
      const result = await this.client.sendOperationRequest(
        operationArguments,
        getDeviceOperationSpec
      );
      return result as DevicesGetDeviceResponse;
    } catch (error) {
      span.setStatus({
        code: SpanStatusCode.ERROR,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Gets the breakdown of how many devices are on their latest update, have new updates available, or
   * are in progress receiving new updates.
   * @param options The options parameters.
   */
  async getUpdateCompliance(
    options?: coreHttp.OperationOptions
  ): Promise<DevicesGetUpdateComplianceResponse> {
    const { span, updatedOptions } = createSpan(
      "DeviceUpdateClient-getUpdateCompliance",
      coreHttp.operationOptionsToRequestOptionsBase(options || {})
    );
    const operationArguments: coreHttp.OperationArguments = {
      options: updatedOptions
    };
    try {
      const result = await this.client.sendOperationRequest(
        operationArguments,
        getUpdateComplianceOperationSpec
      );
      return result as DevicesGetUpdateComplianceResponse;
    } catch (error) {
      span.setStatus({
        code: SpanStatusCode.ERROR,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Gets a list of available group device tags for all devices connected to Device Update for IoT Hub.
   * @param options The options parameters.
   */
  private async _getAllDeviceTags(
    options?: coreHttp.OperationOptions
  ): Promise<DevicesGetAllDeviceTagsResponse> {
    const { span, updatedOptions } = createSpan(
      "DeviceUpdateClient-_getAllDeviceTags",
      coreHttp.operationOptionsToRequestOptionsBase(options || {})
    );
    const operationArguments: coreHttp.OperationArguments = {
      options: updatedOptions
    };
    try {
      const result = await this.client.sendOperationRequest(
        operationArguments,
        getAllDeviceTagsOperationSpec
      );
      return result as DevicesGetAllDeviceTagsResponse;
    } catch (error) {
      span.setStatus({
        code: SpanStatusCode.ERROR,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Gets a count of how many devices have a device tag.
   * @param tagName Tag name.
   * @param options The options parameters.
   */
  async getDeviceTag(
    tagName: string,
    options?: coreHttp.OperationOptions
  ): Promise<DevicesGetDeviceTagResponse> {
    const { span, updatedOptions } = createSpan(
      "DeviceUpdateClient-getDeviceTag",
      coreHttp.operationOptionsToRequestOptionsBase(options || {})
    );
    const operationArguments: coreHttp.OperationArguments = {
      tagName,
      options: updatedOptions
    };
    try {
      const result = await this.client.sendOperationRequest(
        operationArguments,
        getDeviceTagOperationSpec
      );
      return result as DevicesGetDeviceTagResponse;
    } catch (error) {
      span.setStatus({
        code: SpanStatusCode.ERROR,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Gets a list of all device groups.
   * @param options The options parameters.
   */
  private async _getAllGroups(
    options?: coreHttp.OperationOptions
  ): Promise<DevicesGetAllGroupsResponse> {
    const { span, updatedOptions } = createSpan(
      "DeviceUpdateClient-_getAllGroups",
      coreHttp.operationOptionsToRequestOptionsBase(options || {})
    );
    const operationArguments: coreHttp.OperationArguments = {
      options: updatedOptions
    };
    try {
      const result = await this.client.sendOperationRequest(
        operationArguments,
        getAllGroupsOperationSpec
      );
      return result as DevicesGetAllGroupsResponse;
    } catch (error) {
      span.setStatus({
        code: SpanStatusCode.ERROR,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Gets the properties of a group.
   * @param groupId Group identifier.
   * @param options The options parameters.
   */
  async getGroup(
    groupId: string,
    options?: coreHttp.OperationOptions
  ): Promise<DevicesGetGroupResponse> {
    const { span, updatedOptions } = createSpan(
      "DeviceUpdateClient-getGroup",
      coreHttp.operationOptionsToRequestOptionsBase(options || {})
    );
    const operationArguments: coreHttp.OperationArguments = {
      groupId,
      options: updatedOptions
    };
    try {
      const result = await this.client.sendOperationRequest(
        operationArguments,
        getGroupOperationSpec
      );
      return result as DevicesGetGroupResponse;
    } catch (error) {
      span.setStatus({
        code: SpanStatusCode.ERROR,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Create or update a device group.
   * @param groupId Group identifier.
   * @param group The group properties.
   * @param options The options parameters.
   */
  async createOrUpdateGroup(
    groupId: string,
    group: Group,
    options?: coreHttp.OperationOptions
  ): Promise<DevicesCreateOrUpdateGroupResponse> {
    const { span, updatedOptions } = createSpan(
      "DeviceUpdateClient-createOrUpdateGroup",
      coreHttp.operationOptionsToRequestOptionsBase(options || {})
    );
    const operationArguments: coreHttp.OperationArguments = {
      groupId,
      group,
      options: updatedOptions
    };
    try {
      const result = await this.client.sendOperationRequest(
        operationArguments,
        createOrUpdateGroupOperationSpec
      );
      return result as DevicesCreateOrUpdateGroupResponse;
    } catch (error) {
      span.setStatus({
        code: SpanStatusCode.ERROR,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Deletes a device group.
   * @param groupId Group identifier.
   * @param options The options parameters.
   */
  async deleteGroup(
    groupId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const { span, updatedOptions } = createSpan(
      "DeviceUpdateClient-deleteGroup",
      coreHttp.operationOptionsToRequestOptionsBase(options || {})
    );
    const operationArguments: coreHttp.OperationArguments = {
      groupId,
      options: updatedOptions
    };
    try {
      const result = await this.client.sendOperationRequest(
        operationArguments,
        deleteGroupOperationSpec
      );
      return result as coreHttp.RestResponse;
    } catch (error) {
      span.setStatus({
        code: SpanStatusCode.ERROR,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Get group update compliance information such as how many devices are on their latest update, how
   * many need new updates, and how many are in progress on receiving a new update.
   * @param groupId Group identifier.
   * @param options The options parameters.
   */
  async getGroupUpdateCompliance(
    groupId: string,
    options?: coreHttp.OperationOptions
  ): Promise<DevicesGetGroupUpdateComplianceResponse> {
    const { span, updatedOptions } = createSpan(
      "DeviceUpdateClient-getGroupUpdateCompliance",
      coreHttp.operationOptionsToRequestOptionsBase(options || {})
    );
    const operationArguments: coreHttp.OperationArguments = {
      groupId,
      options: updatedOptions
    };
    try {
      const result = await this.client.sendOperationRequest(
        operationArguments,
        getGroupUpdateComplianceOperationSpec
      );
      return result as DevicesGetGroupUpdateComplianceResponse;
    } catch (error) {
      span.setStatus({
        code: SpanStatusCode.ERROR,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Get the best available updates for a group and a count of how many devices need each update.
   * @param groupId Group identifier.
   * @param options The options parameters.
   */
  private async _getGroupBestUpdates(
    groupId: string,
    options?: DevicesGetGroupBestUpdatesOptionalParams
  ): Promise<DevicesGetGroupBestUpdatesResponse> {
    const { span, updatedOptions } = createSpan(
      "DeviceUpdateClient-_getGroupBestUpdates",
      coreHttp.operationOptionsToRequestOptionsBase(options || {})
    );
    const operationArguments: coreHttp.OperationArguments = {
      groupId,
      options: updatedOptions
    };
    try {
      const result = await this.client.sendOperationRequest(
        operationArguments,
        getGroupBestUpdatesOperationSpec
      );
      return result as DevicesGetGroupBestUpdatesResponse;
    } catch (error) {
      span.setStatus({
        code: SpanStatusCode.ERROR,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * GetAllDeviceClassesNext
   * @param nextLink The nextLink from the previous successful call to the GetAllDeviceClasses method.
   * @param options The options parameters.
   */
  private async _getAllDeviceClassesNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<DevicesGetAllDeviceClassesNextResponse> {
    const { span, updatedOptions } = createSpan(
      "DeviceUpdateClient-_getAllDeviceClassesNext",
      coreHttp.operationOptionsToRequestOptionsBase(options || {})
    );
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: updatedOptions
    };
    try {
      const result = await this.client.sendOperationRequest(
        operationArguments,
        getAllDeviceClassesNextOperationSpec
      );
      return result as DevicesGetAllDeviceClassesNextResponse;
    } catch (error) {
      span.setStatus({
        code: SpanStatusCode.ERROR,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * GetDeviceClassDeviceIdsNext
   * @param deviceClassId Device class identifier.
   * @param nextLink The nextLink from the previous successful call to the GetDeviceClassDeviceIds
   *                 method.
   * @param options The options parameters.
   */
  private async _getDeviceClassDeviceIdsNext(
    deviceClassId: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<DevicesGetDeviceClassDeviceIdsNextResponse> {
    const { span, updatedOptions } = createSpan(
      "DeviceUpdateClient-_getDeviceClassDeviceIdsNext",
      coreHttp.operationOptionsToRequestOptionsBase(options || {})
    );
    const operationArguments: coreHttp.OperationArguments = {
      deviceClassId,
      nextLink,
      options: updatedOptions
    };
    try {
      const result = await this.client.sendOperationRequest(
        operationArguments,
        getDeviceClassDeviceIdsNextOperationSpec
      );
      return result as DevicesGetDeviceClassDeviceIdsNextResponse;
    } catch (error) {
      span.setStatus({
        code: SpanStatusCode.ERROR,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * GetDeviceClassInstallableUpdatesNext
   * @param deviceClassId Device class identifier.
   * @param nextLink The nextLink from the previous successful call to the
   *                 GetDeviceClassInstallableUpdates method.
   * @param options The options parameters.
   */
  private async _getDeviceClassInstallableUpdatesNext(
    deviceClassId: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<DevicesGetDeviceClassInstallableUpdatesNextResponse> {
    const { span, updatedOptions } = createSpan(
      "DeviceUpdateClient-_getDeviceClassInstallableUpdatesNext",
      coreHttp.operationOptionsToRequestOptionsBase(options || {})
    );
    const operationArguments: coreHttp.OperationArguments = {
      deviceClassId,
      nextLink,
      options: updatedOptions
    };
    try {
      const result = await this.client.sendOperationRequest(
        operationArguments,
        getDeviceClassInstallableUpdatesNextOperationSpec
      );
      return result as DevicesGetDeviceClassInstallableUpdatesNextResponse;
    } catch (error) {
      span.setStatus({
        code: SpanStatusCode.ERROR,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * GetAllDevicesNext
   * @param nextLink The nextLink from the previous successful call to the GetAllDevices method.
   * @param options The options parameters.
   */
  private async _getAllDevicesNext(
    nextLink: string,
    options?: DevicesGetAllDevicesNextOptionalParams
  ): Promise<DevicesGetAllDevicesNextResponse> {
    const { span, updatedOptions } = createSpan(
      "DeviceUpdateClient-_getAllDevicesNext",
      coreHttp.operationOptionsToRequestOptionsBase(options || {})
    );
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: updatedOptions
    };
    try {
      const result = await this.client.sendOperationRequest(
        operationArguments,
        getAllDevicesNextOperationSpec
      );
      return result as DevicesGetAllDevicesNextResponse;
    } catch (error) {
      span.setStatus({
        code: SpanStatusCode.ERROR,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * GetAllDeviceTagsNext
   * @param nextLink The nextLink from the previous successful call to the GetAllDeviceTags method.
   * @param options The options parameters.
   */
  private async _getAllDeviceTagsNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<DevicesGetAllDeviceTagsNextResponse> {
    const { span, updatedOptions } = createSpan(
      "DeviceUpdateClient-_getAllDeviceTagsNext",
      coreHttp.operationOptionsToRequestOptionsBase(options || {})
    );
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: updatedOptions
    };
    try {
      const result = await this.client.sendOperationRequest(
        operationArguments,
        getAllDeviceTagsNextOperationSpec
      );
      return result as DevicesGetAllDeviceTagsNextResponse;
    } catch (error) {
      span.setStatus({
        code: SpanStatusCode.ERROR,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * GetAllGroupsNext
   * @param nextLink The nextLink from the previous successful call to the GetAllGroups method.
   * @param options The options parameters.
   */
  private async _getAllGroupsNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<DevicesGetAllGroupsNextResponse> {
    const { span, updatedOptions } = createSpan(
      "DeviceUpdateClient-_getAllGroupsNext",
      coreHttp.operationOptionsToRequestOptionsBase(options || {})
    );
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: updatedOptions
    };
    try {
      const result = await this.client.sendOperationRequest(
        operationArguments,
        getAllGroupsNextOperationSpec
      );
      return result as DevicesGetAllGroupsNextResponse;
    } catch (error) {
      span.setStatus({
        code: SpanStatusCode.ERROR,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * GetGroupBestUpdatesNext
   * @param groupId Group identifier.
   * @param nextLink The nextLink from the previous successful call to the GetGroupBestUpdates method.
   * @param options The options parameters.
   */
  private async _getGroupBestUpdatesNext(
    groupId: string,
    nextLink: string,
    options?: DevicesGetGroupBestUpdatesNextOptionalParams
  ): Promise<DevicesGetGroupBestUpdatesNextResponse> {
    const { span, updatedOptions } = createSpan(
      "DeviceUpdateClient-_getGroupBestUpdatesNext",
      coreHttp.operationOptionsToRequestOptionsBase(options || {})
    );
    const operationArguments: coreHttp.OperationArguments = {
      groupId,
      nextLink,
      options: updatedOptions
    };
    try {
      const result = await this.client.sendOperationRequest(
        operationArguments,
        getGroupBestUpdatesNextOperationSpec
      );
      return result as DevicesGetGroupBestUpdatesNextResponse;
    } catch (error) {
      span.setStatus({
        code: SpanStatusCode.ERROR,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getAllDeviceClassesOperationSpec: coreHttp.OperationSpec = {
  path: "/deviceupdate/{instanceId}/v2/management/deviceclasses",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PageableListOfDeviceClasses
    }
  },
  urlParameters: [Parameters.accountEndpoint, Parameters.instanceId],
  headerParameters: [Parameters.accept],
  serializer
};
const getDeviceClassOperationSpec: coreHttp.OperationSpec = {
  path: "/deviceupdate/{instanceId}/v2/management/deviceclasses/{deviceClassId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeviceClass
    },
    404: {
      isError: true
    }
  },
  urlParameters: [Parameters.accountEndpoint, Parameters.instanceId, Parameters.deviceClassId],
  headerParameters: [Parameters.accept],
  serializer
};
const getDeviceClassDeviceIdsOperationSpec: coreHttp.OperationSpec = {
  path: "/deviceupdate/{instanceId}/v2/management/deviceclasses/{deviceClassId}/deviceids",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PageableListOfStrings
    },
    404: {
      isError: true
    }
  },
  urlParameters: [Parameters.accountEndpoint, Parameters.instanceId, Parameters.deviceClassId],
  headerParameters: [Parameters.accept],
  serializer
};
const getDeviceClassInstallableUpdatesOperationSpec: coreHttp.OperationSpec = {
  path: "/deviceupdate/{instanceId}/v2/management/deviceclasses/{deviceClassId}/installableupdates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PageableListOfUpdateIds
    },
    404: {
      isError: true
    }
  },
  urlParameters: [Parameters.accountEndpoint, Parameters.instanceId, Parameters.deviceClassId],
  headerParameters: [Parameters.accept],
  serializer
};
const getAllDevicesOperationSpec: coreHttp.OperationSpec = {
  path: "/deviceupdate/{instanceId}/v2/management/devices",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PageableListOfDevices
    }
  },
  queryParameters: [Parameters.filter],
  urlParameters: [Parameters.accountEndpoint, Parameters.instanceId],
  headerParameters: [Parameters.accept],
  serializer
};
const getDeviceOperationSpec: coreHttp.OperationSpec = {
  path: "/deviceupdate/{instanceId}/v2/management/devices/{deviceId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Device
    },
    404: {
      isError: true
    }
  },
  urlParameters: [Parameters.accountEndpoint, Parameters.instanceId, Parameters.deviceId],
  headerParameters: [Parameters.accept],
  serializer
};
const getUpdateComplianceOperationSpec: coreHttp.OperationSpec = {
  path: "/deviceupdate/{instanceId}/v2/management/updatecompliance",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UpdateCompliance
    }
  },
  urlParameters: [Parameters.accountEndpoint, Parameters.instanceId],
  headerParameters: [Parameters.accept],
  serializer
};
const getAllDeviceTagsOperationSpec: coreHttp.OperationSpec = {
  path: "/deviceupdate/{instanceId}/v2/management/devicetags",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PageableListOfDeviceTags
    }
  },
  urlParameters: [Parameters.accountEndpoint, Parameters.instanceId],
  headerParameters: [Parameters.accept],
  serializer
};
const getDeviceTagOperationSpec: coreHttp.OperationSpec = {
  path: "/deviceupdate/{instanceId}/v2/management/devicetags/{tagName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeviceTag
    },
    404: {
      isError: true
    }
  },
  urlParameters: [Parameters.accountEndpoint, Parameters.instanceId, Parameters.tagName],
  headerParameters: [Parameters.accept],
  serializer
};
const getAllGroupsOperationSpec: coreHttp.OperationSpec = {
  path: "/deviceupdate/{instanceId}/v2/management/groups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PageableListOfGroups
    }
  },
  urlParameters: [Parameters.accountEndpoint, Parameters.instanceId],
  headerParameters: [Parameters.accept],
  serializer
};
const getGroupOperationSpec: coreHttp.OperationSpec = {
  path: "/deviceupdate/{instanceId}/v2/management/groups/{groupId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Group
    },
    404: {
      isError: true
    }
  },
  urlParameters: [Parameters.accountEndpoint, Parameters.instanceId, Parameters.groupId],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateGroupOperationSpec: coreHttp.OperationSpec = {
  path: "/deviceupdate/{instanceId}/v2/management/groups/{groupId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Group
    },
    400: {
      isError: true
    },
    404: {
      isError: true
    }
  },
  requestBody: Parameters.group,
  urlParameters: [Parameters.accountEndpoint, Parameters.instanceId, Parameters.groupId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteGroupOperationSpec: coreHttp.OperationSpec = {
  path: "/deviceupdate/{instanceId}/v2/management/groups/{groupId}",
  httpMethod: "DELETE",
  responses: { 200: {}, 204: {} },
  urlParameters: [Parameters.accountEndpoint, Parameters.instanceId, Parameters.groupId],
  serializer
};
const getGroupUpdateComplianceOperationSpec: coreHttp.OperationSpec = {
  path: "/deviceupdate/{instanceId}/v2/management/groups/{groupId}/updateCompliance",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UpdateCompliance
    },
    404: {
      isError: true
    }
  },
  urlParameters: [Parameters.accountEndpoint, Parameters.instanceId, Parameters.groupId],
  headerParameters: [Parameters.accept],
  serializer
};
const getGroupBestUpdatesOperationSpec: coreHttp.OperationSpec = {
  path: "/deviceupdate/{instanceId}/v2/management/groups/{groupId}/bestUpdates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PageableListOfUpdatableDevices
    },
    404: {
      isError: true
    }
  },
  queryParameters: [Parameters.filter],
  urlParameters: [Parameters.accountEndpoint, Parameters.instanceId, Parameters.groupId],
  headerParameters: [Parameters.accept],
  serializer
};
const getAllDeviceClassesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PageableListOfDeviceClasses
    }
  },
  urlParameters: [Parameters.accountEndpoint, Parameters.instanceId, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getDeviceClassDeviceIdsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PageableListOfStrings
    },
    404: {
      isError: true
    }
  },
  urlParameters: [
    Parameters.accountEndpoint,
    Parameters.instanceId,
    Parameters.nextLink,
    Parameters.deviceClassId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getDeviceClassInstallableUpdatesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PageableListOfUpdateIds
    },
    404: {
      isError: true
    }
  },
  urlParameters: [
    Parameters.accountEndpoint,
    Parameters.instanceId,
    Parameters.nextLink,
    Parameters.deviceClassId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getAllDevicesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PageableListOfDevices
    }
  },
  queryParameters: [Parameters.filter],
  urlParameters: [Parameters.accountEndpoint, Parameters.instanceId, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getAllDeviceTagsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PageableListOfDeviceTags
    }
  },
  urlParameters: [Parameters.accountEndpoint, Parameters.instanceId, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getAllGroupsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PageableListOfGroups
    }
  },
  urlParameters: [Parameters.accountEndpoint, Parameters.instanceId, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getGroupBestUpdatesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PageableListOfUpdatableDevices
    },
    404: {
      isError: true
    }
  },
  queryParameters: [Parameters.filter],
  urlParameters: [
    Parameters.accountEndpoint,
    Parameters.instanceId,
    Parameters.nextLink,
    Parameters.groupId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
