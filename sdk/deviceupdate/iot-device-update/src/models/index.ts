/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/** Import update input metadata. */
export interface ImportUpdateInput {
  /** Import manifest metadata like source URL, file size/hashes, etc. */
  importManifest: ImportManifestMetadata;
  /** One or more update file properties like filename and source URL. */
  files: FileImportMetadata[];
}

/** Metadata describing the import manifest, a document which describes the files and other metadata about an update version. */
export interface ImportManifestMetadata {
  /** Azure Blob location from which the import manifest can be downloaded by Device Update for IoT Hub. This is typically a read-only SAS-protected blob URL with an expiration set to at least 4 hours. */
  url: string;
  /** File size in number of bytes. */
  sizeInBytes: number;
  /** A JSON object containing the hash(es) of the file. At least SHA256 hash is required. This object can be thought of as a set of key-value pairs where the key is the hash algorithm, and the value is the hash of the file calculated using that algorithm. */
  hashes: { [propertyName: string]: string };
}

/** Metadata describing an update file. */
export interface FileImportMetadata {
  /** Update file name as specified inside import manifest. */
  filename: string;
  /** Azure Blob location from which the update file can be downloaded by Device Update for IoT Hub. This is typically a read-only SAS-protected blob URL with an expiration set to at least 4 hours. */
  url: string;
}

/** Update metadata. */
export interface Update {
  /** Update identity. */
  updateId: UpdateId;
  /** Update type. */
  updateType: string;
  /** String interpreted by Device Update client to determine if the update is installed on the device. */
  installedCriteria: string;
  /** List of update compatibility information. */
  compatibility: Compatibility[];
  /** Schema version of manifest used to import the update. */
  manifestVersion: string;
  /** Date and time in UTC when the update was imported. */
  importedDateTime: Date;
  /** Date and time in UTC when the update was created. */
  createdDateTime: Date;
  /** Update ETag. */
  etag?: string;
}

/** Update identifier. */
export interface UpdateId {
  /** Update provider. */
  provider: string;
  /** Update name. */
  name: string;
  /** Update version. */
  version: string;
}

/** Update compatibility information. */
export interface Compatibility {
  /** The manufacturer of device the update is compatible with. */
  deviceManufacturer: string;
  /** The model of device the update is compatible with. */
  deviceModel: string;
}

/** The list of strings with server paging support. */
export interface PageableListOfStrings {
  /** The collection of pageable items. */
  value?: string[];
  /** The link to the next page of items. */
  nextLink?: string;
}

/** Update file metadata. */
export interface File {
  /** File identity, generated by server at import time. */
  fileId: string;
  /** File name. */
  fileName: string;
  /** File size in number of bytes. */
  sizeInBytes: number;
  /** Mapping of hashing algorithm to base64 encoded hash values. */
  hashes: { [propertyName: string]: string };
  /** File MIME type. */
  mimeType?: string;
  /** File ETag. */
  etag?: string;
}

/** The list of operations with server paging support. */
export interface PageableListOfOperations {
  /** The collection of pageable items. */
  value?: Operation[];
  /** The link to the next page of items. */
  nextLink?: string;
}

/** Operation metadata. */
export interface Operation {
  /** Operation Id. */
  operationId: string;
  /** Operation status. */
  status: OperationStatus;
  /** The identity of update being imported or deleted. For import, this property will only be populated after import manifest is processed successfully. */
  updateId?: UpdateId;
  /** Location of the imported update when operation is successful. */
  resourceLocation?: string;
  /** Operation error encountered, if any. */
  error?: ErrorModel;
  /** Operation correlation identity that can used by Microsoft Support for troubleshooting. */
  traceId?: string;
  /** Date and time in UTC when the operation status was last updated. */
  lastActionDateTime: Date;
  /** Date and time in UTC when the operation was created. */
  createdDateTime: Date;
  /** Operation ETag. */
  etag?: string;
}

/** Error details. */
export interface ErrorModel {
  /** Server defined error code. */
  code: string;
  /** A human-readable representation of the error. */
  message: string;
  /** The target of the error. */
  target?: string;
  /** An array of errors that led to the reported error. */
  details?: ErrorModel[];
  /** An object containing more specific information than the current object about the error. */
  innererror?: InnerError;
  /** Date and time in UTC when the error occurred. */
  occurredDateTime?: Date;
}

/** An object containing more specific information than the current object about the error. */
export interface InnerError {
  /** A more specific error code than what was provided by the containing error. */
  code: string;
  /** A human-readable representation of the error. */
  message?: string;
  /** The internal error or exception message. */
  errorDetail?: string;
  /** An object containing more specific information than the current object about the error. */
  innerError?: InnerError;
}

/** The list of device classes. */
export interface PageableListOfDeviceClasses {
  /** The collection of pageable items. */
  value?: DeviceClass[];
  /** The link to the next page of items. */
  nextLink?: string;
}

/** Device class metadata. */
export interface DeviceClass {
  /** The device class identifier. */
  deviceClassId: string;
  /** Device manufacturer */
  manufacturer: string;
  /** Device model. */
  model: string;
  /** Update identity. */
  bestCompatibleUpdateId: UpdateId | null;
}

/** The list of update identities. */
export interface PageableListOfUpdateIds {
  /** The collection of pageable items. */
  value?: UpdateId[];
  /** The link to the next page of items. */
  nextLink?: string;
}

/** The list of devices. */
export interface PageableListOfDevices {
  /** The collection of pageable items. */
  value?: Device[];
  /** The link to the next page of items. */
  nextLink?: string;
}

/** Device metadata. */
export interface Device {
  /** Device identity. */
  deviceId: string;
  /** Device class identity. */
  deviceClassId: string;
  /** Device manufacturer. */
  manufacturer: string;
  /** Device model. */
  model: string;
  /** Device group identity. */
  groupId?: string;
  /** Update identity. */
  lastAttemptedUpdateId?: UpdateId | null;
  /** State of the device in its last deployment. */
  deploymentStatus?: DeviceDeploymentState;
  /** Update identity. */
  installedUpdateId?: UpdateId | null;
  /** Boolean flag indicating whether the latest update is installed on the device */
  onLatestUpdate: boolean;
  /** The deployment identifier for the last deployment to the device */
  lastDeploymentId?: string;
}

/** Update compliance information. */
export interface UpdateCompliance {
  /** Total number of devices. */
  totalDeviceCount: number;
  /** Number of devices on the latest update. */
  onLatestUpdateDeviceCount: number;
  /** Number of devices with a newer update available. */
  newUpdatesAvailableDeviceCount: number;
  /** Number of devices with update in-progress. */
  updatesInProgressDeviceCount: number;
}

/** The list of device tags. */
export interface PageableListOfDeviceTags {
  /** The collection of pageable items. */
  value?: DeviceTag[];
  /** The link to the next page of items. */
  nextLink?: string;
}

/** Device tag properties. */
export interface DeviceTag {
  /** Tag name. */
  tagName: string;
  /** Number of devices with this tag. */
  deviceCount: number;
}

/** The list of groups. */
export interface PageableListOfGroups {
  /** The collection of pageable items. */
  value?: Group[];
  /** The link to the next page of items. */
  nextLink?: string;
}

/** Group details. */
export interface Group {
  /** Group identity. */
  groupId: string;
  /** Group type. */
  groupType: GroupType;
  /** IoT Hub tags. */
  tags: string[];
  /** Date and time when the update was created. */
  createdDateTime: string;
  /** The number of devices in the group. */
  deviceCount?: number;
}

/** The list of updatable devices. */
export interface PageableListOfUpdatableDevices {
  /** The collection of pageable items. */
  value?: UpdatableDevices[];
  /** The link to the next page of items. */
  nextLink?: string;
}

/** Update identifier and the number of devices for which the update is applicable. */
export interface UpdatableDevices {
  /** Update identity. */
  updateId: UpdateId;
  /** Total number of devices for which the update is applicable. */
  deviceCount: number;
}

/** The list of deployments. */
export interface PageableListOfDeployments {
  /** The collection of pageable items. */
  value?: Deployment[];
  /** The link to the next page of items. */
  nextLink?: string;
}

/** Deployment metadata. */
export interface Deployment {
  /** Gets or sets the deployment identifier. */
  deploymentId: string;
  /** Gets or sets the deployment type. */
  deploymentType: DeploymentType;
  /** Gets or sets the device class identifier. */
  deviceClassId?: string;
  /** Gets or sets the Deployment start datetime. */
  startDateTime: Date;
  /** Gets or sets the device group type. */
  deviceGroupType: DeviceGroupType;
  /** Gets or sets the device group definition. */
  deviceGroupDefinition: string[];
  /** Update identity. */
  updateId: UpdateId;
  /** Boolean flag indicating whether the deployment was canceled. */
  isCanceled?: boolean;
  /** Boolean flag indicating whether the deployment has been retried. */
  isRetried?: boolean;
  /** Boolean flag indicating whether the deployment was completed. */
  isCompleted?: boolean;
}

/** Deployment status metadata. */
export interface DeploymentStatus {
  /** Gets or sets the state of the deployment. */
  deploymentState: DeploymentState;
  /** Gets or sets the total number of devices in the deployment. */
  totalDevices?: number;
  /** Gets or sets the number of incompatible devices in the deployment. */
  devicesIncompatibleCount?: number;
  /** Gets or sets the number of devices that are currently in deployment. */
  devicesInProgressCount?: number;
  /** Gets or sets the number of devices that have completed deployment with a failure. */
  devicesCompletedFailedCount?: number;
  /** Gets or sets the number of devices which have successfully completed deployment. */
  devicesCompletedSucceededCount?: number;
  /** Gets or sets the number of devices which have had their deployment canceled. */
  devicesCanceledCount?: number;
}

/** The list of deployment device states. */
export interface PageableListOfDeploymentDeviceStates {
  /** The collection of pageable items. */
  value?: DeploymentDeviceState[];
  /** The link to the next page of items. */
  nextLink?: string;
}

/** Deployment device status. */
export interface DeploymentDeviceState {
  /** Device identity. */
  deviceId: string;
  /** The number of times this deployment has been retried on this device. */
  retryCount: number;
  /** Boolean flag indicating whether this device is in a newer deployment and can no longer retry this deployment. */
  movedOnToNewDeployment: boolean;
  /** Deployment device state. */
  deviceState: DeviceDeploymentState;
}

/** Operation status filter. */
export interface DeviceFilter {
  /** Device group identifier. */
  groupId?: string;
}

/** Operation status filter. */
export interface OperationFilter {
  /** Operation status filter. */
  status?: OperationFilterStatus;
}

/** Deployment filter. */
export interface DeploymentFilter {
  /** Update provider. */
  provider?: string;
  /** Update name. */
  name?: string;
  /** Update version. */
  version?: string;
}

/** Group best updates filter. */
export interface GroupBestUpdatesFilter {
  /** Update provider. */
  provider?: string;
  /** Update name. */
  name?: string;
  /** Update version. */
  version?: string;
}

/** Deployment device state filter. */
export interface DeploymentDeviceStatesFilter {
  /** Device Identifier. */
  deviceId?: string;
  /** The deployment device state. */
  deviceState?: DeviceState;
}

/** Defines headers for Updates_importUpdate operation. */
export interface UpdatesImportUpdateHeaders {
  /** Url to retrieve the import operation status. */
  location?: string;
  /** Url to retrieve the import operation status. */
  operationLocation?: string;
}

/** Defines headers for Updates_deleteUpdate operation. */
export interface UpdatesDeleteUpdateHeaders {
  /** Url to retrieve the operation status */
  location?: string;
  /** Url to retrieve the operation status */
  operationLocation?: string;
}

/** Defines headers for Updates_getOperation operation. */
export interface UpdatesGetOperationHeaders {
  /** Number of seconds to wait before checking the operation status again. */
  retryAfter?: string;
}

/** Parameter group */
export interface AccessCondition {
  /** Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value. */
  ifNoneMatch?: string;
}

/** Known values of {@link OperationStatus} that the service accepts. */
export const enum KnownOperationStatus {
  /** Undefined operation status. */
  Undefined = "Undefined",
  /** Background operation created but not started yet. */
  NotStarted = "NotStarted",
  /** Background operation is currently running. */
  Running = "Running",
  /** Background operation finished with success. */
  Succeeded = "Succeeded",
  /** Background operation finished with failure. */
  Failed = "Failed"
}

/**
 * Defines values for OperationStatus. \
 * {@link KnownOperationStatus} can be used interchangeably with OperationStatus,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Undefined**: Undefined operation status. \
 * **NotStarted**: Background operation created but not started yet. \
 * **Running**: Background operation is currently running. \
 * **Succeeded**: Background operation finished with success. \
 * **Failed**: Background operation finished with failure.
 */
export type OperationStatus = string;

/** Known values of {@link DeviceDeploymentState} that the service accepts. */
export const enum KnownDeviceDeploymentState {
  /** Deployment has completed with success. */
  Succeeded = "Succeeded",
  /** Deployment is in progress. */
  InProgress = "InProgress",
  /** Deployment has completed with failure. */
  Failed = "Failed",
  /** Deployment was canceled. */
  Canceled = "Canceled",
  /** Deployment is not compatible with the device. */
  Incompatible = "Incompatible"
}

/**
 * Defines values for DeviceDeploymentState. \
 * {@link KnownDeviceDeploymentState} can be used interchangeably with DeviceDeploymentState,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Succeeded**: Deployment has completed with success. \
 * **InProgress**: Deployment is in progress. \
 * **Failed**: Deployment has completed with failure. \
 * **Canceled**: Deployment was canceled. \
 * **Incompatible**: Deployment is not compatible with the device.
 */
export type DeviceDeploymentState = string;

/** Known values of {@link GroupType} that the service accepts. */
export const enum KnownGroupType {
  /** IoT Hub tag based group. */
  IoTHubTag = "IoTHubTag"
}

/**
 * Defines values for GroupType. \
 * {@link KnownGroupType} can be used interchangeably with GroupType,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **IoTHubTag**: IoT Hub tag based group.
 */
export type GroupType = string;

/** Known values of {@link DeploymentType} that the service accepts. */
export const enum KnownDeploymentType {
  /** A complete deployment including download, install, and apply actions. */
  Complete = "Complete",
  /** A download-only deployment that does not include any install or apply actions. Not currently supported. */
  Download = "Download",
  /** An install-only rollout that does not include any download actions, only install and complete. Not currently supported. */
  Install = "Install"
}

/**
 * Defines values for DeploymentType. \
 * {@link KnownDeploymentType} can be used interchangeably with DeploymentType,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Complete**: A complete deployment including download, install, and apply actions. \
 * **Download**: A download-only deployment that does not include any install or apply actions. Not currently supported. \
 * **Install**: An install-only rollout that does not include any download actions, only install and complete. Not currently supported.
 */
export type DeploymentType = string;

/** Known values of {@link DeviceGroupType} that the service accepts. */
export const enum KnownDeviceGroupType {
  /** The deployment should be sent to all devices in the device class. */
  All = "All",
  /** The deployment should be sent to the list of devices in the device group definition. */
  Devices = "Devices",
  /** The deployment should be sent to the list of devices returned by the union of all the device group definition queries. */
  DeviceGroupDefinitions = "DeviceGroupDefinitions"
}

/**
 * Defines values for DeviceGroupType. \
 * {@link KnownDeviceGroupType} can be used interchangeably with DeviceGroupType,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **All**: The deployment should be sent to all devices in the device class. \
 * **Devices**: The deployment should be sent to the list of devices in the device group definition. \
 * **DeviceGroupDefinitions**: The deployment should be sent to the list of devices returned by the union of all the device group definition queries.
 */
export type DeviceGroupType = string;

/** Known values of {@link DeploymentState} that the service accepts. */
export const enum KnownDeploymentState {
  /** The deployment can be sent to devices targeted in the deployment. */
  Active = "Active",
  /** A newer deployment with the same targeting exists and no devices will receive this deployment. */
  Superseded = "Superseded",
  /** The deployment has been canceled and no devices will receive it. */
  Canceled = "Canceled"
}

/**
 * Defines values for DeploymentState. \
 * {@link KnownDeploymentState} can be used interchangeably with DeploymentState,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Active**: The deployment can be sent to devices targeted in the deployment. \
 * **Superseded**: A newer deployment with the same targeting exists and no devices will receive this deployment. \
 * **Canceled**: The deployment has been canceled and no devices will receive it.
 */
export type DeploymentState = string;

/** Known values of {@link OperationFilterStatus} that the service accepts. */
export const enum KnownOperationFilterStatus {
  Running = "Running",
  NotStarted = "NotStarted"
}

/**
 * Defines values for OperationFilterStatus. \
 * {@link KnownOperationFilterStatus} can be used interchangeably with OperationFilterStatus,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **Running** \
 * **NotStarted**
 */
export type OperationFilterStatus = string;

/** Known values of {@link DeviceState} that the service accepts. */
export const enum KnownDeviceState {
  /** Not started (or uninitialized) */
  NotStarted = "NotStarted",
  /** Deployment incompatible for this device. */
  Incompatible = "Incompatible",
  /** Another Deployment is underway for this device. */
  AlreadyInDeployment = "AlreadyInDeployment",
  /** Deployment has been canceled for this device. */
  Canceled = "Canceled",
  /** Deployment underway. */
  InProgress = "InProgress",
  /** Deployment failed. */
  Failed = "Failed",
  /** Deployment completed successfully. */
  Succeeded = "Succeeded"
}

/**
 * Defines values for DeviceState. \
 * {@link KnownDeviceState} can be used interchangeably with DeviceState,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **NotStarted**: Not started (or uninitialized) \
 * **Incompatible**: Deployment incompatible for this device. \
 * **AlreadyInDeployment**: Another Deployment is underway for this device. \
 * **Canceled**: Deployment has been canceled for this device. \
 * **InProgress**: Deployment underway. \
 * **Failed**: Deployment failed. \
 * **Succeeded**: Deployment completed successfully.
 */
export type DeviceState = string;

/** Contains response data for the importUpdate operation. */
export type UpdatesImportUpdateResponse = UpdatesImportUpdateHeaders & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The parsed HTTP response headers. */
    parsedHeaders: UpdatesImportUpdateHeaders;
  };
};

/** Optional parameters. */
export interface UpdatesGetUpdateOptionalParams extends coreHttp.OperationOptions {
  /** Parameter group */
  accessCondition?: AccessCondition;
}

/** Contains response data for the getUpdate operation. */
export type UpdatesGetUpdateResponse = Update & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: Update;
  };
};

/** Contains response data for the deleteUpdate operation. */
export type UpdatesDeleteUpdateResponse = UpdatesDeleteUpdateHeaders & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The parsed HTTP response headers. */
    parsedHeaders: UpdatesDeleteUpdateHeaders;
  };
};

/** Contains response data for the getProviders operation. */
export type UpdatesGetProvidersResponse = PageableListOfStrings & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PageableListOfStrings;
  };
};

/** Contains response data for the getNames operation. */
export type UpdatesGetNamesResponse = PageableListOfStrings & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PageableListOfStrings;
  };
};

/** Contains response data for the getVersions operation. */
export type UpdatesGetVersionsResponse = PageableListOfStrings & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PageableListOfStrings;
  };
};

/** Contains response data for the getFiles operation. */
export type UpdatesGetFilesResponse = PageableListOfStrings & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PageableListOfStrings;
  };
};

/** Optional parameters. */
export interface UpdatesGetFileOptionalParams extends coreHttp.OperationOptions {
  /** Parameter group */
  accessCondition?: AccessCondition;
}

/** Contains response data for the getFile operation. */
export type UpdatesGetFileResponse = File & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: File;
  };
};

/** Optional parameters. */
export interface UpdatesGetOperationsOptionalParams extends coreHttp.OperationOptions {
  /** Restricts the set of operations returned. Only one specific filter is supported: "status eq 'NotStarted' or status eq 'Running'" */
  filter?: string;
  /** Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. */
  top?: number;
}

/** Contains response data for the getOperations operation. */
export type UpdatesGetOperationsResponse = PageableListOfOperations & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PageableListOfOperations;
  };
};

/** Optional parameters. */
export interface UpdatesGetOperationOptionalParams extends coreHttp.OperationOptions {
  /** Parameter group */
  accessCondition?: AccessCondition;
}

/** Contains response data for the getOperation operation. */
export type UpdatesGetOperationResponse = UpdatesGetOperationHeaders &
  Operation & {
    /** The underlying HTTP response. */
    _response: coreHttp.HttpResponse & {
      /** The response body as text (string format) */
      bodyAsText: string;

      /** The response body as parsed JSON or XML */
      parsedBody: Operation;
      /** The parsed HTTP response headers. */
      parsedHeaders: UpdatesGetOperationHeaders;
    };
  };

/** Contains response data for the getProvidersNext operation. */
export type UpdatesGetProvidersNextResponse = PageableListOfStrings & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PageableListOfStrings;
  };
};

/** Contains response data for the getNamesNext operation. */
export type UpdatesGetNamesNextResponse = PageableListOfStrings & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PageableListOfStrings;
  };
};

/** Contains response data for the getVersionsNext operation. */
export type UpdatesGetVersionsNextResponse = PageableListOfStrings & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PageableListOfStrings;
  };
};

/** Contains response data for the getFilesNext operation. */
export type UpdatesGetFilesNextResponse = PageableListOfStrings & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PageableListOfStrings;
  };
};

/** Optional parameters. */
export interface UpdatesGetOperationsNextOptionalParams extends coreHttp.OperationOptions {
  /** Restricts the set of operations returned. Only one specific filter is supported: "status eq 'NotStarted' or status eq 'Running'" */
  filter?: string;
  /** Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. */
  top?: number;
}

/** Contains response data for the getOperationsNext operation. */
export type UpdatesGetOperationsNextResponse = PageableListOfOperations & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PageableListOfOperations;
  };
};

/** Contains response data for the getAllDeviceClasses operation. */
export type DevicesGetAllDeviceClassesResponse = PageableListOfDeviceClasses & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PageableListOfDeviceClasses;
  };
};

/** Contains response data for the getDeviceClass operation. */
export type DevicesGetDeviceClassResponse = DeviceClass & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: DeviceClass;
  };
};

/** Contains response data for the getDeviceClassDeviceIds operation. */
export type DevicesGetDeviceClassDeviceIdsResponse = PageableListOfStrings & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PageableListOfStrings;
  };
};

/** Contains response data for the getDeviceClassInstallableUpdates operation. */
export type DevicesGetDeviceClassInstallableUpdatesResponse = PageableListOfUpdateIds & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PageableListOfUpdateIds;
  };
};

/** Optional parameters. */
export interface DevicesGetAllDevicesOptionalParams extends coreHttp.OperationOptions {
  /** Restricts the set of devices returned. You can only filter on device GroupId. */
  filter?: string;
}

/** Contains response data for the getAllDevices operation. */
export type DevicesGetAllDevicesResponse = PageableListOfDevices & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PageableListOfDevices;
  };
};

/** Contains response data for the getDevice operation. */
export type DevicesGetDeviceResponse = Device & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: Device;
  };
};

/** Contains response data for the getUpdateCompliance operation. */
export type DevicesGetUpdateComplianceResponse = UpdateCompliance & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: UpdateCompliance;
  };
};

/** Contains response data for the getAllDeviceTags operation. */
export type DevicesGetAllDeviceTagsResponse = PageableListOfDeviceTags & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PageableListOfDeviceTags;
  };
};

/** Contains response data for the getDeviceTag operation. */
export type DevicesGetDeviceTagResponse = DeviceTag & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: DeviceTag;
  };
};

/** Contains response data for the getAllGroups operation. */
export type DevicesGetAllGroupsResponse = PageableListOfGroups & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PageableListOfGroups;
  };
};

/** Contains response data for the getGroup operation. */
export type DevicesGetGroupResponse = Group & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: Group;
  };
};

/** Contains response data for the createOrUpdateGroup operation. */
export type DevicesCreateOrUpdateGroupResponse = Group & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: Group;
  };
};

/** Contains response data for the getGroupUpdateCompliance operation. */
export type DevicesGetGroupUpdateComplianceResponse = UpdateCompliance & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: UpdateCompliance;
  };
};

/** Optional parameters. */
export interface DevicesGetGroupBestUpdatesOptionalParams extends coreHttp.OperationOptions {
  /** Restricts the set of bestUpdates returned. You can filter on update Provider, Name and Version property. */
  filter?: string;
}

/** Contains response data for the getGroupBestUpdates operation. */
export type DevicesGetGroupBestUpdatesResponse = PageableListOfUpdatableDevices & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PageableListOfUpdatableDevices;
  };
};

/** Contains response data for the getAllDeviceClassesNext operation. */
export type DevicesGetAllDeviceClassesNextResponse = PageableListOfDeviceClasses & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PageableListOfDeviceClasses;
  };
};

/** Contains response data for the getDeviceClassDeviceIdsNext operation. */
export type DevicesGetDeviceClassDeviceIdsNextResponse = PageableListOfStrings & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PageableListOfStrings;
  };
};

/** Contains response data for the getDeviceClassInstallableUpdatesNext operation. */
export type DevicesGetDeviceClassInstallableUpdatesNextResponse = PageableListOfUpdateIds & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PageableListOfUpdateIds;
  };
};

/** Optional parameters. */
export interface DevicesGetAllDevicesNextOptionalParams extends coreHttp.OperationOptions {
  /** Restricts the set of devices returned. You can only filter on device GroupId. */
  filter?: string;
}

/** Contains response data for the getAllDevicesNext operation. */
export type DevicesGetAllDevicesNextResponse = PageableListOfDevices & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PageableListOfDevices;
  };
};

/** Contains response data for the getAllDeviceTagsNext operation. */
export type DevicesGetAllDeviceTagsNextResponse = PageableListOfDeviceTags & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PageableListOfDeviceTags;
  };
};

/** Contains response data for the getAllGroupsNext operation. */
export type DevicesGetAllGroupsNextResponse = PageableListOfGroups & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PageableListOfGroups;
  };
};

/** Optional parameters. */
export interface DevicesGetGroupBestUpdatesNextOptionalParams extends coreHttp.OperationOptions {
  /** Restricts the set of bestUpdates returned. You can filter on update Provider, Name and Version property. */
  filter?: string;
}

/** Contains response data for the getGroupBestUpdatesNext operation. */
export type DevicesGetGroupBestUpdatesNextResponse = PageableListOfUpdatableDevices & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PageableListOfUpdatableDevices;
  };
};

/** Optional parameters. */
export interface DeploymentsGetAllDeploymentsOptionalParams extends coreHttp.OperationOptions {
  /** Restricts the set of deployments returned. You can filter on update Provider, Name and Version property. */
  filter?: string;
}

/** Contains response data for the getAllDeployments operation. */
export type DeploymentsGetAllDeploymentsResponse = PageableListOfDeployments & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PageableListOfDeployments;
  };
};

/** Contains response data for the getDeployment operation. */
export type DeploymentsGetDeploymentResponse = Deployment & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: Deployment;
  };
};

/** Contains response data for the createOrUpdateDeployment operation. */
export type DeploymentsCreateOrUpdateDeploymentResponse = Deployment & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: Deployment;
  };
};

/** Contains response data for the getDeploymentStatus operation. */
export type DeploymentsGetDeploymentStatusResponse = DeploymentStatus & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: DeploymentStatus;
  };
};

/** Optional parameters. */
export interface DeploymentsGetDeploymentDevicesOptionalParams extends coreHttp.OperationOptions {
  /** Restricts the set of deployment device states returned. You can filter on deviceId and/or deviceState. */
  filter?: string;
}

/** Contains response data for the getDeploymentDevices operation. */
export type DeploymentsGetDeploymentDevicesResponse = PageableListOfDeploymentDeviceStates & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PageableListOfDeploymentDeviceStates;
  };
};

/** Contains response data for the cancelDeployment operation. */
export type DeploymentsCancelDeploymentResponse = Deployment & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: Deployment;
  };
};

/** Contains response data for the retryDeployment operation. */
export type DeploymentsRetryDeploymentResponse = Deployment & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: Deployment;
  };
};

/** Optional parameters. */
export interface DeploymentsGetAllDeploymentsNextOptionalParams extends coreHttp.OperationOptions {
  /** Restricts the set of deployments returned. You can filter on update Provider, Name and Version property. */
  filter?: string;
}

/** Contains response data for the getAllDeploymentsNext operation. */
export type DeploymentsGetAllDeploymentsNextResponse = PageableListOfDeployments & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PageableListOfDeployments;
  };
};

/** Optional parameters. */
export interface DeploymentsGetDeploymentDevicesNextOptionalParams
  extends coreHttp.OperationOptions {
  /** Restricts the set of deployment device states returned. You can filter on deviceId and/or deviceState. */
  filter?: string;
}

/** Contains response data for the getDeploymentDevicesNext operation. */
export type DeploymentsGetDeploymentDevicesNextResponse = PageableListOfDeploymentDeviceStates & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: PageableListOfDeploymentDeviceStates;
  };
};

/** Optional parameters. */
export interface DeviceUpdateClientOptionalParams extends coreHttp.ServiceClientOptions {
  /** Overrides client endpoint. */
  endpoint?: string;
}
