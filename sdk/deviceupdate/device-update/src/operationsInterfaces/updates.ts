/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  Update,
  UpdatesListUpdatesOptionalParams,
  UpdatesListProvidersOptionalParams,
  UpdatesListNamesOptionalParams,
  UpdatesListVersionsOptionalParams,
  UpdatesListFilesOptionalParams,
  UpdateOperation,
  UpdatesListOperationsOptionalParams,
  ImportUpdateInputItem,
  ImportAction,
  UpdatesImportUpdateOptionalParams,
  UpdatesImportUpdateResponse,
  UpdatesGetUpdateOptionalParams,
  UpdatesGetUpdateResponse,
  UpdatesDeleteUpdateOptionalParams,
  UpdatesDeleteUpdateResponse,
  UpdatesGetFileOptionalParams,
  UpdatesGetFileResponse,
  UpdatesGetOperationOptionalParams,
  UpdatesGetOperationResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Updates. */
export interface Updates {
  /**
   * Get a list of all updates that have been imported to Device Update for IoT Hub.
   * @param options The options parameters.
   */
  listUpdates(
    options?: UpdatesListUpdatesOptionalParams
  ): PagedAsyncIterableIterator<Update>;
  /**
   * Get a list of all update providers that have been imported to Device Update for IoT Hub.
   * @param options The options parameters.
   */
  listProviders(
    options?: UpdatesListProvidersOptionalParams
  ): PagedAsyncIterableIterator<string>;
  /**
   * Get a list of all update names that match the specified provider.
   * @param provider Update provider.
   * @param options The options parameters.
   */
  listNames(
    provider: string,
    options?: UpdatesListNamesOptionalParams
  ): PagedAsyncIterableIterator<string>;
  /**
   * Get a list of all update versions that match the specified provider and name.
   * @param provider Update provider.
   * @param name Update name.
   * @param options The options parameters.
   */
  listVersions(
    provider: string,
    name: string,
    options?: UpdatesListVersionsOptionalParams
  ): PagedAsyncIterableIterator<string>;
  /**
   * Get a list of all update file identifiers for the specified version.
   * @param provider Update provider.
   * @param name Update name.
   * @param version Update version.
   * @param options The options parameters.
   */
  listFiles(
    provider: string,
    name: string,
    version: string,
    options?: UpdatesListFilesOptionalParams
  ): PagedAsyncIterableIterator<string>;
  /**
   * Get a list of all import update operations. Completed operations are kept for 7 days before
   * auto-deleted. Delete operations are not returned by this API version.
   * @param options The options parameters.
   */
  listOperations(
    options?: UpdatesListOperationsOptionalParams
  ): PagedAsyncIterableIterator<UpdateOperation>;
  /**
   * Import new update version.
   * @param action Import update action.
   * @param updateToImport The update to be imported.
   * @param options The options parameters.
   */
  beginImportUpdate(
    action: ImportAction,
    updateToImport: ImportUpdateInputItem[],
    options?: UpdatesImportUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<UpdatesImportUpdateResponse>,
      UpdatesImportUpdateResponse
    >
  >;
  /**
   * Import new update version.
   * @param action Import update action.
   * @param updateToImport The update to be imported.
   * @param options The options parameters.
   */
  beginImportUpdateAndWait(
    action: ImportAction,
    updateToImport: ImportUpdateInputItem[],
    options?: UpdatesImportUpdateOptionalParams
  ): Promise<UpdatesImportUpdateResponse>;
  /**
   * Get a specific update version.
   * @param provider Update provider.
   * @param name Update name.
   * @param version Update version.
   * @param options The options parameters.
   */
  getUpdate(
    provider: string,
    name: string,
    version: string,
    options?: UpdatesGetUpdateOptionalParams
  ): Promise<UpdatesGetUpdateResponse>;
  /**
   * Delete a specific update version.
   * @param provider Update provider.
   * @param name Update name.
   * @param version Update version.
   * @param options The options parameters.
   */
  beginDeleteUpdate(
    provider: string,
    name: string,
    version: string,
    options?: UpdatesDeleteUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<UpdatesDeleteUpdateResponse>,
      UpdatesDeleteUpdateResponse
    >
  >;
  /**
   * Delete a specific update version.
   * @param provider Update provider.
   * @param name Update name.
   * @param version Update version.
   * @param options The options parameters.
   */
  beginDeleteUpdateAndWait(
    provider: string,
    name: string,
    version: string,
    options?: UpdatesDeleteUpdateOptionalParams
  ): Promise<UpdatesDeleteUpdateResponse>;
  /**
   * Get a specific update file from the version.
   * @param provider Update provider.
   * @param name Update name.
   * @param version Update version.
   * @param fileId File identifier.
   * @param options The options parameters.
   */
  getFile(
    provider: string,
    name: string,
    version: string,
    fileId: string,
    options?: UpdatesGetFileOptionalParams
  ): Promise<UpdatesGetFileResponse>;
  /**
   * Retrieve operation status.
   * @param operationId Operation identifier.
   * @param options The options parameters.
   */
  getOperation(
    operationId: string,
    options?: UpdatesGetOperationOptionalParams
  ): Promise<UpdatesGetOperationResponse>;
}
