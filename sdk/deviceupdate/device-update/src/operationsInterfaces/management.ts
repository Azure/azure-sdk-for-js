/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  DeviceClass,
  ManagementListDeviceClassesOptionalParams,
  UpdateId,
  ManagementListInstallableUpdatesForDeviceClassOptionalParams,
  Device,
  ManagementListDevicesOptionalParams,
  DeviceTag,
  ManagementListDeviceTagsOptionalParams,
  Group,
  ManagementListGroupsOptionalParams,
  UpdatableDevices,
  ManagementListBestUpdatesForGroupOptionalParams,
  Deployment,
  ManagementListDeploymentsForGroupOptionalParams,
  DeploymentDeviceState,
  ManagementListDeploymentDevicesOptionalParams,
  DeviceOperation,
  ManagementListOperationsOptionalParams,
  LogCollectionOperation,
  ManagementListLogCollectionOperationsOptionalParams,
  ManagementGetDeviceClassOptionalParams,
  ManagementGetDeviceClassResponse,
  ImportAction,
  ImportType,
  ManagementImportDevicesOptionalParams,
  ManagementImportDevicesResponse,
  ManagementGetDeviceOptionalParams,
  ManagementGetDeviceResponse,
  ManagementGetDeviceModuleOptionalParams,
  ManagementGetDeviceModuleResponse,
  ManagementGetUpdateComplianceOptionalParams,
  ManagementGetUpdateComplianceResponse,
  ManagementGetDeviceTagOptionalParams,
  ManagementGetDeviceTagResponse,
  ManagementGetGroupOptionalParams,
  ManagementGetGroupResponse,
  ManagementCreateOrUpdateGroupOptionalParams,
  ManagementCreateOrUpdateGroupResponse,
  ManagementDeleteGroupOptionalParams,
  ManagementGetGroupUpdateComplianceOptionalParams,
  ManagementGetGroupUpdateComplianceResponse,
  ManagementGetDeploymentOptionalParams,
  ManagementGetDeploymentResponse,
  ManagementCreateOrUpdateDeploymentOptionalParams,
  ManagementCreateOrUpdateDeploymentResponse,
  ManagementDeleteDeploymentOptionalParams,
  ManagementGetDeploymentStatusOptionalParams,
  ManagementGetDeploymentStatusResponse,
  ManagementGetOperationOptionalParams,
  ManagementGetOperationResponse,
  ManagementCollectLogsOptionalParams,
  ManagementCollectLogsResponse,
  ManagementGetLogCollectionOperationOptionalParams,
  ManagementGetLogCollectionOperationResponse,
  ManagementGetLogCollectionOperationDetailedStatusOptionalParams,
  ManagementGetLogCollectionOperationDetailedStatusResponse,
  DeploymentCancelAction,
  ManagementStopDeploymentOptionalParams,
  ManagementStopDeploymentResponse,
  DeploymentRetryAction,
  ManagementRetryDeploymentOptionalParams,
  ManagementRetryDeploymentResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Management. */
export interface Management {
  /**
   * Gets a list of all device classes (unique combinations of device manufacturer and model) for all
   * devices connected to Device Update for IoT Hub.
   * @param options The options parameters.
   */
  listDeviceClasses(
    options?: ManagementListDeviceClassesOptionalParams
  ): PagedAsyncIterableIterator<DeviceClass>;
  /**
   * Gets a list of installable updates for a device class.
   * @param deviceClassId Device class identifier.
   * @param options The options parameters.
   */
  listInstallableUpdatesForDeviceClass(
    deviceClassId: string,
    options?: ManagementListInstallableUpdatesForDeviceClassOptionalParams
  ): PagedAsyncIterableIterator<UpdateId>;
  /**
   * Gets a list of devices connected to Device Update for IoT Hub.
   * @param options The options parameters.
   */
  listDevices(
    options?: ManagementListDevicesOptionalParams
  ): PagedAsyncIterableIterator<Device>;
  /**
   * Gets a list of available group device tags for all devices connected to Device Update for IoT Hub.
   * @param options The options parameters.
   */
  listDeviceTags(
    options?: ManagementListDeviceTagsOptionalParams
  ): PagedAsyncIterableIterator<DeviceTag>;
  /**
   * Gets a list of all device groups.
   * @param options The options parameters.
   */
  listGroups(
    options?: ManagementListGroupsOptionalParams
  ): PagedAsyncIterableIterator<Group>;
  /**
   * Get the best available updates for a group and a count of how many devices need each update.
   * @param groupId Group identity.
   * @param options The options parameters.
   */
  listBestUpdatesForGroup(
    groupId: string,
    options?: ManagementListBestUpdatesForGroupOptionalParams
  ): PagedAsyncIterableIterator<UpdatableDevices>;
  /**
   * Gets a list of deployments for a group.
   * @param groupId Group identity.
   * @param options The options parameters.
   */
  listDeploymentsForGroup(
    groupId: string,
    options?: ManagementListDeploymentsForGroupOptionalParams
  ): PagedAsyncIterableIterator<Deployment>;
  /**
   * Gets a list of devices in a deployment along with their state. Useful for getting a list of failed
   * devices.
   * @param groupId Group identity.
   * @param deploymentId Deployment identifier.
   * @param options The options parameters.
   */
  listDeploymentDevices(
    groupId: string,
    deploymentId: string,
    options?: ManagementListDeploymentDevicesOptionalParams
  ): PagedAsyncIterableIterator<DeploymentDeviceState>;
  /**
   * Get a list of all device import operations. Completed operations are kept for 7 days before
   * auto-deleted.
   * @param options The options parameters.
   */
  listOperations(
    options?: ManagementListOperationsOptionalParams
  ): PagedAsyncIterableIterator<DeviceOperation>;
  /**
   * Get all device diagnostics log collection operations
   * @param options The options parameters.
   */
  listLogCollectionOperations(
    options?: ManagementListLogCollectionOperationsOptionalParams
  ): PagedAsyncIterableIterator<LogCollectionOperation>;
  /**
   * Gets the properties of a device class.
   * @param deviceClassId Device class identifier.
   * @param options The options parameters.
   */
  getDeviceClass(
    deviceClassId: string,
    options?: ManagementGetDeviceClassOptionalParams
  ): Promise<ManagementGetDeviceClassResponse>;
  /**
   * Import existing devices from IoT Hub.
   * @param action Devices action.
   * @param importType The types of devices to import.
   * @param options The options parameters.
   */
  beginImportDevices(
    action: ImportAction,
    importType: ImportType,
    options?: ManagementImportDevicesOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ManagementImportDevicesResponse>,
      ManagementImportDevicesResponse
    >
  >;
  /**
   * Import existing devices from IoT Hub.
   * @param action Devices action.
   * @param importType The types of devices to import.
   * @param options The options parameters.
   */
  beginImportDevicesAndWait(
    action: ImportAction,
    importType: ImportType,
    options?: ManagementImportDevicesOptionalParams
  ): Promise<ManagementImportDevicesResponse>;
  /**
   * Gets the device properties and latest deployment status for a device connected to Device Update for
   * IoT Hub.
   * @param deviceId Device identifier in Azure IoT Hub.
   * @param options The options parameters.
   */
  getDevice(
    deviceId: string,
    options?: ManagementGetDeviceOptionalParams
  ): Promise<ManagementGetDeviceResponse>;
  /**
   * Gets the device module properties and latest deployment status for a device module connected to
   * Device Update for IoT Hub.
   * @param deviceId Device identifier in Azure IoT Hub.
   * @param moduleId Device module identifier in Azure IoT Hub.
   * @param options The options parameters.
   */
  getDeviceModule(
    deviceId: string,
    moduleId: string,
    options?: ManagementGetDeviceModuleOptionalParams
  ): Promise<ManagementGetDeviceModuleResponse>;
  /**
   * Gets the breakdown of how many devices are on their latest update, have new updates available, or
   * are in progress receiving new updates.
   * @param options The options parameters.
   */
  getUpdateCompliance(
    options?: ManagementGetUpdateComplianceOptionalParams
  ): Promise<ManagementGetUpdateComplianceResponse>;
  /**
   * Gets a count of how many devices have a device tag.
   * @param tagName Tag name.
   * @param options The options parameters.
   */
  getDeviceTag(
    tagName: string,
    options?: ManagementGetDeviceTagOptionalParams
  ): Promise<ManagementGetDeviceTagResponse>;
  /**
   * Gets the properties of a group.
   * @param groupId Group identity.
   * @param options The options parameters.
   */
  getGroup(
    groupId: string,
    options?: ManagementGetGroupOptionalParams
  ): Promise<ManagementGetGroupResponse>;
  /**
   * Create or update a device group.
   * @param groupId Group identity.
   * @param group The group properties.
   * @param options The options parameters.
   */
  createOrUpdateGroup(
    groupId: string,
    group: Group,
    options?: ManagementCreateOrUpdateGroupOptionalParams
  ): Promise<ManagementCreateOrUpdateGroupResponse>;
  /**
   * Deletes a device group.
   * @param groupId Group identity.
   * @param options The options parameters.
   */
  deleteGroup(
    groupId: string,
    options?: ManagementDeleteGroupOptionalParams
  ): Promise<void>;
  /**
   * Get group update compliance information such as how many devices are on their latest update, how
   * many need new updates, and how many are in progress on receiving a new update.
   * @param groupId Group identity.
   * @param options The options parameters.
   */
  getGroupUpdateCompliance(
    groupId: string,
    options?: ManagementGetGroupUpdateComplianceOptionalParams
  ): Promise<ManagementGetGroupUpdateComplianceResponse>;
  /**
   * Gets the properties of a deployment.
   * @param groupId Group identity.
   * @param deploymentId Deployment identifier.
   * @param options The options parameters.
   */
  getDeployment(
    groupId: string,
    deploymentId: string,
    options?: ManagementGetDeploymentOptionalParams
  ): Promise<ManagementGetDeploymentResponse>;
  /**
   * Creates or updates a deployment.
   * @param deploymentId Deployment identifier.
   * @param groupId Group identity.
   * @param deployment The deployment properties.
   * @param options The options parameters.
   */
  createOrUpdateDeployment(
    deploymentId: string,
    groupId: string,
    deployment: Deployment,
    options?: ManagementCreateOrUpdateDeploymentOptionalParams
  ): Promise<ManagementCreateOrUpdateDeploymentResponse>;
  /**
   * Deletes a deployment.
   * @param groupId Group identity.
   * @param deploymentId Deployment identifier.
   * @param options The options parameters.
   */
  deleteDeployment(
    groupId: string,
    deploymentId: string,
    options?: ManagementDeleteDeploymentOptionalParams
  ): Promise<void>;
  /**
   * Gets the status of a deployment including a breakdown of how many devices in the deployment are in
   * progress, completed, or failed.
   * @param groupId Group identity.
   * @param deploymentId Deployment identifier.
   * @param options The options parameters.
   */
  getDeploymentStatus(
    groupId: string,
    deploymentId: string,
    options?: ManagementGetDeploymentStatusOptionalParams
  ): Promise<ManagementGetDeploymentStatusResponse>;
  /**
   * Retrieve operation status.
   * @param operationId Operation identifier.
   * @param options The options parameters.
   */
  getOperation(
    operationId: string,
    options?: ManagementGetOperationOptionalParams
  ): Promise<ManagementGetOperationResponse>;
  /**
   * Start the device diagnostics log collection operation on specified devices.
   * @param operationId Operation identifier.
   * @param logCollectionRequest The deployment properties.
   * @param options The options parameters.
   */
  collectLogs(
    operationId: string,
    logCollectionRequest: LogCollectionOperation,
    options?: ManagementCollectLogsOptionalParams
  ): Promise<ManagementCollectLogsResponse>;
  /**
   * Get the device diagnostics log collection operation
   * @param operationId Operation identifier.
   * @param options The options parameters.
   */
  getLogCollectionOperation(
    operationId: string,
    options?: ManagementGetLogCollectionOperationOptionalParams
  ): Promise<ManagementGetLogCollectionOperationResponse>;
  /**
   * Get device diagnostics log collection operation with detailed status
   * @param operationId Operation identifier.
   * @param options The options parameters.
   */
  getLogCollectionOperationDetailedStatus(
    operationId: string,
    options?: ManagementGetLogCollectionOperationDetailedStatusOptionalParams
  ): Promise<ManagementGetLogCollectionOperationDetailedStatusResponse>;
  /**
   * Stops a deployment.
   * @param groupId Group identity.
   * @param deploymentId Deployment identifier.
   * @param action Cancel deployment action.
   * @param options The options parameters.
   */
  stopDeployment(
    groupId: string,
    deploymentId: string,
    action: DeploymentCancelAction,
    options?: ManagementStopDeploymentOptionalParams
  ): Promise<ManagementStopDeploymentResponse>;
  /**
   * Retries a deployment with failed devices.
   * @param groupId Group identity.
   * @param deploymentId Deployment identifier.
   * @param action Retry deployment action.
   * @param options The options parameters.
   */
  retryDeployment(
    groupId: string,
    deploymentId: string,
    action: DeploymentRetryAction,
    options?: ManagementRetryDeploymentOptionalParams
  ): Promise<ManagementRetryDeploymentResponse>;
}
