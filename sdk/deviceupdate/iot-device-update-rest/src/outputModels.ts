// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

export interface UpdateOutput {
  /** Update identity. */
  updateId: UpdateIdOutput;
  /** Update description specified by creator. */
  description?: string;
  /** Friendly update name specified by importer. */
  friendlyName?: string;
  /** Whether the update can be deployed to a device on its own. */
  isDeployable?: boolean;
  /** Update type. Deprecated in latest import manifest schema. */
  updateType?: string;
  /** String interpreted by Device Update client to determine if the update is installed on the device. Deprecated in latest import manifest schema. */
  installedCriteria?: string;
  /** List of update compatibility information. */
  compatibility: Array<Record<string, string>>;
  /** Update install instructions. */
  instructions?: InstructionsOutput;
  /** List of update identities that reference this update. */
  referencedBy?: Array<UpdateIdOutput>;
  /** Update aggregate scan result (calculated from payload file scan results). */
  scanResult?: string;
  /** Schema version of manifest used to import the update. */
  manifestVersion: string;
  /** Date and time in UTC when the update was imported. */
  importedDateTime: string;
  /** Date and time in UTC when the update was created. */
  createdDateTime: string;
  /** Update ETag. */
  etag?: string;
}

export interface UpdateIdOutput {
  /** Update provider. */
  provider: string;
  /** Update name. */
  name: string;
  /** Update version. */
  version: string;
}

export interface InstructionsOutput {
  /** Collection of installation steps. */
  steps: Array<StepOutput>;
}

export interface StepOutput {
  /** Step type. */
  type?: "Inline" | "Reference";
  /** Step description. */
  description?: string;
  /** Identity of handler that will execute this step. Required if step type is inline. */
  handler?: string;
  /** Parameters to be passed to handler during execution. */
  handlerProperties?: Record<string, unknown>;
  /** Collection of file names to be passed to handler during execution. Required if step type is inline. */
  files?: Array<string>;
  /** Referenced child update identity.  Required if step type is reference. */
  updateId?: UpdateIdOutput;
}

export interface ErrorResponseOutput {
  /** The error details. */
  error: ErrorModelOutput;
}

export interface ErrorModelOutput {
  /** Server defined error code. */
  code: string;
  /** A human-readable representation of the error. */
  message: string;
  /** The target of the error. */
  target?: string;
  /** An array of errors that led to the reported error. */
  details?: Array<ErrorModelOutput>;
  /** An object containing more specific information than the current object about the error. */
  innererror?: InnerErrorOutput;
  /** Date and time in UTC when the error occurred. */
  occurredDateTime?: string;
}

export interface InnerErrorOutput {
  /** A more specific error code than what was provided by the containing error. */
  code: string;
  /** A human-readable representation of the error. */
  message?: string;
  /** The internal error or exception message. */
  errorDetail?: string;
  /** An object containing more specific information than the current object about the error. */
  innerError?: InnerErrorOutput;
}

export interface UpdateListOutput {
  /** The collection of pageable items. */
  value: Array<UpdateOutput>;
  /** The link to the next page of items. */
  nextLink?: string;
}

export interface StringsListOutput {
  /** The collection of pageable items. */
  value: Array<string>;
  /** The link to the next page of items. */
  nextLink?: string;
}

export interface UpdateFileOutput {
  /** File identity, generated by server at import time. */
  fileId: string;
  /** File name. */
  fileName: string;
  /** File size in number of bytes. */
  sizeInBytes: number;
  /** Mapping of hashing algorithm to base64 encoded hash values. */
  hashes: Record<string, string>;
  /** File MIME type. */
  mimeType?: string;
  /** Anti-malware scan result. */
  scanResult?: string;
  /** Anti-malware scan details. */
  scanDetails?: string;
  /** File ETag. */
  etag?: string;
}

export interface UpdateOperationsListOutput {
  /** The collection of pageable items. */
  value: Array<UpdateOperationOutput>;
  /** The link to the next page of items. */
  nextLink?: string;
}

export interface UpdateOperationOutput {
  /** Operation Id. */
  operationId: string;
  /** Operation status. */
  status: "Undefined" | "NotStarted" | "Running" | "Succeeded" | "Failed";
  /** The identity of update being imported or deleted. For import, this property will only be populated after import manifest is processed successfully. */
  updateId?: UpdateIdOutput;
  /** Location of the imported update when operation is successful. */
  resourceLocation?: string;
  /** Operation error encountered, if any. */
  error?: ErrorModelOutput;
  /** Operation correlation identity that can used by Microsoft Support for troubleshooting. */
  traceId?: string;
  /** Date and time in UTC when the operation status was last updated. */
  lastActionDateTime: string;
  /** Date and time in UTC when the operation was created. */
  createdDateTime: string;
  /** Operation ETag. */
  etag?: string;
}

export interface DeviceClassesListOutput {
  /** The collection of pageable items. */
  value: Array<DeviceClassOutput>;
  /** The link to the next page of items. */
  nextLink?: string;
}

export interface DeviceClassOutput {
  /** The device class identifier. */
  deviceClassId: string;
  /** The compat properties of the device class. This object can be thought of as a set of key-value pairs where the key is the name of the compatibility property and the value is the value of the compatibility property. There will always be at least 1 compat property */
  compatProperties: Record<string, string>;
  /** Update identity. */
  bestCompatibleUpdateId: UpdateIdOutput;
}

export interface UpdateIdsListOutput {
  /** The collection of pageable items. */
  value: Array<UpdateIdOutput>;
  /** The link to the next page of items. */
  nextLink?: string;
}

export interface DevicesListOutput {
  /** The collection of pageable items. */
  value: Array<DeviceOutput>;
  /** The link to the next page of items. */
  nextLink?: string;
}

export interface DeviceOutput {
  /** Device identity. */
  deviceId: string;
  /** Device module identity. */
  moduleId?: string;
  /** Device class identity. */
  deviceClassId: string;
  /** Device manufacturer. */
  manufacturer: string;
  /** Device model. */
  model: string;
  /** Device group identity. */
  groupId?: string;
  /** Update identity. */
  lastAttemptedUpdateId?: UpdateIdOutput;
  /** State of the device in its last deployment. */
  deploymentStatus?:
    | "Succeeded"
    | "InProgress"
    | "Failed"
    | "Canceled"
    | "Incompatible";
  /** Update identity. */
  installedUpdateId?: UpdateIdOutput;
  /** Boolean flag indicating whether the latest update is installed on the device */
  onLatestUpdate: boolean;
  /** The deployment identifier for the last deployment to the device */
  lastDeploymentId?: string;
  /** Last install result. */
  lastInstallResult?: InstallResultOutput;
}

export interface InstallResultOutput {
  /** Install result code. */
  resultCode: number;
  /** Install extended result code */
  extendedResultCode: number;
  /** A string containing further details about the install result */
  resultDetails?: string;
  /** Array of step results */
  stepResults?: Array<StepResultOutput>;
}

export interface StepResultOutput {
  /** It is update id for update steps; otherwise it is null. */
  updateId?: UpdateIdOutput;
  /** Step description. It might be null for update steps. */
  description?: string;
  /** Install result code. */
  resultCode: number;
  /** Install extended result code */
  extendedResultCode: number;
  /** A string containing further details about the install result */
  resultDetails?: string;
}

export interface UpdateComplianceOutput {
  /** Total number of devices. */
  totalDeviceCount: number;
  /** Number of devices on the latest update. */
  onLatestUpdateDeviceCount: number;
  /** Number of devices with a newer update available. */
  newUpdatesAvailableDeviceCount: number;
  /** Number of devices with update in-progress. */
  updatesInProgressDeviceCount: number;
}

export interface DeviceTagsListOutput {
  /** The collection of pageable items. */
  value: Array<DeviceTagOutput>;
  /** The link to the next page of items. */
  nextLink?: string;
}

export interface DeviceTagOutput {
  /** Tag name. */
  tagName: string;
  /** Number of devices with this tag. */
  deviceCount: number;
}

export interface GroupsListOutput {
  /** The collection of pageable items. */
  value: Array<GroupOutput>;
  /** The link to the next page of items. */
  nextLink?: string;
}

export interface GroupOutput {
  /** Group identity. */
  groupId: string;
  /** Group type. */
  groupType:
    | "DeviceClassIdAndIoTHubTag"
    | "InvalidDeviceClassIdAndIoTHubTag"
    | "DefaultDeviceClassId";
  /** IoT Hub tags. */
  tags: Array<string>;
  /** Date and time when the update was created. */
  createdDateTime: string;
  /** The number of devices in the group. */
  deviceCount?: number;
  /** The deployment Id for the group. */
  deploymentId?: string;
  /** The device class Id for the group. */
  deviceClassId?: string;
}

export interface UpdatableDevicesListOutput {
  /** The collection of pageable items. */
  value: Array<UpdatableDevicesOutput>;
  /** The link to the next page of items. */
  nextLink?: string;
}

export interface UpdatableDevicesOutput {
  /** Update identity. */
  updateId: UpdateIdOutput;
  /** Total number of devices for which the update is applicable. */
  deviceCount: number;
}

export interface DeploymentsListOutput {
  /** The collection of pageable items. */
  value: Array<DeploymentOutput>;
  /** The link to the next page of items. */
  nextLink?: string;
}

export interface DeploymentOutput {
  /** The deployment identifier. */
  deploymentId: string;
  /** The deployment start datetime. */
  startDateTime: string;
  /** Update identity. */
  updateId: UpdateIdOutput;
  /** The group identity */
  groupId: string;
  /** Boolean flag indicating whether the deployment was canceled. */
  isCanceled?: boolean;
  /** Boolean flag indicating whether the deployment has been retried. */
  isRetried?: boolean;
}

export interface DeploymentStatusOutput {
  /** The state of the deployment. */
  deploymentState: "Active" | "Inactive" | "Canceled";
  /** The total number of devices in the deployment. */
  totalDevices?: number;
  /** The number of devices that are currently in deployment. */
  devicesInProgressCount?: number;
  /** The number of devices that have completed deployment with a failure. */
  devicesCompletedFailedCount?: number;
  /** The number of devices which have successfully completed deployment. */
  devicesCompletedSucceededCount?: number;
  /** The number of devices which have had their deployment canceled. */
  devicesCanceledCount?: number;
}

export interface DeploymentDeviceStatesListOutput {
  /** The collection of pageable items. */
  value: Array<DeploymentDeviceStateOutput>;
  /** The link to the next page of items. */
  nextLink?: string;
}

export interface DeploymentDeviceStateOutput {
  /** Device identity. */
  deviceId: string;
  /** Device module identity. */
  moduleId?: string;
  /** The number of times this deployment has been retried on this device. */
  retryCount: number;
  /** Boolean flag indicating whether this device is in a newer deployment and can no longer retry this deployment. */
  movedOnToNewDeployment: boolean;
  /** Deployment device state. */
  deviceState:
    | "Succeeded"
    | "InProgress"
    | "Failed"
    | "Canceled"
    | "Incompatible";
}

export interface DeviceOperationOutput {
  /** Operation Id. */
  operationId: string;
  /** Operation status. */
  status: "Undefined" | "NotStarted" | "Running" | "Succeeded" | "Failed";
  /** Operation error encountered, if any. */
  error?: ErrorModelOutput;
  /** Operation correlation identity that can used by Microsoft Support for troubleshooting. */
  traceId?: string;
  /** Date and time in UTC when the operation status was last updated. */
  lastActionDateTime: string;
  /** Date and time in UTC when the operation was created. */
  createdDateTime: string;
  /** Operation ETag. */
  etag?: string;
}

export interface DeviceOperationsListOutput {
  /** The collection of pageable items. */
  value: Array<DeviceOperationOutput>;
  /** The link to the next page of items. */
  nextLink?: string;
}

export interface LogCollectionOperationOutput {
  /** The diagnostics operation id. */
  operationId?: string;
  /** Array of Device Update agent ids */
  deviceList: Array<DeviceUpdateAgentIdOutput>;
  /** Description of the diagnostics operation. */
  description?: string;
  /** The timestamp when the operation was created. */
  createdDateTime?: string;
  /** A timestamp for when the current state was entered. */
  lastActionDateTime?: string;
  /** Operation status. */
  status?: "Undefined" | "NotStarted" | "Running" | "Succeeded" | "Failed";
}

export interface DeviceUpdateAgentIdOutput {
  /** Device Id */
  deviceId: string;
  /** Module Id */
  moduleId?: string;
}

export interface LogCollectionOperationListOutput {
  /** The collection of pageable items. */
  value: Array<LogCollectionOperationOutput>;
  /** The link to the next page of items. */
  nextLink?: string;
}

export interface LogCollectionOperationDetailedStatusOutput {
  /** The device diagnostics operation id. */
  operationId?: string;
  /** The timestamp when the operation was created. */
  createdDateTime?: string;
  /** A timestamp for when the current state was entered. */
  lastActionDateTime?: string;
  /** Operation status. */
  status?: "Undefined" | "NotStarted" | "Running" | "Succeeded" | "Failed";
  /** Status of the devices in the operation */
  deviceStatus?: Array<LogCollectionOperationDeviceStatusOutput>;
  /** Device diagnostics operation description. */
  description?: string;
}

export interface LogCollectionOperationDeviceStatusOutput {
  /** Device id */
  deviceId: string;
  /** Module id. */
  moduleId?: string;
  /** Log upload status */
  status: "Undefined" | "NotStarted" | "Running" | "Succeeded" | "Failed";
  /** Log upload result code */
  resultCode?: string;
  /** Log upload extended result code */
  extendedResultCode?: string;
  /** Log upload location */
  logLocation?: string;
}
