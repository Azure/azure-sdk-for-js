// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

export interface ImportUpdateInputItem {
  /** Import manifest metadata like source URL, file size/hashes, etc. */
  importManifest: ImportManifestMetadata;
  /** One or more update file properties like filename and source URL. */
  files?: Array<FileImportMetadata>;
  /** Optional delta update generation metadata. */
  deltaProcessing?: DeltaProcessingMetadata;
}

export interface ImportManifestMetadata {
  /** Azure Blob location from which the import manifest can be downloaded by Device Update for IoT Hub. This is typically a read-only SAS-protected blob URL with an expiration set to at least 4 hours. */
  url: string;
  /** File size in number of bytes. */
  sizeInBytes: number;
  /** A JSON object containing the hash(es) of the file. At least SHA256 hash is required. This object can be thought of as a set of key-value pairs where the key is the hash algorithm, and the value is the hash of the file calculated using that algorithm. */
  hashes: Record<string, string>;
}

export interface FileImportMetadata {
  /** Update file name as specified inside import manifest. */
  filename: string;
  /** Azure Blob location from which the update file can be downloaded by Device Update for IoT Hub. This is typically a read-only SAS-protected blob URL with an expiration set to at least 4 hours. */
  url: string;
}

export interface DeltaProcessingMetadata {
  /** Source versions for delta update generation. */
  sourceVersions: Array<string>;
}

export interface UpdateIdsList {
  /** The collection of pageable items. */
  value: Array<UpdateId>;
  /** The link to the next page of items. */
  nextLink?: string;
}

export interface UpdateId {
  /** Update provider. */
  provider: string;
  /** Update name. */
  name: string;
  /** Update version. */
  version: string;
}

export interface Update {
  /** Update identity. */
  updateId: UpdateId;
  /** Whether the update can be deployed to a device on its own. */
  isDeployable?: boolean;
  /** Update type. */
  updateType: string;
  /** String interpreted by Device Update client to determine if the update is installed on the device. */
  installedCriteria: string;
  /** List of update compatibility information. */
  compatibility: Array<Record<string, string>>;
  /** List of update identities bundled by this update. */
  bundledUpdates?: Array<UpdateId>;
  /** List of update identities that bundles this update. */
  bundledBy?: Array<UpdateId>;
  /** Update aggregate scan result (calculated from payload file scan results). */
  scanResult?: string;
  /** Optional delta update generation metadata. */
  deltaProcessing?: DeltaProcessingMetadata;
  /** Schema version of manifest used to import the update. */
  manifestVersion: string;
  /** Date and time in UTC when the update was imported. */
  importedDateTime: Date;
  /** Date and time in UTC when the update was created. */
  createdDateTime: Date;
  /** Update ETag. */
  etag?: string;
}

export interface StringsList {
  /** The collection of pageable items. */
  value: Array<string>;
  /** The link to the next page of items. */
  nextLink?: string;
}

export interface File {
  /** File identity, generated by server at import time. */
  fileId: string;
  /** File name. */
  fileName: string;
  /** File size in number of bytes. */
  sizeInBytes: number;
  /** Mapping of hashing algorithm to base64 encoded hash values. */
  hashes: Record<string, string>;
  /** File MIME type. */
  mimeType?: string;
  /** Anti-malware scan result. */
  scanResult?: string;
  /** Anti-malware scan details. */
  scanDetails?: string;
  /** Optional metadata required for the delta processing. */
  deltaProcessing?: FileDeltaProcessingMetadata;
  /** File ETag. */
  etag?: string;
}

export interface FileDeltaProcessingMetadata {
  /** File identity used to match files across update versions for delta generation. */
  deltaFileIdentity: string;
  /** Enum identifying type of delta generation to be used for the given file. */
  deltaAlgorithm: "Undefined" | "SWUpdate";
}

export interface UpdateOperationsList {
  /** The collection of pageable items. */
  value: Array<Operation>;
  /** The link to the next page of items. */
  nextLink?: string;
}

export interface Operation {
  /** Operation Id. */
  operationId: string;
  /** Operation status. */
  status: "Undefined" | "NotStarted" | "Running" | "Succeeded" | "Failed";
  /** The identity of update being imported or deleted. For import, this property will only be populated after import manifest is processed successfully. */
  updateId?: UpdateId;
  /** Location of the imported update when operation is successful. */
  resourceLocation?: string;
  /** Operation error encountered, if any. */
  error?: ErrorModel;
  /** Operation correlation identity that can used by Microsoft Support for troubleshooting. */
  traceId?: string;
  /** Date and time in UTC when the operation status was last updated. */
  lastActionDateTime: Date;
  /** Date and time in UTC when the operation was created. */
  createdDateTime: Date;
  /** Operation ETag. */
  etag?: string;
}

export interface ErrorModel {
  /** Server defined error code. */
  code: string;
  /** A human-readable representation of the error. */
  message: string;
  /** The target of the error. */
  target?: string;
  /** An array of errors that led to the reported error. */
  details?: Array<ErrorModel>;
  /** An object containing more specific information than the current object about the error. */
  innererror?: InnerError;
  /** Date and time in UTC when the error occurred. */
  occurredDateTime?: Date;
}

export interface InnerError {
  /** A more specific error code than what was provided by the containing error. */
  code: string;
  /** A human-readable representation of the error. */
  message?: string;
  /** The internal error or exception message. */
  errorDetail?: string;
  /** An object containing more specific information than the current object about the error. */
  innerError?: InnerError;
}

export interface DeviceClassesList {
  /** The collection of pageable items. */
  value: Array<DeviceClass>;
  /** The link to the next page of items. */
  nextLink?: string;
}

export interface DeviceClass {
  /** The device class identifier. */
  deviceClassId: string;
  /** The compat properties of the device class. This object can be thought of as a set of key-value pairs where the key is the name of the compatibility property and the value is the value of the compatibility property. There will always be at least 1 compat property */
  compatProperties: Record<string, string>;
  /** Update identity. */
  bestCompatibleUpdateId: UpdateId;
}

export interface DevicesList {
  /** The collection of pageable items. */
  value: Array<Device>;
  /** The link to the next page of items. */
  nextLink?: string;
}

export interface Device {
  /** Device identity. */
  deviceId: string;
  /** Device class identity. */
  deviceClassId: string;
  /** Device manufacturer. */
  manufacturer: string;
  /** Device model. */
  model: string;
  /** Device group identity. */
  groupId?: string;
  /** Update identity. */
  lastAttemptedUpdateId?: UpdateId;
  /** State of the device in its last deployment. */
  deploymentStatus?:
    | "Succeeded"
    | "InProgress"
    | "Failed"
    | "Canceled"
    | "Incompatible";
  /** Update identity. */
  installedUpdateId?: UpdateId;
  /** Boolean flag indicating whether the latest update is installed on the device */
  onLatestUpdate: boolean;
  /** The deployment identifier for the last deployment to the device */
  lastDeploymentId?: string;
  /** Last install result. */
  lastInstallResult?: InstallResult;
}

export interface InstallResult {
  /** Update install result. */
  updateInstallResult: UpdateInstallResult;
  /** A JSON object containing the install results of any leaf updates.  This object can be thought of as a set of key-value pairs where the key is the leaf UpdateId, and the value is the install result object for that leaf update */
  bundledUpdates?: Record<string, UpdateInstallResult>;
}

export interface UpdateInstallResult {
  /** Install result code. */
  resultCode: number;
  /** Install extended result code */
  extendedResultCode: number;
  /** A string containing further details about the install result */
  resultDetails?: string;
}

export interface UpdateCompliance {
  /** Total number of devices. */
  totalDeviceCount: number;
  /** Number of devices on the latest update. */
  onLatestUpdateDeviceCount: number;
  /** Number of devices with a newer update available. */
  newUpdatesAvailableDeviceCount: number;
  /** Number of devices with update in-progress. */
  updatesInProgressDeviceCount: number;
}

export interface DeviceTagsList {
  /** The collection of pageable items. */
  value: Array<DeviceTag>;
  /** The link to the next page of items. */
  nextLink?: string;
}

export interface DeviceTag {
  /** Tag name. */
  tagName: string;
  /** Number of devices with this tag. */
  deviceCount: number;
}

export interface GroupsList {
  /** The collection of pageable items. */
  value: Array<Group>;
  /** The link to the next page of items. */
  nextLink?: string;
}

export interface Group {
  /** Group identity. */
  groupId: string;
  /** Group type. */
  groupType:
    | "DeviceClassIdAndIoTHubTag"
    | "InvalidDeviceClassIdAndIoTHubTag"
    | "DefaultDeviceClassId";
  /** IoT Hub tags. */
  tags: Array<string>;
  /** Date and time when the update was created. */
  createdDateTime: string;
  /** The number of devices in the group. */
  deviceCount?: number;
  /** The deployment Id for the group. */
  deploymentId?: string;
  /** The device class Id for the group. */
  deviceClassId?: string;
}

export interface UpdatableDevicesList {
  /** The collection of pageable items. */
  value: Array<UpdatableDevices>;
  /** The link to the next page of items. */
  nextLink?: string;
}

export interface UpdatableDevices {
  /** Update identity. */
  updateId: UpdateId;
  /** Total number of devices for which the update is applicable. */
  deviceCount: number;
}

export interface DeploymentsList {
  /** The collection of pageable items. */
  value: Array<Deployment>;
  /** The link to the next page of items. */
  nextLink?: string;
}

export interface Deployment {
  /** The deployment identifier. */
  deploymentId: string;
  /** The deployment start datetime. */
  startDateTime: Date;
  /** Update identity. */
  updateId: UpdateId;
  /** Boolean flag indicating whether the deployment was canceled. */
  isCanceled?: boolean;
  /** Boolean flag indicating whether the deployment has been retried. */
  isRetried?: boolean;
}

export interface DeploymentStatus {
  /** The state of the deployment. */
  deploymentState: "Active" | "Inactive" | "Canceled";
  /** The total number of devices in the deployment. */
  totalDevices?: number;
  /** The number of devices that are currently in deployment. */
  devicesInProgressCount?: number;
  /** The number of devices that have completed deployment with a failure. */
  devicesCompletedFailedCount?: number;
  /** The number of devices which have successfully completed deployment. */
  devicesCompletedSucceededCount?: number;
  /** The number of devices which have had their deployment canceled. */
  devicesCanceledCount?: number;
}

export interface DeploymentDeviceStatesList {
  /** The collection of pageable items. */
  value: Array<DeploymentDeviceState>;
  /** The link to the next page of items. */
  nextLink?: string;
}

export interface DeploymentDeviceState {
  /** Device identity. */
  deviceId: string;
  /** The number of times this deployment has been retried on this device. */
  retryCount: number;
  /** Boolean flag indicating whether this device is in a newer deployment and can no longer retry this deployment. */
  movedOnToNewDeployment: boolean;
  /** Deployment device state. */
  deviceState:
    | "Succeeded"
    | "InProgress"
    | "Failed"
    | "Canceled"
    | "Incompatible";
}

export interface DeviceOperation {
  /** Operation Id. */
  operationId: string;
  /** Operation status. */
  status: "Undefined" | "NotStarted" | "Running" | "Succeeded" | "Failed";
  /** Operation error encountered, if any. */
  error?: ErrorModel;
  /** Operation correlation identity that can used by Microsoft Support for troubleshooting. */
  traceId?: string;
  /** Date and time in UTC when the operation status was last updated. */
  lastActionDateTime: Date;
  /** Date and time in UTC when the operation was created. */
  createdDateTime: Date;
  /** Operation ETag. */
  etag?: string;
}

export interface DeviceOperationsList {
  /** The collection of pageable items. */
  value: Array<DeviceOperation>;
  /** The link to the next page of items. */
  nextLink?: string;
}

export interface DiagnosticsOperation {
  /** The diagnostics operation id. */
  operationId?: string;
  /** Array of device identities */
  deviceList: Array<string>;
  /** Description of the diagnostics operation. */
  description?: string;
  /** Diagnostics action */
  action: "uploadLogs";
}

export interface DiagnosticsOperationStatus {
  /** The diagnostics operation id. */
  operationId?: string;
  /** The timestamp when the operation was created. */
  createdDateTime?: string;
  /** A timestamp for when the current state was entered. */
  lastActionDateTime?: string;
  /** Operation status. */
  status?: "Undefined" | "NotStarted" | "Running" | "Succeeded" | "Failed";
  /** Operation ETag. */
  etag?: string;
  /** Status of the devices in the operation */
  deviceList?: Array<DiagnosticsOperationDeviceStatus>;
}

export interface DiagnosticsOperationDeviceStatus {
  /** Device identity */
  deviceId: string;
  /** Log upload status */
  status: "Undefined" | "NotStarted" | "Running" | "Succeeded" | "Failed";
  /** Log upload result code */
  resultCode?: string;
  /** Log upload extended result code */
  extendedResultCode?: string;
  /** Log upload location */
  logLocation?: string;
}

export interface DiagnosticsOperationStatusList {
  /** The collection of pageable items. */
  value: Array<DiagnosticsOperationStatus>;
  /** The link to the next page of items. */
  nextLink?: string;
}

export interface DeviceFilter {
  /** Device group identifier. */
  groupId?: string;
}

export interface UpdateFilter {
  /** Update isDeployable property. */
  isDeployable?: boolean;
}

export interface OperationFilter {
  /** Operation status filter. */
  status?: "Running" | "NotStarted";
}

export interface DeploymentFilter {
  /** Update provider. */
  provider?: string;
  /** Update name. */
  name?: string;
  /** Update version. */
  version?: string;
}

export interface GroupBestUpdatesFilter {
  /** Update provider. */
  provider?: string;
  /** Update name. */
  name?: string;
  /** Update version. */
  version?: string;
}

export interface DeploymentDeviceStatesFilter {
  /** Device Identifier. */
  deviceId?: string;
  /** The deployment device state. */
  deviceState?:
    | "NotStarted"
    | "Incompatible"
    | "AlreadyInDeployment"
    | "Canceled"
    | "InProgress"
    | "Failed"
    | "Succeeded";
}
