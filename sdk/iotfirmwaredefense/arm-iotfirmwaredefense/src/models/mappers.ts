/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const FirmwareList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirmwareList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Firmware"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const FirmwareUpdateDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirmwareUpdateDefinition",
    modelProperties: {
      fileName: {
        serializedName: "properties.fileName",
        type: {
          name: "String"
        }
      },
      vendor: {
        serializedName: "properties.vendor",
        type: {
          name: "String"
        }
      },
      model: {
        serializedName: "properties.model",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      fileSize: {
        serializedName: "properties.fileSize",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      status: {
        defaultValue: "Pending",
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      statusMessages: {
        serializedName: "properties.statusMessages",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Dictionary",
              value: { type: { name: "any" } }
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UrlToken: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UrlToken",
    modelProperties: {
      url: {
        serializedName: "url",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uploadUrl: {
        serializedName: "uploadUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirmwareSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirmwareSummary",
    modelProperties: {
      extractedSize: {
        serializedName: "extractedSize",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      fileSize: {
        serializedName: "fileSize",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      extractedFileCount: {
        serializedName: "extractedFileCount",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      componentCount: {
        serializedName: "componentCount",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      binaryCount: {
        serializedName: "binaryCount",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      analysisTimeSeconds: {
        serializedName: "analysisTimeSeconds",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      rootFileSystems: {
        serializedName: "rootFileSystems",
        nullable: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ComponentList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComponentList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Component"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Component: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Component",
    modelProperties: {
      componentId: {
        serializedName: "componentId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      componentName: {
        serializedName: "componentName",
        nullable: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        nullable: true,
        type: {
          name: "String"
        }
      },
      license: {
        serializedName: "license",
        nullable: true,
        type: {
          name: "String"
        }
      },
      releaseDate: {
        serializedName: "releaseDate",
        type: {
          name: "DateTime"
        }
      },
      paths: {
        serializedName: "paths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      isUpdateAvailable: {
        serializedName: "isUpdateAvailable",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BinaryHardeningList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BinaryHardeningList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BinaryHardening"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BinaryHardening: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BinaryHardening",
    modelProperties: {
      binaryHardeningId: {
        serializedName: "binaryHardeningId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      architecture: {
        serializedName: "architecture",
        nullable: true,
        type: {
          name: "String"
        }
      },
      path: {
        serializedName: "path",
        nullable: true,
        type: {
          name: "String"
        }
      },
      class: {
        serializedName: "class",
        nullable: true,
        type: {
          name: "String"
        }
      },
      runpath: {
        serializedName: "runpath",
        nullable: true,
        type: {
          name: "String"
        }
      },
      rpath: {
        serializedName: "rpath",
        nullable: true,
        type: {
          name: "String"
        }
      },
      nx: {
        serializedName: "features.nx",
        type: {
          name: "String"
        }
      },
      pie: {
        serializedName: "features.pie",
        type: {
          name: "String"
        }
      },
      relro: {
        serializedName: "features.relro",
        type: {
          name: "String"
        }
      },
      canary: {
        serializedName: "features.canary",
        type: {
          name: "String"
        }
      },
      stripped: {
        serializedName: "features.stripped",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BinaryHardeningSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BinaryHardeningSummary",
    modelProperties: {
      totalFiles: {
        serializedName: "totalFiles",
        type: {
          name: "Number"
        }
      },
      nx: {
        serializedName: "nx",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      pie: {
        serializedName: "pie",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      relro: {
        serializedName: "relro",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      canary: {
        serializedName: "canary",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      stripped: {
        serializedName: "stripped",
        nullable: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PasswordHashList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PasswordHashList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PasswordHash"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PasswordHash: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PasswordHash",
    modelProperties: {
      passwordHashId: {
        serializedName: "passwordHashId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      filePath: {
        serializedName: "filePath",
        nullable: true,
        type: {
          name: "String"
        }
      },
      salt: {
        serializedName: "salt",
        nullable: true,
        type: {
          name: "String"
        }
      },
      hash: {
        serializedName: "hash",
        nullable: true,
        type: {
          name: "String"
        }
      },
      context: {
        serializedName: "context",
        nullable: true,
        type: {
          name: "String"
        }
      },
      username: {
        serializedName: "username",
        nullable: true,
        type: {
          name: "String"
        }
      },
      algorithm: {
        serializedName: "algorithm",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CveList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CveList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Cve"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Cve: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Cve",
    modelProperties: {
      cveId: {
        serializedName: "cveId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      component: {
        serializedName: "component",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      severity: {
        serializedName: "severity",
        nullable: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        nullable: true,
        type: {
          name: "String"
        }
      },
      cvssScore: {
        serializedName: "cvssScore",
        nullable: true,
        type: {
          name: "String"
        }
      },
      cvssVersion: {
        serializedName: "cvssVersion",
        nullable: true,
        type: {
          name: "String"
        }
      },
      cvssV2Score: {
        serializedName: "cvssV2Score",
        nullable: true,
        type: {
          name: "String"
        }
      },
      cvssV3Score: {
        serializedName: "cvssV3Score",
        nullable: true,
        type: {
          name: "String"
        }
      },
      publishDate: {
        serializedName: "publishDate",
        type: {
          name: "DateTime"
        }
      },
      updatedDate: {
        serializedName: "updatedDate",
        type: {
          name: "DateTime"
        }
      },
      links: {
        serializedName: "links",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CveLink"
            }
          }
        }
      },
      description: {
        serializedName: "description",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CveLink: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CveLink",
    modelProperties: {
      href: {
        serializedName: "href",
        nullable: true,
        type: {
          name: "String"
        }
      },
      label: {
        serializedName: "label",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CveSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CveSummary",
    modelProperties: {
      critical: {
        serializedName: "critical",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      high: {
        serializedName: "high",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      medium: {
        serializedName: "medium",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      low: {
        serializedName: "low",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      unknown: {
        serializedName: "unknown",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      undefined: {
        serializedName: "undefined",
        nullable: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CryptoCertificateSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CryptoCertificateSummary",
    modelProperties: {
      totalCertificates: {
        serializedName: "totalCertificates",
        type: {
          name: "Number"
        }
      },
      pairedKeys: {
        serializedName: "pairedKeys",
        type: {
          name: "Number"
        }
      },
      expired: {
        serializedName: "expired",
        type: {
          name: "Number"
        }
      },
      expiringSoon: {
        serializedName: "expiringSoon",
        type: {
          name: "Number"
        }
      },
      weakSignature: {
        serializedName: "weakSignature",
        type: {
          name: "Number"
        }
      },
      selfSigned: {
        serializedName: "selfSigned",
        type: {
          name: "Number"
        }
      },
      shortKeySize: {
        serializedName: "shortKeySize",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CryptoKeySummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CryptoKeySummary",
    modelProperties: {
      totalKeys: {
        serializedName: "totalKeys",
        type: {
          name: "Number"
        }
      },
      publicKeys: {
        serializedName: "publicKeys",
        type: {
          name: "Number"
        }
      },
      privateKeys: {
        serializedName: "privateKeys",
        type: {
          name: "Number"
        }
      },
      pairedKeys: {
        serializedName: "pairedKeys",
        type: {
          name: "Number"
        }
      },
      shortKeySize: {
        serializedName: "shortKeySize",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CryptoCertificateList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CryptoCertificateList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CryptoCertificate"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CryptoCertificate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CryptoCertificate",
    modelProperties: {
      cryptoCertId: {
        serializedName: "cryptoCertId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        nullable: true,
        type: {
          name: "String"
        }
      },
      subject: {
        serializedName: "subject",
        type: {
          name: "Composite",
          className: "CryptoCertificateEntity"
        }
      },
      issuer: {
        serializedName: "issuer",
        type: {
          name: "Composite",
          className: "CryptoCertificateEntity"
        }
      },
      issuedDate: {
        serializedName: "issuedDate",
        nullable: true,
        type: {
          name: "DateTime"
        }
      },
      expirationDate: {
        serializedName: "expirationDate",
        nullable: true,
        type: {
          name: "DateTime"
        }
      },
      role: {
        serializedName: "role",
        nullable: true,
        type: {
          name: "String"
        }
      },
      signatureAlgorithm: {
        serializedName: "signatureAlgorithm",
        nullable: true,
        type: {
          name: "String"
        }
      },
      keySize: {
        serializedName: "keySize",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      keyAlgorithm: {
        serializedName: "keyAlgorithm",
        nullable: true,
        type: {
          name: "String"
        }
      },
      encoding: {
        serializedName: "encoding",
        nullable: true,
        type: {
          name: "String"
        }
      },
      serialNumber: {
        serializedName: "serialNumber",
        nullable: true,
        type: {
          name: "String"
        }
      },
      fingerprint: {
        serializedName: "fingerprint",
        nullable: true,
        type: {
          name: "String"
        }
      },
      usage: {
        serializedName: "usage",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      filePaths: {
        serializedName: "filePaths",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      pairedKey: {
        serializedName: "pairedKey",
        type: {
          name: "Composite",
          className: "PairedKey"
        }
      },
      isExpired: {
        serializedName: "isExpired",
        nullable: true,
        type: {
          name: "String"
        }
      },
      isSelfSigned: {
        serializedName: "isSelfSigned",
        nullable: true,
        type: {
          name: "String"
        }
      },
      isWeakSignature: {
        serializedName: "isWeakSignature",
        nullable: true,
        type: {
          name: "String"
        }
      },
      isShortKeySize: {
        serializedName: "isShortKeySize",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CryptoCertificateEntity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CryptoCertificateEntity",
    modelProperties: {
      commonName: {
        serializedName: "commonName",
        nullable: true,
        type: {
          name: "String"
        }
      },
      organization: {
        serializedName: "organization",
        nullable: true,
        type: {
          name: "String"
        }
      },
      organizationalUnit: {
        serializedName: "organizationalUnit",
        nullable: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        nullable: true,
        type: {
          name: "String"
        }
      },
      country: {
        serializedName: "country",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PairedKey: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PairedKey",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      additionalProperties: {
        serializedName: "additionalProperties",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const CryptoKeyList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CryptoKeyList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CryptoKey"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CryptoKey: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CryptoKey",
    modelProperties: {
      cryptoKeyId: {
        serializedName: "cryptoKeyId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      keyType: {
        serializedName: "keyType",
        nullable: true,
        type: {
          name: "String"
        }
      },
      keySize: {
        serializedName: "keySize",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      keyAlgorithm: {
        serializedName: "keyAlgorithm",
        nullable: true,
        type: {
          name: "String"
        }
      },
      usage: {
        serializedName: "usage",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      filePaths: {
        serializedName: "filePaths",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      pairedKey: {
        serializedName: "pairedKey",
        type: {
          name: "Composite",
          className: "PairedKey"
        }
      },
      isShortKeySize: {
        serializedName: "isShortKeySize",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspaceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspaceList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Workspace"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspaceUpdateDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspaceUpdateDefinition",
    modelProperties: {
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GenerateUploadUrlRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GenerateUploadUrlRequest",
    modelProperties: {
      firmwareId: {
        serializedName: "firmwareId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CveComponent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CveComponent",
    modelProperties: {
      componentId: {
        serializedName: "componentId",
        nullable: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        nullable: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Firmware: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Firmware",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      fileName: {
        serializedName: "properties.fileName",
        type: {
          name: "String"
        }
      },
      vendor: {
        serializedName: "properties.vendor",
        type: {
          name: "String"
        }
      },
      model: {
        serializedName: "properties.model",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      fileSize: {
        serializedName: "properties.fileSize",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      status: {
        defaultValue: "Pending",
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      statusMessages: {
        serializedName: "properties.statusMessages",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Dictionary",
              value: { type: { name: "any" } }
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Workspace: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Workspace",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
