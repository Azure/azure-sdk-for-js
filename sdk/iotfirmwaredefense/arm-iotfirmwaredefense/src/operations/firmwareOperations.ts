/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { FirmwareOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { IoTFirmwareDefenseClient } from "../ioTFirmwareDefenseClient";
import {
  Firmware,
  FirmwareListByWorkspaceNextOptionalParams,
  FirmwareListByWorkspaceOptionalParams,
  FirmwareListByWorkspaceResponse,
  Component,
  FirmwareListGenerateComponentListNextOptionalParams,
  FirmwareListGenerateComponentListOptionalParams,
  FirmwareListGenerateComponentListResponse,
  BinaryHardening,
  FirmwareListGenerateBinaryHardeningListNextOptionalParams,
  FirmwareListGenerateBinaryHardeningListOptionalParams,
  FirmwareListGenerateBinaryHardeningListResponse,
  PasswordHash,
  FirmwareListGeneratePasswordHashListNextOptionalParams,
  FirmwareListGeneratePasswordHashListOptionalParams,
  FirmwareListGeneratePasswordHashListResponse,
  Cve,
  FirmwareListGenerateCveListNextOptionalParams,
  FirmwareListGenerateCveListOptionalParams,
  FirmwareListGenerateCveListResponse,
  CryptoCertificate,
  FirmwareListGenerateCryptoCertificateListNextOptionalParams,
  FirmwareListGenerateCryptoCertificateListOptionalParams,
  FirmwareListGenerateCryptoCertificateListResponse,
  CryptoKey,
  FirmwareListGenerateCryptoKeyListNextOptionalParams,
  FirmwareListGenerateCryptoKeyListOptionalParams,
  FirmwareListGenerateCryptoKeyListResponse,
  FirmwareCreateOptionalParams,
  FirmwareCreateResponse,
  FirmwareUpdateDefinition,
  FirmwareUpdateOptionalParams,
  FirmwareUpdateResponse,
  FirmwareDeleteOptionalParams,
  FirmwareGetOptionalParams,
  FirmwareGetResponse,
  FirmwareGenerateDownloadUrlOptionalParams,
  FirmwareGenerateDownloadUrlResponse,
  FirmwareGenerateFilesystemDownloadUrlOptionalParams,
  FirmwareGenerateFilesystemDownloadUrlResponse,
  FirmwareGenerateSummaryOptionalParams,
  FirmwareGenerateSummaryResponse,
  FirmwareGenerateComponentDetailsOptionalParams,
  FirmwareGenerateComponentDetailsResponse,
  FirmwareGenerateBinaryHardeningSummaryOptionalParams,
  FirmwareGenerateBinaryHardeningSummaryResponse,
  FirmwareGenerateBinaryHardeningDetailsOptionalParams,
  FirmwareGenerateBinaryHardeningDetailsResponse,
  FirmwareGenerateCveSummaryOptionalParams,
  FirmwareGenerateCveSummaryResponse,
  FirmwareGenerateCryptoCertificateSummaryOptionalParams,
  FirmwareGenerateCryptoCertificateSummaryResponse,
  FirmwareGenerateCryptoKeySummaryOptionalParams,
  FirmwareGenerateCryptoKeySummaryResponse,
  FirmwareListByWorkspaceNextResponse,
  FirmwareListGenerateComponentListNextResponse,
  FirmwareListGenerateBinaryHardeningListNextResponse,
  FirmwareListGeneratePasswordHashListNextResponse,
  FirmwareListGenerateCveListNextResponse,
  FirmwareListGenerateCryptoCertificateListNextResponse,
  FirmwareListGenerateCryptoKeyListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing FirmwareOperations operations. */
export class FirmwareOperationsImpl implements FirmwareOperations {
  private readonly client: IoTFirmwareDefenseClient;

  /**
   * Initialize a new instance of the class FirmwareOperations class.
   * @param client Reference to the service client
   */
  constructor(client: IoTFirmwareDefenseClient) {
    this.client = client;
  }

  /**
   * Lists all of firmwares inside a workspace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param options The options parameters.
   */
  public listByWorkspace(
    resourceGroupName: string,
    workspaceName: string,
    options?: FirmwareListByWorkspaceOptionalParams
  ): PagedAsyncIterableIterator<Firmware> {
    const iter = this.listByWorkspacePagingAll(
      resourceGroupName,
      workspaceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByWorkspacePagingPage(
          resourceGroupName,
          workspaceName,
          options,
          settings
        );
      }
    };
  }

  private async *listByWorkspacePagingPage(
    resourceGroupName: string,
    workspaceName: string,
    options?: FirmwareListByWorkspaceOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Firmware[]> {
    let result: FirmwareListByWorkspaceResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByWorkspace(
        resourceGroupName,
        workspaceName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByWorkspaceNext(
        resourceGroupName,
        workspaceName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByWorkspacePagingAll(
    resourceGroupName: string,
    workspaceName: string,
    options?: FirmwareListByWorkspaceOptionalParams
  ): AsyncIterableIterator<Firmware> {
    for await (const page of this.listByWorkspacePagingPage(
      resourceGroupName,
      workspaceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * The operation to list all components result for a firmware.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param options The options parameters.
   */
  public listGenerateComponentList(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareListGenerateComponentListOptionalParams
  ): PagedAsyncIterableIterator<Component> {
    const iter = this.listGenerateComponentListPagingAll(
      resourceGroupName,
      workspaceName,
      firmwareId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listGenerateComponentListPagingPage(
          resourceGroupName,
          workspaceName,
          firmwareId,
          options,
          settings
        );
      }
    };
  }

  private async *listGenerateComponentListPagingPage(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareListGenerateComponentListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Component[]> {
    let result: FirmwareListGenerateComponentListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listGenerateComponentList(
        resourceGroupName,
        workspaceName,
        firmwareId,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listGenerateComponentListNext(
        resourceGroupName,
        workspaceName,
        firmwareId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listGenerateComponentListPagingAll(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareListGenerateComponentListOptionalParams
  ): AsyncIterableIterator<Component> {
    for await (const page of this.listGenerateComponentListPagingPage(
      resourceGroupName,
      workspaceName,
      firmwareId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * The operation to list all binary hardening result for a firmware.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param options The options parameters.
   */
  public listGenerateBinaryHardeningList(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareListGenerateBinaryHardeningListOptionalParams
  ): PagedAsyncIterableIterator<BinaryHardening> {
    const iter = this.listGenerateBinaryHardeningListPagingAll(
      resourceGroupName,
      workspaceName,
      firmwareId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listGenerateBinaryHardeningListPagingPage(
          resourceGroupName,
          workspaceName,
          firmwareId,
          options,
          settings
        );
      }
    };
  }

  private async *listGenerateBinaryHardeningListPagingPage(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareListGenerateBinaryHardeningListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<BinaryHardening[]> {
    let result: FirmwareListGenerateBinaryHardeningListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listGenerateBinaryHardeningList(
        resourceGroupName,
        workspaceName,
        firmwareId,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listGenerateBinaryHardeningListNext(
        resourceGroupName,
        workspaceName,
        firmwareId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listGenerateBinaryHardeningListPagingAll(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareListGenerateBinaryHardeningListOptionalParams
  ): AsyncIterableIterator<BinaryHardening> {
    for await (const page of this.listGenerateBinaryHardeningListPagingPage(
      resourceGroupName,
      workspaceName,
      firmwareId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * The operation to list all password hashes for a firmware.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param options The options parameters.
   */
  public listGeneratePasswordHashList(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareListGeneratePasswordHashListOptionalParams
  ): PagedAsyncIterableIterator<PasswordHash> {
    const iter = this.listGeneratePasswordHashListPagingAll(
      resourceGroupName,
      workspaceName,
      firmwareId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listGeneratePasswordHashListPagingPage(
          resourceGroupName,
          workspaceName,
          firmwareId,
          options,
          settings
        );
      }
    };
  }

  private async *listGeneratePasswordHashListPagingPage(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareListGeneratePasswordHashListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<PasswordHash[]> {
    let result: FirmwareListGeneratePasswordHashListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listGeneratePasswordHashList(
        resourceGroupName,
        workspaceName,
        firmwareId,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listGeneratePasswordHashListNext(
        resourceGroupName,
        workspaceName,
        firmwareId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listGeneratePasswordHashListPagingAll(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareListGeneratePasswordHashListOptionalParams
  ): AsyncIterableIterator<PasswordHash> {
    for await (const page of this.listGeneratePasswordHashListPagingPage(
      resourceGroupName,
      workspaceName,
      firmwareId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * The operation to list all cve results for a firmware.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param options The options parameters.
   */
  public listGenerateCveList(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareListGenerateCveListOptionalParams
  ): PagedAsyncIterableIterator<Cve> {
    const iter = this.listGenerateCveListPagingAll(
      resourceGroupName,
      workspaceName,
      firmwareId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listGenerateCveListPagingPage(
          resourceGroupName,
          workspaceName,
          firmwareId,
          options,
          settings
        );
      }
    };
  }

  private async *listGenerateCveListPagingPage(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareListGenerateCveListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Cve[]> {
    let result: FirmwareListGenerateCveListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listGenerateCveList(
        resourceGroupName,
        workspaceName,
        firmwareId,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listGenerateCveListNext(
        resourceGroupName,
        workspaceName,
        firmwareId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listGenerateCveListPagingAll(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareListGenerateCveListOptionalParams
  ): AsyncIterableIterator<Cve> {
    for await (const page of this.listGenerateCveListPagingPage(
      resourceGroupName,
      workspaceName,
      firmwareId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * The operation to list all crypto certificates for a firmware.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param options The options parameters.
   */
  public listGenerateCryptoCertificateList(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareListGenerateCryptoCertificateListOptionalParams
  ): PagedAsyncIterableIterator<CryptoCertificate> {
    const iter = this.listGenerateCryptoCertificateListPagingAll(
      resourceGroupName,
      workspaceName,
      firmwareId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listGenerateCryptoCertificateListPagingPage(
          resourceGroupName,
          workspaceName,
          firmwareId,
          options,
          settings
        );
      }
    };
  }

  private async *listGenerateCryptoCertificateListPagingPage(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareListGenerateCryptoCertificateListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<CryptoCertificate[]> {
    let result: FirmwareListGenerateCryptoCertificateListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listGenerateCryptoCertificateList(
        resourceGroupName,
        workspaceName,
        firmwareId,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listGenerateCryptoCertificateListNext(
        resourceGroupName,
        workspaceName,
        firmwareId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listGenerateCryptoCertificateListPagingAll(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareListGenerateCryptoCertificateListOptionalParams
  ): AsyncIterableIterator<CryptoCertificate> {
    for await (const page of this.listGenerateCryptoCertificateListPagingPage(
      resourceGroupName,
      workspaceName,
      firmwareId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * The operation to list all crypto keys for a firmware.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param options The options parameters.
   */
  public listGenerateCryptoKeyList(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareListGenerateCryptoKeyListOptionalParams
  ): PagedAsyncIterableIterator<CryptoKey> {
    const iter = this.listGenerateCryptoKeyListPagingAll(
      resourceGroupName,
      workspaceName,
      firmwareId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listGenerateCryptoKeyListPagingPage(
          resourceGroupName,
          workspaceName,
          firmwareId,
          options,
          settings
        );
      }
    };
  }

  private async *listGenerateCryptoKeyListPagingPage(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareListGenerateCryptoKeyListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<CryptoKey[]> {
    let result: FirmwareListGenerateCryptoKeyListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listGenerateCryptoKeyList(
        resourceGroupName,
        workspaceName,
        firmwareId,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listGenerateCryptoKeyListNext(
        resourceGroupName,
        workspaceName,
        firmwareId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listGenerateCryptoKeyListPagingAll(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareListGenerateCryptoKeyListOptionalParams
  ): AsyncIterableIterator<CryptoKey> {
    for await (const page of this.listGenerateCryptoKeyListPagingPage(
      resourceGroupName,
      workspaceName,
      firmwareId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists all of firmwares inside a workspace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param options The options parameters.
   */
  private _listByWorkspace(
    resourceGroupName: string,
    workspaceName: string,
    options?: FirmwareListByWorkspaceOptionalParams
  ): Promise<FirmwareListByWorkspaceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, options },
      listByWorkspaceOperationSpec
    );
  }

  /**
   * The operation to create a firmware.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param firmware Details of the firmware being created or updated.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    firmware: Firmware,
    options?: FirmwareCreateOptionalParams
  ): Promise<FirmwareCreateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, firmwareId, firmware, options },
      createOperationSpec
    );
  }

  /**
   * The operation to update firmware.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param firmware Details of the firmware being created or updated.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    firmware: FirmwareUpdateDefinition,
    options?: FirmwareUpdateOptionalParams
  ): Promise<FirmwareUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, firmwareId, firmware, options },
      updateOperationSpec
    );
  }

  /**
   * The operation to delete a firmware.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, firmwareId, options },
      deleteOperationSpec
    );
  }

  /**
   * Get firmware.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareGetOptionalParams
  ): Promise<FirmwareGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, firmwareId, options },
      getOperationSpec
    );
  }

  /**
   * The operation to a url for file download.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param options The options parameters.
   */
  generateDownloadUrl(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareGenerateDownloadUrlOptionalParams
  ): Promise<FirmwareGenerateDownloadUrlResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, firmwareId, options },
      generateDownloadUrlOperationSpec
    );
  }

  /**
   * The operation to a url for tar file download.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param options The options parameters.
   */
  generateFilesystemDownloadUrl(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareGenerateFilesystemDownloadUrlOptionalParams
  ): Promise<FirmwareGenerateFilesystemDownloadUrlResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, firmwareId, options },
      generateFilesystemDownloadUrlOperationSpec
    );
  }

  /**
   * The operation to get a scan summary.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param options The options parameters.
   */
  generateSummary(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareGenerateSummaryOptionalParams
  ): Promise<FirmwareGenerateSummaryResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, firmwareId, options },
      generateSummaryOperationSpec
    );
  }

  /**
   * The operation to list all components result for a firmware.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param options The options parameters.
   */
  private _listGenerateComponentList(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareListGenerateComponentListOptionalParams
  ): Promise<FirmwareListGenerateComponentListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, firmwareId, options },
      listGenerateComponentListOperationSpec
    );
  }

  /**
   * The operation to get component details for a firmware.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param options The options parameters.
   */
  generateComponentDetails(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareGenerateComponentDetailsOptionalParams
  ): Promise<FirmwareGenerateComponentDetailsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, firmwareId, options },
      generateComponentDetailsOperationSpec
    );
  }

  /**
   * The operation to list all binary hardening result for a firmware.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param options The options parameters.
   */
  private _listGenerateBinaryHardeningList(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareListGenerateBinaryHardeningListOptionalParams
  ): Promise<FirmwareListGenerateBinaryHardeningListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, firmwareId, options },
      listGenerateBinaryHardeningListOperationSpec
    );
  }

  /**
   * The operation to list the binary hardening summary percentages for a firmware.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param options The options parameters.
   */
  generateBinaryHardeningSummary(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareGenerateBinaryHardeningSummaryOptionalParams
  ): Promise<FirmwareGenerateBinaryHardeningSummaryResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, firmwareId, options },
      generateBinaryHardeningSummaryOperationSpec
    );
  }

  /**
   * The operation to get binary hardening details for a firmware.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param options The options parameters.
   */
  generateBinaryHardeningDetails(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareGenerateBinaryHardeningDetailsOptionalParams
  ): Promise<FirmwareGenerateBinaryHardeningDetailsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, firmwareId, options },
      generateBinaryHardeningDetailsOperationSpec
    );
  }

  /**
   * The operation to list all password hashes for a firmware.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param options The options parameters.
   */
  private _listGeneratePasswordHashList(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareListGeneratePasswordHashListOptionalParams
  ): Promise<FirmwareListGeneratePasswordHashListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, firmwareId, options },
      listGeneratePasswordHashListOperationSpec
    );
  }

  /**
   * The operation to list all cve results for a firmware.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param options The options parameters.
   */
  private _listGenerateCveList(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareListGenerateCveListOptionalParams
  ): Promise<FirmwareListGenerateCveListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, firmwareId, options },
      listGenerateCveListOperationSpec
    );
  }

  /**
   * The operation to provide a high level summary of the CVEs reported for the firmware image.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param options The options parameters.
   */
  generateCveSummary(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareGenerateCveSummaryOptionalParams
  ): Promise<FirmwareGenerateCveSummaryResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, firmwareId, options },
      generateCveSummaryOperationSpec
    );
  }

  /**
   * The operation to provide a high level summary of the discovered cryptographic certificates reported
   * for the firmware image.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param options The options parameters.
   */
  generateCryptoCertificateSummary(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareGenerateCryptoCertificateSummaryOptionalParams
  ): Promise<FirmwareGenerateCryptoCertificateSummaryResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, firmwareId, options },
      generateCryptoCertificateSummaryOperationSpec
    );
  }

  /**
   * The operation to provide a high level summary of the discovered cryptographic keys reported for the
   * firmware image.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param options The options parameters.
   */
  generateCryptoKeySummary(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareGenerateCryptoKeySummaryOptionalParams
  ): Promise<FirmwareGenerateCryptoKeySummaryResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, firmwareId, options },
      generateCryptoKeySummaryOperationSpec
    );
  }

  /**
   * The operation to list all crypto certificates for a firmware.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param options The options parameters.
   */
  private _listGenerateCryptoCertificateList(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareListGenerateCryptoCertificateListOptionalParams
  ): Promise<FirmwareListGenerateCryptoCertificateListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, firmwareId, options },
      listGenerateCryptoCertificateListOperationSpec
    );
  }

  /**
   * The operation to list all crypto keys for a firmware.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param options The options parameters.
   */
  private _listGenerateCryptoKeyList(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    options?: FirmwareListGenerateCryptoKeyListOptionalParams
  ): Promise<FirmwareListGenerateCryptoKeyListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, firmwareId, options },
      listGenerateCryptoKeyListOperationSpec
    );
  }

  /**
   * ListByWorkspaceNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param nextLink The nextLink from the previous successful call to the ListByWorkspace method.
   * @param options The options parameters.
   */
  private _listByWorkspaceNext(
    resourceGroupName: string,
    workspaceName: string,
    nextLink: string,
    options?: FirmwareListByWorkspaceNextOptionalParams
  ): Promise<FirmwareListByWorkspaceNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, nextLink, options },
      listByWorkspaceNextOperationSpec
    );
  }

  /**
   * ListGenerateComponentListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param nextLink The nextLink from the previous successful call to the ListGenerateComponentList
   *                 method.
   * @param options The options parameters.
   */
  private _listGenerateComponentListNext(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    nextLink: string,
    options?: FirmwareListGenerateComponentListNextOptionalParams
  ): Promise<FirmwareListGenerateComponentListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, firmwareId, nextLink, options },
      listGenerateComponentListNextOperationSpec
    );
  }

  /**
   * ListGenerateBinaryHardeningListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListGenerateBinaryHardeningList method.
   * @param options The options parameters.
   */
  private _listGenerateBinaryHardeningListNext(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    nextLink: string,
    options?: FirmwareListGenerateBinaryHardeningListNextOptionalParams
  ): Promise<FirmwareListGenerateBinaryHardeningListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, firmwareId, nextLink, options },
      listGenerateBinaryHardeningListNextOperationSpec
    );
  }

  /**
   * ListGeneratePasswordHashListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param nextLink The nextLink from the previous successful call to the ListGeneratePasswordHashList
   *                 method.
   * @param options The options parameters.
   */
  private _listGeneratePasswordHashListNext(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    nextLink: string,
    options?: FirmwareListGeneratePasswordHashListNextOptionalParams
  ): Promise<FirmwareListGeneratePasswordHashListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, firmwareId, nextLink, options },
      listGeneratePasswordHashListNextOperationSpec
    );
  }

  /**
   * ListGenerateCveListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param nextLink The nextLink from the previous successful call to the ListGenerateCveList method.
   * @param options The options parameters.
   */
  private _listGenerateCveListNext(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    nextLink: string,
    options?: FirmwareListGenerateCveListNextOptionalParams
  ): Promise<FirmwareListGenerateCveListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, firmwareId, nextLink, options },
      listGenerateCveListNextOperationSpec
    );
  }

  /**
   * ListGenerateCryptoCertificateListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListGenerateCryptoCertificateList method.
   * @param options The options parameters.
   */
  private _listGenerateCryptoCertificateListNext(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    nextLink: string,
    options?: FirmwareListGenerateCryptoCertificateListNextOptionalParams
  ): Promise<FirmwareListGenerateCryptoCertificateListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, firmwareId, nextLink, options },
      listGenerateCryptoCertificateListNextOperationSpec
    );
  }

  /**
   * ListGenerateCryptoKeyListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the firmware analysis workspace.
   * @param firmwareId The id of the firmware.
   * @param nextLink The nextLink from the previous successful call to the ListGenerateCryptoKeyList
   *                 method.
   * @param options The options parameters.
   */
  private _listGenerateCryptoKeyListNext(
    resourceGroupName: string,
    workspaceName: string,
    firmwareId: string,
    nextLink: string,
    options?: FirmwareListGenerateCryptoKeyListNextOptionalParams
  ): Promise<FirmwareListGenerateCryptoKeyListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, firmwareId, nextLink, options },
      listGenerateCryptoKeyListNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByWorkspaceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FirmwareList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Firmware
    },
    201: {
      bodyMapper: Mappers.Firmware
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.firmware,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.firmwareId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Firmware
    },
    201: {
      bodyMapper: Mappers.Firmware
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.firmware1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.firmwareId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.firmwareId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Firmware
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.firmwareId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const generateDownloadUrlOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateDownloadUrl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.UrlToken
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.firmwareId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const generateFilesystemDownloadUrlOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateFilesystemDownloadUrl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.UrlToken
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.firmwareId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const generateSummaryOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateSummary",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.FirmwareSummary
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.firmwareId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listGenerateComponentListOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateComponentList",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.firmwareId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const generateComponentDetailsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateComponentDetails",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Component
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.firmwareId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listGenerateBinaryHardeningListOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateBinaryHardeningList",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BinaryHardeningList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.firmwareId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const generateBinaryHardeningSummaryOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateBinaryHardeningSummary",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BinaryHardeningSummary
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.firmwareId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const generateBinaryHardeningDetailsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateBinaryHardeningDetails",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BinaryHardening
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.firmwareId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listGeneratePasswordHashListOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generatePasswordHashList",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PasswordHashList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.firmwareId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listGenerateCveListOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateCveList",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CveList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.firmwareId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const generateCveSummaryOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateCveSummary",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CveSummary
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.firmwareId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const generateCryptoCertificateSummaryOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateCryptoCertificateSummary",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CryptoCertificateSummary
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.firmwareId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const generateCryptoKeySummaryOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateCryptoKeySummary",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CryptoKeySummary
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.firmwareId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listGenerateCryptoCertificateListOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateCryptoCertificateList",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CryptoCertificateList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.firmwareId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listGenerateCryptoKeyListOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateCryptoKeyList",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CryptoKeyList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.firmwareId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByWorkspaceNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FirmwareList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listGenerateComponentListNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.firmwareId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listGenerateBinaryHardeningListNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BinaryHardeningList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.firmwareId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listGeneratePasswordHashListNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PasswordHashList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.firmwareId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listGenerateCveListNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CveList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.firmwareId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listGenerateCryptoCertificateListNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CryptoCertificateList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.firmwareId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listGenerateCryptoKeyListNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CryptoKeyList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.firmwareId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
