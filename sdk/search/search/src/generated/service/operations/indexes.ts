/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/indexesMappers";
import * as Parameters from "../models/parameters";
import { SearchServiceClientContext } from "../searchServiceClientContext";

/** Class representing a Indexes. */
export class Indexes {
  private readonly client: SearchServiceClientContext;

  /**
   * Create a Indexes.
   * @param {SearchServiceClientContext} client Reference to the service client.
   */
  constructor(client: SearchServiceClientContext) {
    this.client = client;
  }

  /**
   * Creates a new search index.
   * @param index The definition of the index to create.
   * @param [options] The optional parameters
   * @returns Promise<Models.IndexesCreateResponse>
   */
  create(index: Models.Index, options?: Models.IndexesCreateOptionalParams): Promise<Models.IndexesCreateResponse>;
  /**
   * @param index The definition of the index to create.
   * @param callback The callback
   */
  create(index: Models.Index, callback: coreHttp.ServiceCallback<Models.Index>): void;
  /**
   * @param index The definition of the index to create.
   * @param options The optional parameters
   * @param callback The callback
   */
  create(index: Models.Index, options: Models.IndexesCreateOptionalParams, callback: coreHttp.ServiceCallback<Models.Index>): void;
  create(index: Models.Index, options?: Models.IndexesCreateOptionalParams | coreHttp.ServiceCallback<Models.Index>, callback?: coreHttp.ServiceCallback<Models.Index>): Promise<Models.IndexesCreateResponse> {
    return this.client.sendOperationRequest(
      {
        index,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.IndexesCreateResponse>;
  }

  /**
   * Lists all indexes available for a search service.
   * @param [options] The optional parameters
   * @returns Promise<Models.IndexesListResponse>
   */
  list(options?: Models.IndexesListOptionalParams): Promise<Models.IndexesListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: coreHttp.ServiceCallback<Models.ListIndexesResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: Models.IndexesListOptionalParams, callback: coreHttp.ServiceCallback<Models.ListIndexesResult>): void;
  list(options?: Models.IndexesListOptionalParams | coreHttp.ServiceCallback<Models.ListIndexesResult>, callback?: coreHttp.ServiceCallback<Models.ListIndexesResult>): Promise<Models.IndexesListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.IndexesListResponse>;
  }

  /**
   * Creates a new search index or updates an index if it already exists.
   * @param indexName The definition of the index to create or update.
   * @param index The definition of the index to create or update.
   * @param [options] The optional parameters
   * @returns Promise<Models.IndexesCreateOrUpdateResponse>
   */
  createOrUpdate(indexName: string, index: Models.Index, options?: Models.IndexesCreateOrUpdateOptionalParams): Promise<Models.IndexesCreateOrUpdateResponse>;
  /**
   * @param indexName The definition of the index to create or update.
   * @param index The definition of the index to create or update.
   * @param callback The callback
   */
  createOrUpdate(indexName: string, index: Models.Index, callback: coreHttp.ServiceCallback<Models.Index>): void;
  /**
   * @param indexName The definition of the index to create or update.
   * @param index The definition of the index to create or update.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(indexName: string, index: Models.Index, options: Models.IndexesCreateOrUpdateOptionalParams, callback: coreHttp.ServiceCallback<Models.Index>): void;
  createOrUpdate(indexName: string, index: Models.Index, options?: Models.IndexesCreateOrUpdateOptionalParams | coreHttp.ServiceCallback<Models.Index>, callback?: coreHttp.ServiceCallback<Models.Index>): Promise<Models.IndexesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        indexName,
        index,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.IndexesCreateOrUpdateResponse>;
  }

  /**
   * Deletes a search index and all the documents it contains.
   * @param indexName The name of the index to delete.
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  deleteMethod(indexName: string, options?: Models.IndexesDeleteMethodOptionalParams): Promise<coreHttp.RestResponse>;
  /**
   * @param indexName The name of the index to delete.
   * @param callback The callback
   */
  deleteMethod(indexName: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param indexName The name of the index to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(indexName: string, options: Models.IndexesDeleteMethodOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  deleteMethod(indexName: string, options?: Models.IndexesDeleteMethodOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        indexName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Retrieves an index definition.
   * @param indexName The name of the index to retrieve.
   * @param [options] The optional parameters
   * @returns Promise<Models.IndexesGetResponse>
   */
  get(indexName: string, options?: Models.IndexesGetOptionalParams): Promise<Models.IndexesGetResponse>;
  /**
   * @param indexName The name of the index to retrieve.
   * @param callback The callback
   */
  get(indexName: string, callback: coreHttp.ServiceCallback<Models.Index>): void;
  /**
   * @param indexName The name of the index to retrieve.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(indexName: string, options: Models.IndexesGetOptionalParams, callback: coreHttp.ServiceCallback<Models.Index>): void;
  get(indexName: string, options?: Models.IndexesGetOptionalParams | coreHttp.ServiceCallback<Models.Index>, callback?: coreHttp.ServiceCallback<Models.Index>): Promise<Models.IndexesGetResponse> {
    return this.client.sendOperationRequest(
      {
        indexName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.IndexesGetResponse>;
  }

  /**
   * Returns statistics for the given index, including a document count and storage usage.
   * @param indexName The name of the index for which to retrieve statistics.
   * @param [options] The optional parameters
   * @returns Promise<Models.IndexesGetStatisticsResponse>
   */
  getStatistics(indexName: string, options?: Models.IndexesGetStatisticsOptionalParams): Promise<Models.IndexesGetStatisticsResponse>;
  /**
   * @param indexName The name of the index for which to retrieve statistics.
   * @param callback The callback
   */
  getStatistics(indexName: string, callback: coreHttp.ServiceCallback<Models.GetIndexStatisticsResult>): void;
  /**
   * @param indexName The name of the index for which to retrieve statistics.
   * @param options The optional parameters
   * @param callback The callback
   */
  getStatistics(indexName: string, options: Models.IndexesGetStatisticsOptionalParams, callback: coreHttp.ServiceCallback<Models.GetIndexStatisticsResult>): void;
  getStatistics(indexName: string, options?: Models.IndexesGetStatisticsOptionalParams | coreHttp.ServiceCallback<Models.GetIndexStatisticsResult>, callback?: coreHttp.ServiceCallback<Models.GetIndexStatisticsResult>): Promise<Models.IndexesGetStatisticsResponse> {
    return this.client.sendOperationRequest(
      {
        indexName,
        options
      },
      getStatisticsOperationSpec,
      callback) as Promise<Models.IndexesGetStatisticsResponse>;
  }

  /**
   * Shows how an analyzer breaks text into tokens.
   * @param indexName The name of the index for which to test an analyzer.
   * @param request The text and analyzer or analysis components to test.
   * @param [options] The optional parameters
   * @returns Promise<Models.IndexesAnalyzeResponse>
   */
  analyze(indexName: string, request: Models.AnalyzeRequest, options?: Models.IndexesAnalyzeOptionalParams): Promise<Models.IndexesAnalyzeResponse>;
  /**
   * @param indexName The name of the index for which to test an analyzer.
   * @param request The text and analyzer or analysis components to test.
   * @param callback The callback
   */
  analyze(indexName: string, request: Models.AnalyzeRequest, callback: coreHttp.ServiceCallback<Models.AnalyzeResult>): void;
  /**
   * @param indexName The name of the index for which to test an analyzer.
   * @param request The text and analyzer or analysis components to test.
   * @param options The optional parameters
   * @param callback The callback
   */
  analyze(indexName: string, request: Models.AnalyzeRequest, options: Models.IndexesAnalyzeOptionalParams, callback: coreHttp.ServiceCallback<Models.AnalyzeResult>): void;
  analyze(indexName: string, request: Models.AnalyzeRequest, options?: Models.IndexesAnalyzeOptionalParams | coreHttp.ServiceCallback<Models.AnalyzeResult>, callback?: coreHttp.ServiceCallback<Models.AnalyzeResult>): Promise<Models.IndexesAnalyzeResponse> {
    return this.client.sendOperationRequest(
      {
        indexName,
        request,
        options
      },
      analyzeOperationSpec,
      callback) as Promise<Models.IndexesAnalyzeResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const createOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "indexes",
  urlParameters: [
    Parameters.searchServiceName,
    Parameters.searchDnsSuffix
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.clientRequestId
  ],
  requestBody: {
    parameterPath: "index",
    mapper: {
      ...Mappers.Index,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.Index
    },
    default: {}
  },
  serializer
};

const listOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "indexes",
  urlParameters: [
    Parameters.searchServiceName,
    Parameters.searchDnsSuffix
  ],
  queryParameters: [
    Parameters.select,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.clientRequestId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListIndexesResult
    },
    default: {}
  },
  serializer
};

const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "indexes('{indexName}')",
  urlParameters: [
    Parameters.searchServiceName,
    Parameters.searchDnsSuffix,
    Parameters.indexName
  ],
  queryParameters: [
    Parameters.allowIndexDowntime,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.prefer,
    Parameters.clientRequestId,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  requestBody: {
    parameterPath: "index",
    mapper: {
      ...Mappers.Index,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Index
    },
    201: {
      bodyMapper: Mappers.Index
    },
    default: {}
  },
  serializer
};

const deleteMethodOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "indexes('{indexName}')",
  urlParameters: [
    Parameters.searchServiceName,
    Parameters.searchDnsSuffix,
    Parameters.indexName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.clientRequestId,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  responses: {
    204: {},
    404: {},
    default: {}
  },
  serializer
};

const getOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "indexes('{indexName}')",
  urlParameters: [
    Parameters.searchServiceName,
    Parameters.searchDnsSuffix,
    Parameters.indexName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.clientRequestId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Index
    },
    default: {}
  },
  serializer
};

const getStatisticsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "indexes('{indexName}')/search.stats",
  urlParameters: [
    Parameters.searchServiceName,
    Parameters.searchDnsSuffix,
    Parameters.indexName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.clientRequestId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetIndexStatisticsResult
    },
    default: {}
  },
  serializer
};

const analyzeOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "indexes('{indexName}')/search.analyze",
  urlParameters: [
    Parameters.searchServiceName,
    Parameters.searchDnsSuffix,
    Parameters.indexName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.clientRequestId
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.AnalyzeRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.AnalyzeResult
    },
    default: {}
  },
  serializer
};
