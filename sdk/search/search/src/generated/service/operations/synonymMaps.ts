/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/synonymMapsMappers";
import * as Parameters from "../models/parameters";
import { SearchServiceClientContext } from "../searchServiceClientContext";

/** Class representing a SynonymMaps. */
export class SynonymMaps {
  private readonly client: SearchServiceClientContext;

  /**
   * Create a SynonymMaps.
   * @param {SearchServiceClientContext} client Reference to the service client.
   */
  constructor(client: SearchServiceClientContext) {
    this.client = client;
  }

  /**
   * Creates a new synonym map or updates a synonym map if it already exists.
   * @param synonymMapName The name of the synonym map to create or update.
   * @param synonymMap The definition of the synonym map to create or update.
   * @param [options] The optional parameters
   * @returns Promise<Models.SynonymMapsCreateOrUpdateResponse>
   */
  createOrUpdate(synonymMapName: string, synonymMap: Models.SynonymMap, options?: Models.SynonymMapsCreateOrUpdateOptionalParams): Promise<Models.SynonymMapsCreateOrUpdateResponse>;
  /**
   * @param synonymMapName The name of the synonym map to create or update.
   * @param synonymMap The definition of the synonym map to create or update.
   * @param callback The callback
   */
  createOrUpdate(synonymMapName: string, synonymMap: Models.SynonymMap, callback: coreHttp.ServiceCallback<Models.SynonymMap>): void;
  /**
   * @param synonymMapName The name of the synonym map to create or update.
   * @param synonymMap The definition of the synonym map to create or update.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(synonymMapName: string, synonymMap: Models.SynonymMap, options: Models.SynonymMapsCreateOrUpdateOptionalParams, callback: coreHttp.ServiceCallback<Models.SynonymMap>): void;
  createOrUpdate(synonymMapName: string, synonymMap: Models.SynonymMap, options?: Models.SynonymMapsCreateOrUpdateOptionalParams | coreHttp.ServiceCallback<Models.SynonymMap>, callback?: coreHttp.ServiceCallback<Models.SynonymMap>): Promise<Models.SynonymMapsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        synonymMapName,
        synonymMap,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.SynonymMapsCreateOrUpdateResponse>;
  }

  /**
   * Deletes a synonym map.
   * @param synonymMapName The name of the synonym map to delete.
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  deleteMethod(synonymMapName: string, options?: Models.SynonymMapsDeleteMethodOptionalParams): Promise<coreHttp.RestResponse>;
  /**
   * @param synonymMapName The name of the synonym map to delete.
   * @param callback The callback
   */
  deleteMethod(synonymMapName: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param synonymMapName The name of the synonym map to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(synonymMapName: string, options: Models.SynonymMapsDeleteMethodOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  deleteMethod(synonymMapName: string, options?: Models.SynonymMapsDeleteMethodOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        synonymMapName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Retrieves a synonym map definition.
   * @param synonymMapName The name of the synonym map to retrieve.
   * @param [options] The optional parameters
   * @returns Promise<Models.SynonymMapsGetResponse>
   */
  get(synonymMapName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.SynonymMapsGetResponse>;
  /**
   * @param synonymMapName The name of the synonym map to retrieve.
   * @param callback The callback
   */
  get(synonymMapName: string, callback: coreHttp.ServiceCallback<Models.SynonymMap>): void;
  /**
   * @param synonymMapName The name of the synonym map to retrieve.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(synonymMapName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.SynonymMap>): void;
  get(synonymMapName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SynonymMap>, callback?: coreHttp.ServiceCallback<Models.SynonymMap>): Promise<Models.SynonymMapsGetResponse> {
    return this.client.sendOperationRequest(
      {
        synonymMapName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.SynonymMapsGetResponse>;
  }

  /**
   * Lists all synonym maps available for a search service.
   * @param [options] The optional parameters
   * @returns Promise<Models.SynonymMapsListResponse>
   */
  list(options?: Models.SynonymMapsListOptionalParams): Promise<Models.SynonymMapsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: coreHttp.ServiceCallback<Models.ListSynonymMapsResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: Models.SynonymMapsListOptionalParams, callback: coreHttp.ServiceCallback<Models.ListSynonymMapsResult>): void;
  list(options?: Models.SynonymMapsListOptionalParams | coreHttp.ServiceCallback<Models.ListSynonymMapsResult>, callback?: coreHttp.ServiceCallback<Models.ListSynonymMapsResult>): Promise<Models.SynonymMapsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.SynonymMapsListResponse>;
  }

  /**
   * Creates a new synonym map.
   * @param synonymMap The definition of the synonym map to create.
   * @param [options] The optional parameters
   * @returns Promise<Models.SynonymMapsCreateResponse>
   */
  create(synonymMap: Models.SynonymMap, options?: coreHttp.RequestOptionsBase): Promise<Models.SynonymMapsCreateResponse>;
  /**
   * @param synonymMap The definition of the synonym map to create.
   * @param callback The callback
   */
  create(synonymMap: Models.SynonymMap, callback: coreHttp.ServiceCallback<Models.SynonymMap>): void;
  /**
   * @param synonymMap The definition of the synonym map to create.
   * @param options The optional parameters
   * @param callback The callback
   */
  create(synonymMap: Models.SynonymMap, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.SynonymMap>): void;
  create(synonymMap: Models.SynonymMap, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SynonymMap>, callback?: coreHttp.ServiceCallback<Models.SynonymMap>): Promise<Models.SynonymMapsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        synonymMap,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.SynonymMapsCreateResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "synonymmaps('{synonymMapName}')",
  urlParameters: [
    Parameters.endpoint,
    Parameters.synonymMapName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.prefer,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  requestBody: {
    parameterPath: "synonymMap",
    mapper: {
      ...Mappers.SynonymMap,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SynonymMap
    },
    201: {
      bodyMapper: Mappers.SynonymMap
    },
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  serializer
};

const deleteMethodOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "synonymmaps('{synonymMapName}')",
  urlParameters: [
    Parameters.endpoint,
    Parameters.synonymMapName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  serializer
};

const getOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "synonymmaps('{synonymMapName}')",
  urlParameters: [
    Parameters.endpoint,
    Parameters.synonymMapName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SynonymMap
    },
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  serializer
};

const listOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "synonymmaps",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.select,
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListSynonymMapsResult
    },
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  serializer
};

const createOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "synonymmaps",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: "synonymMap",
    mapper: {
      ...Mappers.SynonymMap,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.SynonymMap
    },
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  serializer
};
