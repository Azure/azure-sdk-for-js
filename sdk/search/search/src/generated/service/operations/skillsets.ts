/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/skillsetsMappers";
import * as Parameters from "../models/parameters";
import { SearchServiceClientContext } from "../searchServiceClientContext";

/** Class representing a Skillsets. */
export class Skillsets {
  private readonly client: SearchServiceClientContext;

  /**
   * Create a Skillsets.
   * @param {SearchServiceClientContext} client Reference to the service client.
   */
  constructor(client: SearchServiceClientContext) {
    this.client = client;
  }

  /**
   * Creates a new skillset in a search service or updates the skillset if it already exists.
   * @param skillsetName The name of the skillset to create or update.
   * @param skillset The skillset containing one or more skills to create or update in a search
   * service.
   * @param [options] The optional parameters
   * @returns Promise<Models.SkillsetsCreateOrUpdateResponse>
   */
  createOrUpdate(skillsetName: string, skillset: Models.Skillset, options?: Models.SkillsetsCreateOrUpdateOptionalParams): Promise<Models.SkillsetsCreateOrUpdateResponse>;
  /**
   * @param skillsetName The name of the skillset to create or update.
   * @param skillset The skillset containing one or more skills to create or update in a search
   * service.
   * @param callback The callback
   */
  createOrUpdate(skillsetName: string, skillset: Models.Skillset, callback: coreHttp.ServiceCallback<Models.Skillset>): void;
  /**
   * @param skillsetName The name of the skillset to create or update.
   * @param skillset The skillset containing one or more skills to create or update in a search
   * service.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(skillsetName: string, skillset: Models.Skillset, options: Models.SkillsetsCreateOrUpdateOptionalParams, callback: coreHttp.ServiceCallback<Models.Skillset>): void;
  createOrUpdate(skillsetName: string, skillset: Models.Skillset, options?: Models.SkillsetsCreateOrUpdateOptionalParams | coreHttp.ServiceCallback<Models.Skillset>, callback?: coreHttp.ServiceCallback<Models.Skillset>): Promise<Models.SkillsetsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        skillsetName,
        skillset,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.SkillsetsCreateOrUpdateResponse>;
  }

  /**
   * Deletes a skillset in a search service.
   * @param skillsetName The name of the skillset to delete.
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  deleteMethod(skillsetName: string, options?: Models.SkillsetsDeleteMethodOptionalParams): Promise<coreHttp.RestResponse>;
  /**
   * @param skillsetName The name of the skillset to delete.
   * @param callback The callback
   */
  deleteMethod(skillsetName: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param skillsetName The name of the skillset to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(skillsetName: string, options: Models.SkillsetsDeleteMethodOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  deleteMethod(skillsetName: string, options?: Models.SkillsetsDeleteMethodOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        skillsetName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Retrieves a skillset in a search service.
   * @param skillsetName The name of the skillset to retrieve.
   * @param [options] The optional parameters
   * @returns Promise<Models.SkillsetsGetResponse>
   */
  get(skillsetName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.SkillsetsGetResponse>;
  /**
   * @param skillsetName The name of the skillset to retrieve.
   * @param callback The callback
   */
  get(skillsetName: string, callback: coreHttp.ServiceCallback<Models.Skillset>): void;
  /**
   * @param skillsetName The name of the skillset to retrieve.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(skillsetName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.Skillset>): void;
  get(skillsetName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.Skillset>, callback?: coreHttp.ServiceCallback<Models.Skillset>): Promise<Models.SkillsetsGetResponse> {
    return this.client.sendOperationRequest(
      {
        skillsetName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.SkillsetsGetResponse>;
  }

  /**
   * List all skillsets in a search service.
   * @param [options] The optional parameters
   * @returns Promise<Models.SkillsetsListResponse>
   */
  list(options?: Models.SkillsetsListOptionalParams): Promise<Models.SkillsetsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: coreHttp.ServiceCallback<Models.ListSkillsetsResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: Models.SkillsetsListOptionalParams, callback: coreHttp.ServiceCallback<Models.ListSkillsetsResult>): void;
  list(options?: Models.SkillsetsListOptionalParams | coreHttp.ServiceCallback<Models.ListSkillsetsResult>, callback?: coreHttp.ServiceCallback<Models.ListSkillsetsResult>): Promise<Models.SkillsetsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.SkillsetsListResponse>;
  }

  /**
   * Creates a new skillset in a search service.
   * @param skillset The skillset containing one or more skills to create in a search service.
   * @param [options] The optional parameters
   * @returns Promise<Models.SkillsetsCreateResponse>
   */
  create(skillset: Models.Skillset, options?: coreHttp.RequestOptionsBase): Promise<Models.SkillsetsCreateResponse>;
  /**
   * @param skillset The skillset containing one or more skills to create in a search service.
   * @param callback The callback
   */
  create(skillset: Models.Skillset, callback: coreHttp.ServiceCallback<Models.Skillset>): void;
  /**
   * @param skillset The skillset containing one or more skills to create in a search service.
   * @param options The optional parameters
   * @param callback The callback
   */
  create(skillset: Models.Skillset, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.Skillset>): void;
  create(skillset: Models.Skillset, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.Skillset>, callback?: coreHttp.ServiceCallback<Models.Skillset>): Promise<Models.SkillsetsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        skillset,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.SkillsetsCreateResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "skillsets('{skillsetName}')",
  urlParameters: [
    Parameters.endpoint,
    Parameters.skillsetName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.prefer,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  requestBody: {
    parameterPath: "skillset",
    mapper: {
      ...Mappers.Skillset,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Skillset
    },
    201: {
      bodyMapper: Mappers.Skillset
    },
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  serializer
};

const deleteMethodOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "skillsets('{skillsetName}')",
  urlParameters: [
    Parameters.endpoint,
    Parameters.skillsetName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  serializer
};

const getOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "skillsets('{skillsetName}')",
  urlParameters: [
    Parameters.endpoint,
    Parameters.skillsetName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Skillset
    },
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  serializer
};

const listOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "skillsets",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.select,
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListSkillsetsResult
    },
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  serializer
};

const createOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "skillsets",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: "skillset",
    mapper: {
      ...Mappers.Skillset,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.Skillset
    },
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  serializer
};
