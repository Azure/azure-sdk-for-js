/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreHttpCompat from "@azure/core-http-compat";

export type VectorQueryUnion =
  | VectorQuery
  | VectorizedQuery
  | VectorizableTextQuery
  | VectorizableImageUrlQuery
  | VectorizableImageBinaryQuery;
export type VectorThresholdUnion =
  | VectorThreshold
  | VectorSimilarityThreshold
  | SearchScoreThreshold;

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** Response containing search results from an index. */
export interface SearchDocumentsResult {
  /**
   * The total count of results found by the search operation, or null if the count was not requested. If present, the count may be greater than the number of results in this response. This can happen if you use the $top or $skip parameters, or if the query can't return all the requested documents in a single response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly count?: number;
  /**
   * A value indicating the percentage of the index that was included in the query, or null if minimumCoverage was not specified in the request.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly coverage?: number;
  /**
   * The facet query results for the search operation, organized as a collection of buckets for each faceted field; null if the query did not include any facet expressions.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly facets?: { [propertyName: string]: FacetResult[] };
  /**
   * The answers query results for the search operation; null if the answers query parameter was not specified or set to 'none'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly answers?: QueryAnswerResult[];
  /**
   * Continuation JSON payload returned when the query can't return all the requested results in a single response. You can use this JSON along with @odata.nextLink to formulate another POST Search request to get the next part of the search response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextPageParameters?: SearchRequest;
  /**
   * The sequence of results returned by the query.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly results: SearchResult[];
  /**
   * Continuation URL returned when the query can't return all the requested results in a single response. You can use this URL to formulate another GET or POST Search request to get the next part of the search response. Make sure to use the same verb (GET or POST) as the request that produced this response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
  /**
   * Reason that a partial response was returned for a semantic ranking request.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly semanticPartialResponseReason?: SemanticErrorReason;
  /**
   * Type of partial response that was returned for a semantic ranking request.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly semanticPartialResponseType?: SemanticSearchResultsType;
  /**
   * Type of query rewrite that was used to retrieve documents.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly semanticQueryRewritesResultType?: SemanticQueryRewritesResultType;
  /**
   * Debug information that applies to the search results as a whole.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly debugInfo?: DebugInfo;
}

/** A single bucket of a facet query result. Reports the number of documents with a field value falling within a particular range or having a particular value or interval. */
export interface FacetResult {
  /** Describes unknown properties. The value of an unknown property can be of "any" type. */
  [property: string]: any;
  /**
   * The approximate count of documents falling within the bucket described by this facet.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly count?: number;
  /**
   * The nested facet query results for the search operation, organized as a collection of buckets for each faceted field; null if the query did not contain any nested facets.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly facets?: { [propertyName: string]: FacetResult[] };
}

/** An answer is a text passage extracted from the contents of the most relevant documents that matched the query. Answers are extracted from the top search results. Answer candidates are scored and the top answers are selected. */
export interface QueryAnswerResult {
  /** Describes unknown properties. The value of an unknown property can be of "any" type. */
  [property: string]: any;
  /**
   * The score value represents how relevant the answer is to the query relative to other answers returned for the query.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly score: number;
  /**
   * The key of the document the answer was extracted from.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly key: string;
  /**
   * The text passage extracted from the document contents as the answer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly text: string;
  /**
   * Same text passage as in the Text property with highlighted text phrases most relevant to the query.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly highlights?: string;
}

/** Parameters for filtering, sorting, faceting, paging, and other search query behaviors. */
export interface SearchRequest {
  /** A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation. */
  includeTotalResultCount?: boolean;
  /** The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs. */
  facets?: string[];
  /** The OData $filter expression to apply to the search query. */
  filter?: string;
  /** The comma-separated list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting. */
  highlightFields?: string;
  /** A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is &lt;/em&gt;. */
  highlightPostTag?: string;
  /** A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is &lt;em&gt;. */
  highlightPreTag?: string;
  /** A number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 100. */
  minimumCoverage?: number;
  /** The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses. */
  orderBy?: string;
  /** A value that specifies the syntax of the search query. The default is 'simple'. Use 'full' if your query uses the Lucene query syntax. */
  queryType?: QueryType;
  /** A value that specifies whether we want to calculate scoring statistics (such as document frequency) globally for more consistent scoring, or locally, for lower latency. The default is 'local'. Use 'global' to aggregate scoring statistics globally before scoring. Using global scoring statistics can increase latency of search queries. */
  scoringStatistics?: ScoringStatistics;
  /** A value to be used to create a sticky session, which can help getting more consistent results. As long as the same sessionId is used, a best-effort attempt will be made to target the same replica set. Be wary that reusing the same sessionID values repeatedly can interfere with the load balancing of the requests across replicas and adversely affect the performance of the search service. The value used as sessionId cannot start with a '_' character. */
  sessionId?: string;
  /** The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values. For example, if the scoring profile defines a function with a parameter called 'mylocation' the parameter string would be "mylocation--122.2,44.8" (without the quotes). */
  scoringParameters?: string[];
  /** The name of a scoring profile to evaluate match scores for matching documents in order to sort the results. */
  scoringProfile?: string;
  /** Enables a debugging tool that can be used to further explore your reranked results. */
  debug?: QueryDebugMode;
  /** A full-text search query expression; Use "*" or omit this parameter to match all documents. */
  searchText?: string;
  /** The comma-separated list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each fielded search expression take precedence over any field names listed in this parameter. */
  searchFields?: string;
  /** A value that specifies whether any or all of the search terms must be matched in order to count the document as a match. */
  searchMode?: SearchMode;
  /** A value that specifies the language of the search query. */
  queryLanguage?: QueryLanguage;
  /** A value that specified the type of the speller to use to spell-correct individual search query terms. */
  speller?: QuerySpellerType;
  /** The comma-separated list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included. */
  select?: string;
  /** The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use skip due to this limitation, consider using orderby on a totally-ordered key and filter with a range query instead. */
  skip?: number;
  /** The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation token that can be used to issue another Search request for the next page of results. */
  top?: number;
  /** The name of a semantic configuration that will be used when processing documents for queries of type semantic. */
  semanticConfigurationName?: string;
  /** Allows the user to choose whether a semantic call should fail completely (default / current behavior), or to return partial results. */
  semanticErrorHandling?: SemanticErrorMode;
  /** Allows the user to set an upper bound on the amount of time it takes for semantic enrichment to finish processing before the request fails. */
  semanticMaxWaitInMilliseconds?: number;
  /** Allows setting a separate search query that will be solely used for semantic reranking, semantic captions and semantic answers. Is useful for scenarios where there is a need to use different queries between the base retrieval and ranking phase, and the L2 semantic phase. */
  semanticQuery?: string;
  /** A value that specifies whether answers should be returned as part of the search response. */
  answers?: QueryAnswerType;
  /** A value that specifies whether captions should be returned as part of the search response. */
  captions?: QueryCaptionType;
  /** A value that specifies whether query rewrites should be generated to augment the search query. */
  queryRewrites?: QueryRewritesType;
  /** The comma-separated list of field names used for semantic ranking. */
  semanticFields?: string;
  /** The query parameters for vector and hybrid search queries. */
  vectorQueries?: VectorQueryUnion[];
  /** Determines whether or not filters are applied before or after the vector search is performed. Default is 'preFilter' for new indexes. */
  vectorFilterMode?: VectorFilterMode;
  /** The query parameters to configure hybrid search behaviors. */
  hybridSearch?: HybridSearch;
}

/** The query parameters for vector and hybrid search queries. */
export interface VectorQuery {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "vector" | "text" | "imageUrl" | "imageBinary";
  /** Number of nearest neighbors to return as top hits. */
  kNearestNeighborsCount?: number;
  /** Vector Fields of type Collection(Edm.Single) to be included in the vector searched. */
  fields?: string;
  /** When true, triggers an exhaustive k-nearest neighbor search across all vectors within the vector index. Useful for scenarios where exact matches are critical, such as determining ground truth values. */
  exhaustive?: boolean;
  /** Oversampling factor. Minimum value is 1. It overrides the 'defaultOversampling' parameter configured in the index definition. It can be set only when 'rerankWithOriginalVectors' is true. This parameter is only permitted when a compression method is used on the underlying vector field. */
  oversampling?: number;
  /** Relative weight of the vector query when compared to other vector query and/or the text query within the same search request. This value is used when combining the results of multiple ranking lists produced by the different vector queries and/or the results retrieved through the text query. The higher the weight, the higher the documents that matched that query will be in the final ranking. Default is 1.0 and the value needs to be a positive number larger than zero. */
  weight?: number;
  /** The threshold used for vector queries. Note this can only be set if all 'fields' use the same similarity metric. */
  threshold?: VectorThresholdUnion;
  /** The OData filter expression to apply to this specific vector query. If no filter expression is defined at the vector level, the expression defined in the top level filter parameter is used instead. */
  filterOverride?: string;
}

/** The threshold used for vector queries. */
export interface VectorThreshold {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "vectorSimilarity" | "searchScore";
}

/** TThe query parameters to configure hybrid search behaviors. */
export interface HybridSearch {
  /** Determines the maximum number of documents to be retrieved by the text query portion of a hybrid search request. Those documents will be combined with the documents matching the vector queries to produce a single final list of results. Choosing a larger maxTextRecallSize value will allow retrieving and paging through more documents (using the top and skip parameters), at the cost of higher resource utilization and higher latency. The value needs to be between 1 and 10,000. Default is 1000. */
  maxTextRecallSize?: number;
  /** Determines whether the count and facets should includes all documents that matched the search query, or only the documents that are retrieved within the 'maxTextRecallSize' window. */
  countAndFacetMode?: HybridCountAndFacetMode;
}

/** Contains a document found by a search query, plus associated metadata. */
export interface SearchResult {
  /** Describes unknown properties. The value of an unknown property can be of "any" type. */
  [property: string]: any;
  /**
   * The relevance score of the document compared to other documents returned by the query.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly _score: number;
  /**
   * The relevance score computed by the semantic ranker for the top search results. Search results are sorted by the RerankerScore first and then by the Score. RerankerScore is only returned for queries of type 'semantic'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly _rerankerScore?: number;
  /**
   * Text fragments from the document that indicate the matching search terms, organized by each applicable field; null if hit highlighting was not enabled for the query.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly _highlights?: { [propertyName: string]: string[] };
  /**
   * Captions are the most representative passages from the document relatively to the search query. They are often used as document summary. Captions are only returned for queries of type 'semantic'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly _captions?: QueryCaptionResult[];
  /**
   * Contains debugging information that can be used to further explore your search results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly documentDebugInfo?: DocumentDebugInfo;
}

/** Captions are the most representative passages from the document relatively to the search query. They are often used as document summary. Captions are only returned for queries of type `semantic`. */
export interface QueryCaptionResult {
  /** Describes unknown properties. The value of an unknown property can be of "any" type. */
  [property: string]: any;
  /**
   * A representative text passage extracted from the document most relevant to the search query.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly text?: string;
  /**
   * Same text passage as in the Text property with highlighted phrases most relevant to the query.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly highlights?: string;
}

/** Contains debugging information that can be used to further explore your search results. */
export interface DocumentDebugInfo {
  /**
   * Contains debugging information specific to semantic ranking requests.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly semantic?: SemanticDebugInfo;
  /**
   * Contains debugging information specific to vector and hybrid search.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vectors?: VectorsDebugInfo;
}

export interface SemanticDebugInfo {
  /**
   * The title field that was sent to the semantic enrichment process, as well as how it was used
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly titleField?: QueryResultDocumentSemanticField;
  /**
   * The content fields that were sent to the semantic enrichment process, as well as how they were used
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly contentFields?: QueryResultDocumentSemanticField[];
  /**
   * The keyword fields that were sent to the semantic enrichment process, as well as how they were used
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly keywordFields?: QueryResultDocumentSemanticField[];
  /**
   * The raw concatenated strings that were sent to the semantic enrichment process.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly rerankerInput?: QueryResultDocumentRerankerInput;
}

/** Description of fields that were sent to the semantic enrichment process, as well as how they were used */
export interface QueryResultDocumentSemanticField {
  /**
   * The name of the field that was sent to the semantic enrichment process
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The way the field was used for the semantic enrichment process (fully used, partially used, or unused)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: SemanticFieldState;
}

/** The raw concatenated strings that were sent to the semantic enrichment process. */
export interface QueryResultDocumentRerankerInput {
  /**
   * The raw string for the title field that was used for semantic enrichment.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly title?: string;
  /**
   * The raw concatenated strings for the content fields that were used for semantic enrichment.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly content?: string;
  /**
   * The raw concatenated strings for the keyword fields that were used for semantic enrichment.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly keywords?: string;
}

export interface VectorsDebugInfo {
  /**
   * The breakdown of subscores of the document prior to the chosen result set fusion/combination method such as RRF.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly subscores?: QueryResultDocumentSubscores;
}

/** The breakdown of subscores between the text and vector query components of the search query for this document. Each vector query is shown as a separate object in the same order they were received. */
export interface QueryResultDocumentSubscores {
  /**
   * The BM25 or Classic score for the text portion of the query.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly text?: TextResult;
  /**
   * The vector similarity and @search.score values for each vector query.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vectors?: { [propertyName: string]: SingleVectorFieldResult }[];
  /**
   * The BM25 or Classic score for the text portion of the query.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly documentBoost?: number;
}

/** The BM25 or Classic score for the text portion of the query. */
export interface TextResult {
  /**
   * The BM25 or Classic score for the text portion of the query.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly searchScore?: number;
}

/** A single vector field result. Both @search.score and vector similarity values are returned. Vector similarity is related to @search.score by an equation. */
export interface SingleVectorFieldResult {
  /**
   * The @search.score value that is calculated from the vector similarity score. This is the score that's visible in a pure single-field single-vector query.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly searchScore?: number;
  /**
   * The vector similarity score for this document. Note this is the canonical definition of similarity metric, not the 'distance' version. For example, cosine similarity instead of cosine distance.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vectorSimilarity?: number;
}

/** Contains debugging information that can be used to further explore your search results. */
export interface DebugInfo {
  /**
   * Contains debugging information specific to query rewrites.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly queryRewrites?: QueryRewritesDebugInfo;
}

/** Contains debugging information specific to query rewrites. */
export interface QueryRewritesDebugInfo {
  /**
   * List of query rewrites generated for the text query.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly text?: QueryRewritesValuesDebugInfo;
  /**
   * List of query rewrites generated for the vectorizable text queries.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vectors?: QueryRewritesValuesDebugInfo[];
}

/** Contains debugging information specific to query rewrites. */
export interface QueryRewritesValuesDebugInfo {
  /**
   * The input text to the generative query rewriting model. There may be cases where the user query and the input to the generative model are not identical.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly inputQuery?: string;
  /**
   * List of query rewrites.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly rewrites?: string[];
}

/** Response containing suggestion query results from an index. */
export interface SuggestDocumentsResult {
  /**
   * The sequence of results returned by the query.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly results: SuggestResult[];
  /**
   * A value indicating the percentage of the index that was included in the query, or null if minimumCoverage was not set in the request.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly coverage?: number;
}

/** A result containing a document found by a suggestion query, plus associated metadata. */
export interface SuggestResult {
  /** Describes unknown properties. The value of an unknown property can be of "any" type. */
  [property: string]: any;
  /**
   * The text of the suggestion result.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly _text: string;
}

/** Parameters for filtering, sorting, fuzzy matching, and other suggestions query behaviors. */
export interface SuggestRequest {
  /** An OData expression that filters the documents considered for suggestions. */
  filter?: string;
  /** A value indicating whether to use fuzzy matching for the suggestion query. Default is false. When set to true, the query will find suggestions even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy suggestion searches are slower and consume more resources. */
  useFuzzyMatching?: boolean;
  /** A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting of suggestions is disabled. */
  highlightPostTag?: string;
  /** A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting of suggestions is disabled. */
  highlightPreTag?: string;
  /** A number between 0 and 100 indicating the percentage of the index that must be covered by a suggestion query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80. */
  minimumCoverage?: number;
  /** The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses. */
  orderBy?: string;
  /** The search text to use to suggest documents. Must be at least 1 character, and no more than 100 characters. */
  searchText: string;
  /** The comma-separated list of field names to search for the specified search text. Target fields must be included in the specified suggester. */
  searchFields?: string;
  /** The comma-separated list of fields to retrieve. If unspecified, only the key field will be included in the results. */
  select?: string;
  /** The name of the suggester as specified in the suggesters collection that's part of the index definition. */
  suggesterName: string;
  /** The number of suggestions to retrieve. This must be a value between 1 and 100. The default is 5. */
  top?: number;
}

/** Contains a batch of document write actions to send to the index. */
export interface IndexBatch {
  /** The actions in the batch. */
  actions: IndexAction[];
}

/** Represents an index action that operates on a document. */
export interface IndexAction {
  /** Describes unknown properties. The value of an unknown property can be of "any" type. */
  [property: string]: any;
  /** The operation to perform on a document in an indexing batch. */
  __actionType: IndexActionType;
}

/** Response containing the status of operations for all documents in the indexing request. */
export interface IndexDocumentsResult {
  /**
   * The list of status information for each document in the indexing request.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly results: IndexingResult[];
}

/** Status of an indexing operation for a single document. */
export interface IndexingResult {
  /**
   * The key of a document that was in the indexing request.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly key: string;
  /**
   * The error message explaining why the indexing operation failed for the document identified by the key; null if indexing succeeded.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorMessage?: string;
  /**
   * A value indicating whether the indexing operation succeeded for the document identified by the key.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly succeeded: boolean;
  /**
   * The status code of the indexing operation. Possible values include: 200 for a successful update or delete, 201 for successful document creation, 400 for a malformed input document, 404 for document not found, 409 for a version conflict, 422 when the index is temporarily unavailable, or 503 for when the service is too busy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusCode: number;
}

/** The result of Autocomplete query. */
export interface AutocompleteResult {
  /**
   * A value indicating the percentage of the index that was considered by the autocomplete request, or null if minimumCoverage was not specified in the request.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly coverage?: number;
  /**
   * The list of returned Autocompleted items.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly results: AutocompleteItem[];
}

/** The result of Autocomplete requests. */
export interface AutocompleteItem {
  /**
   * The completed term.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly text: string;
  /**
   * The query along with the completed term.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly queryPlusText: string;
}

/** Parameters for fuzzy matching, and other autocomplete query behaviors. */
export interface AutocompleteRequest {
  /** The search text on which to base autocomplete results. */
  searchText: string;
  /** Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms' to get shingles and 'oneTermWithContext' to use the current context while producing auto-completed terms. */
  autocompleteMode?: AutocompleteMode;
  /** An OData expression that filters the documents used to produce completed terms for the Autocomplete result. */
  filter?: string;
  /** A value indicating whether to use fuzzy matching for the autocomplete query. Default is false. When set to true, the query will autocomplete terms even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy autocomplete queries are slower and consume more resources. */
  useFuzzyMatching?: boolean;
  /** A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting is disabled. */
  highlightPostTag?: string;
  /** A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting is disabled. */
  highlightPreTag?: string;
  /** A number between 0 and 100 indicating the percentage of the index that must be covered by an autocomplete query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80. */
  minimumCoverage?: number;
  /** The comma-separated list of field names to consider when querying for auto-completed terms. Target fields must be included in the specified suggester. */
  searchFields?: string;
  /** The name of the suggester as specified in the suggesters collection that's part of the index definition. */
  suggesterName: string;
  /** The number of auto-completed terms to retrieve. This must be a value between 1 and 100. The default is 5. */
  top?: number;
}

/** The query parameters to use for vector search when a raw vector value is provided. */
export interface VectorizedQuery extends VectorQuery {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "vector";
  /** The vector representation of a search query. */
  vector: number[];
}

/** The query parameters to use for vector search when a text value that needs to be vectorized is provided. */
export interface VectorizableTextQuery extends VectorQuery {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "text";
  /** The text to be vectorized to perform a vector search query. */
  text: string;
  /** Can be configured to let a generative model rewrite the query before sending it to be vectorized. */
  queryRewrites?: QueryRewritesType;
}

/** The query parameters to use for vector search when an url that represents an image value that needs to be vectorized is provided. */
export interface VectorizableImageUrlQuery extends VectorQuery {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "imageUrl";
  /** The URL of an image to be vectorized to perform a vector search query. */
  url?: string;
}

/** The query parameters to use for vector search when a base 64 encoded binary of an image that needs to be vectorized is provided. */
export interface VectorizableImageBinaryQuery extends VectorQuery {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "imageBinary";
  /** The base 64 encoded binary of an image to be vectorized to perform a vector search query. */
  base64Image?: string;
}

/** The results of the vector query will be filtered based on the vector similarity metric. Note this is the canonical definition of similarity metric, not the 'distance' version. The threshold direction (larger or smaller) will be chosen automatically according to the metric used by the field. */
export interface VectorSimilarityThreshold extends VectorThreshold {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "vectorSimilarity";
  /** The threshold will filter based on the similarity metric value. Note this is the canonical definition of similarity metric, not the 'distance' version. The threshold direction (larger or smaller) will be chosen automatically according to the metric used by the field. */
  value: number;
}

/** The results of the vector query will filter based on the '@search.score' value. Note this is the @search.score returned as part of the search response. The threshold direction will be chosen for higher @search.score. */
export interface SearchScoreThreshold extends VectorThreshold {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "searchScore";
  /** The threshold will filter based on the '@search.score' value. Note this is the @search.score returned as part of the search response. The threshold direction will be chosen for higher @search.score. */
  value: number;
}

/** Parameter group */
export interface SearchOptions {
  /** A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation. */
  includeTotalResultCount?: boolean;
  /** The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs. */
  facets?: string[];
  /** The OData $filter expression to apply to the search query. */
  filter?: string;
  /** The list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting. */
  highlightFields?: string[];
  /** A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is &lt;/em&gt;. */
  highlightPostTag?: string;
  /** A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is &lt;em&gt;. */
  highlightPreTag?: string;
  /** A number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 100. */
  minimumCoverage?: number;
  /** The list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, and desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no OrderBy is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses. */
  orderBy?: string[];
  /** A value that specifies the syntax of the search query. The default is 'simple'. Use 'full' if your query uses the Lucene query syntax. */
  queryType?: QueryType;
  /** The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values. For example, if the scoring profile defines a function with a parameter called 'mylocation' the parameter string would be "mylocation--122.2,44.8" (without the quotes). */
  scoringParameters?: string[];
  /** The name of a scoring profile to evaluate match scores for matching documents in order to sort the results. */
  scoringProfile?: string;
  /** The list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each fielded search expression take precedence over any field names listed in this parameter. */
  searchFields?: string[];
  /** A value that specifies whether any or all of the search terms must be matched in order to count the document as a match. */
  searchMode?: SearchMode;
  /** A value that specifies whether we want to calculate scoring statistics (such as document frequency) globally for more consistent scoring, or locally, for lower latency. */
  scoringStatistics?: ScoringStatistics;
  /** A value to be used to create a sticky session, which can help to get more consistent results. As long as the same sessionId is used, a best-effort attempt will be made to target the same replica set. Be wary that reusing the same sessionID values repeatedly can interfere with the load balancing of the requests across replicas and adversely affect the performance of the search service. The value used as sessionId cannot start with a '_' character. */
  sessionId?: string;
  /** The list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included. */
  select?: string[];
  /** The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use $skip due to this limitation, consider using $orderby on a totally-ordered key and $filter with a range query instead. */
  skip?: number;
  /** The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation token that can be used to issue another Search request for the next page of results. */
  top?: number;
  /** The name of the semantic configuration that lists which fields should be used for semantic ranking, captions, highlights, and answers */
  semanticConfiguration?: string;
  /** Allows the user to choose whether a semantic call should fail completely, or to return partial results (default). */
  semanticErrorHandling?: SemanticErrorMode;
  /** Allows the user to set an upper bound on the amount of time it takes for semantic enrichment to finish processing before the request fails. */
  semanticMaxWaitInMilliseconds?: number;
  /** This parameter is only valid if the query type is `semantic`. If set, the query returns answers extracted from key passages in the highest ranked documents. The number of answers returned can be configured by appending the pipe character `|` followed by the `count-<number of answers>` option after the answers parameter value, such as `extractive|count-3`. Default count is 1. The confidence threshold can be configured by appending the pipe character `|` followed by the `threshold-<confidence threshold>` option after the answers parameter value, such as `extractive|threshold-0.9`. Default threshold is 0.7. The maximum character length of answers can be configured by appending the pipe character '|' followed by the 'count-<number of maximum character length>', such as 'extractive|maxcharlength-600'. */
  answers?: QueryAnswerType;
  /** This parameter is only valid if the query type is `semantic`. If set, the query returns captions extracted from key passages in the highest ranked documents. When Captions is set to `extractive`, highlighting is enabled by default, and can be configured by appending the pipe character `|` followed by the `highlight-<true/false>` option, such as `extractive|highlight-true`. Defaults to `None`. The maximum character length of captions can be configured by appending the pipe character '|' followed by the 'count-<number of maximum character length>', such as 'extractive|maxcharlength-600'. */
  captions?: QueryCaptionType;
  /** Allows setting a separate search query that will be solely used for semantic reranking, semantic captions and semantic answers. Is useful for scenarios where there is a need to use different queries between the base retrieval and ranking phase, and the L2 semantic phase. */
  semanticQuery?: string;
  /** When QueryRewrites is set to `generative`, the query terms are sent to a generate model which will produce 10 (default) rewrites to help increase the recall of the request. The requested count can be configured by appending the pipe character `|` followed by the `count-<number of rewrites>` option, such as `generative|count-3`. Defaults to `None`. This parameter is only valid if the query type is `semantic`. */
  queryRewrites?: QueryRewritesType;
  /** Enables a debugging tool that can be used to further explore your search results. */
  debug?: QueryDebugMode;
  /** The language of the query. */
  queryLanguage?: QueryLanguage;
  /** Improve search recall by spell-correcting individual search query terms. */
  speller?: QuerySpellerType;
  /** The list of field names used for semantic ranking. */
  semanticFields?: string[];
}

/** Parameter group */
export interface SuggestOptions {
  /** An OData expression that filters the documents considered for suggestions. */
  filter?: string;
  /** A value indicating whether to use fuzzy matching for the suggestions query. Default is false. When set to true, the query will find terms even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy suggestions queries are slower and consume more resources. */
  useFuzzyMatching?: boolean;
  /** A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting of suggestions is disabled. */
  highlightPostTag?: string;
  /** A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting of suggestions is disabled. */
  highlightPreTag?: string;
  /** A number between 0 and 100 indicating the percentage of the index that must be covered by a suggestions query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80. */
  minimumCoverage?: number;
  /** The list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses. */
  orderBy?: string[];
  /** The list of field names to search for the specified search text. Target fields must be included in the specified suggester. */
  searchFields?: string[];
  /** The list of fields to retrieve. If unspecified, only the key field will be included in the results. */
  select?: string[];
  /** The number of suggestions to retrieve. The value must be a number between 1 and 100. The default is 5. */
  top?: number;
}

/** Parameter group */
export interface AutocompleteOptions {
  /** Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms' to get shingles and 'oneTermWithContext' to use the current context while producing auto-completed terms. */
  autocompleteMode?: AutocompleteMode;
  /** An OData expression that filters the documents used to produce completed terms for the Autocomplete result. */
  filter?: string;
  /** A value indicating whether to use fuzzy matching for the autocomplete query. Default is false. When set to true, the query will find terms even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy autocomplete queries are slower and consume more resources. */
  useFuzzyMatching?: boolean;
  /** A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting is disabled. */
  highlightPostTag?: string;
  /** A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting is disabled. */
  highlightPreTag?: string;
  /** A number between 0 and 100 indicating the percentage of the index that must be covered by an autocomplete query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80. */
  minimumCoverage?: number;
  /** The list of field names to consider when querying for auto-completed terms. Target fields must be included in the specified suggester. */
  searchFields?: string[];
  /** The number of auto-completed terms to retrieve. This must be a value between 1 and 100. The default is 5. */
  top?: number;
}

/** Known values of {@link ApiVersion20241101Preview} that the service accepts. */
export enum KnownApiVersion20241101Preview {
  /** Api Version '2024-11-01-preview' */
  TwoThousandTwentyFour1101Preview = "2024-11-01-preview",
}

/**
 * Defines values for ApiVersion20241101Preview. \
 * {@link KnownApiVersion20241101Preview} can be used interchangeably with ApiVersion20241101Preview,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **2024-11-01-preview**: Api Version '2024-11-01-preview'
 */
export type ApiVersion20241101Preview = string;

/** Known values of {@link SemanticErrorMode} that the service accepts. */
export enum KnownSemanticErrorMode {
  /** If the semantic processing fails, partial results still return. The definition of partial results depends on what semantic step failed and what was the reason for failure. */
  Partial = "partial",
  /** If there is an exception during the semantic processing step, the query will fail and return the appropriate HTTP code depending on the error. */
  Fail = "fail",
}

/**
 * Defines values for SemanticErrorMode. \
 * {@link KnownSemanticErrorMode} can be used interchangeably with SemanticErrorMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **partial**: If the semantic processing fails, partial results still return. The definition of partial results depends on what semantic step failed and what was the reason for failure. \
 * **fail**: If there is an exception during the semantic processing step, the query will fail and return the appropriate HTTP code depending on the error.
 */
export type SemanticErrorMode = string;

/** Known values of {@link QueryAnswerType} that the service accepts. */
export enum KnownQueryAnswerType {
  /** Do not return answers for the query. */
  None = "none",
  /** Extracts answer candidates from the contents of the documents returned in response to a query expressed as a question in natural language. */
  Extractive = "extractive",
}

/**
 * Defines values for QueryAnswerType. \
 * {@link KnownQueryAnswerType} can be used interchangeably with QueryAnswerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **none**: Do not return answers for the query. \
 * **extractive**: Extracts answer candidates from the contents of the documents returned in response to a query expressed as a question in natural language.
 */
export type QueryAnswerType = string;

/** Known values of {@link QueryCaptionType} that the service accepts. */
export enum KnownQueryCaptionType {
  /** Do not return captions for the query. */
  None = "none",
  /** Extracts captions from the matching documents that contain passages relevant to the search query. */
  Extractive = "extractive",
}

/**
 * Defines values for QueryCaptionType. \
 * {@link KnownQueryCaptionType} can be used interchangeably with QueryCaptionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **none**: Do not return captions for the query. \
 * **extractive**: Extracts captions from the matching documents that contain passages relevant to the search query.
 */
export type QueryCaptionType = string;

/** Known values of {@link QueryRewritesType} that the service accepts. */
export enum KnownQueryRewritesType {
  /** Do not generate additional query rewrites for this query. */
  None = "none",
  /** Generate alternative query terms to increase the recall of a search request. */
  Generative = "generative",
}

/**
 * Defines values for QueryRewritesType. \
 * {@link KnownQueryRewritesType} can be used interchangeably with QueryRewritesType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **none**: Do not generate additional query rewrites for this query. \
 * **generative**: Generate alternative query terms to increase the recall of a search request.
 */
export type QueryRewritesType = string;

/** Known values of {@link QueryDebugMode} that the service accepts. */
export enum KnownQueryDebugMode {
  /** No query debugging information will be returned. */
  Disabled = "disabled",
  /** Allows the user to further explore their reranked results. */
  Semantic = "semantic",
  /** Allows the user to further explore their hybrid and vector query results. */
  Vector = "vector",
  /** Allows the user to explore the list of query rewrites generated for their search request. */
  QueryRewrites = "queryRewrites",
  /** Turn on all debug options. */
  All = "all",
}

/**
 * Defines values for QueryDebugMode. \
 * {@link KnownQueryDebugMode} can be used interchangeably with QueryDebugMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **disabled**: No query debugging information will be returned. \
 * **semantic**: Allows the user to further explore their reranked results. \
 * **vector**: Allows the user to further explore their hybrid and vector query results. \
 * **queryRewrites**: Allows the user to explore the list of query rewrites generated for their search request. \
 * **all**: Turn on all debug options.
 */
export type QueryDebugMode = string;

/** Known values of {@link QueryLanguage} that the service accepts. */
export enum KnownQueryLanguage {
  /** Query language not specified. */
  None = "none",
  /** Query language value for English (United States). */
  EnUs = "en-us",
  /** Query language value for English (Great Britain). */
  EnGb = "en-gb",
  /** Query language value for English (India). */
  EnIn = "en-in",
  /** Query language value for English (Canada). */
  EnCa = "en-ca",
  /** Query language value for English (Australia). */
  EnAu = "en-au",
  /** Query language value for French (France). */
  FrFr = "fr-fr",
  /** Query language value for French (Canada). */
  FrCa = "fr-ca",
  /** Query language value for German (Germany). */
  DeDe = "de-de",
  /** Query language value for Spanish (Spain). */
  EsEs = "es-es",
  /** Query language value for Spanish (Mexico). */
  EsMx = "es-mx",
  /** Query language value for Chinese (China). */
  ZhCn = "zh-cn",
  /** Query language value for Chinese (Taiwan). */
  ZhTw = "zh-tw",
  /** Query language value for Portuguese (Brazil). */
  PtBr = "pt-br",
  /** Query language value for Portuguese (Portugal). */
  PtPt = "pt-pt",
  /** Query language value for Italian (Italy). */
  ItIt = "it-it",
  /** Query language value for Japanese (Japan). */
  JaJp = "ja-jp",
  /** Query language value for Korean (Korea). */
  KoKr = "ko-kr",
  /** Query language value for Russian (Russia). */
  RuRu = "ru-ru",
  /** Query language value for Czech (Czech Republic). */
  CsCz = "cs-cz",
  /** Query language value for Dutch (Belgium). */
  NlBe = "nl-be",
  /** Query language value for Dutch (Netherlands). */
  NlNl = "nl-nl",
  /** Query language value for Hungarian (Hungary). */
  HuHu = "hu-hu",
  /** Query language value for Polish (Poland). */
  PlPl = "pl-pl",
  /** Query language value for Swedish (Sweden). */
  SvSe = "sv-se",
  /** Query language value for Turkish (Turkey). */
  TrTr = "tr-tr",
  /** Query language value for Hindi (India). */
  HiIn = "hi-in",
  /** Query language value for Arabic (Saudi Arabia). */
  ArSa = "ar-sa",
  /** Query language value for Arabic (Egypt). */
  ArEg = "ar-eg",
  /** Query language value for Arabic (Morocco). */
  ArMa = "ar-ma",
  /** Query language value for Arabic (Kuwait). */
  ArKw = "ar-kw",
  /** Query language value for Arabic (Jordan). */
  ArJo = "ar-jo",
  /** Query language value for Danish (Denmark). */
  DaDk = "da-dk",
  /** Query language value for Norwegian (Norway). */
  NoNo = "no-no",
  /** Query language value for Bulgarian (Bulgaria). */
  BgBg = "bg-bg",
  /** Query language value for Croatian (Croatia). */
  HrHr = "hr-hr",
  /** Query language value for Croatian (Bosnia and Herzegovina). */
  HrBa = "hr-ba",
  /** Query language value for Malay (Malaysia). */
  MsMy = "ms-my",
  /** Query language value for Malay (Brunei Darussalam). */
  MsBn = "ms-bn",
  /** Query language value for Slovenian (Slovenia). */
  SlSl = "sl-sl",
  /** Query language value for Tamil (India). */
  TaIn = "ta-in",
  /** Query language value for Vietnamese (Viet Nam). */
  ViVn = "vi-vn",
  /** Query language value for Greek (Greece). */
  ElGr = "el-gr",
  /** Query language value for Romanian (Romania). */
  RoRo = "ro-ro",
  /** Query language value for Icelandic (Iceland). */
  IsIs = "is-is",
  /** Query language value for Indonesian (Indonesia). */
  IdId = "id-id",
  /** Query language value for Thai (Thailand). */
  ThTh = "th-th",
  /** Query language value for Lithuanian (Lithuania). */
  LtLt = "lt-lt",
  /** Query language value for Ukrainian (Ukraine). */
  UkUa = "uk-ua",
  /** Query language value for Latvian (Latvia). */
  LvLv = "lv-lv",
  /** Query language value for Estonian (Estonia). */
  EtEe = "et-ee",
  /** Query language value for Catalan. */
  CaEs = "ca-es",
  /** Query language value for Finnish (Finland). */
  FiFi = "fi-fi",
  /** Query language value for Serbian (Bosnia and Herzegovina). */
  SrBa = "sr-ba",
  /** Query language value for Serbian (Montenegro). */
  SrMe = "sr-me",
  /** Query language value for Serbian (Serbia). */
  SrRs = "sr-rs",
  /** Query language value for Slovak (Slovakia). */
  SkSk = "sk-sk",
  /** Query language value for Norwegian (Norway). */
  NbNo = "nb-no",
  /** Query language value for Armenian (Armenia). */
  HyAm = "hy-am",
  /** Query language value for Bengali (India). */
  BnIn = "bn-in",
  /** Query language value for Basque. */
  EuEs = "eu-es",
  /** Query language value for Galician. */
  GlEs = "gl-es",
  /** Query language value for Gujarati (India). */
  GuIn = "gu-in",
  /** Query language value for Hebrew (Israel). */
  HeIl = "he-il",
  /** Query language value for Irish (Ireland). */
  GaIe = "ga-ie",
  /** Query language value for Kannada (India). */
  KnIn = "kn-in",
  /** Query language value for Malayalam (India). */
  MlIn = "ml-in",
  /** Query language value for Marathi (India). */
  MrIn = "mr-in",
  /** Query language value for Persian (U.A.E.). */
  FaAe = "fa-ae",
  /** Query language value for Punjabi (India). */
  PaIn = "pa-in",
  /** Query language value for Telugu (India). */
  TeIn = "te-in",
  /** Query language value for Urdu (Pakistan). */
  UrPk = "ur-pk",
}

/**
 * Defines values for QueryLanguage. \
 * {@link KnownQueryLanguage} can be used interchangeably with QueryLanguage,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **none**: Query language not specified. \
 * **en-us**: Query language value for English (United States). \
 * **en-gb**: Query language value for English (Great Britain). \
 * **en-in**: Query language value for English (India). \
 * **en-ca**: Query language value for English (Canada). \
 * **en-au**: Query language value for English (Australia). \
 * **fr-fr**: Query language value for French (France). \
 * **fr-ca**: Query language value for French (Canada). \
 * **de-de**: Query language value for German (Germany). \
 * **es-es**: Query language value for Spanish (Spain). \
 * **es-mx**: Query language value for Spanish (Mexico). \
 * **zh-cn**: Query language value for Chinese (China). \
 * **zh-tw**: Query language value for Chinese (Taiwan). \
 * **pt-br**: Query language value for Portuguese (Brazil). \
 * **pt-pt**: Query language value for Portuguese (Portugal). \
 * **it-it**: Query language value for Italian (Italy). \
 * **ja-jp**: Query language value for Japanese (Japan). \
 * **ko-kr**: Query language value for Korean (Korea). \
 * **ru-ru**: Query language value for Russian (Russia). \
 * **cs-cz**: Query language value for Czech (Czech Republic). \
 * **nl-be**: Query language value for Dutch (Belgium). \
 * **nl-nl**: Query language value for Dutch (Netherlands). \
 * **hu-hu**: Query language value for Hungarian (Hungary). \
 * **pl-pl**: Query language value for Polish (Poland). \
 * **sv-se**: Query language value for Swedish (Sweden). \
 * **tr-tr**: Query language value for Turkish (Turkey). \
 * **hi-in**: Query language value for Hindi (India). \
 * **ar-sa**: Query language value for Arabic (Saudi Arabia). \
 * **ar-eg**: Query language value for Arabic (Egypt). \
 * **ar-ma**: Query language value for Arabic (Morocco). \
 * **ar-kw**: Query language value for Arabic (Kuwait). \
 * **ar-jo**: Query language value for Arabic (Jordan). \
 * **da-dk**: Query language value for Danish (Denmark). \
 * **no-no**: Query language value for Norwegian (Norway). \
 * **bg-bg**: Query language value for Bulgarian (Bulgaria). \
 * **hr-hr**: Query language value for Croatian (Croatia). \
 * **hr-ba**: Query language value for Croatian (Bosnia and Herzegovina). \
 * **ms-my**: Query language value for Malay (Malaysia). \
 * **ms-bn**: Query language value for Malay (Brunei Darussalam). \
 * **sl-sl**: Query language value for Slovenian (Slovenia). \
 * **ta-in**: Query language value for Tamil (India). \
 * **vi-vn**: Query language value for Vietnamese (Viet Nam). \
 * **el-gr**: Query language value for Greek (Greece). \
 * **ro-ro**: Query language value for Romanian (Romania). \
 * **is-is**: Query language value for Icelandic (Iceland). \
 * **id-id**: Query language value for Indonesian (Indonesia). \
 * **th-th**: Query language value for Thai (Thailand). \
 * **lt-lt**: Query language value for Lithuanian (Lithuania). \
 * **uk-ua**: Query language value for Ukrainian (Ukraine). \
 * **lv-lv**: Query language value for Latvian (Latvia). \
 * **et-ee**: Query language value for Estonian (Estonia). \
 * **ca-es**: Query language value for Catalan. \
 * **fi-fi**: Query language value for Finnish (Finland). \
 * **sr-ba**: Query language value for Serbian (Bosnia and Herzegovina). \
 * **sr-me**: Query language value for Serbian (Montenegro). \
 * **sr-rs**: Query language value for Serbian (Serbia). \
 * **sk-sk**: Query language value for Slovak (Slovakia). \
 * **nb-no**: Query language value for Norwegian (Norway). \
 * **hy-am**: Query language value for Armenian (Armenia). \
 * **bn-in**: Query language value for Bengali (India). \
 * **eu-es**: Query language value for Basque. \
 * **gl-es**: Query language value for Galician. \
 * **gu-in**: Query language value for Gujarati (India). \
 * **he-il**: Query language value for Hebrew (Israel). \
 * **ga-ie**: Query language value for Irish (Ireland). \
 * **kn-in**: Query language value for Kannada (India). \
 * **ml-in**: Query language value for Malayalam (India). \
 * **mr-in**: Query language value for Marathi (India). \
 * **fa-ae**: Query language value for Persian (U.A.E.). \
 * **pa-in**: Query language value for Punjabi (India). \
 * **te-in**: Query language value for Telugu (India). \
 * **ur-pk**: Query language value for Urdu (Pakistan).
 */
export type QueryLanguage = string;

/** Known values of {@link QuerySpellerType} that the service accepts. */
export enum KnownQuerySpellerType {
  /** Speller not enabled. */
  None = "none",
  /** Speller corrects individual query terms using a static lexicon for the language specified by the queryLanguage parameter. */
  Lexicon = "lexicon",
}

/**
 * Defines values for QuerySpellerType. \
 * {@link KnownQuerySpellerType} can be used interchangeably with QuerySpellerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **none**: Speller not enabled. \
 * **lexicon**: Speller corrects individual query terms using a static lexicon for the language specified by the queryLanguage parameter.
 */
export type QuerySpellerType = string;

/** Known values of {@link VectorQueryKind} that the service accepts. */
export enum KnownVectorQueryKind {
  /** Vector query where a raw vector value is provided. */
  Vector = "vector",
  /** Vector query where a text value that needs to be vectorized is provided. */
  Text = "text",
  /** Vector query where an url that represents an image value that needs to be vectorized is provided. */
  ImageUrl = "imageUrl",
  /** Vector query where a base 64 encoded binary of an image that needs to be vectorized is provided. */
  ImageBinary = "imageBinary",
}

/**
 * Defines values for VectorQueryKind. \
 * {@link KnownVectorQueryKind} can be used interchangeably with VectorQueryKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **vector**: Vector query where a raw vector value is provided. \
 * **text**: Vector query where a text value that needs to be vectorized is provided. \
 * **imageUrl**: Vector query where an url that represents an image value that needs to be vectorized is provided. \
 * **imageBinary**: Vector query where a base 64 encoded binary of an image that needs to be vectorized is provided.
 */
export type VectorQueryKind = string;

/** Known values of {@link VectorThresholdKind} that the service accepts. */
export enum KnownVectorThresholdKind {
  /** The results of the vector query will be filtered based on the vector similarity metric. Note this is the canonical definition of similarity metric, not the 'distance' version. The threshold direction (larger or smaller) will be chosen automatically according to the metric used by the field. */
  VectorSimilarity = "vectorSimilarity",
  /** The results of the vector query will filter based on the '@search.score' value. Note this is the @search.score returned as part of the search response. The threshold direction will be chosen for higher @search.score. */
  SearchScore = "searchScore",
}

/**
 * Defines values for VectorThresholdKind. \
 * {@link KnownVectorThresholdKind} can be used interchangeably with VectorThresholdKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **vectorSimilarity**: The results of the vector query will be filtered based on the vector similarity metric. Note this is the canonical definition of similarity metric, not the 'distance' version. The threshold direction (larger or smaller) will be chosen automatically according to the metric used by the field. \
 * **searchScore**: The results of the vector query will filter based on the '@search.score' value. Note this is the @search.score returned as part of the search response. The threshold direction will be chosen for higher @search.score.
 */
export type VectorThresholdKind = string;

/** Known values of {@link VectorFilterMode} that the service accepts. */
export enum KnownVectorFilterMode {
  /** The filter will be applied after the candidate set of vector results is returned. Depending on the filter selectivity, this can result in fewer results than requested by the parameter 'k'. */
  PostFilter = "postFilter",
  /** The filter will be applied before the search query. */
  PreFilter = "preFilter",
}

/**
 * Defines values for VectorFilterMode. \
 * {@link KnownVectorFilterMode} can be used interchangeably with VectorFilterMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **postFilter**: The filter will be applied after the candidate set of vector results is returned. Depending on the filter selectivity, this can result in fewer results than requested by the parameter 'k'. \
 * **preFilter**: The filter will be applied before the search query.
 */
export type VectorFilterMode = string;

/** Known values of {@link HybridCountAndFacetMode} that the service accepts. */
export enum KnownHybridCountAndFacetMode {
  /** Only include documents that were matched within the 'maxTextRecallSize' retrieval window when computing 'count' and 'facets'. */
  CountRetrievableResults = "countRetrievableResults",
  /** Include all documents that were matched by the search query when computing 'count' and 'facets', regardless of whether or not those documents are within the 'maxTextRecallSize' retrieval window. */
  CountAllResults = "countAllResults",
}

/**
 * Defines values for HybridCountAndFacetMode. \
 * {@link KnownHybridCountAndFacetMode} can be used interchangeably with HybridCountAndFacetMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **countRetrievableResults**: Only include documents that were matched within the 'maxTextRecallSize' retrieval window when computing 'count' and 'facets'. \
 * **countAllResults**: Include all documents that were matched by the search query when computing 'count' and 'facets', regardless of whether or not those documents are within the 'maxTextRecallSize' retrieval window.
 */
export type HybridCountAndFacetMode = string;

/** Known values of {@link SemanticFieldState} that the service accepts. */
export enum KnownSemanticFieldState {
  /** The field was fully used for semantic enrichment. */
  Used = "used",
  /** The field was not used for semantic enrichment. */
  Unused = "unused",
  /** The field was partially used for semantic enrichment. */
  Partial = "partial",
}

/**
 * Defines values for SemanticFieldState. \
 * {@link KnownSemanticFieldState} can be used interchangeably with SemanticFieldState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **used**: The field was fully used for semantic enrichment. \
 * **unused**: The field was not used for semantic enrichment. \
 * **partial**: The field was partially used for semantic enrichment.
 */
export type SemanticFieldState = string;

/** Known values of {@link SemanticErrorReason} that the service accepts. */
export enum KnownSemanticErrorReason {
  /** If `semanticMaxWaitInMilliseconds` was set and the semantic processing duration exceeded that value. Only the base results were returned. */
  MaxWaitExceeded = "maxWaitExceeded",
  /** The request was throttled. Only the base results were returned. */
  CapacityOverloaded = "capacityOverloaded",
  /** At least one step of the semantic process failed. */
  Transient = "transient",
}

/**
 * Defines values for SemanticErrorReason. \
 * {@link KnownSemanticErrorReason} can be used interchangeably with SemanticErrorReason,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **maxWaitExceeded**: If `semanticMaxWaitInMilliseconds` was set and the semantic processing duration exceeded that value. Only the base results were returned. \
 * **capacityOverloaded**: The request was throttled. Only the base results were returned. \
 * **transient**: At least one step of the semantic process failed.
 */
export type SemanticErrorReason = string;

/** Known values of {@link SemanticSearchResultsType} that the service accepts. */
export enum KnownSemanticSearchResultsType {
  /** Results without any semantic enrichment or reranking. */
  BaseResults = "baseResults",
  /** Results have been reranked with the reranker model and will include semantic captions. They will not include any answers, answers highlights or caption highlights. */
  RerankedResults = "rerankedResults",
}

/**
 * Defines values for SemanticSearchResultsType. \
 * {@link KnownSemanticSearchResultsType} can be used interchangeably with SemanticSearchResultsType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **baseResults**: Results without any semantic enrichment or reranking. \
 * **rerankedResults**: Results have been reranked with the reranker model and will include semantic captions. They will not include any answers, answers highlights or caption highlights.
 */
export type SemanticSearchResultsType = string;

/** Known values of {@link SemanticQueryRewritesResultType} that the service accepts. */
export enum KnownSemanticQueryRewritesResultType {
  /** Query rewrites were not successfully generated for this request. Only the original query was used to retrieve the results. */
  OriginalQueryOnly = "originalQueryOnly",
}

/**
 * Defines values for SemanticQueryRewritesResultType. \
 * {@link KnownSemanticQueryRewritesResultType} can be used interchangeably with SemanticQueryRewritesResultType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **originalQueryOnly**: Query rewrites were not successfully generated for this request. Only the original query was used to retrieve the results.
 */
export type SemanticQueryRewritesResultType = string;
/** Defines values for QueryType. */
export type QueryType = "simple" | "full" | "semantic";
/** Defines values for SearchMode. */
export type SearchMode = "any" | "all";
/** Defines values for ScoringStatistics. */
export type ScoringStatistics = "local" | "global";
/** Defines values for IndexActionType. */
export type IndexActionType = "upload" | "merge" | "mergeOrUpload" | "delete";
/** Defines values for AutocompleteMode. */
export type AutocompleteMode = "oneTerm" | "twoTerms" | "oneTermWithContext";

/** Optional parameters. */
export interface DocumentsCountOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the count operation. */
export type DocumentsCountResponse = {
  /** The parsed response body. */
  body: number;
};

/** Optional parameters. */
export interface DocumentsSearchGetOptionalParams
  extends coreClient.OperationOptions {
  /** Parameter group */
  searchOptions?: SearchOptions;
  /** A full-text search query expression; Use "*" or omit this parameter to match all documents. */
  searchText?: string;
}

/** Contains response data for the searchGet operation. */
export type DocumentsSearchGetResponse = SearchDocumentsResult;

/** Optional parameters. */
export interface DocumentsSearchPostOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the searchPost operation. */
export type DocumentsSearchPostResponse = SearchDocumentsResult;

/** Optional parameters. */
export interface DocumentsGetOptionalParams
  extends coreClient.OperationOptions {
  /** List of field names to retrieve for the document; Any field not retrieved will be missing from the returned document. */
  selectedFields?: string[];
}

/** Contains response data for the get operation. */
export type DocumentsGetResponse = { [propertyName: string]: any };

/** Optional parameters. */
export interface DocumentsSuggestGetOptionalParams
  extends coreClient.OperationOptions {
  /** Parameter group */
  suggestOptions?: SuggestOptions;
}

/** Contains response data for the suggestGet operation. */
export type DocumentsSuggestGetResponse = SuggestDocumentsResult;

/** Optional parameters. */
export interface DocumentsSuggestPostOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the suggestPost operation. */
export type DocumentsSuggestPostResponse = SuggestDocumentsResult;

/** Optional parameters. */
export interface DocumentsIndexOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the index operation. */
export type DocumentsIndexResponse = IndexDocumentsResult;

/** Optional parameters. */
export interface DocumentsAutocompleteGetOptionalParams
  extends coreClient.OperationOptions {
  /** Parameter group */
  autocompleteOptions?: AutocompleteOptions;
}

/** Contains response data for the autocompleteGet operation. */
export type DocumentsAutocompleteGetResponse = AutocompleteResult;

/** Optional parameters. */
export interface DocumentsAutocompletePostOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the autocompletePost operation. */
export type DocumentsAutocompletePostResponse = AutocompleteResult;

/** Optional parameters. */
export interface SearchClientOptionalParams
  extends coreHttpCompat.ExtendedServiceClientOptions {
  /** Overrides client endpoint. */
  endpoint?: string;
}
