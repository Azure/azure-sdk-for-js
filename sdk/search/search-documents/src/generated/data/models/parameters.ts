/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    required: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};
export const autocompleteMode: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "autocompleteOptions",
    "autocompleteMode"
  ],
  mapper: {
    serializedName: "autocompleteMode",
    type: {
      name: "Enum",
      allowedValues: [
        "oneTerm",
        "twoTerms",
        "oneTermWithContext"
      ]
    }
  }
};
export const endpoint: coreHttp.OperationURLParameter = {
  parameterPath: "endpoint",
  mapper: {
    required: true,
    serializedName: "endpoint",
    defaultValue: '',
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
export const facets: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "searchOptions",
    "facets"
  ],
  mapper: {
    serializedName: "facet",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: coreHttp.QueryCollectionFormat.Multi
};
export const filter0: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "searchOptions",
    "filter"
  ],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};
export const filter1: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "suggestOptions",
    "filter"
  ],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};
export const filter2: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "autocompleteOptions",
    "filter"
  ],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};
export const highlightFields: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "searchOptions",
    "highlightFields"
  ],
  mapper: {
    serializedName: "highlight",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: coreHttp.QueryCollectionFormat.Csv
};
export const highlightPostTag0: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "searchOptions",
    "highlightPostTag"
  ],
  mapper: {
    serializedName: "highlightPostTag",
    type: {
      name: "String"
    }
  }
};
export const highlightPostTag1: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "suggestOptions",
    "highlightPostTag"
  ],
  mapper: {
    serializedName: "highlightPostTag",
    type: {
      name: "String"
    }
  }
};
export const highlightPostTag2: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "autocompleteOptions",
    "highlightPostTag"
  ],
  mapper: {
    serializedName: "highlightPostTag",
    type: {
      name: "String"
    }
  }
};
export const highlightPreTag0: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "searchOptions",
    "highlightPreTag"
  ],
  mapper: {
    serializedName: "highlightPreTag",
    type: {
      name: "String"
    }
  }
};
export const highlightPreTag1: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "suggestOptions",
    "highlightPreTag"
  ],
  mapper: {
    serializedName: "highlightPreTag",
    type: {
      name: "String"
    }
  }
};
export const highlightPreTag2: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "autocompleteOptions",
    "highlightPreTag"
  ],
  mapper: {
    serializedName: "highlightPreTag",
    type: {
      name: "String"
    }
  }
};
export const includeTotalResultCount: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "searchOptions",
    "includeTotalResultCount"
  ],
  mapper: {
    serializedName: "$count",
    type: {
      name: "Boolean"
    }
  }
};
export const indexName: coreHttp.OperationURLParameter = {
  parameterPath: "indexName",
  mapper: {
    required: true,
    serializedName: "indexName",
    defaultValue: '',
    type: {
      name: "String"
    }
  }
};
export const key: coreHttp.OperationURLParameter = {
  parameterPath: "key",
  mapper: {
    required: true,
    serializedName: "key",
    type: {
      name: "String"
    }
  }
};
export const minimumCoverage0: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "searchOptions",
    "minimumCoverage"
  ],
  mapper: {
    serializedName: "minimumCoverage",
    type: {
      name: "Number"
    }
  }
};
export const minimumCoverage1: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "suggestOptions",
    "minimumCoverage"
  ],
  mapper: {
    serializedName: "minimumCoverage",
    type: {
      name: "Number"
    }
  }
};
export const minimumCoverage2: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "autocompleteOptions",
    "minimumCoverage"
  ],
  mapper: {
    serializedName: "minimumCoverage",
    type: {
      name: "Number"
    }
  }
};
export const orderBy0: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "searchOptions",
    "orderBy"
  ],
  mapper: {
    serializedName: "$orderby",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: coreHttp.QueryCollectionFormat.Csv
};
export const orderBy1: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "suggestOptions",
    "orderBy"
  ],
  mapper: {
    serializedName: "$orderby",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: coreHttp.QueryCollectionFormat.Csv
};
export const queryType: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "searchOptions",
    "queryType"
  ],
  mapper: {
    serializedName: "queryType",
    type: {
      name: "Enum",
      allowedValues: [
        "simple",
        "full"
      ]
    }
  }
};
export const scoringParameters: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "searchOptions",
    "scoringParameters"
  ],
  mapper: {
    serializedName: "scoringParameter",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: coreHttp.QueryCollectionFormat.Multi
};
export const scoringProfile: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "searchOptions",
    "scoringProfile"
  ],
  mapper: {
    serializedName: "scoringProfile",
    type: {
      name: "String"
    }
  }
};
export const scoringStatistics: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "searchOptions",
    "scoringStatistics"
  ],
  mapper: {
    serializedName: "scoringStatistics",
    type: {
      name: "Enum",
      allowedValues: [
        "local",
        "global"
      ]
    }
  }
};
export const searchFields0: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "searchOptions",
    "searchFields"
  ],
  mapper: {
    serializedName: "searchFields",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: coreHttp.QueryCollectionFormat.Csv
};
export const searchFields1: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "suggestOptions",
    "searchFields"
  ],
  mapper: {
    serializedName: "searchFields",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: coreHttp.QueryCollectionFormat.Csv
};
export const searchFields2: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "autocompleteOptions",
    "searchFields"
  ],
  mapper: {
    serializedName: "searchFields",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: coreHttp.QueryCollectionFormat.Csv
};
export const searchMode: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "searchOptions",
    "searchMode"
  ],
  mapper: {
    serializedName: "searchMode",
    type: {
      name: "Enum",
      allowedValues: [
        "any",
        "all"
      ]
    }
  }
};
export const searchText0: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "searchText"
  ],
  mapper: {
    serializedName: "search",
    type: {
      name: "String"
    }
  }
};
export const searchText1: coreHttp.OperationQueryParameter = {
  parameterPath: "searchText",
  mapper: {
    required: true,
    serializedName: "search",
    type: {
      name: "String"
    }
  }
};
export const select0: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "searchOptions",
    "select"
  ],
  mapper: {
    serializedName: "$select",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: coreHttp.QueryCollectionFormat.Csv
};
export const select1: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "suggestOptions",
    "select"
  ],
  mapper: {
    serializedName: "$select",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: coreHttp.QueryCollectionFormat.Csv
};
export const selectedFields: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "selectedFields"
  ],
  mapper: {
    serializedName: "$select",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: coreHttp.QueryCollectionFormat.Csv
};
export const sessionId: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "searchOptions",
    "sessionId"
  ],
  mapper: {
    serializedName: "sessionId",
    type: {
      name: "String"
    }
  }
};
export const skip: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "searchOptions",
    "skip"
  ],
  mapper: {
    serializedName: "$skip",
    type: {
      name: "Number"
    }
  }
};
export const suggesterName: coreHttp.OperationQueryParameter = {
  parameterPath: "suggesterName",
  mapper: {
    required: true,
    serializedName: "suggesterName",
    type: {
      name: "String"
    }
  }
};
export const top0: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "searchOptions",
    "top"
  ],
  mapper: {
    serializedName: "$top",
    type: {
      name: "Number"
    }
  }
};
export const top1: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "suggestOptions",
    "top"
  ],
  mapper: {
    serializedName: "$top",
    type: {
      name: "Number"
    }
  }
};
export const top2: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "autocompleteOptions",
    "top"
  ],
  mapper: {
    serializedName: "$top",
    type: {
      name: "Number"
    }
  }
};
export const useFuzzyMatching0: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "suggestOptions",
    "useFuzzyMatching"
  ],
  mapper: {
    serializedName: "fuzzy",
    type: {
      name: "Boolean"
    }
  }
};
export const useFuzzyMatching1: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "autocompleteOptions",
    "useFuzzyMatching"
  ],
  mapper: {
    serializedName: "fuzzy",
    type: {
      name: "Boolean"
    }
  }
};
