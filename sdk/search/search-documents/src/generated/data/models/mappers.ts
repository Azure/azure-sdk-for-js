/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const SearchDocumentsResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SearchDocumentsResult",
    modelProperties: {
      count: {
        serializedName: "@odata\\.count",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      coverage: {
        serializedName: "@search\\.coverage",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      facets: {
        serializedName: "@search\\.facets",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Sequence",
              element: {
                type: { name: "Composite", className: "FacetResult" },
              },
            },
          },
        },
      },
      answers: {
        serializedName: "@search\\.answers",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QueryAnswerResult",
            },
          },
        },
      },
      nextPageParameters: {
        serializedName: "@search\\.nextPageParameters",
        type: {
          name: "Composite",
          className: "SearchRequest",
        },
      },
      results: {
        serializedName: "value",
        required: true,
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SearchResult",
            },
          },
        },
      },
      nextLink: {
        serializedName: "@odata\\.nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      semanticPartialResponseReason: {
        serializedName: "@search\\.semanticPartialResponseReason",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      semanticPartialResponseType: {
        serializedName: "@search\\.semanticPartialResponseType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const FacetResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FacetResult",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      count: {
        serializedName: "count",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const QueryAnswerResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueryAnswerResult",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      score: {
        serializedName: "score",
        required: true,
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      key: {
        serializedName: "key",
        required: true,
        readOnly: true,
        type: {
          name: "String",
        },
      },
      text: {
        serializedName: "text",
        required: true,
        readOnly: true,
        type: {
          name: "String",
        },
      },
      highlights: {
        serializedName: "highlights",
        readOnly: true,
        nullable: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SearchRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SearchRequest",
    modelProperties: {
      includeTotalResultCount: {
        serializedName: "count",
        type: {
          name: "Boolean",
        },
      },
      facets: {
        serializedName: "facets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      filter: {
        serializedName: "filter",
        type: {
          name: "String",
        },
      },
      highlightFields: {
        serializedName: "highlight",
        type: {
          name: "String",
        },
      },
      highlightPostTag: {
        serializedName: "highlightPostTag",
        type: {
          name: "String",
        },
      },
      highlightPreTag: {
        serializedName: "highlightPreTag",
        type: {
          name: "String",
        },
      },
      minimumCoverage: {
        serializedName: "minimumCoverage",
        type: {
          name: "Number",
        },
      },
      orderBy: {
        serializedName: "orderby",
        type: {
          name: "String",
        },
      },
      queryType: {
        serializedName: "queryType",
        type: {
          name: "Enum",
          allowedValues: ["simple", "full", "semantic"],
        },
      },
      scoringStatistics: {
        serializedName: "scoringStatistics",
        type: {
          name: "Enum",
          allowedValues: ["local", "global"],
        },
      },
      sessionId: {
        serializedName: "sessionId",
        type: {
          name: "String",
        },
      },
      scoringParameters: {
        serializedName: "scoringParameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      scoringProfile: {
        serializedName: "scoringProfile",
        type: {
          name: "String",
        },
      },
      debug: {
        serializedName: "debug",
        type: {
          name: "String",
        },
      },
      searchText: {
        serializedName: "search",
        type: {
          name: "String",
        },
      },
      searchFields: {
        serializedName: "searchFields",
        type: {
          name: "String",
        },
      },
      searchMode: {
        serializedName: "searchMode",
        type: {
          name: "Enum",
          allowedValues: ["any", "all"],
        },
      },
      queryLanguage: {
        serializedName: "queryLanguage",
        type: {
          name: "String",
        },
      },
      speller: {
        serializedName: "speller",
        type: {
          name: "String",
        },
      },
      select: {
        serializedName: "select",
        type: {
          name: "String",
        },
      },
      skip: {
        serializedName: "skip",
        type: {
          name: "Number",
        },
      },
      top: {
        serializedName: "top",
        type: {
          name: "Number",
        },
      },
      semanticConfigurationName: {
        serializedName: "semanticConfiguration",
        type: {
          name: "String",
        },
      },
      semanticErrorHandling: {
        serializedName: "semanticErrorHandling",
        type: {
          name: "String",
        },
      },
      semanticMaxWaitInMilliseconds: {
        constraints: {
          InclusiveMinimum: 700,
        },
        serializedName: "semanticMaxWaitInMilliseconds",
        nullable: true,
        type: {
          name: "Number",
        },
      },
      semanticQuery: {
        serializedName: "semanticQuery",
        type: {
          name: "String",
        },
      },
      answers: {
        serializedName: "answers",
        type: {
          name: "String",
        },
      },
      captions: {
        serializedName: "captions",
        type: {
          name: "String",
        },
      },
      semanticFields: {
        serializedName: "semanticFields",
        type: {
          name: "String",
        },
      },
      vectorQueries: {
        serializedName: "vectorQueries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VectorQuery",
            },
          },
        },
      },
      vectorFilterMode: {
        serializedName: "vectorFilterMode",
        type: {
          name: "String",
        },
      },
      hybridSearch: {
        serializedName: "hybridSearch",
        type: {
          name: "Composite",
          className: "HybridSearch",
        },
      },
    },
  },
};

export const VectorQuery: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VectorQuery",
    uberParent: "VectorQuery",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind",
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String",
        },
      },
      kNearestNeighborsCount: {
        serializedName: "k",
        type: {
          name: "Number",
        },
      },
      fields: {
        serializedName: "fields",
        type: {
          name: "String",
        },
      },
      exhaustive: {
        serializedName: "exhaustive",
        type: {
          name: "Boolean",
        },
      },
      oversampling: {
        serializedName: "oversampling",
        type: {
          name: "Number",
        },
      },
      weight: {
        serializedName: "weight",
        type: {
          name: "Number",
        },
      },
      threshold: {
        serializedName: "threshold",
        type: {
          name: "Composite",
          className: "VectorThreshold",
        },
      },
      filterOverride: {
        serializedName: "filterOverride",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const VectorThreshold: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VectorThreshold",
    uberParent: "VectorThreshold",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind",
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const HybridSearch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HybridSearch",
    modelProperties: {
      maxTextRecallSize: {
        serializedName: "maxTextRecallSize",
        type: {
          name: "Number",
        },
      },
      countAndFacetMode: {
        serializedName: "countAndFacetMode",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SearchResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SearchResult",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      _score: {
        serializedName: "@search\\.score",
        required: true,
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      _rerankerScore: {
        serializedName: "@search\\.rerankerScore",
        readOnly: true,
        nullable: true,
        type: {
          name: "Number",
        },
      },
      _highlights: {
        serializedName: "@search\\.highlights",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Sequence", element: { type: { name: "String" } } },
          },
        },
      },
      _captions: {
        serializedName: "@search\\.captions",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QueryCaptionResult",
            },
          },
        },
      },
      documentDebugInfo: {
        serializedName: "@search\\.documentDebugInfo",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentDebugInfo",
            },
          },
        },
      },
    },
  },
};

export const QueryCaptionResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueryCaptionResult",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      text: {
        serializedName: "text",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      highlights: {
        serializedName: "highlights",
        readOnly: true,
        nullable: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DocumentDebugInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentDebugInfo",
    modelProperties: {
      semantic: {
        serializedName: "semantic",
        type: {
          name: "Composite",
          className: "SemanticDebugInfo",
        },
      },
      vectors: {
        serializedName: "vectors",
        type: {
          name: "Composite",
          className: "VectorsDebugInfo",
        },
      },
    },
  },
};

export const SemanticDebugInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SemanticDebugInfo",
    modelProperties: {
      titleField: {
        serializedName: "titleField",
        type: {
          name: "Composite",
          className: "QueryResultDocumentSemanticField",
        },
      },
      contentFields: {
        serializedName: "contentFields",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QueryResultDocumentSemanticField",
            },
          },
        },
      },
      keywordFields: {
        serializedName: "keywordFields",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QueryResultDocumentSemanticField",
            },
          },
        },
      },
      rerankerInput: {
        serializedName: "rerankerInput",
        type: {
          name: "Composite",
          className: "QueryResultDocumentRerankerInput",
        },
      },
    },
  },
};

export const QueryResultDocumentSemanticField: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueryResultDocumentSemanticField",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const QueryResultDocumentRerankerInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueryResultDocumentRerankerInput",
    modelProperties: {
      title: {
        serializedName: "title",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      content: {
        serializedName: "content",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      keywords: {
        serializedName: "keywords",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const VectorsDebugInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VectorsDebugInfo",
    modelProperties: {
      subscores: {
        serializedName: "subscores",
        type: {
          name: "Composite",
          className: "QueryResultDocumentSubscores",
        },
      },
    },
  },
};

export const QueryResultDocumentSubscores: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueryResultDocumentSubscores",
    modelProperties: {
      text: {
        serializedName: "text",
        type: {
          name: "Composite",
          className: "TextResult",
        },
      },
      vectors: {
        serializedName: "vectors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Dictionary",
              value: {
                type: {
                  name: "Composite",
                  className: "SingleVectorFieldResult",
                },
              },
            },
          },
        },
      },
      documentBoost: {
        serializedName: "documentBoost",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const TextResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TextResult",
    modelProperties: {
      searchScore: {
        serializedName: "searchScore",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const SingleVectorFieldResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SingleVectorFieldResult",
    modelProperties: {
      searchScore: {
        serializedName: "searchScore",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      vectorSimilarity: {
        serializedName: "vectorSimilarity",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const SuggestDocumentsResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SuggestDocumentsResult",
    modelProperties: {
      results: {
        serializedName: "value",
        required: true,
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SuggestResult",
            },
          },
        },
      },
      coverage: {
        serializedName: "@search\\.coverage",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const SuggestResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SuggestResult",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      _text: {
        serializedName: "@search\\.text",
        required: true,
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SuggestRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SuggestRequest",
    modelProperties: {
      filter: {
        serializedName: "filter",
        type: {
          name: "String",
        },
      },
      useFuzzyMatching: {
        serializedName: "fuzzy",
        type: {
          name: "Boolean",
        },
      },
      highlightPostTag: {
        serializedName: "highlightPostTag",
        type: {
          name: "String",
        },
      },
      highlightPreTag: {
        serializedName: "highlightPreTag",
        type: {
          name: "String",
        },
      },
      minimumCoverage: {
        serializedName: "minimumCoverage",
        type: {
          name: "Number",
        },
      },
      orderBy: {
        serializedName: "orderby",
        type: {
          name: "String",
        },
      },
      searchText: {
        serializedName: "search",
        required: true,
        type: {
          name: "String",
        },
      },
      searchFields: {
        serializedName: "searchFields",
        type: {
          name: "String",
        },
      },
      select: {
        serializedName: "select",
        type: {
          name: "String",
        },
      },
      suggesterName: {
        serializedName: "suggesterName",
        required: true,
        type: {
          name: "String",
        },
      },
      top: {
        serializedName: "top",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const IndexBatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IndexBatch",
    modelProperties: {
      actions: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IndexAction",
            },
          },
        },
      },
    },
  },
};

export const IndexAction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IndexAction",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      __actionType: {
        serializedName: "@search\\.action",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["upload", "merge", "mergeOrUpload", "delete"],
        },
      },
    },
  },
};

export const IndexDocumentsResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IndexDocumentsResult",
    modelProperties: {
      results: {
        serializedName: "value",
        required: true,
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IndexingResult",
            },
          },
        },
      },
    },
  },
};

export const IndexingResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IndexingResult",
    modelProperties: {
      key: {
        serializedName: "key",
        required: true,
        readOnly: true,
        type: {
          name: "String",
        },
      },
      errorMessage: {
        serializedName: "errorMessage",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      succeeded: {
        serializedName: "status",
        required: true,
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      statusCode: {
        serializedName: "statusCode",
        required: true,
        readOnly: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const AutocompleteResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutocompleteResult",
    modelProperties: {
      coverage: {
        serializedName: "@search\\.coverage",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      results: {
        serializedName: "value",
        required: true,
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AutocompleteItem",
            },
          },
        },
      },
    },
  },
};

export const AutocompleteItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutocompleteItem",
    modelProperties: {
      text: {
        serializedName: "text",
        required: true,
        readOnly: true,
        type: {
          name: "String",
        },
      },
      queryPlusText: {
        serializedName: "queryPlusText",
        required: true,
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AutocompleteRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutocompleteRequest",
    modelProperties: {
      searchText: {
        serializedName: "search",
        required: true,
        type: {
          name: "String",
        },
      },
      autocompleteMode: {
        serializedName: "autocompleteMode",
        type: {
          name: "Enum",
          allowedValues: ["oneTerm", "twoTerms", "oneTermWithContext"],
        },
      },
      filter: {
        serializedName: "filter",
        type: {
          name: "String",
        },
      },
      useFuzzyMatching: {
        serializedName: "fuzzy",
        type: {
          name: "Boolean",
        },
      },
      highlightPostTag: {
        serializedName: "highlightPostTag",
        type: {
          name: "String",
        },
      },
      highlightPreTag: {
        serializedName: "highlightPreTag",
        type: {
          name: "String",
        },
      },
      minimumCoverage: {
        serializedName: "minimumCoverage",
        type: {
          name: "Number",
        },
      },
      searchFields: {
        serializedName: "searchFields",
        type: {
          name: "String",
        },
      },
      suggesterName: {
        serializedName: "suggesterName",
        required: true,
        type: {
          name: "String",
        },
      },
      top: {
        serializedName: "top",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const VectorizedQuery: coreClient.CompositeMapper = {
  serializedName: "vector",
  type: {
    name: "Composite",
    className: "VectorizedQuery",
    uberParent: "VectorQuery",
    polymorphicDiscriminator: VectorQuery.type.polymorphicDiscriminator,
    modelProperties: {
      ...VectorQuery.type.modelProperties,
      vector: {
        serializedName: "vector",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number",
            },
          },
        },
      },
    },
  },
};

export const VectorizableTextQuery: coreClient.CompositeMapper = {
  serializedName: "text",
  type: {
    name: "Composite",
    className: "VectorizableTextQuery",
    uberParent: "VectorQuery",
    polymorphicDiscriminator: VectorQuery.type.polymorphicDiscriminator,
    modelProperties: {
      ...VectorQuery.type.modelProperties,
      text: {
        serializedName: "text",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const VectorizableImageUrlQuery: coreClient.CompositeMapper = {
  serializedName: "imageUrl",
  type: {
    name: "Composite",
    className: "VectorizableImageUrlQuery",
    uberParent: "VectorQuery",
    polymorphicDiscriminator: VectorQuery.type.polymorphicDiscriminator,
    modelProperties: {
      ...VectorQuery.type.modelProperties,
      url: {
        serializedName: "url",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const VectorizableImageBinaryQuery: coreClient.CompositeMapper = {
  serializedName: "imageBinary",
  type: {
    name: "Composite",
    className: "VectorizableImageBinaryQuery",
    uberParent: "VectorQuery",
    polymorphicDiscriminator: VectorQuery.type.polymorphicDiscriminator,
    modelProperties: {
      ...VectorQuery.type.modelProperties,
      base64Image: {
        serializedName: "base64Image",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const VectorSimilarityThreshold: coreClient.CompositeMapper = {
  serializedName: "vectorSimilarity",
  type: {
    name: "Composite",
    className: "VectorSimilarityThreshold",
    uberParent: "VectorThreshold",
    polymorphicDiscriminator: VectorThreshold.type.polymorphicDiscriminator,
    modelProperties: {
      ...VectorThreshold.type.modelProperties,
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const SearchScoreThreshold: coreClient.CompositeMapper = {
  serializedName: "searchScore",
  type: {
    name: "Composite",
    className: "SearchScoreThreshold",
    uberParent: "VectorThreshold",
    polymorphicDiscriminator: VectorThreshold.type.polymorphicDiscriminator,
    modelProperties: {
      ...VectorThreshold.type.modelProperties,
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export let discriminators = {
  VectorQuery: VectorQuery,
  VectorThreshold: VectorThreshold,
  "VectorQuery.vector": VectorizedQuery,
  "VectorQuery.text": VectorizableTextQuery,
  "VectorQuery.imageUrl": VectorizableImageUrlQuery,
  "VectorQuery.imageBinary": VectorizableImageBinaryQuery,
  "VectorThreshold.vectorSimilarity": VectorSimilarityThreshold,
  "VectorThreshold.searchScore": SearchScoreThreshold,
};
