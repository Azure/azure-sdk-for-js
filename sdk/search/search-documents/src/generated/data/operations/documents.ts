/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/documentsMappers";
import * as Parameters from "../models/parameters";
import { SearchClientContext } from "../searchClientContext";

/** Class representing a Documents. */
export class Documents {
  private readonly client: SearchClientContext;

  /**
   * Create a Documents.
   * @param {SearchClientContext} client Reference to the service client.
   */
  constructor(client: SearchClientContext) {
    this.client = client;
  }

  /**
   * Queries the number of documents in the index.
   * @param [options] The optional parameters
   * @returns Promise<Models.DocumentsCountResponse>
   */
  count(options?: coreHttp.RequestOptionsBase): Promise<Models.DocumentsCountResponse>;
  /**
   * @param callback The callback
   */
  count(callback: coreHttp.ServiceCallback<number>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  count(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<number>): void;
  count(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<number>, callback?: coreHttp.ServiceCallback<number>): Promise<Models.DocumentsCountResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      countOperationSpec,
      callback) as Promise<Models.DocumentsCountResponse>;
  }

  /**
   * Searches for documents in the index.
   * @param [options] The optional parameters
   * @returns Promise<Models.DocumentsSearchGetResponse>
   */
  searchGet(options?: Models.DocumentsSearchGetOptionalParams): Promise<Models.DocumentsSearchGetResponse>;
  /**
   * @param callback The callback
   */
  searchGet(callback: coreHttp.ServiceCallback<Models.SearchDocumentsResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  searchGet(options: Models.DocumentsSearchGetOptionalParams, callback: coreHttp.ServiceCallback<Models.SearchDocumentsResult>): void;
  searchGet(options?: Models.DocumentsSearchGetOptionalParams | coreHttp.ServiceCallback<Models.SearchDocumentsResult>, callback?: coreHttp.ServiceCallback<Models.SearchDocumentsResult>): Promise<Models.DocumentsSearchGetResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      searchGetOperationSpec,
      callback) as Promise<Models.DocumentsSearchGetResponse>;
  }

  /**
   * Searches for documents in the index.
   * @param searchRequest The definition of the Search request.
   * @param [options] The optional parameters
   * @returns Promise<Models.DocumentsSearchPostResponse>
   */
  searchPost(searchRequest: Models.SearchRequest, options?: coreHttp.RequestOptionsBase): Promise<Models.DocumentsSearchPostResponse>;
  /**
   * @param searchRequest The definition of the Search request.
   * @param callback The callback
   */
  searchPost(searchRequest: Models.SearchRequest, callback: coreHttp.ServiceCallback<Models.SearchDocumentsResult>): void;
  /**
   * @param searchRequest The definition of the Search request.
   * @param options The optional parameters
   * @param callback The callback
   */
  searchPost(searchRequest: Models.SearchRequest, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.SearchDocumentsResult>): void;
  searchPost(searchRequest: Models.SearchRequest, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SearchDocumentsResult>, callback?: coreHttp.ServiceCallback<Models.SearchDocumentsResult>): Promise<Models.DocumentsSearchPostResponse> {
    return this.client.sendOperationRequest(
      {
        searchRequest,
        options
      },
      searchPostOperationSpec,
      callback) as Promise<Models.DocumentsSearchPostResponse>;
  }

  /**
   * Retrieves a document from the index.
   * @param key The key of the document to retrieve.
   * @param [options] The optional parameters
   * @returns Promise<Models.DocumentsGetResponse>
   */
  get(key: string, options?: Models.DocumentsGetOptionalParams): Promise<Models.DocumentsGetResponse>;
  /**
   * @param key The key of the document to retrieve.
   * @param callback The callback
   */
  get(key: string, callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param key The key of the document to retrieve.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(key: string, options: Models.DocumentsGetOptionalParams, callback: coreHttp.ServiceCallback<any>): void;
  get(key: string, options?: Models.DocumentsGetOptionalParams | coreHttp.ServiceCallback<any>, callback?: coreHttp.ServiceCallback<any>): Promise<Models.DocumentsGetResponse> {
    return this.client.sendOperationRequest(
      {
        key,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.DocumentsGetResponse>;
  }

  /**
   * Suggests documents in the index that match the given partial query text.
   * @param searchText The search text to use to suggest documents. Must be at least 1 character, and
   * no more than 100 characters.
   * @param suggesterName The name of the suggester as specified in the suggesters collection that's
   * part of the index definition.
   * @param [options] The optional parameters
   * @returns Promise<Models.DocumentsSuggestGetResponse>
   */
  suggestGet(searchText: string, suggesterName: string, options?: Models.DocumentsSuggestGetOptionalParams): Promise<Models.DocumentsSuggestGetResponse>;
  /**
   * @param searchText The search text to use to suggest documents. Must be at least 1 character, and
   * no more than 100 characters.
   * @param suggesterName The name of the suggester as specified in the suggesters collection that's
   * part of the index definition.
   * @param callback The callback
   */
  suggestGet(searchText: string, suggesterName: string, callback: coreHttp.ServiceCallback<Models.SuggestDocumentsResult>): void;
  /**
   * @param searchText The search text to use to suggest documents. Must be at least 1 character, and
   * no more than 100 characters.
   * @param suggesterName The name of the suggester as specified in the suggesters collection that's
   * part of the index definition.
   * @param options The optional parameters
   * @param callback The callback
   */
  suggestGet(searchText: string, suggesterName: string, options: Models.DocumentsSuggestGetOptionalParams, callback: coreHttp.ServiceCallback<Models.SuggestDocumentsResult>): void;
  suggestGet(searchText: string, suggesterName: string, options?: Models.DocumentsSuggestGetOptionalParams | coreHttp.ServiceCallback<Models.SuggestDocumentsResult>, callback?: coreHttp.ServiceCallback<Models.SuggestDocumentsResult>): Promise<Models.DocumentsSuggestGetResponse> {
    return this.client.sendOperationRequest(
      {
        searchText,
        suggesterName,
        options
      },
      suggestGetOperationSpec,
      callback) as Promise<Models.DocumentsSuggestGetResponse>;
  }

  /**
   * Suggests documents in the index that match the given partial query text.
   * @param suggestRequest The Suggest request.
   * @param [options] The optional parameters
   * @returns Promise<Models.DocumentsSuggestPostResponse>
   */
  suggestPost(suggestRequest: Models.SuggestRequest, options?: coreHttp.RequestOptionsBase): Promise<Models.DocumentsSuggestPostResponse>;
  /**
   * @param suggestRequest The Suggest request.
   * @param callback The callback
   */
  suggestPost(suggestRequest: Models.SuggestRequest, callback: coreHttp.ServiceCallback<Models.SuggestDocumentsResult>): void;
  /**
   * @param suggestRequest The Suggest request.
   * @param options The optional parameters
   * @param callback The callback
   */
  suggestPost(suggestRequest: Models.SuggestRequest, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.SuggestDocumentsResult>): void;
  suggestPost(suggestRequest: Models.SuggestRequest, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SuggestDocumentsResult>, callback?: coreHttp.ServiceCallback<Models.SuggestDocumentsResult>): Promise<Models.DocumentsSuggestPostResponse> {
    return this.client.sendOperationRequest(
      {
        suggestRequest,
        options
      },
      suggestPostOperationSpec,
      callback) as Promise<Models.DocumentsSuggestPostResponse>;
  }

  /**
   * Sends a batch of document write actions to the index.
   * @param batch The batch of index actions.
   * @param [options] The optional parameters
   * @returns Promise<Models.DocumentsIndexResponse>
   */
  index(batch: Models.IndexBatch, options?: coreHttp.RequestOptionsBase): Promise<Models.DocumentsIndexResponse>;
  /**
   * @param batch The batch of index actions.
   * @param callback The callback
   */
  index(batch: Models.IndexBatch, callback: coreHttp.ServiceCallback<Models.IndexDocumentsResult>): void;
  /**
   * @param batch The batch of index actions.
   * @param options The optional parameters
   * @param callback The callback
   */
  index(batch: Models.IndexBatch, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.IndexDocumentsResult>): void;
  index(batch: Models.IndexBatch, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.IndexDocumentsResult>, callback?: coreHttp.ServiceCallback<Models.IndexDocumentsResult>): Promise<Models.DocumentsIndexResponse> {
    return this.client.sendOperationRequest(
      {
        batch,
        options
      },
      indexOperationSpec,
      callback) as Promise<Models.DocumentsIndexResponse>;
  }

  /**
   * Autocompletes incomplete query terms based on input text and matching terms in the index.
   * @param searchText The incomplete term which should be auto-completed.
   * @param suggesterName The name of the suggester as specified in the suggesters collection that's
   * part of the index definition.
   * @param [options] The optional parameters
   * @returns Promise<Models.DocumentsAutocompleteGetResponse>
   */
  autocompleteGet(searchText: string, suggesterName: string, options?: Models.DocumentsAutocompleteGetOptionalParams): Promise<Models.DocumentsAutocompleteGetResponse>;
  /**
   * @param searchText The incomplete term which should be auto-completed.
   * @param suggesterName The name of the suggester as specified in the suggesters collection that's
   * part of the index definition.
   * @param callback The callback
   */
  autocompleteGet(searchText: string, suggesterName: string, callback: coreHttp.ServiceCallback<Models.AutocompleteResult>): void;
  /**
   * @param searchText The incomplete term which should be auto-completed.
   * @param suggesterName The name of the suggester as specified in the suggesters collection that's
   * part of the index definition.
   * @param options The optional parameters
   * @param callback The callback
   */
  autocompleteGet(searchText: string, suggesterName: string, options: Models.DocumentsAutocompleteGetOptionalParams, callback: coreHttp.ServiceCallback<Models.AutocompleteResult>): void;
  autocompleteGet(searchText: string, suggesterName: string, options?: Models.DocumentsAutocompleteGetOptionalParams | coreHttp.ServiceCallback<Models.AutocompleteResult>, callback?: coreHttp.ServiceCallback<Models.AutocompleteResult>): Promise<Models.DocumentsAutocompleteGetResponse> {
    return this.client.sendOperationRequest(
      {
        searchText,
        suggesterName,
        options
      },
      autocompleteGetOperationSpec,
      callback) as Promise<Models.DocumentsAutocompleteGetResponse>;
  }

  /**
   * Autocompletes incomplete query terms based on input text and matching terms in the index.
   * @param autocompleteRequest The definition of the Autocomplete request.
   * @param [options] The optional parameters
   * @returns Promise<Models.DocumentsAutocompletePostResponse>
   */
  autocompletePost(autocompleteRequest: Models.AutocompleteRequest, options?: coreHttp.RequestOptionsBase): Promise<Models.DocumentsAutocompletePostResponse>;
  /**
   * @param autocompleteRequest The definition of the Autocomplete request.
   * @param callback The callback
   */
  autocompletePost(autocompleteRequest: Models.AutocompleteRequest, callback: coreHttp.ServiceCallback<Models.AutocompleteResult>): void;
  /**
   * @param autocompleteRequest The definition of the Autocomplete request.
   * @param options The optional parameters
   * @param callback The callback
   */
  autocompletePost(autocompleteRequest: Models.AutocompleteRequest, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.AutocompleteResult>): void;
  autocompletePost(autocompleteRequest: Models.AutocompleteRequest, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.AutocompleteResult>, callback?: coreHttp.ServiceCallback<Models.AutocompleteResult>): Promise<Models.DocumentsAutocompletePostResponse> {
    return this.client.sendOperationRequest(
      {
        autocompleteRequest,
        options
      },
      autocompletePostOperationSpec,
      callback) as Promise<Models.DocumentsAutocompletePostResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const countOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "docs/$count",
  urlParameters: [
    Parameters.endpoint,
    Parameters.indexName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  serializer
};

const searchGetOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "docs",
  urlParameters: [
    Parameters.endpoint,
    Parameters.indexName
  ],
  queryParameters: [
    Parameters.searchText0,
    Parameters.apiVersion,
    Parameters.includeTotalResultCount,
    Parameters.facets,
    Parameters.filter0,
    Parameters.highlightFields,
    Parameters.highlightPostTag0,
    Parameters.highlightPreTag0,
    Parameters.minimumCoverage0,
    Parameters.orderBy0,
    Parameters.queryType,
    Parameters.scoringParameters,
    Parameters.scoringProfile,
    Parameters.searchFields0,
    Parameters.searchMode,
    Parameters.scoringStatistics,
    Parameters.sessionId,
    Parameters.select0,
    Parameters.skip,
    Parameters.top0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SearchDocumentsResult
    },
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  serializer
};

const searchPostOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "docs/search.post.search",
  urlParameters: [
    Parameters.endpoint,
    Parameters.indexName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: "searchRequest",
    mapper: {
      ...Mappers.SearchRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SearchDocumentsResult
    },
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  serializer
};

const getOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "docs('{key}')",
  urlParameters: [
    Parameters.endpoint,
    Parameters.indexName,
    Parameters.key
  ],
  queryParameters: [
    Parameters.selectedFields,
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  serializer
};

const suggestGetOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "docs/search.suggest",
  urlParameters: [
    Parameters.endpoint,
    Parameters.indexName
  ],
  queryParameters: [
    Parameters.searchText1,
    Parameters.suggesterName,
    Parameters.apiVersion,
    Parameters.filter1,
    Parameters.useFuzzyMatching0,
    Parameters.highlightPostTag1,
    Parameters.highlightPreTag1,
    Parameters.minimumCoverage1,
    Parameters.orderBy1,
    Parameters.searchFields1,
    Parameters.select1,
    Parameters.top1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SuggestDocumentsResult
    },
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  serializer
};

const suggestPostOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "docs/search.post.suggest",
  urlParameters: [
    Parameters.endpoint,
    Parameters.indexName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: "suggestRequest",
    mapper: {
      ...Mappers.SuggestRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SuggestDocumentsResult
    },
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  serializer
};

const indexOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "docs/search.index",
  urlParameters: [
    Parameters.endpoint,
    Parameters.indexName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: "batch",
    mapper: {
      ...Mappers.IndexBatch,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.IndexDocumentsResult
    },
    207: {
      bodyMapper: Mappers.IndexDocumentsResult
    },
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  serializer
};

const autocompleteGetOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "docs/search.autocomplete",
  urlParameters: [
    Parameters.endpoint,
    Parameters.indexName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.searchText1,
    Parameters.suggesterName,
    Parameters.autocompleteMode,
    Parameters.filter2,
    Parameters.useFuzzyMatching1,
    Parameters.highlightPostTag2,
    Parameters.highlightPreTag2,
    Parameters.minimumCoverage2,
    Parameters.searchFields2,
    Parameters.top2
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AutocompleteResult
    },
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  serializer
};

const autocompletePostOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "docs/search.post.autocomplete",
  urlParameters: [
    Parameters.endpoint,
    Parameters.indexName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: "autocompleteRequest",
    mapper: {
      ...Mappers.AutocompleteRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.AutocompleteResult
    },
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  serializer
};
