/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { KnowledgeAgents } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { SearchServiceClient } from "../searchServiceClient.js";
import {
  KnowledgeAgent,
  KnowledgeAgentsCreateOrUpdateOptionalParams,
  KnowledgeAgentsCreateOrUpdateResponse,
  KnowledgeAgentsDeleteOptionalParams,
  KnowledgeAgentsGetOptionalParams,
  KnowledgeAgentsGetResponse,
  KnowledgeAgentsListOptionalParams,
  KnowledgeAgentsListResponse,
  KnowledgeAgentsCreateOptionalParams,
  KnowledgeAgentsCreateResponse,
} from "../models/index.js";

/** Class containing KnowledgeAgents operations. */
export class KnowledgeAgentsImpl implements KnowledgeAgents {
  private readonly client: SearchServiceClient;

  /**
   * Initialize a new instance of the class KnowledgeAgents class.
   * @param client Reference to the service client
   */
  constructor(client: SearchServiceClient) {
    this.client = client;
  }

  /**
   * Creates a new agent or updates an agent if it already exists.
   * @param agentName The name of the agent to create or update.
   * @param knowledgeAgent The definition of the agent to create or update.
   * @param options The options parameters.
   */
  createOrUpdate(
    agentName: string,
    knowledgeAgent: KnowledgeAgent,
    options?: KnowledgeAgentsCreateOrUpdateOptionalParams,
  ): Promise<KnowledgeAgentsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { agentName, knowledgeAgent, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Deletes an existing agent.
   * @param agentName The name of the agent to delete.
   * @param options The options parameters.
   */
  delete(
    agentName: string,
    options?: KnowledgeAgentsDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { agentName, options },
      deleteOperationSpec,
    );
  }

  /**
   * Retrieves an agent definition.
   * @param agentName The name of the agent to retrieve.
   * @param options The options parameters.
   */
  get(
    agentName: string,
    options?: KnowledgeAgentsGetOptionalParams,
  ): Promise<KnowledgeAgentsGetResponse> {
    return this.client.sendOperationRequest(
      { agentName, options },
      getOperationSpec,
    );
  }

  /**
   * Lists all agents available for a search service.
   * @param options The options parameters.
   */
  list(
    options?: KnowledgeAgentsListOptionalParams,
  ): Promise<KnowledgeAgentsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Creates a new agent.
   * @param knowledgeAgent The definition of the agent to create.
   * @param options The options parameters.
   */
  create(
    knowledgeAgent: KnowledgeAgent,
    options?: KnowledgeAgentsCreateOptionalParams,
  ): Promise<KnowledgeAgentsCreateResponse> {
    return this.client.sendOperationRequest(
      { knowledgeAgent, options },
      createOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/agents('{agentName}')",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.KnowledgeAgent,
    },
    201: {
      bodyMapper: Mappers.KnowledgeAgent,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.knowledgeAgent,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.agentName],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.prefer,
  ],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/agents('{agentName}')",
  httpMethod: "DELETE",
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.agentName],
  headerParameters: [
    Parameters.accept,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
  ],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/agents('{agentName}')",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KnowledgeAgent,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.agentName],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/agents",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ListKnowledgeAgentsResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/agents",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.KnowledgeAgent,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.knowledgeAgent,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
