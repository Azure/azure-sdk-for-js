/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SearchServiceClient } from "../searchServiceClient";
import {
  IndexersResetOptionalParams,
  IndexersRunOptionalParams,
  SearchIndexer,
  IndexersCreateOrUpdateOptionalParams,
  IndexersCreateOrUpdateResponse,
  IndexersDeleteOptionalParams,
  IndexersGetOptionalParams,
  IndexersGetResponse,
  IndexersListOptionalParams,
  IndexersListResponse,
  IndexersCreateOptionalParams,
  IndexersCreateResponse,
  IndexersGetStatusOptionalParams,
  IndexersGetStatusResponse
} from "../models";

/** Class representing a Indexers. */
export class Indexers {
  private readonly client: SearchServiceClient;

  /**
   * Initialize a new instance of the class Indexers class.
   * @param client Reference to the service client
   */
  constructor(client: SearchServiceClient) {
    this.client = client;
  }

  /**
   * Resets the change tracking state associated with an indexer.
   * @param indexerName The name of the indexer to reset.
   * @param options The options parameters.
   */
  reset(
    indexerName: string,
    options?: IndexersResetOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      indexerName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      resetOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Runs an indexer on-demand.
   * @param indexerName The name of the indexer to run.
   * @param options The options parameters.
   */
  run(
    indexerName: string,
    options?: IndexersRunOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      indexerName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      runOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Creates a new indexer or updates an indexer if it already exists.
   * @param indexerName The name of the indexer to create or update.
   * @param indexer The definition of the indexer to create or update.
   * @param options The options parameters.
   */
  createOrUpdate(
    indexerName: string,
    indexer: SearchIndexer,
    options?: IndexersCreateOrUpdateOptionalParams
  ): Promise<IndexersCreateOrUpdateResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      indexerName,
      indexer,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      createOrUpdateOperationSpec
    ) as Promise<IndexersCreateOrUpdateResponse>;
  }

  /**
   * Deletes an indexer.
   * @param indexerName The name of the indexer to delete.
   * @param options The options parameters.
   */
  delete(
    indexerName: string,
    options?: IndexersDeleteOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      indexerName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Retrieves an indexer definition.
   * @param indexerName The name of the indexer to retrieve.
   * @param options The options parameters.
   */
  get(
    indexerName: string,
    options?: IndexersGetOptionalParams
  ): Promise<IndexersGetResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      indexerName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getOperationSpec
    ) as Promise<IndexersGetResponse>;
  }

  /**
   * Lists all indexers available for a search service.
   * @param options The options parameters.
   */
  list(options?: IndexersListOptionalParams): Promise<IndexersListResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listOperationSpec
    ) as Promise<IndexersListResponse>;
  }

  /**
   * Creates a new indexer.
   * @param indexer The definition of the indexer to create.
   * @param options The options parameters.
   */
  create(
    indexer: SearchIndexer,
    options?: IndexersCreateOptionalParams
  ): Promise<IndexersCreateResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      indexer,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      createOperationSpec
    ) as Promise<IndexersCreateResponse>;
  }

  /**
   * Returns the current status and execution history of an indexer.
   * @param indexerName The name of the indexer for which to retrieve status.
   * @param options The options parameters.
   */
  getStatus(
    indexerName: string,
    options?: IndexersGetStatusOptionalParams
  ): Promise<IndexersGetStatusResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      indexerName,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getStatusOperationSpec
    ) as Promise<IndexersGetStatusResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const resetOperationSpec: coreHttp.OperationSpec = {
  path: "/indexers('{indexerName}')/search.reset",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.indexerName],
  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],
  serializer
};
const runOperationSpec: coreHttp.OperationSpec = {
  path: "/indexers('{indexerName}')/search.run",
  httpMethod: "POST",
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.indexerName],
  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],
  serializer
};
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  path: "/indexers('{indexerName}')",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SearchIndexer
    },
    201: {
      bodyMapper: Mappers.SearchIndexer
    },
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  requestBody: Parameters.indexer,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.indexerName],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.xMsClientRequestId,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.prefer
  ],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path: "/indexers('{indexerName}')",
  httpMethod: "DELETE",
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.indexerName],
  headerParameters: [
    Parameters.accept,
    Parameters.xMsClientRequestId,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  serializer
};
const getOperationSpec: coreHttp.OperationSpec = {
  path: "/indexers('{indexerName}')",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SearchIndexer
    },
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.indexerName],
  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],
  serializer
};
const listOperationSpec: coreHttp.OperationSpec = {
  path: "/indexers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ListIndexersResult
    },
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.select],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path: "/indexers",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.SearchIndexer
    },
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  requestBody: Parameters.indexer,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.xMsClientRequestId
  ],
  mediaType: "json",
  serializer
};
const getStatusOperationSpec: coreHttp.OperationSpec = {
  path: "/indexers('{indexerName}')/search.status",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SearchIndexerStatus
    },
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.indexerName],
  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],
  serializer
};
