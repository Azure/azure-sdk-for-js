/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Skillsets } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SearchServiceClient } from "../searchServiceClient";
import {
  SearchIndexerSkillset,
  SkillsetsCreateOrUpdateOptionalParams,
  SkillsetsCreateOrUpdateResponse,
  SkillsetsDeleteOptionalParams,
  SkillsetsGetOptionalParams,
  SkillsetsGetResponse,
  SkillsetsListOptionalParams,
  SkillsetsListResponse,
  SkillsetsCreateOptionalParams,
  SkillsetsCreateResponse,
  SkillNames,
  SkillsetsResetSkillsOptionalParams
} from "../models";

/** Class containing Skillsets operations. */
export class SkillsetsImpl implements Skillsets {
  private readonly client: SearchServiceClient;

  /**
   * Initialize a new instance of the class Skillsets class.
   * @param client Reference to the service client
   */
  constructor(client: SearchServiceClient) {
    this.client = client;
  }

  /**
   * Creates a new skillset in a search service or updates the skillset if it already exists.
   * @param skillsetName The name of the skillset to create or update.
   * @param skillset The skillset containing one or more skills to create or update in a search service.
   * @param options The options parameters.
   */
  createOrUpdate(
    skillsetName: string,
    skillset: SearchIndexerSkillset,
    options?: SkillsetsCreateOrUpdateOptionalParams
  ): Promise<SkillsetsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { skillsetName, skillset, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Deletes a skillset in a search service.
   * @param skillsetName The name of the skillset to delete.
   * @param options The options parameters.
   */
  delete(
    skillsetName: string,
    options?: SkillsetsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { skillsetName, options },
      deleteOperationSpec
    );
  }

  /**
   * Retrieves a skillset in a search service.
   * @param skillsetName The name of the skillset to retrieve.
   * @param options The options parameters.
   */
  get(
    skillsetName: string,
    options?: SkillsetsGetOptionalParams
  ): Promise<SkillsetsGetResponse> {
    return this.client.sendOperationRequest(
      { skillsetName, options },
      getOperationSpec
    );
  }

  /**
   * List all skillsets in a search service.
   * @param options The options parameters.
   */
  list(options?: SkillsetsListOptionalParams): Promise<SkillsetsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Creates a new skillset in a search service.
   * @param skillset The skillset containing one or more skills to create in a search service.
   * @param options The options parameters.
   */
  create(
    skillset: SearchIndexerSkillset,
    options?: SkillsetsCreateOptionalParams
  ): Promise<SkillsetsCreateResponse> {
    return this.client.sendOperationRequest(
      { skillset, options },
      createOperationSpec
    );
  }

  /**
   * Reset an existing skillset in a search service.
   * @param skillsetName The name of the skillset to reset.
   * @param skillNames The names of skills to reset.
   * @param options The options parameters.
   */
  resetSkills(
    skillsetName: string,
    skillNames: SkillNames,
    options?: SkillsetsResetSkillsOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { skillsetName, skillNames, options },
      resetSkillsOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/skillsets('{skillsetName}')",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SearchIndexerSkillset
    },
    201: {
      bodyMapper: Mappers.SearchIndexerSkillset
    },
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  requestBody: Parameters.skillset,
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skipIndexerResetRequirementForCache,
    Parameters.disableCacheReprocessingChangeDetection
  ],
  urlParameters: [Parameters.endpoint, Parameters.skillsetName],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.prefer
  ],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/skillsets('{skillsetName}')",
  httpMethod: "DELETE",
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.skillsetName],
  headerParameters: [
    Parameters.accept,
    Parameters.ifMatch,
    Parameters.ifNoneMatch
  ],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/skillsets('{skillsetName}')",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SearchIndexerSkillset
    },
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.skillsetName],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/skillsets",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ListSkillsetsResult
    },
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.select],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/skillsets",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.SearchIndexerSkillset
    },
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  requestBody: Parameters.skillset,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const resetSkillsOperationSpec: coreClient.OperationSpec = {
  path: "/skillsets('{skillsetName}')/search.resetskills",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.SearchError
    }
  },
  requestBody: Parameters.skillNames,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.skillsetName],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
