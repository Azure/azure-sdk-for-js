/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { KnowledgeBases } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { SearchServiceClient } from "../searchServiceClient.js";
import {
  KnowledgeBase,
  KnowledgeBasesCreateOrUpdateOptionalParams,
  KnowledgeBasesCreateOrUpdateResponse,
  KnowledgeBasesDeleteOptionalParams,
  KnowledgeBasesGetOptionalParams,
  KnowledgeBasesGetResponse,
  KnowledgeBasesListOptionalParams,
  KnowledgeBasesListResponse,
  KnowledgeBasesCreateOptionalParams,
  KnowledgeBasesCreateResponse,
} from "../models/index.js";

/** Class containing KnowledgeBases operations. */
export class KnowledgeBasesImpl implements KnowledgeBases {
  private readonly client: SearchServiceClient;

  /**
   * Initialize a new instance of the class KnowledgeBases class.
   * @param client Reference to the service client
   */
  constructor(client: SearchServiceClient) {
    this.client = client;
  }

  /**
   * Creates a new knowledge base or updates an knowledge base if it already exists.
   * @param knowledgeBaseName The name of the knowledge base to create or update.
   * @param knowledgeBase The definition of the knowledge base to create or update.
   * @param options The options parameters.
   */
  createOrUpdate(
    knowledgeBaseName: string,
    knowledgeBase: KnowledgeBase,
    options?: KnowledgeBasesCreateOrUpdateOptionalParams,
  ): Promise<KnowledgeBasesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { knowledgeBaseName, knowledgeBase, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Deletes an existing knowledge base.
   * @param knowledgeBaseName The name of the knowledge base to delete.
   * @param options The options parameters.
   */
  delete(
    knowledgeBaseName: string,
    options?: KnowledgeBasesDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { knowledgeBaseName, options },
      deleteOperationSpec,
    );
  }

  /**
   * Retrieves an knowledge base definition.
   * @param knowledgeBaseName The name of the knowledge base to retrieve.
   * @param options The options parameters.
   */
  get(
    knowledgeBaseName: string,
    options?: KnowledgeBasesGetOptionalParams,
  ): Promise<KnowledgeBasesGetResponse> {
    return this.client.sendOperationRequest(
      { knowledgeBaseName, options },
      getOperationSpec,
    );
  }

  /**
   * Lists all knowledge bases available for a search service.
   * @param options The options parameters.
   */
  list(
    options?: KnowledgeBasesListOptionalParams,
  ): Promise<KnowledgeBasesListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Creates a new knowledge base.
   * @param knowledgeBase The definition of the knowledge base to create.
   * @param options The options parameters.
   */
  create(
    knowledgeBase: KnowledgeBase,
    options?: KnowledgeBasesCreateOptionalParams,
  ): Promise<KnowledgeBasesCreateResponse> {
    return this.client.sendOperationRequest(
      { knowledgeBase, options },
      createOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/knowledgebases('{knowledgeBaseName}')",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.KnowledgeBase,
    },
    201: {
      bodyMapper: Mappers.KnowledgeBase,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.knowledgeBase,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.knowledgeBaseName],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.prefer,
  ],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/knowledgebases('{knowledgeBaseName}')",
  httpMethod: "DELETE",
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.knowledgeBaseName],
  headerParameters: [
    Parameters.accept,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
  ],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/knowledgebases('{knowledgeBaseName}')",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KnowledgeBase,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.knowledgeBaseName],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/knowledgebases",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ListKnowledgeBasesResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/knowledgebases",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.KnowledgeBase,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.knowledgeBase,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
