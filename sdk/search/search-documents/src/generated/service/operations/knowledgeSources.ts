/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { KnowledgeSources } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { SearchServiceClient } from "../searchServiceClient.js";
import {
  KnowledgeSourceUnion,
  KnowledgeSourcesCreateOrUpdateOptionalParams,
  KnowledgeSourcesCreateOrUpdateResponse,
  KnowledgeSourcesDeleteOptionalParams,
  KnowledgeSourcesGetOptionalParams,
  KnowledgeSourcesGetResponse,
  KnowledgeSourcesListOptionalParams,
  KnowledgeSourcesListResponse,
  KnowledgeSourcesCreateOptionalParams,
  KnowledgeSourcesCreateResponse,
} from "../models/index.js";

/** Class containing KnowledgeSources operations. */
export class KnowledgeSourcesImpl implements KnowledgeSources {
  private readonly client: SearchServiceClient;

  /**
   * Initialize a new instance of the class KnowledgeSources class.
   * @param client Reference to the service client
   */
  constructor(client: SearchServiceClient) {
    this.client = client;
  }

  /**
   * Creates a new knowledge source or updates an knowledge source if it already exists.
   * @param sourceName The name of the knowledge source to create or update.
   * @param knowledgeSource The definition of the knowledge source to create or update.
   * @param options The options parameters.
   */
  createOrUpdate(
    sourceName: string,
    knowledgeSource: KnowledgeSourceUnion,
    options?: KnowledgeSourcesCreateOrUpdateOptionalParams,
  ): Promise<KnowledgeSourcesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { sourceName, knowledgeSource, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Deletes an existing knowledge source.
   * @param sourceName The name of the knowledge source to delete.
   * @param options The options parameters.
   */
  delete(
    sourceName: string,
    options?: KnowledgeSourcesDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { sourceName, options },
      deleteOperationSpec,
    );
  }

  /**
   * Retrieves a knowledge source definition.
   * @param sourceName The name of the knowledge source to retrieve.
   * @param options The options parameters.
   */
  get(
    sourceName: string,
    options?: KnowledgeSourcesGetOptionalParams,
  ): Promise<KnowledgeSourcesGetResponse> {
    return this.client.sendOperationRequest(
      { sourceName, options },
      getOperationSpec,
    );
  }

  /**
   * Lists all knowledge sources available for a search service.
   * @param options The options parameters.
   */
  list(
    options?: KnowledgeSourcesListOptionalParams,
  ): Promise<KnowledgeSourcesListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Creates a new knowledge source.
   * @param knowledgeSource The definition of the knowledge source to create.
   * @param options The options parameters.
   */
  create(
    knowledgeSource: KnowledgeSourceUnion,
    options?: KnowledgeSourcesCreateOptionalParams,
  ): Promise<KnowledgeSourcesCreateResponse> {
    return this.client.sendOperationRequest(
      { knowledgeSource, options },
      createOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/knowledgesources('{sourceName}')",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.KnowledgeSource,
    },
    201: {
      bodyMapper: Mappers.KnowledgeSource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.knowledgeSource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.sourceName],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.prefer,
  ],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/knowledgesources('{sourceName}')",
  httpMethod: "DELETE",
  responses: {
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.sourceName],
  headerParameters: [
    Parameters.accept,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
  ],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/knowledgesources('{sourceName}')",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KnowledgeSource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.sourceName],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/knowledgesources",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ListKnowledgeSourcesResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/knowledgesources",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.KnowledgeSource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.knowledgeSource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
