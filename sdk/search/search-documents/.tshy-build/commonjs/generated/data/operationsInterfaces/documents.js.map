{"version":3,"file":"documents.js","sourceRoot":"","sources":["../../../../../src/generated/data/operationsInterfaces/documents.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  DocumentsCountOptionalParams,\n  DocumentsCountResponse,\n  DocumentsSearchGetOptionalParams,\n  DocumentsSearchGetResponse,\n  SearchRequest,\n  DocumentsSearchPostOptionalParams,\n  DocumentsSearchPostResponse,\n  DocumentsGetOptionalParams,\n  DocumentsGetResponse,\n  DocumentsSuggestGetOptionalParams,\n  DocumentsSuggestGetResponse,\n  SuggestRequest,\n  DocumentsSuggestPostOptionalParams,\n  DocumentsSuggestPostResponse,\n  IndexBatch,\n  DocumentsIndexOptionalParams,\n  DocumentsIndexResponse,\n  DocumentsAutocompleteGetOptionalParams,\n  DocumentsAutocompleteGetResponse,\n  AutocompleteRequest,\n  DocumentsAutocompletePostOptionalParams,\n  DocumentsAutocompletePostResponse,\n} from \"../models/index.js\";\n\n/** Interface representing a Documents. */\nexport interface Documents {\n  /**\n   * Queries the number of documents in the index.\n   * @param options The options parameters.\n   */\n  count(\n    options?: DocumentsCountOptionalParams,\n  ): Promise<DocumentsCountResponse>;\n  /**\n   * Searches for documents in the index.\n   * @param options The options parameters.\n   */\n  searchGet(\n    options?: DocumentsSearchGetOptionalParams,\n  ): Promise<DocumentsSearchGetResponse>;\n  /**\n   * Searches for documents in the index.\n   * @param searchRequest The definition of the Search request.\n   * @param options The options parameters.\n   */\n  searchPost(\n    searchRequest: SearchRequest,\n    options?: DocumentsSearchPostOptionalParams,\n  ): Promise<DocumentsSearchPostResponse>;\n  /**\n   * Retrieves a document from the index.\n   * @param key The key of the document to retrieve.\n   * @param options The options parameters.\n   */\n  get(\n    key: string,\n    options?: DocumentsGetOptionalParams,\n  ): Promise<DocumentsGetResponse>;\n  /**\n   * Suggests documents in the index that match the given partial query text.\n   * @param searchText The search text to use to suggest documents. Must be at least 1 character, and no\n   *                   more than 100 characters.\n   * @param suggesterName The name of the suggester as specified in the suggesters collection that's part\n   *                      of the index definition.\n   * @param options The options parameters.\n   */\n  suggestGet(\n    searchText: string,\n    suggesterName: string,\n    options?: DocumentsSuggestGetOptionalParams,\n  ): Promise<DocumentsSuggestGetResponse>;\n  /**\n   * Suggests documents in the index that match the given partial query text.\n   * @param suggestRequest The Suggest request.\n   * @param options The options parameters.\n   */\n  suggestPost(\n    suggestRequest: SuggestRequest,\n    options?: DocumentsSuggestPostOptionalParams,\n  ): Promise<DocumentsSuggestPostResponse>;\n  /**\n   * Sends a batch of document write actions to the index.\n   * @param batch The batch of index actions.\n   * @param options The options parameters.\n   */\n  index(\n    batch: IndexBatch,\n    options?: DocumentsIndexOptionalParams,\n  ): Promise<DocumentsIndexResponse>;\n  /**\n   * Autocompletes incomplete query terms based on input text and matching terms in the index.\n   * @param searchText The incomplete term which should be auto-completed.\n   * @param suggesterName The name of the suggester as specified in the suggesters collection that's part\n   *                      of the index definition.\n   * @param options The options parameters.\n   */\n  autocompleteGet(\n    searchText: string,\n    suggesterName: string,\n    options?: DocumentsAutocompleteGetOptionalParams,\n  ): Promise<DocumentsAutocompleteGetResponse>;\n  /**\n   * Autocompletes incomplete query terms based on input text and matching terms in the index.\n   * @param autocompleteRequest The definition of the Autocomplete request.\n   * @param options The options parameters.\n   */\n  autocompletePost(\n    autocompleteRequest: AutocompleteRequest,\n    options?: DocumentsAutocompletePostOptionalParams,\n  ): Promise<DocumentsAutocompletePostResponse>;\n}\n"]}