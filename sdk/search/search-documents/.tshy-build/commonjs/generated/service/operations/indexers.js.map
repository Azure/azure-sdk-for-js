{"version":3,"file":"indexers.js","sourceRoot":"","sources":["../../../../../src/generated/service/operations/indexers.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { Indexers } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { SearchServiceClient } from \"../searchServiceClient.js\";\nimport {\n  IndexersResetOptionalParams,\n  IndexersResetDocsOptionalParams,\n  IndexersRunOptionalParams,\n  SearchIndexer,\n  IndexersCreateOrUpdateOptionalParams,\n  IndexersCreateOrUpdateResponse,\n  IndexersDeleteOptionalParams,\n  IndexersGetOptionalParams,\n  IndexersGetResponse,\n  IndexersListOptionalParams,\n  IndexersListResponse,\n  IndexersCreateOptionalParams,\n  IndexersCreateResponse,\n  IndexersGetStatusOptionalParams,\n  IndexersGetStatusResponse,\n} from \"../models/index.js\";\n\n/** Class containing Indexers operations. */\nexport class IndexersImpl implements Indexers {\n  private readonly client: SearchServiceClient;\n\n  /**\n   * Initialize a new instance of the class Indexers class.\n   * @param client Reference to the service client\n   */\n  constructor(client: SearchServiceClient) {\n    this.client = client;\n  }\n\n  /**\n   * Resets the change tracking state associated with an indexer.\n   * @param indexerName The name of the indexer to reset.\n   * @param options The options parameters.\n   */\n  reset(\n    indexerName: string,\n    options?: IndexersResetOptionalParams,\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { indexerName, options },\n      resetOperationSpec,\n    );\n  }\n\n  /**\n   * Resets specific documents in the datasource to be selectively re-ingested by the indexer.\n   * @param indexerName The name of the indexer to reset documents for.\n   * @param options The options parameters.\n   */\n  resetDocs(\n    indexerName: string,\n    options?: IndexersResetDocsOptionalParams,\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { indexerName, options },\n      resetDocsOperationSpec,\n    );\n  }\n\n  /**\n   * Runs an indexer on-demand.\n   * @param indexerName The name of the indexer to run.\n   * @param options The options parameters.\n   */\n  run(indexerName: string, options?: IndexersRunOptionalParams): Promise<void> {\n    return this.client.sendOperationRequest(\n      { indexerName, options },\n      runOperationSpec,\n    );\n  }\n\n  /**\n   * Creates a new indexer or updates an indexer if it already exists.\n   * @param indexerName The name of the indexer to create or update.\n   * @param indexer The definition of the indexer to create or update.\n   * @param options The options parameters.\n   */\n  createOrUpdate(\n    indexerName: string,\n    indexer: SearchIndexer,\n    options?: IndexersCreateOrUpdateOptionalParams,\n  ): Promise<IndexersCreateOrUpdateResponse> {\n    return this.client.sendOperationRequest(\n      { indexerName, indexer, options },\n      createOrUpdateOperationSpec,\n    );\n  }\n\n  /**\n   * Deletes an indexer.\n   * @param indexerName The name of the indexer to delete.\n   * @param options The options parameters.\n   */\n  delete(\n    indexerName: string,\n    options?: IndexersDeleteOptionalParams,\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { indexerName, options },\n      deleteOperationSpec,\n    );\n  }\n\n  /**\n   * Retrieves an indexer definition.\n   * @param indexerName The name of the indexer to retrieve.\n   * @param options The options parameters.\n   */\n  get(\n    indexerName: string,\n    options?: IndexersGetOptionalParams,\n  ): Promise<IndexersGetResponse> {\n    return this.client.sendOperationRequest(\n      { indexerName, options },\n      getOperationSpec,\n    );\n  }\n\n  /**\n   * Lists all indexers available for a search service.\n   * @param options The options parameters.\n   */\n  list(options?: IndexersListOptionalParams): Promise<IndexersListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n\n  /**\n   * Creates a new indexer.\n   * @param indexer The definition of the indexer to create.\n   * @param options The options parameters.\n   */\n  create(\n    indexer: SearchIndexer,\n    options?: IndexersCreateOptionalParams,\n  ): Promise<IndexersCreateResponse> {\n    return this.client.sendOperationRequest(\n      { indexer, options },\n      createOperationSpec,\n    );\n  }\n\n  /**\n   * Returns the current status and execution history of an indexer.\n   * @param indexerName The name of the indexer for which to retrieve status.\n   * @param options The options parameters.\n   */\n  getStatus(\n    indexerName: string,\n    options?: IndexersGetStatusOptionalParams,\n  ): Promise<IndexersGetStatusResponse> {\n    return this.client.sendOperationRequest(\n      { indexerName, options },\n      getStatusOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst resetOperationSpec: coreClient.OperationSpec = {\n  path: \"/indexers('{indexerName}')/search.reset\",\n  httpMethod: \"POST\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.indexerName],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst resetDocsOperationSpec: coreClient.OperationSpec = {\n  path: \"/indexers('{indexerName}')/search.resetdocs\",\n  httpMethod: \"POST\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n    },\n  },\n  requestBody: Parameters.keysOrIds,\n  queryParameters: [Parameters.apiVersion, Parameters.overwrite],\n  urlParameters: [Parameters.endpoint, Parameters.indexerName],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst runOperationSpec: coreClient.OperationSpec = {\n  path: \"/indexers('{indexerName}')/search.run\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.indexerName],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path: \"/indexers('{indexerName}')\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SearchIndexer,\n    },\n    201: {\n      bodyMapper: Mappers.SearchIndexer,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n    },\n  },\n  requestBody: Parameters.indexer,\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.skipIndexerResetRequirementForCache,\n    Parameters.disableCacheReprocessingChangeDetection,\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.indexerName],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.prefer,\n  ],\n  mediaType: \"json\",\n  serializer,\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path: \"/indexers('{indexerName}')\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    404: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.indexerName],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n  ],\n  serializer,\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/indexers('{indexerName}')\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SearchIndexer,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.indexerName],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/indexers\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListIndexersResult,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.select],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst createOperationSpec: coreClient.OperationSpec = {\n  path: \"/indexers\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      bodyMapper: Mappers.SearchIndexer,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n    },\n  },\n  requestBody: Parameters.indexer,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst getStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/indexers('{indexerName}')/search.status\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SearchIndexerStatus,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.indexerName],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n"]}