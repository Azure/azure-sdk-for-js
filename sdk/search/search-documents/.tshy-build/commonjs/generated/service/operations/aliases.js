"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AliasesImpl = void 0;
const tslib_1 = require("tslib");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
/** Class containing Aliases operations. */
class AliasesImpl {
    /**
     * Initialize a new instance of the class Aliases class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Creates a new search alias.
     * @param alias The definition of the alias to create.
     * @param options The options parameters.
     */
    create(alias, options) {
        return this.client.sendOperationRequest({ alias, options }, createOperationSpec);
    }
    /**
     * Lists all aliases available for a search service.
     * @param options The options parameters.
     */
    list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * Creates a new search alias or updates an alias if it already exists.
     * @param aliasName The definition of the alias to create or update.
     * @param alias The definition of the alias to create or update.
     * @param options The options parameters.
     */
    createOrUpdate(aliasName, alias, options) {
        return this.client.sendOperationRequest({ aliasName, alias, options }, createOrUpdateOperationSpec);
    }
    /**
     * Deletes a search alias and its associated mapping to an index. This operation is permanent, with no
     * recovery option. The mapped index is untouched by this operation.
     * @param aliasName The name of the alias to delete.
     * @param options The options parameters.
     */
    delete(aliasName, options) {
        return this.client.sendOperationRequest({ aliasName, options }, deleteOperationSpec);
    }
    /**
     * Retrieves an alias definition.
     * @param aliasName The name of the alias to retrieve.
     * @param options The options parameters.
     */
    get(aliasName, options) {
        return this.client.sendOperationRequest({ aliasName, options }, getOperationSpec);
    }
}
exports.AliasesImpl = AliasesImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const createOperationSpec = {
    path: "/aliases",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.SearchAlias,
        },
        default: {
            bodyMapper: Mappers.ErrorResponse,
        },
    },
    requestBody: Parameters.alias,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer,
};
const listOperationSpec = {
    path: "/aliases",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ListAliasesResult,
        },
        default: {
            bodyMapper: Mappers.ErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.accept],
    serializer,
};
const createOrUpdateOperationSpec = {
    path: "/aliases('{aliasName}')",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.SearchAlias,
        },
        201: {
            bodyMapper: Mappers.SearchAlias,
        },
        default: {
            bodyMapper: Mappers.ErrorResponse,
        },
    },
    requestBody: Parameters.alias,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.aliasName],
    headerParameters: [
        Parameters.contentType,
        Parameters.accept,
        Parameters.ifMatch,
        Parameters.ifNoneMatch,
        Parameters.prefer,
    ],
    mediaType: "json",
    serializer,
};
const deleteOperationSpec = {
    path: "/aliases('{aliasName}')",
    httpMethod: "DELETE",
    responses: {
        204: {},
        404: {},
        default: {
            bodyMapper: Mappers.ErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.aliasName],
    headerParameters: [
        Parameters.accept,
        Parameters.ifMatch,
        Parameters.ifNoneMatch,
    ],
    serializer,
};
const getOperationSpec = {
    path: "/aliases('{aliasName}')",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SearchAlias,
        },
        default: {
            bodyMapper: Mappers.ErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.aliasName],
    headerParameters: [Parameters.accept],
    serializer,
};
//# sourceMappingURL=aliases.js.map