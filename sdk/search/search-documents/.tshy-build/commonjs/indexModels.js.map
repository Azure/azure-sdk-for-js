{"version":3,"file":"indexModels.js","sourceRoot":"","sources":["../../src/indexModels.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { OperationOptions } from \"@azure/core-client\";\nimport type { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport type {\n  AutocompleteMode,\n  DebugInfo,\n  FacetResult,\n  HybridSearch,\n  IndexActionType,\n  KnownSemanticErrorMode,\n  KnownSemanticErrorReason,\n  KnownSemanticSearchResultsType,\n  KnownVectorFilterMode,\n  KnownVectorQueryKind,\n  QueryAnswerResult,\n  QueryCaptionResult,\n  QueryDebugMode,\n  QueryLanguage,\n  QueryResultDocumentRerankerInput,\n  QuerySpellerType as QuerySpeller,\n  QueryType,\n  ScoringStatistics,\n  SearchMode,\n  SemanticFieldState,\n  SemanticQueryRewritesResultType,\n  VectorsDebugInfo,\n} from \"./generated/data/models/index.js\";\nimport type GeographyPoint from \"./geographyPoint.js\";\n\n/**\n * Options for performing the count operation on the index.\n */\nexport type CountDocumentsOptions = OperationOptions;\n\n/**\n * Options for SearchIndexingBufferedSender.\n */\nexport interface SearchIndexingBufferedSenderOptions {\n  /**\n   * Indicates if autoFlush is enabled.\n   */\n  autoFlush?: boolean;\n  /**\n   * Initial Batch Action Count.\n   *\n   * A batch request will be sent once the documents\n   * reach the initialBatchActionCount.\n   */\n  initialBatchActionCount?: number;\n  /**\n   * Flush Window.\n   *\n   * A batch request will be sent after flushWindowInMs is\n   * reached.\n   */\n  flushWindowInMs?: number;\n  /**\n   * Maximum number of Retries\n   */\n  maxRetriesPerAction?: number;\n  /**\n   * Delay between retries\n   */\n  throttlingDelayInMs?: number;\n  /**\n   * Max Delay between retries\n   */\n  maxThrottlingDelayInMs?: number;\n}\n\n/**\n * Options for SearchIndexingBufferedSenderUploadDocuments.\n */\nexport type SearchIndexingBufferedSenderUploadDocumentsOptions = OperationOptions;\n/**\n * Options for SearchIndexingBufferedSenderMergeDocuments.\n */\nexport type SearchIndexingBufferedSenderMergeDocumentsOptions = OperationOptions;\n/**\n * Options for SearchIndexingBufferedSenderMergeOrUploadDocuments.\n */\nexport type SearchIndexingBufferedSenderMergeOrUploadDocumentsOptions = OperationOptions;\n/**\n * Options for SearchIndexingBufferedSenderDeleteDocuments.\n */\nexport type SearchIndexingBufferedSenderDeleteDocumentsOptions = OperationOptions;\n/**\n * Options for SearchIndexingBufferedSenderFlushDocuments.\n */\nexport type SearchIndexingBufferedSenderFlushDocumentsOptions = OperationOptions;\n\n/**\n * Options for retrieving a single document.\n */\nexport interface GetDocumentOptions<\n  TModel extends object,\n  TFields extends SelectFields<TModel> = SelectFields<TModel>,\n> extends OperationOptions {\n  /**\n   * List of field names to retrieve for the document; Any field not retrieved will be missing from\n   * the returned document.\n   */\n  selectedFields?: SelectArray<TFields>;\n}\n\n/**\n * Options for the modify index batch operation.\n */\nexport interface IndexDocumentsOptions extends OperationOptions {\n  /**\n   * If true, will cause this operation to throw if any document operation\n   * in the batch did not succeed.\n   */\n  throwOnAnyFailure?: boolean;\n}\n\n/**\n * Options for the upload documents operation.\n */\nexport type UploadDocumentsOptions = IndexDocumentsOptions;\n\n/**\n * Options for the merge documents operation.\n */\nexport type MergeDocumentsOptions = IndexDocumentsOptions;\n\n/**\n * Options for the merge or upload documents operation.\n */\nexport type MergeOrUploadDocumentsOptions = IndexDocumentsOptions;\n\n/**\n * Options for the delete documents operation.\n */\nexport type DeleteDocumentsOptions = IndexDocumentsOptions;\n\n/**\n * Arguments for retrieving the next page of search results.\n */\nexport interface ListSearchResultsPageSettings {\n  /**\n   * A token used for retrieving the next page of results when the server\n   * enforces pagination.\n   */\n  continuationToken?: string;\n}\n\n// BEGIN manually modified generated interfaces\n//\n// This section is for places where we have to manually fix issues\n// with interfaces from the generated code.\n// Mostly this is to allow modeling additionalProperties:true as generics.\n\n/**\n * Options for retrieving completion text for a partial searchText.\n */\nexport type AutocompleteOptions<TModel extends object> = OperationOptions &\n  AutocompleteRequest<TModel>;\n/**\n * Options for committing a full search request.\n */\nexport type SearchOptions<\n  TModel extends object,\n  TFields extends SelectFields<TModel> = SelectFields<TModel>,\n> = OperationOptions & SearchRequestOptions<TModel, TFields>;\n/**\n * Options for retrieving suggestions based on the searchText.\n */\nexport type SuggestOptions<\n  TModel extends object,\n  TFields extends SelectFields<TModel> = SelectFields<TModel>,\n> = OperationOptions & SuggestRequest<TModel, TFields>;\n\n/**\n * An iterator for search results of a paticular query. Will make requests\n * as needed during iteration. Use .byPage() to make one request to the server\n * per iteration.\n */\nexport type SearchIterator<\n  TModel extends object,\n  TFields extends SelectFields<TModel> = SelectFields<TModel>,\n> = PagedAsyncIterableIterator<\n  SearchResult<TModel, TFields>,\n  SearchDocumentsPageResult<TModel, TFields>,\n  ListSearchResultsPageSettings\n>;\n\n/** The query parameters for vector and hybrid search queries. */\nexport type VectorQuery<TModel extends object> =\n  | VectorizedQuery<TModel>\n  | VectorizableTextQuery<TModel>\n  | VectorizableImageUrlQuery<TModel>\n  | VectorizableImageBinaryQuery<TModel>;\n\n/** The query parameters for vector and hybrid search queries. */\nexport interface BaseVectorQuery<TModel extends object> {\n  /**\n   * ### Known values supported by the service\n   * **vector**: Vector query where a raw vector value is provided.\n   * **text**: Vector query where a text value that needs to be vectorized is provided.\n   * **imageUrl**: Vector query where an url that represents an image value that needs to be vectorized is provided.\n   * **imageBinary**: Vector query where a base 64 encoded binary of an image that needs to be vectorized is provided.\n   */\n  kind: VectorQueryKind;\n  /** Number of nearest neighbors to return as top hits. */\n  kNearestNeighborsCount?: number;\n  /** Vector Fields of type Collection(Edm.Single) to be included in the vector searched. */\n  fields?: SearchFieldArray<TModel>;\n  /**\n   * When true, triggers an exhaustive k-nearest neighbor search across all vectors within the\n   * vector index. Useful for scenarios where exact matches are critical, such as determining ground\n   * truth values.\n   */\n  exhaustive?: boolean;\n  /**\n   * Oversampling factor. Minimum value is 1. It overrides the 'defaultOversampling' parameter\n   * configured in the index definition. It can be set only when 'rerankWithOriginalVectors' is\n   * true. This parameter is only permitted when a compression method is used on the underlying\n   * vector field.\n   */\n  oversampling?: number;\n  /** Relative weight of the vector query when compared to other vector query and/or the text query within the same search request. This value is used when combining the results of multiple ranking lists produced by the different vector queries and/or the results retrieved through the text query. The higher the weight, the higher the documents that matched that query will be in the final ranking. Default is 1.0 and the value needs to be a positive number larger than zero. */\n  weight?: number;\n  /** The threshold used for vector queries. Note this can only be set if all 'fields' use the same similarity metric. */\n  threshold?: VectorThreshold;\n  /** The OData filter expression to apply to this specific vector query. If no filter expression is defined at the vector level, the expression defined in\n   * the top level filter parameter is used instead. */\n  filterOverride?: string;\n}\n\n/** The query parameters to use for vector search when a raw vector value is provided. */\nexport interface VectorizedQuery<TModel extends object> extends BaseVectorQuery<TModel> {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"vector\";\n  /** The vector representation of a search query. */\n  vector: number[];\n}\n\n/** The query parameters to use for vector search when a text value that needs to be vectorized is provided. */\nexport interface VectorizableTextQuery<TModel extends object> extends BaseVectorQuery<TModel> {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"text\";\n  /** The text to be vectorized to perform a vector search query. */\n  text: string;\n  /**\n   * Can be configured to let a generative model rewrite the query before sending it to be\n   * vectorized.\n   */\n  queryRewrites?: QueryRewrites;\n}\n\n/** The query parameters to use for vector search when an url that represents an image value that needs to be vectorized is provided. */\nexport interface VectorizableImageUrlQuery<TModel extends object> extends BaseVectorQuery<TModel> {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"imageUrl\";\n  /** The URL of an image to be vectorized to perform a vector search query. */\n  url: string;\n}\n\n/** The query parameters to use for vector search when a base 64 encoded binary of an image that needs to be vectorized is provided. */\nexport interface VectorizableImageBinaryQuery<TModel extends object>\n  extends BaseVectorQuery<TModel> {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"imageBinary\";\n  /** The base64 encoded binary of an image to be vectorized to perform a vector search query. */\n  binaryImage: string;\n}\n\n/**\n * Parameters for filtering, sorting, faceting, paging, and other search query behaviors.\n */\nexport interface BaseSearchRequestOptions<\n  TModel extends object,\n  TFields extends SelectFields<TModel> = SelectFields<TModel>,\n> {\n  /**\n   * A value that specifies whether to fetch the total count of results. Default is false. Setting\n   * this value to true may have a performance impact. Note that the count returned is an\n   * approximation.\n   */\n  includeTotalCount?: boolean;\n  /**\n   * The list of facet expressions to apply to the search query. Each facet expression contains a\n   * field name, optionally followed by a comma-separated list of name:value pairs.\n   */\n  facets?: string[];\n  /**\n   * The OData $filter expression to apply to the search query.\n   */\n  filter?: string;\n  /**\n   * The comma-separated list of field names to use for hit highlights. Only searchable fields can\n   * be used for hit highlighting.\n   */\n  highlightFields?: string;\n  /**\n   * A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is\n   * &lt;/em&gt;.\n   */\n  highlightPostTag?: string;\n  /**\n   * A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default\n   * is &lt;em&gt;.\n   */\n  highlightPreTag?: string;\n  /**\n   * A number between 0 and 100 indicating the percentage of the index that must be covered by a\n   * search query in order for the query to be reported as a success. This parameter can be useful\n   * for ensuring search availability even for services with only one replica. The default is 100.\n   */\n  minimumCoverage?: number;\n  /**\n   * The list of OData $orderby expressions by which to sort the results. Each\n   * expression can be either a field name or a call to either the geo.distance() or the\n   * search.score() functions. Each expression can be followed by asc to indicate ascending, or\n   * desc to indicate descending. The default is ascending order. Ties will be broken by the match\n   * scores of documents. If no $orderby is specified, the default sort order is descending by\n   * document match score. There can be at most 32 $orderby clauses.\n   */\n  orderBy?: string[];\n  /**\n   * A value that specifies the syntax of the search query. The default is 'simple'. Use 'full' if\n   * your query uses the Lucene query syntax. Possible values include: 'simple', 'full', 'semantic'\n   */\n  queryType?: QueryType;\n  /**\n   * The list of parameter values to be used in scoring functions (for example,\n   * referencePointParameter) using the format name-values. For example, if the scoring profile\n   * defines a function with a parameter called 'mylocation' the parameter string would be\n   * \"mylocation--122.2,44.8\" (without the quotes).\n   */\n  scoringParameters?: string[];\n  /**\n   * The name of a scoring profile to evaluate match scores for matching documents in order to sort\n   * the results.\n   */\n  scoringProfile?: string;\n  /**\n   * The comma-separated list of field names to which to scope the full-text search. When using\n   * fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each\n   * fielded search expression take precedence over any field names listed in this parameter.\n   */\n  searchFields?: SearchFieldArray<TModel>;\n  /**\n   * The language of the query.\n   */\n  queryLanguage?: QueryLanguage;\n  /**\n   * Improve search recall by spell-correcting individual search query terms.\n   */\n  speller?: QuerySpeller;\n  /**\n   * A value that specifies whether any or all of the search terms must be matched in order to\n   * count the document as a match. Possible values include: 'any', 'all'\n   */\n  searchMode?: SearchMode;\n  /**\n   * A value that specifies whether we want to calculate scoring statistics (such as document\n   * frequency) globally for more consistent scoring, or locally, for lower latency. Possible\n   * values include: 'Local', 'Global'\n   */\n  scoringStatistics?: ScoringStatistics;\n  /**\n   * A value to be used to create a sticky session, which can help to get more consistent results.\n   * As long as the same sessionId is used, a best-effort attempt will be made to target the same\n   * replica set. Be wary that reusing the same sessionID values repeatedly can interfere with the\n   * load balancing of the requests across replicas and adversely affect the performance of the\n   * search service. The value used as sessionId cannot start with a '_' character.\n   */\n  sessionId?: string;\n  /**\n   * The list of fields to retrieve. If unspecified, all fields marked as\n   * retrievable in the schema are included.\n   */\n  select?: SelectArray<TFields>;\n  /**\n   * The number of search results to skip. This value cannot be greater than 100,000. If you need\n   * to scan documents in sequence, but cannot use skip due to this limitation, consider using\n   * orderby on a totally-ordered key and filter with a range query instead.\n   */\n  skip?: number;\n  /**\n   * The number of search results to retrieve. This can be used in conjunction with $skip to\n   * implement client-side paging of search results. If results are truncated due to server-side\n   * paging, the response will include a continuation token that can be used to issue another\n   * Search request for the next page of results.\n   */\n  top?: number;\n  /**\n   * Defines options for vector search queries\n   */\n  vectorSearchOptions?: VectorSearchOptions<TModel>;\n\n  /** The query parameters to configure hybrid search behaviors. */\n  hybridSearch?: HybridSearch;\n}\n\n/**\n * Parameters for filtering, sorting, faceting, paging, and other search query behaviors.\n */\nexport type SearchRequestOptions<\n  TModel extends object,\n  TFields extends SelectFields<TModel> = SelectFields<TModel>,\n> = BaseSearchRequestOptions<TModel, TFields> & SearchRequestQueryTypeOptions;\n\nexport type SearchRequestQueryTypeOptions =\n  | {\n      queryType: \"semantic\";\n      /**\n       * Defines options for semantic search queries\n       */\n      semanticSearchOptions: SemanticSearchOptions;\n    }\n  | { queryType?: \"simple\" | \"full\" };\n\n/**\n * Contains a document found by a search query, plus associated metadata.\n */\nexport type SearchResult<\n  TModel extends object,\n  TFields extends SelectFields<TModel> = SelectFields<TModel>,\n> = {\n  /**\n   * The relevance score of the document compared to other documents returned by the query.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly score: number;\n  /**\n   * The relevance score computed by the semantic ranker for the top search results. Search results are sorted by the RerankerScore first and then by the Score. RerankerScore is only returned for queries of type 'semantic'.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly rerankerScore?: number;\n  /**\n   * Text fragments from the document that indicate the matching search terms, organized by each\n   * applicable field; null if hit highlighting was not enabled for the query.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly highlights?: { [k in SelectFields<TModel>]?: string[] };\n  /**\n   * Captions are the most representative passages from the document relatively to the search query. They are often used as document summary. Captions are only returned for queries of type 'semantic'.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly captions?: QueryCaptionResult[];\n\n  document: NarrowedModel<TModel, TFields>;\n\n  /**\n   * Contains debugging information that can be used to further explore your search results.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly documentDebugInfo?: DocumentDebugInfo;\n};\n\n/**\n * Response containing search results from an index.\n */\nexport interface SearchDocumentsResultBase {\n  /**\n   * The total count of results found by the search operation, or null if the count was not\n   * requested. If present, the count may be greater than the number of results in this response.\n   * This can happen if you use the $top or $skip parameters, or if Azure Cognitive Search can't\n   * return all the requested documents in a single Search response.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly count?: number;\n  /**\n   * A value indicating the percentage of the index that was included in the query, or null if\n   * minimumCoverage was not specified in the request.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly coverage?: number;\n  /**\n   * The facet query results for the search operation, organized as a collection of buckets for\n   * each faceted field; null if the query did not include any facet expressions.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly facets?: { [propertyName: string]: FacetResult[] };\n  /**\n   * The answers query results for the search operation; null if the answers query parameter was\n   * not specified or set to 'none'.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly answers?: QueryAnswerResult[];\n  /**\n   * Debug information that applies to the search results as a whole.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly debugInfo?: DebugInfo;\n  /**\n   * Reason that a partial response was returned for a semantic search request.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly semanticErrorReason?: SemanticErrorReason;\n  /**\n   * Type of partial response that was returned for a semantic search request.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly semanticSearchResultsType?: SemanticSearchResultsType;\n  /**\n   * Type of query rewrite that was used to retrieve documents.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly semanticQueryRewritesResultType?: SemanticQueryRewritesResultType;\n}\n\n/**\n * Response containing search results from an index.\n */\nexport interface SearchDocumentsResult<\n  TModel extends object,\n  TFields extends SelectFields<TModel> = SelectFields<TModel>,\n> extends SearchDocumentsResultBase {\n  /**\n   * The sequence of results returned by the query.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly results: SearchIterator<TModel, TFields>;\n}\n\n/**\n * Response containing search page results from an index.\n */\nexport interface SearchDocumentsPageResult<\n  TModel extends object,\n  TFields extends SelectFields<TModel> = SelectFields<TModel>,\n> extends SearchDocumentsResultBase {\n  /**\n   * The sequence of results returned by the query.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly results: SearchResult<TModel, TFields>[];\n  /**\n   * A token used for retrieving the next page of results when the server\n   * enforces pagination.\n   */\n  continuationToken?: string;\n}\n\n/**\n * Parameters for filtering, sorting, fuzzy matching, and other suggestions query behaviors.\n */\nexport interface SuggestRequest<\n  TModel extends object,\n  TFields extends SelectFields<TModel> = SelectFields<TModel>,\n> {\n  /**\n   * An OData expression that filters the documents considered for suggestions.\n   */\n  filter?: string;\n  /**\n   * A value indicating whether to use fuzzy matching for the suggestion query. Default is false.\n   * When set to true, the query will find suggestions even if there's a substituted or missing\n   * character in the search text. While this provides a better experience in some scenarios, it\n   * comes at a performance cost as fuzzy suggestion searches are slower and consume more\n   * resources.\n   */\n  useFuzzyMatching?: boolean;\n  /**\n   * A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted,\n   * hit highlighting of suggestions is disabled.\n   */\n  highlightPostTag?: string;\n  /**\n   * A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If\n   * omitted, hit highlighting of suggestions is disabled.\n   */\n  highlightPreTag?: string;\n  /**\n   * A number between 0 and 100 indicating the percentage of the index that must be covered by a\n   * suggestion query in order for the query to be reported as a success. This parameter can be\n   * useful for ensuring search availability even for services with only one replica. The default\n   * is 80.\n   */\n  minimumCoverage?: number;\n  /**\n   * The list of OData $orderby expressions by which to sort the results. Each\n   * expression can be either a field name or a call to either the geo.distance() or the\n   * search.score() functions. Each expression can be followed by asc to indicate ascending, or\n   * desc to indicate descending. The default is ascending order. Ties will be broken by the match\n   * scores of documents. If no $orderby is specified, the default sort order is descending by\n   * document match score. There can be at most 32 $orderby clauses.\n   */\n  orderBy?: string[];\n  /**\n   * The comma-separated list of field names to search for the specified search text. Target fields\n   * must be included in the specified suggester.\n   */\n  searchFields?: SearchFieldArray<TModel>;\n  /**\n   * The list of fields to retrieve. If unspecified, only the key field will be\n   * included in the results.\n   */\n  select?: SelectArray<TFields>;\n  /**\n  /**\n   * The number of suggestions to retrieve. This must be a value between 1 and 100. The default is\n   * 5.\n   */\n  top?: number;\n}\n\n/**\n * A result containing a document found by a suggestion query, plus associated metadata.\n */\nexport type SuggestResult<\n  TModel extends object,\n  TFields extends SelectFields<TModel> = SelectFields<TModel>,\n> = {\n  /**\n   * The text of the suggestion result.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly text: string;\n  document: SuggestNarrowedModel<TModel, TFields>;\n};\n\n/**\n * Response containing suggestion query results from an index.\n */\nexport interface SuggestDocumentsResult<\n  TModel extends object,\n  TFields extends SelectFields<TModel> = SelectFields<TModel>,\n> {\n  /**\n   * The sequence of results returned by the query.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly results: SuggestResult<TModel, TFields>[];\n  /**\n   * A value indicating the percentage of the index that was included in the query, or null if\n   * minimumCoverage was not set in the request.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly coverage?: number;\n}\n\n/**\n * Parameters for fuzzy matching, and other autocomplete query behaviors.\n */\nexport interface AutocompleteRequest<TModel extends object> {\n  /**\n   * Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms' to get shingles\n   * and 'oneTermWithContext' to use the current context while producing auto-completed terms.\n   * Possible values include: 'oneTerm', 'twoTerms', 'oneTermWithContext'\n   */\n  autocompleteMode?: AutocompleteMode;\n  /**\n   * An OData expression that filters the documents used to produce completed terms for the\n   * Autocomplete result.\n   */\n  filter?: string;\n  /**\n   * A value indicating whether to use fuzzy matching for the autocomplete query. Default is false.\n   * When set to true, the query will autocomplete terms even if there's a substituted or missing\n   * character in the search text. While this provides a better experience in some scenarios, it\n   * comes at a performance cost as fuzzy autocomplete queries are slower and consume more\n   * resources.\n   */\n  useFuzzyMatching?: boolean;\n  /**\n   * A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted,\n   * hit highlighting is disabled.\n   */\n  highlightPostTag?: string;\n  /**\n   * A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If\n   * omitted, hit highlighting is disabled.\n   */\n  highlightPreTag?: string;\n  /**\n   * A number between 0 and 100 indicating the percentage of the index that must be covered by an\n   * autocomplete query in order for the query to be reported as a success. This parameter can be\n   * useful for ensuring search availability even for services with only one replica. The default\n   * is 80.\n   */\n  minimumCoverage?: number;\n  /**\n   * The comma-separated list of field names to consider when querying for auto-completed terms.\n   * Target fields must be included in the specified suggester.\n   */\n  searchFields?: SearchFieldArray<TModel>;\n  /**\n   * The number of auto-completed terms to retrieve. This must be a value between 1 and 100. The\n   * default is 5.\n   */\n  top?: number;\n}\n\n/**\n * Represents an index action that operates on a document.\n */\nexport type IndexDocumentsAction<TModel> = {\n  /**\n   * The operation to perform on a document in an indexing batch. Possible values include:\n   * 'upload', 'merge', 'mergeOrUpload', 'delete'\n   */\n  __actionType: IndexActionType;\n} & Partial<TModel>;\n\n// END manually modified generated interfaces\n\n// Utility types\n\n/**\n * If `TFields` is never, an untyped string array\n * Otherwise, a narrowed `Fields[]` type to be used elsewhere in the consuming type.\n */\nexport type SelectArray<TFields = never> = [string] extends [TFields]\n  ? readonly TFields[]\n  : (<T>() => T extends TFields ? true : false) extends <T>() => T extends never ? true : false\n    ? readonly string[]\n    : readonly TFields[];\n\n/**\n * If `TModel` is an untyped object, an untyped string array\n * Otherwise, the slash-delimited fields of `TModel`.\n */\nexport type SearchFieldArray<TModel extends object = object> =\n  (<T>() => T extends TModel ? true : false) extends <T>() => T extends object ? true : false\n    ? readonly string[]\n    : readonly SelectFields<TModel>[];\n\nexport type UnionToIntersection<Union> =\n  // Distribute members of U into parameter position of a union of functions\n  (\n    Union extends unknown ? (_: Union) => unknown : never\n  ) extends // Infer the intersection of the members of U as a single intersected parameter type\n  (_: infer I) => unknown\n    ? I\n    : never;\n\n// Types that should not be included in SelectFields recursion\nexport type ExcludedODataTypes = Date | GeographyPoint;\n\n/**\n * Produces a union of valid Cognitive Search OData $select paths for T\n * using a post-order traversal of the field tree rooted at T.\n */\nexport type SelectFields<TModel extends object> =\n  // If T is never, any, or object, resolves to string\n  (<T>() => T extends TModel ? true : false) extends <T>() => T extends never ? true : false\n    ? string\n    : (<T>() => T extends TModel ? true : false) extends <T>() => T extends any ? true : false\n      ? string\n      : (<T>() => T extends TModel ? true : false) extends <T>() => T extends object ? true : false\n        ? string\n        : // If T is an array, allow selecting from fields in the array's element type\n          TModel extends Array<infer Elem>\n          ? // Allow selecting fields only from elements which are objects\n            Elem extends object\n            ? SelectFields<Elem>\n            : never\n          : {\n              // Only consider string keys\n              [Key in keyof TModel]: Key extends string\n                ? NonNullable<TModel[Key]> extends object\n                  ? NonNullable<TModel[Key]> extends ExcludedODataTypes\n                    ? // Excluded, so don't recur\n                      Key\n                    : // Extract subpaths from T[Key]\n                      SelectFields<NonNullable<TModel[Key]>> extends infer NextPaths\n                      ? // This check is required to avoid distributing `never` over the condition\n                        (<T>() => T extends NextPaths ? true : false) extends <\n                          T,\n                        >() => T extends never ? true : false\n                        ? Key\n                        : NextPaths extends string\n                          ? Key | `${Key}/${NextPaths}`\n                          : Key\n                      : never\n                  : // Not an object, so can't recur\n                    Key\n                : never;\n            }[keyof TModel & string] &\n              // Filter out undefined properties\n              string;\n\n/**\n * Deeply pick fields of T using valid Cognitive Search OData $select\n * paths.\n */\nexport type SearchPick<TModel extends object, TFields extends SelectFields<TModel>> =\n  (<T>() => T extends TModel ? true : false) extends <T>() => T extends object ? true : false\n    ? // Picking from an untyped object should return `object`\n      TModel\n    : // If paths is any or never, yield the original type\n      (<T>() => T extends TFields ? true : false) extends <T>() => T extends any ? true : false\n      ? TModel\n      : (<T>() => T extends TFields ? true : false) extends <T>() => T extends never ? true : false\n        ? TModel\n        : // We're going to get a union of individual interfaces for each field in T that's selected, so convert that to an intersection.\n          UnionToIntersection<\n            // Paths is a union or single string type, so if it's a union it will be _distributed_ over this conditional.\n            // Fortunately, template literal types are not greedy, so we can infer the field name easily.\n            TFields extends `${infer FieldName}/${infer RestPaths}`\n              ? // Symbols and numbers are invalid types for field names\n                FieldName extends keyof TModel & string\n                ? NonNullable<TModel[FieldName]> extends Array<infer Elem>\n                  ? Elem extends object\n                    ? // Extends clause is necessary to refine the constraint of RestPaths\n                      RestPaths extends SelectFields<Elem>\n                      ? // Narrow the type of every element in the array\n                        {\n                          [Key in keyof TModel as Key & FieldName]: Array<\n                            SearchPick<Elem, RestPaths>\n                          >;\n                        }\n                      : // Unreachable by construction\n                        never\n                    : // Don't recur on arrays of non-object types\n                      never\n                  : NonNullable<TModel[FieldName]> extends object\n                    ? // Recur :)\n                      {\n                        [Key in keyof TModel as Key & FieldName]: RestPaths extends SelectFields<\n                          TModel[Key] & {\n                            // This empty intersection fixes `T[Key]` not being narrowed to an object type in older versions of TS\n                          }\n                        >\n                          ?\n                              | SearchPick<\n                                  TModel[Key] & {\n                                    // Ditto\n                                  },\n                                  RestPaths\n                                >\n                              | Extract<TModel[Key], null>\n                          : // Unreachable by construction\n                            never;\n                      }\n                    : // Unreachable by construction\n                      never\n                : // Ignore symbols and numbers\n                  never\n              : // Otherwise, capture the paths that are simple keys of T itself\n                TFields extends keyof TModel\n                ? Pick<TModel, TFields> | Extract<TModel, null>\n                : never\n          > & {\n            // This useless intersection actually prevents the TypeScript language server from\n            // expanding the definition of SearchPick<TModel, Paths> in IntelliSense. Since we're\n            // sure the type always yields an object, this intersection does not alter the type\n            // at all, only the display string of the type.\n          };\n\nexport type ExtractDocumentKey<TModel> = {\n  [K in keyof TModel as TModel[K] extends string | undefined ? K : never]: TModel[K];\n};\n\n/**\n * Narrows the Model type to include only the selected Fields\n */\nexport type NarrowedModel<\n  TModel extends object,\n  TFields extends SelectFields<TModel> = SelectFields<TModel>,\n> =\n  // If the model isn't specified, the type is the same as the input type\n  (<T>() => T extends TModel ? true : false) extends <T>() => T extends never ? true : false\n    ? TModel\n    : (<T>() => T extends TModel ? true : false) extends <T>() => T extends object ? true : false\n      ? TModel\n      : (<T>() => T extends TModel ? true : false) extends <T>() => T extends any ? true : false\n        ? TModel\n        : (<T>() => T extends TModel ? true : false) extends <T>() => T extends unknown\n              ? true\n              : false\n          ? TModel\n          : (<T>() => T extends TFields ? true : false) extends <T>() => T extends never\n                ? true\n                : false\n            ? // If fields aren't specified, this object can't exist\n              never\n            : (<T>() => T extends TFields ? true : false) extends <\n                  T,\n                >() => T extends SelectFields<TModel> ? true : false\n              ? // Avoid calculating the narrowed type if every field is specified\n                TModel\n              : SearchPick<TModel, TFields>;\n\nexport type SuggestNarrowedModel<\n  TModel extends object,\n  TFields extends SelectFields<TModel> = SelectFields<TModel>,\n> =\n  (<T>() => T extends TModel ? true : false) extends <T>() => T extends never ? true : false\n    ? TModel\n    : (<T>() => T extends TModel ? true : false) extends <T>() => T extends object ? true : false\n      ? TModel\n      : (<T>() => T extends TFields ? true : false) extends <T>() => T extends never ? true : false\n        ? // Filter nullable (i.e. non-key) properties from the model, as they're not returned by the\n          // service by default\n          keyof ExtractDocumentKey<TModel> extends never\n          ? // Return the original model if none of the properties are non-nullable\n            TModel\n          : ExtractDocumentKey<TModel>\n        : // TFields isn't narrowed to exclude null by the first condition, so it needs to be narrowed\n          // here\n          TFields extends SelectFields<TModel>\n          ? NarrowedModel<TModel, TFields>\n          : // Unreachable by construction\n            never;\n\n/** Description of fields that were sent to the semantic enrichment process, as well as how they were used */\nexport interface QueryResultDocumentSemanticField {\n  /**\n   * The name of the field that was sent to the semantic enrichment process\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: string;\n  /**\n   * The way the field was used for the semantic enrichment process (fully used, partially used, or unused)\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly state?: SemanticFieldState;\n}\n\n/** Contains debugging information that can be used to further explore your search results. */\nexport interface DocumentDebugInfo {\n  /**\n   * Contains debugging information specific to semantic search queries.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly semantic?: SemanticDebugInfo;\n  /**\n   * Contains debugging information specific to vector and hybrid search.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly vectors?: VectorsDebugInfo;\n}\n\n/**\n * Debug options for semantic search queries.\n */\nexport interface SemanticDebugInfo {\n  /**\n   * The title field that was sent to the semantic enrichment process, as well as how it was used\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly titleField?: QueryResultDocumentSemanticField;\n  /**\n   * The content fields that were sent to the semantic enrichment process, as well as how they were used\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly contentFields?: QueryResultDocumentSemanticField[];\n  /**\n   * The keyword fields that were sent to the semantic enrichment process, as well as how they were used\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly keywordFields?: QueryResultDocumentSemanticField[];\n  /**\n   * The raw concatenated strings that were sent to the semantic enrichment process.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly rerankerInput?: QueryResultDocumentRerankerInput;\n}\n\n/**\n * Extracts answer candidates from the contents of the documents returned in response to a query\n * expressed as a question in natural language.\n */\nexport interface ExtractiveQueryAnswer {\n  answerType: \"extractive\";\n  /**\n   * The number of answers returned. Default count is 1\n   */\n  count?: number;\n  /**\n   * The confidence threshold. Default threshold is 0.7\n   */\n  threshold?: number;\n  /**\n   * An optional upper bound on the number of characters in each answer.\n   */\n  maxAnswerLength?: number;\n}\n\n/**\n * A value that specifies whether answers should be returned as part of the search response.\n * This parameter is only valid if the query type is 'semantic'. If set to `extractive`, the query\n * returns answers extracted from key passages in the highest ranked documents.\n */\nexport type QueryAnswer = ExtractiveQueryAnswer;\n\n/** Extracts captions from the matching documents that contain passages relevant to the search query. */\nexport interface ExtractiveQueryCaption {\n  captionType: \"extractive\";\n  highlight?: boolean;\n  /**\n   * An optional upper bound on the number of characters in each caption.\n   */\n  maxCaptionLength?: number;\n}\n\n/**\n * A value that specifies whether captions should be returned as part of the search response.\n * This parameter is only valid if the query type is 'semantic'. If set, the query returns captions\n * extracted from key passages in the highest ranked documents. When Captions is 'extractive',\n * highlighting is enabled by default. Defaults to 'none'.\n */\nexport type QueryCaption = ExtractiveQueryCaption;\n\n/**\n * Defines options for semantic search queries\n */\nexport interface SemanticSearchOptions {\n  /**\n   * The name of a semantic configuration that will be used when processing documents for queries of\n   * type semantic.\n   */\n  configurationName?: string;\n  /**\n   * Allows the user to choose whether a semantic call should fail completely, or to return partial\n   * results (default).\n   */\n  errorMode?: SemanticErrorMode;\n  /**\n   * Allows the user to set an upper bound on the amount of time it takes for semantic enrichment\n   * to finish processing before the request fails.\n   */\n  maxWaitInMilliseconds?: number;\n  /**\n   * If set, the query returns answers extracted from key passages in the highest ranked documents.\n   */\n  answers?: QueryAnswer;\n  /**\n   * If set, the query returns captions extracted from key passages in the highest ranked\n   * documents. When Captions is set to 'extractive', highlighting is enabled by default. Defaults\n   * to 'None'.\n   */\n  captions?: QueryCaption;\n  /**\n   * When QueryRewrites is set to `generative`, the query terms are sent to a generate model which will\n   * produce 10 (default) rewrites to help increase the recall of the request. Defaults to `none`.\n   */\n  queryRewrites?: QueryRewrites;\n  /**\n   * Allows setting a separate search query that will be solely used for semantic reranking,\n   * semantic captions and semantic answers. Is useful for scenarios where there is a need to use\n   * different queries between the base retrieval and ranking phase, and the L2 semantic phase.\n   */\n  semanticQuery?: string;\n  /**\n   * The list of field names used for semantic search.\n   */\n  semanticFields?: string[];\n  /**\n   * Enables a debugging tool that can be used to further explore your search results.\n   */\n  debugMode?: QueryDebugMode;\n}\n\n/** Defines options for query rewrites. */\nexport type QueryRewrites = GenerativeQueryRewrites;\n\n/** Generate alternative query terms to increase the recall of a search request. */\nexport interface GenerativeQueryRewrites {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  rewritesType: \"generative\";\n  /** The number of query rewrites to generate. Defaults to 10.*/\n  count?: number;\n}\n\n/**\n * Defines options for vector search queries\n */\nexport interface VectorSearchOptions<TModel extends object> {\n  /**\n   * The query parameters for vector, hybrid, and multi-vector search queries.\n   */\n  queries: VectorQuery<TModel>[];\n  /**\n   * Determines whether or not filters are applied before or after the vector search is performed.\n   * Default is 'preFilter'.\n   */\n  filterMode?: VectorFilterMode;\n}\n/** The threshold used for vector queries. */\nexport interface BaseVectorThreshold {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"vectorSimilarity\" | \"searchScore\";\n}\n\n/** The results of the vector query will be filtered based on the vector similarity metric. Note this is the canonical definition of similarity metric, not the 'distance' version. The threshold direction (larger or smaller) will be chosen automatically according to the metric used by the field. */\nexport interface VectorSimilarityThreshold extends BaseVectorThreshold {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"vectorSimilarity\";\n  /** The threshold will filter based on the similarity metric value. Note this is the canonical definition of similarity metric, not the 'distance' version. The threshold direction (larger or smaller) will be chosen automatically according to the metric used by the field. */\n  value: number;\n}\n\n/** The results of the vector query will filter based on the '\\@search.score' value. Note this is the \\@search.score returned as part of the search response. The threshold direction will be chosen for higher \\@search.score. */\nexport interface SearchScoreThreshold extends BaseVectorThreshold {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"searchScore\";\n  /** The threshold will filter based on the '\\@search.score' value. Note this is the \\@search.score returned as part of the search response. The threshold direction will be chosen for higher \\@search.score. */\n  value: number;\n}\n\n/** The threshold used for vector queries. */\nexport type VectorThreshold = VectorSimilarityThreshold | SearchScoreThreshold;\nexport type SemanticErrorMode = `${KnownSemanticErrorMode}`;\nexport type SemanticErrorReason = `${KnownSemanticErrorReason}`;\nexport type SemanticSearchResultsType = `${KnownSemanticSearchResultsType}`;\nexport type VectorFilterMode = `${KnownVectorFilterMode}`;\nexport type VectorQueryKind = `${KnownVectorQueryKind}`;\n"]}