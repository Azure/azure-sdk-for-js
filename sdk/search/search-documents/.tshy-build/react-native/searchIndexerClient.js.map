{"version":3,"file":"searchIndexerClient.js","sourceRoot":"","sources":["../../src/searchIndexerClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { KeyCredential, TokenCredential } from \"@azure/core-auth\";\nimport { isTokenCredential } from \"@azure/core-auth\";\nimport type { InternalClientPipelineOptions } from \"@azure/core-client\";\nimport type { ExtendedCommonClientOptions } from \"@azure/core-http-compat\";\nimport type { Pipeline } from \"@azure/core-rest-pipeline\";\nimport { bearerTokenAuthenticationPolicy } from \"@azure/core-rest-pipeline\";\nimport type { SearchIndexerStatus } from \"./generated/service/models/index.js\";\nimport { SearchServiceClient as GeneratedClient } from \"./generated/service/searchServiceClient.js\";\nimport { logger } from \"./logger.js\";\nimport { createOdataMetadataPolicy } from \"./odataMetadataPolicy.js\";\nimport { createSearchApiKeyCredentialPolicy } from \"./searchApiKeyCredentialPolicy.js\";\nimport { KnownSearchAudience } from \"./searchAudience.js\";\nimport type {\n  CreateDataSourceConnectionOptions,\n  CreateIndexerOptions,\n  CreateorUpdateDataSourceConnectionOptions,\n  CreateorUpdateIndexerOptions,\n  CreateOrUpdateSkillsetOptions,\n  CreateSkillsetOptions,\n  DeleteDataSourceConnectionOptions,\n  DeleteIndexerOptions,\n  DeleteSkillsetOptions,\n  GetDataSourceConnectionOptions,\n  GetIndexerOptions,\n  GetIndexerStatusOptions,\n  GetSkillSetOptions,\n  ListDataSourceConnectionsOptions,\n  ListIndexersOptions,\n  ListSkillsetsOptions,\n  ResetDocumentsOptions,\n  ResetIndexerOptions,\n  ResetSkillsOptions,\n  RunIndexerOptions,\n  SearchIndexer,\n  SearchIndexerDataSourceConnection,\n  SearchIndexerSkillset,\n} from \"./serviceModels.js\";\nimport * as utils from \"./serviceUtils.js\";\nimport { createSpan } from \"./tracing.js\";\n\n/**\n * Client options used to configure Cognitive Search API requests.\n */\nexport interface SearchIndexerClientOptions extends ExtendedCommonClientOptions {\n  /**\n   * The API version to use when communicating with the service.\n   * @deprecated use {@Link serviceVersion} instead\n   */\n  apiVersion?: string;\n\n  /**\n   * The service version to use when communicating with the service.\n   */\n  serviceVersion?: string;\n\n  /**\n   * The Audience to use for authentication with Azure Active Directory (AAD). The\n   * audience is not considered when using a shared key.\n   * {@link KnownSearchAudience} can be used interchangeably with audience\n   */\n  audience?: string;\n}\n\n/**\n * Class to perform operations to manage\n * (create, update, list/delete)\n * indexers, datasources & skillsets.\n */\nexport class SearchIndexerClient {\n  /**\n   * The API version to use when communicating with the service.\n   */\n  public readonly serviceVersion: string = utils.defaultServiceVersion;\n\n  /**\n   * The API version to use when communicating with the service.\n   * @deprecated use {@Link serviceVersion} instead\n   */\n  public readonly apiVersion: string = utils.defaultServiceVersion;\n\n  /**\n   * The endpoint of the search service\n   */\n  public readonly endpoint: string;\n\n  /**\n   * @hidden\n   * A reference to the auto-generated SearchServiceClient\n   */\n  private readonly client: GeneratedClient;\n\n  /**\n   * A reference to the internal HTTP pipeline for use with raw requests\n   */\n  public readonly pipeline: Pipeline;\n\n  /**\n   * Creates an instance of SearchIndexerClient.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleSearchIndexerClient\n   * import { SearchIndexerClient, AzureKeyCredential } from \"@azure/search-documents\";\n   *\n   * const indexerClient = new SearchIndexerClient(\"<endpoint>\", new AzureKeyCredential(\"<apiKey>\"));\n   * ```\n   * @param endpoint - The endpoint of the search service\n   * @param credential - Used to authenticate requests to the service.\n   * @param options - Used to configure the Search client.\n   */\n  constructor(\n    endpoint: string,\n    credential: KeyCredential | TokenCredential,\n    options: SearchIndexerClientOptions = {},\n  ) {\n    this.endpoint = endpoint;\n\n    const internalClientPipelineOptions: InternalClientPipelineOptions = {\n      ...options,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n          additionalAllowedHeaderNames: [\n            \"elapsed-time\",\n            \"Location\",\n            \"OData-MaxVersion\",\n            \"OData-Version\",\n            \"Prefer\",\n            \"throttle-reason\",\n          ],\n        },\n      },\n    };\n\n    this.serviceVersion =\n      options.serviceVersion ?? options.apiVersion ?? utils.defaultServiceVersion;\n    this.apiVersion = this.serviceVersion;\n\n    this.client = new GeneratedClient(\n      this.endpoint,\n      this.serviceVersion,\n      internalClientPipelineOptions,\n    );\n    this.pipeline = this.client.pipeline;\n\n    if (isTokenCredential(credential)) {\n      const scope: string = options.audience\n        ? `${options.audience}/.default`\n        : `${KnownSearchAudience.AzurePublicCloud}/.default`;\n\n      this.client.pipeline.addPolicy(\n        bearerTokenAuthenticationPolicy({ credential, scopes: scope }),\n      );\n    } else {\n      this.client.pipeline.addPolicy(createSearchApiKeyCredentialPolicy(credential));\n    }\n\n    this.client.pipeline.addPolicy(createOdataMetadataPolicy(\"minimal\"));\n  }\n\n  /**\n   * Retrieves a list of existing indexers in the service.\n   * @param options - Options to the list indexers operation.\n   */\n  public async listIndexers(options: ListIndexersOptions = {}): Promise<Array<SearchIndexer>> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-listIndexers\", options);\n    try {\n      const result = await this.client.indexers.list(updatedOptions);\n      return result.indexers.map(utils.generatedSearchIndexerToPublicSearchIndexer);\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves a list of names of existing indexers in the service.\n   * @param options - Options to the list indexers operation.\n   */\n  // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n  public async listIndexersNames(options: ListIndexersOptions = {}): Promise<Array<string>> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-listIndexersNames\", options);\n    try {\n      const result = await this.client.indexers.list({\n        ...updatedOptions,\n        select: \"name\",\n      });\n      return result.indexers.map((idx) => idx.name);\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves a list of existing data sources in the service.\n   * @param options - Options to the list indexers operation.\n   */\n  public async listDataSourceConnections(\n    options: ListDataSourceConnectionsOptions = {},\n  ): Promise<Array<SearchIndexerDataSourceConnection>> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexerClient-listDataSourceConnections\",\n      options,\n    );\n    try {\n      const result = await this.client.dataSources.list(updatedOptions);\n      return result.dataSources.map(utils.generatedDataSourceToPublicDataSource);\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves a list of names of existing data sources in the service.\n   * @param options - Options to the list indexers operation.\n   */\n  public async listDataSourceConnectionsNames(\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options: ListDataSourceConnectionsOptions = {},\n  ): Promise<Array<string>> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexerClient-listDataSourceConnectionsNames\",\n      options,\n    );\n    try {\n      const result = await this.client.dataSources.list({\n        ...updatedOptions,\n        select: \"name\",\n      });\n      return result.dataSources.map((ds) => ds.name);\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves a list of existing Skillsets in the service.\n   * @param options - Options to the list Skillsets operation.\n   */\n  public async listSkillsets(\n    options: ListSkillsetsOptions = {},\n  ): Promise<Array<SearchIndexerSkillset>> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-listSkillsets\", options);\n    try {\n      const result = await this.client.skillsets.list(updatedOptions);\n      return result.skillsets.map(utils.generatedSkillsetToPublicSkillset);\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves a list of names of existing Skillsets in the service.\n   * @param options - Options to the list Skillsets operation.\n   */\n  // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n  public async listSkillsetsNames(options: ListSkillsetsOptions = {}): Promise<Array<string>> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-listSkillsetsNames\", options);\n    try {\n      const result = await this.client.skillsets.list({\n        ...updatedOptions,\n        select: \"name\",\n      });\n      return result.skillsets.map((sks) => sks.name);\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves information about an Indexer.\n   * @param indexerName - The name of the Indexer.\n   * @param options - Additional optional arguments.\n   */\n  public async getIndexer(\n    indexerName: string,\n    options: GetIndexerOptions = {},\n  ): Promise<SearchIndexer> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-getIndexer\", options);\n    try {\n      const result = await this.client.indexers.get(indexerName, updatedOptions);\n      return utils.generatedSearchIndexerToPublicSearchIndexer(result);\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves information about a DataSource\n   * @param dataSourceName - The name of the DataSource\n   * @param options - Additional optional arguments\n   */\n  public async getDataSourceConnection(\n    dataSourceConnectionName: string,\n    options: GetDataSourceConnectionOptions = {},\n  ): Promise<SearchIndexerDataSourceConnection> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexerClient-getDataSourceConnection\",\n      options,\n    );\n    try {\n      const result = await this.client.dataSources.get(dataSourceConnectionName, updatedOptions);\n      return utils.generatedDataSourceToPublicDataSource(result);\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves information about an Skillset.\n   * @param indexName - The name of the Skillset.\n   * @param options - Additional optional arguments.\n   */\n  public async getSkillset(\n    skillsetName: string,\n    options: GetSkillSetOptions = {},\n  ): Promise<SearchIndexerSkillset> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-getSkillset\", options);\n    try {\n      const result = await this.client.skillsets.get(skillsetName, updatedOptions);\n      return utils.generatedSkillsetToPublicSkillset(result);\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new indexer in a search service.\n   * @param indexer - The indexer definition to create in a search service.\n   * @param options - Additional optional arguments.\n   */\n  public async createIndexer(\n    indexer: SearchIndexer,\n    options: CreateIndexerOptions = {},\n  ): Promise<SearchIndexer> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-createIndexer\", options);\n    try {\n      const result = await this.client.indexers.create(\n        utils.publicSearchIndexerToGeneratedSearchIndexer(indexer),\n        updatedOptions,\n      );\n      return utils.generatedSearchIndexerToPublicSearchIndexer(result);\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new dataSource in a search service.\n   * @param dataSourceConnection - The dataSource definition to create in a search service.\n   * @param options - Additional optional arguments.\n   */\n  public async createDataSourceConnection(\n    dataSourceConnection: SearchIndexerDataSourceConnection,\n    options: CreateDataSourceConnectionOptions = {},\n  ): Promise<SearchIndexerDataSourceConnection> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexerClient-createDataSourceConnection\",\n      options,\n    );\n    try {\n      const result = await this.client.dataSources.create(\n        utils.publicDataSourceToGeneratedDataSource(dataSourceConnection),\n        updatedOptions,\n      );\n      return utils.generatedDataSourceToPublicDataSource(result);\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new skillset in a search service.\n   * @param skillset - The skillset containing one or more skills to create in a search service.\n   * @param options - Additional optional arguments.\n   */\n  public async createSkillset(\n    skillset: SearchIndexerSkillset,\n    options: CreateSkillsetOptions = {},\n  ): Promise<SearchIndexerSkillset> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-createSkillset\", options);\n    try {\n      const result = await this.client.skillsets.create(\n        utils.publicSkillsetToGeneratedSkillset(skillset),\n        updatedOptions,\n      );\n      return utils.generatedSkillsetToPublicSkillset(result);\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new indexer or modifies an existing one.\n   * @param indexer - The information describing the indexer to be created/updated.\n   * @param options - Additional optional arguments.\n   */\n  public async createOrUpdateIndexer(\n    indexer: SearchIndexer,\n    options: CreateorUpdateIndexerOptions = {},\n  ): Promise<SearchIndexer> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexerClient-createOrUpdateIndexer\",\n      options,\n    );\n\n    const { onlyIfUnchanged, ...restOptions } = updatedOptions;\n    try {\n      const etag = onlyIfUnchanged ? indexer.etag : undefined;\n\n      const result = await this.client.indexers.createOrUpdate(\n        indexer.name,\n        utils.publicSearchIndexerToGeneratedSearchIndexer(indexer),\n        {\n          ...restOptions,\n          ifMatch: etag,\n        },\n      );\n      return utils.generatedSearchIndexerToPublicSearchIndexer(result);\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new datasource or modifies an existing one.\n   * @param dataSourceConnection - The information describing the datasource to be created/updated.\n   * @param options - Additional optional arguments.\n   */\n  public async createOrUpdateDataSourceConnection(\n    dataSourceConnection: SearchIndexerDataSourceConnection,\n    options: CreateorUpdateDataSourceConnectionOptions = {},\n  ): Promise<SearchIndexerDataSourceConnection> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexerClient-createOrUpdateDataSourceConnection\",\n      options,\n    );\n    try {\n      const etag = options.onlyIfUnchanged ? dataSourceConnection.etag : undefined;\n\n      const result = await this.client.dataSources.createOrUpdate(\n        dataSourceConnection.name,\n        utils.publicDataSourceToGeneratedDataSource(dataSourceConnection),\n        {\n          ...updatedOptions,\n          ifMatch: etag,\n        },\n      );\n      return utils.generatedDataSourceToPublicDataSource(result);\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new Skillset or modifies an existing one.\n   * @param skillset - The information describing the index to be created.\n   * @param options - Additional optional arguments.\n   */\n  public async createOrUpdateSkillset(\n    skillset: SearchIndexerSkillset,\n    options: CreateOrUpdateSkillsetOptions = {},\n  ): Promise<SearchIndexerSkillset> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexerClient-createOrUpdateSkillset\",\n      options,\n    );\n    try {\n      const etag = options.onlyIfUnchanged ? skillset.etag : undefined;\n\n      const result = await this.client.skillsets.createOrUpdate(\n        skillset.name,\n        utils.publicSkillsetToGeneratedSkillset(skillset),\n        {\n          ...updatedOptions,\n          ifMatch: etag,\n        },\n      );\n\n      return utils.generatedSkillsetToPublicSkillset(result);\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes an existing indexer.\n   * @param indexer - Indexer/Name of the indexer to delete.\n   * @param options - Additional optional arguments.\n   */\n  public async deleteIndexer(\n    indexer: string | SearchIndexer,\n    options: DeleteIndexerOptions = {},\n  ): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-deleteIndexer\", options);\n    try {\n      const indexerName: string = typeof indexer === \"string\" ? indexer : indexer.name;\n      const etag =\n        typeof indexer === \"string\"\n          ? undefined\n          : options.onlyIfUnchanged\n            ? indexer.etag\n            : undefined;\n\n      await this.client.indexers.delete(indexerName, {\n        ...updatedOptions,\n        ifMatch: etag,\n      });\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes an existing datasource.\n   * @param dataSource - Datasource/Name of the datasource to delete.\n   * @param options - Additional optional arguments.\n   */\n  public async deleteDataSourceConnection(\n    dataSourceConnection: string | SearchIndexerDataSourceConnection,\n    options: DeleteDataSourceConnectionOptions = {},\n  ): Promise<void> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexerClient-deleteDataSourceConnection\",\n      options,\n    );\n    try {\n      const dataSourceConnectionName: string =\n        typeof dataSourceConnection === \"string\" ? dataSourceConnection : dataSourceConnection.name;\n      const etag =\n        typeof dataSourceConnection === \"string\"\n          ? undefined\n          : options.onlyIfUnchanged\n            ? dataSourceConnection.etag\n            : undefined;\n\n      await this.client.dataSources.delete(dataSourceConnectionName, {\n        ...updatedOptions,\n        ifMatch: etag,\n      });\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes an existing Skillset.\n   * @param skillset - Skillset/Name of the Skillset to delete.\n   * @param options - Additional optional arguments.\n   */\n  public async deleteSkillset(\n    skillset: string | SearchIndexerSkillset,\n    options: DeleteSkillsetOptions = {},\n  ): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-deleteSkillset\", options);\n    try {\n      const skillsetName: string = typeof skillset === \"string\" ? skillset : skillset.name;\n      const etag =\n        typeof skillset === \"string\"\n          ? undefined\n          : options.onlyIfUnchanged\n            ? skillset.etag\n            : undefined;\n\n      await this.client.skillsets.delete(skillsetName, {\n        ...updatedOptions,\n        ifMatch: etag,\n      });\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns the current status and execution history of an indexer.\n   * @param indexerName - The name of the indexer.\n   * @param options - Additional optional arguments.\n   */\n  public async getIndexerStatus(\n    indexerName: string,\n    options: GetIndexerStatusOptions = {},\n  ): Promise<SearchIndexerStatus> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-getIndexerStatus\", options);\n    try {\n      const result = await this.client.indexers.getStatus(indexerName, updatedOptions);\n      return result;\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Resets the change tracking state associated with an indexer.\n   * @param indexerName - The name of the indexer to reset.\n   * @param options - Additional optional arguments.\n   */\n  public async resetIndexer(indexerName: string, options: ResetIndexerOptions = {}): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-resetIndexer\", options);\n    try {\n      await this.client.indexers.reset(indexerName, updatedOptions);\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Runs an indexer on-demand.\n   * @param indexerName - The name of the indexer to run.\n   * @param options - Additional optional arguments.\n   */\n  public async runIndexer(indexerName: string, options: RunIndexerOptions = {}): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-runIndexer\", options);\n    try {\n      await this.client.indexers.run(indexerName, updatedOptions);\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Resets specific documents in the datasource to be selectively re-ingested by the indexer.\n   * @param indexerName - The name of the indexer to reset documents for.\n   * @param options - Additional optional arguments.\n   */\n  public async resetDocuments(\n    indexerName: string,\n    options: ResetDocumentsOptions = {},\n  ): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-resetDocs\", options);\n    try {\n      await this.client.indexers.resetDocs(indexerName, {\n        ...updatedOptions,\n        keysOrIds: {\n          documentKeys: updatedOptions.documentKeys,\n          datasourceDocumentIds: updatedOptions.datasourceDocumentIds,\n        },\n      });\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Reset an existing skillset in a search service.\n   * @param skillsetName - The name of the skillset to reset.\n   * @param skillNames - The names of skills to reset.\n   * @param options - The options parameters.\n   */\n  public async resetSkills(skillsetName: string, options: ResetSkillsOptions = {}): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexerClient-resetSkills\", options);\n    try {\n      await this.client.skillsets.resetSkills(\n        skillsetName,\n        { skillNames: options.skillNames },\n        updatedOptions,\n      );\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n"]}