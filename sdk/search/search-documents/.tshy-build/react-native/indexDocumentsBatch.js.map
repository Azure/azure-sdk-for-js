{"version":3,"file":"indexDocumentsBatch.js","sourceRoot":"","sources":["../../src/indexDocumentsBatch.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAIlC;;;GAGG;AACH,MAAM,OAAO,mBAAmB;IAM9B,YAAY,UAA0C,EAAE;QACtD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,SAAmB;QAC/B,MAAM,KAAK,GAAG,SAAS,CAAC,GAAG,CAA+B,CAAC,GAAG,EAAE,EAAE;YAChE,uCACK,GAAG,KACN,YAAY,EAAE,QAAQ,IACtB;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC;IAC9B,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,SAAmB;QAC9B,MAAM,KAAK,GAAG,SAAS,CAAC,GAAG,CAA+B,CAAC,GAAG,EAAE,EAAE;YAChE,uCACK,GAAG,KACN,YAAY,EAAE,OAAO,IACrB;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC;IAC9B,CAAC;IAED;;;;OAIG;IACI,aAAa,CAAC,SAAmB;QACtC,MAAM,KAAK,GAAG,SAAS,CAAC,GAAG,CAA+B,CAAC,GAAG,EAAE,EAAE;YAChE,uCACK,GAAG,KACN,YAAY,EAAE,eAAe,IAC7B;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC;IAC9B,CAAC;IAeM,MAAM,CAAC,kBAA2C,EAAE,SAAoB;QAC7E,IAAI,SAAS,EAAE,CAAC;YACd,MAAM,OAAO,GAAG,kBAAkC,CAAC;YAEnD,MAAM,KAAK,GAAG,SAAS,CAAC,GAAG,CAA+B,CAAC,QAAQ,EAAE,EAAE;gBACrE,OAAO;oBACL,YAAY,EAAE,QAAQ;oBACtB,CAAC,OAAO,CAAC,EAAE,QAAQ;iBACY,CAAC;YACpC,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC;QAC9B,CAAC;aAAM,CAAC;YACN,MAAM,SAAS,GAAG,kBAA8B,CAAC;YAEjD,MAAM,KAAK,GAAG,SAAS,CAAC,GAAG,CAA+B,CAAC,QAAQ,EAAE,EAAE;gBACrE,OAAO,gBACL,YAAY,EAAE,QAAQ,IACnB,QAAQ,CACoB,CAAC;YACpC,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { IndexDocumentsAction } from \"./indexModels.js\";\n\n/**\n * Class used to perform batch operations\n * with multiple documents to the index.\n */\nexport class IndexDocumentsBatch<TModel> {\n  /**\n   * The set of actions taken in this batch.\n   */\n  public readonly actions: IndexDocumentsAction<TModel>[];\n\n  constructor(actions: IndexDocumentsAction<TModel>[] = []) {\n    this.actions = actions;\n  }\n\n  /**\n   * Upload an array of documents to the index.\n   * @param documents - The documents to upload.\n   */\n  public upload(documents: TModel[]): void {\n    const batch = documents.map<IndexDocumentsAction<TModel>>((doc) => {\n      return {\n        ...doc,\n        __actionType: \"upload\",\n      };\n    });\n\n    this.actions.push(...batch);\n  }\n\n  /**\n   * Update a set of documents in the index.\n   * For more details about how merging works, see https://learn.microsoft.com/en-us/rest/api/searchservice/AddUpdate-or-Delete-Documents\n   * @param documents - The updated documents.\n   */\n  public merge(documents: TModel[]): void {\n    const batch = documents.map<IndexDocumentsAction<TModel>>((doc) => {\n      return {\n        ...doc,\n        __actionType: \"merge\",\n      };\n    });\n\n    this.actions.push(...batch);\n  }\n\n  /**\n   * Update a set of documents in the index or uploads them if they don't exist.\n   * For more details about how merging works, see https://learn.microsoft.com/en-us/rest/api/searchservice/AddUpdate-or-Delete-Documents\n   * @param documents - The new/updated documents.\n   */\n  public mergeOrUpload(documents: TModel[]): void {\n    const batch = documents.map<IndexDocumentsAction<TModel>>((doc) => {\n      return {\n        ...doc,\n        __actionType: \"mergeOrUpload\",\n      };\n    });\n\n    this.actions.push(...batch);\n  }\n\n  /**\n   * Delete a set of documents.\n   * @param keyName - The name of their primary key in the index.\n   * @param keyValues - The primary key values of documents to delete.\n   */\n  public delete(keyName: keyof TModel, keyValues: string[]): void;\n\n  /**\n   * Delete a set of documents.\n   * @param documents - Documents to be deleted.\n   */\n  public delete(documents: TModel[]): void;\n\n  public delete(keyNameOrDocuments: keyof TModel | TModel[], keyValues?: string[]): void {\n    if (keyValues) {\n      const keyName = keyNameOrDocuments as keyof TModel;\n\n      const batch = keyValues.map<IndexDocumentsAction<TModel>>((keyValue) => {\n        return {\n          __actionType: \"delete\",\n          [keyName]: keyValue,\n        } as IndexDocumentsAction<TModel>;\n      });\n\n      this.actions.push(...batch);\n    } else {\n      const documents = keyNameOrDocuments as TModel[];\n\n      const batch = documents.map<IndexDocumentsAction<TModel>>((document) => {\n        return {\n          __actionType: \"delete\",\n          ...document,\n        } as IndexDocumentsAction<TModel>;\n      });\n\n      this.actions.push(...batch);\n    }\n  }\n}\n"]}