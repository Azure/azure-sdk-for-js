/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { SearchIndexerDataSource as SearchIndexerDataSourceMapper, DocumentKeysOrIds as DocumentKeysOrIdsMapper, SearchIndexer as SearchIndexerMapper, SearchIndexerSkillset as SearchIndexerSkillsetMapper, SkillNames as SkillNamesMapper, SynonymMap as SynonymMapMapper, SearchIndex as SearchIndexMapper, AnalyzeRequest as AnalyzeRequestMapper, SearchAlias as SearchAliasMapper, } from "../models/mappers.js";
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String",
        },
    },
};
export const dataSource = {
    parameterPath: "dataSource",
    mapper: SearchIndexerDataSourceMapper,
};
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
export const endpoint = {
    parameterPath: "endpoint",
    mapper: {
        serializedName: "endpoint",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
export const dataSourceName = {
    parameterPath: "dataSourceName",
    mapper: {
        serializedName: "dataSourceName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String",
        },
    },
};
export const ifNoneMatch = {
    parameterPath: ["options", "ifNoneMatch"],
    mapper: {
        serializedName: "If-None-Match",
        type: {
            name: "String",
        },
    },
};
export const prefer = {
    parameterPath: "prefer",
    mapper: {
        defaultValue: "return=representation",
        isConstant: true,
        serializedName: "Prefer",
        type: {
            name: "String",
        },
    },
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        serializedName: "api-version",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const skipIndexerResetRequirementForCache = {
    parameterPath: ["options", "skipIndexerResetRequirementForCache"],
    mapper: {
        serializedName: "ignoreResetRequirements",
        type: {
            name: "Boolean",
        },
    },
};
export const select = {
    parameterPath: ["options", "select"],
    mapper: {
        serializedName: "$select",
        type: {
            name: "String",
        },
    },
};
export const indexerName = {
    parameterPath: "indexerName",
    mapper: {
        serializedName: "indexerName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const keysOrIds = {
    parameterPath: ["options", "keysOrIds"],
    mapper: DocumentKeysOrIdsMapper,
};
export const overwrite = {
    parameterPath: ["options", "overwrite"],
    mapper: {
        defaultValue: false,
        serializedName: "overwrite",
        type: {
            name: "Boolean",
        },
    },
};
export const indexer = {
    parameterPath: "indexer",
    mapper: SearchIndexerMapper,
};
export const disableCacheReprocessingChangeDetection = {
    parameterPath: ["options", "disableCacheReprocessingChangeDetection"],
    mapper: {
        serializedName: "disableCacheReprocessingChangeDetection",
        type: {
            name: "Boolean",
        },
    },
};
export const skillset = {
    parameterPath: "skillset",
    mapper: SearchIndexerSkillsetMapper,
};
export const skillsetName = {
    parameterPath: "skillsetName",
    mapper: {
        serializedName: "skillsetName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const skillNames = {
    parameterPath: "skillNames",
    mapper: SkillNamesMapper,
};
export const synonymMap = {
    parameterPath: "synonymMap",
    mapper: SynonymMapMapper,
};
export const synonymMapName = {
    parameterPath: "synonymMapName",
    mapper: {
        serializedName: "synonymMapName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const index = {
    parameterPath: "index",
    mapper: SearchIndexMapper,
};
export const indexName = {
    parameterPath: "indexName",
    mapper: {
        serializedName: "indexName",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const allowIndexDowntime = {
    parameterPath: ["options", "allowIndexDowntime"],
    mapper: {
        serializedName: "allowIndexDowntime",
        type: {
            name: "Boolean",
        },
    },
};
export const request = {
    parameterPath: "request",
    mapper: AnalyzeRequestMapper,
};
export const alias = {
    parameterPath: "alias",
    mapper: SearchAliasMapper,
};
export const aliasName = {
    parameterPath: "aliasName",
    mapper: {
        serializedName: "aliasName",
        required: true,
        type: {
            name: "String",
        },
    },
};
//# sourceMappingURL=parameters.js.map