{"version":3,"file":"indexes.js","sourceRoot":"","sources":["../../../../../src/generated/service/operationsInterfaces/indexes.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  SearchIndex,\n  IndexesCreateOptionalParams,\n  IndexesCreateResponse,\n  IndexesListOptionalParams,\n  IndexesListResponse,\n  IndexesCreateOrUpdateOptionalParams,\n  IndexesCreateOrUpdateResponse,\n  IndexesDeleteOptionalParams,\n  IndexesGetOptionalParams,\n  IndexesGetResponse,\n  IndexesGetStatisticsOptionalParams,\n  IndexesGetStatisticsResponse,\n  AnalyzeRequest,\n  IndexesAnalyzeOptionalParams,\n  IndexesAnalyzeResponse,\n} from \"../models/index.js\";\n\n/** Interface representing a Indexes. */\nexport interface Indexes {\n  /**\n   * Creates a new search index.\n   * @param index The definition of the index to create.\n   * @param options The options parameters.\n   */\n  create(\n    index: SearchIndex,\n    options?: IndexesCreateOptionalParams,\n  ): Promise<IndexesCreateResponse>;\n  /**\n   * Lists all indexes available for a search service.\n   * @param options The options parameters.\n   */\n  list(options?: IndexesListOptionalParams): Promise<IndexesListResponse>;\n  /**\n   * Creates a new search index or updates an index if it already exists.\n   * @param indexName The definition of the index to create or update.\n   * @param index The definition of the index to create or update.\n   * @param options The options parameters.\n   */\n  createOrUpdate(\n    indexName: string,\n    index: SearchIndex,\n    options?: IndexesCreateOrUpdateOptionalParams,\n  ): Promise<IndexesCreateOrUpdateResponse>;\n  /**\n   * Deletes a search index and all the documents it contains. This operation is permanent, with no\n   * recovery option. Make sure you have a master copy of your index definition, data ingestion code, and\n   * a backup of the primary data source in case you need to re-build the index.\n   * @param indexName The name of the index to delete.\n   * @param options The options parameters.\n   */\n  delete(\n    indexName: string,\n    options?: IndexesDeleteOptionalParams,\n  ): Promise<void>;\n  /**\n   * Retrieves an index definition.\n   * @param indexName The name of the index to retrieve.\n   * @param options The options parameters.\n   */\n  get(\n    indexName: string,\n    options?: IndexesGetOptionalParams,\n  ): Promise<IndexesGetResponse>;\n  /**\n   * Returns statistics for the given index, including a document count and storage usage.\n   * @param indexName The name of the index for which to retrieve statistics.\n   * @param options The options parameters.\n   */\n  getStatistics(\n    indexName: string,\n    options?: IndexesGetStatisticsOptionalParams,\n  ): Promise<IndexesGetStatisticsResponse>;\n  /**\n   * Shows how an analyzer breaks text into tokens.\n   * @param indexName The name of the index for which to test an analyzer.\n   * @param request The text and analyzer or analysis components to test.\n   * @param options The options parameters.\n   */\n  analyze(\n    indexName: string,\n    request: AnalyzeRequest,\n    options?: IndexesAnalyzeOptionalParams,\n  ): Promise<IndexesAnalyzeResponse>;\n}\n"]}