/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link ApiVersion20241101Preview} that the service accepts. */
export var KnownApiVersion20241101Preview;
(function (KnownApiVersion20241101Preview) {
    /** Api Version '2024-11-01-preview' */
    KnownApiVersion20241101Preview["TwoThousandTwentyFour1101Preview"] = "2024-11-01-preview";
})(KnownApiVersion20241101Preview || (KnownApiVersion20241101Preview = {}));
/** Known values of {@link SemanticErrorMode} that the service accepts. */
export var KnownSemanticErrorMode;
(function (KnownSemanticErrorMode) {
    /** If the semantic processing fails, partial results still return. The definition of partial results depends on what semantic step failed and what was the reason for failure. */
    KnownSemanticErrorMode["Partial"] = "partial";
    /** If there is an exception during the semantic processing step, the query will fail and return the appropriate HTTP code depending on the error. */
    KnownSemanticErrorMode["Fail"] = "fail";
})(KnownSemanticErrorMode || (KnownSemanticErrorMode = {}));
/** Known values of {@link QueryAnswerType} that the service accepts. */
export var KnownQueryAnswerType;
(function (KnownQueryAnswerType) {
    /** Do not return answers for the query. */
    KnownQueryAnswerType["None"] = "none";
    /** Extracts answer candidates from the contents of the documents returned in response to a query expressed as a question in natural language. */
    KnownQueryAnswerType["Extractive"] = "extractive";
})(KnownQueryAnswerType || (KnownQueryAnswerType = {}));
/** Known values of {@link QueryCaptionType} that the service accepts. */
export var KnownQueryCaptionType;
(function (KnownQueryCaptionType) {
    /** Do not return captions for the query. */
    KnownQueryCaptionType["None"] = "none";
    /** Extracts captions from the matching documents that contain passages relevant to the search query. */
    KnownQueryCaptionType["Extractive"] = "extractive";
})(KnownQueryCaptionType || (KnownQueryCaptionType = {}));
/** Known values of {@link QueryRewritesType} that the service accepts. */
export var KnownQueryRewritesType;
(function (KnownQueryRewritesType) {
    /** Do not generate additional query rewrites for this query. */
    KnownQueryRewritesType["None"] = "none";
    /** Generate alternative query terms to increase the recall of a search request. */
    KnownQueryRewritesType["Generative"] = "generative";
})(KnownQueryRewritesType || (KnownQueryRewritesType = {}));
/** Known values of {@link QueryDebugMode} that the service accepts. */
export var KnownQueryDebugMode;
(function (KnownQueryDebugMode) {
    /** No query debugging information will be returned. */
    KnownQueryDebugMode["Disabled"] = "disabled";
    /** Allows the user to further explore their reranked results. */
    KnownQueryDebugMode["Semantic"] = "semantic";
    /** Allows the user to further explore their hybrid and vector query results. */
    KnownQueryDebugMode["Vector"] = "vector";
    /** Allows the user to explore the list of query rewrites generated for their search request. */
    KnownQueryDebugMode["QueryRewrites"] = "queryRewrites";
    /** Turn on all debug options. */
    KnownQueryDebugMode["All"] = "all";
})(KnownQueryDebugMode || (KnownQueryDebugMode = {}));
/** Known values of {@link QueryLanguage} that the service accepts. */
export var KnownQueryLanguage;
(function (KnownQueryLanguage) {
    /** Query language not specified. */
    KnownQueryLanguage["None"] = "none";
    /** Query language value for English (United States). */
    KnownQueryLanguage["EnUs"] = "en-us";
    /** Query language value for English (Great Britain). */
    KnownQueryLanguage["EnGb"] = "en-gb";
    /** Query language value for English (India). */
    KnownQueryLanguage["EnIn"] = "en-in";
    /** Query language value for English (Canada). */
    KnownQueryLanguage["EnCa"] = "en-ca";
    /** Query language value for English (Australia). */
    KnownQueryLanguage["EnAu"] = "en-au";
    /** Query language value for French (France). */
    KnownQueryLanguage["FrFr"] = "fr-fr";
    /** Query language value for French (Canada). */
    KnownQueryLanguage["FrCa"] = "fr-ca";
    /** Query language value for German (Germany). */
    KnownQueryLanguage["DeDe"] = "de-de";
    /** Query language value for Spanish (Spain). */
    KnownQueryLanguage["EsEs"] = "es-es";
    /** Query language value for Spanish (Mexico). */
    KnownQueryLanguage["EsMx"] = "es-mx";
    /** Query language value for Chinese (China). */
    KnownQueryLanguage["ZhCn"] = "zh-cn";
    /** Query language value for Chinese (Taiwan). */
    KnownQueryLanguage["ZhTw"] = "zh-tw";
    /** Query language value for Portuguese (Brazil). */
    KnownQueryLanguage["PtBr"] = "pt-br";
    /** Query language value for Portuguese (Portugal). */
    KnownQueryLanguage["PtPt"] = "pt-pt";
    /** Query language value for Italian (Italy). */
    KnownQueryLanguage["ItIt"] = "it-it";
    /** Query language value for Japanese (Japan). */
    KnownQueryLanguage["JaJp"] = "ja-jp";
    /** Query language value for Korean (Korea). */
    KnownQueryLanguage["KoKr"] = "ko-kr";
    /** Query language value for Russian (Russia). */
    KnownQueryLanguage["RuRu"] = "ru-ru";
    /** Query language value for Czech (Czech Republic). */
    KnownQueryLanguage["CsCz"] = "cs-cz";
    /** Query language value for Dutch (Belgium). */
    KnownQueryLanguage["NlBe"] = "nl-be";
    /** Query language value for Dutch (Netherlands). */
    KnownQueryLanguage["NlNl"] = "nl-nl";
    /** Query language value for Hungarian (Hungary). */
    KnownQueryLanguage["HuHu"] = "hu-hu";
    /** Query language value for Polish (Poland). */
    KnownQueryLanguage["PlPl"] = "pl-pl";
    /** Query language value for Swedish (Sweden). */
    KnownQueryLanguage["SvSe"] = "sv-se";
    /** Query language value for Turkish (Turkey). */
    KnownQueryLanguage["TrTr"] = "tr-tr";
    /** Query language value for Hindi (India). */
    KnownQueryLanguage["HiIn"] = "hi-in";
    /** Query language value for Arabic (Saudi Arabia). */
    KnownQueryLanguage["ArSa"] = "ar-sa";
    /** Query language value for Arabic (Egypt). */
    KnownQueryLanguage["ArEg"] = "ar-eg";
    /** Query language value for Arabic (Morocco). */
    KnownQueryLanguage["ArMa"] = "ar-ma";
    /** Query language value for Arabic (Kuwait). */
    KnownQueryLanguage["ArKw"] = "ar-kw";
    /** Query language value for Arabic (Jordan). */
    KnownQueryLanguage["ArJo"] = "ar-jo";
    /** Query language value for Danish (Denmark). */
    KnownQueryLanguage["DaDk"] = "da-dk";
    /** Query language value for Norwegian (Norway). */
    KnownQueryLanguage["NoNo"] = "no-no";
    /** Query language value for Bulgarian (Bulgaria). */
    KnownQueryLanguage["BgBg"] = "bg-bg";
    /** Query language value for Croatian (Croatia). */
    KnownQueryLanguage["HrHr"] = "hr-hr";
    /** Query language value for Croatian (Bosnia and Herzegovina). */
    KnownQueryLanguage["HrBa"] = "hr-ba";
    /** Query language value for Malay (Malaysia). */
    KnownQueryLanguage["MsMy"] = "ms-my";
    /** Query language value for Malay (Brunei Darussalam). */
    KnownQueryLanguage["MsBn"] = "ms-bn";
    /** Query language value for Slovenian (Slovenia). */
    KnownQueryLanguage["SlSl"] = "sl-sl";
    /** Query language value for Tamil (India). */
    KnownQueryLanguage["TaIn"] = "ta-in";
    /** Query language value for Vietnamese (Viet Nam). */
    KnownQueryLanguage["ViVn"] = "vi-vn";
    /** Query language value for Greek (Greece). */
    KnownQueryLanguage["ElGr"] = "el-gr";
    /** Query language value for Romanian (Romania). */
    KnownQueryLanguage["RoRo"] = "ro-ro";
    /** Query language value for Icelandic (Iceland). */
    KnownQueryLanguage["IsIs"] = "is-is";
    /** Query language value for Indonesian (Indonesia). */
    KnownQueryLanguage["IdId"] = "id-id";
    /** Query language value for Thai (Thailand). */
    KnownQueryLanguage["ThTh"] = "th-th";
    /** Query language value for Lithuanian (Lithuania). */
    KnownQueryLanguage["LtLt"] = "lt-lt";
    /** Query language value for Ukrainian (Ukraine). */
    KnownQueryLanguage["UkUa"] = "uk-ua";
    /** Query language value for Latvian (Latvia). */
    KnownQueryLanguage["LvLv"] = "lv-lv";
    /** Query language value for Estonian (Estonia). */
    KnownQueryLanguage["EtEe"] = "et-ee";
    /** Query language value for Catalan. */
    KnownQueryLanguage["CaEs"] = "ca-es";
    /** Query language value for Finnish (Finland). */
    KnownQueryLanguage["FiFi"] = "fi-fi";
    /** Query language value for Serbian (Bosnia and Herzegovina). */
    KnownQueryLanguage["SrBa"] = "sr-ba";
    /** Query language value for Serbian (Montenegro). */
    KnownQueryLanguage["SrMe"] = "sr-me";
    /** Query language value for Serbian (Serbia). */
    KnownQueryLanguage["SrRs"] = "sr-rs";
    /** Query language value for Slovak (Slovakia). */
    KnownQueryLanguage["SkSk"] = "sk-sk";
    /** Query language value for Norwegian (Norway). */
    KnownQueryLanguage["NbNo"] = "nb-no";
    /** Query language value for Armenian (Armenia). */
    KnownQueryLanguage["HyAm"] = "hy-am";
    /** Query language value for Bengali (India). */
    KnownQueryLanguage["BnIn"] = "bn-in";
    /** Query language value for Basque. */
    KnownQueryLanguage["EuEs"] = "eu-es";
    /** Query language value for Galician. */
    KnownQueryLanguage["GlEs"] = "gl-es";
    /** Query language value for Gujarati (India). */
    KnownQueryLanguage["GuIn"] = "gu-in";
    /** Query language value for Hebrew (Israel). */
    KnownQueryLanguage["HeIl"] = "he-il";
    /** Query language value for Irish (Ireland). */
    KnownQueryLanguage["GaIe"] = "ga-ie";
    /** Query language value for Kannada (India). */
    KnownQueryLanguage["KnIn"] = "kn-in";
    /** Query language value for Malayalam (India). */
    KnownQueryLanguage["MlIn"] = "ml-in";
    /** Query language value for Marathi (India). */
    KnownQueryLanguage["MrIn"] = "mr-in";
    /** Query language value for Persian (U.A.E.). */
    KnownQueryLanguage["FaAe"] = "fa-ae";
    /** Query language value for Punjabi (India). */
    KnownQueryLanguage["PaIn"] = "pa-in";
    /** Query language value for Telugu (India). */
    KnownQueryLanguage["TeIn"] = "te-in";
    /** Query language value for Urdu (Pakistan). */
    KnownQueryLanguage["UrPk"] = "ur-pk";
})(KnownQueryLanguage || (KnownQueryLanguage = {}));
/** Known values of {@link QuerySpellerType} that the service accepts. */
export var KnownQuerySpellerType;
(function (KnownQuerySpellerType) {
    /** Speller not enabled. */
    KnownQuerySpellerType["None"] = "none";
    /** Speller corrects individual query terms using a static lexicon for the language specified by the queryLanguage parameter. */
    KnownQuerySpellerType["Lexicon"] = "lexicon";
})(KnownQuerySpellerType || (KnownQuerySpellerType = {}));
/** Known values of {@link VectorQueryKind} that the service accepts. */
export var KnownVectorQueryKind;
(function (KnownVectorQueryKind) {
    /** Vector query where a raw vector value is provided. */
    KnownVectorQueryKind["Vector"] = "vector";
    /** Vector query where a text value that needs to be vectorized is provided. */
    KnownVectorQueryKind["Text"] = "text";
    /** Vector query where an url that represents an image value that needs to be vectorized is provided. */
    KnownVectorQueryKind["ImageUrl"] = "imageUrl";
    /** Vector query where a base 64 encoded binary of an image that needs to be vectorized is provided. */
    KnownVectorQueryKind["ImageBinary"] = "imageBinary";
})(KnownVectorQueryKind || (KnownVectorQueryKind = {}));
/** Known values of {@link VectorThresholdKind} that the service accepts. */
export var KnownVectorThresholdKind;
(function (KnownVectorThresholdKind) {
    /** The results of the vector query will be filtered based on the vector similarity metric. Note this is the canonical definition of similarity metric, not the 'distance' version. The threshold direction (larger or smaller) will be chosen automatically according to the metric used by the field. */
    KnownVectorThresholdKind["VectorSimilarity"] = "vectorSimilarity";
    /** The results of the vector query will filter based on the '@search.score' value. Note this is the @search.score returned as part of the search response. The threshold direction will be chosen for higher @search.score. */
    KnownVectorThresholdKind["SearchScore"] = "searchScore";
})(KnownVectorThresholdKind || (KnownVectorThresholdKind = {}));
/** Known values of {@link VectorFilterMode} that the service accepts. */
export var KnownVectorFilterMode;
(function (KnownVectorFilterMode) {
    /** The filter will be applied after the candidate set of vector results is returned. Depending on the filter selectivity, this can result in fewer results than requested by the parameter 'k'. */
    KnownVectorFilterMode["PostFilter"] = "postFilter";
    /** The filter will be applied before the search query. */
    KnownVectorFilterMode["PreFilter"] = "preFilter";
})(KnownVectorFilterMode || (KnownVectorFilterMode = {}));
/** Known values of {@link HybridCountAndFacetMode} that the service accepts. */
export var KnownHybridCountAndFacetMode;
(function (KnownHybridCountAndFacetMode) {
    /** Only include documents that were matched within the 'maxTextRecallSize' retrieval window when computing 'count' and 'facets'. */
    KnownHybridCountAndFacetMode["CountRetrievableResults"] = "countRetrievableResults";
    /** Include all documents that were matched by the search query when computing 'count' and 'facets', regardless of whether or not those documents are within the 'maxTextRecallSize' retrieval window. */
    KnownHybridCountAndFacetMode["CountAllResults"] = "countAllResults";
})(KnownHybridCountAndFacetMode || (KnownHybridCountAndFacetMode = {}));
/** Known values of {@link SemanticFieldState} that the service accepts. */
export var KnownSemanticFieldState;
(function (KnownSemanticFieldState) {
    /** The field was fully used for semantic enrichment. */
    KnownSemanticFieldState["Used"] = "used";
    /** The field was not used for semantic enrichment. */
    KnownSemanticFieldState["Unused"] = "unused";
    /** The field was partially used for semantic enrichment. */
    KnownSemanticFieldState["Partial"] = "partial";
})(KnownSemanticFieldState || (KnownSemanticFieldState = {}));
/** Known values of {@link SemanticErrorReason} that the service accepts. */
export var KnownSemanticErrorReason;
(function (KnownSemanticErrorReason) {
    /** If `semanticMaxWaitInMilliseconds` was set and the semantic processing duration exceeded that value. Only the base results were returned. */
    KnownSemanticErrorReason["MaxWaitExceeded"] = "maxWaitExceeded";
    /** The request was throttled. Only the base results were returned. */
    KnownSemanticErrorReason["CapacityOverloaded"] = "capacityOverloaded";
    /** At least one step of the semantic process failed. */
    KnownSemanticErrorReason["Transient"] = "transient";
})(KnownSemanticErrorReason || (KnownSemanticErrorReason = {}));
/** Known values of {@link SemanticSearchResultsType} that the service accepts. */
export var KnownSemanticSearchResultsType;
(function (KnownSemanticSearchResultsType) {
    /** Results without any semantic enrichment or reranking. */
    KnownSemanticSearchResultsType["BaseResults"] = "baseResults";
    /** Results have been reranked with the reranker model and will include semantic captions. They will not include any answers, answers highlights or caption highlights. */
    KnownSemanticSearchResultsType["RerankedResults"] = "rerankedResults";
})(KnownSemanticSearchResultsType || (KnownSemanticSearchResultsType = {}));
/** Known values of {@link SemanticQueryRewritesResultType} that the service accepts. */
export var KnownSemanticQueryRewritesResultType;
(function (KnownSemanticQueryRewritesResultType) {
    /** Query rewrites were not successfully generated for this request. Only the original query was used to retrieve the results. */
    KnownSemanticQueryRewritesResultType["OriginalQueryOnly"] = "originalQueryOnly";
})(KnownSemanticQueryRewritesResultType || (KnownSemanticQueryRewritesResultType = {}));
//# sourceMappingURL=index.js.map