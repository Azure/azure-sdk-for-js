{"version":3,"file":"searchIndexClient.js","sourceRoot":"","sources":["../../src/searchIndexClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/// <reference lib=\"esnext.asynciterable\" />\n\nimport type { KeyCredential, TokenCredential } from \"@azure/core-auth\";\nimport { isTokenCredential } from \"@azure/core-auth\";\nimport type { InternalClientPipelineOptions } from \"@azure/core-client\";\nimport type { ExtendedCommonClientOptions } from \"@azure/core-http-compat\";\nimport type { Pipeline } from \"@azure/core-rest-pipeline\";\nimport { bearerTokenAuthenticationPolicy } from \"@azure/core-rest-pipeline\";\nimport type { AnalyzeResult } from \"./generated/service/models/index.js\";\nimport { SearchServiceClient as GeneratedClient } from \"./generated/service/searchServiceClient.js\";\nimport { logger } from \"./logger.js\";\nimport { createOdataMetadataPolicy } from \"./odataMetadataPolicy.js\";\nimport { createSearchApiKeyCredentialPolicy } from \"./searchApiKeyCredentialPolicy.js\";\nimport { KnownSearchAudience } from \"./searchAudience.js\";\nimport type { SearchClientOptions as GetSearchClientOptions } from \"./searchClient.js\";\nimport { SearchClient } from \"./searchClient.js\";\nimport type {\n  AliasIterator,\n  AnalyzeTextOptions,\n  CreateAliasOptions,\n  CreateIndexOptions,\n  CreateOrUpdateAliasOptions,\n  CreateOrUpdateIndexOptions,\n  CreateOrUpdateSynonymMapOptions,\n  CreateSynonymMapOptions,\n  DeleteAliasOptions,\n  DeleteIndexOptions,\n  DeleteSynonymMapOptions,\n  GetAliasOptions,\n  GetIndexOptions,\n  GetIndexStatisticsOptions,\n  GetServiceStatisticsOptions,\n  GetSynonymMapsOptions,\n  IndexIterator,\n  IndexNameIterator,\n  ListAliasesOptions,\n  ListIndexesOptions,\n  ListSynonymMapsOptions,\n  SearchIndex,\n  SearchIndexAlias,\n  SearchIndexStatistics,\n  SearchServiceStatistics,\n  SynonymMap,\n} from \"./serviceModels.js\";\nimport * as utils from \"./serviceUtils.js\";\nimport { createSpan } from \"./tracing.js\";\n\n/**\n * Client options used to configure Cognitive Search API requests.\n */\nexport interface SearchIndexClientOptions extends ExtendedCommonClientOptions {\n  /**\n   * The API version to use when communicating with the service.\n   * @deprecated use {@Link serviceVersion} instead\n   */\n  apiVersion?: string;\n\n  /**\n   * The service version to use when communicating with the service.\n   */\n  serviceVersion?: string;\n\n  /**\n   * The Audience to use for authentication with Azure Active Directory (AAD). The\n   * audience is not considered when using a shared key.\n   * {@link KnownSearchAudience} can be used interchangeably with audience\n   */\n  audience?: string;\n}\n\n/**\n * Class to perform operations to manage\n * (create, update, list/delete)\n * indexes, & synonymmaps.\n */\nexport class SearchIndexClient {\n  /**\n   * The API version to use when communicating with the service.\n   */\n  public readonly serviceVersion: string = utils.defaultServiceVersion;\n\n  /**\n   * The API version to use when communicating with the service.\n   * @deprecated use {@Link serviceVersion} instead\n   */\n  public readonly apiVersion: string = utils.defaultServiceVersion;\n\n  /**\n   * The endpoint of the search service\n   */\n  public readonly endpoint: string;\n\n  /**\n   * @hidden\n   * A reference to the auto-generated SearchServiceClient\n   */\n  private readonly client: GeneratedClient;\n\n  /**\n   * A reference to the internal HTTP pipeline for use with raw requests\n   */\n  public readonly pipeline: Pipeline;\n\n  /**\n   * Used to authenticate requests to the service.\n   */\n  private readonly credential: KeyCredential | TokenCredential;\n\n  /**\n   * Used to configure the Search Index client.\n   */\n  private readonly options: SearchIndexClientOptions;\n\n  /**\n   * Creates an instance of SearchIndexClient.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleSearchIndexClient\n   * import { SearchIndexClient, AzureKeyCredential } from \"@azure/search-documents\";\n   *\n   * const indexClient = new SearchIndexClient(\"<endpoint>\", new AzureKeyCredential(\"<apiKey>\"));\n   * ```\n   * @param endpoint - The endpoint of the search service\n   * @param credential - Used to authenticate requests to the service.\n   * @param options - Used to configure the Search Index client.\n   */\n  constructor(\n    endpoint: string,\n    credential: KeyCredential | TokenCredential,\n    options: SearchIndexClientOptions = {},\n  ) {\n    this.endpoint = endpoint;\n    this.credential = credential;\n    this.options = options;\n\n    const internalClientPipelineOptions: InternalClientPipelineOptions = {\n      ...this.options,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n          additionalAllowedHeaderNames: [\n            \"elapsed-time\",\n            \"Location\",\n            \"OData-MaxVersion\",\n            \"OData-Version\",\n            \"Prefer\",\n            \"throttle-reason\",\n          ],\n        },\n      },\n    };\n\n    this.serviceVersion =\n      this.options.serviceVersion ?? this.options.apiVersion ?? utils.defaultServiceVersion;\n    this.apiVersion = this.serviceVersion;\n\n    this.client = new GeneratedClient(\n      this.endpoint,\n      this.serviceVersion,\n      internalClientPipelineOptions,\n    );\n    this.pipeline = this.client.pipeline;\n\n    if (isTokenCredential(credential)) {\n      const scope: string = this.options.audience\n        ? `${this.options.audience}/.default`\n        : `${KnownSearchAudience.AzurePublicCloud}/.default`;\n\n      this.client.pipeline.addPolicy(\n        bearerTokenAuthenticationPolicy({ credential, scopes: scope }),\n      );\n    } else {\n      this.client.pipeline.addPolicy(createSearchApiKeyCredentialPolicy(credential));\n    }\n\n    this.client.pipeline.addPolicy(createOdataMetadataPolicy(\"minimal\"));\n  }\n\n  private async *listIndexesPage(\n    options: ListIndexesOptions = {},\n  ): AsyncIterableIterator<SearchIndex[]> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-listIndexesPage\", options);\n    try {\n      const result = await this.client.indexes.list(updatedOptions);\n      const mapped = result.indexes.map(utils.generatedIndexToPublicIndex);\n      yield mapped;\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async *listIndexesAll(\n    options: ListIndexesOptions = {},\n  ): AsyncIterableIterator<SearchIndex> {\n    for await (const page of this.listIndexesPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves a list of existing indexes in the service.\n   * @param options - Options to the list index operation.\n   */\n  public listIndexes(options: ListIndexesOptions = {}): IndexIterator {\n    const iter = this.listIndexesAll(options);\n\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: () => {\n        return this.listIndexesPage(options);\n      },\n    };\n  }\n\n  private async *listAliasesPage(\n    options: ListAliasesOptions = {},\n  ): AsyncIterableIterator<SearchIndexAlias[]> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-listAliases\", options);\n    try {\n      const result = await this.client.aliases.list(updatedOptions);\n      yield result.aliases;\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async *listAliasesAll(\n    options: ListAliasesOptions = {},\n  ): AsyncIterableIterator<SearchIndexAlias> {\n    for await (const page of this.listAliasesPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists all aliases available for a search service.\n   * @param options - The options parameters.\n   */\n  public listAliases(options: ListAliasesOptions = {}): AliasIterator {\n    const iter = this.listAliasesAll(options);\n\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: () => {\n        return this.listAliasesPage(options);\n      },\n    };\n  }\n\n  private async *listIndexesNamesPage(\n    options: ListIndexesOptions = {},\n  ): AsyncIterableIterator<string[]> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-listIndexesNamesPage\", options);\n    try {\n      const result = await this.client.indexes.list({\n        ...updatedOptions,\n        select: \"name\",\n      });\n      const mapped = result.indexes.map((idx) => idx.name);\n      yield mapped;\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async *listIndexesNamesAll(\n    options: ListIndexesOptions = {},\n  ): AsyncIterableIterator<string> {\n    for await (const page of this.listIndexesNamesPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves a list of names of existing indexes in the service.\n   * @param options - Options to the list index operation.\n   */\n  // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n  public listIndexesNames(options: ListIndexesOptions = {}): IndexNameIterator {\n    const iter = this.listIndexesNamesAll(options);\n\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: () => {\n        return this.listIndexesNamesPage(options);\n      },\n    };\n  }\n\n  /**\n   * Retrieves a list of existing SynonymMaps in the service.\n   * @param options - Options to the list SynonymMaps operation.\n   */\n  public async listSynonymMaps(options: ListSynonymMapsOptions = {}): Promise<Array<SynonymMap>> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-listSynonymMaps\", options);\n    try {\n      const result = await this.client.synonymMaps.list(updatedOptions);\n      return result.synonymMaps.map(utils.generatedSynonymMapToPublicSynonymMap);\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves a list of names of existing SynonymMaps in the service.\n   * @param options - Options to the list SynonymMaps operation.\n   */\n  // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n  public async listSynonymMapsNames(options: ListSynonymMapsOptions = {}): Promise<Array<string>> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-listSynonymMapsNames\", options);\n    try {\n      const result = await this.client.synonymMaps.list({\n        ...updatedOptions,\n        select: \"name\",\n      });\n      return result.synonymMaps.map((sm) => sm.name);\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves information about an index.\n   * @param indexName - The name of the index.\n   * @param options - Additional optional arguments.\n   */\n  public async getIndex(indexName: string, options: GetIndexOptions = {}): Promise<SearchIndex> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-getIndex\", options);\n    try {\n      const result = await this.client.indexes.get(indexName, updatedOptions);\n      return utils.generatedIndexToPublicIndex(result);\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves information about a SynonymMap.\n   * @param synonymMapName - The name of the SynonymMap.\n   * @param options - Additional optional arguments.\n   */\n  public async getSynonymMap(\n    synonymMapName: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options: GetSynonymMapsOptions = {},\n  ): Promise<SynonymMap> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-getSynonymMaps\", options);\n    try {\n      const result = await this.client.synonymMaps.get(synonymMapName, updatedOptions);\n      return utils.generatedSynonymMapToPublicSynonymMap(result);\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new index.\n   * @param index - The information describing the index to be created.\n   * @param options - Additional optional arguments.\n   */\n  public async createIndex(\n    index: SearchIndex,\n    options: CreateIndexOptions = {},\n  ): Promise<SearchIndex> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-createIndex\", options);\n    try {\n      const result = await this.client.indexes.create(\n        utils.publicIndexToGeneratedIndex(index),\n        updatedOptions,\n      );\n      return utils.generatedIndexToPublicIndex(result);\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new SynonymMap in a search service.\n   * @param synonymMap - The synonymMap definition to create in a search service.\n   * @param options - Additional optional arguments.\n   */\n  public async createSynonymMap(\n    synonymMap: SynonymMap,\n    options: CreateSynonymMapOptions = {},\n  ): Promise<SynonymMap> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-createSynonymMaps\", options);\n    try {\n      const result = await this.client.synonymMaps.create(\n        utils.publicSynonymMapToGeneratedSynonymMap(synonymMap),\n        updatedOptions,\n      );\n      return utils.generatedSynonymMapToPublicSynonymMap(result);\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new index or modifies an existing one.\n   * @param index - The information describing the index to be created.\n   * @param options - Additional optional arguments.\n   */\n  public async createOrUpdateIndex(\n    index: SearchIndex,\n    options: CreateOrUpdateIndexOptions = {},\n  ): Promise<SearchIndex> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-createOrUpdateIndex\", options);\n    try {\n      const etag = options.onlyIfUnchanged ? index.etag : undefined;\n\n      const result = await this.client.indexes.createOrUpdate(\n        index.name,\n        utils.publicIndexToGeneratedIndex(index),\n        {\n          ...updatedOptions,\n          ifMatch: etag,\n        },\n      );\n      return utils.generatedIndexToPublicIndex(result);\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new SynonymMap or modifies an existing one.\n   * @param synonymMap - The information describing the SynonymMap to be created.\n   * @param options - Additional optional arguments.\n   */\n  public async createOrUpdateSynonymMap(\n    synonymMap: SynonymMap,\n    options: CreateOrUpdateSynonymMapOptions = {},\n  ): Promise<SynonymMap> {\n    const { span, updatedOptions } = createSpan(\n      \"SearchIndexClient-createOrUpdateSynonymMap\",\n      options,\n    );\n    try {\n      const etag = options.onlyIfUnchanged ? synonymMap.etag : undefined;\n\n      const result = await this.client.synonymMaps.createOrUpdate(\n        synonymMap.name,\n        utils.publicSynonymMapToGeneratedSynonymMap(synonymMap),\n        {\n          ...updatedOptions,\n          ifMatch: etag,\n        },\n      );\n      return utils.generatedSynonymMapToPublicSynonymMap(result);\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes an existing index.\n   * @param indexName - Index/Name of the index to delete.\n   * @param options - Additional optional arguments.\n   */\n  public async deleteIndex(\n    index: string | SearchIndex,\n    options: DeleteIndexOptions = {},\n  ): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-deleteIndex\", options);\n    try {\n      const indexName: string = typeof index === \"string\" ? index : index.name;\n      const etag =\n        typeof index === \"string\" ? undefined : options.onlyIfUnchanged ? index.etag : undefined;\n\n      await this.client.indexes.delete(indexName, {\n        ...updatedOptions,\n        ifMatch: etag,\n      });\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes an existing SynonymMap.\n   * @param synonymMapName - SynonymMap/Name of the synonymMap to delete.\n   * @param options - Additional optional arguments.\n   */\n  public async deleteSynonymMap(\n    synonymMap: string | SynonymMap,\n    options: DeleteSynonymMapOptions = {},\n  ): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-deleteSynonymMap\", options);\n    try {\n      const synonymMapName: string = typeof synonymMap === \"string\" ? synonymMap : synonymMap.name;\n      const etag =\n        typeof synonymMap === \"string\"\n          ? undefined\n          : options.onlyIfUnchanged\n            ? synonymMap.etag\n            : undefined;\n\n      await this.client.synonymMaps.delete(synonymMapName, {\n        ...updatedOptions,\n        ifMatch: etag,\n      });\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new search alias or updates an alias if it already exists.\n   * @param alias - The definition of the alias to create or update.\n   * @param options - The options parameters.\n   */\n  public async createOrUpdateAlias(\n    alias: SearchIndexAlias,\n    options: CreateOrUpdateAliasOptions = {},\n  ): Promise<SearchIndexAlias> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-createOrUpdateAlias\", options);\n    try {\n      const etag = options.onlyIfUnchanged ? alias.etag : undefined;\n\n      const result = await this.client.aliases.createOrUpdate(alias.name, alias, {\n        ...updatedOptions,\n        ifMatch: etag,\n      });\n      return result;\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new search alias.\n   * @param alias - The definition of the alias to create.\n   * @param options - The options parameters.\n   */\n  public async createAlias(\n    alias: SearchIndexAlias,\n    options: CreateAliasOptions = {},\n  ): Promise<SearchIndexAlias> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-createAlias\", options);\n    try {\n      const result = await this.client.aliases.create(alias, updatedOptions);\n      return result;\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes a search alias and its associated mapping to an index. This operation is permanent, with no\n   * recovery option. The mapped index is untouched by this operation.\n   * @param alias - Alias/Name name of the alias to delete.\n   * @param options - The options parameters.\n   */\n  public async deleteAlias(\n    alias: string | SearchIndexAlias,\n    options: DeleteAliasOptions = {},\n  ): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-deleteAlias\", options);\n    try {\n      const aliasName: string = typeof alias === \"string\" ? alias : alias.name;\n      const etag =\n        typeof alias === \"string\" ? undefined : options.onlyIfUnchanged ? alias.etag : undefined;\n\n      await this.client.aliases.delete(aliasName, {\n        ...updatedOptions,\n        ifMatch: etag,\n      });\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves an alias definition.\n   * @param aliasName - The name of the alias to retrieve.\n   * @param options - The options parameters.\n   */\n  public async getAlias(\n    aliasName: string,\n    options: GetAliasOptions = {},\n  ): Promise<SearchIndexAlias> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-getAlias\", options);\n    try {\n      const result = await this.client.aliases.get(aliasName, updatedOptions);\n      return result;\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves statistics about an index, such as the count of documents and the size\n   * of index storage.\n   * @param indexName - The name of the index.\n   * @param options - Additional optional arguments.\n   */\n  public async getIndexStatistics(\n    indexName: string,\n    options: GetIndexStatisticsOptions = {},\n  ): Promise<SearchIndexStatistics> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-getIndexStatistics\", options);\n    try {\n      const result = await this.client.indexes.getStatistics(indexName, updatedOptions);\n      return result;\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Calls an analyzer or tokenizer manually on provided text.\n   * @param indexName - The name of the index that contains the field to analyze\n   * @param text - The text to break into tokens.\n   * @param options - Additional arguments\n   */\n  public async analyzeText(indexName: string, options: AnalyzeTextOptions): Promise<AnalyzeResult> {\n    const {\n      abortSignal,\n      requestOptions,\n      tracingOptions,\n      analyzerName: analyzer,\n      tokenizerName: tokenizer,\n      ...restOptions\n    } = options;\n\n    const operationOptions = {\n      abortSignal,\n      requestOptions,\n      tracingOptions,\n    };\n\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-analyzeText\", operationOptions);\n\n    try {\n      const result = await this.client.indexes.analyze(\n        indexName,\n        { ...restOptions, analyzer, tokenizer },\n        updatedOptions,\n      );\n      return result;\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves statistics about the service, such as the count of documents, index, etc.\n   * @param options - Additional optional arguments.\n   */\n  public async getServiceStatistics(\n    options: GetServiceStatisticsOptions = {},\n  ): Promise<SearchServiceStatistics> {\n    const { span, updatedOptions } = createSpan(\"SearchIndexClient-getServiceStatistics\", options);\n    try {\n      const result = await this.client.getServiceStatistics(updatedOptions);\n      return result;\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves the SearchClient corresponding to this SearchIndexClient\n   * @param indexName - Name of the index\n   * @param options - SearchClient Options\n   * @typeParam TModel - An optional type that represents the documents stored in\n   * the search index. For the best typing experience, all non-key fields should\n   * be marked optional and nullable, and the key property should have the\n   * non-nullable type `string`.\n   */\n  public getSearchClient<TModel extends object>(\n    indexName: string,\n    options?: GetSearchClientOptions,\n  ): SearchClient<TModel> {\n    return new SearchClient<TModel>(\n      this.endpoint,\n      indexName,\n      this.credential,\n      options || this.options,\n    );\n  }\n}\n"]}