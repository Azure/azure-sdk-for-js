/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import type { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import type { Offerings } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import type { SearchManagementClient } from "../searchManagementClient.js";
import type {
  OfferingsByRegion,
  OfferingsListOptionalParams,
  OfferingsListResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing Offerings operations. */
export class OfferingsImpl implements Offerings {
  private readonly client: SearchManagementClient;

  /**
   * Initialize a new instance of the class Offerings class.
   * @param client Reference to the service client
   */
  constructor(client: SearchManagementClient) {
    this.client = client;
  }

  /**
   * Lists all of the features and SKUs offered by the Azure AI Search service in each region.
   * @param options The options parameters.
   */
  public list(
    options?: OfferingsListOptionalParams,
  ): PagedAsyncIterableIterator<OfferingsByRegion> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      },
    };
  }

  private async *listPagingPage(
    options?: OfferingsListOptionalParams,
    _settings?: PageSettings,
  ): AsyncIterableIterator<OfferingsByRegion[]> {
    let result: OfferingsListResponse;
    result = await this._list(options);
    yield result.value || [];
  }

  private async *listPagingAll(
    options?: OfferingsListOptionalParams,
  ): AsyncIterableIterator<OfferingsByRegion> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Lists all of the features and SKUs offered by the Azure AI Search service in each region.
   * @param options The options parameters.
   */
  private _list(options?: OfferingsListOptionalParams): Promise<OfferingsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Search/offerings",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OfferingsListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer,
};
