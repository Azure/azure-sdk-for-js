/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PrivateLinkResources } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SearchManagementClient } from "../searchManagementClient";
import {
  PrivateLinkResource,
  PrivateLinkResourcesListSupportedOptionalParams,
  PrivateLinkResourcesListSupportedResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing PrivateLinkResources operations. */
export class PrivateLinkResourcesImpl implements PrivateLinkResources {
  private readonly client: SearchManagementClient;

  /**
   * Initialize a new instance of the class PrivateLinkResources class.
   * @param client Reference to the service client
   */
  constructor(client: SearchManagementClient) {
    this.client = client;
  }

  /**
   * Gets a list of all supported private link resource types for the given service.
   * @param resourceGroupName The name of the resource group within the current subscription. You can
   *                          obtain this value from the Azure Resource Manager API or the portal.
   * @param searchServiceName The name of the Azure Cognitive Search service associated with the
   *                          specified resource group.
   * @param options The options parameters.
   */
  public listSupported(
    resourceGroupName: string,
    searchServiceName: string,
    options?: PrivateLinkResourcesListSupportedOptionalParams
  ): PagedAsyncIterableIterator<PrivateLinkResource> {
    const iter = this.listSupportedPagingAll(
      resourceGroupName,
      searchServiceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listSupportedPagingPage(
          resourceGroupName,
          searchServiceName,
          options
        );
      }
    };
  }

  private async *listSupportedPagingPage(
    resourceGroupName: string,
    searchServiceName: string,
    options?: PrivateLinkResourcesListSupportedOptionalParams
  ): AsyncIterableIterator<PrivateLinkResource[]> {
    let result = await this._listSupported(
      resourceGroupName,
      searchServiceName,
      options
    );
    yield result.value || [];
  }

  private async *listSupportedPagingAll(
    resourceGroupName: string,
    searchServiceName: string,
    options?: PrivateLinkResourcesListSupportedOptionalParams
  ): AsyncIterableIterator<PrivateLinkResource> {
    for await (const page of this.listSupportedPagingPage(
      resourceGroupName,
      searchServiceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets a list of all supported private link resource types for the given service.
   * @param resourceGroupName The name of the resource group within the current subscription. You can
   *                          obtain this value from the Azure Resource Manager API or the portal.
   * @param searchServiceName The name of the Azure Cognitive Search service associated with the
   *                          specified resource group.
   * @param options The options parameters.
   */
  private _listSupported(
    resourceGroupName: string,
    searchServiceName: string,
    options?: PrivateLinkResourcesListSupportedOptionalParams
  ): Promise<PrivateLinkResourcesListSupportedResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, searchServiceName, options },
      listSupportedOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listSupportedOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}/privateLinkResources",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateLinkResourcesResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.searchServiceName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept, Parameters.clientRequestId],
  serializer
};
