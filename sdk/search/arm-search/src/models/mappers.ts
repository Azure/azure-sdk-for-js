/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay",
        },
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        nullable: true,
        type: {
          name: "Boolean",
        },
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "OperationProperties",
        },
      },
    },
  },
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationProperties",
    modelProperties: {
      serviceSpecification: {
        serializedName: "serviceSpecification",
        type: {
          name: "Composite",
          className: "OperationServiceSpecification",
        },
      },
    },
  },
};

export const OperationServiceSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationServiceSpecification",
    modelProperties: {
      metricSpecifications: {
        serializedName: "metricSpecifications",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationMetricsSpecification",
            },
          },
        },
      },
      logSpecifications: {
        serializedName: "logSpecifications",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationLogsSpecification",
            },
          },
        },
      },
    },
  },
};

export const OperationMetricsSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationMetricsSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      displayDescription: {
        serializedName: "displayDescription",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      aggregationType: {
        serializedName: "aggregationType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      dimensions: {
        serializedName: "dimensions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationMetricDimension",
            },
          },
        },
      },
      availabilities: {
        serializedName: "availabilities",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationAvailability",
            },
          },
        },
      },
    },
  },
};

export const OperationMetricDimension: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationMetricDimension",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationAvailability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationAvailability",
    modelProperties: {
      timeGrain: {
        serializedName: "timeGrain",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      blobDuration: {
        serializedName: "blobDuration",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationLogsSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationLogsSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      blobDuration: {
        serializedName: "blobDuration",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CloudError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody",
        },
      },
      message: {
        serializedName: "message",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CloudErrorBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudErrorBody",
            },
          },
        },
      },
    },
  },
};

export const AdminKeyResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AdminKeyResult",
    modelProperties: {
      primaryKey: {
        serializedName: "primaryKey",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      secondaryKey: {
        serializedName: "secondaryKey",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const QueryKey: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueryKey",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      key: {
        serializedName: "key",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ListQueryKeysResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListQueryKeysResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QueryKey",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const NetworkRuleSet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkRuleSet",
    modelProperties: {
      ipRules: {
        serializedName: "ipRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpRule",
            },
          },
        },
      },
      bypass: {
        serializedName: "bypass",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const IpRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpRule",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const EncryptionWithCmk: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionWithCmk",
    modelProperties: {
      enforcement: {
        serializedName: "enforcement",
        type: {
          name: "Enum",
          allowedValues: ["Disabled", "Enabled", "Unspecified"],
        },
      },
      encryptionComplianceStatus: {
        serializedName: "encryptionComplianceStatus",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Compliant", "NonCompliant"],
        },
      },
    },
  },
};

export const DataPlaneAuthOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataPlaneAuthOptions",
    modelProperties: {
      apiKeyOnly: {
        serializedName: "apiKeyOnly",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
      aadOrApiKey: {
        serializedName: "aadOrApiKey",
        type: {
          name: "Composite",
          className: "DataPlaneAadOrApiKeyAuthOption",
        },
      },
    },
  },
};

export const DataPlaneAadOrApiKeyAuthOption: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataPlaneAadOrApiKeyAuthOption",
    modelProperties: {
      aadAuthFailureMode: {
        serializedName: "aadAuthFailureMode",
        type: {
          name: "Enum",
          allowedValues: ["http403", "http401WithBearerChallenge"],
        },
      },
    },
  },
};

export const PrivateEndpointConnectionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionProperties",
    modelProperties: {
      privateEndpoint: {
        serializedName: "privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpointConnectionPropertiesPrivateEndpoint",
        },
      },
      privateLinkServiceConnectionState: {
        serializedName: "privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className:
            "PrivateEndpointConnectionPropertiesPrivateLinkServiceConnectionState",
        },
      },
      groupId: {
        serializedName: "groupId",
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateEndpointConnectionPropertiesPrivateEndpoint: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "PrivateEndpointConnectionPropertiesPrivateEndpoint",
      modelProperties: {
        id: {
          serializedName: "id",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const PrivateEndpointConnectionPropertiesPrivateLinkServiceConnectionState: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className:
        "PrivateEndpointConnectionPropertiesPrivateLinkServiceConnectionState",
      modelProperties: {
        status: {
          serializedName: "status",
          type: {
            name: "Enum",
            allowedValues: ["Pending", "Approved", "Rejected", "Disconnected"],
          },
        },
        description: {
          serializedName: "description",
          type: {
            name: "String",
          },
        },
        actionsRequired: {
          defaultValue: "None",
          serializedName: "actionsRequired",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SharedPrivateLinkResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SharedPrivateLinkResourceProperties",
    modelProperties: {
      privateLinkResourceId: {
        serializedName: "privateLinkResourceId",
        type: {
          name: "String",
        },
      },
      groupId: {
        serializedName: "groupId",
        type: {
          name: "String",
        },
      },
      requestMessage: {
        serializedName: "requestMessage",
        type: {
          name: "String",
        },
      },
      resourceRegion: {
        serializedName: "resourceRegion",
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "status",
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Identity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Identity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String",
        },
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "UserAssignedManagedIdentity",
            },
          },
        },
      },
    },
  },
};

export const UserAssignedManagedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedManagedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SearchServiceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SearchServiceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SearchService",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateLinkResourcesResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourcesResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource",
            },
          },
        },
      },
    },
  },
};

export const PrivateLinkResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceProperties",
    modelProperties: {
      groupId: {
        serializedName: "groupId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      requiredMembers: {
        serializedName: "requiredMembers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      requiredZoneNames: {
        serializedName: "requiredZoneNames",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      shareablePrivateLinkResourceTypes: {
        serializedName: "shareablePrivateLinkResourceTypes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ShareablePrivateLinkResourceType",
            },
          },
        },
      },
    },
  },
};

export const ShareablePrivateLinkResourceType: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ShareablePrivateLinkResourceType",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ShareablePrivateLinkResourceProperties",
        },
      },
    },
  },
};

export const ShareablePrivateLinkResourceProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "ShareablePrivateLinkResourceProperties",
      modelProperties: {
        type: {
          serializedName: "type",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        groupId: {
          serializedName: "groupId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        description: {
          serializedName: "description",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const PrivateEndpointConnectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SharedPrivateLinkResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SharedPrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SharedPrivateLinkResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CheckNameAvailabilityInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityInput",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      typeParam: {
        defaultValue: "searchServices",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CheckNameAvailabilityOutput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityOutput",
    modelProperties: {
      isNameAvailable: {
        serializedName: "nameAvailable",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const QuotaUsagesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QuotaUsagesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QuotaUsageResult",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const QuotaUsageResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QuotaUsageResult",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String",
        },
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String",
        },
      },
      currentValue: {
        serializedName: "currentValue",
        type: {
          name: "Number",
        },
      },
      limit: {
        serializedName: "limit",
        type: {
          name: "Number",
        },
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "QuotaUsageResultName",
        },
      },
    },
  },
};

export const QuotaUsageResultName: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QuotaUsageResultName",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String",
        },
      },
      localizedValue: {
        serializedName: "localizedValue",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const NetworkSecurityPerimeterConfigurationListResult: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "NetworkSecurityPerimeterConfigurationListResult",
      modelProperties: {
        value: {
          serializedName: "value",
          readOnly: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "NetworkSecurityPerimeterConfiguration",
              },
            },
          },
        },
        nextLink: {
          serializedName: "nextLink",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const NSPConfigPerimeter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NSPConfigPerimeter",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String",
        },
      },
      perimeterGuid: {
        serializedName: "perimeterGuid",
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const NSPConfigAssociation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NSPConfigAssociation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      accessMode: {
        serializedName: "accessMode",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const NSPConfigProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NSPConfigProfile",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      accessRulesVersion: {
        serializedName: "accessRulesVersion",
        type: {
          name: "String",
        },
      },
      accessRules: {
        serializedName: "accessRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NSPConfigAccessRule",
            },
          },
        },
      },
    },
  },
};

export const NSPConfigAccessRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NSPConfigAccessRule",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "NSPConfigAccessRuleProperties",
        },
      },
    },
  },
};

export const NSPConfigAccessRuleProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NSPConfigAccessRuleProperties",
    modelProperties: {
      direction: {
        serializedName: "direction",
        type: {
          name: "String",
        },
      },
      addressPrefixes: {
        serializedName: "addressPrefixes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      fullyQualifiedDomainNames: {
        serializedName: "fullyQualifiedDomainNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      subscriptions: {
        serializedName: "subscriptions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      networkSecurityPerimeters: {
        serializedName: "networkSecurityPerimeters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NSPConfigNetworkSecurityPerimeterRule",
            },
          },
        },
      },
    },
  },
};

export const NSPConfigNetworkSecurityPerimeterRule: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "NSPConfigNetworkSecurityPerimeterRule",
      modelProperties: {
        id: {
          serializedName: "id",
          type: {
            name: "String",
          },
        },
        perimeterGuid: {
          serializedName: "perimeterGuid",
          type: {
            name: "String",
          },
        },
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const NSPProvisioningIssue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NSPProvisioningIssue",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "NSPProvisioningIssueProperties",
        },
      },
    },
  },
};

export const NSPProvisioningIssueProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NSPProvisioningIssueProperties",
    modelProperties: {
      issueType: {
        serializedName: "issueType",
        type: {
          name: "String",
        },
      },
      severity: {
        serializedName: "severity",
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        type: {
          name: "String",
        },
      },
      suggestedResourceIds: {
        serializedName: "suggestedResourceIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      suggestedAccessRules: {
        serializedName: "suggestedAccessRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const AsyncOperationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AsyncOperationResult",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PrivateEndpointConnectionProperties",
        },
      },
    },
  },
};

export const SharedPrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SharedPrivateLinkResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SharedPrivateLinkResourceProperties",
        },
      },
    },
  },
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SearchServiceUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SearchServiceUpdate",
    modelProperties: {
      ...Resource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity",
        },
      },
      replicaCount: {
        defaultValue: 1,
        constraints: {
          InclusiveMaximum: 12,
          InclusiveMinimum: 1,
        },
        serializedName: "properties.replicaCount",
        type: {
          name: "Number",
        },
      },
      partitionCount: {
        defaultValue: 1,
        constraints: {
          InclusiveMaximum: 12,
          InclusiveMinimum: 1,
        },
        serializedName: "properties.partitionCount",
        type: {
          name: "Number",
        },
      },
      hostingMode: {
        defaultValue: "default",
        serializedName: "properties.hostingMode",
        type: {
          name: "Enum",
          allowedValues: ["default", "highDensity"],
        },
      },
      publicNetworkAccess: {
        defaultValue: "enabled",
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "running",
            "provisioning",
            "deleting",
            "degraded",
            "disabled",
            "error",
            "stopped",
          ],
        },
      },
      statusDetails: {
        serializedName: "properties.statusDetails",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["succeeded", "provisioning", "failed"],
        },
      },
      networkRuleSet: {
        serializedName: "properties.networkRuleSet",
        type: {
          name: "Composite",
          className: "NetworkRuleSet",
        },
      },
      disabledDataExfiltrationOptions: {
        serializedName: "properties.disabledDataExfiltrationOptions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      encryptionWithCmk: {
        serializedName: "properties.encryptionWithCmk",
        type: {
          name: "Composite",
          className: "EncryptionWithCmk",
        },
      },
      disableLocalAuth: {
        serializedName: "properties.disableLocalAuth",
        nullable: true,
        type: {
          name: "Boolean",
        },
      },
      authOptions: {
        serializedName: "properties.authOptions",
        type: {
          name: "Composite",
          className: "DataPlaneAuthOptions",
        },
      },
      semanticSearch: {
        serializedName: "properties.semanticSearch",
        nullable: true,
        type: {
          name: "String",
        },
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection",
            },
          },
        },
      },
      sharedPrivateLinkResources: {
        serializedName: "properties.sharedPrivateLinkResources",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SharedPrivateLinkResource",
            },
          },
        },
      },
      eTag: {
        serializedName: "properties.eTag",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PrivateLinkResourceProperties",
        },
      },
    },
  },
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
    },
  },
};

export const SearchService: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SearchService",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku",
        },
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity",
        },
      },
      replicaCount: {
        defaultValue: 1,
        constraints: {
          InclusiveMaximum: 12,
          InclusiveMinimum: 1,
        },
        serializedName: "properties.replicaCount",
        type: {
          name: "Number",
        },
      },
      partitionCount: {
        defaultValue: 1,
        constraints: {
          InclusiveMaximum: 12,
          InclusiveMinimum: 1,
        },
        serializedName: "properties.partitionCount",
        type: {
          name: "Number",
        },
      },
      hostingMode: {
        defaultValue: "default",
        serializedName: "properties.hostingMode",
        type: {
          name: "Enum",
          allowedValues: ["default", "highDensity"],
        },
      },
      publicNetworkAccess: {
        defaultValue: "enabled",
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "running",
            "provisioning",
            "deleting",
            "degraded",
            "disabled",
            "error",
            "stopped",
          ],
        },
      },
      statusDetails: {
        serializedName: "properties.statusDetails",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["succeeded", "provisioning", "failed"],
        },
      },
      networkRuleSet: {
        serializedName: "properties.networkRuleSet",
        type: {
          name: "Composite",
          className: "NetworkRuleSet",
        },
      },
      disabledDataExfiltrationOptions: {
        serializedName: "properties.disabledDataExfiltrationOptions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      encryptionWithCmk: {
        serializedName: "properties.encryptionWithCmk",
        type: {
          name: "Composite",
          className: "EncryptionWithCmk",
        },
      },
      disableLocalAuth: {
        serializedName: "properties.disableLocalAuth",
        nullable: true,
        type: {
          name: "Boolean",
        },
      },
      authOptions: {
        serializedName: "properties.authOptions",
        type: {
          name: "Composite",
          className: "DataPlaneAuthOptions",
        },
      },
      semanticSearch: {
        serializedName: "properties.semanticSearch",
        nullable: true,
        type: {
          name: "String",
        },
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection",
            },
          },
        },
      },
      sharedPrivateLinkResources: {
        serializedName: "properties.sharedPrivateLinkResources",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SharedPrivateLinkResource",
            },
          },
        },
      },
      eTag: {
        serializedName: "properties.eTag",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const NetworkSecurityPerimeterConfiguration: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "NetworkSecurityPerimeterConfiguration",
      modelProperties: {
        ...ProxyResource.type.modelProperties,
        provisioningState: {
          serializedName: "properties.provisioningState",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        networkSecurityPerimeter: {
          serializedName: "properties.networkSecurityPerimeter",
          type: {
            name: "Composite",
            className: "NSPConfigPerimeter",
          },
        },
        resourceAssociation: {
          serializedName: "properties.resourceAssociation",
          type: {
            name: "Composite",
            className: "NSPConfigAssociation",
          },
        },
        profile: {
          serializedName: "properties.profile",
          type: {
            name: "Composite",
            className: "NSPConfigProfile",
          },
        },
        provisioningIssues: {
          serializedName: "properties.provisioningIssues",
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "NSPProvisioningIssue",
              },
            },
          },
        },
      },
    },
  };

export const NetworkSecurityPerimeterConfigurationsReconcileHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "NetworkSecurityPerimeterConfigurationsReconcileHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
      },
    },
  };
