/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const CheckNameAvailabilityInput: msRest.CompositeMapper = {
  serializedName: "CheckNameAvailabilityInput",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityInput",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        isConstant: true,
        serializedName: "type",
        defaultValue: 'searchServices',
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityOutput: msRest.CompositeMapper = {
  serializedName: "CheckNameAvailabilityOutput",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityOutput",
    modelProperties: {
      isNameAvailable: {
        readOnly: true,
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        readOnly: true,
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AdminKeyResult: msRest.CompositeMapper = {
  serializedName: "AdminKeyResult",
  type: {
    name: "Composite",
    className: "AdminKeyResult",
    modelProperties: {
      primaryKey: {
        readOnly: true,
        serializedName: "primaryKey",
        type: {
          name: "String"
        }
      },
      secondaryKey: {
        readOnly: true,
        serializedName: "secondaryKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QueryKey: msRest.CompositeMapper = {
  serializedName: "QueryKey",
  type: {
    name: "Composite",
    className: "QueryKey",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      key: {
        readOnly: true,
        serializedName: "key",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: msRest.CompositeMapper = {
  serializedName: "Sku",
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "Enum",
          allowedValues: [
            "free",
            "basic",
            "standard",
            "standard2",
            "standard3",
            "storage_optimized_l1",
            "storage_optimized_l2"
          ]
        }
      }
    }
  }
};

export const PrivateEndpointConnectionPropertiesPrivateEndpoint: msRest.CompositeMapper = {
  serializedName: "PrivateEndpointConnectionProperties_privateEndpoint",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionPropertiesPrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionPropertiesPrivateLinkServiceConnectionState: msRest.CompositeMapper = {
  serializedName: "PrivateEndpointConnectionProperties_privateLinkServiceConnectionState",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionPropertiesPrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Pending",
            "Approved",
            "Rejected",
            "Disconnected"
          ]
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        defaultValue: 'None',
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionProperties: msRest.CompositeMapper = {
  serializedName: "PrivateEndpointConnectionProperties",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionProperties",
    modelProperties: {
      privateEndpoint: {
        serializedName: "privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpointConnectionPropertiesPrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateEndpointConnectionPropertiesPrivateLinkServiceConnectionState"
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnection: msRest.CompositeMapper = {
  serializedName: "PrivateEndpointConnection",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PrivateEndpointConnectionProperties"
        }
      }
    }
  }
};

export const IpRule: msRest.CompositeMapper = {
  serializedName: "IpRule",
  type: {
    name: "Composite",
    className: "IpRule",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkRuleSet: msRest.CompositeMapper = {
  serializedName: "NetworkRuleSet",
  type: {
    name: "Composite",
    className: "NetworkRuleSet",
    modelProperties: {
      ipRules: {
        serializedName: "ipRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpRule"
            }
          }
        }
      }
    }
  }
};

export const SharedPrivateLinkResourceProperties: msRest.CompositeMapper = {
  serializedName: "SharedPrivateLinkResourceProperties",
  type: {
    name: "Composite",
    className: "SharedPrivateLinkResourceProperties",
    modelProperties: {
      privateLinkResourceId: {
        serializedName: "privateLinkResourceId",
        type: {
          name: "String"
        }
      },
      groupId: {
        serializedName: "groupId",
        type: {
          name: "String"
        }
      },
      requestMessage: {
        serializedName: "requestMessage",
        type: {
          name: "String"
        }
      },
      resourceRegion: {
        serializedName: "resourceRegion",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Pending",
            "Approved",
            "Rejected",
            "Disconnected"
          ]
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Updating",
            "Deleting",
            "Failed",
            "Succeeded",
            "Incomplete"
          ]
        }
      }
    }
  }
};

export const SharedPrivateLinkResource: msRest.CompositeMapper = {
  serializedName: "SharedPrivateLinkResource",
  type: {
    name: "Composite",
    className: "SharedPrivateLinkResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SharedPrivateLinkResourceProperties"
        }
      }
    }
  }
};

export const ShareablePrivateLinkResourceProperties: msRest.CompositeMapper = {
  serializedName: "ShareablePrivateLinkResourceProperties",
  type: {
    name: "Composite",
    className: "ShareablePrivateLinkResourceProperties",
    modelProperties: {
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      groupId: {
        readOnly: true,
        serializedName: "groupId",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ShareablePrivateLinkResourceType: msRest.CompositeMapper = {
  serializedName: "ShareablePrivateLinkResourceType",
  type: {
    name: "Composite",
    className: "ShareablePrivateLinkResourceType",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      properties: {
        readOnly: true,
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ShareablePrivateLinkResourceProperties"
        }
      }
    }
  }
};

export const PrivateLinkResourceProperties: msRest.CompositeMapper = {
  serializedName: "PrivateLinkResourceProperties",
  type: {
    name: "Composite",
    className: "PrivateLinkResourceProperties",
    modelProperties: {
      groupId: {
        readOnly: true,
        serializedName: "groupId",
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        readOnly: true,
        serializedName: "requiredMembers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      requiredZoneNames: {
        readOnly: true,
        serializedName: "requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      shareablePrivateLinkResourceTypes: {
        readOnly: true,
        serializedName: "shareablePrivateLinkResourceTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ShareablePrivateLinkResourceType"
            }
          }
        }
      }
    }
  }
};

export const PrivateLinkResource: msRest.CompositeMapper = {
  serializedName: "PrivateLinkResource",
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        readOnly: true,
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PrivateLinkResourceProperties"
        }
      }
    }
  }
};

export const Identity: msRest.CompositeMapper = {
  serializedName: "Identity",
  type: {
    name: "Composite",
    className: "Identity",
    modelProperties: {
      principalId: {
        readOnly: true,
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      tenantId: {
        readOnly: true,
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "SystemAssigned"
          ]
        }
      }
    }
  }
};

export const TrackedResource: msRest.CompositeMapper = {
  serializedName: "TrackedResource",
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SearchService: msRest.CompositeMapper = {
  serializedName: "SearchService",
  type: {
    name: "Composite",
    className: "SearchService",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      replicaCount: {
        serializedName: "properties.replicaCount",
        defaultValue: 1,
        constraints: {
          InclusiveMaximum: 12,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      partitionCount: {
        serializedName: "properties.partitionCount",
        defaultValue: 1,
        constraints: {
          InclusiveMaximum: 12,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      hostingMode: {
        serializedName: "properties.hostingMode",
        defaultValue: 'default',
        type: {
          name: "Enum",
          allowedValues: [
            "default",
            "highDensity"
          ]
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        defaultValue: 'enabled',
        type: {
          name: "Enum",
          allowedValues: [
            "enabled",
            "disabled"
          ]
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "running",
            "provisioning",
            "deleting",
            "degraded",
            "disabled",
            "error"
          ]
        }
      },
      statusDetails: {
        readOnly: true,
        serializedName: "properties.statusDetails",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "succeeded",
            "provisioning",
            "failed"
          ]
        }
      },
      networkRuleSet: {
        serializedName: "properties.networkRuleSet",
        type: {
          name: "Composite",
          className: "NetworkRuleSet"
        }
      },
      privateEndpointConnections: {
        readOnly: true,
        serializedName: "properties.privateEndpointConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      sharedPrivateLinkResources: {
        readOnly: true,
        serializedName: "properties.sharedPrivateLinkResources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SharedPrivateLinkResource"
            }
          }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      }
    }
  }
};

export const SearchServiceUpdate: msRest.CompositeMapper = {
  serializedName: "SearchServiceUpdate",
  type: {
    name: "Composite",
    className: "SearchServiceUpdate",
    modelProperties: {
      ...Resource.type.modelProperties,
      replicaCount: {
        serializedName: "properties.replicaCount",
        defaultValue: 1,
        constraints: {
          InclusiveMaximum: 12,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      partitionCount: {
        serializedName: "properties.partitionCount",
        defaultValue: 1,
        constraints: {
          InclusiveMaximum: 12,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      hostingMode: {
        serializedName: "properties.hostingMode",
        defaultValue: 'default',
        type: {
          name: "Enum",
          allowedValues: [
            "default",
            "highDensity"
          ]
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        defaultValue: 'enabled',
        type: {
          name: "Enum",
          allowedValues: [
            "enabled",
            "disabled"
          ]
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "running",
            "provisioning",
            "deleting",
            "degraded",
            "disabled",
            "error"
          ]
        }
      },
      statusDetails: {
        readOnly: true,
        serializedName: "properties.statusDetails",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "succeeded",
            "provisioning",
            "failed"
          ]
        }
      },
      networkRuleSet: {
        serializedName: "properties.networkRuleSet",
        type: {
          name: "Composite",
          className: "NetworkRuleSet"
        }
      },
      privateEndpointConnections: {
        readOnly: true,
        serializedName: "properties.privateEndpointConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      sharedPrivateLinkResources: {
        readOnly: true,
        serializedName: "properties.sharedPrivateLinkResources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SharedPrivateLinkResource"
            }
          }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      }
    }
  }
};

export const AsyncOperationResult: msRest.CompositeMapper = {
  serializedName: "AsyncOperationResult",
  type: {
    name: "Composite",
    className: "AsyncOperationResult",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: msRest.CompositeMapper = {
  serializedName: "Operation_display",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        readOnly: true,
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      operation: {
        readOnly: true,
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      resource: {
        readOnly: true,
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: msRest.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        readOnly: true,
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const ProxyResource: msRest.CompositeMapper = {
  serializedName: "ProxyResource",
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const AzureEntityResource: msRest.CompositeMapper = {
  serializedName: "AzureEntityResource",
  type: {
    name: "Composite",
    className: "AzureEntityResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SearchManagementRequestOptions: msRest.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SearchManagementRequestOptions",
    modelProperties: {
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const OperationListResult: msRest.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      }
    }
  }
};

export const ListQueryKeysResult: msRest.CompositeMapper = {
  serializedName: "ListQueryKeysResult",
  type: {
    name: "Composite",
    className: "ListQueryKeysResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QueryKey"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SearchServiceListResult: msRest.CompositeMapper = {
  serializedName: "SearchServiceListResult",
  type: {
    name: "Composite",
    className: "SearchServiceListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SearchService"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResourcesResult: msRest.CompositeMapper = {
  serializedName: "PrivateLinkResourcesResult",
  type: {
    name: "Composite",
    className: "PrivateLinkResourcesResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      }
    }
  }
};

export const PrivateEndpointConnectionListResult: msRest.CompositeMapper = {
  serializedName: "PrivateEndpointConnectionListResult",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SharedPrivateLinkResourceListResult: msRest.CompositeMapper = {
  serializedName: "SharedPrivateLinkResourceListResult",
  type: {
    name: "Composite",
    className: "SharedPrivateLinkResourceListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SharedPrivateLinkResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};
