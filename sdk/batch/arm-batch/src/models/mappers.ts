/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/core-arm";
import * as coreHttp from "@azure/core-http";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const AutoStorageBaseProperties: coreHttp.CompositeMapper = {
  serializedName: "AutoStorageBaseProperties",
  type: {
    name: "Composite",
    className: "AutoStorageBaseProperties",
    modelProperties: {
      storageAccountId: {
        required: true,
        serializedName: "storageAccountId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyVaultReference: coreHttp.CompositeMapper = {
  serializedName: "KeyVaultReference",
  type: {
    name: "Composite",
    className: "KeyVaultReference",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      url: {
        required: true,
        serializedName: "url",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BatchAccountCreateParameters: coreHttp.CompositeMapper = {
  serializedName: "BatchAccountCreateParameters",
  type: {
    name: "Composite",
    className: "BatchAccountCreateParameters",
    modelProperties: {
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      autoStorage: {
        serializedName: "properties.autoStorage",
        type: {
          name: "Composite",
          className: "AutoStorageBaseProperties"
        }
      },
      poolAllocationMode: {
        serializedName: "properties.poolAllocationMode",
        type: {
          name: "Enum",
          allowedValues: [
            "BatchService",
            "UserSubscription"
          ]
        }
      },
      keyVaultReference: {
        serializedName: "properties.keyVaultReference",
        type: {
          name: "Composite",
          className: "KeyVaultReference"
        }
      }
    }
  }
};

export const AutoStorageProperties: coreHttp.CompositeMapper = {
  serializedName: "AutoStorageProperties",
  type: {
    name: "Composite",
    className: "AutoStorageProperties",
    modelProperties: {
      ...AutoStorageBaseProperties.type.modelProperties,
      lastKeySync: {
        required: true,
        serializedName: "lastKeySync",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const VirtualMachineFamilyCoreQuota: coreHttp.CompositeMapper = {
  serializedName: "VirtualMachineFamilyCoreQuota",
  type: {
    name: "Composite",
    className: "VirtualMachineFamilyCoreQuota",
    modelProperties: {
      name: {
        nullable: false,
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      coreQuota: {
        nullable: false,
        readOnly: true,
        serializedName: "coreQuota",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Resource: coreHttp.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        readOnly: true,
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const BatchAccount: coreHttp.CompositeMapper = {
  serializedName: "BatchAccount",
  type: {
    name: "Composite",
    className: "BatchAccount",
    modelProperties: {
      ...Resource.type.modelProperties,
      accountEndpoint: {
        readOnly: true,
        serializedName: "properties.accountEndpoint",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Invalid",
            "Creating",
            "Deleting",
            "Succeeded",
            "Failed",
            "Cancelled"
          ]
        }
      },
      poolAllocationMode: {
        readOnly: true,
        serializedName: "properties.poolAllocationMode",
        type: {
          name: "Enum",
          allowedValues: [
            "BatchService",
            "UserSubscription"
          ]
        }
      },
      keyVaultReference: {
        readOnly: true,
        serializedName: "properties.keyVaultReference",
        type: {
          name: "Composite",
          className: "KeyVaultReference"
        }
      },
      autoStorage: {
        readOnly: true,
        serializedName: "properties.autoStorage",
        type: {
          name: "Composite",
          className: "AutoStorageProperties"
        }
      },
      dedicatedCoreQuota: {
        nullable: true,
        readOnly: true,
        serializedName: "properties.dedicatedCoreQuota",
        type: {
          name: "Number"
        }
      },
      lowPriorityCoreQuota: {
        nullable: true,
        readOnly: true,
        serializedName: "properties.lowPriorityCoreQuota",
        type: {
          name: "Number"
        }
      },
      dedicatedCoreQuotaPerVMFamily: {
        nullable: true,
        readOnly: true,
        serializedName: "properties.dedicatedCoreQuotaPerVMFamily",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachineFamilyCoreQuota"
            }
          }
        }
      },
      dedicatedCoreQuotaPerVMFamilyEnforced: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.dedicatedCoreQuotaPerVMFamilyEnforced",
        type: {
          name: "Boolean"
        }
      },
      poolQuota: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.poolQuota",
        type: {
          name: "Number"
        }
      },
      activeJobAndJobScheduleQuota: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.activeJobAndJobScheduleQuota",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BatchAccountUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "BatchAccountUpdateParameters",
  type: {
    name: "Composite",
    className: "BatchAccountUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      autoStorage: {
        serializedName: "properties.autoStorage",
        type: {
          name: "Composite",
          className: "AutoStorageBaseProperties"
        }
      }
    }
  }
};

export const BatchAccountRegenerateKeyParameters: coreHttp.CompositeMapper = {
  serializedName: "BatchAccountRegenerateKeyParameters",
  type: {
    name: "Composite",
    className: "BatchAccountRegenerateKeyParameters",
    modelProperties: {
      keyName: {
        required: true,
        serializedName: "keyName",
        type: {
          name: "Enum",
          allowedValues: [
            "Primary",
            "Secondary"
          ]
        }
      }
    }
  }
};

export const BatchAccountKeys: coreHttp.CompositeMapper = {
  serializedName: "BatchAccountKeys",
  type: {
    name: "Composite",
    className: "BatchAccountKeys",
    modelProperties: {
      accountName: {
        readOnly: true,
        serializedName: "accountName",
        type: {
          name: "String"
        }
      },
      primary: {
        readOnly: true,
        serializedName: "primary",
        type: {
          name: "String"
        }
      },
      secondary: {
        readOnly: true,
        serializedName: "secondary",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ActivateApplicationPackageParameters: coreHttp.CompositeMapper = {
  serializedName: "ActivateApplicationPackageParameters",
  type: {
    name: "Composite",
    className: "ActivateApplicationPackageParameters",
    modelProperties: {
      format: {
        required: true,
        serializedName: "format",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreHttp.CompositeMapper = {
  serializedName: "ProxyResource",
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Application: coreHttp.CompositeMapper = {
  serializedName: "Application",
  type: {
    name: "Composite",
    className: "Application",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      allowUpdates: {
        serializedName: "properties.allowUpdates",
        type: {
          name: "Boolean"
        }
      },
      defaultVersion: {
        serializedName: "properties.defaultVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationPackage: coreHttp.CompositeMapper = {
  serializedName: "ApplicationPackage",
  type: {
    name: "Composite",
    className: "ApplicationPackage",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: [
            "Pending",
            "Active"
          ]
        }
      },
      format: {
        readOnly: true,
        serializedName: "properties.format",
        type: {
          name: "String"
        }
      },
      storageUrl: {
        readOnly: true,
        serializedName: "properties.storageUrl",
        type: {
          name: "String"
        }
      },
      storageUrlExpiry: {
        readOnly: true,
        serializedName: "properties.storageUrlExpiry",
        type: {
          name: "DateTime"
        }
      },
      lastActivationTime: {
        readOnly: true,
        serializedName: "properties.lastActivationTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const BatchLocationQuota: coreHttp.CompositeMapper = {
  serializedName: "BatchLocationQuota",
  type: {
    name: "Composite",
    className: "BatchLocationQuota",
    modelProperties: {
      accountQuota: {
        readOnly: true,
        serializedName: "accountQuota",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CertificateBaseProperties: coreHttp.CompositeMapper = {
  serializedName: "CertificateBaseProperties",
  type: {
    name: "Composite",
    className: "CertificateBaseProperties",
    modelProperties: {
      thumbprintAlgorithm: {
        serializedName: "thumbprintAlgorithm",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "thumbprint",
        type: {
          name: "String"
        }
      },
      format: {
        nullable: false,
        serializedName: "format",
        type: {
          name: "Enum",
          allowedValues: [
            "Pfx",
            "Cer"
          ]
        }
      }
    }
  }
};

export const DeleteCertificateError: coreHttp.CompositeMapper = {
  serializedName: "DeleteCertificateError",
  type: {
    name: "Composite",
    className: "DeleteCertificateError",
    modelProperties: {
      code: {
        required: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        required: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeleteCertificateError"
            }
          }
        }
      }
    }
  }
};

export const Certificate: coreHttp.CompositeMapper = {
  serializedName: "Certificate",
  type: {
    name: "Composite",
    className: "Certificate",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      thumbprintAlgorithm: {
        serializedName: "properties.thumbprintAlgorithm",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "properties.thumbprint",
        type: {
          name: "String"
        }
      },
      format: {
        nullable: false,
        serializedName: "properties.format",
        type: {
          name: "Enum",
          allowedValues: [
            "Pfx",
            "Cer"
          ]
        }
      },
      provisioningState: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Succeeded",
            "Deleting",
            "Failed"
          ]
        }
      },
      provisioningStateTransitionTime: {
        readOnly: true,
        serializedName: "properties.provisioningStateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      previousProvisioningState: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.previousProvisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Succeeded",
            "Deleting",
            "Failed"
          ]
        }
      },
      previousProvisioningStateTransitionTime: {
        readOnly: true,
        serializedName: "properties.previousProvisioningStateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      publicData: {
        readOnly: true,
        serializedName: "properties.publicData",
        type: {
          name: "String"
        }
      },
      deleteCertificateError: {
        readOnly: true,
        serializedName: "properties.deleteCertificateError",
        type: {
          name: "Composite",
          className: "DeleteCertificateError"
        }
      }
    }
  }
};

export const CertificateCreateOrUpdateParameters: coreHttp.CompositeMapper = {
  serializedName: "CertificateCreateOrUpdateParameters",
  type: {
    name: "Composite",
    className: "CertificateCreateOrUpdateParameters",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      thumbprintAlgorithm: {
        serializedName: "properties.thumbprintAlgorithm",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "properties.thumbprint",
        type: {
          name: "String"
        }
      },
      format: {
        nullable: false,
        serializedName: "properties.format",
        type: {
          name: "Enum",
          allowedValues: [
            "Pfx",
            "Cer"
          ]
        }
      },
      data: {
        required: true,
        serializedName: "properties.data",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "properties.password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudServiceConfiguration: coreHttp.CompositeMapper = {
  serializedName: "CloudServiceConfiguration",
  type: {
    name: "Composite",
    className: "CloudServiceConfiguration",
    modelProperties: {
      osFamily: {
        required: true,
        serializedName: "osFamily",
        type: {
          name: "String"
        }
      },
      osVersion: {
        serializedName: "osVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageReference: coreHttp.CompositeMapper = {
  serializedName: "ImageReference",
  type: {
    name: "Composite",
    className: "ImageReference",
    modelProperties: {
      publisher: {
        serializedName: "publisher",
        type: {
          name: "String"
        }
      },
      offer: {
        serializedName: "offer",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WindowsConfiguration: coreHttp.CompositeMapper = {
  serializedName: "WindowsConfiguration",
  type: {
    name: "Composite",
    className: "WindowsConfiguration",
    modelProperties: {
      enableAutomaticUpdates: {
        serializedName: "enableAutomaticUpdates",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DataDisk: coreHttp.CompositeMapper = {
  serializedName: "DataDisk",
  type: {
    name: "Composite",
    className: "DataDisk",
    modelProperties: {
      lun: {
        required: true,
        serializedName: "lun",
        type: {
          name: "Number"
        }
      },
      caching: {
        serializedName: "caching",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "ReadOnly",
            "ReadWrite"
          ]
        }
      },
      diskSizeGB: {
        required: true,
        serializedName: "diskSizeGB",
        type: {
          name: "Number"
        }
      },
      storageAccountType: {
        serializedName: "storageAccountType",
        type: {
          name: "Enum",
          allowedValues: [
            "Standard_LRS",
            "Premium_LRS"
          ]
        }
      }
    }
  }
};

export const ContainerRegistry: coreHttp.CompositeMapper = {
  serializedName: "ContainerRegistry",
  type: {
    name: "Composite",
    className: "ContainerRegistry",
    modelProperties: {
      registryServer: {
        serializedName: "registryServer",
        type: {
          name: "String"
        }
      },
      userName: {
        required: true,
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        required: true,
        serializedName: "password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerConfiguration: coreHttp.CompositeMapper = {
  serializedName: "ContainerConfiguration",
  type: {
    name: "Composite",
    className: "ContainerConfiguration",
    modelProperties: {
      type: {
        required: true,
        isConstant: true,
        serializedName: "type",
        defaultValue: 'DockerCompatible',
        type: {
          name: "String"
        }
      },
      containerImageNames: {
        serializedName: "containerImageNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      containerRegistries: {
        serializedName: "containerRegistries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerRegistry"
            }
          }
        }
      }
    }
  }
};

export const VirtualMachineConfiguration: coreHttp.CompositeMapper = {
  serializedName: "VirtualMachineConfiguration",
  type: {
    name: "Composite",
    className: "VirtualMachineConfiguration",
    modelProperties: {
      imageReference: {
        required: true,
        serializedName: "imageReference",
        type: {
          name: "Composite",
          className: "ImageReference"
        }
      },
      nodeAgentSkuId: {
        required: true,
        serializedName: "nodeAgentSkuId",
        type: {
          name: "String"
        }
      },
      windowsConfiguration: {
        serializedName: "windowsConfiguration",
        type: {
          name: "Composite",
          className: "WindowsConfiguration"
        }
      },
      dataDisks: {
        serializedName: "dataDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataDisk"
            }
          }
        }
      },
      licenseType: {
        serializedName: "licenseType",
        type: {
          name: "String"
        }
      },
      containerConfiguration: {
        serializedName: "containerConfiguration",
        type: {
          name: "Composite",
          className: "ContainerConfiguration"
        }
      }
    }
  }
};

export const DeploymentConfiguration: coreHttp.CompositeMapper = {
  serializedName: "DeploymentConfiguration",
  type: {
    name: "Composite",
    className: "DeploymentConfiguration",
    modelProperties: {
      cloudServiceConfiguration: {
        serializedName: "cloudServiceConfiguration",
        type: {
          name: "Composite",
          className: "CloudServiceConfiguration"
        }
      },
      virtualMachineConfiguration: {
        serializedName: "virtualMachineConfiguration",
        type: {
          name: "Composite",
          className: "VirtualMachineConfiguration"
        }
      }
    }
  }
};

export const FixedScaleSettings: coreHttp.CompositeMapper = {
  serializedName: "FixedScaleSettings",
  type: {
    name: "Composite",
    className: "FixedScaleSettings",
    modelProperties: {
      resizeTimeout: {
        serializedName: "resizeTimeout",
        type: {
          name: "TimeSpan"
        }
      },
      targetDedicatedNodes: {
        serializedName: "targetDedicatedNodes",
        type: {
          name: "Number"
        }
      },
      targetLowPriorityNodes: {
        serializedName: "targetLowPriorityNodes",
        type: {
          name: "Number"
        }
      },
      nodeDeallocationOption: {
        serializedName: "nodeDeallocationOption",
        type: {
          name: "Enum",
          allowedValues: [
            "Requeue",
            "Terminate",
            "TaskCompletion",
            "RetainedData"
          ]
        }
      }
    }
  }
};

export const AutoScaleSettings: coreHttp.CompositeMapper = {
  serializedName: "AutoScaleSettings",
  type: {
    name: "Composite",
    className: "AutoScaleSettings",
    modelProperties: {
      formula: {
        required: true,
        serializedName: "formula",
        type: {
          name: "String"
        }
      },
      evaluationInterval: {
        serializedName: "evaluationInterval",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const ScaleSettings: coreHttp.CompositeMapper = {
  serializedName: "ScaleSettings",
  type: {
    name: "Composite",
    className: "ScaleSettings",
    modelProperties: {
      fixedScale: {
        serializedName: "fixedScale",
        type: {
          name: "Composite",
          className: "FixedScaleSettings"
        }
      },
      autoScale: {
        serializedName: "autoScale",
        type: {
          name: "Composite",
          className: "AutoScaleSettings"
        }
      }
    }
  }
};

export const AutoScaleRunError: coreHttp.CompositeMapper = {
  serializedName: "AutoScaleRunError",
  type: {
    name: "Composite",
    className: "AutoScaleRunError",
    modelProperties: {
      code: {
        required: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        required: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AutoScaleRunError"
            }
          }
        }
      }
    }
  }
};

export const AutoScaleRun: coreHttp.CompositeMapper = {
  serializedName: "AutoScaleRun",
  type: {
    name: "Composite",
    className: "AutoScaleRun",
    modelProperties: {
      evaluationTime: {
        required: true,
        serializedName: "evaluationTime",
        type: {
          name: "DateTime"
        }
      },
      results: {
        serializedName: "results",
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "AutoScaleRunError"
        }
      }
    }
  }
};

export const NetworkSecurityGroupRule: coreHttp.CompositeMapper = {
  serializedName: "NetworkSecurityGroupRule",
  type: {
    name: "Composite",
    className: "NetworkSecurityGroupRule",
    modelProperties: {
      priority: {
        required: true,
        serializedName: "priority",
        type: {
          name: "Number"
        }
      },
      access: {
        required: true,
        serializedName: "access",
        type: {
          name: "Enum",
          allowedValues: [
            "Allow",
            "Deny"
          ]
        }
      },
      sourceAddressPrefix: {
        required: true,
        serializedName: "sourceAddressPrefix",
        type: {
          name: "String"
        }
      },
      sourcePortRanges: {
        serializedName: "sourcePortRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const InboundNatPool: coreHttp.CompositeMapper = {
  serializedName: "InboundNatPool",
  type: {
    name: "Composite",
    className: "InboundNatPool",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      protocol: {
        required: true,
        serializedName: "protocol",
        type: {
          name: "Enum",
          allowedValues: [
            "TCP",
            "UDP"
          ]
        }
      },
      backendPort: {
        required: true,
        serializedName: "backendPort",
        type: {
          name: "Number"
        }
      },
      frontendPortRangeStart: {
        required: true,
        serializedName: "frontendPortRangeStart",
        type: {
          name: "Number"
        }
      },
      frontendPortRangeEnd: {
        required: true,
        serializedName: "frontendPortRangeEnd",
        type: {
          name: "Number"
        }
      },
      networkSecurityGroupRules: {
        serializedName: "networkSecurityGroupRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkSecurityGroupRule"
            }
          }
        }
      }
    }
  }
};

export const PoolEndpointConfiguration: coreHttp.CompositeMapper = {
  serializedName: "PoolEndpointConfiguration",
  type: {
    name: "Composite",
    className: "PoolEndpointConfiguration",
    modelProperties: {
      inboundNatPools: {
        required: true,
        serializedName: "inboundNatPools",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InboundNatPool"
            }
          }
        }
      }
    }
  }
};

export const NetworkConfiguration: coreHttp.CompositeMapper = {
  serializedName: "NetworkConfiguration",
  type: {
    name: "Composite",
    className: "NetworkConfiguration",
    modelProperties: {
      subnetId: {
        serializedName: "subnetId",
        type: {
          name: "String"
        }
      },
      endpointConfiguration: {
        serializedName: "endpointConfiguration",
        type: {
          name: "Composite",
          className: "PoolEndpointConfiguration"
        }
      },
      publicIPs: {
        serializedName: "publicIPs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const TaskSchedulingPolicy: coreHttp.CompositeMapper = {
  serializedName: "TaskSchedulingPolicy",
  type: {
    name: "Composite",
    className: "TaskSchedulingPolicy",
    modelProperties: {
      nodeFillType: {
        required: true,
        serializedName: "nodeFillType",
        type: {
          name: "Enum",
          allowedValues: [
            "Spread",
            "Pack"
          ]
        }
      }
    }
  }
};

export const LinuxUserConfiguration: coreHttp.CompositeMapper = {
  serializedName: "LinuxUserConfiguration",
  type: {
    name: "Composite",
    className: "LinuxUserConfiguration",
    modelProperties: {
      uid: {
        serializedName: "uid",
        type: {
          name: "Number"
        }
      },
      gid: {
        serializedName: "gid",
        type: {
          name: "Number"
        }
      },
      sshPrivateKey: {
        serializedName: "sshPrivateKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WindowsUserConfiguration: coreHttp.CompositeMapper = {
  serializedName: "WindowsUserConfiguration",
  type: {
    name: "Composite",
    className: "WindowsUserConfiguration",
    modelProperties: {
      loginMode: {
        serializedName: "loginMode",
        type: {
          name: "Enum",
          allowedValues: [
            "Batch",
            "Interactive"
          ]
        }
      }
    }
  }
};

export const UserAccount: coreHttp.CompositeMapper = {
  serializedName: "UserAccount",
  type: {
    name: "Composite",
    className: "UserAccount",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      password: {
        required: true,
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      elevationLevel: {
        serializedName: "elevationLevel",
        type: {
          name: "Enum",
          allowedValues: [
            "NonAdmin",
            "Admin"
          ]
        }
      },
      linuxUserConfiguration: {
        serializedName: "linuxUserConfiguration",
        type: {
          name: "Composite",
          className: "LinuxUserConfiguration"
        }
      },
      windowsUserConfiguration: {
        serializedName: "windowsUserConfiguration",
        type: {
          name: "Composite",
          className: "WindowsUserConfiguration"
        }
      }
    }
  }
};

export const MetadataItem: coreHttp.CompositeMapper = {
  serializedName: "MetadataItem",
  type: {
    name: "Composite",
    className: "MetadataItem",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceFile: coreHttp.CompositeMapper = {
  serializedName: "ResourceFile",
  type: {
    name: "Composite",
    className: "ResourceFile",
    modelProperties: {
      autoStorageContainerName: {
        serializedName: "autoStorageContainerName",
        type: {
          name: "String"
        }
      },
      storageContainerUrl: {
        serializedName: "storageContainerUrl",
        type: {
          name: "String"
        }
      },
      httpUrl: {
        serializedName: "httpUrl",
        type: {
          name: "String"
        }
      },
      blobPrefix: {
        serializedName: "blobPrefix",
        type: {
          name: "String"
        }
      },
      filePath: {
        serializedName: "filePath",
        type: {
          name: "String"
        }
      },
      fileMode: {
        serializedName: "fileMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnvironmentSetting: coreHttp.CompositeMapper = {
  serializedName: "EnvironmentSetting",
  type: {
    name: "Composite",
    className: "EnvironmentSetting",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AutoUserSpecification: coreHttp.CompositeMapper = {
  serializedName: "AutoUserSpecification",
  type: {
    name: "Composite",
    className: "AutoUserSpecification",
    modelProperties: {
      scope: {
        serializedName: "scope",
        type: {
          name: "Enum",
          allowedValues: [
            "Task",
            "Pool"
          ]
        }
      },
      elevationLevel: {
        serializedName: "elevationLevel",
        type: {
          name: "Enum",
          allowedValues: [
            "NonAdmin",
            "Admin"
          ]
        }
      }
    }
  }
};

export const UserIdentity: coreHttp.CompositeMapper = {
  serializedName: "UserIdentity",
  type: {
    name: "Composite",
    className: "UserIdentity",
    modelProperties: {
      userName: {
        serializedName: "userName",
        type: {
          name: "String"
        }
      },
      autoUser: {
        serializedName: "autoUser",
        type: {
          name: "Composite",
          className: "AutoUserSpecification"
        }
      }
    }
  }
};

export const TaskContainerSettings: coreHttp.CompositeMapper = {
  serializedName: "TaskContainerSettings",
  type: {
    name: "Composite",
    className: "TaskContainerSettings",
    modelProperties: {
      containerRunOptions: {
        serializedName: "containerRunOptions",
        type: {
          name: "String"
        }
      },
      imageName: {
        required: true,
        serializedName: "imageName",
        type: {
          name: "String"
        }
      },
      registry: {
        serializedName: "registry",
        type: {
          name: "Composite",
          className: "ContainerRegistry"
        }
      },
      workingDirectory: {
        serializedName: "workingDirectory",
        type: {
          name: "Enum",
          allowedValues: [
            "TaskWorkingDirectory",
            "ContainerImageDefault"
          ]
        }
      }
    }
  }
};

export const StartTask: coreHttp.CompositeMapper = {
  serializedName: "StartTask",
  type: {
    name: "Composite",
    className: "StartTask",
    modelProperties: {
      commandLine: {
        serializedName: "commandLine",
        type: {
          name: "String"
        }
      },
      resourceFiles: {
        serializedName: "resourceFiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceFile"
            }
          }
        }
      },
      environmentSettings: {
        serializedName: "environmentSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentSetting"
            }
          }
        }
      },
      userIdentity: {
        serializedName: "userIdentity",
        type: {
          name: "Composite",
          className: "UserIdentity"
        }
      },
      maxTaskRetryCount: {
        serializedName: "maxTaskRetryCount",
        type: {
          name: "Number"
        }
      },
      waitForSuccess: {
        serializedName: "waitForSuccess",
        type: {
          name: "Boolean"
        }
      },
      containerSettings: {
        serializedName: "containerSettings",
        type: {
          name: "Composite",
          className: "TaskContainerSettings"
        }
      }
    }
  }
};

export const CertificateReference: coreHttp.CompositeMapper = {
  serializedName: "CertificateReference",
  type: {
    name: "Composite",
    className: "CertificateReference",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      storeLocation: {
        serializedName: "storeLocation",
        type: {
          name: "Enum",
          allowedValues: [
            "CurrentUser",
            "LocalMachine"
          ]
        }
      },
      storeName: {
        serializedName: "storeName",
        type: {
          name: "String"
        }
      },
      visibility: {
        serializedName: "visibility",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "StartTask",
                "Task",
                "RemoteUser"
              ]
            }
          }
        }
      }
    }
  }
};

export const ApplicationPackageReference: coreHttp.CompositeMapper = {
  serializedName: "ApplicationPackageReference",
  type: {
    name: "Composite",
    className: "ApplicationPackageReference",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResizeError: coreHttp.CompositeMapper = {
  serializedName: "ResizeError",
  type: {
    name: "Composite",
    className: "ResizeError",
    modelProperties: {
      code: {
        required: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        required: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResizeError"
            }
          }
        }
      }
    }
  }
};

export const ResizeOperationStatus: coreHttp.CompositeMapper = {
  serializedName: "ResizeOperationStatus",
  type: {
    name: "Composite",
    className: "ResizeOperationStatus",
    modelProperties: {
      targetDedicatedNodes: {
        serializedName: "targetDedicatedNodes",
        type: {
          name: "Number"
        }
      },
      targetLowPriorityNodes: {
        serializedName: "targetLowPriorityNodes",
        type: {
          name: "Number"
        }
      },
      resizeTimeout: {
        serializedName: "resizeTimeout",
        type: {
          name: "TimeSpan"
        }
      },
      nodeDeallocationOption: {
        serializedName: "nodeDeallocationOption",
        type: {
          name: "Enum",
          allowedValues: [
            "Requeue",
            "Terminate",
            "TaskCompletion",
            "RetainedData"
          ]
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResizeError"
            }
          }
        }
      }
    }
  }
};

export const AzureBlobFileSystemConfiguration: coreHttp.CompositeMapper = {
  serializedName: "AzureBlobFileSystemConfiguration",
  type: {
    name: "Composite",
    className: "AzureBlobFileSystemConfiguration",
    modelProperties: {
      accountName: {
        required: true,
        serializedName: "accountName",
        type: {
          name: "String"
        }
      },
      containerName: {
        required: true,
        serializedName: "containerName",
        type: {
          name: "String"
        }
      },
      accountKey: {
        serializedName: "accountKey",
        type: {
          name: "String"
        }
      },
      sasKey: {
        serializedName: "sasKey",
        type: {
          name: "String"
        }
      },
      blobfuseOptions: {
        serializedName: "blobfuseOptions",
        type: {
          name: "String"
        }
      },
      relativeMountPath: {
        required: true,
        serializedName: "relativeMountPath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NFSMountConfiguration: coreHttp.CompositeMapper = {
  serializedName: "NFSMountConfiguration",
  type: {
    name: "Composite",
    className: "NFSMountConfiguration",
    modelProperties: {
      source: {
        required: true,
        serializedName: "source",
        type: {
          name: "String"
        }
      },
      relativeMountPath: {
        required: true,
        serializedName: "relativeMountPath",
        type: {
          name: "String"
        }
      },
      mountOptions: {
        serializedName: "mountOptions",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CIFSMountConfiguration: coreHttp.CompositeMapper = {
  serializedName: "CIFSMountConfiguration",
  type: {
    name: "Composite",
    className: "CIFSMountConfiguration",
    modelProperties: {
      username: {
        required: true,
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      source: {
        required: true,
        serializedName: "source",
        type: {
          name: "String"
        }
      },
      relativeMountPath: {
        required: true,
        serializedName: "relativeMountPath",
        type: {
          name: "String"
        }
      },
      mountOptions: {
        serializedName: "mountOptions",
        type: {
          name: "String"
        }
      },
      password: {
        required: true,
        serializedName: "password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFileShareConfiguration: coreHttp.CompositeMapper = {
  serializedName: "AzureFileShareConfiguration",
  type: {
    name: "Composite",
    className: "AzureFileShareConfiguration",
    modelProperties: {
      accountName: {
        required: true,
        serializedName: "accountName",
        type: {
          name: "String"
        }
      },
      azureFileUrl: {
        required: true,
        serializedName: "azureFileUrl",
        type: {
          name: "String"
        }
      },
      accountKey: {
        required: true,
        serializedName: "accountKey",
        type: {
          name: "String"
        }
      },
      relativeMountPath: {
        required: true,
        serializedName: "relativeMountPath",
        type: {
          name: "String"
        }
      },
      mountOptions: {
        serializedName: "mountOptions",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MountConfiguration: coreHttp.CompositeMapper = {
  serializedName: "MountConfiguration",
  type: {
    name: "Composite",
    className: "MountConfiguration",
    modelProperties: {
      azureBlobFileSystemConfiguration: {
        serializedName: "azureBlobFileSystemConfiguration",
        type: {
          name: "Composite",
          className: "AzureBlobFileSystemConfiguration"
        }
      },
      nfsMountConfiguration: {
        serializedName: "nfsMountConfiguration",
        type: {
          name: "Composite",
          className: "NFSMountConfiguration"
        }
      },
      cifsMountConfiguration: {
        serializedName: "cifsMountConfiguration",
        type: {
          name: "Composite",
          className: "CIFSMountConfiguration"
        }
      },
      azureFileShareConfiguration: {
        serializedName: "azureFileShareConfiguration",
        type: {
          name: "Composite",
          className: "AzureFileShareConfiguration"
        }
      }
    }
  }
};

export const Pool: coreHttp.CompositeMapper = {
  serializedName: "Pool",
  type: {
    name: "Composite",
    className: "Pool",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      lastModified: {
        readOnly: true,
        serializedName: "properties.lastModified",
        type: {
          name: "DateTime"
        }
      },
      creationTime: {
        readOnly: true,
        serializedName: "properties.creationTime",
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Succeeded",
            "Deleting"
          ]
        }
      },
      provisioningStateTransitionTime: {
        readOnly: true,
        serializedName: "properties.provisioningStateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      allocationState: {
        readOnly: true,
        serializedName: "properties.allocationState",
        type: {
          name: "Enum",
          allowedValues: [
            "Steady",
            "Resizing",
            "Stopping"
          ]
        }
      },
      allocationStateTransitionTime: {
        readOnly: true,
        serializedName: "properties.allocationStateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      vmSize: {
        serializedName: "properties.vmSize",
        type: {
          name: "String"
        }
      },
      deploymentConfiguration: {
        serializedName: "properties.deploymentConfiguration",
        type: {
          name: "Composite",
          className: "DeploymentConfiguration"
        }
      },
      currentDedicatedNodes: {
        readOnly: true,
        serializedName: "properties.currentDedicatedNodes",
        type: {
          name: "Number"
        }
      },
      currentLowPriorityNodes: {
        readOnly: true,
        serializedName: "properties.currentLowPriorityNodes",
        type: {
          name: "Number"
        }
      },
      scaleSettings: {
        serializedName: "properties.scaleSettings",
        type: {
          name: "Composite",
          className: "ScaleSettings"
        }
      },
      autoScaleRun: {
        readOnly: true,
        serializedName: "properties.autoScaleRun",
        type: {
          name: "Composite",
          className: "AutoScaleRun"
        }
      },
      interNodeCommunication: {
        serializedName: "properties.interNodeCommunication",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      networkConfiguration: {
        serializedName: "properties.networkConfiguration",
        type: {
          name: "Composite",
          className: "NetworkConfiguration"
        }
      },
      maxTasksPerNode: {
        serializedName: "properties.maxTasksPerNode",
        type: {
          name: "Number"
        }
      },
      taskSchedulingPolicy: {
        serializedName: "properties.taskSchedulingPolicy",
        type: {
          name: "Composite",
          className: "TaskSchedulingPolicy"
        }
      },
      userAccounts: {
        serializedName: "properties.userAccounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UserAccount"
            }
          }
        }
      },
      metadata: {
        serializedName: "properties.metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataItem"
            }
          }
        }
      },
      startTask: {
        serializedName: "properties.startTask",
        type: {
          name: "Composite",
          className: "StartTask"
        }
      },
      certificates: {
        serializedName: "properties.certificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CertificateReference"
            }
          }
        }
      },
      applicationPackages: {
        serializedName: "properties.applicationPackages",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationPackageReference"
            }
          }
        }
      },
      applicationLicenses: {
        serializedName: "properties.applicationLicenses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      resizeOperationStatus: {
        readOnly: true,
        serializedName: "properties.resizeOperationStatus",
        type: {
          name: "Composite",
          className: "ResizeOperationStatus"
        }
      },
      mountConfiguration: {
        serializedName: "properties.mountConfiguration",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MountConfiguration"
            }
          }
        }
      }
    }
  }
};

export const OperationDisplay: coreHttp.CompositeMapper = {
  serializedName: "Operation_display",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreHttp.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Object"
        }
      }
    }
  }
};

export const CheckNameAvailabilityParameters: coreHttp.CompositeMapper = {
  serializedName: "CheckNameAvailabilityParameters",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityParameters",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        isConstant: true,
        serializedName: "type",
        defaultValue: 'Microsoft.Batch/batchAccounts',
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityResult: coreHttp.CompositeMapper = {
  serializedName: "CheckNameAvailabilityResult",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResult",
    modelProperties: {
      nameAvailable: {
        readOnly: true,
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        readOnly: true,
        serializedName: "reason",
        type: {
          name: "Enum",
          allowedValues: [
            "Invalid",
            "AlreadyExists"
          ]
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BatchAccountCreateHeaders: coreHttp.CompositeMapper = {
  serializedName: "batchaccount-create-headers",
  type: {
    name: "Composite",
    className: "BatchAccountCreateHeaders",
    modelProperties: {
      locationHeader: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BatchAccountDeleteHeaders: coreHttp.CompositeMapper = {
  serializedName: "batchaccount-delete-headers",
  type: {
    name: "Composite",
    className: "BatchAccountDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CertificateCreateHeaders: coreHttp.CompositeMapper = {
  serializedName: "certificate-create-headers",
  type: {
    name: "Composite",
    className: "CertificateCreateHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateUpdateHeaders: coreHttp.CompositeMapper = {
  serializedName: "certificate-update-headers",
  type: {
    name: "Composite",
    className: "CertificateUpdateHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateDeleteHeaders: coreHttp.CompositeMapper = {
  serializedName: "certificate-delete-headers",
  type: {
    name: "Composite",
    className: "CertificateDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CertificateGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "certificate-get-headers",
  type: {
    name: "Composite",
    className: "CertificateGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateCancelDeletionHeaders: coreHttp.CompositeMapper = {
  serializedName: "certificate-canceldeletion-headers",
  type: {
    name: "Composite",
    className: "CertificateCancelDeletionHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolCreateHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool-create-headers",
  type: {
    name: "Composite",
    className: "PoolCreateHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolUpdateHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool-update-headers",
  type: {
    name: "Composite",
    className: "PoolUpdateHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolDeleteHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool-delete-headers",
  type: {
    name: "Composite",
    className: "PoolDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PoolGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool-get-headers",
  type: {
    name: "Composite",
    className: "PoolGetHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolDisableAutoScaleHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool-disableautoscale-headers",
  type: {
    name: "Composite",
    className: "PoolDisableAutoScaleHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolStopResizeHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool-stopresize-headers",
  type: {
    name: "Composite",
    className: "PoolStopResizeHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BatchAccountListResult: coreHttp.CompositeMapper = {
  serializedName: "BatchAccountListResult",
  type: {
    name: "Composite",
    className: "BatchAccountListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BatchAccount"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListApplicationPackagesResult: coreHttp.CompositeMapper = {
  serializedName: "ListApplicationPackagesResult",
  type: {
    name: "Composite",
    className: "ListApplicationPackagesResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationPackage"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListApplicationsResult: coreHttp.CompositeMapper = {
  serializedName: "ListApplicationsResult",
  type: {
    name: "Composite",
    className: "ListApplicationsResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Application"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreHttp.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListCertificatesResult: coreHttp.CompositeMapper = {
  serializedName: "ListCertificatesResult",
  type: {
    name: "Composite",
    className: "ListCertificatesResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Certificate"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListPoolsResult: coreHttp.CompositeMapper = {
  serializedName: "ListPoolsResult",
  type: {
    name: "Composite",
    className: "ListPoolsResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Pool"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};
