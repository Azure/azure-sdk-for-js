/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/locationMappers";
import * as Parameters from "../models/parameters";
import { BatchManagementClientContext } from "../batchManagementClientContext";

/** Class representing a Location. */
export class Location {
  private readonly client: BatchManagementClientContext;

  /**
   * Create a Location.
   * @param {BatchManagementClientContext} client Reference to the service client.
   */
  constructor(client: BatchManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets the Batch service quotas for the specified subscription at the given location.
   * @param locationName The region for which to retrieve Batch service quotas.
   * @param [options] The optional parameters
   * @returns Promise<Models.LocationGetQuotasResponse>
   */
  getQuotas(locationName: string, options?: msRest.RequestOptionsBase): Promise<Models.LocationGetQuotasResponse>;
  /**
   * @param locationName The region for which to retrieve Batch service quotas.
   * @param callback The callback
   */
  getQuotas(locationName: string, callback: msRest.ServiceCallback<Models.BatchLocationQuota>): void;
  /**
   * @param locationName The region for which to retrieve Batch service quotas.
   * @param options The optional parameters
   * @param callback The callback
   */
  getQuotas(locationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BatchLocationQuota>): void;
  getQuotas(locationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BatchLocationQuota>, callback?: msRest.ServiceCallback<Models.BatchLocationQuota>): Promise<Models.LocationGetQuotasResponse> {
    return this.client.sendOperationRequest(
      {
        locationName,
        options
      },
      getQuotasOperationSpec,
      callback) as Promise<Models.LocationGetQuotasResponse>;
  }

  /**
   * Checks whether the Batch account name is available in the specified region.
   * @param locationName The desired region for the name check.
   * @param name The name to check for availability
   * @param [options] The optional parameters
   * @returns Promise<Models.LocationCheckNameAvailabilityResponse>
   */
  checkNameAvailability(locationName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.LocationCheckNameAvailabilityResponse>;
  /**
   * @param locationName The desired region for the name check.
   * @param name The name to check for availability
   * @param callback The callback
   */
  checkNameAvailability(locationName: string, name: string, callback: msRest.ServiceCallback<Models.CheckNameAvailabilityResult>): void;
  /**
   * @param locationName The desired region for the name check.
   * @param name The name to check for availability
   * @param options The optional parameters
   * @param callback The callback
   */
  checkNameAvailability(locationName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CheckNameAvailabilityResult>): void;
  checkNameAvailability(locationName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CheckNameAvailabilityResult>, callback?: msRest.ServiceCallback<Models.CheckNameAvailabilityResult>): Promise<Models.LocationCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      {
        locationName,
        name,
        options
      },
      checkNameAvailabilityOperationSpec,
      callback) as Promise<Models.LocationCheckNameAvailabilityResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getQuotasOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Batch/locations/{locationName}/quotas",
  urlParameters: [
    Parameters.locationName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BatchLocationQuota
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const checkNameAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Batch/locations/{locationName}/checkNameAvailability",
  urlParameters: [
    Parameters.locationName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      name: "name"
    },
    mapper: {
      ...Mappers.CheckNameAvailabilityParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
