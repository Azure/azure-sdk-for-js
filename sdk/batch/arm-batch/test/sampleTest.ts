/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  record,
  RecorderEnvironmentSetup,
  Recorder,
  delay,
  isPlaybackMode
} from "@azure-tools/test-recorder";
import * as assert from "assert";
import { ClientSecretCredential } from "@azure/identity";
import { BatchManagementClient } from "../src/batchManagementClient";
import { StorageManagementClient,StorageAccountCreateParameters } from "@azure/arm-storage";

const recorderEnvSetup: RecorderEnvironmentSetup = {
  replaceableVariables: {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
  },
  customizationsOnRecordings: [
    (recording: any): any =>
      recording.replace(
        /"access_token":"[^"]*"/g,
        `"access_token":"access_token"`
      )
  ],
  queryParametersToSkip: []
};

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("Batch test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: BatchManagementClient;
  let storage_client: StorageManagementClient;
  let location: string;
  let resourceGroup: string;
  let accountName: string;
  let applicationName: string;
  let storageaccountName: string;

  beforeEach(async function() {
    recorder = record(this, recorderEnvSetup);
    subscriptionId = env.SUBSCRIPTION_ID;
    // This is an example of how the environment variables are used
    const credential = new ClientSecretCredential(
      env.AZURE_TENANT_ID,
      env.AZURE_CLIENT_ID,
      env.AZURE_CLIENT_SECRET
    );
    client = new BatchManagementClient(credential, subscriptionId);
    storage_client = new StorageManagementClient(credential, subscriptionId);
    location = "eastus";
    resourceGroup = "myjstest";
    accountName = "myaccountxxx";
    applicationName = "myapplicationxxx";
    storageaccountName = "mystorageaccountxxx";
  });

  afterEach(async function() {
    await recorder.stop();
  });

  async function storageAccounts_beginCreateAndWait() {
    const parameter: StorageAccountCreateParameters = {
      sku: {
          name: "Standard_GRS",
      },
      kind: "StorageV2",
      location: "westeurope",
      encryption: {
          services: {
              file: {
                  keyType: "Account",
                  enabled: true
              },
              blob: {
                  keyType: "Account",
                  enabled: true
              },
          },
          keySource: "Microsoft.Storage",
      },
      tags: {
          key1: "value1",
          key2: "value2",
      }
    }
    const res = await storage_client.storageAccounts.beginCreateAndWait(resourceGroup,storageaccountName,parameter,testPollingOptions);
  };

  it("batchAccountOperations create test", async function() {
    // await storageAccounts_beginCreateAndWait();
    const res = await client.batchAccountOperations.beginCreateAndWait(resourceGroup,accountName,{
      location: location,
      autoStorage: {
          storageAccountId: "/subscriptions/"+subscriptionId+"/resourceGroups/"+resourceGroup+"/providers/Microsoft.Storage/storageAccounts/"+storageaccountName
      }
    },testPollingOptions);
    assert.equal(res.name,accountName);
  });

  it("batchAccountOperations get test", async function() {
    const res = await client.batchAccountOperations.get(resourceGroup,accountName);
    assert.equal(res.name,accountName);
  });

  it("batchAccountOperations list test", async function() {
    const resArray = new Array();
    for await (let item of client.batchAccountOperations.list()){
        resArray.push(item);
    }
    assert.equal(resArray.length,1);
  });

  it("batchAccountOperations update test", async function() {
    const res = await client.batchAccountOperations.update(resourceGroup,accountName,{tags: {key1: "value1"}});
    assert.equal(res.type,"Microsoft.Batch/batchAccounts");
  });

  it("applicationOperations create test", async function() {
    const res = await client.applicationOperations.create(resourceGroup,accountName,applicationName,{parameters: {allowUpdates: false}});
    assert.equal(res.name,applicationName);
  });

  it("applicationOperations get test", async function() {
    const res = await client.applicationOperations.get(resourceGroup,accountName,applicationName);
    assert.equal(res.name,applicationName);
  });

  it("applicationOperations list test", async function() {
    const resArray = new Array();
    for await (let item of client.applicationOperations.list(resourceGroup,accountName)){
        resArray.push(item);
    }
    assert.equal(resArray.length,1);
  });

  it("applicationOperations delete test", async function() {
    const res = await client.applicationOperations.delete(resourceGroup,accountName,applicationName);
    const resArray = new Array();
    for await (let item of client.applicationOperations.list(resourceGroup,accountName)){
        resArray.push(item);
    }
    assert.equal(resArray.length,0);
  });

  it("batchAccountOperations delete test", async function() {
    const res = await client.batchAccountOperations.beginDeleteAndWait(resourceGroup,accountName,testPollingOptions);
    const resArray = new Array();
    for await (let item of client.batchAccountOperations.list()){
        resArray.push(item);
    }
    assert.equal(resArray.length,0);
  });
});
