/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/core-arm";
import * as coreHttp from "@azure/core-http";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const PoolUsageMetrics: coreHttp.CompositeMapper = {
  serializedName: "PoolUsageMetrics",
  type: {
    name: "Composite",
    className: "PoolUsageMetrics",
    modelProperties: {
      poolId: {
        required: true,
        serializedName: "poolId",
        type: {
          name: "String"
        }
      },
      startTime: {
        required: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        required: true,
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      vmSize: {
        required: true,
        serializedName: "vmSize",
        type: {
          name: "String"
        }
      },
      totalCoreHours: {
        required: true,
        serializedName: "totalCoreHours",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ImageReference: coreHttp.CompositeMapper = {
  serializedName: "ImageReference",
  type: {
    name: "Composite",
    className: "ImageReference",
    modelProperties: {
      publisher: {
        serializedName: "publisher",
        type: {
          name: "String"
        }
      },
      offer: {
        serializedName: "offer",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      virtualMachineImageId: {
        serializedName: "virtualMachineImageId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageInformation: msRest.CompositeMapper = {
  serializedName: "ImageInformation",
  type: {
    name: "Composite",
    className: "ImageInformation",
    modelProperties: {
      nodeAgentSKUId: {
        required: true,
        serializedName: "nodeAgentSKUId",
        type: {
          name: "String"
        }
      },
      imageReference: {
        required: true,
        serializedName: "imageReference",
        type: {
          name: "Composite",
          className: "ImageReference"
        }
      },
      osType: {
        required: true,
        serializedName: "osType",
        type: {
          name: "Enum",
          allowedValues: [
            "linux",
            "windows"
          ]
        }
      },
      capabilities: {
        serializedName: "capabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      batchSupportEndOfLife: {
        serializedName: "batchSupportEndOfLife",
        type: {
          name: "DateTime"
        }
      },
      verificationType: {
        required: true,
        serializedName: "verificationType",
        type: {
          name: "Enum",
          allowedValues: [
            "verified",
            "unverified"
          ]
        }
      }
    }
  }
};

export const AuthenticationTokenSettings: coreHttp.CompositeMapper = {
  serializedName: "AuthenticationTokenSettings",
  type: {
    name: "Composite",
    className: "AuthenticationTokenSettings",
    modelProperties: {
      access: {
        serializedName: "access",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "job"
              ]
            }
          }
        }
      }
    }
  }
};

export const UsageStatistics: coreHttp.CompositeMapper = {
  serializedName: "UsageStatistics",
  type: {
    name: "Composite",
    className: "UsageStatistics",
    modelProperties: {
      startTime: {
        required: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      lastUpdateTime: {
        required: true,
        serializedName: "lastUpdateTime",
        type: {
          name: "DateTime"
        }
      },
      dedicatedCoreTime: {
        required: true,
        serializedName: "dedicatedCoreTime",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const ResourceStatistics: coreHttp.CompositeMapper = {
  serializedName: "ResourceStatistics",
  type: {
    name: "Composite",
    className: "ResourceStatistics",
    modelProperties: {
      startTime: {
        required: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      lastUpdateTime: {
        required: true,
        serializedName: "lastUpdateTime",
        type: {
          name: "DateTime"
        }
      },
      avgCPUPercentage: {
        required: true,
        serializedName: "avgCPUPercentage",
        type: {
          name: "Number"
        }
      },
      avgMemoryGiB: {
        required: true,
        serializedName: "avgMemoryGiB",
        type: {
          name: "Number"
        }
      },
      peakMemoryGiB: {
        required: true,
        serializedName: "peakMemoryGiB",
        type: {
          name: "Number"
        }
      },
      avgDiskGiB: {
        required: true,
        serializedName: "avgDiskGiB",
        type: {
          name: "Number"
        }
      },
      peakDiskGiB: {
        required: true,
        serializedName: "peakDiskGiB",
        type: {
          name: "Number"
        }
      },
      diskReadIOps: {
        required: true,
        serializedName: "diskReadIOps",
        type: {
          name: "Number"
        }
      },
      diskWriteIOps: {
        required: true,
        serializedName: "diskWriteIOps",
        type: {
          name: "Number"
        }
      },
      diskReadGiB: {
        required: true,
        serializedName: "diskReadGiB",
        type: {
          name: "Number"
        }
      },
      diskWriteGiB: {
        required: true,
        serializedName: "diskWriteGiB",
        type: {
          name: "Number"
        }
      },
      networkReadGiB: {
        required: true,
        serializedName: "networkReadGiB",
        type: {
          name: "Number"
        }
      },
      networkWriteGiB: {
        required: true,
        serializedName: "networkWriteGiB",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PoolStatistics: coreHttp.CompositeMapper = {
  serializedName: "PoolStatistics",
  type: {
    name: "Composite",
    className: "PoolStatistics",
    modelProperties: {
      url: {
        required: true,
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      startTime: {
        required: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      lastUpdateTime: {
        required: true,
        serializedName: "lastUpdateTime",
        type: {
          name: "DateTime"
        }
      },
      usageStats: {
        serializedName: "usageStats",
        type: {
          name: "Composite",
          className: "UsageStatistics"
        }
      },
      resourceStats: {
        serializedName: "resourceStats",
        type: {
          name: "Composite",
          className: "ResourceStatistics"
        }
      }
    }
  }
};

export const JobStatistics: coreHttp.CompositeMapper = {
  serializedName: "JobStatistics",
  type: {
    name: "Composite",
    className: "JobStatistics",
    modelProperties: {
      url: {
        required: true,
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      startTime: {
        required: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      lastUpdateTime: {
        required: true,
        serializedName: "lastUpdateTime",
        type: {
          name: "DateTime"
        }
      },
      userCPUTime: {
        required: true,
        serializedName: "userCPUTime",
        type: {
          name: "TimeSpan"
        }
      },
      kernelCPUTime: {
        required: true,
        serializedName: "kernelCPUTime",
        type: {
          name: "TimeSpan"
        }
      },
      wallClockTime: {
        required: true,
        serializedName: "wallClockTime",
        type: {
          name: "TimeSpan"
        }
      },
      readIOps: {
        required: true,
        serializedName: "readIOps",
        type: {
          name: "Number"
        }
      },
      writeIOps: {
        required: true,
        serializedName: "writeIOps",
        type: {
          name: "Number"
        }
      },
      readIOGiB: {
        required: true,
        serializedName: "readIOGiB",
        type: {
          name: "Number"
        }
      },
      writeIOGiB: {
        required: true,
        serializedName: "writeIOGiB",
        type: {
          name: "Number"
        }
      },
      numSucceededTasks: {
        required: true,
        serializedName: "numSucceededTasks",
        type: {
          name: "Number"
        }
      },
      numFailedTasks: {
        required: true,
        serializedName: "numFailedTasks",
        type: {
          name: "Number"
        }
      },
      numTaskRetries: {
        required: true,
        serializedName: "numTaskRetries",
        type: {
          name: "Number"
        }
      },
      waitTime: {
        required: true,
        serializedName: "waitTime",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const NameValuePair: coreHttp.CompositeMapper = {
  serializedName: "NameValuePair",
  type: {
    name: "Composite",
    className: "NameValuePair",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeleteCertificateError: coreHttp.CompositeMapper = {
  serializedName: "DeleteCertificateError",
  type: {
    name: "Composite",
    className: "DeleteCertificateError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameValuePair"
            }
          }
        }
      }
    }
  }
};

export const Certificate: coreHttp.CompositeMapper = {
  serializedName: "Certificate",
  type: {
    name: "Composite",
    className: "Certificate",
    modelProperties: {
      thumbprint: {
        serializedName: "thumbprint",
        type: {
          name: "String"
        }
      },
      thumbprintAlgorithm: {
        serializedName: "thumbprintAlgorithm",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "Enum",
          allowedValues: [
            "active",
            "deleting",
            "deletefailed"
          ]
        }
      },
      stateTransitionTime: {
        serializedName: "stateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      previousState: {
        serializedName: "previousState",
        type: {
          name: "Enum",
          allowedValues: [
            "active",
            "deleting",
            "deletefailed"
          ]
        }
      },
      previousStateTransitionTime: {
        serializedName: "previousStateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      publicData: {
        serializedName: "publicData",
        type: {
          name: "String"
        }
      },
      deleteCertificateError: {
        serializedName: "deleteCertificateError",
        type: {
          name: "Composite",
          className: "DeleteCertificateError"
        }
      }
    }
  }
};

export const ApplicationPackageReference: coreHttp.CompositeMapper = {
  serializedName: "ApplicationPackageReference",
  type: {
    name: "Composite",
    className: "ApplicationPackageReference",
    modelProperties: {
      applicationId: {
        required: true,
        serializedName: "applicationId",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationSummary: coreHttp.CompositeMapper = {
  serializedName: "ApplicationSummary",
  type: {
    name: "Composite",
    className: "ApplicationSummary",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      displayName: {
        required: true,
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      versions: {
        required: true,
        serializedName: "versions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const CertificateAddParameter: coreHttp.CompositeMapper = {
  serializedName: "CertificateAddParameter",
  type: {
    name: "Composite",
    className: "CertificateAddParameter",
    modelProperties: {
      thumbprint: {
        required: true,
        serializedName: "thumbprint",
        type: {
          name: "String"
        }
      },
      thumbprintAlgorithm: {
        required: true,
        serializedName: "thumbprintAlgorithm",
        type: {
          name: "String"
        }
      },
      data: {
        required: true,
        serializedName: "data",
        type: {
          name: "String"
        }
      },
      certificateFormat: {
        serializedName: "certificateFormat",
        type: {
          name: "Enum",
          allowedValues: [
            "pfx",
            "cer"
          ]
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileProperties: coreHttp.CompositeMapper = {
  serializedName: "FileProperties",
  type: {
    name: "Composite",
    className: "FileProperties",
    modelProperties: {
      creationTime: {
        serializedName: "creationTime",
        type: {
          name: "DateTime"
        }
      },
      lastModified: {
        required: true,
        serializedName: "lastModified",
        type: {
          name: "DateTime"
        }
      },
      contentLength: {
        required: true,
        serializedName: "contentLength",
        type: {
          name: "Number"
        }
      },
      contentType: {
        serializedName: "contentType",
        type: {
          name: "String"
        }
      },
      fileMode: {
        serializedName: "fileMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NodeFile: coreHttp.CompositeMapper = {
  serializedName: "NodeFile",
  type: {
    name: "Composite",
    className: "NodeFile",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      isDirectory: {
        serializedName: "isDirectory",
        type: {
          name: "Boolean"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "FileProperties"
        }
      }
    }
  }
};

export const Schedule: coreHttp.CompositeMapper = {
  serializedName: "Schedule",
  type: {
    name: "Composite",
    className: "Schedule",
    modelProperties: {
      doNotRunUntil: {
        serializedName: "doNotRunUntil",
        type: {
          name: "DateTime"
        }
      },
      doNotRunAfter: {
        serializedName: "doNotRunAfter",
        type: {
          name: "DateTime"
        }
      },
      startWindow: {
        serializedName: "startWindow",
        type: {
          name: "TimeSpan"
        }
      },
      recurrenceInterval: {
        serializedName: "recurrenceInterval",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const JobConstraints: coreHttp.CompositeMapper = {
  serializedName: "JobConstraints",
  type: {
    name: "Composite",
    className: "JobConstraints",
    modelProperties: {
      maxWallClockTime: {
        serializedName: "maxWallClockTime",
        type: {
          name: "TimeSpan"
        }
      },
      maxTaskRetryCount: {
        serializedName: "maxTaskRetryCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const JobNetworkConfiguration: coreHttp.CompositeMapper = {
  serializedName: "JobNetworkConfiguration",
  type: {
    name: "Composite",
    className: "JobNetworkConfiguration",
    modelProperties: {
      subnetId: {
        required: true,
        serializedName: "subnetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerRegistry: coreHttp.CompositeMapper = {
  serializedName: "ContainerRegistry",
  type: {
    name: "Composite",
    className: "ContainerRegistry",
    modelProperties: {
      registryServer: {
        serializedName: "registryServer",
        type: {
          name: "String"
        }
      },
      userName: {
        required: true,
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        required: true,
        serializedName: "password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaskContainerSettings: coreHttp.CompositeMapper = {
  serializedName: "TaskContainerSettings",
  type: {
    name: "Composite",
    className: "TaskContainerSettings",
    modelProperties: {
      containerRunOptions: {
        serializedName: "containerRunOptions",
        type: {
          name: "String"
        }
      },
      imageName: {
        required: true,
        serializedName: "imageName",
        type: {
          name: "String"
        }
      },
      registry: {
        serializedName: "registry",
        type: {
          name: "Composite",
          className: "ContainerRegistry"
        }
      },
      workingDirectory: {
        serializedName: "workingDirectory",
        type: {
          name: "Enum",
          allowedValues: [
            "taskWorkingDirectory",
            "containerImageDefault"
          ]
        }
      }
    }
  }
};

export const ResourceFile: coreHttp.CompositeMapper = {
  serializedName: "ResourceFile",
  type: {
    name: "Composite",
    className: "ResourceFile",
    modelProperties: {
      autoStorageContainerName: {
        serializedName: "autoStorageContainerName",
        type: {
          name: "String"
        }
      },
      storageContainerUrl: {
        serializedName: "storageContainerUrl",
        type: {
          name: "String"
        }
      },
      httpUrl: {
        serializedName: "httpUrl",
        type: {
          name: "String"
        }
      },
      blobPrefix: {
        serializedName: "blobPrefix",
        type: {
          name: "String"
        }
      },
      filePath: {
        serializedName: "filePath",
        type: {
          name: "String"
        }
      },
      fileMode: {
        serializedName: "fileMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnvironmentSetting: coreHttp.CompositeMapper = {
  serializedName: "EnvironmentSetting",
  type: {
    name: "Composite",
    className: "EnvironmentSetting",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExitOptions: coreHttp.CompositeMapper = {
  serializedName: "ExitOptions",
  type: {
    name: "Composite",
    className: "ExitOptions",
    modelProperties: {
      jobAction: {
        serializedName: "jobAction",
        type: {
          name: "Enum",
          allowedValues: [
            "none",
            "disable",
            "terminate"
          ]
        }
      },
      dependencyAction: {
        serializedName: "dependencyAction",
        type: {
          name: "Enum",
          allowedValues: [
            "satisfy",
            "block"
          ]
        }
      }
    }
  }
};

export const ExitCodeMapping: coreHttp.CompositeMapper = {
  serializedName: "ExitCodeMapping",
  type: {
    name: "Composite",
    className: "ExitCodeMapping",
    modelProperties: {
      code: {
        required: true,
        serializedName: "code",
        type: {
          name: "Number"
        }
      },
      exitOptions: {
        required: true,
        serializedName: "exitOptions",
        type: {
          name: "Composite",
          className: "ExitOptions"
        }
      }
    }
  }
};

export const ExitCodeRangeMapping: coreHttp.CompositeMapper = {
  serializedName: "ExitCodeRangeMapping",
  type: {
    name: "Composite",
    className: "ExitCodeRangeMapping",
    modelProperties: {
      start: {
        required: true,
        serializedName: "start",
        type: {
          name: "Number"
        }
      },
      end: {
        required: true,
        serializedName: "end",
        type: {
          name: "Number"
        }
      },
      exitOptions: {
        required: true,
        serializedName: "exitOptions",
        type: {
          name: "Composite",
          className: "ExitOptions"
        }
      }
    }
  }
};

export const ExitConditions: coreHttp.CompositeMapper = {
  serializedName: "ExitConditions",
  type: {
    name: "Composite",
    className: "ExitConditions",
    modelProperties: {
      exitCodes: {
        serializedName: "exitCodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExitCodeMapping"
            }
          }
        }
      },
      exitCodeRanges: {
        serializedName: "exitCodeRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExitCodeRangeMapping"
            }
          }
        }
      },
      preProcessingError: {
        serializedName: "preProcessingError",
        type: {
          name: "Composite",
          className: "ExitOptions"
        }
      },
      fileUploadError: {
        serializedName: "fileUploadError",
        type: {
          name: "Composite",
          className: "ExitOptions"
        }
      },
      default: {
        serializedName: "default",
        type: {
          name: "Composite",
          className: "ExitOptions"
        }
      }
    }
  }
};

export const AutoUserSpecification: coreHttp.CompositeMapper = {
  serializedName: "AutoUserSpecification",
  type: {
    name: "Composite",
    className: "AutoUserSpecification",
    modelProperties: {
      scope: {
        serializedName: "scope",
        type: {
          name: "Enum",
          allowedValues: [
            "task",
            "pool"
          ]
        }
      },
      elevationLevel: {
        serializedName: "elevationLevel",
        type: {
          name: "Enum",
          allowedValues: [
            "nonadmin",
            "admin"
          ]
        }
      }
    }
  }
};

export const UserIdentity: coreHttp.CompositeMapper = {
  serializedName: "UserIdentity",
  type: {
    name: "Composite",
    className: "UserIdentity",
    modelProperties: {
      userName: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      autoUser: {
        serializedName: "autoUser",
        type: {
          name: "Composite",
          className: "AutoUserSpecification"
        }
      }
    }
  }
};

export const LinuxUserConfiguration: coreHttp.CompositeMapper = {
  serializedName: "LinuxUserConfiguration",
  type: {
    name: "Composite",
    className: "LinuxUserConfiguration",
    modelProperties: {
      uid: {
        serializedName: "uid",
        type: {
          name: "Number"
        }
      },
      gid: {
        serializedName: "gid",
        type: {
          name: "Number"
        }
      },
      sshPrivateKey: {
        serializedName: "sshPrivateKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WindowsUserConfiguration: coreHttp.CompositeMapper = {
  serializedName: "WindowsUserConfiguration",
  type: {
    name: "Composite",
    className: "WindowsUserConfiguration",
    modelProperties: {
      loginMode: {
        serializedName: "loginMode",
        type: {
          name: "Enum",
          allowedValues: [
            "batch",
            "interactive"
          ]
        }
      }
    }
  }
};

export const UserAccount: coreHttp.CompositeMapper = {
  serializedName: "UserAccount",
  type: {
    name: "Composite",
    className: "UserAccount",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      password: {
        required: true,
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      elevationLevel: {
        serializedName: "elevationLevel",
        type: {
          name: "Enum",
          allowedValues: [
            "nonadmin",
            "admin"
          ]
        }
      },
      linuxUserConfiguration: {
        serializedName: "linuxUserConfiguration",
        type: {
          name: "Composite",
          className: "LinuxUserConfiguration"
        }
      },
      windowsUserConfiguration: {
        serializedName: "windowsUserConfiguration",
        type: {
          name: "Composite",
          className: "WindowsUserConfiguration"
        }
      }
    }
  }
};

export const TaskConstraints: coreHttp.CompositeMapper = {
  serializedName: "TaskConstraints",
  type: {
    name: "Composite",
    className: "TaskConstraints",
    modelProperties: {
      maxWallClockTime: {
        serializedName: "maxWallClockTime",
        type: {
          name: "TimeSpan"
        }
      },
      retentionTime: {
        serializedName: "retentionTime",
        type: {
          name: "TimeSpan"
        }
      },
      maxTaskRetryCount: {
        serializedName: "maxTaskRetryCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const OutputFileBlobContainerDestination: coreHttp.CompositeMapper = {
  serializedName: "OutputFileBlobContainerDestination",
  type: {
    name: "Composite",
    className: "OutputFileBlobContainerDestination",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      containerUrl: {
        required: true,
        serializedName: "containerUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OutputFileDestination: coreHttp.CompositeMapper = {
  serializedName: "OutputFileDestination",
  type: {
    name: "Composite",
    className: "OutputFileDestination",
    modelProperties: {
      container: {
        serializedName: "container",
        type: {
          name: "Composite",
          className: "OutputFileBlobContainerDestination"
        }
      }
    }
  }
};

export const OutputFileUploadOptions: coreHttp.CompositeMapper = {
  serializedName: "OutputFileUploadOptions",
  type: {
    name: "Composite",
    className: "OutputFileUploadOptions",
    modelProperties: {
      uploadCondition: {
        required: true,
        serializedName: "uploadCondition",
        type: {
          name: "Enum",
          allowedValues: [
            "tasksuccess",
            "taskfailure",
            "taskcompletion"
          ]
        }
      }
    }
  }
};

export const OutputFile: coreHttp.CompositeMapper = {
  serializedName: "OutputFile",
  type: {
    name: "Composite",
    className: "OutputFile",
    modelProperties: {
      filePattern: {
        required: true,
        serializedName: "filePattern",
        type: {
          name: "String"
        }
      },
      destination: {
        required: true,
        serializedName: "destination",
        type: {
          name: "Composite",
          className: "OutputFileDestination"
        }
      },
      uploadOptions: {
        required: true,
        serializedName: "uploadOptions",
        type: {
          name: "Composite",
          className: "OutputFileUploadOptions"
        }
      }
    }
  }
};

export const JobManagerTask: coreHttp.CompositeMapper = {
  serializedName: "JobManagerTask",
  type: {
    name: "Composite",
    className: "JobManagerTask",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      commandLine: {
        required: true,
        serializedName: "commandLine",
        type: {
          name: "String"
        }
      },
      containerSettings: {
        serializedName: "containerSettings",
        type: {
          name: "Composite",
          className: "TaskContainerSettings"
        }
      },
      resourceFiles: {
        serializedName: "resourceFiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceFile"
            }
          }
        }
      },
      outputFiles: {
        serializedName: "outputFiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OutputFile"
            }
          }
        }
      },
      environmentSettings: {
        serializedName: "environmentSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentSetting"
            }
          }
        }
      },
      constraints: {
        serializedName: "constraints",
        type: {
          name: "Composite",
          className: "TaskConstraints"
        }
      },
      killJobOnCompletion: {
        serializedName: "killJobOnCompletion",
        type: {
          name: "Boolean"
        }
      },
      userIdentity: {
        serializedName: "userIdentity",
        type: {
          name: "Composite",
          className: "UserIdentity"
        }
      },
      runExclusive: {
        serializedName: "runExclusive",
        type: {
          name: "Boolean"
        }
      },
      applicationPackageReferences: {
        serializedName: "applicationPackageReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationPackageReference"
            }
          }
        }
      },
      authenticationTokenSettings: {
        serializedName: "authenticationTokenSettings",
        type: {
          name: "Composite",
          className: "AuthenticationTokenSettings"
        }
      },
      allowLowPriorityNode: {
        serializedName: "allowLowPriorityNode",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const JobPreparationTask: coreHttp.CompositeMapper = {
  serializedName: "JobPreparationTask",
  type: {
    name: "Composite",
    className: "JobPreparationTask",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      commandLine: {
        required: true,
        serializedName: "commandLine",
        type: {
          name: "String"
        }
      },
      containerSettings: {
        serializedName: "containerSettings",
        type: {
          name: "Composite",
          className: "TaskContainerSettings"
        }
      },
      resourceFiles: {
        serializedName: "resourceFiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceFile"
            }
          }
        }
      },
      environmentSettings: {
        serializedName: "environmentSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentSetting"
            }
          }
        }
      },
      constraints: {
        serializedName: "constraints",
        type: {
          name: "Composite",
          className: "TaskConstraints"
        }
      },
      waitForSuccess: {
        serializedName: "waitForSuccess",
        type: {
          name: "Boolean"
        }
      },
      userIdentity: {
        serializedName: "userIdentity",
        type: {
          name: "Composite",
          className: "UserIdentity"
        }
      },
      rerunOnNodeRebootAfterSuccess: {
        serializedName: "rerunOnNodeRebootAfterSuccess",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const JobReleaseTask: coreHttp.CompositeMapper = {
  serializedName: "JobReleaseTask",
  type: {
    name: "Composite",
    className: "JobReleaseTask",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      commandLine: {
        required: true,
        serializedName: "commandLine",
        type: {
          name: "String"
        }
      },
      containerSettings: {
        serializedName: "containerSettings",
        type: {
          name: "Composite",
          className: "TaskContainerSettings"
        }
      },
      resourceFiles: {
        serializedName: "resourceFiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceFile"
            }
          }
        }
      },
      environmentSettings: {
        serializedName: "environmentSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentSetting"
            }
          }
        }
      },
      maxWallClockTime: {
        serializedName: "maxWallClockTime",
        type: {
          name: "TimeSpan"
        }
      },
      retentionTime: {
        serializedName: "retentionTime",
        type: {
          name: "TimeSpan"
        }
      },
      userIdentity: {
        serializedName: "userIdentity",
        type: {
          name: "Composite",
          className: "UserIdentity"
        }
      }
    }
  }
};

export const TaskSchedulingPolicy: coreHttp.CompositeMapper = {
  serializedName: "TaskSchedulingPolicy",
  type: {
    name: "Composite",
    className: "TaskSchedulingPolicy",
    modelProperties: {
      nodeFillType: {
        required: true,
        serializedName: "nodeFillType",
        type: {
          name: "Enum",
          allowedValues: [
            "spread",
            "pack"
          ]
        }
      }
    }
  }
};

export const StartTask: coreHttp.CompositeMapper = {
  serializedName: "StartTask",
  type: {
    name: "Composite",
    className: "StartTask",
    modelProperties: {
      commandLine: {
        required: true,
        serializedName: "commandLine",
        type: {
          name: "String"
        }
      },
      containerSettings: {
        serializedName: "containerSettings",
        type: {
          name: "Composite",
          className: "TaskContainerSettings"
        }
      },
      resourceFiles: {
        serializedName: "resourceFiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceFile"
            }
          }
        }
      },
      environmentSettings: {
        serializedName: "environmentSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentSetting"
            }
          }
        }
      },
      userIdentity: {
        serializedName: "userIdentity",
        type: {
          name: "Composite",
          className: "UserIdentity"
        }
      },
      maxTaskRetryCount: {
        serializedName: "maxTaskRetryCount",
        type: {
          name: "Number"
        }
      },
      waitForSuccess: {
        serializedName: "waitForSuccess",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const CertificateReference: coreHttp.CompositeMapper = {
  serializedName: "CertificateReference",
  type: {
    name: "Composite",
    className: "CertificateReference",
    modelProperties: {
      thumbprint: {
        required: true,
        serializedName: "thumbprint",
        type: {
          name: "String"
        }
      },
      thumbprintAlgorithm: {
        required: true,
        serializedName: "thumbprintAlgorithm",
        type: {
          name: "String"
        }
      },
      storeLocation: {
        serializedName: "storeLocation",
        type: {
          name: "Enum",
          allowedValues: [
            "currentuser",
            "localmachine"
          ]
        }
      },
      storeName: {
        serializedName: "storeName",
        type: {
          name: "String"
        }
      },
      visibility: {
        serializedName: "visibility",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "starttask",
                "task",
                "remoteuser"
              ]
            }
          }
        }
      }
    }
  }
};

export const MetadataItem: coreHttp.CompositeMapper = {
  serializedName: "MetadataItem",
  type: {
    name: "Composite",
    className: "MetadataItem",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudServiceConfiguration: coreHttp.CompositeMapper = {
  serializedName: "CloudServiceConfiguration",
  type: {
    name: "Composite",
    className: "CloudServiceConfiguration",
    modelProperties: {
      osFamily: {
        required: true,
        serializedName: "osFamily",
        type: {
          name: "String"
        }
      },
      osVersion: {
        serializedName: "osVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WindowsConfiguration: coreHttp.CompositeMapper = {
  serializedName: "WindowsConfiguration",
  type: {
    name: "Composite",
    className: "WindowsConfiguration",
    modelProperties: {
      enableAutomaticUpdates: {
        serializedName: "enableAutomaticUpdates",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DataDisk: coreHttp.CompositeMapper = {
  serializedName: "DataDisk",
  type: {
    name: "Composite",
    className: "DataDisk",
    modelProperties: {
      lun: {
        required: true,
        serializedName: "lun",
        type: {
          name: "Number"
        }
      },
      caching: {
        serializedName: "caching",
        type: {
          name: "Enum",
          allowedValues: [
            "none",
            "readonly",
            "readwrite"
          ]
        }
      },
      diskSizeGB: {
        required: true,
        serializedName: "diskSizeGB",
        type: {
          name: "Number"
        }
      },
      storageAccountType: {
        serializedName: "storageAccountType",
        type: {
          name: "Enum",
          allowedValues: [
            "standard_lrs",
            "premium_lrs"
          ]
        }
      }
    }
  }
};

export const ContainerConfiguration: coreHttp.CompositeMapper = {
  serializedName: "ContainerConfiguration",
  type: {
    name: "Composite",
    className: "ContainerConfiguration",
    modelProperties: {
      type: {
        required: true,
        isConstant: true,
        serializedName: "type",
        defaultValue: 'dockerCompatible',
        type: {
          name: "String"
        }
      },
      containerImageNames: {
        serializedName: "containerImageNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      containerRegistries: {
        serializedName: "containerRegistries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerRegistry"
            }
          }
        }
      }
    }
  }
};

export const VirtualMachineConfiguration: coreHttp.CompositeMapper = {
  serializedName: "VirtualMachineConfiguration",
  type: {
    name: "Composite",
    className: "VirtualMachineConfiguration",
    modelProperties: {
      imageReference: {
        required: true,
        serializedName: "imageReference",
        type: {
          name: "Composite",
          className: "ImageReference"
        }
      },
      nodeAgentSKUId: {
        required: true,
        serializedName: "nodeAgentSKUId",
        type: {
          name: "String"
        }
      },
      windowsConfiguration: {
        serializedName: "windowsConfiguration",
        type: {
          name: "Composite",
          className: "WindowsConfiguration"
        }
      },
      dataDisks: {
        serializedName: "dataDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataDisk"
            }
          }
        }
      },
      licenseType: {
        serializedName: "licenseType",
        type: {
          name: "String"
        }
      },
      containerConfiguration: {
        serializedName: "containerConfiguration",
        type: {
          name: "Composite",
          className: "ContainerConfiguration"
        }
      }
    }
  }
};

export const NetworkSecurityGroupRule: coreHttp.CompositeMapper = {
  serializedName: "NetworkSecurityGroupRule",
  type: {
    name: "Composite",
    className: "NetworkSecurityGroupRule",
    modelProperties: {
      priority: {
        required: true,
        serializedName: "priority",
        type: {
          name: "Number"
        }
      },
      access: {
        required: true,
        serializedName: "access",
        type: {
          name: "Enum",
          allowedValues: [
            "allow",
            "deny"
          ]
        }
      },
      sourceAddressPrefix: {
        required: true,
        serializedName: "sourceAddressPrefix",
        type: {
          name: "String"
        }
      },
      sourcePortRanges: {
        serializedName: "sourcePortRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const InboundNATPool: coreHttp.CompositeMapper = {
  serializedName: "InboundNATPool",
  type: {
    name: "Composite",
    className: "InboundNATPool",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      protocol: {
        required: true,
        serializedName: "protocol",
        type: {
          name: "Enum",
          allowedValues: [
            "tcp",
            "udp"
          ]
        }
      },
      backendPort: {
        required: true,
        serializedName: "backendPort",
        type: {
          name: "Number"
        }
      },
      frontendPortRangeStart: {
        required: true,
        serializedName: "frontendPortRangeStart",
        type: {
          name: "Number"
        }
      },
      frontendPortRangeEnd: {
        required: true,
        serializedName: "frontendPortRangeEnd",
        type: {
          name: "Number"
        }
      },
      networkSecurityGroupRules: {
        serializedName: "networkSecurityGroupRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkSecurityGroupRule"
            }
          }
        }
      }
    }
  }
};

export const PoolEndpointConfiguration: coreHttp.CompositeMapper = {
  serializedName: "PoolEndpointConfiguration",
  type: {
    name: "Composite",
    className: "PoolEndpointConfiguration",
    modelProperties: {
      inboundNATPools: {
        required: true,
        serializedName: "inboundNATPools",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InboundNATPool"
            }
          }
        }
      }
    }
  }
};

export const NetworkConfiguration: coreHttp.CompositeMapper = {
  serializedName: "NetworkConfiguration",
  type: {
    name: "Composite",
    className: "NetworkConfiguration",
    modelProperties: {
      subnetId: {
        serializedName: "subnetId",
        type: {
          name: "String"
        }
      },
      dynamicVNetAssignmentScope: {
        serializedName: "dynamicVNetAssignmentScope",
        type: {
          name: "Enum",
          allowedValues: [
            "none",
            "job"
          ]
        }
      },
      endpointConfiguration: {
        serializedName: "endpointConfiguration",
        type: {
          name: "Composite",
          className: "PoolEndpointConfiguration"
        }
      },
      publicIPs: {
        serializedName: "publicIPs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AzureBlobFileSystemConfiguration: msRest.CompositeMapper = {
  serializedName: "AzureBlobFileSystemConfiguration",
  type: {
    name: "Composite",
    className: "AzureBlobFileSystemConfiguration",
    modelProperties: {
      accountName: {
        required: true,
        serializedName: "accountName",
        type: {
          name: "String"
        }
      },
      containerName: {
        required: true,
        serializedName: "containerName",
        type: {
          name: "String"
        }
      },
      accountKey: {
        serializedName: "accountKey",
        type: {
          name: "String"
        }
      },
      sasKey: {
        serializedName: "sasKey",
        type: {
          name: "String"
        }
      },
      blobfuseOptions: {
        serializedName: "blobfuseOptions",
        type: {
          name: "String"
        }
      },
      relativeMountPath: {
        required: true,
        serializedName: "relativeMountPath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NFSMountConfiguration: msRest.CompositeMapper = {
  serializedName: "NFSMountConfiguration",
  type: {
    name: "Composite",
    className: "NFSMountConfiguration",
    modelProperties: {
      source: {
        required: true,
        serializedName: "source",
        type: {
          name: "String"
        }
      },
      relativeMountPath: {
        required: true,
        serializedName: "relativeMountPath",
        type: {
          name: "String"
        }
      },
      mountOptions: {
        serializedName: "mountOptions",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CIFSMountConfiguration: msRest.CompositeMapper = {
  serializedName: "CIFSMountConfiguration",
  type: {
    name: "Composite",
    className: "CIFSMountConfiguration",
    modelProperties: {
      username: {
        required: true,
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      source: {
        required: true,
        serializedName: "source",
        type: {
          name: "String"
        }
      },
      relativeMountPath: {
        required: true,
        serializedName: "relativeMountPath",
        type: {
          name: "String"
        }
      },
      mountOptions: {
        serializedName: "mountOptions",
        type: {
          name: "String"
        }
      },
      password: {
        required: true,
        serializedName: "password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFileShareConfiguration: msRest.CompositeMapper = {
  serializedName: "AzureFileShareConfiguration",
  type: {
    name: "Composite",
    className: "AzureFileShareConfiguration",
    modelProperties: {
      accountName: {
        required: true,
        serializedName: "accountName",
        type: {
          name: "String"
        }
      },
      azureFileUrl: {
        required: true,
        serializedName: "azureFileUrl",
        type: {
          name: "String"
        }
      },
      accountKey: {
        required: true,
        serializedName: "accountKey",
        type: {
          name: "String"
        }
      },
      relativeMountPath: {
        required: true,
        serializedName: "relativeMountPath",
        type: {
          name: "String"
        }
      },
      mountOptions: {
        serializedName: "mountOptions",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MountConfiguration: msRest.CompositeMapper = {
  serializedName: "MountConfiguration",
  type: {
    name: "Composite",
    className: "MountConfiguration",
    modelProperties: {
      azureBlobFileSystemConfiguration: {
        serializedName: "azureBlobFileSystemConfiguration",
        type: {
          name: "Composite",
          className: "AzureBlobFileSystemConfiguration"
        }
      },
      nfsMountConfiguration: {
        serializedName: "nfsMountConfiguration",
        type: {
          name: "Composite",
          className: "NFSMountConfiguration"
        }
      },
      cifsMountConfiguration: {
        serializedName: "cifsMountConfiguration",
        type: {
          name: "Composite",
          className: "CIFSMountConfiguration"
        }
      },
      azureFileShareConfiguration: {
        serializedName: "azureFileShareConfiguration",
        type: {
          name: "Composite",
          className: "AzureFileShareConfiguration"
        }
      }
    }
  }
};

export const AzureBlobFileSystemConfiguration: coreHttp.CompositeMapper = {
  serializedName: "AzureBlobFileSystemConfiguration",
  type: {
    name: "Composite",
    className: "AzureBlobFileSystemConfiguration",
    modelProperties: {
      accountName: {
        required: true,
        serializedName: "accountName",
        type: {
          name: "String"
        }
      },
      containerName: {
        required: true,
        serializedName: "containerName",
        type: {
          name: "String"
        }
      },
      accountKey: {
        serializedName: "accountKey",
        type: {
          name: "String"
        }
      },
      sasKey: {
        serializedName: "sasKey",
        type: {
          name: "String"
        }
      },
      blobfuseOptions: {
        serializedName: "blobfuseOptions",
        type: {
          name: "String"
        }
      },
      relativeMountPath: {
        required: true,
        serializedName: "relativeMountPath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NFSMountConfiguration: coreHttp.CompositeMapper = {
  serializedName: "NFSMountConfiguration",
  type: {
    name: "Composite",
    className: "NFSMountConfiguration",
    modelProperties: {
      source: {
        required: true,
        serializedName: "source",
        type: {
          name: "String"
        }
      },
      relativeMountPath: {
        required: true,
        serializedName: "relativeMountPath",
        type: {
          name: "String"
        }
      },
      mountOptions: {
        serializedName: "mountOptions",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CIFSMountConfiguration: coreHttp.CompositeMapper = {
  serializedName: "CIFSMountConfiguration",
  type: {
    name: "Composite",
    className: "CIFSMountConfiguration",
    modelProperties: {
      username: {
        required: true,
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      source: {
        required: true,
        serializedName: "source",
        type: {
          name: "String"
        }
      },
      relativeMountPath: {
        required: true,
        serializedName: "relativeMountPath",
        type: {
          name: "String"
        }
      },
      mountOptions: {
        serializedName: "mountOptions",
        type: {
          name: "String"
        }
      },
      password: {
        required: true,
        serializedName: "password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFileShareConfiguration: coreHttp.CompositeMapper = {
  serializedName: "AzureFileShareConfiguration",
  type: {
    name: "Composite",
    className: "AzureFileShareConfiguration",
    modelProperties: {
      accountName: {
        required: true,
        serializedName: "accountName",
        type: {
          name: "String"
        }
      },
      azureFileUrl: {
        required: true,
        serializedName: "azureFileUrl",
        type: {
          name: "String"
        }
      },
      accountKey: {
        required: true,
        serializedName: "accountKey",
        type: {
          name: "String"
        }
      },
      relativeMountPath: {
        required: true,
        serializedName: "relativeMountPath",
        type: {
          name: "String"
        }
      },
      mountOptions: {
        serializedName: "mountOptions",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MountConfiguration: coreHttp.CompositeMapper = {
  serializedName: "MountConfiguration",
  type: {
    name: "Composite",
    className: "MountConfiguration",
    modelProperties: {
      azureBlobFileSystemConfiguration: {
        serializedName: "azureBlobFileSystemConfiguration",
        type: {
          name: "Composite",
          className: "AzureBlobFileSystemConfiguration"
        }
      },
      nfsMountConfiguration: {
        serializedName: "nfsMountConfiguration",
        type: {
          name: "Composite",
          className: "NFSMountConfiguration"
        }
      },
      cifsMountConfiguration: {
        serializedName: "cifsMountConfiguration",
        type: {
          name: "Composite",
          className: "CIFSMountConfiguration"
        }
      },
      azureFileShareConfiguration: {
        serializedName: "azureFileShareConfiguration",
        type: {
          name: "Composite",
          className: "AzureFileShareConfiguration"
        }
      }
    }
  }
};

export const PoolSpecification: coreHttp.CompositeMapper = {
  serializedName: "PoolSpecification",
  type: {
    name: "Composite",
    className: "PoolSpecification",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      vmSize: {
        required: true,
        serializedName: "vmSize",
        type: {
          name: "String"
        }
      },
      cloudServiceConfiguration: {
        serializedName: "cloudServiceConfiguration",
        type: {
          name: "Composite",
          className: "CloudServiceConfiguration"
        }
      },
      virtualMachineConfiguration: {
        serializedName: "virtualMachineConfiguration",
        type: {
          name: "Composite",
          className: "VirtualMachineConfiguration"
        }
      },
      maxTasksPerNode: {
        serializedName: "maxTasksPerNode",
        type: {
          name: "Number"
        }
      },
      taskSchedulingPolicy: {
        serializedName: "taskSchedulingPolicy",
        type: {
          name: "Composite",
          className: "TaskSchedulingPolicy"
        }
      },
      resizeTimeout: {
        serializedName: "resizeTimeout",
        type: {
          name: "TimeSpan"
        }
      },
      targetDedicatedNodes: {
        serializedName: "targetDedicatedNodes",
        type: {
          name: "Number"
        }
      },
      targetLowPriorityNodes: {
        serializedName: "targetLowPriorityNodes",
        type: {
          name: "Number"
        }
      },
      enableAutoScale: {
        serializedName: "enableAutoScale",
        type: {
          name: "Boolean"
        }
      },
      autoScaleFormula: {
        serializedName: "autoScaleFormula",
        type: {
          name: "String"
        }
      },
      autoScaleEvaluationInterval: {
        serializedName: "autoScaleEvaluationInterval",
        type: {
          name: "TimeSpan"
        }
      },
      enableInterNodeCommunication: {
        serializedName: "enableInterNodeCommunication",
        type: {
          name: "Boolean"
        }
      },
      networkConfiguration: {
        serializedName: "networkConfiguration",
        type: {
          name: "Composite",
          className: "NetworkConfiguration"
        }
      },
      startTask: {
        serializedName: "startTask",
        type: {
          name: "Composite",
          className: "StartTask"
        }
      },
      certificateReferences: {
        serializedName: "certificateReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CertificateReference"
            }
          }
        }
      },
      applicationPackageReferences: {
        serializedName: "applicationPackageReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationPackageReference"
            }
          }
        }
      },
      applicationLicenses: {
        serializedName: "applicationLicenses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      userAccounts: {
        serializedName: "userAccounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UserAccount"
            }
          }
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataItem"
            }
          }
        }
      },
      mountConfiguration: {
        serializedName: "mountConfiguration",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MountConfiguration"
            }
          }
        }
      }
    }
  }
};

export const AutoPoolSpecification: coreHttp.CompositeMapper = {
  serializedName: "AutoPoolSpecification",
  type: {
    name: "Composite",
    className: "AutoPoolSpecification",
    modelProperties: {
      autoPoolIdPrefix: {
        serializedName: "autoPoolIdPrefix",
        type: {
          name: "String"
        }
      },
      poolLifetimeOption: {
        required: true,
        serializedName: "poolLifetimeOption",
        type: {
          name: "Enum",
          allowedValues: [
            "jobschedule",
            "job"
          ]
        }
      },
      keepAlive: {
        serializedName: "keepAlive",
        type: {
          name: "Boolean"
        }
      },
      pool: {
        serializedName: "pool",
        type: {
          name: "Composite",
          className: "PoolSpecification"
        }
      }
    }
  }
};

export const PoolInformation: coreHttp.CompositeMapper = {
  serializedName: "PoolInformation",
  type: {
    name: "Composite",
    className: "PoolInformation",
    modelProperties: {
      poolId: {
        serializedName: "poolId",
        type: {
          name: "String"
        }
      },
      autoPoolSpecification: {
        serializedName: "autoPoolSpecification",
        type: {
          name: "Composite",
          className: "AutoPoolSpecification"
        }
      }
    }
  }
};

export const JobSpecification: coreHttp.CompositeMapper = {
  serializedName: "JobSpecification",
  type: {
    name: "Composite",
    className: "JobSpecification",
    modelProperties: {
      priority: {
        serializedName: "priority",
        type: {
          name: "Number"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      usesTaskDependencies: {
        serializedName: "usesTaskDependencies",
        type: {
          name: "Boolean"
        }
      },
      onAllTasksComplete: {
        serializedName: "onAllTasksComplete",
        type: {
          name: "Enum",
          allowedValues: [
            "noaction",
            "terminatejob"
          ]
        }
      },
      onTaskFailure: {
        serializedName: "onTaskFailure",
        type: {
          name: "Enum",
          allowedValues: [
            "noaction",
            "performexitoptionsjobaction"
          ]
        }
      },
      networkConfiguration: {
        serializedName: "networkConfiguration",
        type: {
          name: "Composite",
          className: "JobNetworkConfiguration"
        }
      },
      constraints: {
        serializedName: "constraints",
        type: {
          name: "Composite",
          className: "JobConstraints"
        }
      },
      jobManagerTask: {
        serializedName: "jobManagerTask",
        type: {
          name: "Composite",
          className: "JobManagerTask"
        }
      },
      jobPreparationTask: {
        serializedName: "jobPreparationTask",
        type: {
          name: "Composite",
          className: "JobPreparationTask"
        }
      },
      jobReleaseTask: {
        serializedName: "jobReleaseTask",
        type: {
          name: "Composite",
          className: "JobReleaseTask"
        }
      },
      commonEnvironmentSettings: {
        serializedName: "commonEnvironmentSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentSetting"
            }
          }
        }
      },
      poolInfo: {
        required: true,
        serializedName: "poolInfo",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "PoolInformation"
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataItem"
            }
          }
        }
      }
    }
  }
};

export const RecentJob: coreHttp.CompositeMapper = {
  serializedName: "RecentJob",
  type: {
    name: "Composite",
    className: "RecentJob",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobScheduleExecutionInformation: coreHttp.CompositeMapper = {
  serializedName: "JobScheduleExecutionInformation",
  type: {
    name: "Composite",
    className: "JobScheduleExecutionInformation",
    modelProperties: {
      nextRunTime: {
        serializedName: "nextRunTime",
        type: {
          name: "DateTime"
        }
      },
      recentJob: {
        serializedName: "recentJob",
        type: {
          name: "Composite",
          className: "RecentJob"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const JobScheduleStatistics: coreHttp.CompositeMapper = {
  serializedName: "JobScheduleStatistics",
  type: {
    name: "Composite",
    className: "JobScheduleStatistics",
    modelProperties: {
      url: {
        required: true,
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      startTime: {
        required: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      lastUpdateTime: {
        required: true,
        serializedName: "lastUpdateTime",
        type: {
          name: "DateTime"
        }
      },
      userCPUTime: {
        required: true,
        serializedName: "userCPUTime",
        type: {
          name: "TimeSpan"
        }
      },
      kernelCPUTime: {
        required: true,
        serializedName: "kernelCPUTime",
        type: {
          name: "TimeSpan"
        }
      },
      wallClockTime: {
        required: true,
        serializedName: "wallClockTime",
        type: {
          name: "TimeSpan"
        }
      },
      readIOps: {
        required: true,
        serializedName: "readIOps",
        type: {
          name: "Number"
        }
      },
      writeIOps: {
        required: true,
        serializedName: "writeIOps",
        type: {
          name: "Number"
        }
      },
      readIOGiB: {
        required: true,
        serializedName: "readIOGiB",
        type: {
          name: "Number"
        }
      },
      writeIOGiB: {
        required: true,
        serializedName: "writeIOGiB",
        type: {
          name: "Number"
        }
      },
      numSucceededTasks: {
        required: true,
        serializedName: "numSucceededTasks",
        type: {
          name: "Number"
        }
      },
      numFailedTasks: {
        required: true,
        serializedName: "numFailedTasks",
        type: {
          name: "Number"
        }
      },
      numTaskRetries: {
        required: true,
        serializedName: "numTaskRetries",
        type: {
          name: "Number"
        }
      },
      waitTime: {
        required: true,
        serializedName: "waitTime",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const CloudJobSchedule: coreHttp.CompositeMapper = {
  serializedName: "CloudJobSchedule",
  type: {
    name: "Composite",
    className: "CloudJobSchedule",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "lastModified",
        type: {
          name: "DateTime"
        }
      },
      creationTime: {
        serializedName: "creationTime",
        type: {
          name: "DateTime"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "Enum",
          allowedValues: [
            "active",
            "completed",
            "disabled",
            "terminating",
            "deleting"
          ]
        }
      },
      stateTransitionTime: {
        serializedName: "stateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      previousState: {
        serializedName: "previousState",
        type: {
          name: "Enum",
          allowedValues: [
            "active",
            "completed",
            "disabled",
            "terminating",
            "deleting"
          ]
        }
      },
      previousStateTransitionTime: {
        serializedName: "previousStateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      schedule: {
        serializedName: "schedule",
        type: {
          name: "Composite",
          className: "Schedule"
        }
      },
      jobSpecification: {
        serializedName: "jobSpecification",
        type: {
          name: "Composite",
          className: "JobSpecification"
        }
      },
      executionInfo: {
        serializedName: "executionInfo",
        type: {
          name: "Composite",
          className: "JobScheduleExecutionInformation"
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataItem"
            }
          }
        }
      },
      stats: {
        serializedName: "stats",
        type: {
          name: "Composite",
          className: "JobScheduleStatistics"
        }
      }
    }
  }
};

export const JobScheduleAddParameter: coreHttp.CompositeMapper = {
  serializedName: "JobScheduleAddParameter",
  type: {
    name: "Composite",
    className: "JobScheduleAddParameter",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      schedule: {
        required: true,
        serializedName: "schedule",
        type: {
          name: "Composite",
          className: "Schedule"
        }
      },
      jobSpecification: {
        required: true,
        serializedName: "jobSpecification",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "JobSpecification"
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataItem"
            }
          }
        }
      }
    }
  }
};

export const JobSchedulingError: coreHttp.CompositeMapper = {
  serializedName: "JobSchedulingError",
  type: {
    name: "Composite",
    className: "JobSchedulingError",
    modelProperties: {
      category: {
        required: true,
        serializedName: "category",
        type: {
          name: "Enum",
          allowedValues: [
            "usererror",
            "servererror"
          ]
        }
      },
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameValuePair"
            }
          }
        }
      }
    }
  }
};

export const JobExecutionInformation: coreHttp.CompositeMapper = {
  serializedName: "JobExecutionInformation",
  type: {
    name: "Composite",
    className: "JobExecutionInformation",
    modelProperties: {
      startTime: {
        required: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      poolId: {
        serializedName: "poolId",
        type: {
          name: "String"
        }
      },
      schedulingError: {
        serializedName: "schedulingError",
        type: {
          name: "Composite",
          className: "JobSchedulingError"
        }
      },
      terminateReason: {
        serializedName: "terminateReason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudJob: coreHttp.CompositeMapper = {
  serializedName: "CloudJob",
  type: {
    name: "Composite",
    className: "CloudJob",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      usesTaskDependencies: {
        serializedName: "usesTaskDependencies",
        type: {
          name: "Boolean"
        }
      },
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "lastModified",
        type: {
          name: "DateTime"
        }
      },
      creationTime: {
        serializedName: "creationTime",
        type: {
          name: "DateTime"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "Enum",
          allowedValues: [
            "active",
            "disabling",
            "disabled",
            "enabling",
            "terminating",
            "completed",
            "deleting"
          ]
        }
      },
      stateTransitionTime: {
        serializedName: "stateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      previousState: {
        serializedName: "previousState",
        type: {
          name: "Enum",
          allowedValues: [
            "active",
            "disabling",
            "disabled",
            "enabling",
            "terminating",
            "completed",
            "deleting"
          ]
        }
      },
      previousStateTransitionTime: {
        serializedName: "previousStateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      priority: {
        serializedName: "priority",
        type: {
          name: "Number"
        }
      },
      constraints: {
        serializedName: "constraints",
        type: {
          name: "Composite",
          className: "JobConstraints"
        }
      },
      jobManagerTask: {
        serializedName: "jobManagerTask",
        type: {
          name: "Composite",
          className: "JobManagerTask"
        }
      },
      jobPreparationTask: {
        serializedName: "jobPreparationTask",
        type: {
          name: "Composite",
          className: "JobPreparationTask"
        }
      },
      jobReleaseTask: {
        serializedName: "jobReleaseTask",
        type: {
          name: "Composite",
          className: "JobReleaseTask"
        }
      },
      commonEnvironmentSettings: {
        serializedName: "commonEnvironmentSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentSetting"
            }
          }
        }
      },
      poolInfo: {
        serializedName: "poolInfo",
        type: {
          name: "Composite",
          className: "PoolInformation"
        }
      },
      onAllTasksComplete: {
        serializedName: "onAllTasksComplete",
        type: {
          name: "Enum",
          allowedValues: [
            "noaction",
            "terminatejob"
          ]
        }
      },
      onTaskFailure: {
        serializedName: "onTaskFailure",
        type: {
          name: "Enum",
          allowedValues: [
            "noaction",
            "performexitoptionsjobaction"
          ]
        }
      },
      networkConfiguration: {
        serializedName: "networkConfiguration",
        type: {
          name: "Composite",
          className: "JobNetworkConfiguration"
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataItem"
            }
          }
        }
      },
      executionInfo: {
        serializedName: "executionInfo",
        type: {
          name: "Composite",
          className: "JobExecutionInformation"
        }
      },
      stats: {
        serializedName: "stats",
        type: {
          name: "Composite",
          className: "JobStatistics"
        }
      }
    }
  }
};

export const JobAddParameter: coreHttp.CompositeMapper = {
  serializedName: "JobAddParameter",
  type: {
    name: "Composite",
    className: "JobAddParameter",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      priority: {
        serializedName: "priority",
        type: {
          name: "Number"
        }
      },
      constraints: {
        serializedName: "constraints",
        type: {
          name: "Composite",
          className: "JobConstraints"
        }
      },
      jobManagerTask: {
        serializedName: "jobManagerTask",
        type: {
          name: "Composite",
          className: "JobManagerTask"
        }
      },
      jobPreparationTask: {
        serializedName: "jobPreparationTask",
        type: {
          name: "Composite",
          className: "JobPreparationTask"
        }
      },
      jobReleaseTask: {
        serializedName: "jobReleaseTask",
        type: {
          name: "Composite",
          className: "JobReleaseTask"
        }
      },
      commonEnvironmentSettings: {
        serializedName: "commonEnvironmentSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentSetting"
            }
          }
        }
      },
      poolInfo: {
        required: true,
        serializedName: "poolInfo",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "PoolInformation"
        }
      },
      onAllTasksComplete: {
        serializedName: "onAllTasksComplete",
        type: {
          name: "Enum",
          allowedValues: [
            "noaction",
            "terminatejob"
          ]
        }
      },
      onTaskFailure: {
        serializedName: "onTaskFailure",
        type: {
          name: "Enum",
          allowedValues: [
            "noaction",
            "performexitoptionsjobaction"
          ]
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataItem"
            }
          }
        }
      },
      usesTaskDependencies: {
        serializedName: "usesTaskDependencies",
        type: {
          name: "Boolean"
        }
      },
      networkConfiguration: {
        serializedName: "networkConfiguration",
        type: {
          name: "Composite",
          className: "JobNetworkConfiguration"
        }
      }
    }
  }
};

export const TaskContainerExecutionInformation: coreHttp.CompositeMapper = {
  serializedName: "TaskContainerExecutionInformation",
  type: {
    name: "Composite",
    className: "TaskContainerExecutionInformation",
    modelProperties: {
      containerId: {
        serializedName: "containerId",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaskFailureInformation: coreHttp.CompositeMapper = {
  serializedName: "TaskFailureInformation",
  type: {
    name: "Composite",
    className: "TaskFailureInformation",
    modelProperties: {
      category: {
        required: true,
        serializedName: "category",
        type: {
          name: "Enum",
          allowedValues: [
            "usererror",
            "servererror"
          ]
        }
      },
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameValuePair"
            }
          }
        }
      }
    }
  }
};

export const JobPreparationTaskExecutionInformation: coreHttp.CompositeMapper = {
  serializedName: "JobPreparationTaskExecutionInformation",
  type: {
    name: "Composite",
    className: "JobPreparationTaskExecutionInformation",
    modelProperties: {
      startTime: {
        required: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      state: {
        required: true,
        serializedName: "state",
        type: {
          name: "Enum",
          allowedValues: [
            "running",
            "completed"
          ]
        }
      },
      taskRootDirectory: {
        serializedName: "taskRootDirectory",
        type: {
          name: "String"
        }
      },
      taskRootDirectoryUrl: {
        serializedName: "taskRootDirectoryUrl",
        type: {
          name: "String"
        }
      },
      exitCode: {
        serializedName: "exitCode",
        type: {
          name: "Number"
        }
      },
      containerInfo: {
        serializedName: "containerInfo",
        type: {
          name: "Composite",
          className: "TaskContainerExecutionInformation"
        }
      },
      failureInfo: {
        serializedName: "failureInfo",
        type: {
          name: "Composite",
          className: "TaskFailureInformation"
        }
      },
      retryCount: {
        required: true,
        serializedName: "retryCount",
        type: {
          name: "Number"
        }
      },
      lastRetryTime: {
        serializedName: "lastRetryTime",
        type: {
          name: "DateTime"
        }
      },
      result: {
        serializedName: "result",
        type: {
          name: "Enum",
          allowedValues: [
            "success",
            "failure"
          ]
        }
      }
    }
  }
};

export const JobReleaseTaskExecutionInformation: coreHttp.CompositeMapper = {
  serializedName: "JobReleaseTaskExecutionInformation",
  type: {
    name: "Composite",
    className: "JobReleaseTaskExecutionInformation",
    modelProperties: {
      startTime: {
        required: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      state: {
        required: true,
        serializedName: "state",
        type: {
          name: "Enum",
          allowedValues: [
            "running",
            "completed"
          ]
        }
      },
      taskRootDirectory: {
        serializedName: "taskRootDirectory",
        type: {
          name: "String"
        }
      },
      taskRootDirectoryUrl: {
        serializedName: "taskRootDirectoryUrl",
        type: {
          name: "String"
        }
      },
      exitCode: {
        serializedName: "exitCode",
        type: {
          name: "Number"
        }
      },
      containerInfo: {
        serializedName: "containerInfo",
        type: {
          name: "Composite",
          className: "TaskContainerExecutionInformation"
        }
      },
      failureInfo: {
        serializedName: "failureInfo",
        type: {
          name: "Composite",
          className: "TaskFailureInformation"
        }
      },
      result: {
        serializedName: "result",
        type: {
          name: "Enum",
          allowedValues: [
            "success",
            "failure"
          ]
        }
      }
    }
  }
};

export const JobPreparationAndReleaseTaskExecutionInformation: coreHttp.CompositeMapper = {
  serializedName: "JobPreparationAndReleaseTaskExecutionInformation",
  type: {
    name: "Composite",
    className: "JobPreparationAndReleaseTaskExecutionInformation",
    modelProperties: {
      poolId: {
        serializedName: "poolId",
        type: {
          name: "String"
        }
      },
      nodeId: {
        serializedName: "nodeId",
        type: {
          name: "String"
        }
      },
      nodeUrl: {
        serializedName: "nodeUrl",
        type: {
          name: "String"
        }
      },
      jobPreparationTaskExecutionInfo: {
        serializedName: "jobPreparationTaskExecutionInfo",
        type: {
          name: "Composite",
          className: "JobPreparationTaskExecutionInformation"
        }
      },
      jobReleaseTaskExecutionInfo: {
        serializedName: "jobReleaseTaskExecutionInfo",
        type: {
          name: "Composite",
          className: "JobReleaseTaskExecutionInformation"
        }
      }
    }
  }
};

export const TaskCounts: coreHttp.CompositeMapper = {
  serializedName: "TaskCounts",
  type: {
    name: "Composite",
    className: "TaskCounts",
    modelProperties: {
      active: {
        required: true,
        serializedName: "active",
        type: {
          name: "Number"
        }
      },
      running: {
        required: true,
        serializedName: "running",
        type: {
          name: "Number"
        }
      },
      completed: {
        required: true,
        serializedName: "completed",
        type: {
          name: "Number"
        }
      },
      succeeded: {
        required: true,
        serializedName: "succeeded",
        type: {
          name: "Number"
        }
      },
      failed: {
        required: true,
        serializedName: "failed",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AutoScaleRunError: coreHttp.CompositeMapper = {
  serializedName: "AutoScaleRunError",
  type: {
    name: "Composite",
    className: "AutoScaleRunError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameValuePair"
            }
          }
        }
      }
    }
  }
};

export const AutoScaleRun: coreHttp.CompositeMapper = {
  serializedName: "AutoScaleRun",
  type: {
    name: "Composite",
    className: "AutoScaleRun",
    modelProperties: {
      timestamp: {
        required: true,
        serializedName: "timestamp",
        type: {
          name: "DateTime"
        }
      },
      results: {
        serializedName: "results",
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "AutoScaleRunError"
        }
      }
    }
  }
};

export const ResizeError: coreHttp.CompositeMapper = {
  serializedName: "ResizeError",
  type: {
    name: "Composite",
    className: "ResizeError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameValuePair"
            }
          }
        }
      }
    }
  }
};

export const CloudPool: coreHttp.CompositeMapper = {
  serializedName: "CloudPool",
  type: {
    name: "Composite",
    className: "CloudPool",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "lastModified",
        type: {
          name: "DateTime"
        }
      },
      creationTime: {
        serializedName: "creationTime",
        type: {
          name: "DateTime"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "Enum",
          allowedValues: [
            "active",
            "deleting"
          ]
        }
      },
      stateTransitionTime: {
        serializedName: "stateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      allocationState: {
        serializedName: "allocationState",
        type: {
          name: "Enum",
          allowedValues: [
            "steady",
            "resizing",
            "stopping"
          ]
        }
      },
      allocationStateTransitionTime: {
        serializedName: "allocationStateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      vmSize: {
        serializedName: "vmSize",
        type: {
          name: "String"
        }
      },
      cloudServiceConfiguration: {
        serializedName: "cloudServiceConfiguration",
        type: {
          name: "Composite",
          className: "CloudServiceConfiguration"
        }
      },
      virtualMachineConfiguration: {
        serializedName: "virtualMachineConfiguration",
        type: {
          name: "Composite",
          className: "VirtualMachineConfiguration"
        }
      },
      resizeTimeout: {
        serializedName: "resizeTimeout",
        type: {
          name: "TimeSpan"
        }
      },
      resizeErrors: {
        serializedName: "resizeErrors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResizeError"
            }
          }
        }
      },
      currentDedicatedNodes: {
        serializedName: "currentDedicatedNodes",
        type: {
          name: "Number"
        }
      },
      currentLowPriorityNodes: {
        serializedName: "currentLowPriorityNodes",
        type: {
          name: "Number"
        }
      },
      targetDedicatedNodes: {
        serializedName: "targetDedicatedNodes",
        type: {
          name: "Number"
        }
      },
      targetLowPriorityNodes: {
        serializedName: "targetLowPriorityNodes",
        type: {
          name: "Number"
        }
      },
      enableAutoScale: {
        serializedName: "enableAutoScale",
        type: {
          name: "Boolean"
        }
      },
      autoScaleFormula: {
        serializedName: "autoScaleFormula",
        type: {
          name: "String"
        }
      },
      autoScaleEvaluationInterval: {
        serializedName: "autoScaleEvaluationInterval",
        type: {
          name: "TimeSpan"
        }
      },
      autoScaleRun: {
        serializedName: "autoScaleRun",
        type: {
          name: "Composite",
          className: "AutoScaleRun"
        }
      },
      enableInterNodeCommunication: {
        serializedName: "enableInterNodeCommunication",
        type: {
          name: "Boolean"
        }
      },
      networkConfiguration: {
        serializedName: "networkConfiguration",
        type: {
          name: "Composite",
          className: "NetworkConfiguration"
        }
      },
      startTask: {
        serializedName: "startTask",
        type: {
          name: "Composite",
          className: "StartTask"
        }
      },
      certificateReferences: {
        serializedName: "certificateReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CertificateReference"
            }
          }
        }
      },
      applicationPackageReferences: {
        serializedName: "applicationPackageReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationPackageReference"
            }
          }
        }
      },
      applicationLicenses: {
        serializedName: "applicationLicenses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      maxTasksPerNode: {
        serializedName: "maxTasksPerNode",
        type: {
          name: "Number"
        }
      },
      taskSchedulingPolicy: {
        serializedName: "taskSchedulingPolicy",
        type: {
          name: "Composite",
          className: "TaskSchedulingPolicy"
        }
      },
      userAccounts: {
        serializedName: "userAccounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UserAccount"
            }
          }
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataItem"
            }
          }
        }
      },
      stats: {
        serializedName: "stats",
        type: {
          name: "Composite",
          className: "PoolStatistics"
        }
      },
      mountConfiguration: {
        serializedName: "mountConfiguration",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MountConfiguration"
            }
          }
        }
      }
    }
  }
};

export const PoolAddParameter: coreHttp.CompositeMapper = {
  serializedName: "PoolAddParameter",
  type: {
    name: "Composite",
    className: "PoolAddParameter",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      vmSize: {
        required: true,
        serializedName: "vmSize",
        type: {
          name: "String"
        }
      },
      cloudServiceConfiguration: {
        serializedName: "cloudServiceConfiguration",
        type: {
          name: "Composite",
          className: "CloudServiceConfiguration"
        }
      },
      virtualMachineConfiguration: {
        serializedName: "virtualMachineConfiguration",
        type: {
          name: "Composite",
          className: "VirtualMachineConfiguration"
        }
      },
      resizeTimeout: {
        serializedName: "resizeTimeout",
        type: {
          name: "TimeSpan"
        }
      },
      targetDedicatedNodes: {
        serializedName: "targetDedicatedNodes",
        type: {
          name: "Number"
        }
      },
      targetLowPriorityNodes: {
        serializedName: "targetLowPriorityNodes",
        type: {
          name: "Number"
        }
      },
      enableAutoScale: {
        serializedName: "enableAutoScale",
        type: {
          name: "Boolean"
        }
      },
      autoScaleFormula: {
        serializedName: "autoScaleFormula",
        type: {
          name: "String"
        }
      },
      autoScaleEvaluationInterval: {
        serializedName: "autoScaleEvaluationInterval",
        type: {
          name: "TimeSpan"
        }
      },
      enableInterNodeCommunication: {
        serializedName: "enableInterNodeCommunication",
        type: {
          name: "Boolean"
        }
      },
      networkConfiguration: {
        serializedName: "networkConfiguration",
        type: {
          name: "Composite",
          className: "NetworkConfiguration"
        }
      },
      startTask: {
        serializedName: "startTask",
        type: {
          name: "Composite",
          className: "StartTask"
        }
      },
      certificateReferences: {
        serializedName: "certificateReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CertificateReference"
            }
          }
        }
      },
      applicationPackageReferences: {
        serializedName: "applicationPackageReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationPackageReference"
            }
          }
        }
      },
      applicationLicenses: {
        serializedName: "applicationLicenses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      maxTasksPerNode: {
        serializedName: "maxTasksPerNode",
        type: {
          name: "Number"
        }
      },
      taskSchedulingPolicy: {
        serializedName: "taskSchedulingPolicy",
        type: {
          name: "Composite",
          className: "TaskSchedulingPolicy"
        }
      },
      userAccounts: {
        serializedName: "userAccounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UserAccount"
            }
          }
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataItem"
            }
          }
        }
      },
      mountConfiguration: {
        serializedName: "mountConfiguration",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MountConfiguration"
            }
          }
        }
      }
    }
  }
};

export const AffinityInformation: coreHttp.CompositeMapper = {
  serializedName: "AffinityInformation",
  type: {
    name: "Composite",
    className: "AffinityInformation",
    modelProperties: {
      affinityId: {
        required: true,
        serializedName: "affinityId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaskExecutionInformation: coreHttp.CompositeMapper = {
  serializedName: "TaskExecutionInformation",
  type: {
    name: "Composite",
    className: "TaskExecutionInformation",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      exitCode: {
        serializedName: "exitCode",
        type: {
          name: "Number"
        }
      },
      containerInfo: {
        serializedName: "containerInfo",
        type: {
          name: "Composite",
          className: "TaskContainerExecutionInformation"
        }
      },
      failureInfo: {
        serializedName: "failureInfo",
        type: {
          name: "Composite",
          className: "TaskFailureInformation"
        }
      },
      retryCount: {
        required: true,
        serializedName: "retryCount",
        type: {
          name: "Number"
        }
      },
      lastRetryTime: {
        serializedName: "lastRetryTime",
        type: {
          name: "DateTime"
        }
      },
      requeueCount: {
        required: true,
        serializedName: "requeueCount",
        type: {
          name: "Number"
        }
      },
      lastRequeueTime: {
        serializedName: "lastRequeueTime",
        type: {
          name: "DateTime"
        }
      },
      result: {
        serializedName: "result",
        type: {
          name: "Enum",
          allowedValues: [
            "success",
            "failure"
          ]
        }
      }
    }
  }
};

export const ComputeNodeInformation: coreHttp.CompositeMapper = {
  serializedName: "ComputeNodeInformation",
  type: {
    name: "Composite",
    className: "ComputeNodeInformation",
    modelProperties: {
      affinityId: {
        serializedName: "affinityId",
        type: {
          name: "String"
        }
      },
      nodeUrl: {
        serializedName: "nodeUrl",
        type: {
          name: "String"
        }
      },
      poolId: {
        serializedName: "poolId",
        type: {
          name: "String"
        }
      },
      nodeId: {
        serializedName: "nodeId",
        type: {
          name: "String"
        }
      },
      taskRootDirectory: {
        serializedName: "taskRootDirectory",
        type: {
          name: "String"
        }
      },
      taskRootDirectoryUrl: {
        serializedName: "taskRootDirectoryUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NodeAgentInformation: coreHttp.CompositeMapper = {
  serializedName: "NodeAgentInformation",
  type: {
    name: "Composite",
    className: "NodeAgentInformation",
    modelProperties: {
      version: {
        required: true,
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      lastUpdateTime: {
        required: true,
        serializedName: "lastUpdateTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const MultiInstanceSettings: coreHttp.CompositeMapper = {
  serializedName: "MultiInstanceSettings",
  type: {
    name: "Composite",
    className: "MultiInstanceSettings",
    modelProperties: {
      numberOfInstances: {
        serializedName: "numberOfInstances",
        type: {
          name: "Number"
        }
      },
      coordinationCommandLine: {
        required: true,
        serializedName: "coordinationCommandLine",
        type: {
          name: "String"
        }
      },
      commonResourceFiles: {
        serializedName: "commonResourceFiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceFile"
            }
          }
        }
      }
    }
  }
};

export const TaskStatistics: coreHttp.CompositeMapper = {
  serializedName: "TaskStatistics",
  type: {
    name: "Composite",
    className: "TaskStatistics",
    modelProperties: {
      url: {
        required: true,
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      startTime: {
        required: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      lastUpdateTime: {
        required: true,
        serializedName: "lastUpdateTime",
        type: {
          name: "DateTime"
        }
      },
      userCPUTime: {
        required: true,
        serializedName: "userCPUTime",
        type: {
          name: "TimeSpan"
        }
      },
      kernelCPUTime: {
        required: true,
        serializedName: "kernelCPUTime",
        type: {
          name: "TimeSpan"
        }
      },
      wallClockTime: {
        required: true,
        serializedName: "wallClockTime",
        type: {
          name: "TimeSpan"
        }
      },
      readIOps: {
        required: true,
        serializedName: "readIOps",
        type: {
          name: "Number"
        }
      },
      writeIOps: {
        required: true,
        serializedName: "writeIOps",
        type: {
          name: "Number"
        }
      },
      readIOGiB: {
        required: true,
        serializedName: "readIOGiB",
        type: {
          name: "Number"
        }
      },
      writeIOGiB: {
        required: true,
        serializedName: "writeIOGiB",
        type: {
          name: "Number"
        }
      },
      waitTime: {
        required: true,
        serializedName: "waitTime",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const TaskIdRange: coreHttp.CompositeMapper = {
  serializedName: "TaskIdRange",
  type: {
    name: "Composite",
    className: "TaskIdRange",
    modelProperties: {
      start: {
        required: true,
        serializedName: "start",
        type: {
          name: "Number"
        }
      },
      end: {
        required: true,
        serializedName: "end",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TaskDependencies: coreHttp.CompositeMapper = {
  serializedName: "TaskDependencies",
  type: {
    name: "Composite",
    className: "TaskDependencies",
    modelProperties: {
      taskIds: {
        serializedName: "taskIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      taskIdRanges: {
        serializedName: "taskIdRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TaskIdRange"
            }
          }
        }
      }
    }
  }
};

export const CloudTask: coreHttp.CompositeMapper = {
  serializedName: "CloudTask",
  type: {
    name: "Composite",
    className: "CloudTask",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "lastModified",
        type: {
          name: "DateTime"
        }
      },
      creationTime: {
        serializedName: "creationTime",
        type: {
          name: "DateTime"
        }
      },
      exitConditions: {
        serializedName: "exitConditions",
        type: {
          name: "Composite",
          className: "ExitConditions"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "Enum",
          allowedValues: [
            "active",
            "preparing",
            "running",
            "completed"
          ]
        }
      },
      stateTransitionTime: {
        serializedName: "stateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      previousState: {
        serializedName: "previousState",
        type: {
          name: "Enum",
          allowedValues: [
            "active",
            "preparing",
            "running",
            "completed"
          ]
        }
      },
      previousStateTransitionTime: {
        serializedName: "previousStateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      commandLine: {
        serializedName: "commandLine",
        type: {
          name: "String"
        }
      },
      containerSettings: {
        serializedName: "containerSettings",
        type: {
          name: "Composite",
          className: "TaskContainerSettings"
        }
      },
      resourceFiles: {
        serializedName: "resourceFiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceFile"
            }
          }
        }
      },
      outputFiles: {
        serializedName: "outputFiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OutputFile"
            }
          }
        }
      },
      environmentSettings: {
        serializedName: "environmentSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentSetting"
            }
          }
        }
      },
      affinityInfo: {
        serializedName: "affinityInfo",
        type: {
          name: "Composite",
          className: "AffinityInformation"
        }
      },
      constraints: {
        serializedName: "constraints",
        type: {
          name: "Composite",
          className: "TaskConstraints"
        }
      },
      userIdentity: {
        serializedName: "userIdentity",
        type: {
          name: "Composite",
          className: "UserIdentity"
        }
      },
      executionInfo: {
        serializedName: "executionInfo",
        type: {
          name: "Composite",
          className: "TaskExecutionInformation"
        }
      },
      nodeInfo: {
        serializedName: "nodeInfo",
        type: {
          name: "Composite",
          className: "ComputeNodeInformation"
        }
      },
      multiInstanceSettings: {
        serializedName: "multiInstanceSettings",
        type: {
          name: "Composite",
          className: "MultiInstanceSettings"
        }
      },
      stats: {
        serializedName: "stats",
        type: {
          name: "Composite",
          className: "TaskStatistics"
        }
      },
      dependsOn: {
        serializedName: "dependsOn",
        type: {
          name: "Composite",
          className: "TaskDependencies"
        }
      },
      applicationPackageReferences: {
        serializedName: "applicationPackageReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationPackageReference"
            }
          }
        }
      },
      authenticationTokenSettings: {
        serializedName: "authenticationTokenSettings",
        type: {
          name: "Composite",
          className: "AuthenticationTokenSettings"
        }
      }
    }
  }
};

export const TaskAddParameter: coreHttp.CompositeMapper = {
  serializedName: "TaskAddParameter",
  type: {
    name: "Composite",
    className: "TaskAddParameter",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      commandLine: {
        required: true,
        serializedName: "commandLine",
        type: {
          name: "String"
        }
      },
      containerSettings: {
        serializedName: "containerSettings",
        type: {
          name: "Composite",
          className: "TaskContainerSettings"
        }
      },
      exitConditions: {
        serializedName: "exitConditions",
        type: {
          name: "Composite",
          className: "ExitConditions"
        }
      },
      resourceFiles: {
        serializedName: "resourceFiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceFile"
            }
          }
        }
      },
      outputFiles: {
        serializedName: "outputFiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OutputFile"
            }
          }
        }
      },
      environmentSettings: {
        serializedName: "environmentSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentSetting"
            }
          }
        }
      },
      affinityInfo: {
        serializedName: "affinityInfo",
        type: {
          name: "Composite",
          className: "AffinityInformation"
        }
      },
      constraints: {
        serializedName: "constraints",
        type: {
          name: "Composite",
          className: "TaskConstraints"
        }
      },
      userIdentity: {
        serializedName: "userIdentity",
        type: {
          name: "Composite",
          className: "UserIdentity"
        }
      },
      multiInstanceSettings: {
        serializedName: "multiInstanceSettings",
        type: {
          name: "Composite",
          className: "MultiInstanceSettings"
        }
      },
      dependsOn: {
        serializedName: "dependsOn",
        type: {
          name: "Composite",
          className: "TaskDependencies"
        }
      },
      applicationPackageReferences: {
        serializedName: "applicationPackageReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationPackageReference"
            }
          }
        }
      },
      authenticationTokenSettings: {
        serializedName: "authenticationTokenSettings",
        type: {
          name: "Composite",
          className: "AuthenticationTokenSettings"
        }
      }
    }
  }
};

export const TaskAddCollectionParameter: coreHttp.CompositeMapper = {
  serializedName: "TaskAddCollectionParameter",
  type: {
    name: "Composite",
    className: "TaskAddCollectionParameter",
    modelProperties: {
      value: {
        required: true,
        serializedName: "value",
        constraints: {
          MaxItems: 100
        },
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TaskAddParameter"
            }
          }
        }
      }
    }
  }
};

export const ErrorMessage: coreHttp.CompositeMapper = {
  serializedName: "ErrorMessage",
  type: {
    name: "Composite",
    className: "ErrorMessage",
    modelProperties: {
      lang: {
        serializedName: "lang",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BatchErrorDetail: coreHttp.CompositeMapper = {
  serializedName: "BatchErrorDetail",
  type: {
    name: "Composite",
    className: "BatchErrorDetail",
    modelProperties: {
      key: {
        serializedName: "key",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BatchError: coreHttp.CompositeMapper = {
  serializedName: "BatchError",
  type: {
    name: "Composite",
    className: "BatchError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "Composite",
          className: "ErrorMessage"
        }
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BatchErrorDetail"
            }
          }
        }
      }
    }
  }
};

export const TaskAddResult: coreHttp.CompositeMapper = {
  serializedName: "TaskAddResult",
  type: {
    name: "Composite",
    className: "TaskAddResult",
    modelProperties: {
      status: {
        required: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "success",
            "clienterror",
            "servererror"
          ]
        }
      },
      taskId: {
        required: true,
        serializedName: "taskId",
        type: {
          name: "String"
        }
      },
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "lastModified",
        type: {
          name: "DateTime"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "BatchError"
        }
      }
    }
  }
};

export const TaskAddCollectionResult: coreHttp.CompositeMapper = {
  serializedName: "TaskAddCollectionResult",
  type: {
    name: "Composite",
    className: "TaskAddCollectionResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TaskAddResult"
            }
          }
        }
      }
    }
  }
};

export const SubtaskInformation: coreHttp.CompositeMapper = {
  serializedName: "SubtaskInformation",
  type: {
    name: "Composite",
    className: "SubtaskInformation",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "Number"
        }
      },
      nodeInfo: {
        serializedName: "nodeInfo",
        type: {
          name: "Composite",
          className: "ComputeNodeInformation"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      exitCode: {
        serializedName: "exitCode",
        type: {
          name: "Number"
        }
      },
      containerInfo: {
        serializedName: "containerInfo",
        type: {
          name: "Composite",
          className: "TaskContainerExecutionInformation"
        }
      },
      failureInfo: {
        serializedName: "failureInfo",
        type: {
          name: "Composite",
          className: "TaskFailureInformation"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "Enum",
          allowedValues: [
            "preparing",
            "running",
            "completed"
          ]
        }
      },
      stateTransitionTime: {
        serializedName: "stateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      previousState: {
        serializedName: "previousState",
        type: {
          name: "Enum",
          allowedValues: [
            "preparing",
            "running",
            "completed"
          ]
        }
      },
      previousStateTransitionTime: {
        serializedName: "previousStateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      result: {
        serializedName: "result",
        type: {
          name: "Enum",
          allowedValues: [
            "success",
            "failure"
          ]
        }
      }
    }
  }
};

export const CloudTaskListSubtasksResult: coreHttp.CompositeMapper = {
  serializedName: "CloudTaskListSubtasksResult",
  type: {
    name: "Composite",
    className: "CloudTaskListSubtasksResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubtaskInformation"
            }
          }
        }
      }
    }
  }
};

export const TaskInformation: coreHttp.CompositeMapper = {
  serializedName: "TaskInformation",
  type: {
    name: "Composite",
    className: "TaskInformation",
    modelProperties: {
      taskUrl: {
        serializedName: "taskUrl",
        type: {
          name: "String"
        }
      },
      jobId: {
        serializedName: "jobId",
        type: {
          name: "String"
        }
      },
      taskId: {
        serializedName: "taskId",
        type: {
          name: "String"
        }
      },
      subtaskId: {
        serializedName: "subtaskId",
        type: {
          name: "Number"
        }
      },
      taskState: {
        required: true,
        serializedName: "taskState",
        type: {
          name: "Enum",
          allowedValues: [
            "active",
            "preparing",
            "running",
            "completed"
          ]
        }
      },
      executionInfo: {
        serializedName: "executionInfo",
        type: {
          name: "Composite",
          className: "TaskExecutionInformation"
        }
      }
    }
  }
};

export const StartTaskInformation: coreHttp.CompositeMapper = {
  serializedName: "StartTaskInformation",
  type: {
    name: "Composite",
    className: "StartTaskInformation",
    modelProperties: {
      state: {
        required: true,
        serializedName: "state",
        type: {
          name: "Enum",
          allowedValues: [
            "running",
            "completed"
          ]
        }
      },
      startTime: {
        required: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      exitCode: {
        serializedName: "exitCode",
        type: {
          name: "Number"
        }
      },
      containerInfo: {
        serializedName: "containerInfo",
        type: {
          name: "Composite",
          className: "TaskContainerExecutionInformation"
        }
      },
      failureInfo: {
        serializedName: "failureInfo",
        type: {
          name: "Composite",
          className: "TaskFailureInformation"
        }
      },
      retryCount: {
        required: true,
        serializedName: "retryCount",
        type: {
          name: "Number"
        }
      },
      lastRetryTime: {
        serializedName: "lastRetryTime",
        type: {
          name: "DateTime"
        }
      },
      result: {
        serializedName: "result",
        type: {
          name: "Enum",
          allowedValues: [
            "success",
            "failure"
          ]
        }
      }
    }
  }
};

export const ComputeNodeError: coreHttp.CompositeMapper = {
  serializedName: "ComputeNodeError",
  type: {
    name: "Composite",
    className: "ComputeNodeError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      errorDetails: {
        serializedName: "errorDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameValuePair"
            }
          }
        }
      }
    }
  }
};

export const InboundEndpoint: coreHttp.CompositeMapper = {
  serializedName: "InboundEndpoint",
  type: {
    name: "Composite",
    className: "InboundEndpoint",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      protocol: {
        required: true,
        serializedName: "protocol",
        type: {
          name: "Enum",
          allowedValues: [
            "tcp",
            "udp"
          ]
        }
      },
      publicIPAddress: {
        required: true,
        serializedName: "publicIPAddress",
        type: {
          name: "String"
        }
      },
      publicFQDN: {
        required: true,
        serializedName: "publicFQDN",
        type: {
          name: "String"
        }
      },
      frontendPort: {
        required: true,
        serializedName: "frontendPort",
        type: {
          name: "Number"
        }
      },
      backendPort: {
        required: true,
        serializedName: "backendPort",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ComputeNodeEndpointConfiguration: coreHttp.CompositeMapper = {
  serializedName: "ComputeNodeEndpointConfiguration",
  type: {
    name: "Composite",
    className: "ComputeNodeEndpointConfiguration",
    modelProperties: {
      inboundEndpoints: {
        required: true,
        serializedName: "inboundEndpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InboundEndpoint"
            }
          }
        }
      }
    }
  }
};

export const ComputeNode: coreHttp.CompositeMapper = {
  serializedName: "ComputeNode",
  type: {
    name: "Composite",
    className: "ComputeNode",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "Enum",
          allowedValues: [
            "idle",
            "rebooting",
            "reimaging",
            "running",
            "unusable",
            "creating",
            "starting",
            "waitingforstarttask",
            "starttaskfailed",
            "unknown",
            "leavingpool",
            "offline",
            "preempted"
          ]
        }
      },
      schedulingState: {
        serializedName: "schedulingState",
        type: {
          name: "Enum",
          allowedValues: [
            "enabled",
            "disabled"
          ]
        }
      },
      stateTransitionTime: {
        serializedName: "stateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      lastBootTime: {
        serializedName: "lastBootTime",
        type: {
          name: "DateTime"
        }
      },
      allocationTime: {
        serializedName: "allocationTime",
        type: {
          name: "DateTime"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      affinityId: {
        serializedName: "affinityId",
        type: {
          name: "String"
        }
      },
      vmSize: {
        serializedName: "vmSize",
        type: {
          name: "String"
        }
      },
      totalTasksRun: {
        serializedName: "totalTasksRun",
        type: {
          name: "Number"
        }
      },
      runningTasksCount: {
        serializedName: "runningTasksCount",
        type: {
          name: "Number"
        }
      },
      totalTasksSucceeded: {
        serializedName: "totalTasksSucceeded",
        type: {
          name: "Number"
        }
      },
      recentTasks: {
        serializedName: "recentTasks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TaskInformation"
            }
          }
        }
      },
      startTask: {
        serializedName: "startTask",
        type: {
          name: "Composite",
          className: "StartTask"
        }
      },
      startTaskInfo: {
        serializedName: "startTaskInfo",
        type: {
          name: "Composite",
          className: "StartTaskInformation"
        }
      },
      certificateReferences: {
        serializedName: "certificateReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CertificateReference"
            }
          }
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ComputeNodeError"
            }
          }
        }
      },
      isDedicated: {
        serializedName: "isDedicated",
        type: {
          name: "Boolean"
        }
      },
      endpointConfiguration: {
        serializedName: "endpointConfiguration",
        type: {
          name: "Composite",
          className: "ComputeNodeEndpointConfiguration"
        }
      },
      nodeAgentInfo: {
        serializedName: "nodeAgentInfo",
        type: {
          name: "Composite",
          className: "NodeAgentInformation"
        }
      }
    }
  }
};

export const ComputeNodeUser: coreHttp.CompositeMapper = {
  serializedName: "ComputeNodeUser",
  type: {
    name: "Composite",
    className: "ComputeNodeUser",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      isAdmin: {
        serializedName: "isAdmin",
        type: {
          name: "Boolean"
        }
      },
      expiryTime: {
        serializedName: "expiryTime",
        type: {
          name: "DateTime"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      sshPublicKey: {
        serializedName: "sshPublicKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeNodeGetRemoteLoginSettingsResult: coreHttp.CompositeMapper = {
  serializedName: "ComputeNodeGetRemoteLoginSettingsResult",
  type: {
    name: "Composite",
    className: "ComputeNodeGetRemoteLoginSettingsResult",
    modelProperties: {
      remoteLoginIPAddress: {
        required: true,
        serializedName: "remoteLoginIPAddress",
        type: {
          name: "String"
        }
      },
      remoteLoginPort: {
        required: true,
        serializedName: "remoteLoginPort",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const JobSchedulePatchParameter: coreHttp.CompositeMapper = {
  serializedName: "JobSchedulePatchParameter",
  type: {
    name: "Composite",
    className: "JobSchedulePatchParameter",
    modelProperties: {
      schedule: {
        serializedName: "schedule",
        type: {
          name: "Composite",
          className: "Schedule"
        }
      },
      jobSpecification: {
        serializedName: "jobSpecification",
        type: {
          name: "Composite",
          className: "JobSpecification"
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataItem"
            }
          }
        }
      }
    }
  }
};

export const JobScheduleUpdateParameter: coreHttp.CompositeMapper = {
  serializedName: "JobScheduleUpdateParameter",
  type: {
    name: "Composite",
    className: "JobScheduleUpdateParameter",
    modelProperties: {
      schedule: {
        required: true,
        serializedName: "schedule",
        type: {
          name: "Composite",
          className: "Schedule"
        }
      },
      jobSpecification: {
        required: true,
        serializedName: "jobSpecification",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "JobSpecification"
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataItem"
            }
          }
        }
      }
    }
  }
};

export const JobDisableParameter: coreHttp.CompositeMapper = {
  serializedName: "JobDisableParameter",
  type: {
    name: "Composite",
    className: "JobDisableParameter",
    modelProperties: {
      disableTasks: {
        required: true,
        serializedName: "disableTasks",
        type: {
          name: "Enum",
          allowedValues: [
            "requeue",
            "terminate",
            "wait"
          ]
        }
      }
    }
  }
};

export const JobTerminateParameter: coreHttp.CompositeMapper = {
  serializedName: "JobTerminateParameter",
  type: {
    name: "Composite",
    className: "JobTerminateParameter",
    modelProperties: {
      terminateReason: {
        serializedName: "terminateReason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobPatchParameter: coreHttp.CompositeMapper = {
  serializedName: "JobPatchParameter",
  type: {
    name: "Composite",
    className: "JobPatchParameter",
    modelProperties: {
      priority: {
        serializedName: "priority",
        type: {
          name: "Number"
        }
      },
      onAllTasksComplete: {
        serializedName: "onAllTasksComplete",
        type: {
          name: "Enum",
          allowedValues: [
            "noaction",
            "terminatejob"
          ]
        }
      },
      constraints: {
        serializedName: "constraints",
        type: {
          name: "Composite",
          className: "JobConstraints"
        }
      },
      poolInfo: {
        serializedName: "poolInfo",
        type: {
          name: "Composite",
          className: "PoolInformation"
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataItem"
            }
          }
        }
      }
    }
  }
};

export const JobUpdateParameter: coreHttp.CompositeMapper = {
  serializedName: "JobUpdateParameter",
  type: {
    name: "Composite",
    className: "JobUpdateParameter",
    modelProperties: {
      priority: {
        serializedName: "priority",
        type: {
          name: "Number"
        }
      },
      constraints: {
        serializedName: "constraints",
        type: {
          name: "Composite",
          className: "JobConstraints"
        }
      },
      poolInfo: {
        required: true,
        serializedName: "poolInfo",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "PoolInformation"
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataItem"
            }
          }
        }
      },
      onAllTasksComplete: {
        serializedName: "onAllTasksComplete",
        type: {
          name: "Enum",
          allowedValues: [
            "noaction",
            "terminatejob"
          ]
        }
      }
    }
  }
};

export const PoolEnableAutoScaleParameter: coreHttp.CompositeMapper = {
  serializedName: "PoolEnableAutoScaleParameter",
  type: {
    name: "Composite",
    className: "PoolEnableAutoScaleParameter",
    modelProperties: {
      autoScaleFormula: {
        serializedName: "autoScaleFormula",
        type: {
          name: "String"
        }
      },
      autoScaleEvaluationInterval: {
        serializedName: "autoScaleEvaluationInterval",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const PoolEvaluateAutoScaleParameter: coreHttp.CompositeMapper = {
  serializedName: "PoolEvaluateAutoScaleParameter",
  type: {
    name: "Composite",
    className: "PoolEvaluateAutoScaleParameter",
    modelProperties: {
      autoScaleFormula: {
        required: true,
        serializedName: "autoScaleFormula",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolResizeParameter: coreHttp.CompositeMapper = {
  serializedName: "PoolResizeParameter",
  type: {
    name: "Composite",
    className: "PoolResizeParameter",
    modelProperties: {
      targetDedicatedNodes: {
        serializedName: "targetDedicatedNodes",
        type: {
          name: "Number"
        }
      },
      targetLowPriorityNodes: {
        serializedName: "targetLowPriorityNodes",
        type: {
          name: "Number"
        }
      },
      resizeTimeout: {
        serializedName: "resizeTimeout",
        type: {
          name: "TimeSpan"
        }
      },
      nodeDeallocationOption: {
        serializedName: "nodeDeallocationOption",
        type: {
          name: "Enum",
          allowedValues: [
            "requeue",
            "terminate",
            "taskcompletion",
            "retaineddata"
          ]
        }
      }
    }
  }
};

export const PoolUpdatePropertiesParameter: coreHttp.CompositeMapper = {
  serializedName: "PoolUpdatePropertiesParameter",
  type: {
    name: "Composite",
    className: "PoolUpdatePropertiesParameter",
    modelProperties: {
      startTask: {
        serializedName: "startTask",
        type: {
          name: "Composite",
          className: "StartTask"
        }
      },
      certificateReferences: {
        required: true,
        serializedName: "certificateReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CertificateReference"
            }
          }
        }
      },
      applicationPackageReferences: {
        required: true,
        serializedName: "applicationPackageReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationPackageReference"
            }
          }
        }
      },
      metadata: {
        required: true,
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataItem"
            }
          }
        }
      }
    }
  }
};

export const PoolPatchParameter: coreHttp.CompositeMapper = {
  serializedName: "PoolPatchParameter",
  type: {
    name: "Composite",
    className: "PoolPatchParameter",
    modelProperties: {
      startTask: {
        serializedName: "startTask",
        type: {
          name: "Composite",
          className: "StartTask"
        }
      },
      certificateReferences: {
        serializedName: "certificateReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CertificateReference"
            }
          }
        }
      },
      applicationPackageReferences: {
        serializedName: "applicationPackageReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationPackageReference"
            }
          }
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetadataItem"
            }
          }
        }
      }
    }
  }
};

export const TaskUpdateParameter: coreHttp.CompositeMapper = {
  serializedName: "TaskUpdateParameter",
  type: {
    name: "Composite",
    className: "TaskUpdateParameter",
    modelProperties: {
      constraints: {
        serializedName: "constraints",
        type: {
          name: "Composite",
          className: "TaskConstraints"
        }
      }
    }
  }
};

export const NodeUpdateUserParameter: coreHttp.CompositeMapper = {
  serializedName: "NodeUpdateUserParameter",
  type: {
    name: "Composite",
    className: "NodeUpdateUserParameter",
    modelProperties: {
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      expiryTime: {
        serializedName: "expiryTime",
        type: {
          name: "DateTime"
        }
      },
      sshPublicKey: {
        serializedName: "sshPublicKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NodeRebootParameter: coreHttp.CompositeMapper = {
  serializedName: "NodeRebootParameter",
  type: {
    name: "Composite",
    className: "NodeRebootParameter",
    modelProperties: {
      nodeRebootOption: {
        serializedName: "nodeRebootOption",
        type: {
          name: "Enum",
          allowedValues: [
            "requeue",
            "terminate",
            "taskcompletion",
            "retaineddata"
          ]
        }
      }
    }
  }
};

export const NodeReimageParameter: coreHttp.CompositeMapper = {
  serializedName: "NodeReimageParameter",
  type: {
    name: "Composite",
    className: "NodeReimageParameter",
    modelProperties: {
      nodeReimageOption: {
        serializedName: "nodeReimageOption",
        type: {
          name: "Enum",
          allowedValues: [
            "requeue",
            "terminate",
            "taskcompletion",
            "retaineddata"
          ]
        }
      }
    }
  }
};

export const NodeDisableSchedulingParameter: coreHttp.CompositeMapper = {
  serializedName: "NodeDisableSchedulingParameter",
  type: {
    name: "Composite",
    className: "NodeDisableSchedulingParameter",
    modelProperties: {
      nodeDisableSchedulingOption: {
        serializedName: "nodeDisableSchedulingOption",
        type: {
          name: "Enum",
          allowedValues: [
            "requeue",
            "terminate",
            "taskcompletion"
          ]
        }
      }
    }
  }
};

export const NodeRemoveParameter: coreHttp.CompositeMapper = {
  serializedName: "NodeRemoveParameter",
  type: {
    name: "Composite",
    className: "NodeRemoveParameter",
    modelProperties: {
      nodeList: {
        required: true,
        serializedName: "nodeList",
        constraints: {
          MaxItems: 100
        },
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      resizeTimeout: {
        serializedName: "resizeTimeout",
        type: {
          name: "TimeSpan"
        }
      },
      nodeDeallocationOption: {
        serializedName: "nodeDeallocationOption",
        type: {
          name: "Enum",
          allowedValues: [
            "requeue",
            "terminate",
            "taskcompletion",
            "retaineddata"
          ]
        }
      }
    }
  }
};

export const UploadBatchServiceLogsConfiguration: coreHttp.CompositeMapper = {
  serializedName: "UploadBatchServiceLogsConfiguration",
  type: {
    name: "Composite",
    className: "UploadBatchServiceLogsConfiguration",
    modelProperties: {
      containerUrl: {
        required: true,
        serializedName: "containerUrl",
        type: {
          name: "String"
        }
      },
      startTime: {
        required: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const UploadBatchServiceLogsResult: coreHttp.CompositeMapper = {
  serializedName: "UploadBatchServiceLogsResult",
  type: {
    name: "Composite",
    className: "UploadBatchServiceLogsResult",
    modelProperties: {
      virtualDirectoryName: {
        required: true,
        serializedName: "virtualDirectoryName",
        type: {
          name: "String"
        }
      },
      numberOfFilesUploaded: {
        required: true,
        serializedName: "numberOfFilesUploaded",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const NodeCounts: coreHttp.CompositeMapper = {
  serializedName: "NodeCounts",
  type: {
    name: "Composite",
    className: "NodeCounts",
    modelProperties: {
      creating: {
        required: true,
        serializedName: "creating",
        type: {
          name: "Number"
        }
      },
      idle: {
        required: true,
        serializedName: "idle",
        type: {
          name: "Number"
        }
      },
      offline: {
        required: true,
        serializedName: "offline",
        type: {
          name: "Number"
        }
      },
      preempted: {
        required: true,
        serializedName: "preempted",
        type: {
          name: "Number"
        }
      },
      rebooting: {
        required: true,
        serializedName: "rebooting",
        type: {
          name: "Number"
        }
      },
      reimaging: {
        required: true,
        serializedName: "reimaging",
        type: {
          name: "Number"
        }
      },
      running: {
        required: true,
        serializedName: "running",
        type: {
          name: "Number"
        }
      },
      starting: {
        required: true,
        serializedName: "starting",
        type: {
          name: "Number"
        }
      },
      startTaskFailed: {
        required: true,
        serializedName: "startTaskFailed",
        type: {
          name: "Number"
        }
      },
      leavingPool: {
        required: true,
        serializedName: "leavingPool",
        type: {
          name: "Number"
        }
      },
      unknown: {
        required: true,
        serializedName: "unknown",
        type: {
          name: "Number"
        }
      },
      unusable: {
        required: true,
        serializedName: "unusable",
        type: {
          name: "Number"
        }
      },
      waitingForStartTask: {
        required: true,
        serializedName: "waitingForStartTask",
        type: {
          name: "Number"
        }
      },
      total: {
        required: true,
        serializedName: "total",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PoolNodeCounts: coreHttp.CompositeMapper = {
  serializedName: "PoolNodeCounts",
  type: {
    name: "Composite",
    className: "PoolNodeCounts",
    modelProperties: {
      poolId: {
        required: true,
        serializedName: "poolId",
        type: {
          name: "String"
        }
      },
      dedicated: {
        serializedName: "dedicated",
        type: {
          name: "Composite",
          className: "NodeCounts"
        }
      },
      lowPriority: {
        serializedName: "lowPriority",
        type: {
          name: "Composite",
          className: "NodeCounts"
        }
      }
    }
  }
};

export const ApplicationListOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationListOptions",
    modelProperties: {
      maxResults: {
        defaultValue: 1000,
        type: {
          name: "Number"
        }
      },
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ApplicationGetOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationGetOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const PoolListUsageMetricsOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolListUsageMetricsOptions",
    modelProperties: {
      startTime: {
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        type: {
          name: "DateTime"
        }
      },
      filter: {
        type: {
          name: "String"
        }
      },
      maxResults: {
        defaultValue: 1000,
        type: {
          name: "Number"
        }
      },
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const PoolGetAllLifetimeStatisticsOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolGetAllLifetimeStatisticsOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const PoolAddOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolAddOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const PoolListOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolListOptions",
    modelProperties: {
      filter: {
        type: {
          name: "String"
        }
      },
      select: {
        type: {
          name: "String"
        }
      },
      expand: {
        type: {
          name: "String"
        }
      },
      maxResults: {
        defaultValue: 1000,
        type: {
          name: "Number"
        }
      },
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const PoolDeleteMethodOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolDeleteMethodOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifMatch: {
        type: {
          name: "String"
        }
      },
      ifNoneMatch: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const PoolExistsOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolExistsOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifMatch: {
        type: {
          name: "String"
        }
      },
      ifNoneMatch: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const PoolGetOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolGetOptions",
    modelProperties: {
      select: {
        type: {
          name: "String"
        }
      },
      expand: {
        type: {
          name: "String"
        }
      },
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifMatch: {
        type: {
          name: "String"
        }
      },
      ifNoneMatch: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const PoolPatchOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolPatchOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifMatch: {
        type: {
          name: "String"
        }
      },
      ifNoneMatch: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const PoolDisableAutoScaleOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolDisableAutoScaleOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const PoolEnableAutoScaleOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolEnableAutoScaleOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifMatch: {
        type: {
          name: "String"
        }
      },
      ifNoneMatch: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const PoolEvaluateAutoScaleOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolEvaluateAutoScaleOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const PoolResizeOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolResizeOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifMatch: {
        type: {
          name: "String"
        }
      },
      ifNoneMatch: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const PoolStopResizeOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolStopResizeOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifMatch: {
        type: {
          name: "String"
        }
      },
      ifNoneMatch: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const PoolUpdatePropertiesOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolUpdatePropertiesOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const PoolRemoveNodesOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolRemoveNodesOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifMatch: {
        type: {
          name: "String"
        }
      },
      ifNoneMatch: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const AccountListSupportedImagesOptions: msRest.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountListSupportedImagesOptions",
    modelProperties: {
      filter: {
        type: {
          name: "String"
        }
      },
      maxResults: {
        defaultValue: 1000,
        type: {
          name: "Number"
        }
      },
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const AccountListPoolNodeCountsOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountListPoolNodeCountsOptions",
    modelProperties: {
      filter: {
        type: {
          name: "String"
        }
      },
      maxResults: {
        defaultValue: 10,
        type: {
          name: "Number"
        }
      },
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobGetAllLifetimeStatisticsOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobGetAllLifetimeStatisticsOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobDeleteMethodOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobDeleteMethodOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifMatch: {
        type: {
          name: "String"
        }
      },
      ifNoneMatch: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobGetOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobGetOptions",
    modelProperties: {
      select: {
        type: {
          name: "String"
        }
      },
      expand: {
        type: {
          name: "String"
        }
      },
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifMatch: {
        type: {
          name: "String"
        }
      },
      ifNoneMatch: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobPatchOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobPatchOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifMatch: {
        type: {
          name: "String"
        }
      },
      ifNoneMatch: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobUpdateOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobUpdateOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifMatch: {
        type: {
          name: "String"
        }
      },
      ifNoneMatch: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobDisableOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobDisableOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifMatch: {
        type: {
          name: "String"
        }
      },
      ifNoneMatch: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobEnableOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobEnableOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifMatch: {
        type: {
          name: "String"
        }
      },
      ifNoneMatch: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobTerminateOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobTerminateOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifMatch: {
        type: {
          name: "String"
        }
      },
      ifNoneMatch: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobAddOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobAddOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobListOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobListOptions",
    modelProperties: {
      filter: {
        type: {
          name: "String"
        }
      },
      select: {
        type: {
          name: "String"
        }
      },
      expand: {
        type: {
          name: "String"
        }
      },
      maxResults: {
        defaultValue: 1000,
        type: {
          name: "Number"
        }
      },
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobListFromJobScheduleOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobListFromJobScheduleOptions",
    modelProperties: {
      filter: {
        type: {
          name: "String"
        }
      },
      select: {
        type: {
          name: "String"
        }
      },
      expand: {
        type: {
          name: "String"
        }
      },
      maxResults: {
        defaultValue: 1000,
        type: {
          name: "Number"
        }
      },
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobListPreparationAndReleaseTaskStatusOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobListPreparationAndReleaseTaskStatusOptions",
    modelProperties: {
      filter: {
        type: {
          name: "String"
        }
      },
      select: {
        type: {
          name: "String"
        }
      },
      maxResults: {
        defaultValue: 1000,
        type: {
          name: "Number"
        }
      },
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobGetTaskCountsOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobGetTaskCountsOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const CertificateAddOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificateAddOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const CertificateListOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificateListOptions",
    modelProperties: {
      filter: {
        type: {
          name: "String"
        }
      },
      select: {
        type: {
          name: "String"
        }
      },
      maxResults: {
        defaultValue: 1000,
        type: {
          name: "Number"
        }
      },
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const CertificateCancelDeletionOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificateCancelDeletionOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const CertificateDeleteMethodOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificateDeleteMethodOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const CertificateGetOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificateGetOptions",
    modelProperties: {
      select: {
        type: {
          name: "String"
        }
      },
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const FileDeleteFromTaskOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileDeleteFromTaskOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const FileGetFromTaskOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileGetFromTaskOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ocpRange: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const FileGetPropertiesFromTaskOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileGetPropertiesFromTaskOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const FileDeleteFromComputeNodeOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileDeleteFromComputeNodeOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const FileGetFromComputeNodeOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileGetFromComputeNodeOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ocpRange: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const FileGetPropertiesFromComputeNodeOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileGetPropertiesFromComputeNodeOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const FileListFromTaskOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileListFromTaskOptions",
    modelProperties: {
      filter: {
        type: {
          name: "String"
        }
      },
      maxResults: {
        defaultValue: 1000,
        type: {
          name: "Number"
        }
      },
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const FileListFromComputeNodeOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileListFromComputeNodeOptions",
    modelProperties: {
      filter: {
        type: {
          name: "String"
        }
      },
      maxResults: {
        defaultValue: 1000,
        type: {
          name: "Number"
        }
      },
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobScheduleExistsOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobScheduleExistsOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifMatch: {
        type: {
          name: "String"
        }
      },
      ifNoneMatch: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobScheduleDeleteMethodOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobScheduleDeleteMethodOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifMatch: {
        type: {
          name: "String"
        }
      },
      ifNoneMatch: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobScheduleGetOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobScheduleGetOptions",
    modelProperties: {
      select: {
        type: {
          name: "String"
        }
      },
      expand: {
        type: {
          name: "String"
        }
      },
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifMatch: {
        type: {
          name: "String"
        }
      },
      ifNoneMatch: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobSchedulePatchOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobSchedulePatchOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifMatch: {
        type: {
          name: "String"
        }
      },
      ifNoneMatch: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobScheduleUpdateOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobScheduleUpdateOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifMatch: {
        type: {
          name: "String"
        }
      },
      ifNoneMatch: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobScheduleDisableOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobScheduleDisableOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifMatch: {
        type: {
          name: "String"
        }
      },
      ifNoneMatch: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobScheduleEnableOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobScheduleEnableOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifMatch: {
        type: {
          name: "String"
        }
      },
      ifNoneMatch: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobScheduleTerminateOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobScheduleTerminateOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifMatch: {
        type: {
          name: "String"
        }
      },
      ifNoneMatch: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobScheduleAddOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobScheduleAddOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobScheduleListOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobScheduleListOptions",
    modelProperties: {
      filter: {
        type: {
          name: "String"
        }
      },
      select: {
        type: {
          name: "String"
        }
      },
      expand: {
        type: {
          name: "String"
        }
      },
      maxResults: {
        defaultValue: 1000,
        type: {
          name: "Number"
        }
      },
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const TaskAddOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskAddOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const TaskListOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskListOptions",
    modelProperties: {
      filter: {
        type: {
          name: "String"
        }
      },
      select: {
        type: {
          name: "String"
        }
      },
      expand: {
        type: {
          name: "String"
        }
      },
      maxResults: {
        defaultValue: 1000,
        type: {
          name: "Number"
        }
      },
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const TaskAddCollectionOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskAddCollectionOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const TaskDeleteMethodOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskDeleteMethodOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifMatch: {
        type: {
          name: "String"
        }
      },
      ifNoneMatch: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const TaskGetOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskGetOptions",
    modelProperties: {
      select: {
        type: {
          name: "String"
        }
      },
      expand: {
        type: {
          name: "String"
        }
      },
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifMatch: {
        type: {
          name: "String"
        }
      },
      ifNoneMatch: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const TaskUpdateOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskUpdateOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifMatch: {
        type: {
          name: "String"
        }
      },
      ifNoneMatch: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const TaskListSubtasksOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskListSubtasksOptions",
    modelProperties: {
      select: {
        type: {
          name: "String"
        }
      },
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const TaskTerminateOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskTerminateOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifMatch: {
        type: {
          name: "String"
        }
      },
      ifNoneMatch: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const TaskReactivateOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskReactivateOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifMatch: {
        type: {
          name: "String"
        }
      },
      ifNoneMatch: {
        type: {
          name: "String"
        }
      },
      ifModifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ComputeNodeAddUserOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeAddUserOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ComputeNodeDeleteUserOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeDeleteUserOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ComputeNodeUpdateUserOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeUpdateUserOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ComputeNodeGetOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeGetOptions",
    modelProperties: {
      select: {
        type: {
          name: "String"
        }
      },
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ComputeNodeRebootOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeRebootOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ComputeNodeReimageOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeReimageOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ComputeNodeDisableSchedulingOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeDisableSchedulingOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ComputeNodeEnableSchedulingOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeEnableSchedulingOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ComputeNodeGetRemoteLoginSettingsOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeGetRemoteLoginSettingsOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ComputeNodeGetRemoteDesktopOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeGetRemoteDesktopOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ComputeNodeUploadBatchServiceLogsOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeUploadBatchServiceLogsOptions",
    modelProperties: {
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ComputeNodeListOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeListOptions",
    modelProperties: {
      filter: {
        type: {
          name: "String"
        }
      },
      select: {
        type: {
          name: "String"
        }
      },
      maxResults: {
        defaultValue: 1000,
        type: {
          name: "Number"
        }
      },
      timeout: {
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ApplicationListNextOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationListNextOptions",
    modelProperties: {
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const PoolListUsageMetricsNextOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolListUsageMetricsNextOptions",
    modelProperties: {
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const PoolListNextOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolListNextOptions",
    modelProperties: {
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const AccountListSupportedImagesNextOptions: msRest.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountListSupportedImagesNextOptions",
    modelProperties: {
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const AccountListPoolNodeCountsNextOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountListPoolNodeCountsNextOptions",
    modelProperties: {
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobListNextOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobListNextOptions",
    modelProperties: {
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobListFromJobScheduleNextOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobListFromJobScheduleNextOptions",
    modelProperties: {
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobListPreparationAndReleaseTaskStatusNextOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobListPreparationAndReleaseTaskStatusNextOptions",
    modelProperties: {
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const CertificateListNextOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificateListNextOptions",
    modelProperties: {
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const FileListFromTaskNextOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileListFromTaskNextOptions",
    modelProperties: {
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const FileListFromComputeNodeNextOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileListFromComputeNodeNextOptions",
    modelProperties: {
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobScheduleListNextOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobScheduleListNextOptions",
    modelProperties: {
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const TaskListNextOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskListNextOptions",
    modelProperties: {
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ComputeNodeListNextOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeNodeListNextOptions",
    modelProperties: {
      clientRequestId: {
        type: {
          name: "Uuid"
        }
      },
      returnClientRequestId: {
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ocpDate: {
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ApplicationListHeaders: coreHttp.CompositeMapper = {
  serializedName: "application-list-headers",
  type: {
    name: "Composite",
    className: "ApplicationListHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ApplicationGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "application-get-headers",
  type: {
    name: "Composite",
    className: "ApplicationGetHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const PoolListUsageMetricsHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool-listusagemetrics-headers",
  type: {
    name: "Composite",
    className: "PoolListUsageMetricsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const AccountListSupportedImagesHeaders: msRest.CompositeMapper = {
  serializedName: "account-listsupportedimages-headers",
  type: {
    name: "Composite",
    className: "AccountListSupportedImagesHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const AccountListPoolNodeCountsHeaders: coreHttp.CompositeMapper = {
  serializedName: "account-listpoolnodecounts-headers",
  type: {
    name: "Composite",
    className: "AccountListPoolNodeCountsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const PoolGetAllLifetimeStatisticsHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool-getalllifetimestatistics-headers",
  type: {
    name: "Composite",
    className: "PoolGetAllLifetimeStatisticsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobGetAllLifetimeStatisticsHeaders: coreHttp.CompositeMapper = {
  serializedName: "job-getalllifetimestatistics-headers",
  type: {
    name: "Composite",
    className: "JobGetAllLifetimeStatisticsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const CertificateAddHeaders: coreHttp.CompositeMapper = {
  serializedName: "certificate-add-headers",
  type: {
    name: "Composite",
    className: "CertificateAddHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateListHeaders: coreHttp.CompositeMapper = {
  serializedName: "certificate-list-headers",
  type: {
    name: "Composite",
    className: "CertificateListHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const CertificateCancelDeletionHeaders: coreHttp.CompositeMapper = {
  serializedName: "certificate-canceldeletion-headers",
  type: {
    name: "Composite",
    className: "CertificateCancelDeletionHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateDeleteHeaders: coreHttp.CompositeMapper = {
  serializedName: "certificate-delete-headers",
  type: {
    name: "Composite",
    className: "CertificateDeleteHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const CertificateGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "certificate-get-headers",
  type: {
    name: "Composite",
    className: "CertificateGetHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const FileDeleteFromTaskHeaders: coreHttp.CompositeMapper = {
  serializedName: "file-deletefromtask-headers",
  type: {
    name: "Composite",
    className: "FileDeleteFromTaskHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileGetFromTaskHeaders: coreHttp.CompositeMapper = {
  serializedName: "file-getfromtask-headers",
  type: {
    name: "Composite",
    className: "FileGetFromTaskHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ocpCreationTime: {
        serializedName: "ocp-creation-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ocpBatchFileIsdirectory: {
        serializedName: "ocp-batch-file-isdirectory",
        type: {
          name: "Boolean"
        }
      },
      ocpBatchFileUrl: {
        serializedName: "ocp-batch-file-url",
        type: {
          name: "String"
        }
      },
      ocpBatchFileMode: {
        serializedName: "ocp-batch-file-mode",
        type: {
          name: "String"
        }
      },
      contentType: {
        serializedName: "content-type",
        type: {
          name: "String"
        }
      },
      contentLength: {
        serializedName: "content-length",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const FileGetPropertiesFromTaskHeaders: coreHttp.CompositeMapper = {
  serializedName: "file-getpropertiesfromtask-headers",
  type: {
    name: "Composite",
    className: "FileGetPropertiesFromTaskHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ocpCreationTime: {
        serializedName: "ocp-creation-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ocpBatchFileIsdirectory: {
        serializedName: "ocp-batch-file-isdirectory",
        type: {
          name: "Boolean"
        }
      },
      ocpBatchFileUrl: {
        serializedName: "ocp-batch-file-url",
        type: {
          name: "String"
        }
      },
      ocpBatchFileMode: {
        serializedName: "ocp-batch-file-mode",
        type: {
          name: "String"
        }
      },
      contentType: {
        serializedName: "content-type",
        type: {
          name: "String"
        }
      },
      contentLength: {
        serializedName: "content-length",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const FileDeleteFromComputeNodeHeaders: coreHttp.CompositeMapper = {
  serializedName: "file-deletefromcomputenode-headers",
  type: {
    name: "Composite",
    className: "FileDeleteFromComputeNodeHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileGetFromComputeNodeHeaders: coreHttp.CompositeMapper = {
  serializedName: "file-getfromcomputenode-headers",
  type: {
    name: "Composite",
    className: "FileGetFromComputeNodeHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ocpCreationTime: {
        serializedName: "ocp-creation-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ocpBatchFileIsdirectory: {
        serializedName: "ocp-batch-file-isdirectory",
        type: {
          name: "Boolean"
        }
      },
      ocpBatchFileUrl: {
        serializedName: "ocp-batch-file-url",
        type: {
          name: "String"
        }
      },
      ocpBatchFileMode: {
        serializedName: "ocp-batch-file-mode",
        type: {
          name: "String"
        }
      },
      contentType: {
        serializedName: "content-type",
        type: {
          name: "String"
        }
      },
      contentLength: {
        serializedName: "content-length",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const FileGetPropertiesFromComputeNodeHeaders: coreHttp.CompositeMapper = {
  serializedName: "file-getpropertiesfromcomputenode-headers",
  type: {
    name: "Composite",
    className: "FileGetPropertiesFromComputeNodeHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ocpCreationTime: {
        serializedName: "ocp-creation-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ocpBatchFileIsdirectory: {
        serializedName: "ocp-batch-file-isdirectory",
        type: {
          name: "Boolean"
        }
      },
      ocpBatchFileUrl: {
        serializedName: "ocp-batch-file-url",
        type: {
          name: "String"
        }
      },
      ocpBatchFileMode: {
        serializedName: "ocp-batch-file-mode",
        type: {
          name: "String"
        }
      },
      contentType: {
        serializedName: "content-type",
        type: {
          name: "String"
        }
      },
      contentLength: {
        serializedName: "content-length",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const FileListFromTaskHeaders: coreHttp.CompositeMapper = {
  serializedName: "file-listfromtask-headers",
  type: {
    name: "Composite",
    className: "FileListFromTaskHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const FileListFromComputeNodeHeaders: coreHttp.CompositeMapper = {
  serializedName: "file-listfromcomputenode-headers",
  type: {
    name: "Composite",
    className: "FileListFromComputeNodeHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobScheduleExistsHeaders: coreHttp.CompositeMapper = {
  serializedName: "jobschedule-exists-headers",
  type: {
    name: "Composite",
    className: "JobScheduleExistsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobScheduleDeleteHeaders: coreHttp.CompositeMapper = {
  serializedName: "jobschedule-delete-headers",
  type: {
    name: "Composite",
    className: "JobScheduleDeleteHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobScheduleGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "jobschedule-get-headers",
  type: {
    name: "Composite",
    className: "JobScheduleGetHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTagHeader: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModifiedHeader: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobSchedulePatchHeaders: coreHttp.CompositeMapper = {
  serializedName: "jobschedule-patch-headers",
  type: {
    name: "Composite",
    className: "JobSchedulePatchHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobScheduleUpdateHeaders: coreHttp.CompositeMapper = {
  serializedName: "jobschedule-update-headers",
  type: {
    name: "Composite",
    className: "JobScheduleUpdateHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobScheduleDisableHeaders: coreHttp.CompositeMapper = {
  serializedName: "jobschedule-disable-headers",
  type: {
    name: "Composite",
    className: "JobScheduleDisableHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobScheduleEnableHeaders: coreHttp.CompositeMapper = {
  serializedName: "jobschedule-enable-headers",
  type: {
    name: "Composite",
    className: "JobScheduleEnableHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobScheduleTerminateHeaders: coreHttp.CompositeMapper = {
  serializedName: "jobschedule-terminate-headers",
  type: {
    name: "Composite",
    className: "JobScheduleTerminateHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobScheduleAddHeaders: coreHttp.CompositeMapper = {
  serializedName: "jobschedule-add-headers",
  type: {
    name: "Composite",
    className: "JobScheduleAddHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobScheduleListHeaders: coreHttp.CompositeMapper = {
  serializedName: "jobschedule-list-headers",
  type: {
    name: "Composite",
    className: "JobScheduleListHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobDeleteHeaders: coreHttp.CompositeMapper = {
  serializedName: "job-delete-headers",
  type: {
    name: "Composite",
    className: "JobDeleteHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "job-get-headers",
  type: {
    name: "Composite",
    className: "JobGetHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTagHeader: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModifiedHeader: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobPatchHeaders: coreHttp.CompositeMapper = {
  serializedName: "job-patch-headers",
  type: {
    name: "Composite",
    className: "JobPatchHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobUpdateHeaders: coreHttp.CompositeMapper = {
  serializedName: "job-update-headers",
  type: {
    name: "Composite",
    className: "JobUpdateHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobDisableHeaders: coreHttp.CompositeMapper = {
  serializedName: "job-disable-headers",
  type: {
    name: "Composite",
    className: "JobDisableHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobEnableHeaders: coreHttp.CompositeMapper = {
  serializedName: "job-enable-headers",
  type: {
    name: "Composite",
    className: "JobEnableHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobTerminateHeaders: coreHttp.CompositeMapper = {
  serializedName: "job-terminate-headers",
  type: {
    name: "Composite",
    className: "JobTerminateHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobAddHeaders: coreHttp.CompositeMapper = {
  serializedName: "job-add-headers",
  type: {
    name: "Composite",
    className: "JobAddHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobListHeaders: coreHttp.CompositeMapper = {
  serializedName: "job-list-headers",
  type: {
    name: "Composite",
    className: "JobListHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobListFromJobScheduleHeaders: coreHttp.CompositeMapper = {
  serializedName: "job-listfromjobschedule-headers",
  type: {
    name: "Composite",
    className: "JobListFromJobScheduleHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobListPreparationAndReleaseTaskStatusHeaders: coreHttp.CompositeMapper = {
  serializedName: "job-listpreparationandreleasetaskstatus-headers",
  type: {
    name: "Composite",
    className: "JobListPreparationAndReleaseTaskStatusHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const JobGetTaskCountsHeaders: coreHttp.CompositeMapper = {
  serializedName: "job-gettaskcounts-headers",
  type: {
    name: "Composite",
    className: "JobGetTaskCountsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const PoolAddHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool-add-headers",
  type: {
    name: "Composite",
    className: "PoolAddHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolListHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool-list-headers",
  type: {
    name: "Composite",
    className: "PoolListHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const PoolDeleteHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool-delete-headers",
  type: {
    name: "Composite",
    className: "PoolDeleteHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolExistsHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool-exists-headers",
  type: {
    name: "Composite",
    className: "PoolExistsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const PoolGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool-get-headers",
  type: {
    name: "Composite",
    className: "PoolGetHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTagHeader: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModifiedHeader: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const PoolPatchHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool-patch-headers",
  type: {
    name: "Composite",
    className: "PoolPatchHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolDisableAutoScaleHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool-disableautoscale-headers",
  type: {
    name: "Composite",
    className: "PoolDisableAutoScaleHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolEnableAutoScaleHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool-enableautoscale-headers",
  type: {
    name: "Composite",
    className: "PoolEnableAutoScaleHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolEvaluateAutoScaleHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool-evaluateautoscale-headers",
  type: {
    name: "Composite",
    className: "PoolEvaluateAutoScaleHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolResizeHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool-resize-headers",
  type: {
    name: "Composite",
    className: "PoolResizeHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolStopResizeHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool-stopresize-headers",
  type: {
    name: "Composite",
    className: "PoolStopResizeHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolUpdatePropertiesHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool-updateproperties-headers",
  type: {
    name: "Composite",
    className: "PoolUpdatePropertiesHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolRemoveNodesHeaders: coreHttp.CompositeMapper = {
  serializedName: "pool-removenodes-headers",
  type: {
    name: "Composite",
    className: "PoolRemoveNodesHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaskAddHeaders: coreHttp.CompositeMapper = {
  serializedName: "task-add-headers",
  type: {
    name: "Composite",
    className: "TaskAddHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaskListHeaders: coreHttp.CompositeMapper = {
  serializedName: "task-list-headers",
  type: {
    name: "Composite",
    className: "TaskListHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const TaskAddCollectionHeaders: coreHttp.CompositeMapper = {
  serializedName: "task-addcollection-headers",
  type: {
    name: "Composite",
    className: "TaskAddCollectionHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaskDeleteHeaders: coreHttp.CompositeMapper = {
  serializedName: "task-delete-headers",
  type: {
    name: "Composite",
    className: "TaskDeleteHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaskGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "task-get-headers",
  type: {
    name: "Composite",
    className: "TaskGetHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTagHeader: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModifiedHeader: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaskUpdateHeaders: coreHttp.CompositeMapper = {
  serializedName: "task-update-headers",
  type: {
    name: "Composite",
    className: "TaskUpdateHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaskListSubtasksHeaders: coreHttp.CompositeMapper = {
  serializedName: "task-listsubtasks-headers",
  type: {
    name: "Composite",
    className: "TaskListSubtasksHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const TaskTerminateHeaders: coreHttp.CompositeMapper = {
  serializedName: "task-terminate-headers",
  type: {
    name: "Composite",
    className: "TaskTerminateHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaskReactivateHeaders: coreHttp.CompositeMapper = {
  serializedName: "task-reactivate-headers",
  type: {
    name: "Composite",
    className: "TaskReactivateHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeNodeAddUserHeaders: coreHttp.CompositeMapper = {
  serializedName: "computenode-adduser-headers",
  type: {
    name: "Composite",
    className: "ComputeNodeAddUserHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeNodeDeleteUserHeaders: coreHttp.CompositeMapper = {
  serializedName: "computenode-deleteuser-headers",
  type: {
    name: "Composite",
    className: "ComputeNodeDeleteUserHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeNodeUpdateUserHeaders: coreHttp.CompositeMapper = {
  serializedName: "computenode-updateuser-headers",
  type: {
    name: "Composite",
    className: "ComputeNodeUpdateUserHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeNodeGetHeaders: coreHttp.CompositeMapper = {
  serializedName: "computenode-get-headers",
  type: {
    name: "Composite",
    className: "ComputeNodeGetHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ComputeNodeRebootHeaders: coreHttp.CompositeMapper = {
  serializedName: "computenode-reboot-headers",
  type: {
    name: "Composite",
    className: "ComputeNodeRebootHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeNodeReimageHeaders: coreHttp.CompositeMapper = {
  serializedName: "computenode-reimage-headers",
  type: {
    name: "Composite",
    className: "ComputeNodeReimageHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeNodeDisableSchedulingHeaders: coreHttp.CompositeMapper = {
  serializedName: "computenode-disablescheduling-headers",
  type: {
    name: "Composite",
    className: "ComputeNodeDisableSchedulingHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeNodeEnableSchedulingHeaders: coreHttp.CompositeMapper = {
  serializedName: "computenode-enablescheduling-headers",
  type: {
    name: "Composite",
    className: "ComputeNodeEnableSchedulingHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      dataServiceId: {
        serializedName: "dataserviceid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeNodeGetRemoteLoginSettingsHeaders: coreHttp.CompositeMapper = {
  serializedName: "computenode-getremoteloginsettings-headers",
  type: {
    name: "Composite",
    className: "ComputeNodeGetRemoteLoginSettingsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ComputeNodeGetRemoteDesktopHeaders: coreHttp.CompositeMapper = {
  serializedName: "computenode-getremotedesktop-headers",
  type: {
    name: "Composite",
    className: "ComputeNodeGetRemoteDesktopHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ComputeNodeUploadBatchServiceLogsHeaders: coreHttp.CompositeMapper = {
  serializedName: "computenode-uploadbatchservicelogs-headers",
  type: {
    name: "Composite",
    className: "ComputeNodeUploadBatchServiceLogsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const ComputeNodeListHeaders: coreHttp.CompositeMapper = {
  serializedName: "computenode-list-headers",
  type: {
    name: "Composite",
    className: "ComputeNodeListHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "client-request-id",
        type: {
          name: "Uuid"
        }
      },
      requestId: {
        serializedName: "request-id",
        type: {
          name: "Uuid"
        }
      },
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};

export const ApplicationListResult: coreHttp.CompositeMapper = {
  serializedName: "ApplicationListResult",
  type: {
    name: "Composite",
    className: "ApplicationListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationSummary"
            }
          }
        }
      },
      odatanextLink: {
        serializedName: "odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolListUsageMetricsResult: coreHttp.CompositeMapper = {
  serializedName: "PoolListUsageMetricsResult",
  type: {
    name: "Composite",
    className: "PoolListUsageMetricsResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PoolUsageMetrics"
            }
          }
        }
      },
      odatanextLink: {
        serializedName: "odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudPoolListResult: coreHttp.CompositeMapper = {
  serializedName: "CloudPoolListResult",
  type: {
    name: "Composite",
    className: "CloudPoolListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudPool"
            }
          }
        }
      },
      odatanextLink: {
        serializedName: "odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccountListSupportedImagesResult: msRest.CompositeMapper = {
  serializedName: "AccountListSupportedImagesResult",
  type: {
    name: "Composite",
    className: "AccountListSupportedImagesResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ImageInformation"
            }
          }
        }
      },
      odatanextLink: {
        serializedName: "odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolNodeCountsListResult: coreHttp.CompositeMapper = {
  serializedName: "PoolNodeCountsListResult",
  type: {
    name: "Composite",
    className: "PoolNodeCountsListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PoolNodeCounts"
            }
          }
        }
      },
      odatanextLink: {
        serializedName: "odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudJobListResult: coreHttp.CompositeMapper = {
  serializedName: "CloudJobListResult",
  type: {
    name: "Composite",
    className: "CloudJobListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudJob"
            }
          }
        }
      },
      odatanextLink: {
        serializedName: "odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudJobListPreparationAndReleaseTaskStatusResult: coreHttp.CompositeMapper = {
  serializedName: "CloudJobListPreparationAndReleaseTaskStatusResult",
  type: {
    name: "Composite",
    className: "CloudJobListPreparationAndReleaseTaskStatusResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobPreparationAndReleaseTaskExecutionInformation"
            }
          }
        }
      },
      odatanextLink: {
        serializedName: "odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateListResult: coreHttp.CompositeMapper = {
  serializedName: "CertificateListResult",
  type: {
    name: "Composite",
    className: "CertificateListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Certificate"
            }
          }
        }
      },
      odatanextLink: {
        serializedName: "odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NodeFileListResult: coreHttp.CompositeMapper = {
  serializedName: "NodeFileListResult",
  type: {
    name: "Composite",
    className: "NodeFileListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NodeFile"
            }
          }
        }
      },
      odatanextLink: {
        serializedName: "odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudJobScheduleListResult: coreHttp.CompositeMapper = {
  serializedName: "CloudJobScheduleListResult",
  type: {
    name: "Composite",
    className: "CloudJobScheduleListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudJobSchedule"
            }
          }
        }
      },
      odatanextLink: {
        serializedName: "odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudTaskListResult: coreHttp.CompositeMapper = {
  serializedName: "CloudTaskListResult",
  type: {
    name: "Composite",
    className: "CloudTaskListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudTask"
            }
          }
        }
      },
      odatanextLink: {
        serializedName: "odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeNodeListResult: coreHttp.CompositeMapper = {
  serializedName: "ComputeNodeListResult",
  type: {
    name: "Composite",
    className: "ComputeNodeListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ComputeNode"
            }
          }
        }
      },
      odatanextLink: {
        serializedName: "odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};
